
lwc_nist_benchmark_stm32f051r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800523c  0800523c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800523c  0800523c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800523c  0800523c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000080  080052c4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  080052c4  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f91f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e7  00000000  00000000  0002f9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000320b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00032df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c30  00000000  00000000  00033a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f789  00000000  00000000  00048668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077e59  00000000  00000000  00057df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfc4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c8  00000000  00000000  000cfca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004dc4 	.word	0x08004dc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08004dc4 	.word	0x08004dc4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800024e:	6959      	ldr	r1, [r3, #20]
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4013      	ands	r3, r2
 8000260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000262:	68fb      	ldr	r3, [r7, #12]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fa78 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8dc 	bl	8000438 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000280:	f000 f86e 	bl	8000360 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000284:	f000 f8a8 	bl	80003d8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000288:	f003 f814 	bl	80032b4 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <main+0x28>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 face 	bl	8000830 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 8000294:	e7f8      	b.n	8000288 <main+0x18>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	000f4240 	.word	0x000f4240

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b097      	sub	sp, #92	; 0x5c
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2428      	movs	r4, #40	; 0x28
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2330      	movs	r3, #48	; 0x30
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f003 fbc0 	bl	8003a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	2318      	movs	r3, #24
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	0018      	movs	r0, r3
 80002b8:	2310      	movs	r3, #16
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f003 fbb8 	bl	8003a32 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2314      	movs	r3, #20
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f003 fbb1 	bl	8003a32 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2202      	movs	r2, #2
 80002e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	0312      	lsls	r2, r2, #12
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fd07 	bl	8000d14 <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800030a:	f000 f89f 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	2118      	movs	r1, #24
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2100      	movs	r1, #0
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f80b 	bl	8001348 <HAL_RCC_ClockConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000336:	f000 f889 	bl	800044c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f94f 	bl	80015ec <HAL_RCCEx_PeriphCLKConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000352:	f000 f87b 	bl	800044c <Error_Handler>
  }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b017      	add	sp, #92	; 0x5c
 800035c:	bd90      	pop	{r4, r7, pc}
	...

08000360 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2308      	movs	r3, #8
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f003 fb5f 	bl	8003a32 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <MX_TIM6_Init+0x70>)
 8000378:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_TIM6_Init+0x6c>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000388:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_TIM6_Init+0x74>)
 800038a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_TIM6_Init+0x6c>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fa07 	bl	80017a8 <HAL_TIM_Base_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800039e:	f000 f855 	bl	800044c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003ae:	003a      	movs	r2, r7
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_TIM6_Init+0x6c>)
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fc7d 	bl	8001cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80003be:	f000 f845 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	20000640 	.word	0x20000640
 80003d0:	40001000 	.word	0x40001000
 80003d4:	0000ffff 	.word	0x0000ffff

080003d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <MX_USART1_UART_Init+0x5c>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003e4:	22e1      	movs	r2, #225	; 0xe1
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fcb7 	bl	8001d90 <HAL_UART_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 f811 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200005bc 	.word	0x200005bc
 8000434:	40013800 	.word	0x40013800

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff feff 	bl	8000244 <LL_AHB1_GRP1_EnableClock>

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	619a      	str	r2, [r3, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	2201      	movs	r2, #1
 8000470:	4013      	ands	r3, r2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0549      	lsls	r1, r1, #21
 8000480:	430a      	orrs	r2, r1
 8000482:	61da      	str	r2, [r3, #28]
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_MspInit+0x44>)
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	055b      	lsls	r3, r3, #21
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <HAL_TIM_Base_MspInit+0x44>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d113      	bne.n	80004da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <HAL_TIM_Base_MspInit+0x48>)
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_TIM_Base_MspInit+0x48>)
 80004b8:	2110      	movs	r1, #16
 80004ba:	430a      	orrs	r2, r1
 80004bc:	61da      	str	r2, [r3, #28]
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_TIM_Base_MspInit+0x48>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	2210      	movs	r2, #16
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2011      	movs	r0, #17
 80004d0:	f000 fa7e 	bl	80009d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004d4:	2011      	movs	r0, #17
 80004d6:	f000 fa90 	bl	80009fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40001000 	.word	0x40001000
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	2414      	movs	r4, #20
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f003 fa97 	bl	8003a32 <memset>
  if(huart->Instance==USART1)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <HAL_UART_MspInit+0x94>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d133      	bne.n	8000576 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <HAL_UART_MspInit+0x98>)
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_UART_MspInit+0x98>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	01c9      	lsls	r1, r1, #7
 8000518:	430a      	orrs	r2, r1
 800051a:	619a      	str	r2, [r3, #24]
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_UART_MspInit+0x98>)
 800051e:	699a      	ldr	r2, [r3, #24]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_UART_MspInit+0x98>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_UART_MspInit+0x98>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_UART_MspInit+0x98>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	22c0      	movs	r2, #192	; 0xc0
 800054a:	00d2      	lsls	r2, r2, #3
 800054c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2203      	movs	r2, #3
 8000560:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	187a      	adds	r2, r7, r1
 800056a:	2390      	movs	r3, #144	; 0x90
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fa5f 	bl	8000a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b00b      	add	sp, #44	; 0x2c
 800057c:	bd90      	pop	{r4, r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f924 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <TIM6_DAC_IRQHandler+0x14>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 f9c2 	bl	8001948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000640 	.word	0x20000640

080005d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e00a      	b.n	80005f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005e2:	e000      	b.n	80005e6 <_read+0x16>
 80005e4:	bf00      	nop
 80005e6:	0001      	movs	r1, r0
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60ba      	str	r2, [r7, #8]
 80005ee:	b2ca      	uxtb	r2, r1
 80005f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf0      	blt.n	80005e2 <_read+0x12>
	}

return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b006      	add	sp, #24
 8000608:	bd80      	pop	{r7, pc}

0800060a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	60b9      	str	r1, [r7, #8]
 8000614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e009      	b.n	8000630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	0018      	movs	r0, r3
 8000626:	e000      	b.n	800062a <_write+0x20>
 8000628:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf1      	blt.n	800061c <_write+0x12>
	}
	return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	0018      	movs	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	b006      	add	sp, #24
 8000640:	bd80      	pop	{r7, pc}

08000642 <_close>:

int _close(int file)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	return -1;
 800064a:	2301      	movs	r3, #1
 800064c:	425b      	negs	r3, r3
}
 800064e:	0018      	movs	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}

08000656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	0192      	lsls	r2, r2, #6
 8000666:	605a      	str	r2, [r3, #4]
	return 0;
 8000668:	2300      	movs	r3, #0
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}

08000672 <_isatty>:

int _isatty(int file)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	return 1;
 800067a:	2301      	movs	r3, #1
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
	return 0;
 8000690:	2300      	movs	r3, #0
}
 8000692:	0018      	movs	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	b004      	add	sp, #16
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	18d3      	adds	r3, r2, r3
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f003 f95c 	bl	8003988 <__errno>
 80006d0:	0003      	movs	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	425b      	negs	r3, r3
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <_sbrk+0x64>)
 80006ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b006      	add	sp, #24
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20002000 	.word	0x20002000
 80006fc:	00000400 	.word	0x00000400
 8000700:	2000009c 	.word	0x2000009c
 8000704:	200006d0 	.word	0x200006d0

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000716:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490e      	ldr	r1, [pc, #56]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0b      	ldr	r4, [pc, #44]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800073e:	f7ff ffe3 	bl	8000708 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000742:	f003 f927 	bl	8003994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd93 	bl	8000270 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   r0, =_estack
 800074c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000758:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 800075c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000760:	200006d0 	.word	0x200006d0

08000764 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_COMP_IRQHandler>
	...

08000768 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_Init+0x24>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_Init+0x24>)
 8000772:	2110      	movs	r1, #16
 8000774:	430a      	orrs	r2, r1
 8000776:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f809 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077e:	f7ff fe6b 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_InitTick+0x5c>)
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_InitTick+0x60>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	0019      	movs	r1, r3
 80007a2:	23fa      	movs	r3, #250	; 0xfa
 80007a4:	0098      	lsls	r0, r3, #2
 80007a6:	f7ff fcc1 	bl	800012c <__udivsi3>
 80007aa:	0003      	movs	r3, r0
 80007ac:	0019      	movs	r1, r3
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fcbc 	bl	800012c <__udivsi3>
 80007b4:	0003      	movs	r3, r0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f92f 	bl	8000a1a <HAL_SYSTICK_Config>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e00f      	b.n	80007e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d80b      	bhi.n	80007e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	2301      	movs	r3, #1
 80007ce:	425b      	negs	r3, r3
 80007d0:	2200      	movs	r2, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 f8fc 	bl	80009d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_InitTick+0x64>)
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b003      	add	sp, #12
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x1c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x20>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	18d2      	adds	r2, r2, r3
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_IncTick+0x20>)
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000008 	.word	0x20000008
 8000818:	20000688 	.word	0x20000688

0800081c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000688 	.word	0x20000688

08000830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000838:	f7ff fff0 	bl	800081c <HAL_GetTick>
 800083c:	0003      	movs	r3, r0
 800083e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	d005      	beq.n	8000856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_Delay+0x44>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	001a      	movs	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	189b      	adds	r3, r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	f7ff ffe0 	bl	800081c <HAL_GetTick>
 800085c:	0002      	movs	r2, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	429a      	cmp	r2, r3
 8000866:	d8f7      	bhi.n	8000858 <HAL_Delay+0x28>
  {
  }
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b7f      	cmp	r3, #127	; 0x7f
 800088a:	d809      	bhi.n	80008a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	001a      	movs	r2, r3
 8000892:	231f      	movs	r3, #31
 8000894:	401a      	ands	r2, r3
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <__NVIC_EnableIRQ+0x30>)
 8000898:	2101      	movs	r1, #1
 800089a:	4091      	lsls	r1, r2
 800089c:	000a      	movs	r2, r1
 800089e:	601a      	str	r2, [r3, #0]
  }
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	0002      	movs	r2, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b7f      	cmp	r3, #127	; 0x7f
 80008c0:	d828      	bhi.n	8000914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c2:	4a2f      	ldr	r2, [pc, #188]	; (8000980 <__NVIC_SetPriority+0xd4>)
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	33c0      	adds	r3, #192	; 0xc0
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	589b      	ldr	r3, [r3, r2]
 80008d2:	1dfa      	adds	r2, r7, #7
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	0011      	movs	r1, r2
 80008d8:	2203      	movs	r2, #3
 80008da:	400a      	ands	r2, r1
 80008dc:	00d2      	lsls	r2, r2, #3
 80008de:	21ff      	movs	r1, #255	; 0xff
 80008e0:	4091      	lsls	r1, r2
 80008e2:	000a      	movs	r2, r1
 80008e4:	43d2      	mvns	r2, r2
 80008e6:	401a      	ands	r2, r3
 80008e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	22ff      	movs	r2, #255	; 0xff
 80008f0:	401a      	ands	r2, r3
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	0018      	movs	r0, r3
 80008f8:	2303      	movs	r3, #3
 80008fa:	4003      	ands	r3, r0
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000900:	481f      	ldr	r0, [pc, #124]	; (8000980 <__NVIC_SetPriority+0xd4>)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b25b      	sxtb	r3, r3
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	430a      	orrs	r2, r1
 800090c:	33c0      	adds	r3, #192	; 0xc0
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000912:	e031      	b.n	8000978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <__NVIC_SetPriority+0xd8>)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	0019      	movs	r1, r3
 800091c:	230f      	movs	r3, #15
 800091e:	400b      	ands	r3, r1
 8000920:	3b08      	subs	r3, #8
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	3306      	adds	r3, #6
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	3304      	adds	r3, #4
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1dfa      	adds	r2, r7, #7
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	0011      	movs	r1, r2
 8000934:	2203      	movs	r2, #3
 8000936:	400a      	ands	r2, r1
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	21ff      	movs	r1, #255	; 0xff
 800093c:	4091      	lsls	r1, r2
 800093e:	000a      	movs	r2, r1
 8000940:	43d2      	mvns	r2, r2
 8000942:	401a      	ands	r2, r3
 8000944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	401a      	ands	r2, r3
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	0018      	movs	r0, r3
 8000954:	2303      	movs	r3, #3
 8000956:	4003      	ands	r3, r0
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <__NVIC_SetPriority+0xd8>)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	001c      	movs	r4, r3
 8000964:	230f      	movs	r3, #15
 8000966:	4023      	ands	r3, r4
 8000968:	3b08      	subs	r3, #8
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	430a      	orrs	r2, r1
 800096e:	3306      	adds	r3, #6
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	18c3      	adds	r3, r0, r3
 8000974:	3304      	adds	r3, #4
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b003      	add	sp, #12
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	045b      	lsls	r3, r3, #17
 8000998:	429a      	cmp	r2, r3
 800099a:	d301      	bcc.n	80009a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099c:	2301      	movs	r3, #1
 800099e:	e010      	b.n	80009c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <SysTick_Config+0x44>)
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	3a01      	subs	r2, #1
 80009a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a8:	2301      	movs	r3, #1
 80009aa:	425b      	negs	r3, r3
 80009ac:	2103      	movs	r1, #3
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff ff7c 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x44>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x44>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	210f      	movs	r1, #15
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	1c02      	adds	r2, r0, #0
 80009e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ff5d 	bl	80008ac <__NVIC_SetPriority>
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b004      	add	sp, #16
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	0002      	movs	r2, r0
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff ff33 	bl	8000878 <__NVIC_EnableIRQ>
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff ffaf 	bl	8000988 <SysTick_Config>
 8000a2a:	0003      	movs	r3, r0
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	e14f      	b.n	8000ce4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	000a      	movs	r2, r1
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d100      	bne.n	8000a5c <HAL_GPIO_Init+0x28>
 8000a5a:	e140      	b.n	8000cde <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d00b      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a70:	2b11      	cmp	r3, #17
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	43da      	mvns	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	409a      	lsls	r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0xea>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d123      	bne.n	8000b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	08da      	lsrs	r2, r3, #3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3208      	adds	r2, #8
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	58d3      	ldr	r3, [r2, r3]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	4013      	ands	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	220f      	movs	r2, #15
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	691a      	ldr	r2, [r3, #16]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2107      	movs	r1, #7
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	08da      	lsrs	r2, r3, #3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3208      	adds	r2, #8
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	6939      	ldr	r1, [r7, #16]
 8000b64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2203      	movs	r2, #3
 8000b84:	401a      	ands	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	055b      	lsls	r3, r3, #21
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d100      	bne.n	8000ba8 <HAL_GPIO_Init+0x174>
 8000ba6:	e09a      	b.n	8000cde <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	4b53      	ldr	r3, [pc, #332]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	619a      	str	r2, [r3, #24]
 8000bb4:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc0:	4a4f      	ldr	r2, [pc, #316]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	589b      	ldr	r3, [r3, r2]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	43da      	mvns	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	2390      	movs	r3, #144	; 0x90
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d013      	beq.n	8000c16 <HAL_GPIO_Init+0x1e2>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a44      	ldr	r2, [pc, #272]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00d      	beq.n	8000c12 <HAL_GPIO_Init+0x1de>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d007      	beq.n	8000c0e <HAL_GPIO_Init+0x1da>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <HAL_GPIO_Init+0x2d8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_GPIO_Init+0x1d6>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x1e4>
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	e004      	b.n	8000c18 <HAL_GPIO_Init+0x1e4>
 8000c0e:	2302      	movs	r3, #2
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_Init+0x1e4>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x1e4>
 8000c16:	2300      	movs	r3, #0
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	0092      	lsls	r2, r2, #2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c28:	4935      	ldr	r1, [pc, #212]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43da      	mvns	r2, r3
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	029b      	lsls	r3, r3, #10
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43da      	mvns	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	035b      	lsls	r3, r3, #13
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	039b      	lsls	r3, r3, #14
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	40da      	lsrs	r2, r3
 8000cec:	1e13      	subs	r3, r2, #0
 8000cee:	d000      	beq.n	8000cf2 <HAL_GPIO_Init+0x2be>
 8000cf0:	e6a8      	b.n	8000a44 <HAL_GPIO_Init+0x10>
  } 
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b006      	add	sp, #24
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000
 8000d04:	48000400 	.word	0x48000400
 8000d08:	48000800 	.word	0x48000800
 8000d0c:	48000c00 	.word	0x48000c00
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e301      	b.n	800132a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d100      	bne.n	8000d32 <HAL_RCC_OscConfig+0x1e>
 8000d30:	e08d      	b.n	8000e4e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d32:	4bc3      	ldr	r3, [pc, #780]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	220c      	movs	r2, #12
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d00e      	beq.n	8000d5c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3e:	4bc0      	ldr	r3, [pc, #768]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	220c      	movs	r2, #12
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d116      	bne.n	8000d78 <HAL_RCC_OscConfig+0x64>
 8000d4a:	4bbd      	ldr	r3, [pc, #756]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	025b      	lsls	r3, r3, #9
 8000d52:	401a      	ands	r2, r3
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	025b      	lsls	r3, r3, #9
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d10d      	bne.n	8000d78 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	4bb8      	ldr	r3, [pc, #736]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	029b      	lsls	r3, r3, #10
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x56>
 8000d68:	e070      	b.n	8000e4c <HAL_RCC_OscConfig+0x138>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d000      	beq.n	8000d74 <HAL_RCC_OscConfig+0x60>
 8000d72:	e06b      	b.n	8000e4c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e2d8      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d107      	bne.n	8000d90 <HAL_RCC_OscConfig+0x7c>
 8000d80:	4baf      	ldr	r3, [pc, #700]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4bae      	ldr	r3, [pc, #696]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	0249      	lsls	r1, r1, #9
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e02f      	b.n	8000df0 <HAL_RCC_OscConfig+0xdc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10c      	bne.n	8000db2 <HAL_RCC_OscConfig+0x9e>
 8000d98:	4ba9      	ldr	r3, [pc, #676]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	49a9      	ldr	r1, [pc, #676]	; (8001044 <HAL_RCC_OscConfig+0x330>)
 8000da0:	400a      	ands	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	4ba6      	ldr	r3, [pc, #664]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4ba5      	ldr	r3, [pc, #660]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000daa:	49a7      	ldr	r1, [pc, #668]	; (8001048 <HAL_RCC_OscConfig+0x334>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e01e      	b.n	8000df0 <HAL_RCC_OscConfig+0xdc>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b05      	cmp	r3, #5
 8000db8:	d10e      	bne.n	8000dd8 <HAL_RCC_OscConfig+0xc4>
 8000dba:	4ba1      	ldr	r3, [pc, #644]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4ba0      	ldr	r3, [pc, #640]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	02c9      	lsls	r1, r1, #11
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	4b9d      	ldr	r3, [pc, #628]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b9c      	ldr	r3, [pc, #624]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	0249      	lsls	r1, r1, #9
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e00b      	b.n	8000df0 <HAL_RCC_OscConfig+0xdc>
 8000dd8:	4b99      	ldr	r3, [pc, #612]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b98      	ldr	r3, [pc, #608]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dde:	4999      	ldr	r1, [pc, #612]	; (8001044 <HAL_RCC_OscConfig+0x330>)
 8000de0:	400a      	ands	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	4b96      	ldr	r3, [pc, #600]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b95      	ldr	r3, [pc, #596]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	4997      	ldr	r1, [pc, #604]	; (8001048 <HAL_RCC_OscConfig+0x334>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d014      	beq.n	8000e22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fd10 	bl	800081c <HAL_GetTick>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e02:	f7ff fd0b 	bl	800081c <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b64      	cmp	r3, #100	; 0x64
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e28a      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e14:	4b8a      	ldr	r3, [pc, #552]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0xee>
 8000e20:	e015      	b.n	8000e4e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fcfb 	bl	800081c <HAL_GetTick>
 8000e26:	0003      	movs	r3, r0
 8000e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fcf6 	bl	800081c <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e275      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	4b80      	ldr	r3, [pc, #512]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	029b      	lsls	r3, r3, #10
 8000e46:	4013      	ands	r3, r2
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x118>
 8000e4a:	e000      	b.n	8000e4e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2202      	movs	r2, #2
 8000e54:	4013      	ands	r3, r2
 8000e56:	d100      	bne.n	8000e5a <HAL_RCC_OscConfig+0x146>
 8000e58:	e069      	b.n	8000f2e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e5a:	4b79      	ldr	r3, [pc, #484]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	220c      	movs	r2, #12
 8000e60:	4013      	ands	r3, r2
 8000e62:	d00b      	beq.n	8000e7c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e64:	4b76      	ldr	r3, [pc, #472]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d11c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x196>
 8000e70:	4b73      	ldr	r3, [pc, #460]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d116      	bne.n	8000eaa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7c:	4b70      	ldr	r3, [pc, #448]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2202      	movs	r2, #2
 8000e82:	4013      	ands	r3, r2
 8000e84:	d005      	beq.n	8000e92 <HAL_RCC_OscConfig+0x17e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d001      	beq.n	8000e92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e24b      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e92:	4b6b      	ldr	r3, [pc, #428]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	22f8      	movs	r2, #248	; 0xf8
 8000e98:	4393      	bics	r3, r2
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	4b67      	ldr	r3, [pc, #412]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea8:	e041      	b.n	8000f2e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d024      	beq.n	8000efc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb2:	4b63      	ldr	r3, [pc, #396]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b62      	ldr	r3, [pc, #392]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fcad 	bl	800081c <HAL_GetTick>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fca8 	bl	800081c <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e227      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	4b59      	ldr	r3, [pc, #356]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d0f1      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee4:	4b56      	ldr	r3, [pc, #344]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	22f8      	movs	r2, #248	; 0xf8
 8000eea:	4393      	bics	r3, r2
 8000eec:	0019      	movs	r1, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	00da      	lsls	r2, r3, #3
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e018      	b.n	8000f2e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	438a      	bics	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc88 	bl	800081c <HAL_GetTick>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fc83 	bl	800081c <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e202      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2202      	movs	r2, #2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d1f1      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2208      	movs	r2, #8
 8000f34:	4013      	ands	r3, r2
 8000f36:	d036      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d019      	beq.n	8000f74 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fc66 	bl	800081c <HAL_GetTick>
 8000f50:	0003      	movs	r3, r0
 8000f52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f56:	f7ff fc61 	bl	800081c <HAL_GetTick>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e1e0      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d0f1      	beq.n	8000f56 <HAL_RCC_OscConfig+0x242>
 8000f72:	e018      	b.n	8000fa6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fc4c 	bl	800081c <HAL_GetTick>
 8000f84:	0003      	movs	r3, r0
 8000f86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fc47 	bl	800081c <HAL_GetTick>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e1c6      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d1f1      	bne.n	8000f8a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2204      	movs	r2, #4
 8000fac:	4013      	ands	r3, r2
 8000fae:	d100      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x29e>
 8000fb0:	e0b4      	b.n	800111c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fb2:	201f      	movs	r0, #31
 8000fb4:	183b      	adds	r3, r7, r0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	69da      	ldr	r2, [r3, #28]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d110      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	69da      	ldr	r2, [r3, #28]
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0549      	lsls	r1, r1, #21
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	61da      	str	r2, [r3, #28]
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	69da      	ldr	r2, [r3, #28]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	055b      	lsls	r3, r3, #21
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fe2:	183b      	adds	r3, r7, r0
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_RCC_OscConfig+0x338>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d11a      	bne.n	800102a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_RCC_OscConfig+0x338>)
 8000ffa:	2180      	movs	r1, #128	; 0x80
 8000ffc:	0049      	lsls	r1, r1, #1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001002:	f7ff fc0b 	bl	800081c <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100c:	f7ff fc06 	bl	800081c <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e185      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4013      	ands	r3, r2
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d10e      	bne.n	8001050 <HAL_RCC_OscConfig+0x33c>
 8001032:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	4b02      	ldr	r3, [pc, #8]	; (8001040 <HAL_RCC_OscConfig+0x32c>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	e035      	b.n	80010ac <HAL_RCC_OscConfig+0x398>
 8001040:	40021000 	.word	0x40021000
 8001044:	fffeffff 	.word	0xfffeffff
 8001048:	fffbffff 	.word	0xfffbffff
 800104c:	40007000 	.word	0x40007000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10c      	bne.n	8001072 <HAL_RCC_OscConfig+0x35e>
 8001058:	4bb6      	ldr	r3, [pc, #728]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4bb5      	ldr	r3, [pc, #724]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800105e:	2101      	movs	r1, #1
 8001060:	438a      	bics	r2, r1
 8001062:	621a      	str	r2, [r3, #32]
 8001064:	4bb3      	ldr	r3, [pc, #716]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001066:	6a1a      	ldr	r2, [r3, #32]
 8001068:	4bb2      	ldr	r3, [pc, #712]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800106a:	2104      	movs	r1, #4
 800106c:	438a      	bics	r2, r1
 800106e:	621a      	str	r2, [r3, #32]
 8001070:	e01c      	b.n	80010ac <HAL_RCC_OscConfig+0x398>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0x380>
 800107a:	4bae      	ldr	r3, [pc, #696]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	4bad      	ldr	r3, [pc, #692]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001080:	2104      	movs	r1, #4
 8001082:	430a      	orrs	r2, r1
 8001084:	621a      	str	r2, [r3, #32]
 8001086:	4bab      	ldr	r3, [pc, #684]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	4baa      	ldr	r3, [pc, #680]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	e00b      	b.n	80010ac <HAL_RCC_OscConfig+0x398>
 8001094:	4ba7      	ldr	r3, [pc, #668]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001096:	6a1a      	ldr	r2, [r3, #32]
 8001098:	4ba6      	ldr	r3, [pc, #664]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800109a:	2101      	movs	r1, #1
 800109c:	438a      	bics	r2, r1
 800109e:	621a      	str	r2, [r3, #32]
 80010a0:	4ba4      	ldr	r3, [pc, #656]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80010a2:	6a1a      	ldr	r2, [r3, #32]
 80010a4:	4ba3      	ldr	r3, [pc, #652]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80010a6:	2104      	movs	r1, #4
 80010a8:	438a      	bics	r2, r1
 80010aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d014      	beq.n	80010de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fbb2 	bl	800081c <HAL_GetTick>
 80010b8:	0003      	movs	r3, r0
 80010ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010bc:	e009      	b.n	80010d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff fbad 	bl	800081c <HAL_GetTick>
 80010c2:	0002      	movs	r2, r0
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	4a9b      	ldr	r2, [pc, #620]	; (8001338 <HAL_RCC_OscConfig+0x624>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e12b      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d2:	4b98      	ldr	r3, [pc, #608]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x3aa>
 80010dc:	e013      	b.n	8001106 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fb9d 	bl	800081c <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e6:	e009      	b.n	80010fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e8:	f7ff fb98 	bl	800081c <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4a91      	ldr	r2, [pc, #580]	; (8001338 <HAL_RCC_OscConfig+0x624>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e116      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010fc:	4b8d      	ldr	r3, [pc, #564]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	2202      	movs	r2, #2
 8001102:	4013      	ands	r3, r2
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001106:	231f      	movs	r3, #31
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d105      	bne.n	800111c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001110:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001112:	69da      	ldr	r2, [r3, #28]
 8001114:	4b87      	ldr	r3, [pc, #540]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001116:	4989      	ldr	r1, [pc, #548]	; (800133c <HAL_RCC_OscConfig+0x628>)
 8001118:	400a      	ands	r2, r1
 800111a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2210      	movs	r2, #16
 8001122:	4013      	ands	r3, r2
 8001124:	d063      	beq.n	80011ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d12a      	bne.n	8001184 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800112e:	4b81      	ldr	r3, [pc, #516]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001132:	4b80      	ldr	r3, [pc, #512]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001134:	2104      	movs	r1, #4
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800113a:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800113c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113e:	4b7d      	ldr	r3, [pc, #500]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001140:	2101      	movs	r1, #1
 8001142:	430a      	orrs	r2, r1
 8001144:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fb69 	bl	800081c <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001150:	f7ff fb64 	bl	800081c <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e0e3      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001162:	4b74      	ldr	r3, [pc, #464]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d0f1      	beq.n	8001150 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800116c:	4b71      	ldr	r3, [pc, #452]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001170:	22f8      	movs	r2, #248	; 0xf8
 8001172:	4393      	bics	r3, r2
 8001174:	0019      	movs	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	00da      	lsls	r2, r3, #3
 800117c:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
 8001182:	e034      	b.n	80011ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	3305      	adds	r3, #5
 800118a:	d111      	bne.n	80011b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800118c:	4b69      	ldr	r3, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800118e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001192:	2104      	movs	r1, #4
 8001194:	438a      	bics	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800119a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119c:	22f8      	movs	r2, #248	; 0xf8
 800119e:	4393      	bics	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	00da      	lsls	r2, r3, #3
 80011a8:	4b62      	ldr	r3, [pc, #392]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011aa:	430a      	orrs	r2, r1
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
 80011ae:	e01e      	b.n	80011ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011b0:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b4:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011b6:	2104      	movs	r1, #4
 80011b8:	430a      	orrs	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c0:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fb28 	bl	800081c <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011d2:	f7ff fb23 	bl	800081c <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0a2      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f1      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <HAL_RCC_OscConfig+0x4e4>
 80011f6:	e097      	b.n	8001328 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	220c      	movs	r2, #12
 80011fe:	4013      	ands	r3, r2
 8001200:	2b08      	cmp	r3, #8
 8001202:	d100      	bne.n	8001206 <HAL_RCC_OscConfig+0x4f2>
 8001204:	e06b      	b.n	80012de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d14c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001214:	494a      	ldr	r1, [pc, #296]	; (8001340 <HAL_RCC_OscConfig+0x62c>)
 8001216:	400a      	ands	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff faff 	bl	800081c <HAL_GetTick>
 800121e:	0003      	movs	r3, r0
 8001220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff fafa 	bl	800081c <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e079      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	049b      	lsls	r3, r3, #18
 800123e:	4013      	ands	r3, r2
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	220f      	movs	r2, #15
 8001248:	4393      	bics	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001250:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001252:	430a      	orrs	r2, r1
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a3a      	ldr	r2, [pc, #232]	; (8001344 <HAL_RCC_OscConfig+0x630>)
 800125c:	4013      	ands	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	431a      	orrs	r2, r3
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0449      	lsls	r1, r1, #17
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff facd 	bl	800081c <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fac8 	bl	800081c <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e047      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	049b      	lsls	r3, r3, #18
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x574>
 80012a6:	e03f      	b.n	8001328 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80012ae:	4924      	ldr	r1, [pc, #144]	; (8001340 <HAL_RCC_OscConfig+0x62c>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fab2 	bl	800081c <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff faad 	bl	800081c <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e02c      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	049b      	lsls	r3, r3, #18
 80012d8:	4013      	ands	r3, r2
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x5aa>
 80012dc:	e024      	b.n	8001328 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e01f      	b.n	800132a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_RCC_OscConfig+0x620>)
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	025b      	lsls	r3, r3, #9
 80012fc:	401a      	ands	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	429a      	cmp	r2, r3
 8001304:	d10e      	bne.n	8001324 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	220f      	movs	r2, #15
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d107      	bne.n	8001324 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	23f0      	movs	r3, #240	; 0xf0
 8001318:	039b      	lsls	r3, r3, #14
 800131a:	401a      	ands	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b008      	add	sp, #32
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40021000 	.word	0x40021000
 8001338:	00001388 	.word	0x00001388
 800133c:	efffffff 	.word	0xefffffff
 8001340:	feffffff 	.word	0xfeffffff
 8001344:	ffc2ffff 	.word	0xffc2ffff

08001348 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b3      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d911      	bls.n	800138e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b58      	ldr	r3, [pc, #352]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2201      	movs	r2, #1
 8001370:	4393      	bics	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	4b55      	ldr	r3, [pc, #340]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e09a      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d015      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2204      	movs	r2, #4
 800139e:	4013      	ands	r3, r2
 80013a0:	d006      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013a2:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80013a8:	21e0      	movs	r1, #224	; 0xe0
 80013aa:	00c9      	lsls	r1, r1, #3
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	22f0      	movs	r2, #240	; 0xf0
 80013b6:	4393      	bics	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	d040      	beq.n	8001450 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	029b      	lsls	r3, r3, #10
 80013de:	4013      	ands	r3, r2
 80013e0:	d114      	bne.n	800140c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06e      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	049b      	lsls	r3, r3, #18
 80013f6:	4013      	ands	r3, r2
 80013f8:	d108      	bne.n	800140c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e062      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e05b      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	4393      	bics	r3, r2
 8001414:	0019      	movs	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff f9fc 	bl	800081c <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001428:	e009      	b.n	800143e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142a:	f7ff f9f7 	bl	800081c <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_RCC_ClockConfig+0x18c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e042      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	220c      	movs	r2, #12
 8001444:	401a      	ands	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1ec      	bne.n	800142a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d211      	bcs.n	8001482 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	4393      	bics	r3, r2
 8001466:	0019      	movs	r1, r3
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_RCC_ClockConfig+0x184>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d001      	beq.n	8001482 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e020      	b.n	80014c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2204      	movs	r2, #4
 8001488:	4013      	ands	r3, r2
 800148a:	d009      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_RCC_ClockConfig+0x190>)
 8001492:	4013      	ands	r3, r2
 8001494:	0019      	movs	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014a0:	f000 f820 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80014a4:	0001      	movs	r1, r0
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_RCC_ClockConfig+0x188>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	220f      	movs	r2, #15
 80014ae:	4013      	ands	r3, r2
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x194>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	000a      	movs	r2, r1
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x198>)
 80014ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff f967 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	00001388 	.word	0x00001388
 80014d8:	fffff8ff 	.word	0xfffff8ff
 80014dc:	08004fec 	.word	0x08004fec
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b08f      	sub	sp, #60	; 0x3c
 80014e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014ea:	2314      	movs	r3, #20
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	4a2b      	ldr	r2, [pc, #172]	; (800159c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014f2:	c313      	stmia	r3!, {r0, r1, r4}
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014fe:	c313      	stmia	r3!, {r0, r1, r4}
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	220c      	movs	r2, #12
 8001522:	4013      	ands	r3, r2
 8001524:	2b04      	cmp	r3, #4
 8001526:	d002      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x4a>
 8001528:	2b08      	cmp	r3, #8
 800152a:	d003      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x50>
 800152c:	e02d      	b.n	800158a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001532:	e02d      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	220f      	movs	r2, #15
 800153a:	4013      	ands	r3, r2
 800153c:	2214      	movs	r2, #20
 800153e:	18ba      	adds	r2, r7, r2
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	220f      	movs	r2, #15
 800154a:	4013      	ands	r3, r2
 800154c:	1d3a      	adds	r2, r7, #4
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	4013      	ands	r3, r2
 800155a:	d009      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800155c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001560:	f7fe fde4 	bl	800012c <__udivsi3>
 8001564:	0003      	movs	r3, r0
 8001566:	001a      	movs	r2, r3
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4353      	muls	r3, r2
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
 800156e:	e009      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001572:	000a      	movs	r2, r1
 8001574:	0152      	lsls	r2, r2, #5
 8001576:	1a52      	subs	r2, r2, r1
 8001578:	0193      	lsls	r3, r2, #6
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	185b      	adds	r3, r3, r1
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001588:	e002      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800158e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b00f      	add	sp, #60	; 0x3c
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	08004ddc 	.word	0x08004ddc
 80015a0:	08004dec 	.word	0x08004dec
 80015a4:	40021000 	.word	0x40021000
 80015a8:	007a1200 	.word	0x007a1200

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_RCC_GetHCLKFreq+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20000000 	.word	0x20000000

080015c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015c4:	f7ff fff2 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015c8:	0001      	movs	r1, r0
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	2207      	movs	r2, #7
 80015d2:	4013      	ands	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	40d9      	lsrs	r1, r3
 80015da:	000b      	movs	r3, r1
}    
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08004ffc 	.word	0x08004ffc

080015ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001608:	e08e      	b.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2017      	movs	r0, #23
 800160c:	183b      	adds	r3, r7, r0
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	055b      	lsls	r3, r3, #21
 800161a:	4013      	ands	r3, r2
 800161c:	d110      	bne.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0549      	lsls	r1, r1, #21
 8001628:	430a      	orrs	r2, r1
 800162a:	61da      	str	r2, [r3, #28]
 800162c:	4b58      	ldr	r3, [pc, #352]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	055b      	lsls	r3, r3, #21
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	183b      	adds	r3, r7, r0
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b54      	ldr	r3, [pc, #336]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4013      	ands	r3, r2
 800164a:	d11a      	bne.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164c:	4b51      	ldr	r3, [pc, #324]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0049      	lsls	r1, r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff f8df 	bl	800081c <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	e008      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001664:	f7ff f8da 	bl	800081c <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e087      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4013      	ands	r3, r2
 8001680:	d0f0      	beq.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d034      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	23c0      	movs	r3, #192	; 0xc0
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4013      	ands	r3, r2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d02c      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0249      	lsls	r1, r1, #9
 80016b8:	430a      	orrs	r2, r1
 80016ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016c2:	4936      	ldr	r1, [pc, #216]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016c8:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff f8a1 	bl	800081c <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	e009      	b.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff f89c 	bl	800081c <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	4a2d      	ldr	r2, [pc, #180]	; (80017a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e048      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a25      	ldr	r2, [pc, #148]	; (8001798 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001704:	4013      	ands	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800170e:	430a      	orrs	r2, r1
 8001710:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001712:	2317      	movs	r3, #23
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800171e:	69da      	ldr	r2, [r3, #28]
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001722:	4920      	ldr	r1, [pc, #128]	; (80017a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001724:	400a      	ands	r2, r1
 8001726:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	d009      	beq.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	2203      	movs	r2, #3
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001742:	430a      	orrs	r2, r1
 8001744:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2220      	movs	r2, #32
 800174c:	4013      	ands	r3, r2
 800174e:	d009      	beq.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	2210      	movs	r2, #16
 8001756:	4393      	bics	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001760:	430a      	orrs	r2, r1
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4013      	ands	r3, r2
 800176e:	d009      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001780:	430a      	orrs	r2, r1
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b006      	add	sp, #24
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40021000 	.word	0x40021000
 8001794:	40007000 	.word	0x40007000
 8001798:	fffffcff 	.word	0xfffffcff
 800179c:	fffeffff 	.word	0xfffeffff
 80017a0:	00001388 	.word	0x00001388
 80017a4:	efffffff 	.word	0xefffffff

080017a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e042      	b.n	8001840 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	223d      	movs	r2, #61	; 0x3d
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	223c      	movs	r2, #60	; 0x3c
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe fe65 	bl	80004a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	223d      	movs	r2, #61	; 0x3d
 80017da:	2102      	movs	r1, #2
 80017dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3304      	adds	r3, #4
 80017e6:	0019      	movs	r1, r3
 80017e8:	0010      	movs	r0, r2
 80017ea:	f000 f9e3 	bl	8001bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2246      	movs	r2, #70	; 0x46
 80017f2:	2101      	movs	r1, #1
 80017f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223e      	movs	r2, #62	; 0x3e
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	223f      	movs	r2, #63	; 0x3f
 8001802:	2101      	movs	r1, #1
 8001804:	5499      	strb	r1, [r3, r2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2241      	movs	r2, #65	; 0x41
 8001812:	2101      	movs	r1, #1
 8001814:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2242      	movs	r2, #66	; 0x42
 800181a:	2101      	movs	r1, #1
 800181c:	5499      	strb	r1, [r3, r2]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2243      	movs	r2, #67	; 0x43
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2244      	movs	r2, #68	; 0x44
 800182a:	2101      	movs	r1, #1
 800182c:	5499      	strb	r1, [r3, r2]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2245      	movs	r2, #69	; 0x45
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	223d      	movs	r2, #61	; 0x3d
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	223d      	movs	r2, #61	; 0x3d
 8001854:	5c9b      	ldrb	r3, [r3, r2]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d001      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e03b      	b.n	80018d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	223d      	movs	r2, #61	; 0x3d
 8001864:	2102      	movs	r1, #2
 8001866:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <HAL_TIM_Base_Start_IT+0x98>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00f      	beq.n	80018a2 <HAL_TIM_Base_Start_IT+0x5a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	429a      	cmp	r2, r3
 800188c:	d009      	beq.n	80018a2 <HAL_TIM_Base_Start_IT+0x5a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d004      	beq.n	80018a2 <HAL_TIM_Base_Start_IT+0x5a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d111      	bne.n	80018c6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b06      	cmp	r3, #6
 80018b2:	d010      	beq.n	80018d6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c4:	e007      	b.n	80018d6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40014000 	.word	0x40014000

080018ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	438a      	bics	r2, r1
 8001902:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_TIM_Base_Stop_IT+0x54>)
 800190c:	4013      	ands	r3, r2
 800190e:	d10d      	bne.n	800192c <HAL_TIM_Base_Stop_IT+0x40>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_TIM_Base_Stop_IT+0x58>)
 8001918:	4013      	ands	r3, r2
 800191a:	d107      	bne.n	800192c <HAL_TIM_Base_Stop_IT+0x40>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	223d      	movs	r2, #61	; 0x3d
 8001930:	2101      	movs	r1, #1
 8001932:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	00001111 	.word	0x00001111
 8001944:	00000444 	.word	0x00000444

08001948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	2b02      	cmp	r3, #2
 800195c:	d124      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d11d      	bne.n	80019a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2203      	movs	r2, #3
 8001972:	4252      	negs	r2, r2
 8001974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2203      	movs	r2, #3
 8001984:	4013      	ands	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 f8fa 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001990:	e007      	b.n	80019a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f8ed 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f000 f8f9 	bl	8001b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d125      	bne.n	8001a02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d11e      	bne.n	8001a02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2205      	movs	r2, #5
 80019ca:	4252      	negs	r2, r2
 80019cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	23c0      	movs	r3, #192	; 0xc0
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 f8cd 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 80019ea:	e007      	b.n	80019fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f8c0 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f8cc 	bl	8001b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d124      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2208      	movs	r2, #8
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d11d      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2209      	movs	r2, #9
 8001a24:	4252      	negs	r2, r2
 8001a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	2203      	movs	r2, #3
 8001a36:	4013      	ands	r3, r2
 8001a38:	d004      	beq.n	8001a44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f8a1 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001a42:	e007      	b.n	8001a54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 f894 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f8a0 	bl	8001b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2210      	movs	r2, #16
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d125      	bne.n	8001ab4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d11e      	bne.n	8001ab4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2211      	movs	r2, #17
 8001a7c:	4252      	negs	r2, r2
 8001a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2208      	movs	r2, #8
 8001a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	23c0      	movs	r3, #192	; 0xc0
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f874 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e007      	b.n	8001aae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 f867 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f873 	bl	8001b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2201      	movs	r2, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4252      	negs	r2, r2
 8001ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f001 fe63 	bl	80037a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b80      	cmp	r3, #128	; 0x80
 8001aee:	d10f      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b80      	cmp	r3, #128	; 0x80
 8001afc:	d108      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2281      	movs	r2, #129	; 0x81
 8001b04:	4252      	negs	r2, r2
 8001b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 f938 	bl	8001d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b40      	cmp	r3, #64	; 0x40
 8001b1c:	d10f      	bne.n	8001b3e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d108      	bne.n	8001b3e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2241      	movs	r2, #65	; 0x41
 8001b32:	4252      	negs	r2, r2
 8001b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f000 f833 	bl	8001ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2220      	movs	r2, #32
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d10f      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d108      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2221      	movs	r2, #33	; 0x21
 8001b60:	4252      	negs	r2, r2
 8001b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f902 	bl	8001d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <TIM_Base_SetConfig+0xe4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d008      	beq.n	8001bde <TIM_Base_SetConfig+0x2a>
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d003      	beq.n	8001bde <TIM_Base_SetConfig+0x2a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <TIM_Base_SetConfig+0xe8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2270      	movs	r2, #112	; 0x70
 8001be2:	4393      	bics	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <TIM_Base_SetConfig+0xe4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d018      	beq.n	8001c2a <TIM_Base_SetConfig+0x76>
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d013      	beq.n	8001c2a <TIM_Base_SetConfig+0x76>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <TIM_Base_SetConfig+0xe8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00f      	beq.n	8001c2a <TIM_Base_SetConfig+0x76>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <TIM_Base_SetConfig+0xec>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00b      	beq.n	8001c2a <TIM_Base_SetConfig+0x76>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <TIM_Base_SetConfig+0xf0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <TIM_Base_SetConfig+0x76>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <TIM_Base_SetConfig+0xf4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d003      	beq.n	8001c2a <TIM_Base_SetConfig+0x76>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a21      	ldr	r2, [pc, #132]	; (8001cac <TIM_Base_SetConfig+0xf8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d108      	bne.n	8001c3c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <TIM_Base_SetConfig+0xfc>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	4393      	bics	r3, r2
 8001c42:	001a      	movs	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <TIM_Base_SetConfig+0xe4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00b      	beq.n	8001c82 <TIM_Base_SetConfig+0xce>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <TIM_Base_SetConfig+0xf0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <TIM_Base_SetConfig+0xce>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <TIM_Base_SetConfig+0xf4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d003      	beq.n	8001c82 <TIM_Base_SetConfig+0xce>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <TIM_Base_SetConfig+0xf8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d103      	bne.n	8001c8a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	615a      	str	r2, [r3, #20]
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40002000 	.word	0x40002000
 8001ca4:	40014000 	.word	0x40014000
 8001ca8:	40014400 	.word	0x40014400
 8001cac:	40014800 	.word	0x40014800
 8001cb0:	fffffcff 	.word	0xfffffcff

08001cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	223c      	movs	r2, #60	; 0x3c
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e047      	b.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223c      	movs	r2, #60	; 0x3c
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	223d      	movs	r2, #61	; 0x3d
 8001cd8:	2102      	movs	r1, #2
 8001cda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2270      	movs	r2, #112	; 0x70
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00f      	beq.n	8001d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	05db      	lsls	r3, r3, #23
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d009      	beq.n	8001d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d10c      	bne.n	8001d4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	4393      	bics	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	223d      	movs	r2, #61	; 0x3d
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	223c      	movs	r2, #60	; 0x3c
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40012c00 	.word	0x40012c00
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40014000 	.word	0x40014000

08001d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e044      	b.n	8001e2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2274      	movs	r2, #116	; 0x74
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7fe fb99 	bl	80004ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2224      	movs	r2, #36	; 0x24
 8001dbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f8da 	bl	8001f8c <UART_SetConfig>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e024      	b.n	8001e2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 fa0d 	bl	800220c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	490d      	ldr	r1, [pc, #52]	; (8001e34 <HAL_UART_Init+0xa4>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	212a      	movs	r1, #42	; 0x2a
 8001e0e:	438a      	bics	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 faa5 	bl	8002374 <UART_CheckIdleState>
 8001e2a:	0003      	movs	r3, r0
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	ffffb7ff 	.word	0xffffb7ff

08001e38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	1dbb      	adds	r3, r7, #6
 8001e46:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d000      	beq.n	8001e52 <HAL_UART_Transmit+0x1a>
 8001e50:	e096      	b.n	8001f80 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_UART_Transmit+0x28>
 8001e58:	1dbb      	adds	r3, r7, #6
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e08e      	b.n	8001f82 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d109      	bne.n	8001e84 <HAL_UART_Transmit+0x4c>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d001      	beq.n	8001e84 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e07e      	b.n	8001f82 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2274      	movs	r2, #116	; 0x74
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Transmit+0x5a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e077      	b.n	8001f82 <HAL_UART_Transmit+0x14a>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2274      	movs	r2, #116	; 0x74
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2221      	movs	r2, #33	; 0x21
 8001ea6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fcb8 	bl	800081c <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1dba      	adds	r2, r7, #6
 8001eb4:	2150      	movs	r1, #80	; 0x50
 8001eb6:	8812      	ldrh	r2, [r2, #0]
 8001eb8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1dba      	adds	r2, r7, #6
 8001ebe:	2152      	movs	r1, #82	; 0x52
 8001ec0:	8812      	ldrh	r2, [r2, #0]
 8001ec2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	015b      	lsls	r3, r3, #5
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d108      	bne.n	8001ee2 <HAL_UART_Transmit+0xaa>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	e003      	b.n	8001eea <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2274      	movs	r2, #116	; 0x74
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001ef2:	e02d      	b.n	8001f50 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	0013      	movs	r3, r2
 8001efe:	2200      	movs	r2, #0
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	f000 fa7f 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e039      	b.n	8001f82 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	881a      	ldrh	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	05d2      	lsls	r2, r2, #23
 8001f1e:	0dd2      	lsrs	r2, r2, #23
 8001f20:	b292      	uxth	r2, r2
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	3302      	adds	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e008      	b.n	8001f3e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b292      	uxth	r2, r2
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2252      	movs	r2, #82	; 0x52
 8001f42:	5a9b      	ldrh	r3, [r3, r2]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2252      	movs	r2, #82	; 0x52
 8001f4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2252      	movs	r2, #82	; 0x52
 8001f54:	5a9b      	ldrh	r3, [r3, r2]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1cb      	bne.n	8001ef4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	0013      	movs	r3, r2
 8001f66:	2200      	movs	r2, #0
 8001f68:	2140      	movs	r1, #64	; 0x40
 8001f6a:	f000 fa4b 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 8001f6e:	1e03      	subs	r3, r0, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e005      	b.n	8001f82 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001f80:	2302      	movs	r3, #2
  }
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b008      	add	sp, #32
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f94:	231e      	movs	r3, #30
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8d      	ldr	r2, [pc, #564]	; (80021f0 <UART_SetConfig+0x264>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a88      	ldr	r2, [pc, #544]	; (80021f4 <UART_SetConfig+0x268>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a7f      	ldr	r2, [pc, #508]	; (80021f8 <UART_SetConfig+0x26c>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a7b      	ldr	r2, [pc, #492]	; (80021fc <UART_SetConfig+0x270>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d127      	bne.n	8002062 <UART_SetConfig+0xd6>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <UART_SetConfig+0x274>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	2203      	movs	r2, #3
 8002018:	4013      	ands	r3, r2
 800201a:	2b03      	cmp	r3, #3
 800201c:	d00d      	beq.n	800203a <UART_SetConfig+0xae>
 800201e:	d81b      	bhi.n	8002058 <UART_SetConfig+0xcc>
 8002020:	2b02      	cmp	r3, #2
 8002022:	d014      	beq.n	800204e <UART_SetConfig+0xc2>
 8002024:	d818      	bhi.n	8002058 <UART_SetConfig+0xcc>
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <UART_SetConfig+0xa4>
 800202a:	2b01      	cmp	r3, #1
 800202c:	d00a      	beq.n	8002044 <UART_SetConfig+0xb8>
 800202e:	e013      	b.n	8002058 <UART_SetConfig+0xcc>
 8002030:	231f      	movs	r3, #31
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e021      	b.n	800207e <UART_SetConfig+0xf2>
 800203a:	231f      	movs	r3, #31
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2202      	movs	r2, #2
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e01c      	b.n	800207e <UART_SetConfig+0xf2>
 8002044:	231f      	movs	r3, #31
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	2204      	movs	r2, #4
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e017      	b.n	800207e <UART_SetConfig+0xf2>
 800204e:	231f      	movs	r3, #31
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2208      	movs	r2, #8
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e012      	b.n	800207e <UART_SetConfig+0xf2>
 8002058:	231f      	movs	r3, #31
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2210      	movs	r2, #16
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e00d      	b.n	800207e <UART_SetConfig+0xf2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a67      	ldr	r2, [pc, #412]	; (8002204 <UART_SetConfig+0x278>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d104      	bne.n	8002076 <UART_SetConfig+0xea>
 800206c:	231f      	movs	r3, #31
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e003      	b.n	800207e <UART_SetConfig+0xf2>
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2210      	movs	r2, #16
 800207c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	429a      	cmp	r2, r3
 8002088:	d15d      	bne.n	8002146 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800208a:	231f      	movs	r3, #31
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d015      	beq.n	80020c0 <UART_SetConfig+0x134>
 8002094:	dc18      	bgt.n	80020c8 <UART_SetConfig+0x13c>
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00d      	beq.n	80020b6 <UART_SetConfig+0x12a>
 800209a:	dc15      	bgt.n	80020c8 <UART_SetConfig+0x13c>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <UART_SetConfig+0x11a>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d005      	beq.n	80020b0 <UART_SetConfig+0x124>
 80020a4:	e010      	b.n	80020c8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020a6:	f7ff fa8b 	bl	80015c0 <HAL_RCC_GetPCLK1Freq>
 80020aa:	0003      	movs	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
        break;
 80020ae:	e012      	b.n	80020d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020b0:	4b55      	ldr	r3, [pc, #340]	; (8002208 <UART_SetConfig+0x27c>)
 80020b2:	61bb      	str	r3, [r7, #24]
        break;
 80020b4:	e00f      	b.n	80020d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020b6:	f7ff fa15 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80020ba:	0003      	movs	r3, r0
 80020bc:	61bb      	str	r3, [r7, #24]
        break;
 80020be:	e00a      	b.n	80020d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	61bb      	str	r3, [r7, #24]
        break;
 80020c6:	e006      	b.n	80020d6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020cc:	231e      	movs	r3, #30
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
        break;
 80020d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d100      	bne.n	80020de <UART_SetConfig+0x152>
 80020dc:	e07b      	b.n	80021d6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	18d2      	adds	r2, r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0019      	movs	r1, r3
 80020f0:	0010      	movs	r0, r2
 80020f2:	f7fe f81b 	bl	800012c <__udivsi3>
 80020f6:	0003      	movs	r3, r0
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d91c      	bls.n	800213c <UART_SetConfig+0x1b0>
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	429a      	cmp	r2, r3
 800210a:	d217      	bcs.n	800213c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	b29a      	uxth	r2, r3
 8002110:	200e      	movs	r0, #14
 8002112:	183b      	adds	r3, r7, r0
 8002114:	210f      	movs	r1, #15
 8002116:	438a      	bics	r2, r1
 8002118:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	2207      	movs	r2, #7
 8002122:	4013      	ands	r3, r2
 8002124:	b299      	uxth	r1, r3
 8002126:	183b      	adds	r3, r7, r0
 8002128:	183a      	adds	r2, r7, r0
 800212a:	8812      	ldrh	r2, [r2, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	183a      	adds	r2, r7, r0
 8002136:	8812      	ldrh	r2, [r2, #0]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e04c      	b.n	80021d6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800213c:	231e      	movs	r3, #30
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e047      	b.n	80021d6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002146:	231f      	movs	r3, #31
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d015      	beq.n	800217c <UART_SetConfig+0x1f0>
 8002150:	dc18      	bgt.n	8002184 <UART_SetConfig+0x1f8>
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00d      	beq.n	8002172 <UART_SetConfig+0x1e6>
 8002156:	dc15      	bgt.n	8002184 <UART_SetConfig+0x1f8>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <UART_SetConfig+0x1d6>
 800215c:	2b02      	cmp	r3, #2
 800215e:	d005      	beq.n	800216c <UART_SetConfig+0x1e0>
 8002160:	e010      	b.n	8002184 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002162:	f7ff fa2d 	bl	80015c0 <HAL_RCC_GetPCLK1Freq>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
        break;
 800216a:	e012      	b.n	8002192 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <UART_SetConfig+0x27c>)
 800216e:	61bb      	str	r3, [r7, #24]
        break;
 8002170:	e00f      	b.n	8002192 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002172:	f7ff f9b7 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 8002176:	0003      	movs	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
        break;
 800217a:	e00a      	b.n	8002192 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	61bb      	str	r3, [r7, #24]
        break;
 8002182:	e006      	b.n	8002192 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002188:	231e      	movs	r3, #30
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
        break;
 8002190:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01e      	beq.n	80021d6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	085a      	lsrs	r2, r3, #1
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	18d2      	adds	r2, r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f7fd ffbf 	bl	800012c <__udivsi3>
 80021ae:	0003      	movs	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	d909      	bls.n	80021ce <UART_SetConfig+0x242>
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	025b      	lsls	r3, r3, #9
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d204      	bcs.n	80021ce <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	e003      	b.n	80021d6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80021ce:	231e      	movs	r3, #30
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80021e2:	231e      	movs	r3, #30
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b008      	add	sp, #32
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	ffff69f3 	.word	0xffff69f3
 80021f4:	ffffcfff 	.word	0xffffcfff
 80021f8:	fffff4ff 	.word	0xfffff4ff
 80021fc:	40013800 	.word	0x40013800
 8002200:	40021000 	.word	0x40021000
 8002204:	40004400 	.word	0x40004400
 8002208:	007a1200 	.word	0x007a1200

0800220c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d00b      	beq.n	8002236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <UART_AdvFeatureConfig+0x144>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d00b      	beq.n	8002258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a43      	ldr	r2, [pc, #268]	; (8002354 <UART_AdvFeatureConfig+0x148>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2204      	movs	r2, #4
 800225e:	4013      	ands	r3, r2
 8002260:	d00b      	beq.n	800227a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <UART_AdvFeatureConfig+0x14c>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2208      	movs	r2, #8
 8002280:	4013      	ands	r3, r2
 8002282:	d00b      	beq.n	800229c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <UART_AdvFeatureConfig+0x150>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d00b      	beq.n	80022be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <UART_AdvFeatureConfig+0x154>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	2220      	movs	r2, #32
 80022c4:	4013      	ands	r3, r2
 80022c6:	d00b      	beq.n	80022e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4a25      	ldr	r2, [pc, #148]	; (8002364 <UART_AdvFeatureConfig+0x158>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	4013      	ands	r3, r2
 80022e8:	d01d      	beq.n	8002326 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <UART_AdvFeatureConfig+0x15c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	035b      	lsls	r3, r3, #13
 800230a:	429a      	cmp	r2, r3
 800230c:	d10b      	bne.n	8002326 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <UART_AdvFeatureConfig+0x160>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	4013      	ands	r3, r2
 800232e:	d00b      	beq.n	8002348 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <UART_AdvFeatureConfig+0x164>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
  }
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fffdffff 	.word	0xfffdffff
 8002354:	fffeffff 	.word	0xfffeffff
 8002358:	fffbffff 	.word	0xfffbffff
 800235c:	ffff7fff 	.word	0xffff7fff
 8002360:	ffffefff 	.word	0xffffefff
 8002364:	ffffdfff 	.word	0xffffdfff
 8002368:	ffefffff 	.word	0xffefffff
 800236c:	ff9fffff 	.word	0xff9fffff
 8002370:	fff7ffff 	.word	0xfff7ffff

08002374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	2100      	movs	r1, #0
 8002382:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002384:	f7fe fa4a 	bl	800081c <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	4013      	ands	r3, r2
 8002396:	2b08      	cmp	r3, #8
 8002398:	d10c      	bne.n	80023b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0391      	lsls	r1, r2, #14
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <UART_CheckIdleState+0x8c>)
 80023a4:	9200      	str	r2, [sp, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f000 f82c 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e021      	b.n	80023f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2204      	movs	r2, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d10c      	bne.n	80023dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	03d1      	lsls	r1, r2, #15
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <UART_CheckIdleState+0x8c>)
 80023cc:	9200      	str	r2, [sp, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f000 f818 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e00d      	b.n	80023f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2274      	movs	r2, #116	; 0x74
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	01ffffff 	.word	0x01ffffff

08002404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002414:	e05e      	b.n	80024d4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3301      	adds	r3, #1
 800241a:	d05b      	beq.n	80024d4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241c:	f7fe f9fe 	bl	800081c <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	429a      	cmp	r2, r3
 800242a:	d302      	bcc.n	8002432 <UART_WaitOnFlagUntilTimeout+0x2e>
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11b      	bne.n	800246a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	492f      	ldr	r1, [pc, #188]	; (80024fc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800243e:	400a      	ands	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	438a      	bics	r2, r1
 8002450:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2274      	movs	r2, #116	; 0x74
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e044      	b.n	80024f4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2204      	movs	r2, #4
 8002472:	4013      	ands	r3, r2
 8002474:	d02e      	beq.n	80024d4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	401a      	ands	r2, r3
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	429a      	cmp	r2, r3
 8002488:	d124      	bne.n	80024d4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4917      	ldr	r1, [pc, #92]	; (80024fc <UART_WaitOnFlagUntilTimeout+0xf8>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	2120      	movs	r1, #32
 80024c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2274      	movs	r2, #116	; 0x74
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e00f      	b.n	80024f4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	425a      	negs	r2, r3
 80024e4:	4153      	adcs	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	001a      	movs	r2, r3
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d091      	beq.n	8002416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	fffffe5f 	.word	0xfffffe5f

08002500 <selectConst>:
	const bool condition2,
	const uint8_t option1,
	const uint8_t option2,
	const uint8_t option3,
	const uint8_t option4)
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	0005      	movs	r5, r0
 8002508:	000c      	movs	r4, r1
 800250a:	0010      	movs	r0, r2
 800250c:	0019      	movs	r1, r3
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	1c2a      	adds	r2, r5, #0
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	1dbb      	adds	r3, r7, #6
 8002516:	1c22      	adds	r2, r4, #0
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	1d7b      	adds	r3, r7, #5
 800251c:	1c02      	adds	r2, r0, #0
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	1c0a      	adds	r2, r1, #0
 8002524:	701a      	strb	r2, [r3, #0]
	if (condition1 && condition2) return option1;
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <selectConst+0x3c>
 800252e:	1dbb      	adds	r3, r7, #6
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <selectConst+0x3c>
 8002536:	1d7b      	adds	r3, r7, #5
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	e011      	b.n	8002560 <selectConst+0x60>
	if (condition1) return option2;
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <selectConst+0x4a>
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	e00a      	b.n	8002560 <selectConst+0x60>
	if (condition2) return option3;
 800254a:	1dbb      	adds	r3, r7, #6
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <selectConst+0x5a>
 8002552:	2318      	movs	r3, #24
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	e002      	b.n	8002560 <selectConst+0x60>
	return option4;
 800255a:	231c      	movs	r3, #28
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	781b      	ldrb	r3, [r3, #0]
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bdb0      	pop	{r4, r5, r7, pc}

08002568 <concatenate>:

static void concatenate(
	uint8_t *out,
	const uint8_t *in_left, const size_t leftlen_inbytes,
	const uint8_t *in_right, const size_t rightlen_inbytes)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
	memcpy(out, in_left, leftlen_inbytes);
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0018      	movs	r0, r3
 800257e:	f001 fa4f 	bl	8003a20 <memcpy>
	memcpy(out + leftlen_inbytes, in_right, rightlen_inbytes);
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	18d3      	adds	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	6839      	ldr	r1, [r7, #0]
 800258c:	0018      	movs	r0, r3
 800258e:	f001 fa47 	bl	8003a20 <memcpy>
}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}

0800259a <XOR>:
static void XOR(
	uint8_t *out,
	const uint8_t *in_left,
	const uint8_t *in_right,
	const size_t iolen_inbytes)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
	size_t i;
	for (i = 0; i < iolen_inbytes; i++) out[i] = in_left[i] ^ in_right[i];
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e010      	b.n	80025d0 <XOR+0x36>
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	18d3      	adds	r3, r2, r3
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	18d3      	adds	r3, r2, r3
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	18c3      	adds	r3, r0, r3
 80025c4:	404a      	eors	r2, r1
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3ea      	bcc.n	80025ae <XOR+0x14>
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b006      	add	sp, #24
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <XOR_const>:

static void XOR_const(
	uint8_t *State_inout,
	const uint8_t  Constant)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	000a      	movs	r2, r1
 80025ec:	1cfb      	adds	r3, r7, #3
 80025ee:	701a      	strb	r2, [r3, #0]
	State_inout[STATE_INBYTES - 1] ^= (Constant << LAST_THREE_BITS_OFFSET);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	331f      	adds	r3, #31
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	1cfb      	adds	r3, r7, #3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	015b      	lsls	r3, r3, #5
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	4053      	eors	r3, r2
 8002602:	b25a      	sxtb	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	331f      	adds	r3, #31
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <ROTR1>:

static void ROTR1(
	uint8_t *out,
	const uint8_t *in,
	const size_t iolen_inbytes)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	uint8_t tmp = in[0];
 8002620:	2313      	movs	r3, #19
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]
	size_t i;
	for (i = 0; i < iolen_inbytes - 1; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e017      	b.n	8002660 <ROTR1+0x4c>
	{
		out[i] = (in[i] >> 1) | ((in[(i+1)] & 1) << 7);
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	18d3      	adds	r3, r2, r3
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	b25a      	sxtb	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	18cb      	adds	r3, r1, r3
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	01db      	lsls	r3, r3, #7
 800264a:	b25b      	sxtb	r3, r3
 800264c:	4313      	orrs	r3, r2
 800264e:	b259      	sxtb	r1, r3
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	18d3      	adds	r3, r2, r3
 8002656:	b2ca      	uxtb	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iolen_inbytes - 1; i++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	429a      	cmp	r2, r3
 8002668:	d3e2      	bcc.n	8002630 <ROTR1+0x1c>
	}
	out[iolen_inbytes - 1] = (in[i] >> 1) | ((tmp & 1) << 7);
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	b25a      	sxtb	r2, r3
 8002678:	2313      	movs	r3, #19
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	01db      	lsls	r3, r3, #7
 8002680:	b25b      	sxtb	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b259      	sxtb	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3b01      	subs	r3, #1
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	18d3      	adds	r3, r2, r3
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b006      	add	sp, #24
 8002698:	bd80      	pop	{r7, pc}

0800269a <ShuffleXOR>:
static void ShuffleXOR(
	uint8_t *DataBlock_out,
	const uint8_t *OuterState_in,
	const uint8_t *DataBlock_in,
	const size_t DBlen_inbytes)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b088      	sub	sp, #32
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
	const uint8_t *OuterState_part1 = OuterState_in;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
	const uint8_t *OuterState_part2 = OuterState_in + RATE_INBYTES / 2;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3302      	adds	r3, #2
 80026b0:	617b      	str	r3, [r7, #20]

	uint8_t OuterState_part1_ROTR1[RATE_INBYTES / 2] = { 0 };
 80026b2:	2010      	movs	r0, #16
 80026b4:	183b      	adds	r3, r7, r0
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
	size_t i;

	ROTR1(OuterState_part1_ROTR1, OuterState_part1, RATE_INBYTES / 2);
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	2202      	movs	r2, #2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff ffa7 	bl	8002614 <ROTR1>

	i = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
	while ((i < DBlen_inbytes) && (i < RATE_INBYTES / 2))
 80026ca:	e010      	b.n	80026ee <ShuffleXOR+0x54>
	{
		DataBlock_out[i] = OuterState_part2[i] ^ DataBlock_in[i];
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	18d3      	adds	r3, r2, r3
 80026d2:	7819      	ldrb	r1, [r3, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	18c3      	adds	r3, r0, r3
 80026e2:	404a      	eors	r2, r1
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
		i++;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3301      	adds	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
	while ((i < DBlen_inbytes) && (i < RATE_INBYTES / 2))
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d215      	bcs.n	8002722 <ShuffleXOR+0x88>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d9e7      	bls.n	80026cc <ShuffleXOR+0x32>
	}
	while (i < DBlen_inbytes)
 80026fc:	e011      	b.n	8002722 <ShuffleXOR+0x88>
	{
		DataBlock_out[i] = OuterState_part1_ROTR1[i - RATE_INBYTES / 2] ^ DataBlock_in[i];
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b02      	subs	r3, #2
 8002702:	2210      	movs	r2, #16
 8002704:	18ba      	adds	r2, r7, r2
 8002706:	5cd1      	ldrb	r1, [r2, r3]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	18d3      	adds	r3, r2, r3
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	18c3      	adds	r3, r0, r3
 8002716:	404a      	eors	r2, r1
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
		i++;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3301      	adds	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
	while (i < DBlen_inbytes)
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d3e9      	bcc.n	80026fe <ShuffleXOR+0x64>
	}
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b008      	add	sp, #32
 8002732:	bd80      	pop	{r7, pc}

08002734 <rhoohr>:
	uint8_t *OuterState_inout,
	uint8_t *DataBlock_out,
	const uint8_t *DataBlock_in,
	const size_t DBlen_inbytes,
	const uint32_t EncDecInd)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
	ShuffleXOR(DataBlock_out, OuterState_inout, DataBlock_in, DBlen_inbytes);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f7ff ffa6 	bl	800269a <ShuffleXOR>

	if (EncDecInd == ENC)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <rhoohr+0x2e>
	{
		XOR(OuterState_inout, OuterState_inout, DataBlock_in, DBlen_inbytes);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff ff1d 	bl	800259a <XOR>
	}
	else
	{
		XOR(OuterState_inout, OuterState_inout, DataBlock_out, DBlen_inbytes);
	}	
}
 8002760:	e005      	b.n	800276e <rhoohr+0x3a>
		XOR(OuterState_inout, OuterState_inout, DataBlock_out, DBlen_inbytes);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f7ff ff16 	bl	800259a <XOR>
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bd80      	pop	{r7, pc}

08002776 <HASH>:
static void HASH(
	uint8_t *State_inout,
	const uint8_t *Data_in,
	const uint64_t Dlen_inbytes,
	const uint8_t  Constant)
{
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b088      	sub	sp, #32
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	603a      	str	r2, [r7, #0]
 8002782:	607b      	str	r3, [r7, #4]
	uint8_t *State = State_inout;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	61bb      	str	r3, [r7, #24]
	size_t Dlen_inblocks = (Dlen_inbytes + RATE_INBYTES - 1) / RATE_INBYTES;
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2003      	movs	r0, #3
 800278e:	2100      	movs	r1, #0
 8002790:	1812      	adds	r2, r2, r0
 8002792:	414b      	adcs	r3, r1
 8002794:	0799      	lsls	r1, r3, #30
 8002796:	0894      	lsrs	r4, r2, #2
 8002798:	430c      	orrs	r4, r1
 800279a:	089d      	lsrs	r5, r3, #2
 800279c:	0023      	movs	r3, r4
 800279e:	617b      	str	r3, [r7, #20]
	size_t LastDBlocklen;
	size_t i;

	for (i = 0; i < Dlen_inblocks - 1; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	e00f      	b.n	80027c6 <HASH+0x50>
	{
		PHOTON_Permutation(State);
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fcff 	bl	80031ac <PHOTON_Permutation>
		XOR(State, State, Data_in + i * RATE_INBYTES, RATE_INBYTES);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	18d2      	adds	r2, r2, r3
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	69b8      	ldr	r0, [r7, #24]
 80027ba:	2304      	movs	r3, #4
 80027bc:	f7ff feed 	bl	800259a <XOR>
	for (i = 0; i < Dlen_inblocks - 1; i++)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d3ea      	bcc.n	80027a6 <HASH+0x30>
	}
	PHOTON_Permutation(State);	
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fcea 	bl	80031ac <PHOTON_Permutation>
	LastDBlocklen = Dlen_inbytes - i * RATE_INBYTES;
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	613b      	str	r3, [r7, #16]
	XOR(State, State, Data_in + i * RATE_INBYTES, LastDBlocklen);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	18d2      	adds	r2, r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	69b8      	ldr	r0, [r7, #24]
 80027f0:	f7ff fed3 	bl	800259a <XOR>
	if (LastDBlocklen < RATE_INBYTES) State[LastDBlocklen] ^= 0x01; // ozs
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d80a      	bhi.n	8002810 <HASH+0x9a>
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	18d3      	adds	r3, r2, r3
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	69b9      	ldr	r1, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	18cb      	adds	r3, r1, r3
 8002808:	2101      	movs	r1, #1
 800280a:	404a      	eors	r2, r1
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]

	XOR_const(State, Constant);
 8002810:	2330      	movs	r3, #48	; 0x30
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	0011      	movs	r1, r2
 800281a:	0018      	movs	r0, r3
 800281c:	f7ff fee1 	bl	80025e2 <XOR_const>
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b008      	add	sp, #32
 8002826:	bdb0      	pop	{r4, r5, r7, pc}

08002828 <ENCorDEC>:
	uint8_t *Data_out,
	const uint8_t *Data_in,
	const uint64_t Dlen_inbytes,
	const uint8_t Constant,
	const uint32_t EncDecInd)
{
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
	uint8_t *State = State_inout;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	61bb      	str	r3, [r7, #24]
	size_t Dlen_inblocks = (Dlen_inbytes + RATE_INBYTES - 1) / RATE_INBYTES;
 8002838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	2003      	movs	r0, #3
 800283e:	2100      	movs	r1, #0
 8002840:	1812      	adds	r2, r2, r0
 8002842:	414b      	adcs	r3, r1
 8002844:	0799      	lsls	r1, r3, #30
 8002846:	0894      	lsrs	r4, r2, #2
 8002848:	430c      	orrs	r4, r1
 800284a:	089d      	lsrs	r5, r3, #2
 800284c:	0023      	movs	r3, r4
 800284e:	617b      	str	r3, [r7, #20]
	size_t LastDBlocklen;
	size_t i;

	for (i = 0; i < Dlen_inblocks - 1; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e014      	b.n	8002880 <ENCorDEC+0x58>
	{
		PHOTON_Permutation(State);
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 fca7 	bl	80031ac <PHOTON_Permutation>
		rhoohr(State, Data_out + i * RATE_INBYTES, Data_in + i * RATE_INBYTES, RATE_INBYTES, EncDecInd);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	18d1      	adds	r1, r2, r3
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	18d2      	adds	r2, r2, r3
 800286e:	69b8      	ldr	r0, [r7, #24]
 8002870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2304      	movs	r3, #4
 8002876:	f7ff ff5d 	bl	8002734 <rhoohr>
	for (i = 0; i < Dlen_inblocks - 1; i++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3b01      	subs	r3, #1
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	429a      	cmp	r2, r3
 8002888:	d3e5      	bcc.n	8002856 <ENCorDEC+0x2e>
	}
	PHOTON_Permutation(State);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 fc8d 	bl	80031ac <PHOTON_Permutation>
	LastDBlocklen = Dlen_inbytes - i * RATE_INBYTES;
 8002892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	613b      	str	r3, [r7, #16]
	rhoohr(State, Data_out + i * RATE_INBYTES, Data_in + i * RATE_INBYTES, LastDBlocklen, EncDecInd);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	18d1      	adds	r1, r2, r3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	18d2      	adds	r2, r2, r3
 80028ac:	693c      	ldr	r4, [r7, #16]
 80028ae:	69b8      	ldr	r0, [r7, #24]
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	0023      	movs	r3, r4
 80028b6:	f7ff ff3d 	bl	8002734 <rhoohr>
	if (LastDBlocklen < RATE_INBYTES) State[LastDBlocklen] ^= 0x01; // ozs
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d80a      	bhi.n	80028d6 <ENCorDEC+0xae>
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	69b9      	ldr	r1, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	18cb      	adds	r3, r1, r3
 80028ce:	2101      	movs	r1, #1
 80028d0:	404a      	eors	r2, r1
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

	XOR_const(State, Constant);
 80028d6:	2338      	movs	r3, #56	; 0x38
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	0011      	movs	r1, r2
 80028e0:	0018      	movs	r0, r3
 80028e2:	f7ff fe7e 	bl	80025e2 <XOR_const>
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b008      	add	sp, #32
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}

080028ee <TAG>:

static void TAG(
	uint8_t *Tag_out,
	uint8_t *State)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	size_t i;

	i = TAG_INBYTES;
 80028f8:	2310      	movs	r3, #16
 80028fa:	60fb      	str	r3, [r7, #12]
	while (i > SQUEEZE_RATE_INBYTES)
 80028fc:	e00f      	b.n	800291e <TAG+0x30>
	{
		PHOTON_Permutation(State);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	0018      	movs	r0, r3
 8002902:	f000 fc53 	bl	80031ac <PHOTON_Permutation>
		memcpy(Tag_out, State, SQUEEZE_RATE_INBYTES);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2210      	movs	r2, #16
 800290c:	0018      	movs	r0, r3
 800290e:	f001 f887 	bl	8003a20 <memcpy>
		Tag_out += SQUEEZE_RATE_INBYTES;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3310      	adds	r3, #16
 8002916:	607b      	str	r3, [r7, #4]
		i -= SQUEEZE_RATE_INBYTES;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3b10      	subs	r3, #16
 800291c:	60fb      	str	r3, [r7, #12]
	while (i > SQUEEZE_RATE_INBYTES)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b10      	cmp	r3, #16
 8002922:	d8ec      	bhi.n	80028fe <TAG+0x10>
	}
	PHOTON_Permutation(State);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	0018      	movs	r0, r3
 8002928:	f000 fc40 	bl	80031ac <PHOTON_Permutation>
	memcpy(Tag_out, State, i);
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6839      	ldr	r1, [r7, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f001 f874 	bl	8003a20 <memcpy>
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}

08002940 <crypto_aead_encrypt>:
	const unsigned char *ad, unsigned long long adlen,
	const unsigned char *nsec,
	const unsigned char *npub,
	const unsigned char *k
	)
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b09b      	sub	sp, #108	; 0x6c
 8002944:	af04      	add	r7, sp, #16
 8002946:	6178      	str	r0, [r7, #20]
 8002948:	6139      	str	r1, [r7, #16]
 800294a:	60fa      	str	r2, [r7, #12]
	... and secret key k[0],k[1],...
	... the implementation shall not use nsec
	...
	... return 0;
	*/
	uint8_t *C = c;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t *T = c + mlen;
 8002950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	653b      	str	r3, [r7, #80]	; 0x50
	const uint8_t *M = m;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint8_t *A = ad;
 800295c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint8_t *N = npub;
 8002960:	2384      	movs	r3, #132	; 0x84
 8002962:	2208      	movs	r2, #8
 8002964:	4694      	mov	ip, r2
 8002966:	44bc      	add	ip, r7
 8002968:	4463      	add	r3, ip
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	647b      	str	r3, [r7, #68]	; 0x44
	const uint8_t *K = k;
 800296e:	2388      	movs	r3, #136	; 0x88
 8002970:	2208      	movs	r2, #8
 8002972:	4694      	mov	ip, r2
 8002974:	44bc      	add	ip, r7
 8002976:	4463      	add	r3, ip
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	643b      	str	r3, [r7, #64]	; 0x40

	uint8_t State[STATE_INBYTES] = { 0 };
 800297c:	2614      	movs	r6, #20
 800297e:	2208      	movs	r2, #8
 8002980:	18bb      	adds	r3, r7, r2
 8002982:	199b      	adds	r3, r3, r6
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	3304      	adds	r3, #4
 800298a:	221c      	movs	r2, #28
 800298c:	2100      	movs	r1, #0
 800298e:	0018      	movs	r0, r3
 8002990:	f001 f84f 	bl	8003a32 <memset>
	uint8_t c0;
	uint8_t c1;
	
	concatenate(State, N, NOUNCE_INBYTES, K, KEY_INBYTES);
 8002994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002998:	2208      	movs	r2, #8
 800299a:	18b8      	adds	r0, r7, r2
 800299c:	1980      	adds	r0, r0, r6
 800299e:	2210      	movs	r2, #16
 80029a0:	9200      	str	r2, [sp, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	f7ff fde0 	bl	8002568 <concatenate>

	if ((adlen == 0) && (mlen == 0))
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	18fb      	adds	r3, r7, r3
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2184      	movs	r1, #132	; 0x84
 80029b0:	1879      	adds	r1, r7, r1
 80029b2:	680a      	ldr	r2, [r1, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	d118      	bne.n	80029ea <crypto_aead_encrypt+0xaa>
 80029b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029bc:	4313      	orrs	r3, r2
 80029be:	d114      	bne.n	80029ea <crypto_aead_encrypt+0xaa>
	{
		XOR_const(State, 1);
 80029c0:	2408      	movs	r4, #8
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	199b      	adds	r3, r3, r6
 80029c6:	2101      	movs	r1, #1
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff fe0a 	bl	80025e2 <XOR_const>
		TAG(T, State);
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	199a      	adds	r2, r3, r6
 80029d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff ff89 	bl	80028ee <TAG>
		*clen = TAG_INBYTES;
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	2210      	movs	r2, #16
 80029e0:	2300      	movs	r3, #0
 80029e2:	600a      	str	r2, [r1, #0]
 80029e4:	604b      	str	r3, [r1, #4]
		return 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e093      	b.n	8002b12 <crypto_aead_encrypt+0x1d2>
	}

	c0 = selectConst((mlen != 0), ((adlen % RATE_INBYTES) == 0), 1, 2, 3, 4);
 80029ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ee:	4313      	orrs	r3, r2
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	4193      	sbcs	r3, r2
 80029f4:	b2d8      	uxtb	r0, r3
 80029f6:	2680      	movs	r6, #128	; 0x80
 80029f8:	19bb      	adds	r3, r7, r6
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2203      	movs	r2, #3
 80029fe:	4013      	ands	r3, r2
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	2384      	movs	r3, #132	; 0x84
 8002a04:	18f9      	adds	r1, r7, r3
 8002a06:	680b      	ldr	r3, [r1, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0011      	movs	r1, r2
 8002a14:	4319      	orrs	r1, r3
 8002a16:	000b      	movs	r3, r1
 8002a18:	425a      	negs	r2, r3
 8002a1a:	4153      	adcs	r3, r2
 8002a1c:	b2d9      	uxtb	r1, r3
 8002a1e:	2337      	movs	r3, #55	; 0x37
 8002a20:	2208      	movs	r2, #8
 8002a22:	18ba      	adds	r2, r7, r2
 8002a24:	18d6      	adds	r6, r2, r3
 8002a26:	2304      	movs	r3, #4
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2302      	movs	r3, #2
 8002a30:	2201      	movs	r2, #1
 8002a32:	f7ff fd65 	bl	8002500 <selectConst>
 8002a36:	0003      	movs	r3, r0
 8002a38:	7033      	strb	r3, [r6, #0]
	c1 = selectConst((adlen != 0), ((mlen % RATE_INBYTES) == 0), 1, 2, 5, 6);
 8002a3a:	2680      	movs	r6, #128	; 0x80
 8002a3c:	19b9      	adds	r1, r7, r6
 8002a3e:	680a      	ldr	r2, [r1, #0]
 8002a40:	2384      	movs	r3, #132	; 0x84
 8002a42:	18f9      	adds	r1, r7, r3
 8002a44:	680b      	ldr	r3, [r1, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	4193      	sbcs	r3, r2
 8002a4c:	b2d8      	uxtb	r0, r3
 8002a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a50:	2203      	movs	r2, #3
 8002a52:	4013      	ands	r3, r2
 8002a54:	001c      	movs	r4, r3
 8002a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	001d      	movs	r5, r3
 8002a5e:	0023      	movs	r3, r4
 8002a60:	432b      	orrs	r3, r5
 8002a62:	425a      	negs	r2, r3
 8002a64:	4153      	adcs	r3, r2
 8002a66:	b2d9      	uxtb	r1, r3
 8002a68:	2236      	movs	r2, #54	; 0x36
 8002a6a:	2408      	movs	r4, #8
 8002a6c:	193c      	adds	r4, r7, r4
 8002a6e:	18a4      	adds	r4, r4, r2
 8002a70:	2306      	movs	r3, #6
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	2305      	movs	r3, #5
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	2302      	movs	r3, #2
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f7ff fd40 	bl	8002500 <selectConst>
 8002a80:	0003      	movs	r3, r0
 8002a82:	7023      	strb	r3, [r4, #0]

	if (adlen != 0) HASH(State, A, adlen, c0);
 8002a84:	19b9      	adds	r1, r7, r6
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	2284      	movs	r2, #132	; 0x84
 8002a8a:	18ba      	adds	r2, r7, r2
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	d012      	beq.n	8002ab8 <crypto_aead_encrypt+0x178>
 8002a92:	19bb      	adds	r3, r7, r6
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002a9a:	2014      	movs	r0, #20
 8002a9c:	2108      	movs	r1, #8
 8002a9e:	468c      	mov	ip, r1
 8002aa0:	44bc      	add	ip, r7
 8002aa2:	4460      	add	r0, ip
 8002aa4:	2137      	movs	r1, #55	; 0x37
 8002aa6:	2508      	movs	r5, #8
 8002aa8:	46ac      	mov	ip, r5
 8002aaa:	44bc      	add	ip, r7
 8002aac:	4461      	add	r1, ip
 8002aae:	7809      	ldrb	r1, [r1, #0]
 8002ab0:	9100      	str	r1, [sp, #0]
 8002ab2:	0021      	movs	r1, r4
 8002ab4:	f7ff fe5f 	bl	8002776 <HASH>
	if ( mlen != 0) ENCorDEC(State, C, M, mlen, c1, ENC);
 8002ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002abc:	4313      	orrs	r3, r2
 8002abe:	d015      	beq.n	8002aec <crypto_aead_encrypt+0x1ac>
 8002ac0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ac4:	2314      	movs	r3, #20
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	18ba      	adds	r2, r7, r2
 8002aca:	18d0      	adds	r0, r2, r3
 8002acc:	2300      	movs	r3, #0
 8002ace:	9303      	str	r3, [sp, #12]
 8002ad0:	2336      	movs	r3, #54	; 0x36
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	4694      	mov	ip, r2
 8002ad6:	44bc      	add	ip, r7
 8002ad8:	4463      	add	r3, ip
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	0022      	movs	r2, r4
 8002ae8:	f7ff fe9e 	bl	8002828 <ENCorDEC>
	
	TAG(T, State);
 8002aec:	2314      	movs	r3, #20
 8002aee:	2208      	movs	r2, #8
 8002af0:	18ba      	adds	r2, r7, r2
 8002af2:	18d2      	adds	r2, r2, r3
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fef8 	bl	80028ee <TAG>
	*clen = mlen + TAG_INBYTES;
 8002afe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b02:	2010      	movs	r0, #16
 8002b04:	2100      	movs	r1, #0
 8002b06:	1812      	adds	r2, r2, r0
 8002b08:	414b      	adcs	r3, r1
 8002b0a:	6939      	ldr	r1, [r7, #16]
 8002b0c:	600a      	str	r2, [r1, #0]
 8002b0e:	604b      	str	r3, [r1, #4]
	return 0;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b017      	add	sp, #92	; 0x5c
 8002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b1a <crypto_aead_decrypt>:
	const unsigned char *c, unsigned long long clen,
	const unsigned char *ad, unsigned long long adlen,
	const unsigned char *npub,
	const unsigned char *k
	)
{
 8002b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1c:	b0a1      	sub	sp, #132	; 0x84
 8002b1e:	af04      	add	r7, sp, #16
 8002b20:	6178      	str	r0, [r7, #20]
 8002b22:	6139      	str	r1, [r7, #16]
 8002b24:	60fa      	str	r2, [r7, #12]
 8002b26:	60bb      	str	r3, [r7, #8]
	... and nonce number npub[0],npub[1],...
	... and secret key k[0],k[1],...
	...
	... return 0;
	*/
	uint8_t *M = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint8_t *C = c;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	66bb      	str	r3, [r7, #104]	; 0x68
	const uint8_t *T = c + clen - TAG_INBYTES;
 8002b30:	2680      	movs	r6, #128	; 0x80
 8002b32:	2108      	movs	r1, #8
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	199b      	adds	r3, r3, r6
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3b10      	subs	r3, #16
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	18d3      	adds	r3, r2, r3
 8002b40:	667b      	str	r3, [r7, #100]	; 0x64
	const uint8_t *A = ad;
 8002b42:	2388      	movs	r3, #136	; 0x88
 8002b44:	2208      	movs	r2, #8
 8002b46:	4694      	mov	ip, r2
 8002b48:	44bc      	add	ip, r7
 8002b4a:	4463      	add	r3, ip
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	663b      	str	r3, [r7, #96]	; 0x60
	const uint8_t *N = npub;
 8002b50:	2398      	movs	r3, #152	; 0x98
 8002b52:	2208      	movs	r2, #8
 8002b54:	4694      	mov	ip, r2
 8002b56:	44bc      	add	ip, r7
 8002b58:	4463      	add	r3, ip
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
	const uint8_t *K = k;
 8002b5e:	239c      	movs	r3, #156	; 0x9c
 8002b60:	2208      	movs	r2, #8
 8002b62:	4694      	mov	ip, r2
 8002b64:	44bc      	add	ip, r7
 8002b66:	4463      	add	r3, ip
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t State[STATE_INBYTES] = { 0 };
 8002b6c:	2324      	movs	r3, #36	; 0x24
 8002b6e:	2208      	movs	r2, #8
 8002b70:	4694      	mov	ip, r2
 8002b72:	44bc      	add	ip, r7
 8002b74:	4463      	add	r3, ip
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	221c      	movs	r2, #28
 8002b7e:	2100      	movs	r1, #0
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 ff56 	bl	8003a32 <memset>
	uint8_t T_tmp[TAG_INBYTES] = { 0 };
 8002b86:	2314      	movs	r3, #20
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	44bc      	add	ip, r7
 8002b8e:	4463      	add	r3, ip
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	3304      	adds	r3, #4
 8002b96:	220c      	movs	r2, #12
 8002b98:	2100      	movs	r1, #0
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 ff49 	bl	8003a32 <memset>
	uint8_t c0;
	uint8_t c1;
	uint64_t cmtlen;

	if (clen < TAG_INBYTES) return TAG_UNMATCH;
 8002ba0:	2284      	movs	r2, #132	; 0x84
 8002ba2:	2108      	movs	r1, #8
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <crypto_aead_decrypt+0xae>
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	189b      	adds	r3, r3, r2
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <crypto_aead_decrypt+0xa8>
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	199b      	adds	r3, r3, r6
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d802      	bhi.n	8002bc8 <crypto_aead_decrypt+0xae>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	425b      	negs	r3, r3
 8002bc6:	e119      	b.n	8002dfc <crypto_aead_decrypt+0x2e2>
	cmtlen = clen - TAG_INBYTES;
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4694      	mov	ip, r2
 8002bce:	44bc      	add	ip, r7
 8002bd0:	4463      	add	r3, ip
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2010      	movs	r0, #16
 8002bd8:	4240      	negs	r0, r0
 8002bda:	17c1      	asrs	r1, r0, #31
 8002bdc:	1812      	adds	r2, r2, r0
 8002bde:	414b      	adcs	r3, r1
 8002be0:	653a      	str	r2, [r7, #80]	; 0x50
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54

	concatenate(State, N, NOUNCE_INBYTES, K, KEY_INBYTES);
 8002be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002be8:	2624      	movs	r6, #36	; 0x24
 8002bea:	2208      	movs	r2, #8
 8002bec:	18b8      	adds	r0, r7, r2
 8002bee:	1980      	adds	r0, r0, r6
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	f7ff fcb7 	bl	8002568 <concatenate>

	if ((adlen == 0) && (cmtlen == 0))
 8002bfa:	2390      	movs	r3, #144	; 0x90
 8002bfc:	2108      	movs	r1, #8
 8002bfe:	468c      	mov	ip, r1
 8002c00:	44bc      	add	ip, r7
 8002c02:	4463      	add	r3, ip
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2294      	movs	r2, #148	; 0x94
 8002c08:	2108      	movs	r1, #8
 8002c0a:	468c      	mov	ip, r1
 8002c0c:	44bc      	add	ip, r7
 8002c0e:	4462      	add	r2, ip
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	d126      	bne.n	8002c64 <crypto_aead_decrypt+0x14a>
 8002c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	d122      	bne.n	8002c64 <crypto_aead_decrypt+0x14a>
	{
		XOR_const(State, 1);
 8002c1e:	2508      	movs	r5, #8
 8002c20:	197b      	adds	r3, r7, r5
 8002c22:	199b      	adds	r3, r3, r6
 8002c24:	2101      	movs	r1, #1
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff fcdb 	bl	80025e2 <XOR_const>
		TAG(T_tmp, State);
 8002c2c:	197b      	adds	r3, r7, r5
 8002c2e:	199a      	adds	r2, r3, r6
 8002c30:	2414      	movs	r4, #20
 8002c32:	197b      	adds	r3, r7, r5
 8002c34:	191b      	adds	r3, r3, r4
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff fe58 	bl	80028ee <TAG>
		if (memcmp(T_tmp, T, TAG_INBYTES) != 0) return TAG_UNMATCH;
 8002c3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c40:	197b      	adds	r3, r7, r5
 8002c42:	191b      	adds	r3, r3, r4
 8002c44:	2210      	movs	r2, #16
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fedc 	bl	8003a04 <memcmp>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d002      	beq.n	8002c56 <crypto_aead_decrypt+0x13c>
 8002c50:	2301      	movs	r3, #1
 8002c52:	425b      	negs	r3, r3
 8002c54:	e0d2      	b.n	8002dfc <crypto_aead_decrypt+0x2e2>
		*mlen = 0;
 8002c56:	6939      	ldr	r1, [r7, #16]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	600a      	str	r2, [r1, #0]
 8002c5e:	604b      	str	r3, [r1, #4]
		return TAG_MATCH;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e0cb      	b.n	8002dfc <crypto_aead_decrypt+0x2e2>
	}

	c0 = selectConst((cmtlen != 0), ((adlen % RATE_INBYTES) == 0), 1, 2, 3, 4);
 8002c64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	4193      	sbcs	r3, r2
 8002c6e:	b2d8      	uxtb	r0, r3
 8002c70:	2690      	movs	r6, #144	; 0x90
 8002c72:	2108      	movs	r1, #8
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	199b      	adds	r3, r3, r6
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	2394      	movs	r3, #148	; 0x94
 8002c82:	000e      	movs	r6, r1
 8002c84:	187a      	adds	r2, r7, r1
 8002c86:	18d2      	adds	r2, r2, r3
 8002c88:	6813      	ldr	r3, [r2, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	4011      	ands	r1, r2
 8002c90:	6079      	str	r1, [r7, #4]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0011      	movs	r1, r2
 8002c98:	001a      	movs	r2, r3
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	425a      	negs	r2, r3
 8002ca0:	4153      	adcs	r3, r2
 8002ca2:	b2d9      	uxtb	r1, r3
 8002ca4:	2247      	movs	r2, #71	; 0x47
 8002ca6:	19bb      	adds	r3, r7, r6
 8002ca8:	189e      	adds	r6, r3, r2
 8002caa:	2304      	movs	r3, #4
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	2303      	movs	r3, #3
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f7ff fc23 	bl	8002500 <selectConst>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7033      	strb	r3, [r6, #0]
	c1 = selectConst((adlen != 0), ((cmtlen % RATE_INBYTES) == 0), 1, 2, 5, 6);
 8002cbe:	2690      	movs	r6, #144	; 0x90
 8002cc0:	2108      	movs	r1, #8
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	1998      	adds	r0, r3, r6
 8002cc6:	6802      	ldr	r2, [r0, #0]
 8002cc8:	2394      	movs	r3, #148	; 0x94
 8002cca:	1878      	adds	r0, r7, r1
 8002ccc:	18c0      	adds	r0, r0, r3
 8002cce:	6803      	ldr	r3, [r0, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	4193      	sbcs	r3, r2
 8002cd6:	b2d8      	uxtb	r0, r3
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cda:	2203      	movs	r2, #3
 8002cdc:	4013      	ands	r3, r2
 8002cde:	001c      	movs	r4, r3
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	001d      	movs	r5, r3
 8002ce8:	0023      	movs	r3, r4
 8002cea:	432b      	orrs	r3, r5
 8002cec:	425a      	negs	r2, r3
 8002cee:	4153      	adcs	r3, r2
 8002cf0:	b2d9      	uxtb	r1, r3
 8002cf2:	2446      	movs	r4, #70	; 0x46
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	469c      	mov	ip, r3
 8002cf8:	44bc      	add	ip, r7
 8002cfa:	4464      	add	r4, ip
 8002cfc:	2306      	movs	r3, #6
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2305      	movs	r3, #5
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2302      	movs	r3, #2
 8002d06:	2201      	movs	r2, #1
 8002d08:	f7ff fbfa 	bl	8002500 <selectConst>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	7023      	strb	r3, [r4, #0]

	if (adlen != 0) HASH(State, A, adlen, c0);
 8002d10:	2108      	movs	r1, #8
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	1998      	adds	r0, r3, r6
 8002d16:	6803      	ldr	r3, [r0, #0]
 8002d18:	2294      	movs	r2, #148	; 0x94
 8002d1a:	1878      	adds	r0, r7, r1
 8002d1c:	1880      	adds	r0, r0, r2
 8002d1e:	6802      	ldr	r2, [r0, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	d013      	beq.n	8002d4c <crypto_aead_decrypt+0x232>
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	199b      	adds	r3, r3, r6
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002d2e:	2024      	movs	r0, #36	; 0x24
 8002d30:	2108      	movs	r1, #8
 8002d32:	468c      	mov	ip, r1
 8002d34:	44bc      	add	ip, r7
 8002d36:	4460      	add	r0, ip
 8002d38:	2147      	movs	r1, #71	; 0x47
 8002d3a:	2508      	movs	r5, #8
 8002d3c:	46ac      	mov	ip, r5
 8002d3e:	44bc      	add	ip, r7
 8002d40:	4461      	add	r1, ip
 8002d42:	7809      	ldrb	r1, [r1, #0]
 8002d44:	9100      	str	r1, [sp, #0]
 8002d46:	0021      	movs	r1, r4
 8002d48:	f7ff fd15 	bl	8002776 <HASH>
	if (cmtlen != 0)
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d50:	4313      	orrs	r3, r2
 8002d52:	d021      	beq.n	8002d98 <crypto_aead_decrypt+0x27e>
	{
		M = (uint8_t *)malloc(cmtlen);
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 fe40 	bl	80039dc <malloc>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (M == NULL) return OTHER_FAILURES;
 8002d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <crypto_aead_decrypt+0x252>
 8002d66:	2302      	movs	r3, #2
 8002d68:	425b      	negs	r3, r3
 8002d6a:	e047      	b.n	8002dfc <crypto_aead_decrypt+0x2e2>
		ENCorDEC(State, M, C, cmtlen, c1, DEC);
 8002d6c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8002d6e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002d70:	2324      	movs	r3, #36	; 0x24
 8002d72:	2208      	movs	r2, #8
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	18d0      	adds	r0, r2, r3
 8002d78:	2301      	movs	r3, #1
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	2346      	movs	r3, #70	; 0x46
 8002d7e:	2208      	movs	r2, #8
 8002d80:	4694      	mov	ip, r2
 8002d82:	44bc      	add	ip, r7
 8002d84:	4463      	add	r3, ip
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8e:	9200      	str	r2, [sp, #0]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	0022      	movs	r2, r4
 8002d94:	f7ff fd48 	bl	8002828 <ENCorDEC>
	}

	TAG(T_tmp, State);
 8002d98:	2324      	movs	r3, #36	; 0x24
 8002d9a:	2508      	movs	r5, #8
 8002d9c:	197a      	adds	r2, r7, r5
 8002d9e:	18d2      	adds	r2, r2, r3
 8002da0:	2414      	movs	r4, #20
 8002da2:	197b      	adds	r3, r7, r5
 8002da4:	191b      	adds	r3, r3, r4
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff fda0 	bl	80028ee <TAG>
	if (memcmp(T_tmp, T, TAG_INBYTES) != 0)
 8002dae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002db0:	197b      	adds	r3, r7, r5
 8002db2:	191b      	adds	r3, r3, r4
 8002db4:	2210      	movs	r2, #16
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fe24 	bl	8003a04 <memcmp>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d009      	beq.n	8002dd4 <crypto_aead_decrypt+0x2ba>
	{
		if (M != NULL) free(M);
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <crypto_aead_decrypt+0x2b4>
 8002dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 fe11 	bl	80039f0 <free>
		return TAG_UNMATCH;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	e013      	b.n	8002dfc <crypto_aead_decrypt+0x2e2>
	}

	if (cmtlen != 0)
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	d009      	beq.n	8002df0 <crypto_aead_decrypt+0x2d6>
	{
		memcpy(m, M, cmtlen);
 8002ddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dde:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 fe1c 	bl	8003a20 <memcpy>
		free(M);
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fe00 	bl	80039f0 <free>
	}
	*mlen = cmtlen;
 8002df0:	6939      	ldr	r1, [r7, #16]
 8002df2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	600a      	str	r2, [r1, #0]
 8002df8:	604b      	str	r3, [r1, #4]
	return TAG_MATCH;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b01d      	add	sp, #116	; 0x74
 8002e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e04 <FieldMult>:
};

byte sbox[16] = {12, 5, 6, 11, 9, 0, 10, 13, 3, 14, 15, 8, 4, 7, 1, 2};

byte FieldMult(byte a, byte b)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	1c0a      	adds	r2, r1, #0
 8002e14:	701a      	strb	r2, [r3, #0]
	byte x = a, ret = 0;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	1dfa      	adds	r2, r7, #7
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	230e      	movs	r3, #14
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
	int i;
	for(i = 0; i < S; i++) {
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	e02f      	b.n	8002e8e <FieldMult+0x8a>
		if((b>>i)&1) ret ^= x;
 8002e2e:	1dbb      	adds	r3, r7, #6
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	411a      	asrs	r2, r3
 8002e36:	0013      	movs	r3, r2
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d008      	beq.n	8002e50 <FieldMult+0x4c>
 8002e3e:	220e      	movs	r2, #14
 8002e40:	18bb      	adds	r3, r7, r2
 8002e42:	18b9      	adds	r1, r7, r2
 8002e44:	220f      	movs	r2, #15
 8002e46:	18ba      	adds	r2, r7, r2
 8002e48:	7809      	ldrb	r1, [r1, #0]
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	404a      	eors	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]
		if((x>>(S-1))&1) {
 8002e50:	210f      	movs	r1, #15
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d00c      	beq.n	8002e7c <FieldMult+0x78>
			x <<= 1;
 8002e62:	187a      	adds	r2, r7, r1
 8002e64:	0008      	movs	r0, r1
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	18db      	adds	r3, r3, r3
 8002e6c:	7013      	strb	r3, [r2, #0]
			x ^= ReductionPoly;
 8002e6e:	2103      	movs	r1, #3
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	183a      	adds	r2, r7, r0
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	404a      	eors	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e005      	b.n	8002e88 <FieldMult+0x84>
		}
		else x <<= 1;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	18fa      	adds	r2, r7, r3
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	18db      	adds	r3, r3, r3
 8002e86:	7013      	strb	r3, [r2, #0]
	for(i = 0; i < S; i++) {
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	ddcc      	ble.n	8002e2e <FieldMult+0x2a>
	}
	return ret&WORDFILTER;
 8002e94:	220f      	movs	r2, #15
 8002e96:	230e      	movs	r3, #14
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b2db      	uxtb	r3, r3
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <PrintState>:

void PrintState(byte state[D][D])
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	if(!DEBUG) return;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <PrintState+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d025      	beq.n	8002f04 <PrintState+0x5c>
	int i, j;
	for(i = 0; i < D; i++){
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e01b      	b.n	8002ef6 <PrintState+0x4e>
		for(j = 0; j < D; j++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	e00f      	b.n	8002ee4 <PrintState+0x3c>
			printf("%2X ", state[i][j]);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	18d2      	adds	r2, r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	18d3      	adds	r3, r2, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <PrintState+0x68>)
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 fe5b 	bl	8003b94 <iprintf>
		for(j = 0; j < D; j++)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	ddec      	ble.n	8002ec4 <PrintState+0x1c>
		printf("\n");
 8002eea:	200a      	movs	r0, #10
 8002eec:	f000 fe6c 	bl	8003bc8 <putchar>
	for(i = 0; i < D; i++){
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	dde0      	ble.n	8002ebe <PrintState+0x16>
	}
	printf("\n");
 8002efc:	200a      	movs	r0, #10
 8002efe:	f000 fe63 	bl	8003bc8 <putchar>
 8002f02:	e000      	b.n	8002f06 <PrintState+0x5e>
	if(!DEBUG) return;
 8002f04:	46c0      	nop			; (mov r8, r8)
}
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200000a0 	.word	0x200000a0
 8002f10:	08004dfc 	.word	0x08004dfc

08002f14 <AddKey>:
	}
	printf("\n");
}

void AddKey(byte state[D][D], int round)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < D; i++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e018      	b.n	8002f56 <AddKey+0x42>
		state[i][0] ^= RC[i][round];
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	7819      	ldrb	r1, [r3, #0]
 8002f2e:	480e      	ldr	r0, [pc, #56]	; (8002f68 <AddKey+0x54>)
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	0013      	movs	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	18c2      	adds	r2, r0, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	18c3      	adds	r3, r0, r3
 8002f4a:	404a      	eors	r2, r1
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < D; i++)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	dde3      	ble.n	8002f24 <AddKey+0x10>
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b004      	add	sp, #16
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	08005004 	.word	0x08005004

08002f6c <SubCell>:

void SubCell(byte state[D][D])
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i = 0; i < D; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e01d      	b.n	8002fb6 <SubCell+0x4a>
		for(j = 0; j <  D; j++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	e014      	b.n	8002faa <SubCell+0x3e>
			state[i][j] = sbox[state[i][j]];
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	18d2      	adds	r2, r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	18d3      	adds	r3, r2, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	0019      	movs	r1, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	18d2      	adds	r2, r2, r3
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <SubCell+0x5c>)
 8002f9a:	5c59      	ldrb	r1, [r3, r1]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	18d3      	adds	r3, r2, r3
 8002fa0:	1c0a      	adds	r2, r1, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
		for(j = 0; j <  D; j++)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b07      	cmp	r3, #7
 8002fae:	dde7      	ble.n	8002f80 <SubCell+0x14>
	for(i = 0; i < D; i++)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b07      	cmp	r3, #7
 8002fba:	ddde      	ble.n	8002f7a <SubCell+0xe>
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <ShiftRow>:

void ShiftRow(byte state[D][D])
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	int i, j;
	byte tmp[D];
	for(i = 1; i < D; i++) {
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e038      	b.n	800304c <ShiftRow+0x80>
		for(j = 0; j < D; j++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e00f      	b.n	8003000 <ShiftRow+0x34>
			tmp[j] = state[i][j];
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	18d2      	adds	r2, r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	18d3      	adds	r3, r2, r3
 8002fec:	7819      	ldrb	r1, [r3, #0]
 8002fee:	2308      	movs	r3, #8
 8002ff0:	18fa      	adds	r2, r7, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	18d3      	adds	r3, r2, r3
 8002ff6:	1c0a      	adds	r2, r1, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < D; j++)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b07      	cmp	r3, #7
 8003004:	ddec      	ble.n	8002fe0 <ShiftRow+0x14>
		for(j = 0; j < D; j++)
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	e019      	b.n	8003040 <ShiftRow+0x74>
			state[i][j] = tmp[(j+i)%D];
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <ShiftRow+0x90>)
 8003014:	4013      	ands	r3, r2
 8003016:	d504      	bpl.n	8003022 <ShiftRow+0x56>
 8003018:	3b01      	subs	r3, #1
 800301a:	2208      	movs	r2, #8
 800301c:	4252      	negs	r2, r2
 800301e:	4313      	orrs	r3, r2
 8003020:	3301      	adds	r3, #1
 8003022:	0019      	movs	r1, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	18d2      	adds	r2, r2, r3
 800302c:	2308      	movs	r3, #8
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	5c59      	ldrb	r1, [r3, r1]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	18d3      	adds	r3, r2, r3
 8003036:	1c0a      	adds	r2, r1, #0
 8003038:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < D; j++)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3301      	adds	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b07      	cmp	r3, #7
 8003044:	dde2      	ble.n	800300c <ShiftRow+0x40>
	for(i = 1; i < D; i++) {
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b07      	cmp	r3, #7
 8003050:	ddc3      	ble.n	8002fda <ShiftRow+0xe>
	}
}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b006      	add	sp, #24
 800305a:	bd80      	pop	{r7, pc}
 800305c:	80000007 	.word	0x80000007

08003060 <MixColumn>:

void MixColumn(byte state[D][D])
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	int i, j, k;
	byte tmp[D];
	for(j = 0; j < D; j++){
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	e04f      	b.n	800310e <MixColumn+0xae>
		for(i = 0; i < D; i++) {
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e030      	b.n	80030d6 <MixColumn+0x76>
			byte sum = 0;
 8003074:	2313      	movs	r3, #19
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
			for(k = 0; k < D; k++)
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e01b      	b.n	80030ba <MixColumn+0x5a>
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
 8003082:	4a27      	ldr	r2, [pc, #156]	; (8003120 <MixColumn+0xc0>)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	18d2      	adds	r2, r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	7818      	ldrb	r0, [r3, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	18d2      	adds	r2, r2, r3
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	18d3      	adds	r3, r2, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	0019      	movs	r1, r3
 80030a0:	f7ff feb0 	bl	8002e04 <FieldMult>
 80030a4:	0003      	movs	r3, r0
 80030a6:	0019      	movs	r1, r3
 80030a8:	2213      	movs	r2, #19
 80030aa:	18bb      	adds	r3, r7, r2
 80030ac:	18ba      	adds	r2, r7, r2
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	404a      	eors	r2, r1
 80030b2:	701a      	strb	r2, [r3, #0]
			for(k = 0; k < D; k++)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3301      	adds	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b07      	cmp	r3, #7
 80030be:	dde0      	ble.n	8003082 <MixColumn+0x22>
			tmp[i] = sum;
 80030c0:	2308      	movs	r3, #8
 80030c2:	18fa      	adds	r2, r7, r3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	18d3      	adds	r3, r2, r3
 80030c8:	2213      	movs	r2, #19
 80030ca:	18ba      	adds	r2, r7, r2
 80030cc:	7812      	ldrb	r2, [r2, #0]
 80030ce:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < D; i++) {
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3301      	adds	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b07      	cmp	r3, #7
 80030da:	ddcb      	ble.n	8003074 <MixColumn+0x14>
		}
		for(i = 0; i < D; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e00f      	b.n	8003102 <MixColumn+0xa2>
			state[i][j] = tmp[i];
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	18d2      	adds	r2, r2, r3
 80030ea:	2308      	movs	r3, #8
 80030ec:	18f9      	adds	r1, r7, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	18cb      	adds	r3, r1, r3
 80030f2:	7819      	ldrb	r1, [r3, #0]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	18d3      	adds	r3, r2, r3
 80030f8:	1c0a      	adds	r2, r1, #0
 80030fa:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < D; i++)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b07      	cmp	r3, #7
 8003106:	ddec      	ble.n	80030e2 <MixColumn+0x82>
	for(j = 0; j < D; j++){
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	3301      	adds	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b07      	cmp	r3, #7
 8003112:	ddac      	ble.n	800306e <MixColumn+0xe>
	}
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b008      	add	sp, #32
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	08005064 	.word	0x08005064

08003124 <Permutation>:
	}
}
#endif

void Permutation(byte state[D][D], int R)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < R; i++) {
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e02e      	b.n	8003192 <Permutation+0x6e>
		if(DEBUG) printf("--- Round %d ---\n", i);
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <Permutation+0x80>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <Permutation+0x24>
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <Permutation+0x84>)
 8003140:	0011      	movs	r1, r2
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fd26 	bl	8003b94 <iprintf>
		AddKey(state, i); PrintState(state);
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0011      	movs	r1, r2
 800314e:	0018      	movs	r0, r3
 8003150:	f7ff fee0 	bl	8002f14 <AddKey>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff fea6 	bl	8002ea8 <PrintState>
#ifndef _TABLE_
		SubCell(state); PrintState(state);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	0018      	movs	r0, r3
 8003160:	f7ff ff04 	bl	8002f6c <SubCell>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f7ff fe9e 	bl	8002ea8 <PrintState>
		ShiftRow(state); PrintState(state);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff ff2c 	bl	8002fcc <ShiftRow>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff fe96 	bl	8002ea8 <PrintState>
		MixColumn(state); 
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f7ff ff6e 	bl	8003060 <MixColumn>
#else
		SCShRMCS(state);
#endif
		PrintState(state);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff fe8e 	bl	8002ea8 <PrintState>
	for(i = 0; i < R; i++) {
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	dbcc      	blt.n	8003134 <Permutation+0x10>
	}
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200000a0 	.word	0x200000a0
 80031a8:	08004e04 	.word	0x08004e04

080031ac <PHOTON_Permutation>:

void PHOTON_Permutation(unsigned char *State_in)
{
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	b094      	sub	sp, #80	; 0x50
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    byte state[D][D];
    int i;

	for (i = 0; i < D * D; i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b8:	e02c      	b.n	8003214 <PHOTON_Permutation+0x68>
	{
		state[i / D][i % D] = (State_in[i / 2] >> (4 * (i & 1))) & 0xf;
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da00      	bge.n	80031c2 <PHOTON_Permutation+0x16>
 80031c0:	3301      	adds	r3, #1
 80031c2:	105b      	asrs	r3, r3, #1
 80031c4:	001a      	movs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	0019      	movs	r1, r3
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	2201      	movs	r2, #1
 80031d2:	4013      	ands	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4119      	asrs	r1, r3
 80031d8:	000b      	movs	r3, r1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da00      	bge.n	80031e4 <PHOTON_Permutation+0x38>
 80031e2:	3307      	adds	r3, #7
 80031e4:	10db      	asrs	r3, r3, #3
 80031e6:	001c      	movs	r4, r3
 80031e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ea:	4931      	ldr	r1, [pc, #196]	; (80032b0 <PHOTON_Permutation+0x104>)
 80031ec:	400b      	ands	r3, r1
 80031ee:	d504      	bpl.n	80031fa <PHOTON_Permutation+0x4e>
 80031f0:	3b01      	subs	r3, #1
 80031f2:	2108      	movs	r1, #8
 80031f4:	4249      	negs	r1, r1
 80031f6:	430b      	orrs	r3, r1
 80031f8:	3301      	adds	r3, #1
 80031fa:	0019      	movs	r1, r3
 80031fc:	230f      	movs	r3, #15
 80031fe:	4013      	ands	r3, r2
 8003200:	b2d8      	uxtb	r0, r3
 8003202:	230c      	movs	r3, #12
 8003204:	18fa      	adds	r2, r7, r3
 8003206:	00e3      	lsls	r3, r4, #3
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	1c02      	adds	r2, r0, #0
 800320c:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < D * D; i++)
 800320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003210:	3301      	adds	r3, #1
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003216:	2b3f      	cmp	r3, #63	; 0x3f
 8003218:	ddcf      	ble.n	80031ba <PHOTON_Permutation+0xe>
	}
   
    Permutation(state, ROUND);
 800321a:	230c      	movs	r3, #12
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	210c      	movs	r1, #12
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff ff7f 	bl	8003124 <Permutation>

	memset(State_in, 0, (D * D) / 2);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	2100      	movs	r1, #0
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fc00 	bl	8003a32 <memset>
	for (i = 0; i < D * D; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003236:	e033      	b.n	80032a0 <PHOTON_Permutation+0xf4>
	{
		State_in[i / 2] |= (state[i / D][i % D] & 0xf) << (4 * (i & 1));
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	2b00      	cmp	r3, #0
 800323c:	da00      	bge.n	8003240 <PHOTON_Permutation+0x94>
 800323e:	3301      	adds	r3, #1
 8003240:	105b      	asrs	r3, r3, #1
 8003242:	001d      	movs	r5, r3
 8003244:	002a      	movs	r2, r5
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	189b      	adds	r3, r3, r2
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b25a      	sxtb	r2, r3
 800324e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003250:	2b00      	cmp	r3, #0
 8003252:	da00      	bge.n	8003256 <PHOTON_Permutation+0xaa>
 8003254:	3307      	adds	r3, #7
 8003256:	10db      	asrs	r3, r3, #3
 8003258:	001c      	movs	r4, r3
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	4914      	ldr	r1, [pc, #80]	; (80032b0 <PHOTON_Permutation+0x104>)
 800325e:	400b      	ands	r3, r1
 8003260:	d504      	bpl.n	800326c <PHOTON_Permutation+0xc0>
 8003262:	3b01      	subs	r3, #1
 8003264:	2108      	movs	r1, #8
 8003266:	4249      	negs	r1, r1
 8003268:	430b      	orrs	r3, r1
 800326a:	3301      	adds	r3, #1
 800326c:	0018      	movs	r0, r3
 800326e:	230c      	movs	r3, #12
 8003270:	18f9      	adds	r1, r7, r3
 8003272:	00e3      	lsls	r3, r4, #3
 8003274:	18cb      	adds	r3, r1, r3
 8003276:	5c1b      	ldrb	r3, [r3, r0]
 8003278:	0019      	movs	r1, r3
 800327a:	230f      	movs	r3, #15
 800327c:	4019      	ands	r1, r3
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	2001      	movs	r0, #1
 8003282:	4003      	ands	r3, r0
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4099      	lsls	r1, r3
 8003288:	000b      	movs	r3, r1
 800328a:	b25b      	sxtb	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b25a      	sxtb	r2, r3
 8003290:	0029      	movs	r1, r5
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	185b      	adds	r3, r3, r1
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < D * D; i++)
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	3301      	adds	r3, #1
 800329e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a2:	2b3f      	cmp	r3, #63	; 0x3f
 80032a4:	ddc8      	ble.n	8003238 <PHOTON_Permutation+0x8c>
	}
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b014      	add	sp, #80	; 0x50
 80032ae:	bdb0      	pop	{r4, r5, r7, pc}
 80032b0:	80000007 	.word	0x80000007

080032b4 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0

	int ret = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 80032be:	f000 fb09 	bl	80038d4 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 80032c2:	f000 fa81 	bl	80037c8 <tick_msr_start>
	tick_msr_end();
 80032c6:	f000 fa9b 	bl	8003800 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 80032ca:	4a21      	ldr	r2, [pc, #132]	; (8003350 <genkat_benchmark_hash_aead+0x9c>)
 80032cc:	4921      	ldr	r1, [pc, #132]	; (8003354 <genkat_benchmark_hash_aead+0xa0>)
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <genkat_benchmark_hash_aead+0xa4>)
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fab9 	bl	8003848 <lwc_printf>
	lwc_printf("Memory usage: ");
 80032d6:	4b21      	ldr	r3, [pc, #132]	; (800335c <genkat_benchmark_hash_aead+0xa8>)
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 fab5 	bl	8003848 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <genkat_benchmark_hash_aead+0xac>)
 80032e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <genkat_benchmark_hash_aead+0xac>)
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <genkat_benchmark_hash_aead+0xb0>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 faad 	bl	8003848 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <genkat_benchmark_hash_aead+0xac>)
 80032f0:	6a19      	ldr	r1, [r3, #32]
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <genkat_benchmark_hash_aead+0xac>)
 80032f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <genkat_benchmark_hash_aead+0xac>)
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	481b      	ldr	r0, [pc, #108]	; (8003368 <genkat_benchmark_hash_aead+0xb4>)
 80032fc:	f000 faa4 	bl	8003848 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	005a      	lsls	r2, r3, #1
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <genkat_benchmark_hash_aead+0xb8>)
 8003306:	2100      	movs	r1, #0
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fb92 	bl	8003a32 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <genkat_benchmark_hash_aead+0xbc>)
 8003314:	2100      	movs	r1, #0
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fb8b 	bl	8003a32 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	005a      	lsls	r2, r3, #1
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <genkat_benchmark_hash_aead+0xc0>)
 8003322:	2100      	movs	r1, #0
 8003324:	0018      	movs	r0, r3
 8003326:	f000 fb84 	bl	8003a32 <memset>



#ifdef LWC_ALGO_AEAD
	ret = aead_generate_test_vectors();
 800332a:	f000 f827 	bl	800337c <aead_generate_test_vectors>
 800332e:	0003      	movs	r3, r0
 8003330:	607b      	str	r3, [r7, #4]

	if(ret != KAT_SUCCESS){
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <genkat_benchmark_hash_aead+0x90>
		lwc_printf("TotRes: Error %d", ret);
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <genkat_benchmark_hash_aead+0xc4>)
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f000 fa82 	bl	8003848 <lwc_printf>

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	080050a4 	.word	0x080050a4
 8003354:	08005124 	.word	0x08005124
 8003358:	08004e18 	.word	0x08004e18
 800335c:	08004e60 	.word	0x08004e60
 8003360:	2000068c 	.word	0x2000068c
 8003364:	08004e70 	.word	0x08004e70
 8003368:	08004e98 	.word	0x08004e98
 800336c:	200000ac 	.word	0x200000ac
 8003370:	200001ac 	.word	0x200001ac
 8003374:	200002ac 	.word	0x200002ac
 8003378:	08004ec4 	.word	0x08004ec4

0800337c <aead_generate_test_vectors>:
#ifdef LWC_ALGO_AEAD

#define MAX_MESSAGE_LENGTH			32
#define MAX_ASSOCIATED_DATA_LENGTH	32

int aead_generate_test_vectors() {
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	b0c7      	sub	sp, #284	; 0x11c
 8003380:	af0a      	add	r7, sp, #40	; 0x28
	unsigned char nonce[CRYPTO_NPUBBYTES];
	unsigned char msg[MAX_MESSAGE_LENGTH];
	unsigned char msg2[MAX_MESSAGE_LENGTH];
	unsigned char ad[MAX_ASSOCIATED_DATA_LENGTH];
	unsigned char ct[MAX_MESSAGE_LENGTH + CRYPTO_ABYTES];
	unsigned long long clen = 0, mlen2 = 0;
 8003382:	2200      	movs	r2, #0
 8003384:	2300      	movs	r3, #0
 8003386:	60ba      	str	r2, [r7, #8]
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	2300      	movs	r3, #0
 800338e:	603a      	str	r2, [r7, #0]
 8003390:	607b      	str	r3, [r7, #4]
	int func_ret = 0, ret_val = KAT_SUCCESS;
 8003392:	2300      	movs	r3, #0
 8003394:	22c4      	movs	r2, #196	; 0xc4
 8003396:	18ba      	adds	r2, r7, r2
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	2300      	movs	r3, #0
 800339c:	22ec      	movs	r2, #236	; 0xec
 800339e:	18ba      	adds	r2, r7, r2
 80033a0:	6013      	str	r3, [r2, #0]

	init_buffer(key, sizeof(key));
 80033a2:	23b4      	movs	r3, #180	; 0xb4
 80033a4:	18f9      	adds	r1, r7, r3
 80033a6:	2210      	movs	r2, #16
 80033a8:	2300      	movs	r3, #0
 80033aa:	0008      	movs	r0, r1
 80033ac:	f000 f9ce 	bl	800374c <init_buffer>
	init_buffer(nonce, sizeof(nonce));
 80033b0:	23a4      	movs	r3, #164	; 0xa4
 80033b2:	18f9      	adds	r1, r7, r3
 80033b4:	2210      	movs	r2, #16
 80033b6:	2300      	movs	r3, #0
 80033b8:	0008      	movs	r0, r1
 80033ba:	f000 f9c7 	bl	800374c <init_buffer>
	init_buffer(msg, sizeof(msg));
 80033be:	2384      	movs	r3, #132	; 0x84
 80033c0:	18f9      	adds	r1, r7, r3
 80033c2:	2220      	movs	r2, #32
 80033c4:	2300      	movs	r3, #0
 80033c6:	0008      	movs	r0, r1
 80033c8:	f000 f9c0 	bl	800374c <init_buffer>
	init_buffer(ad, sizeof(ad));
 80033cc:	2344      	movs	r3, #68	; 0x44
 80033ce:	18f9      	adds	r1, r7, r3
 80033d0:	2220      	movs	r2, #32
 80033d2:	2300      	movs	r3, #0
 80033d4:	0008      	movs	r0, r1
 80033d6:	f000 f9b9 	bl	800374c <init_buffer>

	ticks_res_pos = 0;
 80033da:	4bbd      	ldr	r3, [pc, #756]	; (80036d0 <aead_generate_test_vectors+0x354>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 80033e0:	2200      	movs	r2, #0
 80033e2:	2300      	movs	r3, #0
 80033e4:	21e0      	movs	r1, #224	; 0xe0
 80033e6:	1879      	adds	r1, r7, r1
 80033e8:	600a      	str	r2, [r1, #0]
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e0e0      	b.n	80035b0 <aead_generate_test_vectors+0x234>
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 80033ee:	2200      	movs	r2, #0
 80033f0:	2300      	movs	r3, #0
 80033f2:	21d8      	movs	r1, #216	; 0xd8
 80033f4:	1879      	adds	r1, r7, r1
 80033f6:	600a      	str	r2, [r1, #0]
 80033f8:	604b      	str	r3, [r1, #4]
 80033fa:	e0be      	b.n	800357a <aead_generate_test_vectors+0x1fe>

			lwc_printf("msg_len:%4d ad_len:%4d  ", (int) mlen, (int) adlen);
 80033fc:	25e0      	movs	r5, #224	; 0xe0
 80033fe:	197b      	adds	r3, r7, r5
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	26d8      	movs	r6, #216	; 0xd8
 8003404:	19bb      	adds	r3, r7, r6
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4bb2      	ldr	r3, [pc, #712]	; (80036d4 <aead_generate_test_vectors+0x358>)
 800340a:	0018      	movs	r0, r3
 800340c:	f000 fa1c 	bl	8003848 <lwc_printf>

			tick_msr_start();
 8003410:	f000 f9da 	bl	80037c8 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_encrypt(ct, &clen, msg, mlen, ad, adlen,	NULL, nonce, key);
 8003414:	2384      	movs	r3, #132	; 0x84
 8003416:	18fc      	adds	r4, r7, r3
 8003418:	2308      	movs	r3, #8
 800341a:	18f9      	adds	r1, r7, r3
 800341c:	2314      	movs	r3, #20
 800341e:	18f8      	adds	r0, r7, r3
 8003420:	23b4      	movs	r3, #180	; 0xb4
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	9308      	str	r3, [sp, #32]
 8003426:	23a4      	movs	r3, #164	; 0xa4
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	9307      	str	r3, [sp, #28]
 800342c:	2300      	movs	r3, #0
 800342e:	9306      	str	r3, [sp, #24]
 8003430:	19bb      	adds	r3, r7, r6
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	9204      	str	r2, [sp, #16]
 8003438:	9305      	str	r3, [sp, #20]
 800343a:	2344      	movs	r3, #68	; 0x44
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	197b      	adds	r3, r7, r5
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	9200      	str	r2, [sp, #0]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	0022      	movs	r2, r4
 800344c:	f7ff fa78 	bl	8002940 <crypto_aead_encrypt>
 8003450:	0003      	movs	r3, r0
 8003452:	24c4      	movs	r4, #196	; 0xc4
 8003454:	193a      	adds	r2, r7, r4
 8003456:	6013      	str	r3, [r2, #0]
#else
			func_ret = 0;
#endif
			tick_msr_end();
 8003458:	f000 f9d2 	bl	8003800 <tick_msr_end>

			lwc_printf("enc:%8lu us:%8lu ms:%8lu   ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 800345c:	4b9e      	ldr	r3, [pc, #632]	; (80036d8 <aead_generate_test_vectors+0x35c>)
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	4b9d      	ldr	r3, [pc, #628]	; (80036d8 <aead_generate_test_vectors+0x35c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091a      	lsrs	r2, r3, #4
 8003466:	4b9d      	ldr	r3, [pc, #628]	; (80036dc <aead_generate_test_vectors+0x360>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	489d      	ldr	r0, [pc, #628]	; (80036e0 <aead_generate_test_vectors+0x364>)
 800346c:	f000 f9ec 	bl	8003848 <lwc_printf>
			aead_enc_ticks_res[ticks_res_pos] = gb_tick_cnt;
 8003470:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <aead_generate_test_vectors+0x354>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b98      	ldr	r3, [pc, #608]	; (80036d8 <aead_generate_test_vectors+0x35c>)
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	4b9a      	ldr	r3, [pc, #616]	; (80036e4 <aead_generate_test_vectors+0x368>)
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	50d1      	str	r1, [r2, r3]

			if (func_ret != 0) {
 800347e:	193b      	adds	r3, r7, r4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <aead_generate_test_vectors+0x116>
				ret_val = KAT_CRYPTO_FAILURE;
 8003486:	2304      	movs	r3, #4
 8003488:	425b      	negs	r3, r3
 800348a:	22ec      	movs	r2, #236	; 0xec
 800348c:	18ba      	adds	r2, r7, r2
 800348e:	6013      	str	r3, [r2, #0]
				break;
 8003490:	e083      	b.n	800359a <aead_generate_test_vectors+0x21e>
			}




			tick_msr_start();
 8003492:	f000 f999 	bl	80037c8 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_decrypt(msg2, &mlen2, NULL, ct, clen, ad, adlen, nonce, key);
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2114      	movs	r1, #20
 800349c:	187e      	adds	r6, r7, r1
 800349e:	003d      	movs	r5, r7
 80034a0:	2064      	movs	r0, #100	; 0x64
 80034a2:	183c      	adds	r4, r7, r0
 80034a4:	21b4      	movs	r1, #180	; 0xb4
 80034a6:	1879      	adds	r1, r7, r1
 80034a8:	9107      	str	r1, [sp, #28]
 80034aa:	21a4      	movs	r1, #164	; 0xa4
 80034ac:	1879      	adds	r1, r7, r1
 80034ae:	9106      	str	r1, [sp, #24]
 80034b0:	21d8      	movs	r1, #216	; 0xd8
 80034b2:	1879      	adds	r1, r7, r1
 80034b4:	6808      	ldr	r0, [r1, #0]
 80034b6:	6849      	ldr	r1, [r1, #4]
 80034b8:	9004      	str	r0, [sp, #16]
 80034ba:	9105      	str	r1, [sp, #20]
 80034bc:	2144      	movs	r1, #68	; 0x44
 80034be:	1879      	adds	r1, r7, r1
 80034c0:	9102      	str	r1, [sp, #8]
 80034c2:	9200      	str	r2, [sp, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	0033      	movs	r3, r6
 80034c8:	2200      	movs	r2, #0
 80034ca:	0029      	movs	r1, r5
 80034cc:	0020      	movs	r0, r4
 80034ce:	f7ff fb24 	bl	8002b1a <crypto_aead_decrypt>
 80034d2:	0003      	movs	r3, r0
 80034d4:	24c4      	movs	r4, #196	; 0xc4
 80034d6:	193a      	adds	r2, r7, r4
 80034d8:	6013      	str	r3, [r2, #0]
#else
			func_ret = 0;
#endif
			tick_msr_end();
 80034da:	f000 f991 	bl	8003800 <tick_msr_end>

			lwc_printf("dec:%8lu us:%8lu ms:%8lu ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 80034de:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <aead_generate_test_vectors+0x35c>)
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	4b7d      	ldr	r3, [pc, #500]	; (80036d8 <aead_generate_test_vectors+0x35c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	091a      	lsrs	r2, r3, #4
 80034e8:	4b7c      	ldr	r3, [pc, #496]	; (80036dc <aead_generate_test_vectors+0x360>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	487e      	ldr	r0, [pc, #504]	; (80036e8 <aead_generate_test_vectors+0x36c>)
 80034ee:	f000 f9ab 	bl	8003848 <lwc_printf>
			lwc_print_hex_str(ct, clen);
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2114      	movs	r1, #20
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 f9c7 	bl	8003890 <lwc_print_hex_str>
			lwc_printf("\n");
 8003502:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <aead_generate_test_vectors+0x370>)
 8003504:	0018      	movs	r0, r3
 8003506:	f000 f99f 	bl	8003848 <lwc_printf>
			aead_dec_ticks_res[ticks_res_pos] = gb_tick_cnt;
 800350a:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <aead_generate_test_vectors+0x354>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b72      	ldr	r3, [pc, #456]	; (80036d8 <aead_generate_test_vectors+0x35c>)
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	4b77      	ldr	r3, [pc, #476]	; (80036f0 <aead_generate_test_vectors+0x374>)
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	50d1      	str	r1, [r2, r3]


#ifdef ENABLE_ALGO_TEST
			if ((func_ret != 0) || (mlen != mlen2)	|| (memcmp(msg, msg2, mlen) != 0)) {
 8003518:	193b      	adds	r3, r7, r4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d116      	bne.n	800354e <aead_generate_test_vectors+0x1d2>
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	24e0      	movs	r4, #224	; 0xe0
 8003526:	1939      	adds	r1, r7, r4
 8003528:	6809      	ldr	r1, [r1, #0]
 800352a:	4291      	cmp	r1, r2
 800352c:	d10f      	bne.n	800354e <aead_generate_test_vectors+0x1d2>
 800352e:	21e4      	movs	r1, #228	; 0xe4
 8003530:	1879      	adds	r1, r7, r1
 8003532:	6809      	ldr	r1, [r1, #0]
 8003534:	4299      	cmp	r1, r3
 8003536:	d10a      	bne.n	800354e <aead_generate_test_vectors+0x1d2>
 8003538:	193b      	adds	r3, r7, r4
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2064      	movs	r0, #100	; 0x64
 800353e:	1839      	adds	r1, r7, r0
 8003540:	2384      	movs	r3, #132	; 0x84
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	0018      	movs	r0, r3
 8003546:	f000 fa5d 	bl	8003a04 <memcmp>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d005      	beq.n	800355a <aead_generate_test_vectors+0x1de>
				ret_val = KAT_CRYPTO_FAILURE;
 800354e:	2304      	movs	r3, #4
 8003550:	425b      	negs	r3, r3
 8003552:	22ec      	movs	r2, #236	; 0xec
 8003554:	18ba      	adds	r2, r7, r2
 8003556:	6013      	str	r3, [r2, #0]
				break;
 8003558:	e01f      	b.n	800359a <aead_generate_test_vectors+0x21e>
			}
#endif


			ticks_res_pos++;
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <aead_generate_test_vectors+0x354>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	4b5b      	ldr	r3, [pc, #364]	; (80036d0 <aead_generate_test_vectors+0x354>)
 8003562:	601a      	str	r2, [r3, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8003564:	24d8      	movs	r4, #216	; 0xd8
 8003566:	193b      	adds	r3, r7, r4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2008      	movs	r0, #8
 800356e:	2100      	movs	r1, #0
 8003570:	1812      	adds	r2, r2, r0
 8003572:	414b      	adcs	r3, r1
 8003574:	1939      	adds	r1, r7, r4
 8003576:	600a      	str	r2, [r1, #0]
 8003578:	604b      	str	r3, [r1, #4]
 800357a:	22dc      	movs	r2, #220	; 0xdc
 800357c:	18bb      	adds	r3, r7, r2
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <aead_generate_test_vectors+0x21e>
 8003584:	18bb      	adds	r3, r7, r2
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d000      	beq.n	800358e <aead_generate_test_vectors+0x212>
 800358c:	e736      	b.n	80033fc <aead_generate_test_vectors+0x80>
 800358e:	23d8      	movs	r3, #216	; 0xd8
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b20      	cmp	r3, #32
 8003596:	d800      	bhi.n	800359a <aead_generate_test_vectors+0x21e>
 8003598:	e730      	b.n	80033fc <aead_generate_test_vectors+0x80>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 800359a:	24e0      	movs	r4, #224	; 0xe0
 800359c:	193b      	adds	r3, r7, r4
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2008      	movs	r0, #8
 80035a4:	2100      	movs	r1, #0
 80035a6:	1812      	adds	r2, r2, r0
 80035a8:	414b      	adcs	r3, r1
 80035aa:	1939      	adds	r1, r7, r4
 80035ac:	600a      	str	r2, [r1, #0]
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	22e4      	movs	r2, #228	; 0xe4
 80035b2:	18bb      	adds	r3, r7, r2
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <aead_generate_test_vectors+0x25c>
 80035ba:	18bb      	adds	r3, r7, r2
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <aead_generate_test_vectors+0x250>
 80035c2:	23e0      	movs	r3, #224	; 0xe0
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d805      	bhi.n	80035d8 <aead_generate_test_vectors+0x25c>
 80035cc:	23ec      	movs	r3, #236	; 0xec
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <aead_generate_test_vectors+0x25c>
 80035d6:	e70a      	b.n	80033ee <aead_generate_test_vectors+0x72>

		}//end of foe loop
	}//end of for loop

	if (ret_val != 0) {
 80035d8:	23ec      	movs	r3, #236	; 0xec
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <aead_generate_test_vectors+0x26e>
		lwc_printf("Error occurred\n");
 80035e2:	4b44      	ldr	r3, [pc, #272]	; (80036f4 <aead_generate_test_vectors+0x378>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f92f 	bl	8003848 <lwc_printf>
	}

	/* Now print Results in one single line for easier file processing*/
	ticks_res_pos = 0;
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <aead_generate_test_vectors+0x354>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
	aead_hash_print_res("AEAD");
 80035f0:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <aead_generate_test_vectors+0x37c>)
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f888 	bl	8003708 <aead_hash_print_res>
	lwc_printf("AEADTotRes: ");
 80035f8:	4b40      	ldr	r3, [pc, #256]	; (80036fc <aead_generate_test_vectors+0x380>)
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f924 	bl	8003848 <lwc_printf>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
 8003600:	2200      	movs	r2, #0
 8003602:	2300      	movs	r3, #0
 8003604:	21d0      	movs	r1, #208	; 0xd0
 8003606:	1879      	adds	r1, r7, r1
 8003608:	600a      	str	r2, [r1, #0]
 800360a:	604b      	str	r3, [r1, #4]
 800360c:	e04a      	b.n	80036a4 <aead_generate_test_vectors+0x328>
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 800360e:	2200      	movs	r2, #0
 8003610:	2300      	movs	r3, #0
 8003612:	21c8      	movs	r1, #200	; 0xc8
 8003614:	1879      	adds	r1, r7, r1
 8003616:	600a      	str	r2, [r1, #0]
 8003618:	604b      	str	r3, [r1, #4]
 800361a:	e02a      	b.n	8003672 <aead_generate_test_vectors+0x2f6>
			lwc_printf("enc(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_enc_ticks_res[ticks_res_pos]);
 800361c:	26d0      	movs	r6, #208	; 0xd0
 800361e:	19bb      	adds	r3, r7, r6
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	25c8      	movs	r5, #200	; 0xc8
 8003624:	197b      	adds	r3, r7, r5
 8003626:	681c      	ldr	r4, [r3, #0]
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <aead_generate_test_vectors+0x354>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <aead_generate_test_vectors+0x368>)
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	58d3      	ldr	r3, [r2, r3]
 8003632:	4833      	ldr	r0, [pc, #204]	; (8003700 <aead_generate_test_vectors+0x384>)
 8003634:	0022      	movs	r2, r4
 8003636:	f000 f907 	bl	8003848 <lwc_printf>
			lwc_printf("dec(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_dec_ticks_res[ticks_res_pos]);
 800363a:	19bb      	adds	r3, r7, r6
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	197b      	adds	r3, r7, r5
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <aead_generate_test_vectors+0x354>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <aead_generate_test_vectors+0x374>)
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	58d3      	ldr	r3, [r2, r3]
 800364c:	482d      	ldr	r0, [pc, #180]	; (8003704 <aead_generate_test_vectors+0x388>)
 800364e:	0022      	movs	r2, r4
 8003650:	f000 f8fa 	bl	8003848 <lwc_printf>
			ticks_res_pos++;
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <aead_generate_test_vectors+0x354>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <aead_generate_test_vectors+0x354>)
 800365c:	601a      	str	r2, [r3, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 800365e:	197b      	adds	r3, r7, r5
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2008      	movs	r0, #8
 8003666:	2100      	movs	r1, #0
 8003668:	1812      	adds	r2, r2, r0
 800366a:	414b      	adcs	r3, r1
 800366c:	1979      	adds	r1, r7, r5
 800366e:	600a      	str	r2, [r1, #0]
 8003670:	604b      	str	r3, [r1, #4]
 8003672:	22cc      	movs	r2, #204	; 0xcc
 8003674:	18bb      	adds	r3, r7, r2
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <aead_generate_test_vectors+0x312>
 800367c:	18bb      	adds	r3, r7, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1cb      	bne.n	800361c <aead_generate_test_vectors+0x2a0>
 8003684:	23c8      	movs	r3, #200	; 0xc8
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b20      	cmp	r3, #32
 800368c:	d9c6      	bls.n	800361c <aead_generate_test_vectors+0x2a0>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
 800368e:	24d0      	movs	r4, #208	; 0xd0
 8003690:	193b      	adds	r3, r7, r4
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2008      	movs	r0, #8
 8003698:	2100      	movs	r1, #0
 800369a:	1812      	adds	r2, r2, r0
 800369c:	414b      	adcs	r3, r1
 800369e:	1939      	adds	r1, r7, r4
 80036a0:	600a      	str	r2, [r1, #0]
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	22d4      	movs	r2, #212	; 0xd4
 80036a6:	18bb      	adds	r3, r7, r2
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <aead_generate_test_vectors+0x344>
 80036ae:	18bb      	adds	r3, r7, r2
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ab      	bne.n	800360e <aead_generate_test_vectors+0x292>
 80036b6:	23d0      	movs	r3, #208	; 0xd0
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d9a6      	bls.n	800360e <aead_generate_test_vectors+0x292>
		}
	}

	return ret_val;
 80036c0:	23ec      	movs	r3, #236	; 0xec
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	681b      	ldr	r3, [r3, #0]
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b03d      	add	sp, #244	; 0xf4
 80036cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	200003ac 	.word	0x200003ac
 80036d4:	08004ed8 	.word	0x08004ed8
 80036d8:	200000a4 	.word	0x200000a4
 80036dc:	200000a8 	.word	0x200000a8
 80036e0:	08004ef4 	.word	0x08004ef4
 80036e4:	200000ac 	.word	0x200000ac
 80036e8:	08004f10 	.word	0x08004f10
 80036ec:	08004f2c 	.word	0x08004f2c
 80036f0:	200001ac 	.word	0x200001ac
 80036f4:	08004f30 	.word	0x08004f30
 80036f8:	08004f40 	.word	0x08004f40
 80036fc:	08004f48 	.word	0x08004f48
 8003700:	08004f58 	.word	0x08004f58
 8003704:	08004f6c 	.word	0x08004f6c

08003708 <aead_hash_print_res>:
	return ret_val;
}

#endif

void aead_hash_print_res(char *algo_type){
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <aead_hash_print_res+0x30>)
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <aead_hash_print_res+0x34>)
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	480a      	ldr	r0, [pc, #40]	; (8003740 <aead_hash_print_res+0x38>)
 8003718:	f000 f896 	bl	8003848 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <aead_hash_print_res+0x3c>)
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <aead_hash_print_res+0x3c>)
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <aead_hash_print_res+0x3c>)
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	4807      	ldr	r0, [pc, #28]	; (8003748 <aead_hash_print_res+0x40>)
 800372a:	f000 f88d 	bl	8003848 <lwc_printf>
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	080050a4 	.word	0x080050a4
 800373c:	08005124 	.word	0x08005124
 8003740:	08004f80 	.word	0x08004f80
 8003744:	2000068c 	.word	0x2000068c
 8003748:	08004fbc 	.word	0x08004fbc

0800374c <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	603a      	str	r2, [r7, #0]
 8003756:	607b      	str	r3, [r7, #4]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003758:	2200      	movs	r2, #0
 800375a:	2300      	movs	r3, #0
 800375c:	613a      	str	r2, [r7, #16]
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e011      	b.n	8003786 <init_buffer+0x3a>
		buffer[i] = (unsigned char) i + '0';
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1c13      	adds	r3, r2, #0
 8003768:	b2da      	uxtb	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	18cb      	adds	r3, r1, r3
 8003770:	3230      	adds	r2, #48	; 0x30
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2001      	movs	r0, #1
 800377c:	2100      	movs	r1, #0
 800377e:	1812      	adds	r2, r2, r0
 8003780:	414b      	adcs	r3, r1
 8003782:	613a      	str	r2, [r7, #16]
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	429a      	cmp	r2, r3
 800378c:	d8e9      	bhi.n	8003762 <init_buffer+0x16>
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	429a      	cmp	r2, r3
 8003794:	d103      	bne.n	800379e <init_buffer+0x52>
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d8e1      	bhi.n	8003762 <init_buffer+0x16>
	}
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b006      	add	sp, #24
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	200003b0 	.word	0x200003b0

080037c8 <tick_msr_start>:

void tick_msr_start(void) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <tick_msr_start+0x2c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <tick_msr_start+0x30>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 80037da:	f7fd f81f 	bl	800081c <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <tick_msr_start+0x34>)
 80037e2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <tick_msr_start+0x30>)
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7fe f82e 	bl	8001848 <HAL_TIM_Base_Start_IT>
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	200003b0 	.word	0x200003b0
 80037f8:	20000640 	.word	0x20000640
 80037fc:	200000a8 	.word	0x200000a8

08003800 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <tick_msr_end+0x38>)
 8003806:	0018      	movs	r0, r3
 8003808:	f7fe f870 	bl	80018ec <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <tick_msr_end+0x3c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	041a      	lsls	r2, r3, #16
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <tick_msr_end+0x38>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	431a      	orrs	r2, r3
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <tick_msr_end+0x40>)
 800381c:	601a      	str	r2, [r3, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 800381e:	f7fc fffd 	bl	800081c <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <tick_msr_end+0x44>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <tick_msr_end+0x44>)
 800382c:	601a      	str	r2, [r3, #0]
	return gb_tick_cnt;
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <tick_msr_end+0x40>)
 8003830:	681b      	ldr	r3, [r3, #0]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000640 	.word	0x20000640
 800383c:	200003b0 	.word	0x200003b0
 8003840:	200000a4 	.word	0x200000a4
 8003844:	200000a8 	.word	0x200000a8

08003848 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003848:	b40f      	push	{r0, r1, r2, r3}
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8003850:	2314      	movs	r3, #20
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6939      	ldr	r1, [r7, #16]
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <lwc_printf+0x40>)
 800385c:	0018      	movs	r0, r3
 800385e:	f000 f9ef 	bl	8003c40 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <lwc_printf+0x40>)
 8003864:	0018      	movs	r0, r3
 8003866:	f7fc fc4f 	bl	8000108 <strlen>
 800386a:	0003      	movs	r3, r0
 800386c:	b29a      	uxth	r2, r3
 800386e:	4906      	ldr	r1, [pc, #24]	; (8003888 <lwc_printf+0x40>)
 8003870:	4806      	ldr	r0, [pc, #24]	; (800388c <lwc_printf+0x44>)
 8003872:	2364      	movs	r3, #100	; 0x64
 8003874:	f7fe fae0 	bl	8001e38 <HAL_UART_Transmit>
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bc80      	pop	{r7}
 8003880:	bc08      	pop	{r3}
 8003882:	b004      	add	sp, #16
 8003884:	4718      	bx	r3
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	200003b4 	.word	0x200003b4
 800388c:	200005bc 	.word	0x200005bc

08003890 <lwc_print_hex_str>:


void lwc_print_hex_str(const void *data, uint32_t len){
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]

	uint8_t *buf = (uint8_t *)data;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60bb      	str	r3, [r7, #8]

	for(uint32_t i = 0; i <len; i++){
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e00c      	b.n	80038be <lwc_print_hex_str+0x2e>
		lwc_printf("%02X", buf[i]);
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	001a      	movs	r2, r3
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <lwc_print_hex_str+0x40>)
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff ffc8 	bl	8003848 <lwc_printf>
	for(uint32_t i = 0; i <len; i++){
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3ee      	bcc.n	80038a4 <lwc_print_hex_str+0x14>
	}

}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	08004fe4 	.word	0x08004fe4

080038d4 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <get_memory_usage+0x98>)
 80038da:	2234      	movs	r2, #52	; 0x34
 80038dc:	2100      	movs	r1, #0
 80038de:	0018      	movs	r0, r3
 80038e0:	f000 f8a7 	bl	8003a32 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <get_memory_usage+0x98>)
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0512      	lsls	r2, r2, #20
 80038ea:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <get_memory_usage+0x98>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <get_memory_usage+0x98>)
 80038f2:	605a      	str	r2, [r3, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <get_memory_usage+0x9c>)
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <get_memory_usage+0x98>)
 80038f8:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 80038fa:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <get_memory_usage+0xa0>)
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <get_memory_usage+0x98>)
 80038fe:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <get_memory_usage+0xa4>)
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <get_memory_usage+0x98>)
 8003904:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8003906:	4a1d      	ldr	r2, [pc, #116]	; (800397c <get_memory_usage+0xa8>)
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <get_memory_usage+0x98>)
 800390a:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <get_memory_usage+0xac>)
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <get_memory_usage+0x98>)
 8003910:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <get_memory_usage+0xb0>)
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <get_memory_usage+0x98>)
 8003916:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <get_memory_usage+0x98>)
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <get_memory_usage+0x98>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	1ad2      	subs	r2, r2, r3
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <get_memory_usage+0x98>)
 8003924:	621a      	str	r2, [r3, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <get_memory_usage+0x98>)
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <get_memory_usage+0x98>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <get_memory_usage+0x98>)
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <get_memory_usage+0x98>)
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <get_memory_usage+0x98>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	1ad2      	subs	r2, r2, r3
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <get_memory_usage+0x98>)
 8003940:	629a      	str	r2, [r3, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <get_memory_usage+0x98>)
 8003944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <get_memory_usage+0x98>)
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	18d2      	adds	r2, r2, r3
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <get_memory_usage+0x98>)
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <get_memory_usage+0x98>)
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <get_memory_usage+0x98>)
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	18d2      	adds	r2, r2, r3
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <get_memory_usage+0x98>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <get_memory_usage+0x98>)
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	2000068c 	.word	0x2000068c
 8003970:	08004ddc 	.word	0x08004ddc
 8003974:	20000080 	.word	0x20000080
 8003978:	200006d0 	.word	0x200006d0
 800397c:	20000000 	.word	0x20000000
 8003980:	20000080 	.word	0x20000080
 8003984:	08005244 	.word	0x08005244

08003988 <__errno>:
 8003988:	4b01      	ldr	r3, [pc, #4]	; (8003990 <__errno+0x8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	4770      	bx	lr
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	2000001c 	.word	0x2000001c

08003994 <__libc_init_array>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	2600      	movs	r6, #0
 8003998:	4d0c      	ldr	r5, [pc, #48]	; (80039cc <__libc_init_array+0x38>)
 800399a:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <__libc_init_array+0x3c>)
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	42a6      	cmp	r6, r4
 80039a2:	d109      	bne.n	80039b8 <__libc_init_array+0x24>
 80039a4:	2600      	movs	r6, #0
 80039a6:	f001 fa0d 	bl	8004dc4 <_init>
 80039aa:	4d0a      	ldr	r5, [pc, #40]	; (80039d4 <__libc_init_array+0x40>)
 80039ac:	4c0a      	ldr	r4, [pc, #40]	; (80039d8 <__libc_init_array+0x44>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	42a6      	cmp	r6, r4
 80039b4:	d105      	bne.n	80039c2 <__libc_init_array+0x2e>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	00b3      	lsls	r3, r6, #2
 80039ba:	58eb      	ldr	r3, [r5, r3]
 80039bc:	4798      	blx	r3
 80039be:	3601      	adds	r6, #1
 80039c0:	e7ee      	b.n	80039a0 <__libc_init_array+0xc>
 80039c2:	00b3      	lsls	r3, r6, #2
 80039c4:	58eb      	ldr	r3, [r5, r3]
 80039c6:	4798      	blx	r3
 80039c8:	3601      	adds	r6, #1
 80039ca:	e7f2      	b.n	80039b2 <__libc_init_array+0x1e>
 80039cc:	0800523c 	.word	0x0800523c
 80039d0:	0800523c 	.word	0x0800523c
 80039d4:	0800523c 	.word	0x0800523c
 80039d8:	08005240 	.word	0x08005240

080039dc <malloc>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	4b03      	ldr	r3, [pc, #12]	; (80039ec <malloc+0x10>)
 80039e0:	0001      	movs	r1, r0
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f000 f878 	bl	8003ad8 <_malloc_r>
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	2000001c 	.word	0x2000001c

080039f0 <free>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <free+0x10>)
 80039f4:	0001      	movs	r1, r0
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	f000 f824 	bl	8003a44 <_free_r>
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	2000001c 	.word	0x2000001c

08003a04 <memcmp>:
 8003a04:	b530      	push	{r4, r5, lr}
 8003a06:	2400      	movs	r4, #0
 8003a08:	3901      	subs	r1, #1
 8003a0a:	42a2      	cmp	r2, r4
 8003a0c:	d101      	bne.n	8003a12 <memcmp+0xe>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e005      	b.n	8003a1e <memcmp+0x1a>
 8003a12:	5d03      	ldrb	r3, [r0, r4]
 8003a14:	3401      	adds	r4, #1
 8003a16:	5d0d      	ldrb	r5, [r1, r4]
 8003a18:	42ab      	cmp	r3, r5
 8003a1a:	d0f6      	beq.n	8003a0a <memcmp+0x6>
 8003a1c:	1b58      	subs	r0, r3, r5
 8003a1e:	bd30      	pop	{r4, r5, pc}

08003a20 <memcpy>:
 8003a20:	2300      	movs	r3, #0
 8003a22:	b510      	push	{r4, lr}
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d100      	bne.n	8003a2a <memcpy+0xa>
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	5ccc      	ldrb	r4, [r1, r3]
 8003a2c:	54c4      	strb	r4, [r0, r3]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	e7f8      	b.n	8003a24 <memcpy+0x4>

08003a32 <memset>:
 8003a32:	0003      	movs	r3, r0
 8003a34:	1882      	adds	r2, r0, r2
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d100      	bne.n	8003a3c <memset+0xa>
 8003a3a:	4770      	bx	lr
 8003a3c:	7019      	strb	r1, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	e7f9      	b.n	8003a36 <memset+0x4>
	...

08003a44 <_free_r>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	0005      	movs	r5, r0
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d010      	beq.n	8003a6e <_free_r+0x2a>
 8003a4c:	1f0c      	subs	r4, r1, #4
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da00      	bge.n	8003a56 <_free_r+0x12>
 8003a54:	18e4      	adds	r4, r4, r3
 8003a56:	0028      	movs	r0, r5
 8003a58:	f000 fa04 	bl	8003e64 <__malloc_lock>
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <_free_r+0x90>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <_free_r+0x2c>
 8003a64:	6063      	str	r3, [r4, #4]
 8003a66:	6014      	str	r4, [r2, #0]
 8003a68:	0028      	movs	r0, r5
 8003a6a:	f000 fa03 	bl	8003e74 <__malloc_unlock>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	d908      	bls.n	8003a86 <_free_r+0x42>
 8003a74:	6821      	ldr	r1, [r4, #0]
 8003a76:	1860      	adds	r0, r4, r1
 8003a78:	4283      	cmp	r3, r0
 8003a7a:	d1f3      	bne.n	8003a64 <_free_r+0x20>
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	1841      	adds	r1, r0, r1
 8003a82:	6021      	str	r1, [r4, #0]
 8003a84:	e7ee      	b.n	8003a64 <_free_r+0x20>
 8003a86:	001a      	movs	r2, r3
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <_free_r+0x4e>
 8003a8e:	42a3      	cmp	r3, r4
 8003a90:	d9f9      	bls.n	8003a86 <_free_r+0x42>
 8003a92:	6811      	ldr	r1, [r2, #0]
 8003a94:	1850      	adds	r0, r2, r1
 8003a96:	42a0      	cmp	r0, r4
 8003a98:	d10b      	bne.n	8003ab2 <_free_r+0x6e>
 8003a9a:	6820      	ldr	r0, [r4, #0]
 8003a9c:	1809      	adds	r1, r1, r0
 8003a9e:	1850      	adds	r0, r2, r1
 8003aa0:	6011      	str	r1, [r2, #0]
 8003aa2:	4283      	cmp	r3, r0
 8003aa4:	d1e0      	bne.n	8003a68 <_free_r+0x24>
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	1841      	adds	r1, r0, r1
 8003aac:	6011      	str	r1, [r2, #0]
 8003aae:	6053      	str	r3, [r2, #4]
 8003ab0:	e7da      	b.n	8003a68 <_free_r+0x24>
 8003ab2:	42a0      	cmp	r0, r4
 8003ab4:	d902      	bls.n	8003abc <_free_r+0x78>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	e7d5      	b.n	8003a68 <_free_r+0x24>
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	1860      	adds	r0, r4, r1
 8003ac0:	4283      	cmp	r3, r0
 8003ac2:	d103      	bne.n	8003acc <_free_r+0x88>
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	1841      	adds	r1, r0, r1
 8003aca:	6021      	str	r1, [r4, #0]
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6054      	str	r4, [r2, #4]
 8003ad0:	e7ca      	b.n	8003a68 <_free_r+0x24>
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	200005b4 	.word	0x200005b4

08003ad8 <_malloc_r>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	2303      	movs	r3, #3
 8003adc:	1ccd      	adds	r5, r1, #3
 8003ade:	439d      	bics	r5, r3
 8003ae0:	3508      	adds	r5, #8
 8003ae2:	0006      	movs	r6, r0
 8003ae4:	2d0c      	cmp	r5, #12
 8003ae6:	d21f      	bcs.n	8003b28 <_malloc_r+0x50>
 8003ae8:	250c      	movs	r5, #12
 8003aea:	42a9      	cmp	r1, r5
 8003aec:	d81e      	bhi.n	8003b2c <_malloc_r+0x54>
 8003aee:	0030      	movs	r0, r6
 8003af0:	f000 f9b8 	bl	8003e64 <__malloc_lock>
 8003af4:	4925      	ldr	r1, [pc, #148]	; (8003b8c <_malloc_r+0xb4>)
 8003af6:	680a      	ldr	r2, [r1, #0]
 8003af8:	0014      	movs	r4, r2
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	d11a      	bne.n	8003b34 <_malloc_r+0x5c>
 8003afe:	4f24      	ldr	r7, [pc, #144]	; (8003b90 <_malloc_r+0xb8>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <_malloc_r+0x38>
 8003b06:	0021      	movs	r1, r4
 8003b08:	0030      	movs	r0, r6
 8003b0a:	f000 f871 	bl	8003bf0 <_sbrk_r>
 8003b0e:	6038      	str	r0, [r7, #0]
 8003b10:	0029      	movs	r1, r5
 8003b12:	0030      	movs	r0, r6
 8003b14:	f000 f86c 	bl	8003bf0 <_sbrk_r>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d12b      	bne.n	8003b74 <_malloc_r+0x9c>
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	0030      	movs	r0, r6
 8003b20:	6033      	str	r3, [r6, #0]
 8003b22:	f000 f9a7 	bl	8003e74 <__malloc_unlock>
 8003b26:	e003      	b.n	8003b30 <_malloc_r+0x58>
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	dade      	bge.n	8003aea <_malloc_r+0x12>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	6033      	str	r3, [r6, #0]
 8003b30:	2000      	movs	r0, #0
 8003b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	1b5b      	subs	r3, r3, r5
 8003b38:	d419      	bmi.n	8003b6e <_malloc_r+0x96>
 8003b3a:	2b0b      	cmp	r3, #11
 8003b3c:	d903      	bls.n	8003b46 <_malloc_r+0x6e>
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	18e4      	adds	r4, r4, r3
 8003b42:	6025      	str	r5, [r4, #0]
 8003b44:	e003      	b.n	8003b4e <_malloc_r+0x76>
 8003b46:	6863      	ldr	r3, [r4, #4]
 8003b48:	42a2      	cmp	r2, r4
 8003b4a:	d10e      	bne.n	8003b6a <_malloc_r+0x92>
 8003b4c:	600b      	str	r3, [r1, #0]
 8003b4e:	0030      	movs	r0, r6
 8003b50:	f000 f990 	bl	8003e74 <__malloc_unlock>
 8003b54:	0020      	movs	r0, r4
 8003b56:	2207      	movs	r2, #7
 8003b58:	300b      	adds	r0, #11
 8003b5a:	1d23      	adds	r3, r4, #4
 8003b5c:	4390      	bics	r0, r2
 8003b5e:	1ac2      	subs	r2, r0, r3
 8003b60:	4298      	cmp	r0, r3
 8003b62:	d0e6      	beq.n	8003b32 <_malloc_r+0x5a>
 8003b64:	1a1b      	subs	r3, r3, r0
 8003b66:	50a3      	str	r3, [r4, r2]
 8003b68:	e7e3      	b.n	8003b32 <_malloc_r+0x5a>
 8003b6a:	6053      	str	r3, [r2, #4]
 8003b6c:	e7ef      	b.n	8003b4e <_malloc_r+0x76>
 8003b6e:	0022      	movs	r2, r4
 8003b70:	6864      	ldr	r4, [r4, #4]
 8003b72:	e7c2      	b.n	8003afa <_malloc_r+0x22>
 8003b74:	2303      	movs	r3, #3
 8003b76:	1cc4      	adds	r4, r0, #3
 8003b78:	439c      	bics	r4, r3
 8003b7a:	42a0      	cmp	r0, r4
 8003b7c:	d0e1      	beq.n	8003b42 <_malloc_r+0x6a>
 8003b7e:	1a21      	subs	r1, r4, r0
 8003b80:	0030      	movs	r0, r6
 8003b82:	f000 f835 	bl	8003bf0 <_sbrk_r>
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	d1db      	bne.n	8003b42 <_malloc_r+0x6a>
 8003b8a:	e7c7      	b.n	8003b1c <_malloc_r+0x44>
 8003b8c:	200005b4 	.word	0x200005b4
 8003b90:	200005b8 	.word	0x200005b8

08003b94 <iprintf>:
 8003b94:	b40f      	push	{r0, r1, r2, r3}
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <iprintf+0x30>)
 8003b98:	b513      	push	{r0, r1, r4, lr}
 8003b9a:	681c      	ldr	r4, [r3, #0]
 8003b9c:	2c00      	cmp	r4, #0
 8003b9e:	d005      	beq.n	8003bac <iprintf+0x18>
 8003ba0:	69a3      	ldr	r3, [r4, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <iprintf+0x18>
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	f000 f8b8 	bl	8003d1c <__sinit>
 8003bac:	ab05      	add	r3, sp, #20
 8003bae:	0020      	movs	r0, r4
 8003bb0:	9a04      	ldr	r2, [sp, #16]
 8003bb2:	68a1      	ldr	r1, [r4, #8]
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	f000 faef 	bl	8004198 <_vfiprintf_r>
 8003bba:	bc16      	pop	{r1, r2, r4}
 8003bbc:	bc08      	pop	{r3}
 8003bbe:	b004      	add	sp, #16
 8003bc0:	4718      	bx	r3
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	2000001c 	.word	0x2000001c

08003bc8 <putchar>:
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <putchar+0x24>)
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	681c      	ldr	r4, [r3, #0]
 8003bce:	0005      	movs	r5, r0
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	d005      	beq.n	8003be0 <putchar+0x18>
 8003bd4:	69a3      	ldr	r3, [r4, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <putchar+0x18>
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f000 f89e 	bl	8003d1c <__sinit>
 8003be0:	0029      	movs	r1, r5
 8003be2:	0020      	movs	r0, r4
 8003be4:	68a2      	ldr	r2, [r4, #8]
 8003be6:	f000 fd93 	bl	8004710 <_putc_r>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	2000001c 	.word	0x2000001c

08003bf0 <_sbrk_r>:
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	b570      	push	{r4, r5, r6, lr}
 8003bf4:	4d06      	ldr	r5, [pc, #24]	; (8003c10 <_sbrk_r+0x20>)
 8003bf6:	0004      	movs	r4, r0
 8003bf8:	0008      	movs	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fc fd4e 	bl	800069c <_sbrk>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d103      	bne.n	8003c0c <_sbrk_r+0x1c>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d000      	beq.n	8003c0c <_sbrk_r+0x1c>
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	200006cc 	.word	0x200006cc

08003c14 <_vsiprintf_r>:
 8003c14:	b500      	push	{lr}
 8003c16:	b09b      	sub	sp, #108	; 0x6c
 8003c18:	9100      	str	r1, [sp, #0]
 8003c1a:	9104      	str	r1, [sp, #16]
 8003c1c:	4906      	ldr	r1, [pc, #24]	; (8003c38 <_vsiprintf_r+0x24>)
 8003c1e:	9105      	str	r1, [sp, #20]
 8003c20:	9102      	str	r1, [sp, #8]
 8003c22:	4906      	ldr	r1, [pc, #24]	; (8003c3c <_vsiprintf_r+0x28>)
 8003c24:	9103      	str	r1, [sp, #12]
 8003c26:	4669      	mov	r1, sp
 8003c28:	f000 f98e 	bl	8003f48 <_svfiprintf_r>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9a00      	ldr	r2, [sp, #0]
 8003c30:	7013      	strb	r3, [r2, #0]
 8003c32:	b01b      	add	sp, #108	; 0x6c
 8003c34:	bd00      	pop	{pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	7fffffff 	.word	0x7fffffff
 8003c3c:	ffff0208 	.word	0xffff0208

08003c40 <vsiprintf>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	0013      	movs	r3, r2
 8003c44:	000a      	movs	r2, r1
 8003c46:	0001      	movs	r1, r0
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <vsiprintf+0x14>)
 8003c4a:	6800      	ldr	r0, [r0, #0]
 8003c4c:	f7ff ffe2 	bl	8003c14 <_vsiprintf_r>
 8003c50:	bd10      	pop	{r4, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	2000001c 	.word	0x2000001c

08003c58 <std>:
 8003c58:	2300      	movs	r3, #0
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	0004      	movs	r4, r0
 8003c5e:	6003      	str	r3, [r0, #0]
 8003c60:	6043      	str	r3, [r0, #4]
 8003c62:	6083      	str	r3, [r0, #8]
 8003c64:	8181      	strh	r1, [r0, #12]
 8003c66:	6643      	str	r3, [r0, #100]	; 0x64
 8003c68:	0019      	movs	r1, r3
 8003c6a:	81c2      	strh	r2, [r0, #14]
 8003c6c:	6103      	str	r3, [r0, #16]
 8003c6e:	6143      	str	r3, [r0, #20]
 8003c70:	6183      	str	r3, [r0, #24]
 8003c72:	2208      	movs	r2, #8
 8003c74:	305c      	adds	r0, #92	; 0x5c
 8003c76:	f7ff fedc 	bl	8003a32 <memset>
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <std+0x38>)
 8003c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <std+0x3c>)
 8003c80:	6224      	str	r4, [r4, #32]
 8003c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <std+0x40>)
 8003c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <std+0x44>)
 8003c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	080047a5 	.word	0x080047a5
 8003c94:	080047cd 	.word	0x080047cd
 8003c98:	08004805 	.word	0x08004805
 8003c9c:	08004831 	.word	0x08004831

08003ca0 <_cleanup_r>:
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4902      	ldr	r1, [pc, #8]	; (8003cac <_cleanup_r+0xc>)
 8003ca4:	f000 f8ba 	bl	8003e1c <_fwalk_reent>
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	08004b3d 	.word	0x08004b3d

08003cb0 <__sfmoreglue>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	2568      	movs	r5, #104	; 0x68
 8003cb4:	1e4a      	subs	r2, r1, #1
 8003cb6:	4355      	muls	r5, r2
 8003cb8:	000e      	movs	r6, r1
 8003cba:	0029      	movs	r1, r5
 8003cbc:	3174      	adds	r1, #116	; 0x74
 8003cbe:	f7ff ff0b 	bl	8003ad8 <_malloc_r>
 8003cc2:	1e04      	subs	r4, r0, #0
 8003cc4:	d008      	beq.n	8003cd8 <__sfmoreglue+0x28>
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	002a      	movs	r2, r5
 8003cca:	6001      	str	r1, [r0, #0]
 8003ccc:	6046      	str	r6, [r0, #4]
 8003cce:	300c      	adds	r0, #12
 8003cd0:	60a0      	str	r0, [r4, #8]
 8003cd2:	3268      	adds	r2, #104	; 0x68
 8003cd4:	f7ff fead 	bl	8003a32 <memset>
 8003cd8:	0020      	movs	r0, r4
 8003cda:	bd70      	pop	{r4, r5, r6, pc}

08003cdc <__sfp_lock_acquire>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <__sfp_lock_acquire+0xc>)
 8003ce0:	f000 f8bd 	bl	8003e5e <__retarget_lock_acquire_recursive>
 8003ce4:	bd10      	pop	{r4, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	200006c8 	.word	0x200006c8

08003cec <__sfp_lock_release>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <__sfp_lock_release+0xc>)
 8003cf0:	f000 f8b6 	bl	8003e60 <__retarget_lock_release_recursive>
 8003cf4:	bd10      	pop	{r4, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	200006c8 	.word	0x200006c8

08003cfc <__sinit_lock_acquire>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4802      	ldr	r0, [pc, #8]	; (8003d08 <__sinit_lock_acquire+0xc>)
 8003d00:	f000 f8ad 	bl	8003e5e <__retarget_lock_acquire_recursive>
 8003d04:	bd10      	pop	{r4, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	200006c3 	.word	0x200006c3

08003d0c <__sinit_lock_release>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4802      	ldr	r0, [pc, #8]	; (8003d18 <__sinit_lock_release+0xc>)
 8003d10:	f000 f8a6 	bl	8003e60 <__retarget_lock_release_recursive>
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	200006c3 	.word	0x200006c3

08003d1c <__sinit>:
 8003d1c:	b513      	push	{r0, r1, r4, lr}
 8003d1e:	0004      	movs	r4, r0
 8003d20:	f7ff ffec 	bl	8003cfc <__sinit_lock_acquire>
 8003d24:	69a3      	ldr	r3, [r4, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <__sinit+0x14>
 8003d2a:	f7ff ffef 	bl	8003d0c <__sinit_lock_release>
 8003d2e:	bd13      	pop	{r0, r1, r4, pc}
 8003d30:	64a3      	str	r3, [r4, #72]	; 0x48
 8003d32:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d34:	6523      	str	r3, [r4, #80]	; 0x50
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <__sinit+0x68>)
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <__sinit+0x6c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	42a3      	cmp	r3, r4
 8003d42:	d101      	bne.n	8003d48 <__sinit+0x2c>
 8003d44:	2301      	movs	r3, #1
 8003d46:	61a3      	str	r3, [r4, #24]
 8003d48:	0020      	movs	r0, r4
 8003d4a:	f000 f81f 	bl	8003d8c <__sfp>
 8003d4e:	6060      	str	r0, [r4, #4]
 8003d50:	0020      	movs	r0, r4
 8003d52:	f000 f81b 	bl	8003d8c <__sfp>
 8003d56:	60a0      	str	r0, [r4, #8]
 8003d58:	0020      	movs	r0, r4
 8003d5a:	f000 f817 	bl	8003d8c <__sfp>
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2104      	movs	r1, #4
 8003d62:	60e0      	str	r0, [r4, #12]
 8003d64:	6860      	ldr	r0, [r4, #4]
 8003d66:	f7ff ff77 	bl	8003c58 <std>
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2109      	movs	r1, #9
 8003d6e:	68a0      	ldr	r0, [r4, #8]
 8003d70:	f7ff ff72 	bl	8003c58 <std>
 8003d74:	2202      	movs	r2, #2
 8003d76:	2112      	movs	r1, #18
 8003d78:	68e0      	ldr	r0, [r4, #12]
 8003d7a:	f7ff ff6d 	bl	8003c58 <std>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61a3      	str	r3, [r4, #24]
 8003d82:	e7d2      	b.n	8003d2a <__sinit+0xe>
 8003d84:	080051a4 	.word	0x080051a4
 8003d88:	08003ca1 	.word	0x08003ca1

08003d8c <__sfp>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	0007      	movs	r7, r0
 8003d90:	f7ff ffa4 	bl	8003cdc <__sfp_lock_acquire>
 8003d94:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <__sfp+0x88>)
 8003d96:	681e      	ldr	r6, [r3, #0]
 8003d98:	69b3      	ldr	r3, [r6, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <__sfp+0x18>
 8003d9e:	0030      	movs	r0, r6
 8003da0:	f7ff ffbc 	bl	8003d1c <__sinit>
 8003da4:	3648      	adds	r6, #72	; 0x48
 8003da6:	68b4      	ldr	r4, [r6, #8]
 8003da8:	6873      	ldr	r3, [r6, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	d504      	bpl.n	8003db8 <__sfp+0x2c>
 8003dae:	6833      	ldr	r3, [r6, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d022      	beq.n	8003dfa <__sfp+0x6e>
 8003db4:	6836      	ldr	r6, [r6, #0]
 8003db6:	e7f6      	b.n	8003da6 <__sfp+0x1a>
 8003db8:	220c      	movs	r2, #12
 8003dba:	5ea5      	ldrsh	r5, [r4, r2]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	d11a      	bne.n	8003df6 <__sfp+0x6a>
 8003dc0:	0020      	movs	r0, r4
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <__sfp+0x8c>)
 8003dc4:	3058      	adds	r0, #88	; 0x58
 8003dc6:	60e3      	str	r3, [r4, #12]
 8003dc8:	6665      	str	r5, [r4, #100]	; 0x64
 8003dca:	f000 f847 	bl	8003e5c <__retarget_lock_init_recursive>
 8003dce:	f7ff ff8d 	bl	8003cec <__sfp_lock_release>
 8003dd2:	0020      	movs	r0, r4
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	6025      	str	r5, [r4, #0]
 8003dda:	60a5      	str	r5, [r4, #8]
 8003ddc:	6065      	str	r5, [r4, #4]
 8003dde:	6125      	str	r5, [r4, #16]
 8003de0:	6165      	str	r5, [r4, #20]
 8003de2:	61a5      	str	r5, [r4, #24]
 8003de4:	305c      	adds	r0, #92	; 0x5c
 8003de6:	f7ff fe24 	bl	8003a32 <memset>
 8003dea:	6365      	str	r5, [r4, #52]	; 0x34
 8003dec:	63a5      	str	r5, [r4, #56]	; 0x38
 8003dee:	64a5      	str	r5, [r4, #72]	; 0x48
 8003df0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003df2:	0020      	movs	r0, r4
 8003df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df6:	3468      	adds	r4, #104	; 0x68
 8003df8:	e7d7      	b.n	8003daa <__sfp+0x1e>
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	0038      	movs	r0, r7
 8003dfe:	f7ff ff57 	bl	8003cb0 <__sfmoreglue>
 8003e02:	1e04      	subs	r4, r0, #0
 8003e04:	6030      	str	r0, [r6, #0]
 8003e06:	d1d5      	bne.n	8003db4 <__sfp+0x28>
 8003e08:	f7ff ff70 	bl	8003cec <__sfp_lock_release>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	e7ef      	b.n	8003df2 <__sfp+0x66>
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	080051a4 	.word	0x080051a4
 8003e18:	ffff0001 	.word	0xffff0001

08003e1c <_fwalk_reent>:
 8003e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e1e:	0004      	movs	r4, r0
 8003e20:	0006      	movs	r6, r0
 8003e22:	2700      	movs	r7, #0
 8003e24:	9101      	str	r1, [sp, #4]
 8003e26:	3448      	adds	r4, #72	; 0x48
 8003e28:	6863      	ldr	r3, [r4, #4]
 8003e2a:	68a5      	ldr	r5, [r4, #8]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	9b00      	ldr	r3, [sp, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	d504      	bpl.n	8003e40 <_fwalk_reent+0x24>
 8003e36:	6824      	ldr	r4, [r4, #0]
 8003e38:	2c00      	cmp	r4, #0
 8003e3a:	d1f5      	bne.n	8003e28 <_fwalk_reent+0xc>
 8003e3c:	0038      	movs	r0, r7
 8003e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e40:	89ab      	ldrh	r3, [r5, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d908      	bls.n	8003e58 <_fwalk_reent+0x3c>
 8003e46:	220e      	movs	r2, #14
 8003e48:	5eab      	ldrsh	r3, [r5, r2]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	d004      	beq.n	8003e58 <_fwalk_reent+0x3c>
 8003e4e:	0029      	movs	r1, r5
 8003e50:	0030      	movs	r0, r6
 8003e52:	9b01      	ldr	r3, [sp, #4]
 8003e54:	4798      	blx	r3
 8003e56:	4307      	orrs	r7, r0
 8003e58:	3568      	adds	r5, #104	; 0x68
 8003e5a:	e7e8      	b.n	8003e2e <_fwalk_reent+0x12>

08003e5c <__retarget_lock_init_recursive>:
 8003e5c:	4770      	bx	lr

08003e5e <__retarget_lock_acquire_recursive>:
 8003e5e:	4770      	bx	lr

08003e60 <__retarget_lock_release_recursive>:
 8003e60:	4770      	bx	lr
	...

08003e64 <__malloc_lock>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4802      	ldr	r0, [pc, #8]	; (8003e70 <__malloc_lock+0xc>)
 8003e68:	f7ff fff9 	bl	8003e5e <__retarget_lock_acquire_recursive>
 8003e6c:	bd10      	pop	{r4, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	200006c4 	.word	0x200006c4

08003e74 <__malloc_unlock>:
 8003e74:	b510      	push	{r4, lr}
 8003e76:	4802      	ldr	r0, [pc, #8]	; (8003e80 <__malloc_unlock+0xc>)
 8003e78:	f7ff fff2 	bl	8003e60 <__retarget_lock_release_recursive>
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	200006c4 	.word	0x200006c4

08003e84 <__ssputs_r>:
 8003e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e86:	688e      	ldr	r6, [r1, #8]
 8003e88:	b085      	sub	sp, #20
 8003e8a:	0007      	movs	r7, r0
 8003e8c:	000c      	movs	r4, r1
 8003e8e:	9203      	str	r2, [sp, #12]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	429e      	cmp	r6, r3
 8003e94:	d83c      	bhi.n	8003f10 <__ssputs_r+0x8c>
 8003e96:	2390      	movs	r3, #144	; 0x90
 8003e98:	898a      	ldrh	r2, [r1, #12]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	421a      	tst	r2, r3
 8003e9e:	d034      	beq.n	8003f0a <__ssputs_r+0x86>
 8003ea0:	2503      	movs	r5, #3
 8003ea2:	6909      	ldr	r1, [r1, #16]
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	1a5b      	subs	r3, r3, r1
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	6963      	ldr	r3, [r4, #20]
 8003eac:	9802      	ldr	r0, [sp, #8]
 8003eae:	435d      	muls	r5, r3
 8003eb0:	0feb      	lsrs	r3, r5, #31
 8003eb2:	195d      	adds	r5, r3, r5
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	106d      	asrs	r5, r5, #1
 8003eb8:	3301      	adds	r3, #1
 8003eba:	181b      	adds	r3, r3, r0
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	d900      	bls.n	8003ec2 <__ssputs_r+0x3e>
 8003ec0:	001d      	movs	r5, r3
 8003ec2:	0553      	lsls	r3, r2, #21
 8003ec4:	d532      	bpl.n	8003f2c <__ssputs_r+0xa8>
 8003ec6:	0029      	movs	r1, r5
 8003ec8:	0038      	movs	r0, r7
 8003eca:	f7ff fe05 	bl	8003ad8 <_malloc_r>
 8003ece:	1e06      	subs	r6, r0, #0
 8003ed0:	d109      	bne.n	8003ee6 <__ssputs_r+0x62>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	2340      	movs	r3, #64	; 0x40
 8003ed8:	2001      	movs	r0, #1
 8003eda:	89a2      	ldrh	r2, [r4, #12]
 8003edc:	4240      	negs	r0, r0
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	b005      	add	sp, #20
 8003ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee6:	9a02      	ldr	r2, [sp, #8]
 8003ee8:	6921      	ldr	r1, [r4, #16]
 8003eea:	f7ff fd99 	bl	8003a20 <memcpy>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <__ssputs_r+0xc0>)
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	81a3      	strh	r3, [r4, #12]
 8003efa:	9b02      	ldr	r3, [sp, #8]
 8003efc:	6126      	str	r6, [r4, #16]
 8003efe:	18f6      	adds	r6, r6, r3
 8003f00:	6026      	str	r6, [r4, #0]
 8003f02:	6165      	str	r5, [r4, #20]
 8003f04:	9e01      	ldr	r6, [sp, #4]
 8003f06:	1aed      	subs	r5, r5, r3
 8003f08:	60a5      	str	r5, [r4, #8]
 8003f0a:	9b01      	ldr	r3, [sp, #4]
 8003f0c:	429e      	cmp	r6, r3
 8003f0e:	d900      	bls.n	8003f12 <__ssputs_r+0x8e>
 8003f10:	9e01      	ldr	r6, [sp, #4]
 8003f12:	0032      	movs	r2, r6
 8003f14:	9903      	ldr	r1, [sp, #12]
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	f000 fedb 	bl	8004cd2 <memmove>
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	2000      	movs	r0, #0
 8003f20:	1b9b      	subs	r3, r3, r6
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	199e      	adds	r6, r3, r6
 8003f28:	6026      	str	r6, [r4, #0]
 8003f2a:	e7da      	b.n	8003ee2 <__ssputs_r+0x5e>
 8003f2c:	002a      	movs	r2, r5
 8003f2e:	0038      	movs	r0, r7
 8003f30:	f000 fee2 	bl	8004cf8 <_realloc_r>
 8003f34:	1e06      	subs	r6, r0, #0
 8003f36:	d1e0      	bne.n	8003efa <__ssputs_r+0x76>
 8003f38:	0038      	movs	r0, r7
 8003f3a:	6921      	ldr	r1, [r4, #16]
 8003f3c:	f7ff fd82 	bl	8003a44 <_free_r>
 8003f40:	e7c7      	b.n	8003ed2 <__ssputs_r+0x4e>
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	fffffb7f 	.word	0xfffffb7f

08003f48 <_svfiprintf_r>:
 8003f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4a:	b0a1      	sub	sp, #132	; 0x84
 8003f4c:	9003      	str	r0, [sp, #12]
 8003f4e:	001d      	movs	r5, r3
 8003f50:	898b      	ldrh	r3, [r1, #12]
 8003f52:	000f      	movs	r7, r1
 8003f54:	0016      	movs	r6, r2
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	d511      	bpl.n	8003f7e <_svfiprintf_r+0x36>
 8003f5a:	690b      	ldr	r3, [r1, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10e      	bne.n	8003f7e <_svfiprintf_r+0x36>
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	f7ff fdb9 	bl	8003ad8 <_malloc_r>
 8003f66:	6038      	str	r0, [r7, #0]
 8003f68:	6138      	str	r0, [r7, #16]
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d105      	bne.n	8003f7a <_svfiprintf_r+0x32>
 8003f6e:	230c      	movs	r3, #12
 8003f70:	9a03      	ldr	r2, [sp, #12]
 8003f72:	3801      	subs	r0, #1
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	b021      	add	sp, #132	; 0x84
 8003f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	ac08      	add	r4, sp, #32
 8003f82:	6163      	str	r3, [r4, #20]
 8003f84:	3320      	adds	r3, #32
 8003f86:	7663      	strb	r3, [r4, #25]
 8003f88:	3310      	adds	r3, #16
 8003f8a:	76a3      	strb	r3, [r4, #26]
 8003f8c:	9507      	str	r5, [sp, #28]
 8003f8e:	0035      	movs	r5, r6
 8003f90:	782b      	ldrb	r3, [r5, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <_svfiprintf_r+0x52>
 8003f96:	2b25      	cmp	r3, #37	; 0x25
 8003f98:	d147      	bne.n	800402a <_svfiprintf_r+0xe2>
 8003f9a:	1bab      	subs	r3, r5, r6
 8003f9c:	9305      	str	r3, [sp, #20]
 8003f9e:	42b5      	cmp	r5, r6
 8003fa0:	d00c      	beq.n	8003fbc <_svfiprintf_r+0x74>
 8003fa2:	0032      	movs	r2, r6
 8003fa4:	0039      	movs	r1, r7
 8003fa6:	9803      	ldr	r0, [sp, #12]
 8003fa8:	f7ff ff6c 	bl	8003e84 <__ssputs_r>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d100      	bne.n	8003fb2 <_svfiprintf_r+0x6a>
 8003fb0:	e0ae      	b.n	8004110 <_svfiprintf_r+0x1c8>
 8003fb2:	6962      	ldr	r2, [r4, #20]
 8003fb4:	9b05      	ldr	r3, [sp, #20]
 8003fb6:	4694      	mov	ip, r2
 8003fb8:	4463      	add	r3, ip
 8003fba:	6163      	str	r3, [r4, #20]
 8003fbc:	782b      	ldrb	r3, [r5, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d100      	bne.n	8003fc4 <_svfiprintf_r+0x7c>
 8003fc2:	e0a5      	b.n	8004110 <_svfiprintf_r+0x1c8>
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4252      	negs	r2, r2
 8003fca:	6062      	str	r2, [r4, #4]
 8003fcc:	a904      	add	r1, sp, #16
 8003fce:	3254      	adds	r2, #84	; 0x54
 8003fd0:	1852      	adds	r2, r2, r1
 8003fd2:	1c6e      	adds	r6, r5, #1
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	60e3      	str	r3, [r4, #12]
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	7013      	strb	r3, [r2, #0]
 8003fdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fde:	2205      	movs	r2, #5
 8003fe0:	7831      	ldrb	r1, [r6, #0]
 8003fe2:	4854      	ldr	r0, [pc, #336]	; (8004134 <_svfiprintf_r+0x1ec>)
 8003fe4:	f000 fe6a 	bl	8004cbc <memchr>
 8003fe8:	1c75      	adds	r5, r6, #1
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d11f      	bne.n	800402e <_svfiprintf_r+0xe6>
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	06d3      	lsls	r3, r2, #27
 8003ff2:	d504      	bpl.n	8003ffe <_svfiprintf_r+0xb6>
 8003ff4:	2353      	movs	r3, #83	; 0x53
 8003ff6:	a904      	add	r1, sp, #16
 8003ff8:	185b      	adds	r3, r3, r1
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	7019      	strb	r1, [r3, #0]
 8003ffe:	0713      	lsls	r3, r2, #28
 8004000:	d504      	bpl.n	800400c <_svfiprintf_r+0xc4>
 8004002:	2353      	movs	r3, #83	; 0x53
 8004004:	a904      	add	r1, sp, #16
 8004006:	185b      	adds	r3, r3, r1
 8004008:	212b      	movs	r1, #43	; 0x2b
 800400a:	7019      	strb	r1, [r3, #0]
 800400c:	7833      	ldrb	r3, [r6, #0]
 800400e:	2b2a      	cmp	r3, #42	; 0x2a
 8004010:	d016      	beq.n	8004040 <_svfiprintf_r+0xf8>
 8004012:	0035      	movs	r5, r6
 8004014:	2100      	movs	r1, #0
 8004016:	200a      	movs	r0, #10
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	782a      	ldrb	r2, [r5, #0]
 800401c:	1c6e      	adds	r6, r5, #1
 800401e:	3a30      	subs	r2, #48	; 0x30
 8004020:	2a09      	cmp	r2, #9
 8004022:	d94e      	bls.n	80040c2 <_svfiprintf_r+0x17a>
 8004024:	2900      	cmp	r1, #0
 8004026:	d111      	bne.n	800404c <_svfiprintf_r+0x104>
 8004028:	e017      	b.n	800405a <_svfiprintf_r+0x112>
 800402a:	3501      	adds	r5, #1
 800402c:	e7b0      	b.n	8003f90 <_svfiprintf_r+0x48>
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <_svfiprintf_r+0x1ec>)
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	1ac0      	subs	r0, r0, r3
 8004034:	2301      	movs	r3, #1
 8004036:	4083      	lsls	r3, r0
 8004038:	4313      	orrs	r3, r2
 800403a:	002e      	movs	r6, r5
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	e7ce      	b.n	8003fde <_svfiprintf_r+0x96>
 8004040:	9b07      	ldr	r3, [sp, #28]
 8004042:	1d19      	adds	r1, r3, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	9107      	str	r1, [sp, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	db01      	blt.n	8004050 <_svfiprintf_r+0x108>
 800404c:	930b      	str	r3, [sp, #44]	; 0x2c
 800404e:	e004      	b.n	800405a <_svfiprintf_r+0x112>
 8004050:	425b      	negs	r3, r3
 8004052:	60e3      	str	r3, [r4, #12]
 8004054:	2302      	movs	r3, #2
 8004056:	4313      	orrs	r3, r2
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	782b      	ldrb	r3, [r5, #0]
 800405c:	2b2e      	cmp	r3, #46	; 0x2e
 800405e:	d10a      	bne.n	8004076 <_svfiprintf_r+0x12e>
 8004060:	786b      	ldrb	r3, [r5, #1]
 8004062:	2b2a      	cmp	r3, #42	; 0x2a
 8004064:	d135      	bne.n	80040d2 <_svfiprintf_r+0x18a>
 8004066:	9b07      	ldr	r3, [sp, #28]
 8004068:	3502      	adds	r5, #2
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	9207      	str	r2, [sp, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db2b      	blt.n	80040cc <_svfiprintf_r+0x184>
 8004074:	9309      	str	r3, [sp, #36]	; 0x24
 8004076:	4e30      	ldr	r6, [pc, #192]	; (8004138 <_svfiprintf_r+0x1f0>)
 8004078:	2203      	movs	r2, #3
 800407a:	0030      	movs	r0, r6
 800407c:	7829      	ldrb	r1, [r5, #0]
 800407e:	f000 fe1d 	bl	8004cbc <memchr>
 8004082:	2800      	cmp	r0, #0
 8004084:	d006      	beq.n	8004094 <_svfiprintf_r+0x14c>
 8004086:	2340      	movs	r3, #64	; 0x40
 8004088:	1b80      	subs	r0, r0, r6
 800408a:	4083      	lsls	r3, r0
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	3501      	adds	r5, #1
 8004090:	4313      	orrs	r3, r2
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	7829      	ldrb	r1, [r5, #0]
 8004096:	2206      	movs	r2, #6
 8004098:	4828      	ldr	r0, [pc, #160]	; (800413c <_svfiprintf_r+0x1f4>)
 800409a:	1c6e      	adds	r6, r5, #1
 800409c:	7621      	strb	r1, [r4, #24]
 800409e:	f000 fe0d 	bl	8004cbc <memchr>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d03c      	beq.n	8004120 <_svfiprintf_r+0x1d8>
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <_svfiprintf_r+0x1f8>)
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d125      	bne.n	80040f8 <_svfiprintf_r+0x1b0>
 80040ac:	2207      	movs	r2, #7
 80040ae:	9b07      	ldr	r3, [sp, #28]
 80040b0:	3307      	adds	r3, #7
 80040b2:	4393      	bics	r3, r2
 80040b4:	3308      	adds	r3, #8
 80040b6:	9307      	str	r3, [sp, #28]
 80040b8:	6963      	ldr	r3, [r4, #20]
 80040ba:	9a04      	ldr	r2, [sp, #16]
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	6163      	str	r3, [r4, #20]
 80040c0:	e765      	b.n	8003f8e <_svfiprintf_r+0x46>
 80040c2:	4343      	muls	r3, r0
 80040c4:	0035      	movs	r5, r6
 80040c6:	2101      	movs	r1, #1
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	e7a6      	b.n	800401a <_svfiprintf_r+0xd2>
 80040cc:	2301      	movs	r3, #1
 80040ce:	425b      	negs	r3, r3
 80040d0:	e7d0      	b.n	8004074 <_svfiprintf_r+0x12c>
 80040d2:	2300      	movs	r3, #0
 80040d4:	200a      	movs	r0, #10
 80040d6:	001a      	movs	r2, r3
 80040d8:	3501      	adds	r5, #1
 80040da:	6063      	str	r3, [r4, #4]
 80040dc:	7829      	ldrb	r1, [r5, #0]
 80040de:	1c6e      	adds	r6, r5, #1
 80040e0:	3930      	subs	r1, #48	; 0x30
 80040e2:	2909      	cmp	r1, #9
 80040e4:	d903      	bls.n	80040ee <_svfiprintf_r+0x1a6>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0c5      	beq.n	8004076 <_svfiprintf_r+0x12e>
 80040ea:	9209      	str	r2, [sp, #36]	; 0x24
 80040ec:	e7c3      	b.n	8004076 <_svfiprintf_r+0x12e>
 80040ee:	4342      	muls	r2, r0
 80040f0:	0035      	movs	r5, r6
 80040f2:	2301      	movs	r3, #1
 80040f4:	1852      	adds	r2, r2, r1
 80040f6:	e7f1      	b.n	80040dc <_svfiprintf_r+0x194>
 80040f8:	ab07      	add	r3, sp, #28
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	003a      	movs	r2, r7
 80040fe:	0021      	movs	r1, r4
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <_svfiprintf_r+0x1fc>)
 8004102:	9803      	ldr	r0, [sp, #12]
 8004104:	e000      	b.n	8004108 <_svfiprintf_r+0x1c0>
 8004106:	bf00      	nop
 8004108:	9004      	str	r0, [sp, #16]
 800410a:	9b04      	ldr	r3, [sp, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	d1d3      	bne.n	80040b8 <_svfiprintf_r+0x170>
 8004110:	89bb      	ldrh	r3, [r7, #12]
 8004112:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004114:	065b      	lsls	r3, r3, #25
 8004116:	d400      	bmi.n	800411a <_svfiprintf_r+0x1d2>
 8004118:	e72d      	b.n	8003f76 <_svfiprintf_r+0x2e>
 800411a:	2001      	movs	r0, #1
 800411c:	4240      	negs	r0, r0
 800411e:	e72a      	b.n	8003f76 <_svfiprintf_r+0x2e>
 8004120:	ab07      	add	r3, sp, #28
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	003a      	movs	r2, r7
 8004126:	0021      	movs	r1, r4
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <_svfiprintf_r+0x1fc>)
 800412a:	9803      	ldr	r0, [sp, #12]
 800412c:	f000 f9de 	bl	80044ec <_printf_i>
 8004130:	e7ea      	b.n	8004108 <_svfiprintf_r+0x1c0>
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	08005208 	.word	0x08005208
 8004138:	0800520e 	.word	0x0800520e
 800413c:	08005212 	.word	0x08005212
 8004140:	00000000 	.word	0x00000000
 8004144:	08003e85 	.word	0x08003e85

08004148 <__sfputc_r>:
 8004148:	6893      	ldr	r3, [r2, #8]
 800414a:	b510      	push	{r4, lr}
 800414c:	3b01      	subs	r3, #1
 800414e:	6093      	str	r3, [r2, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	da04      	bge.n	800415e <__sfputc_r+0x16>
 8004154:	6994      	ldr	r4, [r2, #24]
 8004156:	42a3      	cmp	r3, r4
 8004158:	db07      	blt.n	800416a <__sfputc_r+0x22>
 800415a:	290a      	cmp	r1, #10
 800415c:	d005      	beq.n	800416a <__sfputc_r+0x22>
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	1c58      	adds	r0, r3, #1
 8004162:	6010      	str	r0, [r2, #0]
 8004164:	7019      	strb	r1, [r3, #0]
 8004166:	0008      	movs	r0, r1
 8004168:	bd10      	pop	{r4, pc}
 800416a:	f000 fb67 	bl	800483c <__swbuf_r>
 800416e:	0001      	movs	r1, r0
 8004170:	e7f9      	b.n	8004166 <__sfputc_r+0x1e>

08004172 <__sfputs_r>:
 8004172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004174:	0006      	movs	r6, r0
 8004176:	000f      	movs	r7, r1
 8004178:	0014      	movs	r4, r2
 800417a:	18d5      	adds	r5, r2, r3
 800417c:	42ac      	cmp	r4, r5
 800417e:	d101      	bne.n	8004184 <__sfputs_r+0x12>
 8004180:	2000      	movs	r0, #0
 8004182:	e007      	b.n	8004194 <__sfputs_r+0x22>
 8004184:	7821      	ldrb	r1, [r4, #0]
 8004186:	003a      	movs	r2, r7
 8004188:	0030      	movs	r0, r6
 800418a:	f7ff ffdd 	bl	8004148 <__sfputc_r>
 800418e:	3401      	adds	r4, #1
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d1f3      	bne.n	800417c <__sfputs_r+0xa>
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004198 <_vfiprintf_r>:
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	b0a1      	sub	sp, #132	; 0x84
 800419c:	0006      	movs	r6, r0
 800419e:	000c      	movs	r4, r1
 80041a0:	001f      	movs	r7, r3
 80041a2:	9203      	str	r2, [sp, #12]
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d004      	beq.n	80041b2 <_vfiprintf_r+0x1a>
 80041a8:	6983      	ldr	r3, [r0, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <_vfiprintf_r+0x1a>
 80041ae:	f7ff fdb5 	bl	8003d1c <__sinit>
 80041b2:	4b8e      	ldr	r3, [pc, #568]	; (80043ec <_vfiprintf_r+0x254>)
 80041b4:	429c      	cmp	r4, r3
 80041b6:	d11c      	bne.n	80041f2 <_vfiprintf_r+0x5a>
 80041b8:	6874      	ldr	r4, [r6, #4]
 80041ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041bc:	07db      	lsls	r3, r3, #31
 80041be:	d405      	bmi.n	80041cc <_vfiprintf_r+0x34>
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	059b      	lsls	r3, r3, #22
 80041c4:	d402      	bmi.n	80041cc <_vfiprintf_r+0x34>
 80041c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c8:	f7ff fe49 	bl	8003e5e <__retarget_lock_acquire_recursive>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	071b      	lsls	r3, r3, #28
 80041d0:	d502      	bpl.n	80041d8 <_vfiprintf_r+0x40>
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11d      	bne.n	8004214 <_vfiprintf_r+0x7c>
 80041d8:	0021      	movs	r1, r4
 80041da:	0030      	movs	r0, r6
 80041dc:	f000 fb98 	bl	8004910 <__swsetup_r>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d017      	beq.n	8004214 <_vfiprintf_r+0x7c>
 80041e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041e6:	07db      	lsls	r3, r3, #31
 80041e8:	d50d      	bpl.n	8004206 <_vfiprintf_r+0x6e>
 80041ea:	2001      	movs	r0, #1
 80041ec:	4240      	negs	r0, r0
 80041ee:	b021      	add	sp, #132	; 0x84
 80041f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f2:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <_vfiprintf_r+0x258>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d101      	bne.n	80041fc <_vfiprintf_r+0x64>
 80041f8:	68b4      	ldr	r4, [r6, #8]
 80041fa:	e7de      	b.n	80041ba <_vfiprintf_r+0x22>
 80041fc:	4b7d      	ldr	r3, [pc, #500]	; (80043f4 <_vfiprintf_r+0x25c>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	d1db      	bne.n	80041ba <_vfiprintf_r+0x22>
 8004202:	68f4      	ldr	r4, [r6, #12]
 8004204:	e7d9      	b.n	80041ba <_vfiprintf_r+0x22>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	059b      	lsls	r3, r3, #22
 800420a:	d4ee      	bmi.n	80041ea <_vfiprintf_r+0x52>
 800420c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800420e:	f7ff fe27 	bl	8003e60 <__retarget_lock_release_recursive>
 8004212:	e7ea      	b.n	80041ea <_vfiprintf_r+0x52>
 8004214:	2300      	movs	r3, #0
 8004216:	ad08      	add	r5, sp, #32
 8004218:	616b      	str	r3, [r5, #20]
 800421a:	3320      	adds	r3, #32
 800421c:	766b      	strb	r3, [r5, #25]
 800421e:	3310      	adds	r3, #16
 8004220:	76ab      	strb	r3, [r5, #26]
 8004222:	9707      	str	r7, [sp, #28]
 8004224:	9f03      	ldr	r7, [sp, #12]
 8004226:	783b      	ldrb	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <_vfiprintf_r+0x98>
 800422c:	2b25      	cmp	r3, #37	; 0x25
 800422e:	d14e      	bne.n	80042ce <_vfiprintf_r+0x136>
 8004230:	9b03      	ldr	r3, [sp, #12]
 8004232:	1afb      	subs	r3, r7, r3
 8004234:	9305      	str	r3, [sp, #20]
 8004236:	9b03      	ldr	r3, [sp, #12]
 8004238:	429f      	cmp	r7, r3
 800423a:	d00d      	beq.n	8004258 <_vfiprintf_r+0xc0>
 800423c:	9b05      	ldr	r3, [sp, #20]
 800423e:	0021      	movs	r1, r4
 8004240:	0030      	movs	r0, r6
 8004242:	9a03      	ldr	r2, [sp, #12]
 8004244:	f7ff ff95 	bl	8004172 <__sfputs_r>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d100      	bne.n	800424e <_vfiprintf_r+0xb6>
 800424c:	e0b5      	b.n	80043ba <_vfiprintf_r+0x222>
 800424e:	696a      	ldr	r2, [r5, #20]
 8004250:	9b05      	ldr	r3, [sp, #20]
 8004252:	4694      	mov	ip, r2
 8004254:	4463      	add	r3, ip
 8004256:	616b      	str	r3, [r5, #20]
 8004258:	783b      	ldrb	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d100      	bne.n	8004260 <_vfiprintf_r+0xc8>
 800425e:	e0ac      	b.n	80043ba <_vfiprintf_r+0x222>
 8004260:	2201      	movs	r2, #1
 8004262:	1c7b      	adds	r3, r7, #1
 8004264:	9303      	str	r3, [sp, #12]
 8004266:	2300      	movs	r3, #0
 8004268:	4252      	negs	r2, r2
 800426a:	606a      	str	r2, [r5, #4]
 800426c:	a904      	add	r1, sp, #16
 800426e:	3254      	adds	r2, #84	; 0x54
 8004270:	1852      	adds	r2, r2, r1
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	60eb      	str	r3, [r5, #12]
 8004276:	60ab      	str	r3, [r5, #8]
 8004278:	7013      	strb	r3, [r2, #0]
 800427a:	65ab      	str	r3, [r5, #88]	; 0x58
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	2205      	movs	r2, #5
 8004280:	7819      	ldrb	r1, [r3, #0]
 8004282:	485d      	ldr	r0, [pc, #372]	; (80043f8 <_vfiprintf_r+0x260>)
 8004284:	f000 fd1a 	bl	8004cbc <memchr>
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	1c5f      	adds	r7, r3, #1
 800428c:	2800      	cmp	r0, #0
 800428e:	d120      	bne.n	80042d2 <_vfiprintf_r+0x13a>
 8004290:	682a      	ldr	r2, [r5, #0]
 8004292:	06d3      	lsls	r3, r2, #27
 8004294:	d504      	bpl.n	80042a0 <_vfiprintf_r+0x108>
 8004296:	2353      	movs	r3, #83	; 0x53
 8004298:	a904      	add	r1, sp, #16
 800429a:	185b      	adds	r3, r3, r1
 800429c:	2120      	movs	r1, #32
 800429e:	7019      	strb	r1, [r3, #0]
 80042a0:	0713      	lsls	r3, r2, #28
 80042a2:	d504      	bpl.n	80042ae <_vfiprintf_r+0x116>
 80042a4:	2353      	movs	r3, #83	; 0x53
 80042a6:	a904      	add	r1, sp, #16
 80042a8:	185b      	adds	r3, r3, r1
 80042aa:	212b      	movs	r1, #43	; 0x2b
 80042ac:	7019      	strb	r1, [r3, #0]
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b2a      	cmp	r3, #42	; 0x2a
 80042b4:	d016      	beq.n	80042e4 <_vfiprintf_r+0x14c>
 80042b6:	2100      	movs	r1, #0
 80042b8:	68eb      	ldr	r3, [r5, #12]
 80042ba:	9f03      	ldr	r7, [sp, #12]
 80042bc:	783a      	ldrb	r2, [r7, #0]
 80042be:	1c78      	adds	r0, r7, #1
 80042c0:	3a30      	subs	r2, #48	; 0x30
 80042c2:	4684      	mov	ip, r0
 80042c4:	2a09      	cmp	r2, #9
 80042c6:	d94f      	bls.n	8004368 <_vfiprintf_r+0x1d0>
 80042c8:	2900      	cmp	r1, #0
 80042ca:	d111      	bne.n	80042f0 <_vfiprintf_r+0x158>
 80042cc:	e017      	b.n	80042fe <_vfiprintf_r+0x166>
 80042ce:	3701      	adds	r7, #1
 80042d0:	e7a9      	b.n	8004226 <_vfiprintf_r+0x8e>
 80042d2:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <_vfiprintf_r+0x260>)
 80042d4:	682a      	ldr	r2, [r5, #0]
 80042d6:	1ac0      	subs	r0, r0, r3
 80042d8:	2301      	movs	r3, #1
 80042da:	4083      	lsls	r3, r0
 80042dc:	4313      	orrs	r3, r2
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	9703      	str	r7, [sp, #12]
 80042e2:	e7cb      	b.n	800427c <_vfiprintf_r+0xe4>
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	1d19      	adds	r1, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	9107      	str	r1, [sp, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	db01      	blt.n	80042f4 <_vfiprintf_r+0x15c>
 80042f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80042f2:	e004      	b.n	80042fe <_vfiprintf_r+0x166>
 80042f4:	425b      	negs	r3, r3
 80042f6:	60eb      	str	r3, [r5, #12]
 80042f8:	2302      	movs	r3, #2
 80042fa:	4313      	orrs	r3, r2
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	783b      	ldrb	r3, [r7, #0]
 8004300:	2b2e      	cmp	r3, #46	; 0x2e
 8004302:	d10a      	bne.n	800431a <_vfiprintf_r+0x182>
 8004304:	787b      	ldrb	r3, [r7, #1]
 8004306:	2b2a      	cmp	r3, #42	; 0x2a
 8004308:	d137      	bne.n	800437a <_vfiprintf_r+0x1e2>
 800430a:	9b07      	ldr	r3, [sp, #28]
 800430c:	3702      	adds	r7, #2
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	9207      	str	r2, [sp, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db2d      	blt.n	8004374 <_vfiprintf_r+0x1dc>
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	2203      	movs	r2, #3
 800431c:	7839      	ldrb	r1, [r7, #0]
 800431e:	4837      	ldr	r0, [pc, #220]	; (80043fc <_vfiprintf_r+0x264>)
 8004320:	f000 fccc 	bl	8004cbc <memchr>
 8004324:	2800      	cmp	r0, #0
 8004326:	d007      	beq.n	8004338 <_vfiprintf_r+0x1a0>
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <_vfiprintf_r+0x264>)
 800432a:	682a      	ldr	r2, [r5, #0]
 800432c:	1ac0      	subs	r0, r0, r3
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	4083      	lsls	r3, r0
 8004332:	4313      	orrs	r3, r2
 8004334:	3701      	adds	r7, #1
 8004336:	602b      	str	r3, [r5, #0]
 8004338:	7839      	ldrb	r1, [r7, #0]
 800433a:	1c7b      	adds	r3, r7, #1
 800433c:	2206      	movs	r2, #6
 800433e:	4830      	ldr	r0, [pc, #192]	; (8004400 <_vfiprintf_r+0x268>)
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	7629      	strb	r1, [r5, #24]
 8004344:	f000 fcba 	bl	8004cbc <memchr>
 8004348:	2800      	cmp	r0, #0
 800434a:	d045      	beq.n	80043d8 <_vfiprintf_r+0x240>
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <_vfiprintf_r+0x26c>)
 800434e:	2b00      	cmp	r3, #0
 8004350:	d127      	bne.n	80043a2 <_vfiprintf_r+0x20a>
 8004352:	2207      	movs	r2, #7
 8004354:	9b07      	ldr	r3, [sp, #28]
 8004356:	3307      	adds	r3, #7
 8004358:	4393      	bics	r3, r2
 800435a:	3308      	adds	r3, #8
 800435c:	9307      	str	r3, [sp, #28]
 800435e:	696b      	ldr	r3, [r5, #20]
 8004360:	9a04      	ldr	r2, [sp, #16]
 8004362:	189b      	adds	r3, r3, r2
 8004364:	616b      	str	r3, [r5, #20]
 8004366:	e75d      	b.n	8004224 <_vfiprintf_r+0x8c>
 8004368:	210a      	movs	r1, #10
 800436a:	434b      	muls	r3, r1
 800436c:	4667      	mov	r7, ip
 800436e:	189b      	adds	r3, r3, r2
 8004370:	3909      	subs	r1, #9
 8004372:	e7a3      	b.n	80042bc <_vfiprintf_r+0x124>
 8004374:	2301      	movs	r3, #1
 8004376:	425b      	negs	r3, r3
 8004378:	e7ce      	b.n	8004318 <_vfiprintf_r+0x180>
 800437a:	2300      	movs	r3, #0
 800437c:	001a      	movs	r2, r3
 800437e:	3701      	adds	r7, #1
 8004380:	606b      	str	r3, [r5, #4]
 8004382:	7839      	ldrb	r1, [r7, #0]
 8004384:	1c78      	adds	r0, r7, #1
 8004386:	3930      	subs	r1, #48	; 0x30
 8004388:	4684      	mov	ip, r0
 800438a:	2909      	cmp	r1, #9
 800438c:	d903      	bls.n	8004396 <_vfiprintf_r+0x1fe>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0c3      	beq.n	800431a <_vfiprintf_r+0x182>
 8004392:	9209      	str	r2, [sp, #36]	; 0x24
 8004394:	e7c1      	b.n	800431a <_vfiprintf_r+0x182>
 8004396:	230a      	movs	r3, #10
 8004398:	435a      	muls	r2, r3
 800439a:	4667      	mov	r7, ip
 800439c:	1852      	adds	r2, r2, r1
 800439e:	3b09      	subs	r3, #9
 80043a0:	e7ef      	b.n	8004382 <_vfiprintf_r+0x1ea>
 80043a2:	ab07      	add	r3, sp, #28
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	0022      	movs	r2, r4
 80043a8:	0029      	movs	r1, r5
 80043aa:	0030      	movs	r0, r6
 80043ac:	4b16      	ldr	r3, [pc, #88]	; (8004408 <_vfiprintf_r+0x270>)
 80043ae:	e000      	b.n	80043b2 <_vfiprintf_r+0x21a>
 80043b0:	bf00      	nop
 80043b2:	9004      	str	r0, [sp, #16]
 80043b4:	9b04      	ldr	r3, [sp, #16]
 80043b6:	3301      	adds	r3, #1
 80043b8:	d1d1      	bne.n	800435e <_vfiprintf_r+0x1c6>
 80043ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043bc:	07db      	lsls	r3, r3, #31
 80043be:	d405      	bmi.n	80043cc <_vfiprintf_r+0x234>
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	059b      	lsls	r3, r3, #22
 80043c4:	d402      	bmi.n	80043cc <_vfiprintf_r+0x234>
 80043c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043c8:	f7ff fd4a 	bl	8003e60 <__retarget_lock_release_recursive>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	065b      	lsls	r3, r3, #25
 80043d0:	d500      	bpl.n	80043d4 <_vfiprintf_r+0x23c>
 80043d2:	e70a      	b.n	80041ea <_vfiprintf_r+0x52>
 80043d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80043d6:	e70a      	b.n	80041ee <_vfiprintf_r+0x56>
 80043d8:	ab07      	add	r3, sp, #28
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	0022      	movs	r2, r4
 80043de:	0029      	movs	r1, r5
 80043e0:	0030      	movs	r0, r6
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <_vfiprintf_r+0x270>)
 80043e4:	f000 f882 	bl	80044ec <_printf_i>
 80043e8:	e7e3      	b.n	80043b2 <_vfiprintf_r+0x21a>
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	080051c8 	.word	0x080051c8
 80043f0:	080051e8 	.word	0x080051e8
 80043f4:	080051a8 	.word	0x080051a8
 80043f8:	08005208 	.word	0x08005208
 80043fc:	0800520e 	.word	0x0800520e
 8004400:	08005212 	.word	0x08005212
 8004404:	00000000 	.word	0x00000000
 8004408:	08004173 	.word	0x08004173

0800440c <_printf_common>:
 800440c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800440e:	0015      	movs	r5, r2
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	688a      	ldr	r2, [r1, #8]
 8004414:	690b      	ldr	r3, [r1, #16]
 8004416:	000c      	movs	r4, r1
 8004418:	9000      	str	r0, [sp, #0]
 800441a:	4293      	cmp	r3, r2
 800441c:	da00      	bge.n	8004420 <_printf_common+0x14>
 800441e:	0013      	movs	r3, r2
 8004420:	0022      	movs	r2, r4
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	3243      	adds	r2, #67	; 0x43
 8004426:	7812      	ldrb	r2, [r2, #0]
 8004428:	2a00      	cmp	r2, #0
 800442a:	d001      	beq.n	8004430 <_printf_common+0x24>
 800442c:	3301      	adds	r3, #1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	069b      	lsls	r3, r3, #26
 8004434:	d502      	bpl.n	800443c <_printf_common+0x30>
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	3302      	adds	r3, #2
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	2306      	movs	r3, #6
 8004440:	0017      	movs	r7, r2
 8004442:	401f      	ands	r7, r3
 8004444:	421a      	tst	r2, r3
 8004446:	d027      	beq.n	8004498 <_printf_common+0x8c>
 8004448:	0023      	movs	r3, r4
 800444a:	3343      	adds	r3, #67	; 0x43
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	4193      	sbcs	r3, r2
 8004452:	6822      	ldr	r2, [r4, #0]
 8004454:	0692      	lsls	r2, r2, #26
 8004456:	d430      	bmi.n	80044ba <_printf_common+0xae>
 8004458:	0022      	movs	r2, r4
 800445a:	9901      	ldr	r1, [sp, #4]
 800445c:	9800      	ldr	r0, [sp, #0]
 800445e:	9e08      	ldr	r6, [sp, #32]
 8004460:	3243      	adds	r2, #67	; 0x43
 8004462:	47b0      	blx	r6
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d025      	beq.n	80044b4 <_printf_common+0xa8>
 8004468:	2306      	movs	r3, #6
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	682a      	ldr	r2, [r5, #0]
 800446e:	68e1      	ldr	r1, [r4, #12]
 8004470:	2500      	movs	r5, #0
 8004472:	4003      	ands	r3, r0
 8004474:	2b04      	cmp	r3, #4
 8004476:	d103      	bne.n	8004480 <_printf_common+0x74>
 8004478:	1a8d      	subs	r5, r1, r2
 800447a:	43eb      	mvns	r3, r5
 800447c:	17db      	asrs	r3, r3, #31
 800447e:	401d      	ands	r5, r3
 8004480:	68a3      	ldr	r3, [r4, #8]
 8004482:	6922      	ldr	r2, [r4, #16]
 8004484:	4293      	cmp	r3, r2
 8004486:	dd01      	ble.n	800448c <_printf_common+0x80>
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	18ed      	adds	r5, r5, r3
 800448c:	2700      	movs	r7, #0
 800448e:	42bd      	cmp	r5, r7
 8004490:	d120      	bne.n	80044d4 <_printf_common+0xc8>
 8004492:	2000      	movs	r0, #0
 8004494:	e010      	b.n	80044b8 <_printf_common+0xac>
 8004496:	3701      	adds	r7, #1
 8004498:	68e3      	ldr	r3, [r4, #12]
 800449a:	682a      	ldr	r2, [r5, #0]
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	42bb      	cmp	r3, r7
 80044a0:	ddd2      	ble.n	8004448 <_printf_common+0x3c>
 80044a2:	0022      	movs	r2, r4
 80044a4:	2301      	movs	r3, #1
 80044a6:	9901      	ldr	r1, [sp, #4]
 80044a8:	9800      	ldr	r0, [sp, #0]
 80044aa:	9e08      	ldr	r6, [sp, #32]
 80044ac:	3219      	adds	r2, #25
 80044ae:	47b0      	blx	r6
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d1f0      	bne.n	8004496 <_printf_common+0x8a>
 80044b4:	2001      	movs	r0, #1
 80044b6:	4240      	negs	r0, r0
 80044b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044ba:	2030      	movs	r0, #48	; 0x30
 80044bc:	18e1      	adds	r1, r4, r3
 80044be:	3143      	adds	r1, #67	; 0x43
 80044c0:	7008      	strb	r0, [r1, #0]
 80044c2:	0021      	movs	r1, r4
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	3145      	adds	r1, #69	; 0x45
 80044c8:	7809      	ldrb	r1, [r1, #0]
 80044ca:	18a2      	adds	r2, r4, r2
 80044cc:	3243      	adds	r2, #67	; 0x43
 80044ce:	3302      	adds	r3, #2
 80044d0:	7011      	strb	r1, [r2, #0]
 80044d2:	e7c1      	b.n	8004458 <_printf_common+0x4c>
 80044d4:	0022      	movs	r2, r4
 80044d6:	2301      	movs	r3, #1
 80044d8:	9901      	ldr	r1, [sp, #4]
 80044da:	9800      	ldr	r0, [sp, #0]
 80044dc:	9e08      	ldr	r6, [sp, #32]
 80044de:	321a      	adds	r2, #26
 80044e0:	47b0      	blx	r6
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	d0e6      	beq.n	80044b4 <_printf_common+0xa8>
 80044e6:	3701      	adds	r7, #1
 80044e8:	e7d1      	b.n	800448e <_printf_common+0x82>
	...

080044ec <_printf_i>:
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	b08b      	sub	sp, #44	; 0x2c
 80044f0:	9206      	str	r2, [sp, #24]
 80044f2:	000a      	movs	r2, r1
 80044f4:	3243      	adds	r2, #67	; 0x43
 80044f6:	9307      	str	r3, [sp, #28]
 80044f8:	9005      	str	r0, [sp, #20]
 80044fa:	9204      	str	r2, [sp, #16]
 80044fc:	7e0a      	ldrb	r2, [r1, #24]
 80044fe:	000c      	movs	r4, r1
 8004500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004502:	2a78      	cmp	r2, #120	; 0x78
 8004504:	d806      	bhi.n	8004514 <_printf_i+0x28>
 8004506:	2a62      	cmp	r2, #98	; 0x62
 8004508:	d808      	bhi.n	800451c <_printf_i+0x30>
 800450a:	2a00      	cmp	r2, #0
 800450c:	d100      	bne.n	8004510 <_printf_i+0x24>
 800450e:	e0c0      	b.n	8004692 <_printf_i+0x1a6>
 8004510:	2a58      	cmp	r2, #88	; 0x58
 8004512:	d052      	beq.n	80045ba <_printf_i+0xce>
 8004514:	0026      	movs	r6, r4
 8004516:	3642      	adds	r6, #66	; 0x42
 8004518:	7032      	strb	r2, [r6, #0]
 800451a:	e022      	b.n	8004562 <_printf_i+0x76>
 800451c:	0010      	movs	r0, r2
 800451e:	3863      	subs	r0, #99	; 0x63
 8004520:	2815      	cmp	r0, #21
 8004522:	d8f7      	bhi.n	8004514 <_printf_i+0x28>
 8004524:	f7fb fdf8 	bl	8000118 <__gnu_thumb1_case_shi>
 8004528:	001f0016 	.word	0x001f0016
 800452c:	fff6fff6 	.word	0xfff6fff6
 8004530:	fff6fff6 	.word	0xfff6fff6
 8004534:	fff6001f 	.word	0xfff6001f
 8004538:	fff6fff6 	.word	0xfff6fff6
 800453c:	00a8fff6 	.word	0x00a8fff6
 8004540:	009a0036 	.word	0x009a0036
 8004544:	fff6fff6 	.word	0xfff6fff6
 8004548:	fff600b9 	.word	0xfff600b9
 800454c:	fff60036 	.word	0xfff60036
 8004550:	009efff6 	.word	0x009efff6
 8004554:	0026      	movs	r6, r4
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	3642      	adds	r6, #66	; 0x42
 800455a:	1d11      	adds	r1, r2, #4
 800455c:	6019      	str	r1, [r3, #0]
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	7033      	strb	r3, [r6, #0]
 8004562:	2301      	movs	r3, #1
 8004564:	e0a7      	b.n	80046b6 <_printf_i+0x1ca>
 8004566:	6808      	ldr	r0, [r1, #0]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	1d0a      	adds	r2, r1, #4
 800456c:	0605      	lsls	r5, r0, #24
 800456e:	d50b      	bpl.n	8004588 <_printf_i+0x9c>
 8004570:	680d      	ldr	r5, [r1, #0]
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2d00      	cmp	r5, #0
 8004576:	da03      	bge.n	8004580 <_printf_i+0x94>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	9a04      	ldr	r2, [sp, #16]
 800457c:	426d      	negs	r5, r5
 800457e:	7013      	strb	r3, [r2, #0]
 8004580:	4b61      	ldr	r3, [pc, #388]	; (8004708 <_printf_i+0x21c>)
 8004582:	270a      	movs	r7, #10
 8004584:	9303      	str	r3, [sp, #12]
 8004586:	e032      	b.n	80045ee <_printf_i+0x102>
 8004588:	680d      	ldr	r5, [r1, #0]
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	0641      	lsls	r1, r0, #25
 800458e:	d5f1      	bpl.n	8004574 <_printf_i+0x88>
 8004590:	b22d      	sxth	r5, r5
 8004592:	e7ef      	b.n	8004574 <_printf_i+0x88>
 8004594:	680d      	ldr	r5, [r1, #0]
 8004596:	6819      	ldr	r1, [r3, #0]
 8004598:	1d08      	adds	r0, r1, #4
 800459a:	6018      	str	r0, [r3, #0]
 800459c:	062e      	lsls	r6, r5, #24
 800459e:	d501      	bpl.n	80045a4 <_printf_i+0xb8>
 80045a0:	680d      	ldr	r5, [r1, #0]
 80045a2:	e003      	b.n	80045ac <_printf_i+0xc0>
 80045a4:	066d      	lsls	r5, r5, #25
 80045a6:	d5fb      	bpl.n	80045a0 <_printf_i+0xb4>
 80045a8:	680d      	ldr	r5, [r1, #0]
 80045aa:	b2ad      	uxth	r5, r5
 80045ac:	4b56      	ldr	r3, [pc, #344]	; (8004708 <_printf_i+0x21c>)
 80045ae:	270a      	movs	r7, #10
 80045b0:	9303      	str	r3, [sp, #12]
 80045b2:	2a6f      	cmp	r2, #111	; 0x6f
 80045b4:	d117      	bne.n	80045e6 <_printf_i+0xfa>
 80045b6:	2708      	movs	r7, #8
 80045b8:	e015      	b.n	80045e6 <_printf_i+0xfa>
 80045ba:	3145      	adds	r1, #69	; 0x45
 80045bc:	700a      	strb	r2, [r1, #0]
 80045be:	4a52      	ldr	r2, [pc, #328]	; (8004708 <_printf_i+0x21c>)
 80045c0:	9203      	str	r2, [sp, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	ca20      	ldmia	r2!, {r5}
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	0608      	lsls	r0, r1, #24
 80045cc:	d550      	bpl.n	8004670 <_printf_i+0x184>
 80045ce:	07cb      	lsls	r3, r1, #31
 80045d0:	d502      	bpl.n	80045d8 <_printf_i+0xec>
 80045d2:	2320      	movs	r3, #32
 80045d4:	4319      	orrs	r1, r3
 80045d6:	6021      	str	r1, [r4, #0]
 80045d8:	2710      	movs	r7, #16
 80045da:	2d00      	cmp	r5, #0
 80045dc:	d103      	bne.n	80045e6 <_printf_i+0xfa>
 80045de:	2320      	movs	r3, #32
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	439a      	bics	r2, r3
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	0023      	movs	r3, r4
 80045e8:	2200      	movs	r2, #0
 80045ea:	3343      	adds	r3, #67	; 0x43
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	6863      	ldr	r3, [r4, #4]
 80045f0:	60a3      	str	r3, [r4, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	db03      	blt.n	80045fe <_printf_i+0x112>
 80045f6:	2204      	movs	r2, #4
 80045f8:	6821      	ldr	r1, [r4, #0]
 80045fa:	4391      	bics	r1, r2
 80045fc:	6021      	str	r1, [r4, #0]
 80045fe:	2d00      	cmp	r5, #0
 8004600:	d102      	bne.n	8004608 <_printf_i+0x11c>
 8004602:	9e04      	ldr	r6, [sp, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <_printf_i+0x136>
 8004608:	9e04      	ldr	r6, [sp, #16]
 800460a:	0028      	movs	r0, r5
 800460c:	0039      	movs	r1, r7
 800460e:	f7fb fe13 	bl	8000238 <__aeabi_uidivmod>
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	3e01      	subs	r6, #1
 8004616:	5c5b      	ldrb	r3, [r3, r1]
 8004618:	7033      	strb	r3, [r6, #0]
 800461a:	002b      	movs	r3, r5
 800461c:	0005      	movs	r5, r0
 800461e:	429f      	cmp	r7, r3
 8004620:	d9f3      	bls.n	800460a <_printf_i+0x11e>
 8004622:	2f08      	cmp	r7, #8
 8004624:	d109      	bne.n	800463a <_printf_i+0x14e>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	07db      	lsls	r3, r3, #31
 800462a:	d506      	bpl.n	800463a <_printf_i+0x14e>
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	6922      	ldr	r2, [r4, #16]
 8004630:	4293      	cmp	r3, r2
 8004632:	dc02      	bgt.n	800463a <_printf_i+0x14e>
 8004634:	2330      	movs	r3, #48	; 0x30
 8004636:	3e01      	subs	r6, #1
 8004638:	7033      	strb	r3, [r6, #0]
 800463a:	9b04      	ldr	r3, [sp, #16]
 800463c:	1b9b      	subs	r3, r3, r6
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	9b07      	ldr	r3, [sp, #28]
 8004642:	0021      	movs	r1, r4
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	9805      	ldr	r0, [sp, #20]
 8004648:	9b06      	ldr	r3, [sp, #24]
 800464a:	aa09      	add	r2, sp, #36	; 0x24
 800464c:	f7ff fede 	bl	800440c <_printf_common>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d135      	bne.n	80046c0 <_printf_i+0x1d4>
 8004654:	2001      	movs	r0, #1
 8004656:	4240      	negs	r0, r0
 8004658:	b00b      	add	sp, #44	; 0x2c
 800465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800465c:	2220      	movs	r2, #32
 800465e:	6809      	ldr	r1, [r1, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	0022      	movs	r2, r4
 8004666:	2178      	movs	r1, #120	; 0x78
 8004668:	3245      	adds	r2, #69	; 0x45
 800466a:	7011      	strb	r1, [r2, #0]
 800466c:	4a27      	ldr	r2, [pc, #156]	; (800470c <_printf_i+0x220>)
 800466e:	e7a7      	b.n	80045c0 <_printf_i+0xd4>
 8004670:	0648      	lsls	r0, r1, #25
 8004672:	d5ac      	bpl.n	80045ce <_printf_i+0xe2>
 8004674:	b2ad      	uxth	r5, r5
 8004676:	e7aa      	b.n	80045ce <_printf_i+0xe2>
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	680d      	ldr	r5, [r1, #0]
 800467c:	1d10      	adds	r0, r2, #4
 800467e:	6949      	ldr	r1, [r1, #20]
 8004680:	6018      	str	r0, [r3, #0]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	062e      	lsls	r6, r5, #24
 8004686:	d501      	bpl.n	800468c <_printf_i+0x1a0>
 8004688:	6019      	str	r1, [r3, #0]
 800468a:	e002      	b.n	8004692 <_printf_i+0x1a6>
 800468c:	066d      	lsls	r5, r5, #25
 800468e:	d5fb      	bpl.n	8004688 <_printf_i+0x19c>
 8004690:	8019      	strh	r1, [r3, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	9e04      	ldr	r6, [sp, #16]
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	e7d2      	b.n	8004640 <_printf_i+0x154>
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	1d11      	adds	r1, r2, #4
 800469e:	6019      	str	r1, [r3, #0]
 80046a0:	6816      	ldr	r6, [r2, #0]
 80046a2:	2100      	movs	r1, #0
 80046a4:	0030      	movs	r0, r6
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	f000 fb08 	bl	8004cbc <memchr>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d001      	beq.n	80046b4 <_printf_i+0x1c8>
 80046b0:	1b80      	subs	r0, r0, r6
 80046b2:	6060      	str	r0, [r4, #4]
 80046b4:	6863      	ldr	r3, [r4, #4]
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	2300      	movs	r3, #0
 80046ba:	9a04      	ldr	r2, [sp, #16]
 80046bc:	7013      	strb	r3, [r2, #0]
 80046be:	e7bf      	b.n	8004640 <_printf_i+0x154>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	0032      	movs	r2, r6
 80046c4:	9906      	ldr	r1, [sp, #24]
 80046c6:	9805      	ldr	r0, [sp, #20]
 80046c8:	9d07      	ldr	r5, [sp, #28]
 80046ca:	47a8      	blx	r5
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d0c1      	beq.n	8004654 <_printf_i+0x168>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	d415      	bmi.n	8004702 <_printf_i+0x216>
 80046d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d8:	68e0      	ldr	r0, [r4, #12]
 80046da:	4298      	cmp	r0, r3
 80046dc:	dabc      	bge.n	8004658 <_printf_i+0x16c>
 80046de:	0018      	movs	r0, r3
 80046e0:	e7ba      	b.n	8004658 <_printf_i+0x16c>
 80046e2:	0022      	movs	r2, r4
 80046e4:	2301      	movs	r3, #1
 80046e6:	9906      	ldr	r1, [sp, #24]
 80046e8:	9805      	ldr	r0, [sp, #20]
 80046ea:	9e07      	ldr	r6, [sp, #28]
 80046ec:	3219      	adds	r2, #25
 80046ee:	47b0      	blx	r6
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d0af      	beq.n	8004654 <_printf_i+0x168>
 80046f4:	3501      	adds	r5, #1
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	42ab      	cmp	r3, r5
 80046fe:	dcf0      	bgt.n	80046e2 <_printf_i+0x1f6>
 8004700:	e7e9      	b.n	80046d6 <_printf_i+0x1ea>
 8004702:	2500      	movs	r5, #0
 8004704:	e7f7      	b.n	80046f6 <_printf_i+0x20a>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	08005219 	.word	0x08005219
 800470c:	0800522a 	.word	0x0800522a

08004710 <_putc_r>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	0006      	movs	r6, r0
 8004714:	000d      	movs	r5, r1
 8004716:	0014      	movs	r4, r2
 8004718:	2800      	cmp	r0, #0
 800471a:	d004      	beq.n	8004726 <_putc_r+0x16>
 800471c:	6983      	ldr	r3, [r0, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <_putc_r+0x16>
 8004722:	f7ff fafb 	bl	8003d1c <__sinit>
 8004726:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <_putc_r+0x88>)
 8004728:	429c      	cmp	r4, r3
 800472a:	d124      	bne.n	8004776 <_putc_r+0x66>
 800472c:	6874      	ldr	r4, [r6, #4]
 800472e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004730:	07db      	lsls	r3, r3, #31
 8004732:	d405      	bmi.n	8004740 <_putc_r+0x30>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	059b      	lsls	r3, r3, #22
 8004738:	d402      	bmi.n	8004740 <_putc_r+0x30>
 800473a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800473c:	f7ff fb8f 	bl	8003e5e <__retarget_lock_acquire_recursive>
 8004740:	68a3      	ldr	r3, [r4, #8]
 8004742:	3b01      	subs	r3, #1
 8004744:	60a3      	str	r3, [r4, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	da05      	bge.n	8004756 <_putc_r+0x46>
 800474a:	69a2      	ldr	r2, [r4, #24]
 800474c:	4293      	cmp	r3, r2
 800474e:	db1c      	blt.n	800478a <_putc_r+0x7a>
 8004750:	b2eb      	uxtb	r3, r5
 8004752:	2b0a      	cmp	r3, #10
 8004754:	d019      	beq.n	800478a <_putc_r+0x7a>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	6022      	str	r2, [r4, #0]
 800475c:	701d      	strb	r5, [r3, #0]
 800475e:	b2ed      	uxtb	r5, r5
 8004760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004762:	07db      	lsls	r3, r3, #31
 8004764:	d405      	bmi.n	8004772 <_putc_r+0x62>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	059b      	lsls	r3, r3, #22
 800476a:	d402      	bmi.n	8004772 <_putc_r+0x62>
 800476c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800476e:	f7ff fb77 	bl	8003e60 <__retarget_lock_release_recursive>
 8004772:	0028      	movs	r0, r5
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <_putc_r+0x8c>)
 8004778:	429c      	cmp	r4, r3
 800477a:	d101      	bne.n	8004780 <_putc_r+0x70>
 800477c:	68b4      	ldr	r4, [r6, #8]
 800477e:	e7d6      	b.n	800472e <_putc_r+0x1e>
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <_putc_r+0x90>)
 8004782:	429c      	cmp	r4, r3
 8004784:	d1d3      	bne.n	800472e <_putc_r+0x1e>
 8004786:	68f4      	ldr	r4, [r6, #12]
 8004788:	e7d1      	b.n	800472e <_putc_r+0x1e>
 800478a:	0029      	movs	r1, r5
 800478c:	0022      	movs	r2, r4
 800478e:	0030      	movs	r0, r6
 8004790:	f000 f854 	bl	800483c <__swbuf_r>
 8004794:	0005      	movs	r5, r0
 8004796:	e7e3      	b.n	8004760 <_putc_r+0x50>
 8004798:	080051c8 	.word	0x080051c8
 800479c:	080051e8 	.word	0x080051e8
 80047a0:	080051a8 	.word	0x080051a8

080047a4 <__sread>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	000c      	movs	r4, r1
 80047a8:	250e      	movs	r5, #14
 80047aa:	5f49      	ldrsh	r1, [r1, r5]
 80047ac:	f000 faca 	bl	8004d44 <_read_r>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	db03      	blt.n	80047bc <__sread+0x18>
 80047b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047b6:	181b      	adds	r3, r3, r0
 80047b8:	6563      	str	r3, [r4, #84]	; 0x54
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	4a02      	ldr	r2, [pc, #8]	; (80047c8 <__sread+0x24>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	e7f9      	b.n	80047ba <__sread+0x16>
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	ffffefff 	.word	0xffffefff

080047cc <__swrite>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	001f      	movs	r7, r3
 80047d0:	898b      	ldrh	r3, [r1, #12]
 80047d2:	0005      	movs	r5, r0
 80047d4:	000c      	movs	r4, r1
 80047d6:	0016      	movs	r6, r2
 80047d8:	05db      	lsls	r3, r3, #23
 80047da:	d505      	bpl.n	80047e8 <__swrite+0x1c>
 80047dc:	230e      	movs	r3, #14
 80047de:	5ec9      	ldrsh	r1, [r1, r3]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2302      	movs	r3, #2
 80047e4:	f000 f9ea 	bl	8004bbc <_lseek_r>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	4a05      	ldr	r2, [pc, #20]	; (8004800 <__swrite+0x34>)
 80047ec:	0028      	movs	r0, r5
 80047ee:	4013      	ands	r3, r2
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	0032      	movs	r2, r6
 80047f4:	230e      	movs	r3, #14
 80047f6:	5ee1      	ldrsh	r1, [r4, r3]
 80047f8:	003b      	movs	r3, r7
 80047fa:	f000 f875 	bl	80048e8 <_write_r>
 80047fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004800:	ffffefff 	.word	0xffffefff

08004804 <__sseek>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	000c      	movs	r4, r1
 8004808:	250e      	movs	r5, #14
 800480a:	5f49      	ldrsh	r1, [r1, r5]
 800480c:	f000 f9d6 	bl	8004bbc <_lseek_r>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	1c42      	adds	r2, r0, #1
 8004814:	d103      	bne.n	800481e <__sseek+0x1a>
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <__sseek+0x28>)
 8004818:	4013      	ands	r3, r2
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	0152      	lsls	r2, r2, #5
 8004822:	4313      	orrs	r3, r2
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6560      	str	r0, [r4, #84]	; 0x54
 8004828:	e7f8      	b.n	800481c <__sseek+0x18>
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	ffffefff 	.word	0xffffefff

08004830 <__sclose>:
 8004830:	b510      	push	{r4, lr}
 8004832:	230e      	movs	r3, #14
 8004834:	5ec9      	ldrsh	r1, [r1, r3]
 8004836:	f000 f8e3 	bl	8004a00 <_close_r>
 800483a:	bd10      	pop	{r4, pc}

0800483c <__swbuf_r>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	0005      	movs	r5, r0
 8004840:	000e      	movs	r6, r1
 8004842:	0014      	movs	r4, r2
 8004844:	2800      	cmp	r0, #0
 8004846:	d004      	beq.n	8004852 <__swbuf_r+0x16>
 8004848:	6983      	ldr	r3, [r0, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <__swbuf_r+0x16>
 800484e:	f7ff fa65 	bl	8003d1c <__sinit>
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <__swbuf_r+0xa0>)
 8004854:	429c      	cmp	r4, r3
 8004856:	d12e      	bne.n	80048b6 <__swbuf_r+0x7a>
 8004858:	686c      	ldr	r4, [r5, #4]
 800485a:	69a3      	ldr	r3, [r4, #24]
 800485c:	60a3      	str	r3, [r4, #8]
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	071b      	lsls	r3, r3, #28
 8004862:	d532      	bpl.n	80048ca <__swbuf_r+0x8e>
 8004864:	6923      	ldr	r3, [r4, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02f      	beq.n	80048ca <__swbuf_r+0x8e>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	b2f7      	uxtb	r7, r6
 8004870:	1a98      	subs	r0, r3, r2
 8004872:	6963      	ldr	r3, [r4, #20]
 8004874:	b2f6      	uxtb	r6, r6
 8004876:	4283      	cmp	r3, r0
 8004878:	dc05      	bgt.n	8004886 <__swbuf_r+0x4a>
 800487a:	0021      	movs	r1, r4
 800487c:	0028      	movs	r0, r5
 800487e:	f000 f95d 	bl	8004b3c <_fflush_r>
 8004882:	2800      	cmp	r0, #0
 8004884:	d127      	bne.n	80048d6 <__swbuf_r+0x9a>
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	3001      	adds	r0, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	60a3      	str	r3, [r4, #8]
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	701f      	strb	r7, [r3, #0]
 8004896:	6963      	ldr	r3, [r4, #20]
 8004898:	4283      	cmp	r3, r0
 800489a:	d004      	beq.n	80048a6 <__swbuf_r+0x6a>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	07db      	lsls	r3, r3, #31
 80048a0:	d507      	bpl.n	80048b2 <__swbuf_r+0x76>
 80048a2:	2e0a      	cmp	r6, #10
 80048a4:	d105      	bne.n	80048b2 <__swbuf_r+0x76>
 80048a6:	0021      	movs	r1, r4
 80048a8:	0028      	movs	r0, r5
 80048aa:	f000 f947 	bl	8004b3c <_fflush_r>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d111      	bne.n	80048d6 <__swbuf_r+0x9a>
 80048b2:	0030      	movs	r0, r6
 80048b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <__swbuf_r+0xa4>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d101      	bne.n	80048c0 <__swbuf_r+0x84>
 80048bc:	68ac      	ldr	r4, [r5, #8]
 80048be:	e7cc      	b.n	800485a <__swbuf_r+0x1e>
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <__swbuf_r+0xa8>)
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d1c9      	bne.n	800485a <__swbuf_r+0x1e>
 80048c6:	68ec      	ldr	r4, [r5, #12]
 80048c8:	e7c7      	b.n	800485a <__swbuf_r+0x1e>
 80048ca:	0021      	movs	r1, r4
 80048cc:	0028      	movs	r0, r5
 80048ce:	f000 f81f 	bl	8004910 <__swsetup_r>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d0c9      	beq.n	800486a <__swbuf_r+0x2e>
 80048d6:	2601      	movs	r6, #1
 80048d8:	4276      	negs	r6, r6
 80048da:	e7ea      	b.n	80048b2 <__swbuf_r+0x76>
 80048dc:	080051c8 	.word	0x080051c8
 80048e0:	080051e8 	.word	0x080051e8
 80048e4:	080051a8 	.word	0x080051a8

080048e8 <_write_r>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	0004      	movs	r4, r0
 80048ec:	0008      	movs	r0, r1
 80048ee:	0011      	movs	r1, r2
 80048f0:	001a      	movs	r2, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	4d05      	ldr	r5, [pc, #20]	; (800490c <_write_r+0x24>)
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	f7fb fe87 	bl	800060a <_write>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d103      	bne.n	8004908 <_write_r+0x20>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d000      	beq.n	8004908 <_write_r+0x20>
 8004906:	6023      	str	r3, [r4, #0]
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	200006cc 	.word	0x200006cc

08004910 <__swsetup_r>:
 8004910:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <__swsetup_r+0xe0>)
 8004912:	b570      	push	{r4, r5, r6, lr}
 8004914:	681d      	ldr	r5, [r3, #0]
 8004916:	0006      	movs	r6, r0
 8004918:	000c      	movs	r4, r1
 800491a:	2d00      	cmp	r5, #0
 800491c:	d005      	beq.n	800492a <__swsetup_r+0x1a>
 800491e:	69ab      	ldr	r3, [r5, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <__swsetup_r+0x1a>
 8004924:	0028      	movs	r0, r5
 8004926:	f7ff f9f9 	bl	8003d1c <__sinit>
 800492a:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <__swsetup_r+0xe4>)
 800492c:	429c      	cmp	r4, r3
 800492e:	d10f      	bne.n	8004950 <__swsetup_r+0x40>
 8004930:	686c      	ldr	r4, [r5, #4]
 8004932:	230c      	movs	r3, #12
 8004934:	5ee2      	ldrsh	r2, [r4, r3]
 8004936:	b293      	uxth	r3, r2
 8004938:	0711      	lsls	r1, r2, #28
 800493a:	d42d      	bmi.n	8004998 <__swsetup_r+0x88>
 800493c:	06d9      	lsls	r1, r3, #27
 800493e:	d411      	bmi.n	8004964 <__swsetup_r+0x54>
 8004940:	2309      	movs	r3, #9
 8004942:	2001      	movs	r0, #1
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	3337      	adds	r3, #55	; 0x37
 8004948:	4313      	orrs	r3, r2
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	4240      	negs	r0, r0
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <__swsetup_r+0xe8>)
 8004952:	429c      	cmp	r4, r3
 8004954:	d101      	bne.n	800495a <__swsetup_r+0x4a>
 8004956:	68ac      	ldr	r4, [r5, #8]
 8004958:	e7eb      	b.n	8004932 <__swsetup_r+0x22>
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <__swsetup_r+0xec>)
 800495c:	429c      	cmp	r4, r3
 800495e:	d1e8      	bne.n	8004932 <__swsetup_r+0x22>
 8004960:	68ec      	ldr	r4, [r5, #12]
 8004962:	e7e6      	b.n	8004932 <__swsetup_r+0x22>
 8004964:	075b      	lsls	r3, r3, #29
 8004966:	d513      	bpl.n	8004990 <__swsetup_r+0x80>
 8004968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800496a:	2900      	cmp	r1, #0
 800496c:	d008      	beq.n	8004980 <__swsetup_r+0x70>
 800496e:	0023      	movs	r3, r4
 8004970:	3344      	adds	r3, #68	; 0x44
 8004972:	4299      	cmp	r1, r3
 8004974:	d002      	beq.n	800497c <__swsetup_r+0x6c>
 8004976:	0030      	movs	r0, r6
 8004978:	f7ff f864 	bl	8003a44 <_free_r>
 800497c:	2300      	movs	r3, #0
 800497e:	6363      	str	r3, [r4, #52]	; 0x34
 8004980:	2224      	movs	r2, #36	; 0x24
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	4393      	bics	r3, r2
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	2300      	movs	r3, #0
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	2308      	movs	r3, #8
 8004992:	89a2      	ldrh	r2, [r4, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <__swsetup_r+0xa6>
 800499e:	21a0      	movs	r1, #160	; 0xa0
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	0089      	lsls	r1, r1, #2
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	400b      	ands	r3, r1
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <__swsetup_r+0xa6>
 80049ae:	0021      	movs	r1, r4
 80049b0:	0030      	movs	r0, r6
 80049b2:	f000 f93f 	bl	8004c34 <__smakebuf_r>
 80049b6:	220c      	movs	r2, #12
 80049b8:	5ea3      	ldrsh	r3, [r4, r2]
 80049ba:	2001      	movs	r0, #1
 80049bc:	001a      	movs	r2, r3
 80049be:	b299      	uxth	r1, r3
 80049c0:	4002      	ands	r2, r0
 80049c2:	4203      	tst	r3, r0
 80049c4:	d00f      	beq.n	80049e6 <__swsetup_r+0xd6>
 80049c6:	2200      	movs	r2, #0
 80049c8:	60a2      	str	r2, [r4, #8]
 80049ca:	6962      	ldr	r2, [r4, #20]
 80049cc:	4252      	negs	r2, r2
 80049ce:	61a2      	str	r2, [r4, #24]
 80049d0:	2000      	movs	r0, #0
 80049d2:	6922      	ldr	r2, [r4, #16]
 80049d4:	4282      	cmp	r2, r0
 80049d6:	d1ba      	bne.n	800494e <__swsetup_r+0x3e>
 80049d8:	060a      	lsls	r2, r1, #24
 80049da:	d5b8      	bpl.n	800494e <__swsetup_r+0x3e>
 80049dc:	2240      	movs	r2, #64	; 0x40
 80049de:	4313      	orrs	r3, r2
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	3801      	subs	r0, #1
 80049e4:	e7b3      	b.n	800494e <__swsetup_r+0x3e>
 80049e6:	0788      	lsls	r0, r1, #30
 80049e8:	d400      	bmi.n	80049ec <__swsetup_r+0xdc>
 80049ea:	6962      	ldr	r2, [r4, #20]
 80049ec:	60a2      	str	r2, [r4, #8]
 80049ee:	e7ef      	b.n	80049d0 <__swsetup_r+0xc0>
 80049f0:	2000001c 	.word	0x2000001c
 80049f4:	080051c8 	.word	0x080051c8
 80049f8:	080051e8 	.word	0x080051e8
 80049fc:	080051a8 	.word	0x080051a8

08004a00 <_close_r>:
 8004a00:	2300      	movs	r3, #0
 8004a02:	b570      	push	{r4, r5, r6, lr}
 8004a04:	4d06      	ldr	r5, [pc, #24]	; (8004a20 <_close_r+0x20>)
 8004a06:	0004      	movs	r4, r0
 8004a08:	0008      	movs	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fb fe19 	bl	8000642 <_close>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d103      	bne.n	8004a1c <_close_r+0x1c>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <_close_r+0x1c>
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	200006cc 	.word	0x200006cc

08004a24 <__sflush_r>:
 8004a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a26:	898b      	ldrh	r3, [r1, #12]
 8004a28:	0005      	movs	r5, r0
 8004a2a:	000c      	movs	r4, r1
 8004a2c:	071a      	lsls	r2, r3, #28
 8004a2e:	d45f      	bmi.n	8004af0 <__sflush_r+0xcc>
 8004a30:	684a      	ldr	r2, [r1, #4]
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	dc04      	bgt.n	8004a40 <__sflush_r+0x1c>
 8004a36:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	dc01      	bgt.n	8004a40 <__sflush_r+0x1c>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a42:	2f00      	cmp	r7, #0
 8004a44:	d0fa      	beq.n	8004a3c <__sflush_r+0x18>
 8004a46:	2200      	movs	r2, #0
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	682e      	ldr	r6, [r5, #0]
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	001a      	movs	r2, r3
 8004a50:	0149      	lsls	r1, r1, #5
 8004a52:	400a      	ands	r2, r1
 8004a54:	420b      	tst	r3, r1
 8004a56:	d034      	beq.n	8004ac2 <__sflush_r+0x9e>
 8004a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	075b      	lsls	r3, r3, #29
 8004a5e:	d506      	bpl.n	8004a6e <__sflush_r+0x4a>
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	1ac0      	subs	r0, r0, r3
 8004a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <__sflush_r+0x4a>
 8004a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a6c:	1ac0      	subs	r0, r0, r3
 8004a6e:	0002      	movs	r2, r0
 8004a70:	6a21      	ldr	r1, [r4, #32]
 8004a72:	2300      	movs	r3, #0
 8004a74:	0028      	movs	r0, r5
 8004a76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a78:	47b8      	blx	r7
 8004a7a:	89a1      	ldrh	r1, [r4, #12]
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d106      	bne.n	8004a8e <__sflush_r+0x6a>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	2b1d      	cmp	r3, #29
 8004a84:	d831      	bhi.n	8004aea <__sflush_r+0xc6>
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <__sflush_r+0x114>)
 8004a88:	40da      	lsrs	r2, r3
 8004a8a:	07d3      	lsls	r3, r2, #31
 8004a8c:	d52d      	bpl.n	8004aea <__sflush_r+0xc6>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	04cb      	lsls	r3, r1, #19
 8004a98:	d505      	bpl.n	8004aa6 <__sflush_r+0x82>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	d102      	bne.n	8004aa4 <__sflush_r+0x80>
 8004a9e:	682b      	ldr	r3, [r5, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d100      	bne.n	8004aa6 <__sflush_r+0x82>
 8004aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8004aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa8:	602e      	str	r6, [r5, #0]
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	d0c6      	beq.n	8004a3c <__sflush_r+0x18>
 8004aae:	0023      	movs	r3, r4
 8004ab0:	3344      	adds	r3, #68	; 0x44
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	d002      	beq.n	8004abc <__sflush_r+0x98>
 8004ab6:	0028      	movs	r0, r5
 8004ab8:	f7fe ffc4 	bl	8003a44 <_free_r>
 8004abc:	2000      	movs	r0, #0
 8004abe:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac0:	e7bd      	b.n	8004a3e <__sflush_r+0x1a>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	0028      	movs	r0, r5
 8004ac6:	6a21      	ldr	r1, [r4, #32]
 8004ac8:	47b8      	blx	r7
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	d1c5      	bne.n	8004a5a <__sflush_r+0x36>
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0c2      	beq.n	8004a5a <__sflush_r+0x36>
 8004ad4:	2b1d      	cmp	r3, #29
 8004ad6:	d001      	beq.n	8004adc <__sflush_r+0xb8>
 8004ad8:	2b16      	cmp	r3, #22
 8004ada:	d101      	bne.n	8004ae0 <__sflush_r+0xbc>
 8004adc:	602e      	str	r6, [r5, #0]
 8004ade:	e7ad      	b.n	8004a3c <__sflush_r+0x18>
 8004ae0:	2340      	movs	r3, #64	; 0x40
 8004ae2:	89a2      	ldrh	r2, [r4, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	e7a9      	b.n	8004a3e <__sflush_r+0x1a>
 8004aea:	2340      	movs	r3, #64	; 0x40
 8004aec:	430b      	orrs	r3, r1
 8004aee:	e7fa      	b.n	8004ae6 <__sflush_r+0xc2>
 8004af0:	690f      	ldr	r7, [r1, #16]
 8004af2:	2f00      	cmp	r7, #0
 8004af4:	d0a2      	beq.n	8004a3c <__sflush_r+0x18>
 8004af6:	680a      	ldr	r2, [r1, #0]
 8004af8:	600f      	str	r7, [r1, #0]
 8004afa:	1bd2      	subs	r2, r2, r7
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	079b      	lsls	r3, r3, #30
 8004b02:	d100      	bne.n	8004b06 <__sflush_r+0xe2>
 8004b04:	694a      	ldr	r2, [r1, #20]
 8004b06:	60a2      	str	r2, [r4, #8]
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	dc00      	bgt.n	8004b10 <__sflush_r+0xec>
 8004b0e:	e795      	b.n	8004a3c <__sflush_r+0x18>
 8004b10:	003a      	movs	r2, r7
 8004b12:	0028      	movs	r0, r5
 8004b14:	9b01      	ldr	r3, [sp, #4]
 8004b16:	6a21      	ldr	r1, [r4, #32]
 8004b18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b1a:	47b0      	blx	r6
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	dc06      	bgt.n	8004b2e <__sflush_r+0x10a>
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	2001      	movs	r0, #1
 8004b24:	89a2      	ldrh	r2, [r4, #12]
 8004b26:	4240      	negs	r0, r0
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	e787      	b.n	8004a3e <__sflush_r+0x1a>
 8004b2e:	9b01      	ldr	r3, [sp, #4]
 8004b30:	183f      	adds	r7, r7, r0
 8004b32:	1a1b      	subs	r3, r3, r0
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	e7e7      	b.n	8004b08 <__sflush_r+0xe4>
 8004b38:	20400001 	.word	0x20400001

08004b3c <_fflush_r>:
 8004b3c:	690b      	ldr	r3, [r1, #16]
 8004b3e:	b570      	push	{r4, r5, r6, lr}
 8004b40:	0005      	movs	r5, r0
 8004b42:	000c      	movs	r4, r1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <_fflush_r+0x12>
 8004b48:	2500      	movs	r5, #0
 8004b4a:	0028      	movs	r0, r5
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d004      	beq.n	8004b5c <_fflush_r+0x20>
 8004b52:	6983      	ldr	r3, [r0, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <_fflush_r+0x20>
 8004b58:	f7ff f8e0 	bl	8003d1c <__sinit>
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <_fflush_r+0x74>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d11b      	bne.n	8004b9a <_fflush_r+0x5e>
 8004b62:	686c      	ldr	r4, [r5, #4]
 8004b64:	220c      	movs	r2, #12
 8004b66:	5ea3      	ldrsh	r3, [r4, r2]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ed      	beq.n	8004b48 <_fflush_r+0xc>
 8004b6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b6e:	07d2      	lsls	r2, r2, #31
 8004b70:	d404      	bmi.n	8004b7c <_fflush_r+0x40>
 8004b72:	059b      	lsls	r3, r3, #22
 8004b74:	d402      	bmi.n	8004b7c <_fflush_r+0x40>
 8004b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b78:	f7ff f971 	bl	8003e5e <__retarget_lock_acquire_recursive>
 8004b7c:	0028      	movs	r0, r5
 8004b7e:	0021      	movs	r1, r4
 8004b80:	f7ff ff50 	bl	8004a24 <__sflush_r>
 8004b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b86:	0005      	movs	r5, r0
 8004b88:	07db      	lsls	r3, r3, #31
 8004b8a:	d4de      	bmi.n	8004b4a <_fflush_r+0xe>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	059b      	lsls	r3, r3, #22
 8004b90:	d4db      	bmi.n	8004b4a <_fflush_r+0xe>
 8004b92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b94:	f7ff f964 	bl	8003e60 <__retarget_lock_release_recursive>
 8004b98:	e7d7      	b.n	8004b4a <_fflush_r+0xe>
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <_fflush_r+0x78>)
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	d101      	bne.n	8004ba4 <_fflush_r+0x68>
 8004ba0:	68ac      	ldr	r4, [r5, #8]
 8004ba2:	e7df      	b.n	8004b64 <_fflush_r+0x28>
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <_fflush_r+0x7c>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d1dc      	bne.n	8004b64 <_fflush_r+0x28>
 8004baa:	68ec      	ldr	r4, [r5, #12]
 8004bac:	e7da      	b.n	8004b64 <_fflush_r+0x28>
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	080051c8 	.word	0x080051c8
 8004bb4:	080051e8 	.word	0x080051e8
 8004bb8:	080051a8 	.word	0x080051a8

08004bbc <_lseek_r>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	0004      	movs	r4, r0
 8004bc0:	0008      	movs	r0, r1
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4d05      	ldr	r5, [pc, #20]	; (8004be0 <_lseek_r+0x24>)
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f7fb fd5a 	bl	8000684 <_lseek>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d103      	bne.n	8004bdc <_lseek_r+0x20>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d000      	beq.n	8004bdc <_lseek_r+0x20>
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	bd70      	pop	{r4, r5, r6, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	200006cc 	.word	0x200006cc

08004be4 <__swhatbuf_r>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	000e      	movs	r6, r1
 8004be8:	001d      	movs	r5, r3
 8004bea:	230e      	movs	r3, #14
 8004bec:	5ec9      	ldrsh	r1, [r1, r3]
 8004bee:	0014      	movs	r4, r2
 8004bf0:	b096      	sub	sp, #88	; 0x58
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	da07      	bge.n	8004c06 <__swhatbuf_r+0x22>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	89b3      	ldrh	r3, [r6, #12]
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	d411      	bmi.n	8004c24 <__swhatbuf_r+0x40>
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	e00f      	b.n	8004c26 <__swhatbuf_r+0x42>
 8004c06:	466a      	mov	r2, sp
 8004c08:	f000 f8b0 	bl	8004d6c <_fstat_r>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	dbf2      	blt.n	8004bf6 <__swhatbuf_r+0x12>
 8004c10:	23f0      	movs	r3, #240	; 0xf0
 8004c12:	9901      	ldr	r1, [sp, #4]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	4019      	ands	r1, r3
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <__swhatbuf_r+0x4c>)
 8004c1a:	18c9      	adds	r1, r1, r3
 8004c1c:	424b      	negs	r3, r1
 8004c1e:	4159      	adcs	r1, r3
 8004c20:	6029      	str	r1, [r5, #0]
 8004c22:	e7ed      	b.n	8004c00 <__swhatbuf_r+0x1c>
 8004c24:	2340      	movs	r3, #64	; 0x40
 8004c26:	2000      	movs	r0, #0
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	b016      	add	sp, #88	; 0x58
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	ffffe000 	.word	0xffffe000

08004c34 <__smakebuf_r>:
 8004c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c36:	2602      	movs	r6, #2
 8004c38:	898b      	ldrh	r3, [r1, #12]
 8004c3a:	0005      	movs	r5, r0
 8004c3c:	000c      	movs	r4, r1
 8004c3e:	4233      	tst	r3, r6
 8004c40:	d006      	beq.n	8004c50 <__smakebuf_r+0x1c>
 8004c42:	0023      	movs	r3, r4
 8004c44:	3347      	adds	r3, #71	; 0x47
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	6163      	str	r3, [r4, #20]
 8004c4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004c50:	466a      	mov	r2, sp
 8004c52:	ab01      	add	r3, sp, #4
 8004c54:	f7ff ffc6 	bl	8004be4 <__swhatbuf_r>
 8004c58:	9900      	ldr	r1, [sp, #0]
 8004c5a:	0007      	movs	r7, r0
 8004c5c:	0028      	movs	r0, r5
 8004c5e:	f7fe ff3b 	bl	8003ad8 <_malloc_r>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d108      	bne.n	8004c78 <__smakebuf_r+0x44>
 8004c66:	220c      	movs	r2, #12
 8004c68:	5ea3      	ldrsh	r3, [r4, r2]
 8004c6a:	059a      	lsls	r2, r3, #22
 8004c6c:	d4ef      	bmi.n	8004c4e <__smakebuf_r+0x1a>
 8004c6e:	2203      	movs	r2, #3
 8004c70:	4393      	bics	r3, r2
 8004c72:	431e      	orrs	r6, r3
 8004c74:	81a6      	strh	r6, [r4, #12]
 8004c76:	e7e4      	b.n	8004c42 <__smakebuf_r+0xe>
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <__smakebuf_r+0x84>)
 8004c7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	89a2      	ldrh	r2, [r4, #12]
 8004c80:	6020      	str	r0, [r4, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	9b00      	ldr	r3, [sp, #0]
 8004c88:	6120      	str	r0, [r4, #16]
 8004c8a:	6163      	str	r3, [r4, #20]
 8004c8c:	9b01      	ldr	r3, [sp, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <__smakebuf_r+0x7a>
 8004c92:	0028      	movs	r0, r5
 8004c94:	230e      	movs	r3, #14
 8004c96:	5ee1      	ldrsh	r1, [r4, r3]
 8004c98:	f000 f87a 	bl	8004d90 <_isatty_r>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d006      	beq.n	8004cae <__smakebuf_r+0x7a>
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	001a      	movs	r2, r3
 8004ca8:	2301      	movs	r3, #1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	89a0      	ldrh	r0, [r4, #12]
 8004cb0:	4307      	orrs	r7, r0
 8004cb2:	81a7      	strh	r7, [r4, #12]
 8004cb4:	e7cb      	b.n	8004c4e <__smakebuf_r+0x1a>
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	08003ca1 	.word	0x08003ca1

08004cbc <memchr>:
 8004cbc:	b2c9      	uxtb	r1, r1
 8004cbe:	1882      	adds	r2, r0, r2
 8004cc0:	4290      	cmp	r0, r2
 8004cc2:	d101      	bne.n	8004cc8 <memchr+0xc>
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	4770      	bx	lr
 8004cc8:	7803      	ldrb	r3, [r0, #0]
 8004cca:	428b      	cmp	r3, r1
 8004ccc:	d0fb      	beq.n	8004cc6 <memchr+0xa>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	e7f6      	b.n	8004cc0 <memchr+0x4>

08004cd2 <memmove>:
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4288      	cmp	r0, r1
 8004cd6:	d902      	bls.n	8004cde <memmove+0xc>
 8004cd8:	188b      	adds	r3, r1, r2
 8004cda:	4298      	cmp	r0, r3
 8004cdc:	d303      	bcc.n	8004ce6 <memmove+0x14>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e007      	b.n	8004cf2 <memmove+0x20>
 8004ce2:	5c8b      	ldrb	r3, [r1, r2]
 8004ce4:	5483      	strb	r3, [r0, r2]
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	d2fb      	bcs.n	8004ce2 <memmove+0x10>
 8004cea:	bd10      	pop	{r4, pc}
 8004cec:	5ccc      	ldrb	r4, [r1, r3]
 8004cee:	54c4      	strb	r4, [r0, r3]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d1fa      	bne.n	8004cec <memmove+0x1a>
 8004cf6:	e7f8      	b.n	8004cea <memmove+0x18>

08004cf8 <_realloc_r>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	0007      	movs	r7, r0
 8004cfc:	000d      	movs	r5, r1
 8004cfe:	0016      	movs	r6, r2
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d105      	bne.n	8004d10 <_realloc_r+0x18>
 8004d04:	0011      	movs	r1, r2
 8004d06:	f7fe fee7 	bl	8003ad8 <_malloc_r>
 8004d0a:	0004      	movs	r4, r0
 8004d0c:	0020      	movs	r0, r4
 8004d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d103      	bne.n	8004d1c <_realloc_r+0x24>
 8004d14:	f7fe fe96 	bl	8003a44 <_free_r>
 8004d18:	0034      	movs	r4, r6
 8004d1a:	e7f7      	b.n	8004d0c <_realloc_r+0x14>
 8004d1c:	f000 f84a 	bl	8004db4 <_malloc_usable_size_r>
 8004d20:	002c      	movs	r4, r5
 8004d22:	42b0      	cmp	r0, r6
 8004d24:	d2f2      	bcs.n	8004d0c <_realloc_r+0x14>
 8004d26:	0031      	movs	r1, r6
 8004d28:	0038      	movs	r0, r7
 8004d2a:	f7fe fed5 	bl	8003ad8 <_malloc_r>
 8004d2e:	1e04      	subs	r4, r0, #0
 8004d30:	d0ec      	beq.n	8004d0c <_realloc_r+0x14>
 8004d32:	0029      	movs	r1, r5
 8004d34:	0032      	movs	r2, r6
 8004d36:	f7fe fe73 	bl	8003a20 <memcpy>
 8004d3a:	0029      	movs	r1, r5
 8004d3c:	0038      	movs	r0, r7
 8004d3e:	f7fe fe81 	bl	8003a44 <_free_r>
 8004d42:	e7e3      	b.n	8004d0c <_realloc_r+0x14>

08004d44 <_read_r>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	0004      	movs	r4, r0
 8004d48:	0008      	movs	r0, r1
 8004d4a:	0011      	movs	r1, r2
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4d05      	ldr	r5, [pc, #20]	; (8004d68 <_read_r+0x24>)
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fb fc3c 	bl	80005d0 <_read>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d103      	bne.n	8004d64 <_read_r+0x20>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d000      	beq.n	8004d64 <_read_r+0x20>
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	200006cc 	.word	0x200006cc

08004d6c <_fstat_r>:
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	4d06      	ldr	r5, [pc, #24]	; (8004d8c <_fstat_r+0x20>)
 8004d72:	0004      	movs	r4, r0
 8004d74:	0008      	movs	r0, r1
 8004d76:	0011      	movs	r1, r2
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	f7fb fc6c 	bl	8000656 <_fstat>
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	d103      	bne.n	8004d8a <_fstat_r+0x1e>
 8004d82:	682b      	ldr	r3, [r5, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d000      	beq.n	8004d8a <_fstat_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	200006cc 	.word	0x200006cc

08004d90 <_isatty_r>:
 8004d90:	2300      	movs	r3, #0
 8004d92:	b570      	push	{r4, r5, r6, lr}
 8004d94:	4d06      	ldr	r5, [pc, #24]	; (8004db0 <_isatty_r+0x20>)
 8004d96:	0004      	movs	r4, r0
 8004d98:	0008      	movs	r0, r1
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	f7fb fc69 	bl	8000672 <_isatty>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d103      	bne.n	8004dac <_isatty_r+0x1c>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d000      	beq.n	8004dac <_isatty_r+0x1c>
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	200006cc 	.word	0x200006cc

08004db4 <_malloc_usable_size_r>:
 8004db4:	1f0b      	subs	r3, r1, #4
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	1f18      	subs	r0, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	da01      	bge.n	8004dc2 <_malloc_usable_size_r+0xe>
 8004dbe:	580b      	ldr	r3, [r1, r0]
 8004dc0:	18c0      	adds	r0, r0, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
