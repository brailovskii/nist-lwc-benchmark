
lwc_nist_benchmark_stm32f051r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b18  08004b18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b18  08004b18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000070  08004b90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08004b90  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f893  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002708  00000000  00000000  0002f92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00032038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00032dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a74  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbd0  00000000  00000000  000484fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078163  00000000  00000000  000580cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d022f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003990  00000000  00000000  000d0284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004560 	.word	0x08004560

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004560 	.word	0x08004560

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800024e:	6959      	ldr	r1, [r3, #20]
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4013      	ands	r3, r2
 8000260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000262:	68fb      	ldr	r3, [r7, #12]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b510      	push	{r4, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 fa47 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f80f 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f891 	bl	80003a0 <MX_GPIO_Init>
  MX_TIM6_Init();
 800027e:	f000 f849 	bl	8000314 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f871 	bl	8000368 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000286:	f002 fdbb 	bl	8002e00 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <main+0x24>)
 800028c:	f000 fa9e 	bl	80007cc <HAL_Delay>
 8000290:	e7f9      	b.n	8000286 <main+0x16>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	000f4240 	.word	0x000f4240

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	221c      	movs	r2, #28
 800029e:	2100      	movs	r1, #0
 80002a0:	a80b      	add	r0, sp, #44	; 0x2c
 80002a2:	f002 ffbc 	bl	800321e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2210      	movs	r2, #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	4668      	mov	r0, sp
 80002ac:	f002 ffb7 	bl	800321e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	2214      	movs	r2, #20
 80002b2:	2100      	movs	r1, #0
 80002b4:	a805      	add	r0, sp, #20
 80002b6:	f002 ffb2 	bl	800321e <memset>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2202      	movs	r2, #2
 80002bc:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	2010      	movs	r0, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	9212      	str	r2, [sp, #72]	; 0x48
 80002c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80002c4:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2601      	movs	r6, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	0312      	lsls	r2, r2, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	9214      	str	r2, [sp, #80]	; 0x50
 80002d4:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f000 fce9 	bl	8000cb0 <HAL_RCC_OscConfig>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d116      	bne.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	2302      	movs	r3, #2
 80002e4:	2207      	movs	r2, #7
 80002e6:	2400      	movs	r4, #0
 80002e8:	2500      	movs	r5, #0
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ea:	4668      	mov	r0, sp
 80002ec:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	9200      	str	r2, [sp, #0]
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	9402      	str	r4, [sp, #8]
 80002f4:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	f000 fff5 	bl	80012e4 <HAL_RCC_ClockConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d108      	bne.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000300:	9605      	str	r6, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000302:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	f001 f940 	bl	8001588 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	2800      	cmp	r0, #0
 800030a:	d101      	bne.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
}
 800030c:	b016      	add	sp, #88	; 0x58
 800030e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8000310:	f000 f84c 	bl	80003ac <Error_Handler>

08000314 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000314:	b510      	push	{r4, lr}
 8000316:	b082      	sub	sp, #8

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	2208      	movs	r2, #8
 800031a:	2100      	movs	r1, #0
 800031c:	4668      	mov	r0, sp
 800031e:	f002 ff7e 	bl	800321e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
 8000322:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 8000324:	4c0d      	ldr	r4, [pc, #52]	; (800035c <MX_TIM6_Init+0x48>)
 8000326:	490e      	ldr	r1, [pc, #56]	; (8000360 <MX_TIM6_Init+0x4c>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <MX_TIM6_Init+0x50>)
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800032a:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 0;
 800032c:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032e:	60a3      	str	r3, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000330:	61a3      	str	r3, [r4, #24]
  htim6.Instance = TIM6;
 8000332:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = 65535;
 8000334:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000336:	f001 fa05 	bl	8001744 <HAL_TIM_Base_Init>
 800033a:	2800      	cmp	r0, #0
 800033c:	d10b      	bne.n	8000356 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000342:	4669      	mov	r1, sp
 8000344:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800034a:	f001 fc81 	bl	8001c50 <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	2800      	cmp	r0, #0
 8000350:	d101      	bne.n	8000356 <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000352:	b002      	add	sp, #8
 8000354:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000356:	f000 f829 	bl	80003ac <Error_Handler>
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	2000062c 	.word	0x2000062c
 8000360:	40001000 	.word	0x40001000
 8000364:	0000ffff 	.word	0x0000ffff

08000368 <MX_USART1_UART_Init>:

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000368:	22e1      	movs	r2, #225	; 0xe1
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	210c      	movs	r1, #12
{
 800036e:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_USART1_UART_Init+0x30>)
 8000372:	4c0a      	ldr	r4, [pc, #40]	; (800039c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8000374:	0252      	lsls	r2, r2, #9
 8000376:	6042      	str	r2, [r0, #4]
  huart1.Instance = USART1;
 8000378:	6004      	str	r4, [r0, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037a:	6141      	str	r1, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000380:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000386:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000388:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038a:	f001 fccf 	bl	8001d2c <HAL_UART_Init>
 800038e:	2800      	cmp	r0, #0
 8000390:	d100      	bne.n	8000394 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000392:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000394:	f000 f80a 	bl	80003ac <Error_Handler>
 8000398:	200005a8 	.word	0x200005a8
 800039c:	40013800 	.word	0x40013800

080003a0 <MX_GPIO_Init>:
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a0:	2080      	movs	r0, #128	; 0x80
{
 80003a2:	b510      	push	{r4, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a4:	0280      	lsls	r0, r0, #10
 80003a6:	f7ff ff4d 	bl	8000244 <LL_AHB1_GRP1_EnableClock>

}
 80003aa:	bd10      	pop	{r4, pc}

080003ac <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
 80003ae:	e7fe      	b.n	80003ae <Error_Handler+0x2>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x44>)
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <HAL_MspInit+0x44>)
 80003bc:	2101      	movs	r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	619a      	str	r2, [r3, #24]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x44>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	2201      	movs	r2, #1
 80003c8:	4013      	ands	r3, r2
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_MspInit+0x44>)
 80003d0:	69da      	ldr	r2, [r3, #28]
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <HAL_MspInit+0x44>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0549      	lsls	r1, r1, #21
 80003d8:	430a      	orrs	r2, r1
 80003da:	61da      	str	r2, [r3, #28]
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <HAL_MspInit+0x44>)
 80003de:	69da      	ldr	r2, [r3, #28]
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	055b      	lsls	r3, r3, #21
 80003e4:	4013      	ands	r3, r2
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <HAL_TIM_Base_MspInit+0x44>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d113      	bne.n	8000432 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <HAL_TIM_Base_MspInit+0x48>)
 800040c:	69da      	ldr	r2, [r3, #28]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_TIM_Base_MspInit+0x48>)
 8000410:	2110      	movs	r1, #16
 8000412:	430a      	orrs	r2, r1
 8000414:	61da      	str	r2, [r3, #28]
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_TIM_Base_MspInit+0x48>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	2210      	movs	r2, #16
 800041c:	4013      	ands	r3, r2
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2011      	movs	r0, #17
 8000428:	f000 faa0 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800042c:	2011      	movs	r0, #17
 800042e:	f000 fab2 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b004      	add	sp, #16
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40001000 	.word	0x40001000
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b08b      	sub	sp, #44	; 0x2c
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	2414      	movs	r4, #20
 800044e:	193b      	adds	r3, r7, r4
 8000450:	0018      	movs	r0, r3
 8000452:	2314      	movs	r3, #20
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f002 fee1 	bl	800321e <memset>
  if(huart->Instance==USART1)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d133      	bne.n	80004ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000466:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <HAL_UART_MspInit+0x98>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	01c9      	lsls	r1, r1, #7
 8000470:	430a      	orrs	r2, r1
 8000472:	619a      	str	r2, [r3, #24]
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	01db      	lsls	r3, r3, #7
 800047c:	4013      	ands	r3, r2
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b16      	ldr	r3, [pc, #88]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	22c0      	movs	r2, #192	; 0xc0
 80004a2:	00d2      	lsls	r2, r2, #3
 80004a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	0021      	movs	r1, r4
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2202      	movs	r2, #2
 80004ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2203      	movs	r2, #3
 80004b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2201      	movs	r2, #1
 80004be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	187a      	adds	r2, r7, r1
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fa81 	bl	80009d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b00b      	add	sp, #44	; 0x2c
 80004d4:	bd90      	pop	{r4, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40013800 	.word	0x40013800
 80004dc:	40021000 	.word	0x40021000

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f946 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <TIM6_DAC_IRQHandler+0x14>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f9e4 	bl	80018e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	2000062c 	.word	0x2000062c

08000528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	return 1;
 800052c:	2301      	movs	r3, #1
}
 800052e:	0018      	movs	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <_kill>:

int _kill(int pid, int sig)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800053e:	f002 fe2b 	bl	8003198 <__errno>
 8000542:	0003      	movs	r3, r0
 8000544:	2216      	movs	r2, #22
 8000546:	601a      	str	r2, [r3, #0]
	return -1;
 8000548:	2301      	movs	r3, #1
 800054a:	425b      	negs	r3, r3
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}

08000554 <_exit>:

void _exit (int status)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800055c:	2301      	movs	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	0011      	movs	r1, r2
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff ffe5 	bl	8000534 <_kill>
	while (1) {}		/* Make sure we hang here */
 800056a:	e7fe      	b.n	800056a <_exit+0x16>

0800056c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	e00a      	b.n	8000594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800057e:	e000      	b.n	8000582 <_read+0x16>
 8000580:	bf00      	nop
 8000582:	0001      	movs	r1, r0
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	60ba      	str	r2, [r7, #8]
 800058a:	b2ca      	uxtb	r2, r1
 800058c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbf0      	blt.n	800057e <_read+0x12>
	}

return len;
 800059c:	687b      	ldr	r3, [r7, #4]
}
 800059e:	0018      	movs	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b006      	add	sp, #24
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e009      	b.n	80005cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	60ba      	str	r2, [r7, #8]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	0018      	movs	r0, r3
 80005c2:	e000      	b.n	80005c6 <_write+0x20>
 80005c4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbf1      	blt.n	80005b8 <_write+0x12>
	}
	return len;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b006      	add	sp, #24
 80005dc:	bd80      	pop	{r7, pc}

080005de <_close>:

int _close(int file)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	return -1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	425b      	negs	r3, r3
}
 80005ea:	0018      	movs	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0192      	lsls	r2, r2, #6
 8000602:	605a      	str	r2, [r3, #4]
	return 0;
 8000604:	2300      	movs	r3, #0
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}

0800060e <_isatty>:

int _isatty(int file)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}

08000620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	0018      	movs	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	b004      	add	sp, #16
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f002 fd96 	bl	8003198 <__errno>
 800066c:	0003      	movs	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	2301      	movs	r3, #1
 8000674:	425b      	negs	r3, r3
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	18d2      	adds	r2, r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b006      	add	sp, #24
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20002000 	.word	0x20002000
 8000698:	00000400 	.word	0x00000400
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	200006c0 	.word	0x200006c0

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490e      	ldr	r1, [pc, #56]	; (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0b      	ldr	r4, [pc, #44]	; (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006da:	f7ff ffe3 	bl	80006a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006de:	f002 fd71 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fdc5 	bl	8000270 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006f4:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 80006f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006fc:	200006bc 	.word	0x200006bc

08000700 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_COMP_IRQHandler>
	...

08000704 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <HAL_Init+0x24>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_Init+0x24>)
 800070e:	2110      	movs	r1, #16
 8000710:	430a      	orrs	r2, r1
 8000712:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f809 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071a:	f7ff fe49 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_InitTick+0x5c>)
 8000736:	681c      	ldr	r4, [r3, #0]
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_InitTick+0x60>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	0019      	movs	r1, r3
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	0098      	lsls	r0, r3, #2
 8000742:	f7ff fcf3 	bl	800012c <__udivsi3>
 8000746:	0003      	movs	r3, r0
 8000748:	0019      	movs	r1, r3
 800074a:	0020      	movs	r0, r4
 800074c:	f7ff fcee 	bl	800012c <__udivsi3>
 8000750:	0003      	movs	r3, r0
 8000752:	0018      	movs	r0, r3
 8000754:	f000 f92f 	bl	80009b6 <HAL_SYSTICK_Config>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e00f      	b.n	8000780 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d80b      	bhi.n	800077e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	2301      	movs	r3, #1
 800076a:	425b      	negs	r3, r3
 800076c:	2200      	movs	r2, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f8fc 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_InitTick+0x64>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b003      	add	sp, #12
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	20000000 	.word	0x20000000
 800078c:	20000008 	.word	0x20000008
 8000790:	20000004 	.word	0x20000004

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	001a      	movs	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	18d2      	adds	r2, r2, r3
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000674 	.word	0x20000674

080007b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000674 	.word	0x20000674

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff fff0 	bl	80007b8 <HAL_GetTick>
 80007d8:	0003      	movs	r3, r0
 80007da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_Delay+0x44>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	001a      	movs	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	f7ff ffe0 	bl	80007b8 <HAL_GetTick>
 80007f8:	0002      	movs	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000008 	.word	0x20000008

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b7f      	cmp	r3, #127	; 0x7f
 8000826:	d809      	bhi.n	800083c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	231f      	movs	r3, #31
 8000830:	401a      	ands	r2, r3
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_EnableIRQ+0x30>)
 8000834:	2101      	movs	r1, #1
 8000836:	4091      	lsls	r1, r2
 8000838:	000a      	movs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b7f      	cmp	r3, #127	; 0x7f
 800085c:	d828      	bhi.n	80008b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <__NVIC_SetPriority+0xd4>)
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	33c0      	adds	r3, #192	; 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	589b      	ldr	r3, [r3, r2]
 800086e:	1dfa      	adds	r2, r7, #7
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	2203      	movs	r2, #3
 8000876:	400a      	ands	r2, r1
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	401a      	ands	r2, r3
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	2303      	movs	r3, #3
 8000896:	4003      	ands	r3, r0
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <__NVIC_SetPriority+0xd4>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	33c0      	adds	r3, #192	; 0xc0
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ae:	e031      	b.n	8000914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0019      	movs	r1, r3
 80008b8:	230f      	movs	r3, #15
 80008ba:	400b      	ands	r3, r1
 80008bc:	3b08      	subs	r3, #8
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3306      	adds	r3, #6
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	3304      	adds	r3, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	001c      	movs	r4, r3
 8000900:	230f      	movs	r3, #15
 8000902:	4023      	ands	r3, r4
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	430a      	orrs	r2, r1
 800090a:	3306      	adds	r3, #6
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	18c3      	adds	r3, r0, r3
 8000910:	3304      	adds	r3, #4
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	1e5a      	subs	r2, r3, #1
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	045b      	lsls	r3, r3, #17
 8000934:	429a      	cmp	r2, r3
 8000936:	d301      	bcc.n	800093c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000938:	2301      	movs	r3, #1
 800093a:	e010      	b.n	800095e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <SysTick_Config+0x44>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	3a01      	subs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	2103      	movs	r1, #3
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff ff7c 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SysTick_Config+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x44>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	0002      	movs	r2, r0
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff ff33 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b002      	add	sp, #8
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffaf 	bl	8000924 <SysTick_Config>
 80009c6:	0003      	movs	r3, r0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e14f      	b.n	8000c80 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d100      	bne.n	80009f8 <HAL_GPIO_Init+0x28>
 80009f6:	e140      	b.n	8000c7a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d00b      	beq.n	8000a18 <HAL_GPIO_Init+0x48>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d007      	beq.n	8000a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	2b11      	cmp	r3, #17
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b12      	cmp	r3, #18
 8000a16:	d130      	bne.n	8000a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	409a      	lsls	r2, r3
 8000a26:	0013      	movs	r3, r2
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	0013      	movs	r3, r2
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4e:	2201      	movs	r2, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	43da      	mvns	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	2201      	movs	r2, #1
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0xea>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d123      	bne.n	8000b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	58d3      	ldr	r3, [r2, r3]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2207      	movs	r2, #7
 8000acc:	4013      	ands	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691a      	ldr	r2, [r3, #16]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2107      	movs	r1, #7
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	08da      	lsrs	r2, r3, #3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3208      	adds	r2, #8
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	6939      	ldr	r1, [r7, #16]
 8000b00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	43da      	mvns	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	401a      	ands	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	055b      	lsls	r3, r3, #21
 8000b3e:	4013      	ands	r3, r2
 8000b40:	d100      	bne.n	8000b44 <HAL_GPIO_Init+0x174>
 8000b42:	e09a      	b.n	8000c7a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	4b54      	ldr	r3, [pc, #336]	; (8000c98 <HAL_GPIO_Init+0x2c8>)
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <HAL_GPIO_Init+0x2c8>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	619a      	str	r2, [r3, #24]
 8000b50:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <HAL_GPIO_Init+0x2c8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	2201      	movs	r2, #1
 8000b56:	4013      	ands	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5c:	4a4f      	ldr	r2, [pc, #316]	; (8000c9c <HAL_GPIO_Init+0x2cc>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	589b      	ldr	r3, [r3, r2]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	4013      	ands	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	409a      	lsls	r2, r3
 8000b76:	0013      	movs	r3, r2
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	2390      	movs	r3, #144	; 0x90
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d013      	beq.n	8000bb2 <HAL_GPIO_Init+0x1e2>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a44      	ldr	r2, [pc, #272]	; (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d00d      	beq.n	8000bae <HAL_GPIO_Init+0x1de>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a43      	ldr	r2, [pc, #268]	; (8000ca4 <HAL_GPIO_Init+0x2d4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d007      	beq.n	8000baa <HAL_GPIO_Init+0x1da>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a42      	ldr	r2, [pc, #264]	; (8000ca8 <HAL_GPIO_Init+0x2d8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_GPIO_Init+0x1d6>
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	e004      	b.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e002      	b.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	2103      	movs	r1, #3
 8000bb8:	400a      	ands	r2, r1
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	4093      	lsls	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc4:	4935      	ldr	r1, [pc, #212]	; (8000c9c <HAL_GPIO_Init+0x2cc>)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	025b      	lsls	r3, r3, #9
 8000bea:	4013      	ands	r3, r2
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43da      	mvns	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	029b      	lsls	r3, r3, #10
 8000c14:	4013      	ands	r3, r2
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	035b      	lsls	r3, r3, #13
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	039b      	lsls	r3, r3, #14
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_GPIO_Init+0x2dc>)
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	1e13      	subs	r3, r2, #0
 8000c8a:	d000      	beq.n	8000c8e <HAL_GPIO_Init+0x2be>
 8000c8c:	e6a8      	b.n	80009e0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b006      	add	sp, #24
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e301      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d100      	bne.n	8000cce <HAL_RCC_OscConfig+0x1e>
 8000ccc:	e08d      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cce:	4bc3      	ldr	r3, [pc, #780]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d00e      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cda:	4bc0      	ldr	r3, [pc, #768]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	220c      	movs	r2, #12
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d116      	bne.n	8000d14 <HAL_RCC_OscConfig+0x64>
 8000ce6:	4bbd      	ldr	r3, [pc, #756]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	401a      	ands	r2, r3
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d10d      	bne.n	8000d14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf8:	4bb8      	ldr	r3, [pc, #736]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	4013      	ands	r3, r2
 8000d02:	d100      	bne.n	8000d06 <HAL_RCC_OscConfig+0x56>
 8000d04:	e070      	b.n	8000de8 <HAL_RCC_OscConfig+0x138>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d000      	beq.n	8000d10 <HAL_RCC_OscConfig+0x60>
 8000d0e:	e06b      	b.n	8000de8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e2d8      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d107      	bne.n	8000d2c <HAL_RCC_OscConfig+0x7c>
 8000d1c:	4baf      	ldr	r3, [pc, #700]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4bae      	ldr	r3, [pc, #696]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0249      	lsls	r1, r1, #9
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02f      	b.n	8000d8c <HAL_RCC_OscConfig+0xdc>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10c      	bne.n	8000d4e <HAL_RCC_OscConfig+0x9e>
 8000d34:	4ba9      	ldr	r3, [pc, #676]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4ba8      	ldr	r3, [pc, #672]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	49a9      	ldr	r1, [pc, #676]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	4ba6      	ldr	r3, [pc, #664]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4ba5      	ldr	r3, [pc, #660]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d46:	49a7      	ldr	r1, [pc, #668]	; (8000fe4 <HAL_RCC_OscConfig+0x334>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e01e      	b.n	8000d8c <HAL_RCC_OscConfig+0xdc>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d10e      	bne.n	8000d74 <HAL_RCC_OscConfig+0xc4>
 8000d56:	4ba1      	ldr	r3, [pc, #644]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4ba0      	ldr	r3, [pc, #640]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	02c9      	lsls	r1, r1, #11
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	4b9d      	ldr	r3, [pc, #628]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b9c      	ldr	r3, [pc, #624]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0249      	lsls	r1, r1, #9
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xdc>
 8000d74:	4b99      	ldr	r3, [pc, #612]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b98      	ldr	r3, [pc, #608]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	4999      	ldr	r1, [pc, #612]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4b96      	ldr	r3, [pc, #600]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b95      	ldr	r3, [pc, #596]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d86:	4997      	ldr	r1, [pc, #604]	; (8000fe4 <HAL_RCC_OscConfig+0x334>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d014      	beq.n	8000dbe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fd10 	bl	80007b8 <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fd0b 	bl	80007b8 <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	; 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e28a      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	4b8a      	ldr	r3, [pc, #552]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0xee>
 8000dbc:	e015      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fcfb 	bl	80007b8 <HAL_GetTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fcf6 	bl	80007b8 <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e275      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x118>
 8000de6:	e000      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	d100      	bne.n	8000df6 <HAL_RCC_OscConfig+0x146>
 8000df4:	e069      	b.n	8000eca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df6:	4b79      	ldr	r3, [pc, #484]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d00b      	beq.n	8000e18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e00:	4b76      	ldr	r3, [pc, #472]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	220c      	movs	r2, #12
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d11c      	bne.n	8000e46 <HAL_RCC_OscConfig+0x196>
 8000e0c:	4b73      	ldr	r3, [pc, #460]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	025b      	lsls	r3, r3, #9
 8000e14:	4013      	ands	r3, r2
 8000e16:	d116      	bne.n	8000e46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e18:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x17e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e24b      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	22f8      	movs	r2, #248	; 0xf8
 8000e34:	4393      	bics	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	00da      	lsls	r2, r3, #3
 8000e3e:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e44:	e041      	b.n	8000eca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d024      	beq.n	8000e98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4e:	4b63      	ldr	r3, [pc, #396]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b62      	ldr	r3, [pc, #392]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fcad 	bl	80007b8 <HAL_GetTick>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fca8 	bl	80007b8 <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e227      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d0f1      	beq.n	8000e64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	22f8      	movs	r2, #248	; 0xf8
 8000e86:	4393      	bics	r3, r2
 8000e88:	0019      	movs	r1, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e018      	b.n	8000eca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e98:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	438a      	bics	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fc88 	bl	80007b8 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fc83 	bl	80007b8 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e202      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d1f1      	bne.n	8000eae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d036      	beq.n	8000f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d019      	beq.n	8000f10 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fc66 	bl	80007b8 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc61 	bl	80007b8 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1e0      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d0f1      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x242>
 8000f0e:	e018      	b.n	8000f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	438a      	bics	r2, r1
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fc4c 	bl	80007b8 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f26:	f7ff fc47 	bl	80007b8 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e1c6      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d1f1      	bne.n	8000f26 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2204      	movs	r2, #4
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d100      	bne.n	8000f4e <HAL_RCC_OscConfig+0x29e>
 8000f4c:	e0b4      	b.n	80010b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f4e:	201f      	movs	r0, #31
 8000f50:	183b      	adds	r3, r7, r0
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f58:	69da      	ldr	r2, [r3, #28]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	055b      	lsls	r3, r3, #21
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d110      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0549      	lsls	r1, r1, #21
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	61da      	str	r2, [r3, #28]
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f72:	69da      	ldr	r2, [r3, #28]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	055b      	lsls	r3, r3, #21
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f7e:	183b      	adds	r3, r7, r0
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d11a      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0049      	lsls	r1, r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fc0b 	bl	80007b8 <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa8:	f7ff fc06 	bl	80007b8 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e185      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10e      	bne.n	8000fec <HAL_RCC_OscConfig+0x33c>
 8000fce:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	6a1a      	ldr	r2, [r3, #32]
 8000fd2:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	e035      	b.n	8001048 <HAL_RCC_OscConfig+0x398>
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	fffeffff 	.word	0xfffeffff
 8000fe4:	fffbffff 	.word	0xfffbffff
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x35e>
 8000ff4:	4bb6      	ldr	r3, [pc, #728]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8000ff6:	6a1a      	ldr	r2, [r3, #32]
 8000ff8:	4bb5      	ldr	r3, [pc, #724]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	621a      	str	r2, [r3, #32]
 8001000:	4bb3      	ldr	r3, [pc, #716]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	4bb2      	ldr	r3, [pc, #712]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001006:	2104      	movs	r1, #4
 8001008:	438a      	bics	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
 800100c:	e01c      	b.n	8001048 <HAL_RCC_OscConfig+0x398>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x380>
 8001016:	4bae      	ldr	r3, [pc, #696]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001018:	6a1a      	ldr	r2, [r3, #32]
 800101a:	4bad      	ldr	r3, [pc, #692]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800101c:	2104      	movs	r1, #4
 800101e:	430a      	orrs	r2, r1
 8001020:	621a      	str	r2, [r3, #32]
 8001022:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	4baa      	ldr	r3, [pc, #680]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0x398>
 8001030:	4ba7      	ldr	r3, [pc, #668]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	4ba6      	ldr	r3, [pc, #664]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001036:	2101      	movs	r1, #1
 8001038:	438a      	bics	r2, r1
 800103a:	621a      	str	r2, [r3, #32]
 800103c:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	4ba3      	ldr	r3, [pc, #652]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001042:	2104      	movs	r1, #4
 8001044:	438a      	bics	r2, r1
 8001046:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d014      	beq.n	800107a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fbb2 	bl	80007b8 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fbad 	bl	80007b8 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a9b      	ldr	r2, [pc, #620]	; (80012d4 <HAL_RCC_OscConfig+0x624>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e12b      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106e:	4b98      	ldr	r3, [pc, #608]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x3aa>
 8001078:	e013      	b.n	80010a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fb9d 	bl	80007b8 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001082:	e009      	b.n	8001098 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001084:	f7ff fb98 	bl	80007b8 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a91      	ldr	r2, [pc, #580]	; (80012d4 <HAL_RCC_OscConfig+0x624>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e116      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001098:	4b8d      	ldr	r3, [pc, #564]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	2202      	movs	r2, #2
 800109e:	4013      	ands	r3, r2
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010a2:	231f      	movs	r3, #31
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ac:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	4b87      	ldr	r3, [pc, #540]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010b2:	4989      	ldr	r1, [pc, #548]	; (80012d8 <HAL_RCC_OscConfig+0x628>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	4013      	ands	r3, r2
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d12a      	bne.n	8001120 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010ca:	4b81      	ldr	r3, [pc, #516]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010d0:	2104      	movs	r1, #4
 80010d2:	430a      	orrs	r2, r1
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010d6:	4b7e      	ldr	r3, [pc, #504]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010da:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010dc:	2101      	movs	r1, #1
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fb69 	bl	80007b8 <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ec:	f7ff fb64 	bl	80007b8 <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e0e3      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	d0f1      	beq.n	80010ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001108:	4b71      	ldr	r3, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	22f8      	movs	r2, #248	; 0xf8
 800110e:	4393      	bics	r3, r2
 8001110:	0019      	movs	r1, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	00da      	lsls	r2, r3, #3
 8001118:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800111a:	430a      	orrs	r2, r1
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
 800111e:	e034      	b.n	800118a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	3305      	adds	r3, #5
 8001126:	d111      	bne.n	800114c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001128:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800112a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800112e:	2104      	movs	r1, #4
 8001130:	438a      	bics	r2, r1
 8001132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001134:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001138:	22f8      	movs	r2, #248	; 0xf8
 800113a:	4393      	bics	r3, r2
 800113c:	0019      	movs	r1, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	00da      	lsls	r2, r3, #3
 8001144:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001146:	430a      	orrs	r2, r1
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
 800114a:	e01e      	b.n	800118a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800114e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001150:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001152:	2104      	movs	r1, #4
 8001154:	430a      	orrs	r2, r1
 8001156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001158:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800115a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115c:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800115e:	2101      	movs	r1, #1
 8001160:	438a      	bics	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fb28 	bl	80007b8 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800116e:	f7ff fb23 	bl	80007b8 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0a2      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d1f1      	bne.n	800116e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <HAL_RCC_OscConfig+0x4e4>
 8001192:	e097      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	220c      	movs	r2, #12
 800119a:	4013      	ands	r3, r2
 800119c:	2b08      	cmp	r3, #8
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x4f2>
 80011a0:	e06b      	b.n	800127a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d14c      	bne.n	8001244 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011b0:	494a      	ldr	r1, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x62c>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff faff 	bl	80007b8 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c0:	f7ff fafa 	bl	80007b8 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e079      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	049b      	lsls	r3, r3, #18
 80011da:	4013      	ands	r3, r2
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011de:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	220f      	movs	r2, #15
 80011e4:	4393      	bics	r3, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a3a      	ldr	r2, [pc, #232]	; (80012e0 <HAL_RCC_OscConfig+0x630>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	0019      	movs	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	431a      	orrs	r2, r3
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001208:	430a      	orrs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0449      	lsls	r1, r1, #17
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff facd 	bl	80007b8 <HAL_GetTick>
 800121e:	0003      	movs	r3, r0
 8001220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff fac8 	bl	80007b8 <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e047      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	049b      	lsls	r3, r3, #18
 800123e:	4013      	ands	r3, r2
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x574>
 8001242:	e03f      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800124a:	4924      	ldr	r1, [pc, #144]	; (80012dc <HAL_RCC_OscConfig+0x62c>)
 800124c:	400a      	ands	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fab2 	bl	80007b8 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff faad 	bl	80007b8 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e02c      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	049b      	lsls	r3, r3, #18
 8001274:	4013      	ands	r3, r2
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x5aa>
 8001278:	e024      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e01f      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	429a      	cmp	r2, r3
 80012a0:	d10e      	bne.n	80012c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	220f      	movs	r2, #15
 80012a6:	401a      	ands	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	23f0      	movs	r3, #240	; 0xf0
 80012b4:	039b      	lsls	r3, r3, #14
 80012b6:	401a      	ands	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b008      	add	sp, #32
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40021000 	.word	0x40021000
 80012d4:	00001388 	.word	0x00001388
 80012d8:	efffffff 	.word	0xefffffff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	ffc2ffff 	.word	0xffc2ffff

080012e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0b3      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d911      	bls.n	800132a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	4393      	bics	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e09a      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d015      	beq.n	8001360 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2204      	movs	r2, #4
 800133a:	4013      	ands	r3, r2
 800133c:	d006      	beq.n	800134c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800133e:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001344:	21e0      	movs	r1, #224	; 0xe0
 8001346:	00c9      	lsls	r1, r1, #3
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	22f0      	movs	r2, #240	; 0xf0
 8001352:	4393      	bics	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	d040      	beq.n	80013ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d114      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e06e      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	049b      	lsls	r3, r3, #18
 8001392:	4013      	ands	r3, r2
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e062      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e05b      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4393      	bics	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff f9fc 	bl	80007b8 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c4:	e009      	b.n	80013da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c6:	f7ff f9f7 	bl	80007b8 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_RCC_ClockConfig+0x18c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e042      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	220c      	movs	r2, #12
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1ec      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d211      	bcs.n	800141e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4393      	bics	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e020      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	d009      	beq.n	800143c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_RCC_ClockConfig+0x190>)
 800142e:	4013      	ands	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800143c:	f000 f820 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 8001440:	0001      	movs	r1, r0
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	220f      	movs	r2, #15
 800144a:	4013      	ands	r3, r2
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_RCC_ClockConfig+0x194>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	000a      	movs	r2, r1
 8001452:	40da      	lsrs	r2, r3
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_ClockConfig+0x198>)
 8001456:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff f967 	bl	800072c <HAL_InitTick>
  
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40022000 	.word	0x40022000
 800146c:	40021000 	.word	0x40021000
 8001470:	00001388 	.word	0x00001388
 8001474:	fffff8ff 	.word	0xfffff8ff
 8001478:	08004598 	.word	0x08004598
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08f      	sub	sp, #60	; 0x3c
 8001484:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001486:	2314      	movs	r3, #20
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800148e:	c313      	stmia	r3!, {r0, r1, r4}
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4a29      	ldr	r2, [pc, #164]	; (800153c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800149a:	c313      	stmia	r3!, {r0, r1, r4}
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	220c      	movs	r2, #12
 80014be:	4013      	ands	r3, r2
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d002      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x4a>
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d003      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x50>
 80014c8:	e02d      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ce:	e02d      	b.n	800152c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	220f      	movs	r2, #15
 80014d6:	4013      	ands	r3, r2
 80014d8:	2214      	movs	r2, #20
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	220f      	movs	r2, #15
 80014e6:	4013      	ands	r3, r2
 80014e8:	1d3a      	adds	r2, r7, #4
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	4013      	ands	r3, r2
 80014f6:	d009      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014fc:	f7fe fe16 	bl	800012c <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	001a      	movs	r2, r3
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	4353      	muls	r3, r2
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
 800150a:	e009      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800150c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150e:	000a      	movs	r2, r1
 8001510:	0152      	lsls	r2, r2, #5
 8001512:	1a52      	subs	r2, r2, r1
 8001514:	0193      	lsls	r3, r2, #6
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	185b      	adds	r3, r3, r1
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001524:	e002      	b.n	800152c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800152a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b00f      	add	sp, #60	; 0x3c
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	08004578 	.word	0x08004578
 800153c:	08004588 	.word	0x08004588
 8001540:	40021000 	.word	0x40021000
 8001544:	007a1200 	.word	0x007a1200

08001548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_RCC_GetHCLKFreq+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	20000000 	.word	0x20000000

0800155c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001560:	f7ff fff2 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001564:	0001      	movs	r1, r0
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	40d9      	lsrs	r1, r3
 8001576:	000b      	movs	r3, r1
}    
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40021000 	.word	0x40021000
 8001584:	080045a8 	.word	0x080045a8

08001588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	4013      	ands	r3, r2
 80015a2:	d100      	bne.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80015a4:	e08e      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2017      	movs	r0, #23
 80015a8:	183b      	adds	r3, r7, r0
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	055b      	lsls	r3, r3, #21
 80015b6:	4013      	ands	r3, r2
 80015b8:	d110      	bne.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	4b5b      	ldr	r3, [pc, #364]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	183b      	adds	r3, r7, r0
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b54      	ldr	r3, [pc, #336]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d11a      	bne.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e8:	4b51      	ldr	r3, [pc, #324]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b50      	ldr	r3, [pc, #320]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0049      	lsls	r1, r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff f8df 	bl	80007b8 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	e008      	b.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001600:	f7ff f8da 	bl	80007b8 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e087      	b.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4013      	ands	r3, r2
 800161c:	d0f0      	beq.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4013      	ands	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d034      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	23c0      	movs	r3, #192	; 0xc0
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4013      	ands	r3, r2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d02c      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0249      	lsls	r1, r1, #9
 8001654:	430a      	orrs	r2, r1
 8001656:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165a:	6a1a      	ldr	r2, [r3, #32]
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165e:	4936      	ldr	r1, [pc, #216]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001660:	400a      	ands	r2, r1
 8001662:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff f8a1 	bl	80007b8 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167a:	e009      	b.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff f89c 	bl	80007b8 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	4a2d      	ldr	r2, [pc, #180]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e048      	b.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d0f0      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a25      	ldr	r2, [pc, #148]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ae:	2317      	movs	r3, #23
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016be:	4920      	ldr	r1, [pc, #128]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d009      	beq.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	2203      	movs	r2, #3
 80016d4:	4393      	bics	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	4013      	ands	r3, r2
 80016ea:	d009      	beq.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	2210      	movs	r2, #16
 80016f2:	4393      	bics	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4013      	ands	r3, r2
 800170a:	d009      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	4393      	bics	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800171c:	430a      	orrs	r2, r1
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b006      	add	sp, #24
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
 8001734:	fffffcff 	.word	0xfffffcff
 8001738:	fffeffff 	.word	0xfffeffff
 800173c:	00001388 	.word	0x00001388
 8001740:	efffffff 	.word	0xefffffff

08001744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e042      	b.n	80017dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	223d      	movs	r2, #61	; 0x3d
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	223c      	movs	r2, #60	; 0x3c
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f7fe fe43 	bl	80003f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223d      	movs	r2, #61	; 0x3d
 8001776:	2102      	movs	r1, #2
 8001778:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	0019      	movs	r1, r3
 8001784:	0010      	movs	r0, r2
 8001786:	f000 f9e3 	bl	8001b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2246      	movs	r2, #70	; 0x46
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	223e      	movs	r2, #62	; 0x3e
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	223f      	movs	r2, #63	; 0x3f
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2242      	movs	r2, #66	; 0x42
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2243      	movs	r2, #67	; 0x43
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2244      	movs	r2, #68	; 0x44
 80017c6:	2101      	movs	r1, #1
 80017c8:	5499      	strb	r1, [r3, r2]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2245      	movs	r2, #69	; 0x45
 80017ce:	2101      	movs	r1, #1
 80017d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	223d      	movs	r2, #61	; 0x3d
 80017d6:	2101      	movs	r1, #1
 80017d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	223d      	movs	r2, #61	; 0x3d
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d001      	beq.n	80017fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e03b      	b.n	8001874 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	223d      	movs	r2, #61	; 0x3d
 8001800:	2102      	movs	r1, #2
 8001802:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2101      	movs	r1, #1
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_TIM_Base_Start_IT+0x98>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00f      	beq.n	800183e <HAL_TIM_Base_Start_IT+0x5a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	05db      	lsls	r3, r3, #23
 8001826:	429a      	cmp	r2, r3
 8001828:	d009      	beq.n	800183e <HAL_TIM_Base_Start_IT+0x5a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_TIM_Base_Start_IT+0x9c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_TIM_Base_Start_IT+0x5a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_TIM_Base_Start_IT+0xa0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d111      	bne.n	8001862 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2207      	movs	r2, #7
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b06      	cmp	r3, #6
 800184e:	d010      	beq.n	8001872 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001860:	e007      	b.n	8001872 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40000400 	.word	0x40000400
 8001884:	40014000 	.word	0x40014000

08001888 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_TIM_Base_Stop_IT+0x54>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	d10d      	bne.n	80018c8 <HAL_TIM_Base_Stop_IT+0x40>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_TIM_Base_Stop_IT+0x58>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	d107      	bne.n	80018c8 <HAL_TIM_Base_Stop_IT+0x40>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2101      	movs	r1, #1
 80018c4:	438a      	bics	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	223d      	movs	r2, #61	; 0x3d
 80018cc:	2101      	movs	r1, #1
 80018ce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	00001111 	.word	0x00001111
 80018e0:	00000444 	.word	0x00000444

080018e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d124      	bne.n	8001944 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	2b02      	cmp	r3, #2
 8001906:	d11d      	bne.n	8001944 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2203      	movs	r2, #3
 800190e:	4252      	negs	r2, r2
 8001910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2203      	movs	r2, #3
 8001920:	4013      	ands	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f000 f8fa 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 800192c:	e007      	b.n	800193e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f000 f8ed 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f000 f8f9 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2204      	movs	r2, #4
 800194c:	4013      	ands	r3, r2
 800194e:	2b04      	cmp	r3, #4
 8001950:	d125      	bne.n	800199e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2204      	movs	r2, #4
 800195a:	4013      	ands	r3, r2
 800195c:	2b04      	cmp	r3, #4
 800195e:	d11e      	bne.n	800199e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2205      	movs	r2, #5
 8001966:	4252      	negs	r2, r2
 8001968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2202      	movs	r2, #2
 800196e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d004      	beq.n	8001988 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0018      	movs	r0, r3
 8001982:	f000 f8cd 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001986:	e007      	b.n	8001998 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 f8c0 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	0018      	movs	r0, r3
 8001994:	f000 f8cc 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2208      	movs	r2, #8
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d124      	bne.n	80019f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2208      	movs	r2, #8
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11d      	bne.n	80019f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2209      	movs	r2, #9
 80019c0:	4252      	negs	r2, r2
 80019c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2204      	movs	r2, #4
 80019c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	2203      	movs	r2, #3
 80019d2:	4013      	ands	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 f8a1 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 80019de:	e007      	b.n	80019f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f894 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 f8a0 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2210      	movs	r2, #16
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d125      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d11e      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2211      	movs	r2, #17
 8001a18:	4252      	negs	r2, r2
 8001a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2208      	movs	r2, #8
 8001a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f000 f874 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001a38:	e007      	b.n	8001a4a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 f867 	bl	8001b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f873 	bl	8001b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10f      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	4252      	negs	r2, r2
 8001a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f001 fabb 	bl	8002ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d10f      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b80      	cmp	r3, #128	; 0x80
 8001a98:	d108      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2281      	movs	r2, #129	; 0x81
 8001aa0:	4252      	negs	r2, r2
 8001aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f938 	bl	8001d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b40      	cmp	r3, #64	; 0x40
 8001ab8:	d10f      	bne.n	8001ada <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d108      	bne.n	8001ada <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2241      	movs	r2, #65	; 0x41
 8001ace:	4252      	negs	r2, r2
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 f833 	bl	8001b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d10f      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d108      	bne.n	8001b08 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2221      	movs	r2, #33	; 0x21
 8001afc:	4252      	negs	r2, r2
 8001afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 f902 	bl	8001d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <TIM_Base_SetConfig+0xe4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d008      	beq.n	8001b7a <TIM_Base_SetConfig+0x2a>
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	05db      	lsls	r3, r3, #23
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d003      	beq.n	8001b7a <TIM_Base_SetConfig+0x2a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <TIM_Base_SetConfig+0xe8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d108      	bne.n	8001b8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2270      	movs	r2, #112	; 0x70
 8001b7e:	4393      	bics	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <TIM_Base_SetConfig+0xe4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d018      	beq.n	8001bc6 <TIM_Base_SetConfig+0x76>
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	05db      	lsls	r3, r3, #23
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d013      	beq.n	8001bc6 <TIM_Base_SetConfig+0x76>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <TIM_Base_SetConfig+0xe8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00f      	beq.n	8001bc6 <TIM_Base_SetConfig+0x76>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <TIM_Base_SetConfig+0xec>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00b      	beq.n	8001bc6 <TIM_Base_SetConfig+0x76>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <TIM_Base_SetConfig+0xf0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <TIM_Base_SetConfig+0x76>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <TIM_Base_SetConfig+0xf4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d003      	beq.n	8001bc6 <TIM_Base_SetConfig+0x76>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <TIM_Base_SetConfig+0xf8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d108      	bne.n	8001bd8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <TIM_Base_SetConfig+0xfc>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	4393      	bics	r3, r2
 8001bde:	001a      	movs	r2, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <TIM_Base_SetConfig+0xe4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00b      	beq.n	8001c1e <TIM_Base_SetConfig+0xce>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <TIM_Base_SetConfig+0xf0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <TIM_Base_SetConfig+0xce>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <TIM_Base_SetConfig+0xf4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <TIM_Base_SetConfig+0xce>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <TIM_Base_SetConfig+0xf8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d103      	bne.n	8001c26 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	615a      	str	r2, [r3, #20]
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b004      	add	sp, #16
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40012c00 	.word	0x40012c00
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40002000 	.word	0x40002000
 8001c40:	40014000 	.word	0x40014000
 8001c44:	40014400 	.word	0x40014400
 8001c48:	40014800 	.word	0x40014800
 8001c4c:	fffffcff 	.word	0xfffffcff

08001c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	223c      	movs	r2, #60	; 0x3c
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e047      	b.n	8001cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	223c      	movs	r2, #60	; 0x3c
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	223d      	movs	r2, #61	; 0x3d
 8001c74:	2102      	movs	r1, #2
 8001c76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2270      	movs	r2, #112	; 0x70
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00f      	beq.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	05db      	lsls	r3, r3, #23
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10c      	bne.n	8001ce6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	223c      	movs	r2, #60	; 0x3c
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b004      	add	sp, #16
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40014000 	.word	0x40014000

08001d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e044      	b.n	8001dc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d107      	bne.n	8001d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2274      	movs	r2, #116	; 0x74
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe fb77 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f8da 	bl	8001f28 <UART_SetConfig>
 8001d74:	0003      	movs	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e024      	b.n	8001dc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fa0d 	bl	80021a8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <HAL_UART_Init+0xa4>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	212a      	movs	r1, #42	; 0x2a
 8001daa:	438a      	bics	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 faa5 	bl	8002310 <UART_CheckIdleState>
 8001dc6:	0003      	movs	r3, r0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	ffffb7ff 	.word	0xffffb7ff

08001dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d000      	beq.n	8001dee <HAL_UART_Transmit+0x1a>
 8001dec:	e096      	b.n	8001f1c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_UART_Transmit+0x28>
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e08e      	b.n	8001f1e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d109      	bne.n	8001e20 <HAL_UART_Transmit+0x4c>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e07e      	b.n	8001f1e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2274      	movs	r2, #116	; 0x74
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Transmit+0x5a>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e077      	b.n	8001f1e <HAL_UART_Transmit+0x14a>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2274      	movs	r2, #116	; 0x74
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2221      	movs	r2, #33	; 0x21
 8001e42:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e44:	f7fe fcb8 	bl	80007b8 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1dba      	adds	r2, r7, #6
 8001e50:	2150      	movs	r1, #80	; 0x50
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1dba      	adds	r2, r7, #6
 8001e5a:	2152      	movs	r1, #82	; 0x52
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	015b      	lsls	r3, r3, #5
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d108      	bne.n	8001e7e <HAL_UART_Transmit+0xaa>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d104      	bne.n	8001e7e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e003      	b.n	8001e86 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2274      	movs	r2, #116	; 0x74
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001e8e:	e02d      	b.n	8001eec <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	0013      	movs	r3, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	f000 fa7f 	bl	80023a0 <UART_WaitOnFlagUntilTimeout>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e039      	b.n	8001f1e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	05d2      	lsls	r2, r2, #23
 8001eba:	0dd2      	lsrs	r2, r2, #23
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e008      	b.n	8001eda <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2252      	movs	r2, #82	; 0x52
 8001ede:	5a9b      	ldrh	r3, [r3, r2]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2252      	movs	r2, #82	; 0x52
 8001eea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2252      	movs	r2, #82	; 0x52
 8001ef0:	5a9b      	ldrh	r3, [r3, r2]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1cb      	bne.n	8001e90 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	0013      	movs	r3, r2
 8001f02:	2200      	movs	r2, #0
 8001f04:	2140      	movs	r1, #64	; 0x40
 8001f06:	f000 fa4b 	bl	80023a0 <UART_WaitOnFlagUntilTimeout>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e005      	b.n	8001f1e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b008      	add	sp, #32
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f30:	231e      	movs	r3, #30
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8d      	ldr	r2, [pc, #564]	; (800218c <UART_SetConfig+0x264>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a88      	ldr	r2, [pc, #544]	; (8002190 <UART_SetConfig+0x268>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a7f      	ldr	r2, [pc, #508]	; (8002194 <UART_SetConfig+0x26c>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a7b      	ldr	r2, [pc, #492]	; (8002198 <UART_SetConfig+0x270>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d127      	bne.n	8001ffe <UART_SetConfig+0xd6>
 8001fae:	4b7b      	ldr	r3, [pc, #492]	; (800219c <UART_SetConfig+0x274>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d00d      	beq.n	8001fd6 <UART_SetConfig+0xae>
 8001fba:	d81b      	bhi.n	8001ff4 <UART_SetConfig+0xcc>
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d014      	beq.n	8001fea <UART_SetConfig+0xc2>
 8001fc0:	d818      	bhi.n	8001ff4 <UART_SetConfig+0xcc>
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <UART_SetConfig+0xa4>
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00a      	beq.n	8001fe0 <UART_SetConfig+0xb8>
 8001fca:	e013      	b.n	8001ff4 <UART_SetConfig+0xcc>
 8001fcc:	231f      	movs	r3, #31
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e021      	b.n	800201a <UART_SetConfig+0xf2>
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2202      	movs	r2, #2
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e01c      	b.n	800201a <UART_SetConfig+0xf2>
 8001fe0:	231f      	movs	r3, #31
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e017      	b.n	800201a <UART_SetConfig+0xf2>
 8001fea:	231f      	movs	r3, #31
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2208      	movs	r2, #8
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e012      	b.n	800201a <UART_SetConfig+0xf2>
 8001ff4:	231f      	movs	r3, #31
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e00d      	b.n	800201a <UART_SetConfig+0xf2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <UART_SetConfig+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d104      	bne.n	8002012 <UART_SetConfig+0xea>
 8002008:	231f      	movs	r3, #31
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e003      	b.n	800201a <UART_SetConfig+0xf2>
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2210      	movs	r2, #16
 8002018:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	429a      	cmp	r2, r3
 8002024:	d15d      	bne.n	80020e2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d015      	beq.n	800205c <UART_SetConfig+0x134>
 8002030:	dc18      	bgt.n	8002064 <UART_SetConfig+0x13c>
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00d      	beq.n	8002052 <UART_SetConfig+0x12a>
 8002036:	dc15      	bgt.n	8002064 <UART_SetConfig+0x13c>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <UART_SetConfig+0x11a>
 800203c:	2b02      	cmp	r3, #2
 800203e:	d005      	beq.n	800204c <UART_SetConfig+0x124>
 8002040:	e010      	b.n	8002064 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002042:	f7ff fa8b 	bl	800155c <HAL_RCC_GetPCLK1Freq>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
        break;
 800204a:	e012      	b.n	8002072 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <UART_SetConfig+0x27c>)
 800204e:	61bb      	str	r3, [r7, #24]
        break;
 8002050:	e00f      	b.n	8002072 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002052:	f7ff fa15 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]
        break;
 800205a:	e00a      	b.n	8002072 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	61bb      	str	r3, [r7, #24]
        break;
 8002062:	e006      	b.n	8002072 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002068:	231e      	movs	r3, #30
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
        break;
 8002070:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d100      	bne.n	800207a <UART_SetConfig+0x152>
 8002078:	e07b      	b.n	8002172 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	005a      	lsls	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	18d2      	adds	r2, r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f7fe f84d 	bl	800012c <__udivsi3>
 8002092:	0003      	movs	r3, r0
 8002094:	b29b      	uxth	r3, r3
 8002096:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	d91c      	bls.n	80020d8 <UART_SetConfig+0x1b0>
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d217      	bcs.n	80020d8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	200e      	movs	r0, #14
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	210f      	movs	r1, #15
 80020b2:	438a      	bics	r2, r1
 80020b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2207      	movs	r2, #7
 80020be:	4013      	ands	r3, r2
 80020c0:	b299      	uxth	r1, r3
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	183a      	adds	r2, r7, r0
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	183a      	adds	r2, r7, r0
 80020d2:	8812      	ldrh	r2, [r2, #0]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	e04c      	b.n	8002172 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80020d8:	231e      	movs	r3, #30
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e047      	b.n	8002172 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d015      	beq.n	8002118 <UART_SetConfig+0x1f0>
 80020ec:	dc18      	bgt.n	8002120 <UART_SetConfig+0x1f8>
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d00d      	beq.n	800210e <UART_SetConfig+0x1e6>
 80020f2:	dc15      	bgt.n	8002120 <UART_SetConfig+0x1f8>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <UART_SetConfig+0x1d6>
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d005      	beq.n	8002108 <UART_SetConfig+0x1e0>
 80020fc:	e010      	b.n	8002120 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020fe:	f7ff fa2d 	bl	800155c <HAL_RCC_GetPCLK1Freq>
 8002102:	0003      	movs	r3, r0
 8002104:	61bb      	str	r3, [r7, #24]
        break;
 8002106:	e012      	b.n	800212e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <UART_SetConfig+0x27c>)
 800210a:	61bb      	str	r3, [r7, #24]
        break;
 800210c:	e00f      	b.n	800212e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800210e:	f7ff f9b7 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 8002112:	0003      	movs	r3, r0
 8002114:	61bb      	str	r3, [r7, #24]
        break;
 8002116:	e00a      	b.n	800212e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	61bb      	str	r3, [r7, #24]
        break;
 800211e:	e006      	b.n	800212e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002124:	231e      	movs	r3, #30
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
        break;
 800212c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01e      	beq.n	8002172 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	085a      	lsrs	r2, r3, #1
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	18d2      	adds	r2, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0019      	movs	r1, r3
 8002144:	0010      	movs	r0, r2
 8002146:	f7fd fff1 	bl	800012c <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	b29b      	uxth	r3, r3
 800214e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d909      	bls.n	800216a <UART_SetConfig+0x242>
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	025b      	lsls	r3, r3, #9
 800215c:	429a      	cmp	r2, r3
 800215e:	d204      	bcs.n	800216a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	e003      	b.n	8002172 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800216a:	231e      	movs	r3, #30
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800217e:	231e      	movs	r3, #30
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b008      	add	sp, #32
 800218a:	bd80      	pop	{r7, pc}
 800218c:	ffff69f3 	.word	0xffff69f3
 8002190:	ffffcfff 	.word	0xffffcfff
 8002194:	fffff4ff 	.word	0xfffff4ff
 8002198:	40013800 	.word	0x40013800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40004400 	.word	0x40004400
 80021a4:	007a1200 	.word	0x007a1200

080021a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <UART_AdvFeatureConfig+0x144>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d00b      	beq.n	80021f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a43      	ldr	r2, [pc, #268]	; (80022f0 <UART_AdvFeatureConfig+0x148>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	2204      	movs	r2, #4
 80021fa:	4013      	ands	r3, r2
 80021fc:	d00b      	beq.n	8002216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <UART_AdvFeatureConfig+0x14c>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2208      	movs	r2, #8
 800221c:	4013      	ands	r3, r2
 800221e:	d00b      	beq.n	8002238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <UART_AdvFeatureConfig+0x150>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2210      	movs	r2, #16
 800223e:	4013      	ands	r3, r2
 8002240:	d00b      	beq.n	800225a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <UART_AdvFeatureConfig+0x154>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	2220      	movs	r2, #32
 8002260:	4013      	ands	r3, r2
 8002262:	d00b      	beq.n	800227c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4a25      	ldr	r2, [pc, #148]	; (8002300 <UART_AdvFeatureConfig+0x158>)
 800226c:	4013      	ands	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	4013      	ands	r3, r2
 8002284:	d01d      	beq.n	80022c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <UART_AdvFeatureConfig+0x15c>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	035b      	lsls	r3, r3, #13
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d10b      	bne.n	80022c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a15      	ldr	r2, [pc, #84]	; (8002308 <UART_AdvFeatureConfig+0x160>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	4013      	ands	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a0e      	ldr	r2, [pc, #56]	; (800230c <UART_AdvFeatureConfig+0x164>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	fffdffff 	.word	0xfffdffff
 80022f0:	fffeffff 	.word	0xfffeffff
 80022f4:	fffbffff 	.word	0xfffbffff
 80022f8:	ffff7fff 	.word	0xffff7fff
 80022fc:	ffffefff 	.word	0xffffefff
 8002300:	ffffdfff 	.word	0xffffdfff
 8002304:	ffefffff 	.word	0xffefffff
 8002308:	ff9fffff 	.word	0xff9fffff
 800230c:	fff7ffff 	.word	0xfff7ffff

08002310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	2100      	movs	r1, #0
 800231e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002320:	f7fe fa4a 	bl	80007b8 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2208      	movs	r2, #8
 8002330:	4013      	ands	r3, r2
 8002332:	2b08      	cmp	r3, #8
 8002334:	d10c      	bne.n	8002350 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	0391      	lsls	r1, r2, #14
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <UART_CheckIdleState+0x8c>)
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	f000 f82c 	bl	80023a0 <UART_WaitOnFlagUntilTimeout>
 8002348:	1e03      	subs	r3, r0, #0
 800234a:	d001      	beq.n	8002350 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e021      	b.n	8002394 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2204      	movs	r2, #4
 8002358:	4013      	ands	r3, r2
 800235a:	2b04      	cmp	r3, #4
 800235c:	d10c      	bne.n	8002378 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	03d1      	lsls	r1, r2, #15
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <UART_CheckIdleState+0x8c>)
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	f000 f818 	bl	80023a0 <UART_WaitOnFlagUntilTimeout>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e00d      	b.n	8002394 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2274      	movs	r2, #116	; 0x74
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}
 800239c:	01ffffff 	.word	0x01ffffff

080023a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b0:	e05e      	b.n	8002470 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3301      	adds	r3, #1
 80023b6:	d05b      	beq.n	8002470 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b8:	f7fe f9fe 	bl	80007b8 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d302      	bcc.n	80023ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11b      	bne.n	8002406 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	492f      	ldr	r1, [pc, #188]	; (8002498 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2101      	movs	r1, #1
 80023ea:	438a      	bics	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2274      	movs	r2, #116	; 0x74
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e044      	b.n	8002490 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2204      	movs	r2, #4
 800240e:	4013      	ands	r3, r2
 8002410:	d02e      	beq.n	8002470 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	401a      	ands	r2, r3
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	429a      	cmp	r2, r3
 8002424:	d124      	bne.n	8002470 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4917      	ldr	r1, [pc, #92]	; (8002498 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	2120      	movs	r1, #32
 8002462:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2274      	movs	r2, #116	; 0x74
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e00f      	b.n	8002490 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	425a      	negs	r2, r3
 8002480:	4153      	adcs	r3, r2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	001a      	movs	r2, r3
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d091      	beq.n	80023b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b004      	add	sp, #16
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fffffe5f 	.word	0xfffffe5f

0800249c <Xoodoo_StaticInitialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_StaticInitialize( void )
{
}
 800249c:	4770      	bx	lr
 800249e:	46c0      	nop			; (mov r8, r8)

080024a0 <Xoodoo_Initialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_Initialize(void *state)
{
 80024a0:	b510      	push	{r4, lr}
    memset(state, 0, NLANES*sizeof(tXoodooLane));
 80024a2:	2230      	movs	r2, #48	; 0x30
 80024a4:	2100      	movs	r1, #0
 80024a6:	f000 feba 	bl	800321e <memset>
}
 80024aa:	bd10      	pop	{r4, pc}

080024ac <Xoodoo_AddByte>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddByte(void *state, unsigned char byte, unsigned int offset)
{
 80024ac:	b510      	push	{r4, lr}
    assert(offset < NLANES*sizeof(tXoodooLane));
 80024ae:	2a2f      	cmp	r2, #47	; 0x2f
 80024b0:	d803      	bhi.n	80024ba <Xoodoo_AddByte+0xe>
    ((unsigned char *)state)[offset] ^= byte;
 80024b2:	5c83      	ldrb	r3, [r0, r2]
 80024b4:	4059      	eors	r1, r3
 80024b6:	5481      	strb	r1, [r0, r2]
}
 80024b8:	bd10      	pop	{r4, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 80024ba:	2127      	movs	r1, #39	; 0x27
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <Xoodoo_AddByte+0x1c>)
 80024be:	4a03      	ldr	r2, [pc, #12]	; (80024cc <Xoodoo_AddByte+0x20>)
 80024c0:	4803      	ldr	r0, [pc, #12]	; (80024d0 <Xoodoo_AddByte+0x24>)
 80024c2:	f000 fe4b 	bl	800315c <__assert_func>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	080045b0 	.word	0x080045b0
 80024cc:	080046c0 	.word	0x080046c0
 80024d0:	080045d4 	.word	0x080045d4

080024d4 <Xoodoo_AddBytes>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	46c6      	mov	lr, r8
 80024d8:	b500      	push	{lr}
    unsigned int i;

    assert(offset < NLANES*sizeof(tXoodooLane));
 80024da:	2a2f      	cmp	r2, #47	; 0x2f
 80024dc:	d853      	bhi.n	8002586 <Xoodoo_AddBytes+0xb2>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80024de:	18d4      	adds	r4, r2, r3
 80024e0:	2c30      	cmp	r4, #48	; 0x30
 80024e2:	d856      	bhi.n	8002592 <Xoodoo_AddBytes+0xbe>
    for(i=0; i<length; i++)
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d042      	beq.n	800256e <Xoodoo_AddBytes+0x9a>
 80024e8:	2505      	movs	r5, #5
 80024ea:	2400      	movs	r4, #0
 80024ec:	46a8      	mov	r8, r5
 80024ee:	1d0d      	adds	r5, r1, #4
 80024f0:	46ac      	mov	ip, r5
 80024f2:	0025      	movs	r5, r4
 80024f4:	1d17      	adds	r7, r2, #4
 80024f6:	19c7      	adds	r7, r0, r7
 80024f8:	42b9      	cmp	r1, r7
 80024fa:	4165      	adcs	r5, r4
 80024fc:	002f      	movs	r7, r5
 80024fe:	4665      	mov	r5, ip
 8002500:	1886      	adds	r6, r0, r2
 8002502:	42ae      	cmp	r6, r5
 8002504:	4164      	adcs	r4, r4
 8002506:	1e5d      	subs	r5, r3, #1
 8002508:	45a8      	cmp	r8, r5
 800250a:	41ad      	sbcs	r5, r5
 800250c:	433c      	orrs	r4, r7
 800250e:	426d      	negs	r5, r5
 8002510:	4225      	tst	r5, r4
 8002512:	d02f      	beq.n	8002574 <Xoodoo_AddBytes+0xa0>
 8002514:	000c      	movs	r4, r1
 8002516:	4334      	orrs	r4, r6
 8002518:	07a4      	lsls	r4, r4, #30
 800251a:	d12b      	bne.n	8002574 <Xoodoo_AddBytes+0xa0>
 800251c:	089d      	lsrs	r5, r3, #2
 800251e:	00ad      	lsls	r5, r5, #2
 8002520:	2400      	movs	r4, #0
 8002522:	46ac      	mov	ip, r5
        ((unsigned char *)state)[offset+i] ^= data[i];
 8002524:	5935      	ldr	r5, [r6, r4]
 8002526:	590f      	ldr	r7, [r1, r4]
 8002528:	407d      	eors	r5, r7
 800252a:	5135      	str	r5, [r6, r4]
 800252c:	3404      	adds	r4, #4
 800252e:	4564      	cmp	r4, ip
 8002530:	d1f8      	bne.n	8002524 <Xoodoo_AddBytes+0x50>
 8002532:	2503      	movs	r5, #3
 8002534:	001c      	movs	r4, r3
 8002536:	43ac      	bics	r4, r5
 8002538:	421d      	tst	r5, r3
 800253a:	d018      	beq.n	800256e <Xoodoo_AddBytes+0x9a>
 800253c:	1915      	adds	r5, r2, r4
 800253e:	46a8      	mov	r8, r5
 8002540:	5d45      	ldrb	r5, [r0, r5]
    for(i=0; i<length; i++)
 8002542:	1c66      	adds	r6, r4, #1
        ((unsigned char *)state)[offset+i] ^= data[i];
 8002544:	46ac      	mov	ip, r5
 8002546:	4667      	mov	r7, ip
 8002548:	5d0d      	ldrb	r5, [r1, r4]
 800254a:	407d      	eors	r5, r7
 800254c:	4647      	mov	r7, r8
 800254e:	55c5      	strb	r5, [r0, r7]
    for(i=0; i<length; i++)
 8002550:	42b3      	cmp	r3, r6
 8002552:	d90c      	bls.n	800256e <Xoodoo_AddBytes+0x9a>
        ((unsigned char *)state)[offset+i] ^= data[i];
 8002554:	1997      	adds	r7, r2, r6
 8002556:	5d8d      	ldrb	r5, [r1, r6]
 8002558:	5dc6      	ldrb	r6, [r0, r7]
    for(i=0; i<length; i++)
 800255a:	3402      	adds	r4, #2
        ((unsigned char *)state)[offset+i] ^= data[i];
 800255c:	4075      	eors	r5, r6
 800255e:	55c5      	strb	r5, [r0, r7]
    for(i=0; i<length; i++)
 8002560:	42a3      	cmp	r3, r4
 8002562:	d904      	bls.n	800256e <Xoodoo_AddBytes+0x9a>
        ((unsigned char *)state)[offset+i] ^= data[i];
 8002564:	1912      	adds	r2, r2, r4
 8002566:	5d0b      	ldrb	r3, [r1, r4]
 8002568:	5c81      	ldrb	r1, [r0, r2]
 800256a:	404b      	eors	r3, r1
 800256c:	5483      	strb	r3, [r0, r2]
}
 800256e:	bc80      	pop	{r7}
 8002570:	46b8      	mov	r8, r7
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i=0; i<length; i++)
 8002574:	2200      	movs	r2, #0
        ((unsigned char *)state)[offset+i] ^= data[i];
 8002576:	5cb0      	ldrb	r0, [r6, r2]
 8002578:	5c8c      	ldrb	r4, [r1, r2]
 800257a:	4060      	eors	r0, r4
 800257c:	54b0      	strb	r0, [r6, r2]
    for(i=0; i<length; i++)
 800257e:	3201      	adds	r2, #1
 8002580:	4293      	cmp	r3, r2
 8002582:	d1f8      	bne.n	8002576 <Xoodoo_AddBytes+0xa2>
 8002584:	e7f3      	b.n	800256e <Xoodoo_AddBytes+0x9a>
    assert(offset < NLANES*sizeof(tXoodooLane));
 8002586:	2131      	movs	r1, #49	; 0x31
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <Xoodoo_AddBytes+0xcc>)
 800258a:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <Xoodoo_AddBytes+0xd0>)
 800258c:	4806      	ldr	r0, [pc, #24]	; (80025a8 <Xoodoo_AddBytes+0xd4>)
 800258e:	f000 fde5 	bl	800315c <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8002592:	2132      	movs	r1, #50	; 0x32
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <Xoodoo_AddBytes+0xd8>)
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <Xoodoo_AddBytes+0xd0>)
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <Xoodoo_AddBytes+0xd4>)
 800259a:	f000 fddf 	bl	800315c <__assert_func>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	080045b0 	.word	0x080045b0
 80025a4:	080046d0 	.word	0x080046d0
 80025a8:	080045d4 	.word	0x080045d4
 80025ac:	08004664 	.word	0x08004664

080025b0 <Xoodoo_ExtractBytes>:
}

/* ---------------------------------------------------------------- */

void Xoodoo_ExtractBytes(const void *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 80025b0:	b520      	push	{r5, lr}
 80025b2:	0005      	movs	r5, r0
 80025b4:	0008      	movs	r0, r1
 80025b6:	0011      	movs	r1, r2
 80025b8:	001a      	movs	r2, r3
    assert(offset < NLANES*sizeof(tXoodooLane));
 80025ba:	292f      	cmp	r1, #47	; 0x2f
 80025bc:	d806      	bhi.n	80025cc <Xoodoo_ExtractBytes+0x1c>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80025be:	18cb      	adds	r3, r1, r3
 80025c0:	2b30      	cmp	r3, #48	; 0x30
 80025c2:	d809      	bhi.n	80025d8 <Xoodoo_ExtractBytes+0x28>
    memcpy(data, (unsigned char*)state+offset, length);
 80025c4:	1869      	adds	r1, r5, r1
 80025c6:	f000 fe21 	bl	800320c <memcpy>
}
 80025ca:	bd20      	pop	{r5, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 80025cc:	214c      	movs	r1, #76	; 0x4c
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <Xoodoo_ExtractBytes+0x34>)
 80025d0:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <Xoodoo_ExtractBytes+0x38>)
 80025d2:	4806      	ldr	r0, [pc, #24]	; (80025ec <Xoodoo_ExtractBytes+0x3c>)
 80025d4:	f000 fdc2 	bl	800315c <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80025d8:	214d      	movs	r1, #77	; 0x4d
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <Xoodoo_ExtractBytes+0x40>)
 80025dc:	4a02      	ldr	r2, [pc, #8]	; (80025e8 <Xoodoo_ExtractBytes+0x38>)
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <Xoodoo_ExtractBytes+0x3c>)
 80025e0:	f000 fdbc 	bl	800315c <__assert_func>
 80025e4:	080045b0 	.word	0x080045b0
 80025e8:	080046e0 	.word	0x080046e0
 80025ec:	080045d4 	.word	0x080045d4
 80025f0:	08004664 	.word	0x08004664

080025f4 <fromBytesToWords>:
static void fromBytesToWords(tXoodooLane *stateAsWords, const unsigned char *state)
{
    unsigned int i, j;

    for(i=0; i<NLANES; i++) {
        stateAsWords[i] = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	6003      	str	r3, [r0, #0]
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
        for(j=0; j<sizeof(tXoodooLane); j++)
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80025fa:	780c      	ldrb	r4, [r1, #0]
{
 80025fc:	4657      	mov	r7, sl
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80025fe:	6004      	str	r4, [r0, #0]
 8002600:	784a      	ldrb	r2, [r1, #1]
{
 8002602:	464e      	mov	r6, r9
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002604:	0212      	lsls	r2, r2, #8
 8002606:	4314      	orrs	r4, r2
 8002608:	6004      	str	r4, [r0, #0]
 800260a:	788a      	ldrb	r2, [r1, #2]
{
 800260c:	4645      	mov	r5, r8
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800260e:	0412      	lsls	r2, r2, #16
 8002610:	4322      	orrs	r2, r4
 8002612:	6002      	str	r2, [r0, #0]
 8002614:	78cc      	ldrb	r4, [r1, #3]
        stateAsWords[i] = 0;
 8002616:	6043      	str	r3, [r0, #4]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002618:	0624      	lsls	r4, r4, #24
 800261a:	4322      	orrs	r2, r4
 800261c:	6002      	str	r2, [r0, #0]
 800261e:	790c      	ldrb	r4, [r1, #4]
{
 8002620:	46de      	mov	lr, fp
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002622:	6044      	str	r4, [r0, #4]
 8002624:	794a      	ldrb	r2, [r1, #5]
{
 8002626:	b5e0      	push	{r5, r6, r7, lr}
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002628:	0212      	lsls	r2, r2, #8
 800262a:	4314      	orrs	r4, r2
 800262c:	6044      	str	r4, [r0, #4]
 800262e:	798a      	ldrb	r2, [r1, #6]
        stateAsWords[i] = 0;
 8002630:	469b      	mov	fp, r3
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002632:	0412      	lsls	r2, r2, #16
 8002634:	4322      	orrs	r2, r4
 8002636:	6042      	str	r2, [r0, #4]
 8002638:	79cc      	ldrb	r4, [r1, #7]
        stateAsWords[i] = 0;
 800263a:	6083      	str	r3, [r0, #8]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800263c:	0624      	lsls	r4, r4, #24
 800263e:	4322      	orrs	r2, r4
 8002640:	6042      	str	r2, [r0, #4]
 8002642:	7a0c      	ldrb	r4, [r1, #8]
 8002644:	2520      	movs	r5, #32
 8002646:	6084      	str	r4, [r0, #8]
 8002648:	7a4a      	ldrb	r2, [r1, #9]
 800264a:	2621      	movs	r6, #33	; 0x21
 800264c:	0212      	lsls	r2, r2, #8
 800264e:	4314      	orrs	r4, r2
 8002650:	6084      	str	r4, [r0, #8]
 8002652:	7a8a      	ldrb	r2, [r1, #10]
 8002654:	0412      	lsls	r2, r2, #16
 8002656:	4322      	orrs	r2, r4
 8002658:	6082      	str	r2, [r0, #8]
 800265a:	7acc      	ldrb	r4, [r1, #11]
        stateAsWords[i] = 0;
 800265c:	60c3      	str	r3, [r0, #12]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800265e:	0624      	lsls	r4, r4, #24
 8002660:	4322      	orrs	r2, r4
 8002662:	6082      	str	r2, [r0, #8]
 8002664:	7b0c      	ldrb	r4, [r1, #12]
 8002666:	60c4      	str	r4, [r0, #12]
 8002668:	7b4a      	ldrb	r2, [r1, #13]
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	4314      	orrs	r4, r2
 800266e:	60c4      	str	r4, [r0, #12]
 8002670:	7b8a      	ldrb	r2, [r1, #14]
 8002672:	0412      	lsls	r2, r2, #16
 8002674:	4322      	orrs	r2, r4
 8002676:	60c2      	str	r2, [r0, #12]
 8002678:	7bcc      	ldrb	r4, [r1, #15]
        stateAsWords[i] = 0;
 800267a:	6103      	str	r3, [r0, #16]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800267c:	0624      	lsls	r4, r4, #24
 800267e:	4322      	orrs	r2, r4
 8002680:	60c2      	str	r2, [r0, #12]
 8002682:	7c0c      	ldrb	r4, [r1, #16]
 8002684:	6104      	str	r4, [r0, #16]
 8002686:	7c4a      	ldrb	r2, [r1, #17]
 8002688:	0212      	lsls	r2, r2, #8
 800268a:	4314      	orrs	r4, r2
 800268c:	6104      	str	r4, [r0, #16]
 800268e:	7c8a      	ldrb	r2, [r1, #18]
 8002690:	0412      	lsls	r2, r2, #16
 8002692:	4322      	orrs	r2, r4
 8002694:	6102      	str	r2, [r0, #16]
 8002696:	7ccc      	ldrb	r4, [r1, #19]
        stateAsWords[i] = 0;
 8002698:	6143      	str	r3, [r0, #20]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800269a:	0624      	lsls	r4, r4, #24
 800269c:	4322      	orrs	r2, r4
 800269e:	6102      	str	r2, [r0, #16]
 80026a0:	7d0c      	ldrb	r4, [r1, #20]
 80026a2:	6144      	str	r4, [r0, #20]
 80026a4:	7d4a      	ldrb	r2, [r1, #21]
 80026a6:	0212      	lsls	r2, r2, #8
 80026a8:	4314      	orrs	r4, r2
 80026aa:	6144      	str	r4, [r0, #20]
 80026ac:	7d8a      	ldrb	r2, [r1, #22]
 80026ae:	0412      	lsls	r2, r2, #16
 80026b0:	4322      	orrs	r2, r4
 80026b2:	6142      	str	r2, [r0, #20]
 80026b4:	7dcc      	ldrb	r4, [r1, #23]
        stateAsWords[i] = 0;
 80026b6:	6183      	str	r3, [r0, #24]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80026b8:	0624      	lsls	r4, r4, #24
 80026ba:	4322      	orrs	r2, r4
 80026bc:	6142      	str	r2, [r0, #20]
 80026be:	7e0c      	ldrb	r4, [r1, #24]
 80026c0:	6184      	str	r4, [r0, #24]
 80026c2:	7e4a      	ldrb	r2, [r1, #25]
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	4314      	orrs	r4, r2
 80026c8:	6184      	str	r4, [r0, #24]
 80026ca:	7e8a      	ldrb	r2, [r1, #26]
 80026cc:	0412      	lsls	r2, r2, #16
 80026ce:	4322      	orrs	r2, r4
 80026d0:	6182      	str	r2, [r0, #24]
 80026d2:	7ecf      	ldrb	r7, [r1, #27]
 80026d4:	2422      	movs	r4, #34	; 0x22
 80026d6:	063f      	lsls	r7, r7, #24
 80026d8:	433a      	orrs	r2, r7
 80026da:	6182      	str	r2, [r0, #24]
 80026dc:	2223      	movs	r2, #35	; 0x23
        stateAsWords[i] = 0;
 80026de:	61c3      	str	r3, [r0, #28]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80026e0:	7f0f      	ldrb	r7, [r1, #28]
 80026e2:	4691      	mov	r9, r2
 80026e4:	61c7      	str	r7, [r0, #28]
 80026e6:	7f4a      	ldrb	r2, [r1, #29]
 80026e8:	3324      	adds	r3, #36	; 0x24
 80026ea:	0212      	lsls	r2, r2, #8
 80026ec:	4317      	orrs	r7, r2
 80026ee:	61c7      	str	r7, [r0, #28]
 80026f0:	7f8a      	ldrb	r2, [r1, #30]
 80026f2:	4698      	mov	r8, r3
 80026f4:	0412      	lsls	r2, r2, #16
 80026f6:	433a      	orrs	r2, r7
 80026f8:	61c2      	str	r2, [r0, #28]
 80026fa:	7fcb      	ldrb	r3, [r1, #31]
 80026fc:	2725      	movs	r7, #37	; 0x25
 80026fe:	469c      	mov	ip, r3
        stateAsWords[i] = 0;
 8002700:	465b      	mov	r3, fp
 8002702:	6203      	str	r3, [r0, #32]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002704:	4663      	mov	r3, ip
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	431a      	orrs	r2, r3
 800270a:	2326      	movs	r3, #38	; 0x26
 800270c:	469c      	mov	ip, r3
 800270e:	464b      	mov	r3, r9
 8002710:	61c2      	str	r2, [r0, #28]
 8002712:	5d4d      	ldrb	r5, [r1, r5]
 8002714:	6205      	str	r5, [r0, #32]
 8002716:	5d8a      	ldrb	r2, [r1, r6]
 8002718:	3606      	adds	r6, #6
 800271a:	0212      	lsls	r2, r2, #8
 800271c:	4315      	orrs	r5, r2
 800271e:	6205      	str	r5, [r0, #32]
 8002720:	5d0a      	ldrb	r2, [r1, r4]
 8002722:	3406      	adds	r4, #6
 8002724:	0412      	lsls	r2, r2, #16
 8002726:	432a      	orrs	r2, r5
 8002728:	6202      	str	r2, [r0, #32]
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	2529      	movs	r5, #41	; 0x29
 800272e:	4699      	mov	r9, r3
        stateAsWords[i] = 0;
 8002730:	465b      	mov	r3, fp
 8002732:	6243      	str	r3, [r0, #36]	; 0x24
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002734:	464b      	mov	r3, r9
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	431a      	orrs	r2, r3
 800273a:	232a      	movs	r3, #42	; 0x2a
 800273c:	4699      	mov	r9, r3
 800273e:	4643      	mov	r3, r8
 8002740:	6202      	str	r2, [r0, #32]
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	469a      	mov	sl, r3
 8002746:	232b      	movs	r3, #43	; 0x2b
 8002748:	4698      	mov	r8, r3
 800274a:	4653      	mov	r3, sl
 800274c:	6243      	str	r3, [r0, #36]	; 0x24
 800274e:	5dca      	ldrb	r2, [r1, r7]
 8002750:	4657      	mov	r7, sl
 8002752:	4663      	mov	r3, ip
 8002754:	0212      	lsls	r2, r2, #8
 8002756:	4317      	orrs	r7, r2
 8002758:	6247      	str	r7, [r0, #36]	; 0x24
 800275a:	5cca      	ldrb	r2, [r1, r3]
 800275c:	3306      	adds	r3, #6
 800275e:	469c      	mov	ip, r3
        stateAsWords[i] = 0;
 8002760:	465b      	mov	r3, fp
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002762:	0412      	lsls	r2, r2, #16
 8002764:	433a      	orrs	r2, r7
 8002766:	6242      	str	r2, [r0, #36]	; 0x24
 8002768:	5d8e      	ldrb	r6, [r1, r6]
        stateAsWords[i] = 0;
 800276a:	6283      	str	r3, [r0, #40]	; 0x28
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800276c:	0636      	lsls	r6, r6, #24
 800276e:	4332      	orrs	r2, r6
 8002770:	6242      	str	r2, [r0, #36]	; 0x24
 8002772:	5d0b      	ldrb	r3, [r1, r4]
 8002774:	272d      	movs	r7, #45	; 0x2d
 8002776:	6283      	str	r3, [r0, #40]	; 0x28
 8002778:	5d4a      	ldrb	r2, [r1, r5]
 800277a:	001d      	movs	r5, r3
 800277c:	464b      	mov	r3, r9
 800277e:	0212      	lsls	r2, r2, #8
 8002780:	4315      	orrs	r5, r2
 8002782:	6285      	str	r5, [r0, #40]	; 0x28
 8002784:	5cca      	ldrb	r2, [r1, r3]
 8002786:	4643      	mov	r3, r8
 8002788:	0412      	lsls	r2, r2, #16
 800278a:	432a      	orrs	r2, r5
 800278c:	6282      	str	r2, [r0, #40]	; 0x28
 800278e:	5ccd      	ldrb	r5, [r1, r3]
        stateAsWords[i] = 0;
 8002790:	465b      	mov	r3, fp
 8002792:	62c3      	str	r3, [r0, #44]	; 0x2c
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002794:	4663      	mov	r3, ip
 8002796:	262e      	movs	r6, #46	; 0x2e
 8002798:	062d      	lsls	r5, r5, #24
 800279a:	432a      	orrs	r2, r5
 800279c:	6282      	str	r2, [r0, #40]	; 0x28
 800279e:	5cca      	ldrb	r2, [r1, r3]
 80027a0:	3407      	adds	r4, #7
 80027a2:	62c2      	str	r2, [r0, #44]	; 0x2c
 80027a4:	5dcb      	ldrb	r3, [r1, r7]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	431a      	orrs	r2, r3
 80027aa:	62c2      	str	r2, [r0, #44]	; 0x2c
 80027ac:	5d8b      	ldrb	r3, [r1, r6]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	4313      	orrs	r3, r2
 80027b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80027b4:	5d0a      	ldrb	r2, [r1, r4]
 80027b6:	0612      	lsls	r2, r2, #24
 80027b8:	4313      	orrs	r3, r2
 80027ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    }
}
 80027bc:	bcf0      	pop	{r4, r5, r6, r7}
 80027be:	46bb      	mov	fp, r7
 80027c0:	46b2      	mov	sl, r6
 80027c2:	46a9      	mov	r9, r5
 80027c4:	46a0      	mov	r8, r4
 80027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027c8 <fromWordsToBytes>:
{
    unsigned int i, j;

    for(i=0; i<NLANES; i++)
        for(j=0; j<sizeof(tXoodooLane); j++)
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80027c8:	680b      	ldr	r3, [r1, #0]
 80027ca:	2220      	movs	r2, #32
 80027cc:	7003      	strb	r3, [r0, #0]
 80027ce:	680b      	ldr	r3, [r1, #0]
{
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	7043      	strb	r3, [r0, #1]
 80027d6:	884b      	ldrh	r3, [r1, #2]
{
 80027d8:	464f      	mov	r7, r9
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80027da:	7083      	strb	r3, [r0, #2]
 80027dc:	78cb      	ldrb	r3, [r1, #3]
{
 80027de:	4646      	mov	r6, r8
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80027e0:	70c3      	strb	r3, [r0, #3]
 80027e2:	684b      	ldr	r3, [r1, #4]
{
 80027e4:	46d6      	mov	lr, sl
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80027e6:	7103      	strb	r3, [r0, #4]
 80027e8:	684b      	ldr	r3, [r1, #4]
 80027ea:	4691      	mov	r9, r2
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	7143      	strb	r3, [r0, #5]
 80027f0:	88cb      	ldrh	r3, [r1, #6]
{
 80027f2:	b5c0      	push	{r6, r7, lr}
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80027f4:	7183      	strb	r3, [r0, #6]
 80027f6:	79cb      	ldrb	r3, [r1, #7]
 80027f8:	3201      	adds	r2, #1
 80027fa:	71c3      	strb	r3, [r0, #7]
 80027fc:	688b      	ldr	r3, [r1, #8]
 80027fe:	4690      	mov	r8, r2
 8002800:	7203      	strb	r3, [r0, #8]
 8002802:	688b      	ldr	r3, [r1, #8]
 8002804:	3201      	adds	r2, #1
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	7243      	strb	r3, [r0, #9]
 800280a:	894b      	ldrh	r3, [r1, #10]
 800280c:	4694      	mov	ip, r2
 800280e:	7283      	strb	r3, [r0, #10]
 8002810:	7acb      	ldrb	r3, [r1, #11]
 8002812:	3205      	adds	r2, #5
 8002814:	72c3      	strb	r3, [r0, #11]
 8002816:	68cb      	ldr	r3, [r1, #12]
 8002818:	4692      	mov	sl, r2
 800281a:	7303      	strb	r3, [r0, #12]
 800281c:	68cb      	ldr	r3, [r1, #12]
 800281e:	464a      	mov	r2, r9
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	7343      	strb	r3, [r0, #13]
 8002824:	89cb      	ldrh	r3, [r1, #14]
 8002826:	2723      	movs	r7, #35	; 0x23
 8002828:	7383      	strb	r3, [r0, #14]
 800282a:	7bcb      	ldrb	r3, [r1, #15]
 800282c:	2624      	movs	r6, #36	; 0x24
 800282e:	73c3      	strb	r3, [r0, #15]
 8002830:	690b      	ldr	r3, [r1, #16]
 8002832:	2525      	movs	r5, #37	; 0x25
 8002834:	7403      	strb	r3, [r0, #16]
 8002836:	690b      	ldr	r3, [r1, #16]
 8002838:	2426      	movs	r4, #38	; 0x26
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	7443      	strb	r3, [r0, #17]
 800283e:	8a4b      	ldrh	r3, [r1, #18]
 8002840:	7483      	strb	r3, [r0, #18]
 8002842:	7ccb      	ldrb	r3, [r1, #19]
 8002844:	74c3      	strb	r3, [r0, #19]
 8002846:	694b      	ldr	r3, [r1, #20]
 8002848:	7503      	strb	r3, [r0, #20]
 800284a:	694b      	ldr	r3, [r1, #20]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	7543      	strb	r3, [r0, #21]
 8002850:	8acb      	ldrh	r3, [r1, #22]
 8002852:	7583      	strb	r3, [r0, #22]
 8002854:	7dcb      	ldrb	r3, [r1, #23]
 8002856:	75c3      	strb	r3, [r0, #23]
 8002858:	698b      	ldr	r3, [r1, #24]
 800285a:	7603      	strb	r3, [r0, #24]
 800285c:	698b      	ldr	r3, [r1, #24]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	7643      	strb	r3, [r0, #25]
 8002862:	8b4b      	ldrh	r3, [r1, #26]
 8002864:	7683      	strb	r3, [r0, #26]
 8002866:	7ecb      	ldrb	r3, [r1, #27]
 8002868:	76c3      	strb	r3, [r0, #27]
 800286a:	69cb      	ldr	r3, [r1, #28]
 800286c:	7703      	strb	r3, [r0, #28]
 800286e:	69cb      	ldr	r3, [r1, #28]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	7743      	strb	r3, [r0, #29]
 8002874:	8bcb      	ldrh	r3, [r1, #30]
 8002876:	7783      	strb	r3, [r0, #30]
 8002878:	7fcb      	ldrb	r3, [r1, #31]
 800287a:	77c3      	strb	r3, [r0, #31]
 800287c:	6a0b      	ldr	r3, [r1, #32]
 800287e:	5483      	strb	r3, [r0, r2]
 8002880:	3208      	adds	r2, #8
 8002882:	4691      	mov	r9, r2
 8002884:	4642      	mov	r2, r8
 8002886:	6a0b      	ldr	r3, [r1, #32]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	5483      	strb	r3, [r0, r2]
 800288c:	3208      	adds	r2, #8
 800288e:	4690      	mov	r8, r2
 8002890:	4662      	mov	r2, ip
 8002892:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8002894:	5483      	strb	r3, [r0, r2]
 8002896:	3208      	adds	r2, #8
 8002898:	4694      	mov	ip, r2
 800289a:	4652      	mov	r2, sl
 800289c:	6a0b      	ldr	r3, [r1, #32]
 800289e:	0e1b      	lsrs	r3, r3, #24
 80028a0:	55c3      	strb	r3, [r0, r7]
 80028a2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80028a4:	3708      	adds	r7, #8
 80028a6:	5583      	strb	r3, [r0, r6]
 80028a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80028aa:	3608      	adds	r6, #8
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	5543      	strb	r3, [r0, r5]
 80028b0:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
 80028b2:	3508      	adds	r5, #8
 80028b4:	5503      	strb	r3, [r0, r4]
 80028b6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80028b8:	3408      	adds	r4, #8
 80028ba:	0e1b      	lsrs	r3, r3, #24
 80028bc:	5483      	strb	r3, [r0, r2]
 80028be:	3208      	adds	r2, #8
 80028c0:	4692      	mov	sl, r2
 80028c2:	464a      	mov	r2, r9
 80028c4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80028c6:	5483      	strb	r3, [r0, r2]
 80028c8:	4642      	mov	r2, r8
 80028ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	5483      	strb	r3, [r0, r2]
 80028d0:	4662      	mov	r2, ip
 80028d2:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
 80028d4:	5483      	strb	r3, [r0, r2]
 80028d6:	4652      	mov	r2, sl
 80028d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80028da:	0e1b      	lsrs	r3, r3, #24
 80028dc:	55c3      	strb	r3, [r0, r7]
 80028de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80028e0:	5583      	strb	r3, [r0, r6]
 80028e2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	5543      	strb	r3, [r0, r5]
 80028e8:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
 80028ea:	5503      	strb	r3, [r0, r4]
 80028ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80028ee:	0e1b      	lsrs	r3, r3, #24
 80028f0:	5483      	strb	r3, [r0, r2]
}
 80028f2:	bce0      	pop	{r5, r6, r7}
 80028f4:	46ba      	mov	sl, r7
 80028f6:	46b1      	mov	r9, r6
 80028f8:	46a8      	mov	r8, r5
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028fc <Xoodoo_Round>:

static void Xoodoo_Round( tXoodooLane * a, tXoodooLane rc )
{
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	0004      	movs	r4, r0
    tXoodooLane    p[NCOLUMS];
    tXoodooLane    e[NCOLUMS];

    /* Theta: Column Parity Mixer */
    for (x=0; x<NCOLUMS; ++x)
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002900:	68e2      	ldr	r2, [r4, #12]
    for (x=0; x<NCOLUMS; ++x)
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8002902:	231b      	movs	r3, #27
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002904:	4694      	mov	ip, r2
{
 8002906:	46de      	mov	lr, fp
 8002908:	4657      	mov	r7, sl
 800290a:	464e      	mov	r6, r9
 800290c:	4645      	mov	r5, r8
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 800290e:	6862      	ldr	r2, [r4, #4]
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8002910:	4699      	mov	r9, r3
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002912:	4693      	mov	fp, r2
 8002914:	6962      	ldr	r2, [r4, #20]
{
 8002916:	b5e0      	push	{r5, r6, r7, lr}
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002918:	4692      	mov	sl, r2
 800291a:	4662      	mov	r2, ip
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 800291c:	3b09      	subs	r3, #9
 800291e:	4698      	mov	r8, r3
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002920:	69c7      	ldr	r7, [r0, #28]
 8002922:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8002924:	b099      	sub	sp, #100	; 0x64
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002926:	9306      	str	r3, [sp, #24]
 8002928:	407b      	eors	r3, r7
 800292a:	4053      	eors	r3, r2
 800292c:	68a5      	ldr	r5, [r4, #8]
 800292e:	9400      	str	r4, [sp, #0]
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8002930:	001a      	movs	r2, r3
 8002932:	464c      	mov	r4, r9
 8002934:	41e2      	rors	r2, r4
 8002936:	4644      	mov	r4, r8
 8002938:	41e3      	rors	r3, r4
 800293a:	9308      	str	r3, [sp, #32]
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 800293c:	9b00      	ldr	r3, [sp, #0]
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 800293e:	9207      	str	r2, [sp, #28]
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	6806      	ldr	r6, [r0, #0]
 8002944:	9201      	str	r2, [sp, #4]
 8002946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002948:	6900      	ldr	r0, [r0, #16]
 800294a:	9202      	str	r2, [sp, #8]
 800294c:	0032      	movs	r2, r6
 800294e:	6a1c      	ldr	r4, [r3, #32]
 8002950:	4042      	eors	r2, r0
{
 8002952:	910b      	str	r1, [sp, #44]	; 0x2c
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8002954:	9403      	str	r4, [sp, #12]
 8002956:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002958:	4062      	eors	r2, r4
 800295a:	465b      	mov	r3, fp
 800295c:	4654      	mov	r4, sl
 800295e:	4063      	eors	r3, r4
 8002960:	9104      	str	r1, [sp, #16]
 8002962:	404b      	eors	r3, r1
 8002964:	9901      	ldr	r1, [sp, #4]
 8002966:	9505      	str	r5, [sp, #20]
 8002968:	404d      	eors	r5, r1
 800296a:	9902      	ldr	r1, [sp, #8]
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 800296c:	464c      	mov	r4, r9
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 800296e:	404d      	eors	r5, r1
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8002970:	0011      	movs	r1, r2
 8002972:	41e1      	rors	r1, r4
 8002974:	9109      	str	r1, [sp, #36]	; 0x24
 8002976:	4641      	mov	r1, r8
 8002978:	41ca      	rors	r2, r1
 800297a:	0019      	movs	r1, r3
 800297c:	41e1      	rors	r1, r4
 800297e:	910a      	str	r1, [sp, #40]	; 0x28
 8002980:	4641      	mov	r1, r8
 8002982:	41cb      	rors	r3, r1
 8002984:	0029      	movs	r1, r5
 8002986:	41e1      	rors	r1, r4
 8002988:	4689      	mov	r9, r1
 800298a:	4641      	mov	r1, r8
 800298c:	9c08      	ldr	r4, [sp, #32]
 800298e:	41cd      	rors	r5, r1
 8002990:	9907      	ldr	r1, [sp, #28]
 8002992:	4061      	eors	r1, r4
 8002994:	9c09      	ldr	r4, [sp, #36]	; 0x24
    for (x=0; x<NCOLUMS; ++x)
        for (y=0; y<NROWS; ++y)
            a[index(x,y)] ^= e[x];
 8002996:	404e      	eors	r6, r1
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8002998:	4062      	eors	r2, r4
 800299a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            a[index(x,y)] ^= e[x];
 800299c:	4048      	eors	r0, r1
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 800299e:	4063      	eors	r3, r4
 80029a0:	464c      	mov	r4, r9
 80029a2:	4065      	eors	r5, r4
            a[index(x,y)] ^= e[x];
 80029a4:	9c03      	ldr	r4, [sp, #12]
 80029a6:	9007      	str	r0, [sp, #28]
 80029a8:	4061      	eors	r1, r4
 80029aa:	465c      	mov	r4, fp
 80029ac:	4054      	eors	r4, r2
 80029ae:	46a3      	mov	fp, r4
 80029b0:	4654      	mov	r4, sl
 80029b2:	9805      	ldr	r0, [sp, #20]
 80029b4:	4054      	eors	r4, r2
 80029b6:	46a2      	mov	sl, r4
 80029b8:	9c04      	ldr	r4, [sp, #16]
 80029ba:	4058      	eors	r0, r3
 80029bc:	4681      	mov	r9, r0
 80029be:	4062      	eors	r2, r4
 80029c0:	9801      	ldr	r0, [sp, #4]
 80029c2:	9c02      	ldr	r4, [sp, #8]
 80029c4:	4058      	eors	r0, r3
 80029c6:	4063      	eors	r3, r4
 80029c8:	4664      	mov	r4, ip
 80029ca:	406c      	eors	r4, r5
 80029cc:	46a4      	mov	ip, r4
 80029ce:	4680      	mov	r8, r0
 80029d0:	9c00      	ldr	r4, [sp, #0]
 80029d2:	9806      	ldr	r0, [sp, #24]
 80029d4:	406f      	eors	r7, r5
 80029d6:	6262      	str	r2, [r4, #36]	; 0x24
 80029d8:	4045      	eors	r5, r0
 80029da:	464a      	mov	r2, r9
 80029dc:	4658      	mov	r0, fp
 80029de:	62a3      	str	r3, [r4, #40]	; 0x28
 80029e0:	4663      	mov	r3, ip
 80029e2:	6060      	str	r0, [r4, #4]
 80029e4:	60a2      	str	r2, [r4, #8]
 80029e6:	4650      	mov	r0, sl
 80029e8:	4642      	mov	r2, r8
 80029ea:	6026      	str	r6, [r4, #0]
 80029ec:	9e07      	ldr	r6, [sp, #28]
 80029ee:	60e3      	str	r3, [r4, #12]
{
 80029f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            a[index(x,y)] ^= e[x];
 80029f2:	6126      	str	r6, [r4, #16]
 80029f4:	6221      	str	r1, [r4, #32]
 80029f6:	6160      	str	r0, [r4, #20]
 80029f8:	0021      	movs	r1, r4
 80029fa:	61a2      	str	r2, [r4, #24]
 80029fc:	61e7      	str	r7, [r4, #28]
 80029fe:	62e5      	str	r5, [r4, #44]	; 0x2c
 8002a00:	2210      	movs	r2, #16
 8002a02:	a80c      	add	r0, sp, #48	; 0x30
{
 8002a04:	4698      	mov	r8, r3
 8002a06:	f000 fc01 	bl	800320c <memcpy>

    /* Rho-west: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
        b[index(x,0)] = a[index(x,0)];
        b[index(x,1)] = a[index(x-1,1)];
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8002a0a:	2315      	movs	r3, #21
        b[index(x,1)] = a[index(x-1,1)];
 8002a0c:	69e0      	ldr	r0, [r4, #28]
 8002a0e:	9400      	str	r4, [sp, #0]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8002a10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        b[index(x,1)] = a[index(x-1,1)];
 8002a12:	9010      	str	r0, [sp, #64]	; 0x40
    }
    memcpy( a, b, sizeof(b) );
 8002a14:	9800      	ldr	r0, [sp, #0]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8002a16:	41dd      	rors	r5, r3
    memcpy( a, b, sizeof(b) );
 8002a18:	4681      	mov	r9, r0
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8002a1a:	41da      	rors	r2, r3
 8002a1c:	6a27      	ldr	r7, [r4, #32]
 8002a1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
        b[index(x,1)] = a[index(x-1,1)];
 8002a20:	6921      	ldr	r1, [r4, #16]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8002a22:	41df      	rors	r7, r3
 8002a24:	41de      	rors	r6, r3
 8002a26:	9517      	str	r5, [sp, #92]	; 0x5c
 8002a28:	0013      	movs	r3, r2
    Dump("Rho-west", a, 2);
        
    /* Iota: round constant */
    a[0] ^= rc;
 8002a2a:	464d      	mov	r5, r9
        b[index(x,1)] = a[index(x-1,1)];
 8002a2c:	6962      	ldr	r2, [r4, #20]
 8002a2e:	69a4      	ldr	r4, [r4, #24]
 8002a30:	9111      	str	r1, [sp, #68]	; 0x44
 8002a32:	9413      	str	r4, [sp, #76]	; 0x4c
    a[0] ^= rc;
 8002a34:	4644      	mov	r4, r8
    memcpy( a, b, sizeof(b) );
 8002a36:	a90c      	add	r1, sp, #48	; 0x30
        b[index(x,1)] = a[index(x-1,1)];
 8002a38:	9212      	str	r2, [sp, #72]	; 0x48
    memcpy( a, b, sizeof(b) );
 8002a3a:	2230      	movs	r2, #48	; 0x30
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8002a3c:	9714      	str	r7, [sp, #80]	; 0x50
 8002a3e:	9615      	str	r6, [sp, #84]	; 0x54
 8002a40:	9316      	str	r3, [sp, #88]	; 0x58
    memcpy( a, b, sizeof(b) );
 8002a42:	f000 fbe3 	bl	800320c <memcpy>
    a[0] ^= rc;
 8002a46:	682b      	ldr	r3, [r5, #0]
    Dump("Iota", a, 2);

    /* Chi: non linear layer */
    for (x=0; x<NCOLUMS; ++x)
        for (y=0; y<NROWS; ++y)
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002a48:	6a28      	ldr	r0, [r5, #32]
    a[0] ^= rc;
 8002a4a:	4063      	eors	r3, r4
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002a4c:	001c      	movs	r4, r3
 8002a4e:	4384      	bics	r4, r0
 8002a50:	46a0      	mov	r8, r4
 8002a52:	464c      	mov	r4, r9
 8002a54:	686a      	ldr	r2, [r5, #4]
 8002a56:	68e4      	ldr	r4, [r4, #12]
 8002a58:	9500      	str	r5, [sp, #0]
 8002a5a:	4692      	mov	sl, r2
 8002a5c:	46a1      	mov	r9, r4
 8002a5e:	696a      	ldr	r2, [r5, #20]
    a[0] ^= rc;
 8002a60:	9c00      	ldr	r4, [sp, #0]
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002a62:	6929      	ldr	r1, [r5, #16]
 8002a64:	68af      	ldr	r7, [r5, #8]
 8002a66:	69ae      	ldr	r6, [r5, #24]
 8002a68:	4694      	mov	ip, r2
 8002a6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002a6c:	6aad      	ldr	r5, [r5, #40]	; 0x28
    a[0] ^= rc;
 8002a6e:	6023      	str	r3, [r4, #0]
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002a70:	4644      	mov	r4, r8
 8002a72:	404c      	eors	r4, r1
 8002a74:	9410      	str	r4, [sp, #64]	; 0x40
 8002a76:	000c      	movs	r4, r1
 8002a78:	439c      	bics	r4, r3
 8002a7a:	46a0      	mov	r8, r4
 8002a7c:	0004      	movs	r4, r0
 8002a7e:	438c      	bics	r4, r1
 8002a80:	0021      	movs	r1, r4
 8002a82:	4644      	mov	r4, r8
 8002a84:	404b      	eors	r3, r1
 8002a86:	4044      	eors	r4, r0
 8002a88:	9414      	str	r4, [sp, #80]	; 0x50
 8002a8a:	930c      	str	r3, [sp, #48]	; 0x30
 8002a8c:	4664      	mov	r4, ip
 8002a8e:	0013      	movs	r3, r2
 8002a90:	43a3      	bics	r3, r4
 8002a92:	4654      	mov	r4, sl
 8002a94:	4063      	eors	r3, r4
 8002a96:	930d      	str	r3, [sp, #52]	; 0x34
 8002a98:	4653      	mov	r3, sl
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	469b      	mov	fp, r3
 8002a9e:	4664      	mov	r4, ip
 8002aa0:	4653      	mov	r3, sl
 8002aa2:	439c      	bics	r4, r3
 8002aa4:	46a0      	mov	r8, r4
 8002aa6:	4663      	mov	r3, ip
 8002aa8:	465c      	mov	r4, fp
 8002aaa:	405c      	eors	r4, r3
 8002aac:	0023      	movs	r3, r4
 8002aae:	4644      	mov	r4, r8
 8002ab0:	4062      	eors	r2, r4
 8002ab2:	002c      	movs	r4, r5
 8002ab4:	9311      	str	r3, [sp, #68]	; 0x44
 8002ab6:	003b      	movs	r3, r7
 8002ab8:	9900      	ldr	r1, [sp, #0]
 8002aba:	43b4      	bics	r4, r6
 8002abc:	407c      	eors	r4, r7
 8002abe:	69c8      	ldr	r0, [r1, #28]
 8002ac0:	46a0      	mov	r8, r4
 8002ac2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002ac4:	0034      	movs	r4, r6
 8002ac6:	43ab      	bics	r3, r5
 8002ac8:	4073      	eors	r3, r6
 8002aca:	000e      	movs	r6, r1
 8002acc:	469c      	mov	ip, r3
 8002ace:	464b      	mov	r3, r9
 8002ad0:	43bc      	bics	r4, r7
 8002ad2:	0027      	movs	r7, r4
 8002ad4:	4386      	bics	r6, r0
 8002ad6:	464c      	mov	r4, r9
 8002ad8:	405e      	eors	r6, r3
 8002ada:	0003      	movs	r3, r0
 8002adc:	406f      	eors	r7, r5
 8002ade:	464d      	mov	r5, r9
 8002ae0:	43a3      	bics	r3, r4
 8002ae2:	4644      	mov	r4, r8
 8002ae4:	404b      	eors	r3, r1
 8002ae6:	438d      	bics	r5, r1
    memcpy( a, b, sizeof(b) );
 8002ae8:	9900      	ldr	r1, [sp, #0]
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002aea:	940e      	str	r4, [sp, #56]	; 0x38
    memcpy( a, b, sizeof(b) );
 8002aec:	4689      	mov	r9, r1
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002aee:	4664      	mov	r4, ip
 8002af0:	9412      	str	r4, [sp, #72]	; 0x48
    Dump("Chi", a, 2);

    /* Rho-east: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
        b[index(x,0)] = a[index(x,0)];
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002af2:	464c      	mov	r4, r9
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002af4:	4045      	eors	r5, r0
 8002af6:	9215      	str	r2, [sp, #84]	; 0x54
    memcpy( a, b, sizeof(b) );
 8002af8:	0008      	movs	r0, r1
 8002afa:	2230      	movs	r2, #48	; 0x30
 8002afc:	a90c      	add	r1, sp, #48	; 0x30
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 8002afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8002b00:	9716      	str	r7, [sp, #88]	; 0x58
 8002b02:	960f      	str	r6, [sp, #60]	; 0x3c
 8002b04:	9513      	str	r5, [sp, #76]	; 0x4c
    memcpy( a, b, sizeof(b) );
 8002b06:	f000 fb81 	bl	800320c <memcpy>
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	a80c      	add	r0, sp, #48	; 0x30
 8002b10:	f000 fb7c 	bl	800320c <memcpy>
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b14:	6921      	ldr	r1, [r4, #16]
 8002b16:	221f      	movs	r2, #31
 8002b18:	4688      	mov	r8, r1
 8002b1a:	6961      	ldr	r1, [r4, #20]
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b1c:	9400      	str	r4, [sp, #0]
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b1e:	468c      	mov	ip, r1
 8002b20:	69e1      	ldr	r1, [r4, #28]
 8002b22:	69a7      	ldr	r7, [r4, #24]
 8002b24:	4689      	mov	r9, r1
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b28:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002b2a:	6a20      	ldr	r0, [r4, #32]
 8002b2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b2e:	4644      	mov	r4, r8
 8002b30:	41d4      	rors	r4, r2
 8002b32:	46a0      	mov	r8, r4
 8002b34:	4664      	mov	r4, ip
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b36:	2318      	movs	r3, #24
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b38:	41d4      	rors	r4, r2
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b3a:	41de      	rors	r6, r3
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b3c:	46a4      	mov	ip, r4
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b3e:	41dd      	rors	r5, r3
 8002b40:	41d8      	rors	r0, r3
 8002b42:	41d9      	rors	r1, r3
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b44:	464c      	mov	r4, r9
 8002b46:	4643      	mov	r3, r8
 8002b48:	41d7      	rors	r7, r2
 8002b4a:	41d4      	rors	r4, r2
 8002b4c:	9310      	str	r3, [sp, #64]	; 0x40
 8002b4e:	4663      	mov	r3, ip
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b50:	9016      	str	r0, [sp, #88]	; 0x58
 8002b52:	9117      	str	r1, [sp, #92]	; 0x5c
    }
    memcpy( a, b, sizeof(b) );
 8002b54:	2230      	movs	r2, #48	; 0x30
 8002b56:	9800      	ldr	r0, [sp, #0]
 8002b58:	a90c      	add	r1, sp, #48	; 0x30
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8002b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8002b5c:	9712      	str	r7, [sp, #72]	; 0x48
 8002b5e:	9413      	str	r4, [sp, #76]	; 0x4c
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8002b60:	9614      	str	r6, [sp, #80]	; 0x50
 8002b62:	9515      	str	r5, [sp, #84]	; 0x54
    memcpy( a, b, sizeof(b) );
 8002b64:	f000 fb52 	bl	800320c <memcpy>
    Dump("Rho-east", a, 2);

}
 8002b68:	b019      	add	sp, #100	; 0x64
 8002b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b6c:	46bb      	mov	fp, r7
 8002b6e:	46b2      	mov	sl, r6
 8002b70:	46a9      	mov	r9, r5
 8002b72:	46a0      	mov	r8, r4
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)

08002b78 <Xoodoo_Permute_Nrounds>:
    _rc2,
    _rc1
};

void Xoodoo_Permute_Nrounds( void * state, uint32_t nr )
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	000d      	movs	r5, r1
    tXoodooLane        a[NLANES];
    unsigned int    i;

    fromBytesToWords(a, (const unsigned char *)state);

    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8002b7c:	240c      	movs	r4, #12
{
 8002b7e:	b08c      	sub	sp, #48	; 0x30
    fromBytesToWords(a, (const unsigned char *)state);
 8002b80:	0001      	movs	r1, r0
{
 8002b82:	0006      	movs	r6, r0
    fromBytesToWords(a, (const unsigned char *)state);
 8002b84:	4668      	mov	r0, sp
 8002b86:	f7ff fd35 	bl	80025f4 <fromBytesToWords>
    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	2c0b      	cmp	r4, #11
 8002b8e:	d809      	bhi.n	8002ba4 <Xoodoo_Permute_Nrounds+0x2c>
 8002b90:	4d07      	ldr	r5, [pc, #28]	; (8002bb0 <Xoodoo_Permute_Nrounds+0x38>)
 8002b92:	00a4      	lsls	r4, r4, #2
 8002b94:	1964      	adds	r4, r4, r5
 8002b96:	3530      	adds	r5, #48	; 0x30
        Xoodoo_Round( a, RC[i] );
 8002b98:	cc02      	ldmia	r4!, {r1}
 8002b9a:	4668      	mov	r0, sp
 8002b9c:	f7ff feae 	bl	80028fc <Xoodoo_Round>
    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8002ba0:	42ac      	cmp	r4, r5
 8002ba2:	d1f9      	bne.n	8002b98 <Xoodoo_Permute_Nrounds+0x20>
        Dump("Round", a, 1);
    }
    Dump("Permutation", a, 0);

    fromWordsToBytes((unsigned char *)state, a);
 8002ba4:	4669      	mov	r1, sp
 8002ba6:	0030      	movs	r0, r6
 8002ba8:	f7ff fe0e 	bl	80027c8 <fromWordsToBytes>

}
 8002bac:	b00c      	add	sp, #48	; 0x30
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	08004690 	.word	0x08004690

08002bb4 <Xoodoo_Permute_12rounds>:
{
    Xoodoo_Permute_Nrounds( state, 6 );
}

void Xoodoo_Permute_12rounds( uint32_t * state)
{
 8002bb4:	b510      	push	{r4, lr}
    Xoodoo_Permute_Nrounds( state, 12 );
 8002bb6:	210c      	movs	r1, #12
 8002bb8:	f7ff ffde 	bl	8002b78 <Xoodoo_Permute_Nrounds>
}
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)

08002bc0 <Xoodyak_Down>:
#define Cyclist_lRatchet                JOIN(prefix, _lRatchet)

/* ------- Cyclist internal interfaces ------- */

static void Cyclist_Down(Cyclist_Instance *instance, const uint8_t *Xi, unsigned int XiLen, uint8_t Cd)
{
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	0004      	movs	r4, r0
 8002bc4:	0015      	movs	r5, r2
 8002bc6:	001e      	movs	r6, r3
    SnP_AddBytes(instance->state, Xi, 0, XiLen);
 8002bc8:	0013      	movs	r3, r2
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f7ff fc82 	bl	80024d4 <Xoodoo_AddBytes>
    SnP_AddByte(instance->state, 0x01, XiLen);
 8002bd0:	002a      	movs	r2, r5
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	f7ff fc69 	bl	80024ac <Xoodoo_AddByte>
    SnP_AddByte(instance->state, (instance->mode == Cyclist_ModeHash) ? (Cd & 0x01) : Cd, Cyclist_f_bPrime - 1);
 8002bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d100      	bne.n	8002be2 <Xoodyak_Down+0x22>
 8002be0:	401e      	ands	r6, r3
 8002be2:	0031      	movs	r1, r6
 8002be4:	222f      	movs	r2, #47	; 0x2f
 8002be6:	0020      	movs	r0, r4
 8002be8:	f7ff fc60 	bl	80024ac <Xoodoo_AddByte>
    instance->phase = Cyclist_PhaseDown;
 8002bec:	2301      	movs	r3, #1
 8002bee:	6323      	str	r3, [r4, #48]	; 0x30

}
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)

08002bf4 <Xoodyak_Up>:

static void Cyclist_Up(Cyclist_Instance *instance, uint8_t *Yi, unsigned int YiLen, uint8_t Cu)
{
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	0004      	movs	r4, r0
    #if defined(OUTPUT)
    uint8_t   s[Cyclist_f_bPrime];
    #endif

    if (instance->mode != Cyclist_ModeHash) {
 8002bf8:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
 8002bfa:	000d      	movs	r5, r1
 8002bfc:	0016      	movs	r6, r2
 8002bfe:	0019      	movs	r1, r3
    if (instance->mode != Cyclist_ModeHash) {
 8002c00:	2801      	cmp	r0, #1
 8002c02:	d003      	beq.n	8002c0c <Xoodyak_Up+0x18>
        SnP_AddByte(instance->state, Cu, Cyclist_f_bPrime - 1);
 8002c04:	222f      	movs	r2, #47	; 0x2f
 8002c06:	0020      	movs	r0, r4
 8002c08:	f7ff fc50 	bl	80024ac <Xoodoo_AddByte>
    if (instance->file != NULL) {
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        SnP_ExtractAndAddBytes( instance->state, s, s, 0, Cyclist_f_bPrime );
    }
    #endif
    SnP_Permute( instance->state );
 8002c0c:	0020      	movs	r0, r4
 8002c0e:	f7ff ffd1 	bl	8002bb4 <Xoodoo_Permute_12rounds>
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        fprintf( instance->file, "After f() ");
        displayByteString( instance->file, "", s, Cyclist_f_bPrime );
    }
    #endif
    instance->phase = Cyclist_PhaseUp;
 8002c12:	2302      	movs	r3, #2
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 8002c14:	0029      	movs	r1, r5
    instance->phase = Cyclist_PhaseUp;
 8002c16:	6323      	str	r3, [r4, #48]	; 0x30
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 8002c18:	2200      	movs	r2, #0
 8002c1a:	0033      	movs	r3, r6
 8002c1c:	0020      	movs	r0, r4
 8002c1e:	f7ff fcc7 	bl	80025b0 <Xoodoo_ExtractBytes>
}
 8002c22:	bd70      	pop	{r4, r5, r6, pc}

08002c24 <Xoodyak_AbsorbAny>:

static void Cyclist_AbsorbAny(Cyclist_Instance *instance, const uint8_t *X, size_t XLen, unsigned int r, uint8_t Cd)
{
 8002c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c26:	46c6      	mov	lr, r8
 8002c28:	b500      	push	{lr}
 8002c2a:	af06      	add	r7, sp, #24
 8002c2c:	0006      	movs	r6, r0
 8002c2e:	000d      	movs	r5, r1
 8002c30:	0014      	movs	r4, r2
 8002c32:	4698      	mov	r8, r3
 8002c34:	783f      	ldrb	r7, [r7, #0]
 8002c36:	e000      	b.n	8002c3a <Xoodyak_AbsorbAny+0x16>
        if (instance->phase != Cyclist_PhaseUp) {
            Cyclist_Up(instance, NULL, 0, 0);
        }
        splitLen = MyMin(XLen, r);
        Cyclist_Down(instance, X, splitLen, Cd);
        Cd = 0;
 8002c38:	2700      	movs	r7, #0
        if (instance->phase != Cyclist_PhaseUp) {
 8002c3a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002c3c:	2a02      	cmp	r2, #2
 8002c3e:	d005      	beq.n	8002c4c <Xoodyak_AbsorbAny+0x28>
            Cyclist_Up(instance, NULL, 0, 0);
 8002c40:	2300      	movs	r3, #0
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	0030      	movs	r0, r6
 8002c48:	f7ff ffd4 	bl	8002bf4 <Xoodyak_Up>
        Cyclist_Down(instance, X, splitLen, Cd);
 8002c4c:	003b      	movs	r3, r7
 8002c4e:	0029      	movs	r1, r5
 8002c50:	0030      	movs	r0, r6
        splitLen = MyMin(XLen, r);
 8002c52:	0022      	movs	r2, r4
 8002c54:	4544      	cmp	r4, r8
 8002c56:	d900      	bls.n	8002c5a <Xoodyak_AbsorbAny+0x36>
 8002c58:	4642      	mov	r2, r8
        X       += splitLen;
        XLen    -= splitLen;
 8002c5a:	1aa4      	subs	r4, r4, r2
        X       += splitLen;
 8002c5c:	18ad      	adds	r5, r5, r2
        Cyclist_Down(instance, X, splitLen, Cd);
 8002c5e:	f7ff ffaf 	bl	8002bc0 <Xoodyak_Down>
    } while ( XLen != 0 );
 8002c62:	2c00      	cmp	r4, #0
 8002c64:	d1e8      	bne.n	8002c38 <Xoodyak_AbsorbAny+0x14>
}
 8002c66:	bc80      	pop	{r7}
 8002c68:	46b8      	mov	r8, r7
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6c <Xoodyak_AbsorbKey>:

static void Cyclist_AbsorbKey(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8002c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6e:	4647      	mov	r7, r8
 8002c70:	46ce      	mov	lr, r9
 8002c72:	b580      	push	{r7, lr}
    uint8_t KID[Cyclist_Rkin];

    assert(instance->mode == Cyclist_ModeHash);
 8002c74:	6b46      	ldr	r6, [r0, #52]	; 0x34
{
 8002c76:	0004      	movs	r4, r0
 8002c78:	0015      	movs	r5, r2
 8002c7a:	4698      	mov	r8, r3
 8002c7c:	b08f      	sub	sp, #60	; 0x3c
    assert(instance->mode == Cyclist_ModeHash);
 8002c7e:	2e01      	cmp	r6, #1
 8002c80:	d131      	bne.n	8002ce6 <Xoodyak_AbsorbKey+0x7a>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 8002c82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002c84:	18d6      	adds	r6, r2, r3
 8002c86:	2e2b      	cmp	r6, #43	; 0x2b
 8002c88:	d833      	bhi.n	8002cf2 <Xoodyak_AbsorbKey+0x86>

    instance->mode      = Cyclist_ModeKeyed;
 8002c8a:	2702      	movs	r7, #2
    instance->Rabsorb   = Cyclist_Rkin;
 8002c8c:	222c      	movs	r2, #44	; 0x2c
    instance->Rsqueeze  = Cyclist_Rkout;
 8002c8e:	2318      	movs	r3, #24
    instance->mode      = Cyclist_ModeKeyed;
 8002c90:	6347      	str	r7, [r0, #52]	; 0x34
    instance->Rabsorb   = Cyclist_Rkin;
 8002c92:	6382      	str	r2, [r0, #56]	; 0x38
    instance->Rsqueeze  = Cyclist_Rkout;
 8002c94:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (KLen != 0) {
 8002c96:	2d00      	cmp	r5, #0
 8002c98:	d104      	bne.n	8002ca4 <Xoodyak_AbsorbKey+0x38>
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
        if (counterLen != 0) {
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
        }
    }
}
 8002c9a:	b00f      	add	sp, #60	; 0x3c
 8002c9c:	bcc0      	pop	{r6, r7}
 8002c9e:	46b9      	mov	r9, r7
 8002ca0:	46b0      	mov	r8, r6
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(KID, K, KLen);
 8002ca4:	ab03      	add	r3, sp, #12
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	002a      	movs	r2, r5
 8002caa:	4699      	mov	r9, r3
 8002cac:	f000 faae 	bl	800320c <memcpy>
        memcpy(KID + KLen, ID, IDLen);
 8002cb0:	0028      	movs	r0, r5
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002cb6:	4448      	add	r0, r9
 8002cb8:	f000 faa8 	bl	800320c <memcpy>
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 8002cc0:	0020      	movs	r0, r4
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8002cc2:	558b      	strb	r3, [r1, r6]
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 8002cc4:	1c72      	adds	r2, r6, #1
 8002cc6:	232c      	movs	r3, #44	; 0x2c
 8002cc8:	9700      	str	r7, [sp, #0]
 8002cca:	f7ff ffab 	bl	8002c24 <Xoodyak_AbsorbAny>
        if (counterLen != 0) {
 8002cce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0e2      	beq.n	8002c9a <Xoodyak_AbsorbKey+0x2e>
 8002cd4:	001a      	movs	r2, r3
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	0020      	movs	r0, r4
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f7ff ffa0 	bl	8002c24 <Xoodyak_AbsorbAny>
}
 8002ce4:	e7d9      	b.n	8002c9a <Xoodyak_AbsorbKey+0x2e>
    assert(instance->mode == Cyclist_ModeHash);
 8002ce6:	216a      	movs	r1, #106	; 0x6a
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <Xoodyak_AbsorbKey+0x94>)
 8002cea:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <Xoodyak_AbsorbKey+0x98>)
 8002cec:	4806      	ldr	r0, [pc, #24]	; (8002d08 <Xoodyak_AbsorbKey+0x9c>)
 8002cee:	f000 fa35 	bl	800315c <__assert_func>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 8002cf2:	216b      	movs	r1, #107	; 0x6b
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <Xoodyak_AbsorbKey+0xa0>)
 8002cf6:	4a03      	ldr	r2, [pc, #12]	; (8002d04 <Xoodyak_AbsorbKey+0x98>)
 8002cf8:	4803      	ldr	r0, [pc, #12]	; (8002d08 <Xoodyak_AbsorbKey+0x9c>)
 8002cfa:	f000 fa2f 	bl	800315c <__assert_func>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	080046f4 	.word	0x080046f4
 8002d04:	080047c8 	.word	0x080047c8
 8002d08:	08004718 	.word	0x08004718
 8002d0c:	080047a0 	.word	0x080047a0

08002d10 <Xoodyak_SqueezeAny>:

static void Cyclist_SqueezeAny(Cyclist_Instance *instance, uint8_t *Y, size_t YLen, uint8_t Cu)
{
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	46c6      	mov	lr, r8
    unsigned int len;

    len = MyMin(YLen, instance->Rsqueeze );
 8002d14:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
{
 8002d16:	0006      	movs	r6, r0
 8002d18:	4690      	mov	r8, r2
 8002d1a:	b500      	push	{lr}
    len = MyMin(YLen, instance->Rsqueeze );
 8002d1c:	4297      	cmp	r7, r2
 8002d1e:	d900      	bls.n	8002d22 <Xoodyak_SqueezeAny+0x12>
 8002d20:	0017      	movs	r7, r2
    Cyclist_Up(instance, Y, len, Cu);
 8002d22:	003a      	movs	r2, r7
 8002d24:	0030      	movs	r0, r6
    Y += len;
 8002d26:	19cd      	adds	r5, r1, r7
    Cyclist_Up(instance, Y, len, Cu);
 8002d28:	f7ff ff64 	bl	8002bf4 <Xoodyak_Up>
    YLen -= len;
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	1bdc      	subs	r4, r3, r7
    while (YLen != 0) {
 8002d30:	45b8      	cmp	r8, r7
 8002d32:	d012      	beq.n	8002d5a <Xoodyak_SqueezeAny+0x4a>
        Cyclist_Down(instance, NULL, 0, 0);
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	0030      	movs	r0, r6
 8002d3c:	f7ff ff40 	bl	8002bc0 <Xoodyak_Down>
        len = MyMin(YLen, instance->Rsqueeze );
 8002d40:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        Cyclist_Up(instance, Y, len, 0);
 8002d42:	0029      	movs	r1, r5
 8002d44:	2300      	movs	r3, #0
 8002d46:	0030      	movs	r0, r6
        len = MyMin(YLen, instance->Rsqueeze );
 8002d48:	42a2      	cmp	r2, r4
 8002d4a:	d900      	bls.n	8002d4e <Xoodyak_SqueezeAny+0x3e>
 8002d4c:	0022      	movs	r2, r4
        Y += len;
        YLen -= len;
 8002d4e:	1aa4      	subs	r4, r4, r2
        Y += len;
 8002d50:	18ad      	adds	r5, r5, r2
        Cyclist_Up(instance, Y, len, 0);
 8002d52:	f7ff ff4f 	bl	8002bf4 <Xoodyak_Up>
    while (YLen != 0) {
 8002d56:	2c00      	cmp	r4, #0
 8002d58:	d1ec      	bne.n	8002d34 <Xoodyak_SqueezeAny+0x24>
    }
}
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	46b8      	mov	r8, r7
 8002d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d60 <Xoodyak_Initialize>:
}

/* ------- Cyclist interfaces ------- */

void Cyclist_Initialize(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	0004      	movs	r4, r0
 8002d64:	b085      	sub	sp, #20
 8002d66:	000e      	movs	r6, r1
 8002d68:	0015      	movs	r5, r2
 8002d6a:	001f      	movs	r7, r3
    SnP_StaticInitialize();
 8002d6c:	f7ff fb96 	bl	800249c <Xoodoo_StaticInitialize>
    SnP_Initialize(instance->state);
 8002d70:	0020      	movs	r0, r4
 8002d72:	f7ff fb95 	bl	80024a0 <Xoodoo_Initialize>
    instance->phase     = Cyclist_PhaseUp;
    instance->mode      = Cyclist_ModeHash;
    instance->Rabsorb   = Cyclist_Rhash;
 8002d76:	2310      	movs	r3, #16
    instance->phase     = Cyclist_PhaseUp;
 8002d78:	2102      	movs	r1, #2
    instance->mode      = Cyclist_ModeHash;
 8002d7a:	2201      	movs	r2, #1
    instance->phase     = Cyclist_PhaseUp;
 8002d7c:	6321      	str	r1, [r4, #48]	; 0x30
    instance->mode      = Cyclist_ModeHash;
 8002d7e:	6362      	str	r2, [r4, #52]	; 0x34
    instance->Rabsorb   = Cyclist_Rhash;
 8002d80:	63a3      	str	r3, [r4, #56]	; 0x38
    instance->Rsqueeze  = Cyclist_Rhash;
 8002d82:	63e3      	str	r3, [r4, #60]	; 0x3c
    #ifdef OUTPUT
    instance->file = 0;
    SnP_Initialize( instance->stateShadow );
    #endif
    if (KLen != 0) {
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	d101      	bne.n	8002d8c <Xoodyak_Initialize+0x2c>
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
    }
}
 8002d88:	b005      	add	sp, #20
 8002d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 8002d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d8e:	002a      	movs	r2, r5
 8002d90:	9302      	str	r3, [sp, #8]
 8002d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d94:	0031      	movs	r1, r6
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d9a:	0020      	movs	r0, r4
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	003b      	movs	r3, r7
 8002da0:	f7ff ff64 	bl	8002c6c <Xoodyak_AbsorbKey>
}
 8002da4:	e7f0      	b.n	8002d88 <Xoodyak_Initialize+0x28>
 8002da6:	46c0      	nop			; (mov r8, r8)

08002da8 <Xoodyak_Absorb>:

void Cyclist_Absorb(Cyclist_Instance *instance, const uint8_t *X, size_t XLen)
{
 8002da8:	b510      	push	{r4, lr}
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 8002daa:	2403      	movs	r4, #3
{
 8002dac:	b082      	sub	sp, #8
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 8002dae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002db0:	9400      	str	r4, [sp, #0]
 8002db2:	f7ff ff37 	bl	8002c24 <Xoodyak_AbsorbAny>
}
 8002db6:	b002      	add	sp, #8
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)

08002dbc <Xoodyak_Squeeze>:
    assert(instance->mode == Cyclist_ModeKeyed);
    Cyclist_Crypt(instance, C, P, CLen, 1);
}

void Cyclist_Squeeze(Cyclist_Instance *instance, uint8_t *Y, size_t YLen)
{
 8002dbc:	b510      	push	{r4, lr}
    Cyclist_SqueezeAny(instance, Y, YLen, 0x40);
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	f7ff ffa6 	bl	8002d10 <Xoodyak_SqueezeAny>
}
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)

08002dc8 <crypto_hash>:

int crypto_hash(unsigned char *out, const unsigned char *in, unsigned long long inlen)
{
    Xoodyak_Instance    instance;

    Xoodyak_Initialize(&instance, NULL, 0, NULL, 0, NULL, 0);
 8002dc8:	2300      	movs	r3, #0
{
 8002dca:	b570      	push	{r4, r5, r6, lr}
 8002dcc:	000d      	movs	r5, r1
 8002dce:	0016      	movs	r6, r2
 8002dd0:	0004      	movs	r4, r0
 8002dd2:	b094      	sub	sp, #80	; 0x50
    Xoodyak_Initialize(&instance, NULL, 0, NULL, 0, NULL, 0);
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	a804      	add	r0, sp, #16
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	f7ff ffbe 	bl	8002d60 <Xoodyak_Initialize>
    Xoodyak_Absorb(&instance, in, (size_t)inlen);
 8002de4:	0032      	movs	r2, r6
 8002de6:	0029      	movs	r1, r5
 8002de8:	a804      	add	r0, sp, #16
 8002dea:	f7ff ffdd 	bl	8002da8 <Xoodyak_Absorb>
    Xoodyak_Squeeze(&instance, out, crypto_hash_BYTES);
 8002dee:	a804      	add	r0, sp, #16
 8002df0:	2220      	movs	r2, #32
 8002df2:	0021      	movs	r1, r4
 8002df4:	f7ff ffe2 	bl	8002dbc <Xoodyak_Squeeze>
        }
        printf("\n");
    }
    #endif
    return 0;
}
 8002df8:	2000      	movs	r0, #0
 8002dfa:	b014      	add	sp, #80	; 0x50
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)

08002e00 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8002e00:	b510      	push	{r4, lr}

	int ret = 0;

	get_memory_usage();
 8002e02:	f000 f951 	bl	80030a8 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8002e06:	f000 f8fd 	bl	8003004 <tick_msr_start>
	tick_msr_end();
 8002e0a:	f000 f911 	bl	8003030 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <genkat_benchmark_hash_aead+0x5c>)
 8002e10:	4913      	ldr	r1, [pc, #76]	; (8002e60 <genkat_benchmark_hash_aead+0x60>)
 8002e12:	4814      	ldr	r0, [pc, #80]	; (8002e64 <genkat_benchmark_hash_aead+0x64>)
 8002e14:	f000 f92a 	bl	800306c <lwc_printf>
	lwc_printf("Memory usage: ");
 8002e18:	4813      	ldr	r0, [pc, #76]	; (8002e68 <genkat_benchmark_hash_aead+0x68>)
 8002e1a:	f000 f927 	bl	800306c <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8002e1e:	4c13      	ldr	r4, [pc, #76]	; (8002e6c <genkat_benchmark_hash_aead+0x6c>)
 8002e20:	4813      	ldr	r0, [pc, #76]	; (8002e70 <genkat_benchmark_hash_aead+0x70>)
 8002e22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e24:	6b21      	ldr	r1, [r4, #48]	; 0x30
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002e26:	3420      	adds	r4, #32
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8002e28:	f000 f920 	bl	800306c <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002e2c:	cc0e      	ldmia	r4!, {r1, r2, r3}

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002e2e:	2480      	movs	r4, #128	; 0x80
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002e30:	4810      	ldr	r0, [pc, #64]	; (8002e74 <genkat_benchmark_hash_aead+0x74>)
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002e32:	0064      	lsls	r4, r4, #1
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002e34:	f000 f91a 	bl	800306c <lwc_printf>
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002e38:	0022      	movs	r2, r4
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	480e      	ldr	r0, [pc, #56]	; (8002e78 <genkat_benchmark_hash_aead+0x78>)
 8002e3e:	f000 f9ee 	bl	800321e <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8002e42:	0022      	movs	r2, r4
 8002e44:	2100      	movs	r1, #0
 8002e46:	480d      	ldr	r0, [pc, #52]	; (8002e7c <genkat_benchmark_hash_aead+0x7c>)
 8002e48:	f000 f9e9 	bl	800321e <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8002e4c:	0022      	movs	r2, r4
 8002e4e:	2100      	movs	r1, #0
 8002e50:	480b      	ldr	r0, [pc, #44]	; (8002e80 <genkat_benchmark_hash_aead+0x80>)
 8002e52:	f000 f9e4 	bl	800321e <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 8002e56:	f000 f815 	bl	8002e84 <hash_generate_test_vectors>
#endif

	return ret;
}
 8002e5a:	bd10      	pop	{r4, pc}
 8002e5c:	080047dc 	.word	0x080047dc
 8002e60:	0800485c 	.word	0x0800485c
 8002e64:	080048dc 	.word	0x080048dc
 8002e68:	08004928 	.word	0x08004928
 8002e6c:	20000678 	.word	0x20000678
 8002e70:	08004938 	.word	0x08004938
 8002e74:	08004960 	.word	0x08004960
 8002e78:	20000098 	.word	0x20000098
 8002e7c:	20000198 	.word	0x20000198
 8002e80:	20000298 	.word	0x20000298

08002e84 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	46de      	mov	lr, fp
 8002e88:	4657      	mov	r7, sl
 8002e8a:	4645      	mov	r5, r8
 8002e8c:	464e      	mov	r6, r9

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;

	init_buffer(msg, sizeof(msg));
 8002e8e:	2280      	movs	r2, #128	; 0x80
int hash_generate_test_vectors(){
 8002e90:	b5e0      	push	{r5, r6, r7, lr}
 8002e92:	4c3b      	ldr	r4, [pc, #236]	; (8002f80 <hash_generate_test_vectors+0xfc>)

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002e94:	2500      	movs	r5, #0
int hash_generate_test_vectors(){
 8002e96:	44a5      	add	sp, r4
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002e98:	2400      	movs	r4, #0
	init_buffer(msg, sizeof(msg));
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	00d2      	lsls	r2, r2, #3
 8002e9e:	a80a      	add	r0, sp, #40	; 0x28
 8002ea0:	f000 f89c 	bl	8002fdc <init_buffer>
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <hash_generate_test_vectors+0x100>)
 8002ea6:	4f38      	ldr	r7, [pc, #224]	; (8002f88 <hash_generate_test_vectors+0x104>)
 8002ea8:	4699      	mov	r9, r3
 8002eaa:	4b38      	ldr	r3, [pc, #224]	; (8002f8c <hash_generate_test_vectors+0x108>)
 8002eac:	469a      	mov	sl, r3
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <hash_generate_test_vectors+0x10c>)
 8002eb0:	4698      	mov	r8, r3
		tick_msr_end();

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;

		if(ret_val == 0) {
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002eb2:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <hash_generate_test_vectors+0x110>)
 8002eb4:	469b      	mov	fp, r3
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <hash_generate_test_vectors+0x114>)
 8002eb8:	9301      	str	r3, [sp, #4]
		lwc_printf("msg_len:%6d ", (int)mlen);
 8002eba:	0021      	movs	r1, r4
 8002ebc:	4648      	mov	r0, r9
 8002ebe:	f000 f8d5 	bl	800306c <lwc_printf>
		tick_msr_start();
 8002ec2:	f000 f89f 	bl	8003004 <tick_msr_start>
		ret_val = crypto_hash(digest, msg, mlen);
 8002ec6:	0022      	movs	r2, r4
 8002ec8:	002b      	movs	r3, r5
 8002eca:	a90a      	add	r1, sp, #40	; 0x28
 8002ecc:	a802      	add	r0, sp, #8
 8002ece:	f7ff ff7b 	bl	8002dc8 <crypto_hash>
 8002ed2:	0006      	movs	r6, r0
		tick_msr_end();
 8002ed4:	f000 f8ac 	bl	8003030 <tick_msr_end>
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8002ed8:	4652      	mov	r2, sl
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6811      	ldr	r1, [r2, #0]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	603a      	str	r2, [r7, #0]
 8002ee2:	4642      	mov	r2, r8
 8002ee4:	009b      	lsls	r3, r3, #2
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002ee6:	17c8      	asrs	r0, r1, #31
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8002ee8:	50d1      	str	r1, [r2, r3]
		if(ret_val == 0) {
 8002eea:	2e00      	cmp	r6, #0
 8002eec:	d144      	bne.n	8002f78 <hash_generate_test_vectors+0xf4>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002eee:	220f      	movs	r2, #15
 8002ef0:	465b      	mov	r3, fp
 8002ef2:	4002      	ands	r2, r0
 8002ef4:	1852      	adds	r2, r2, r1
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	9801      	ldr	r0, [sp, #4]
 8002efa:	1112      	asrs	r2, r2, #4
 8002efc:	f000 f8b6 	bl	800306c <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8002f00:	0023      	movs	r3, r4
 8002f02:	432b      	orrs	r3, r5
 8002f04:	d032      	beq.n	8002f6c <hash_generate_test_vectors+0xe8>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002f06:	1924      	adds	r4, r4, r4
 8002f08:	416d      	adcs	r5, r5
 8002f0a:	2d00      	cmp	r5, #0
 8002f0c:	d103      	bne.n	8002f16 <hash_generate_test_vectors+0x92>
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	42a3      	cmp	r3, r4
 8002f14:	d2d1      	bcs.n	8002eba <hash_generate_test_vectors+0x36>
			mlen = 4;
		}
	}//end of for loop


	ticks_res_pos = 0;
 8002f16:	2300      	movs	r3, #0
	aead_hash_print_res("HASH");
 8002f18:	4820      	ldr	r0, [pc, #128]	; (8002f9c <hash_generate_test_vectors+0x118>)
	ticks_res_pos = 0;
 8002f1a:	603b      	str	r3, [r7, #0]
	aead_hash_print_res("HASH");
 8002f1c:	f000 f846 	bl	8002fac <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 8002f20:	481f      	ldr	r0, [pc, #124]	; (8002fa0 <hash_generate_test_vectors+0x11c>)
 8002f22:	f000 f8a3 	bl	800306c <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <hash_generate_test_vectors+0x120>)
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	2500      	movs	r5, #0
 8002f30:	4691      	mov	r9, r2
 8002f32:	469a      	mov	sl, r3

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 8002f34:	4640      	mov	r0, r8
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	0021      	movs	r1, r4
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	5882      	ldr	r2, [r0, r2]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	4648      	mov	r0, r9
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	f000 f892 	bl	800306c <lwc_printf>

		if(mlen==0){
 8002f48:	0023      	movs	r3, r4
 8002f4a:	432b      	orrs	r3, r5
 8002f4c:	d011      	beq.n	8002f72 <hash_generate_test_vectors+0xee>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002f4e:	1924      	adds	r4, r4, r4
 8002f50:	416d      	adcs	r5, r5
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	d101      	bne.n	8002f5a <hash_generate_test_vectors+0xd6>
 8002f56:	45a2      	cmp	sl, r4
 8002f58:	d2ec      	bcs.n	8002f34 <hash_generate_test_vectors+0xb0>
			mlen = 4;
		}
	}

	return ret_val;
}
 8002f5a:	0030      	movs	r0, r6
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <hash_generate_test_vectors+0x124>)
 8002f5e:	449d      	add	sp, r3
 8002f60:	bcf0      	pop	{r4, r5, r6, r7}
 8002f62:	46bb      	mov	fp, r7
 8002f64:	46b2      	mov	sl, r6
 8002f66:	46a9      	mov	r9, r5
 8002f68:	46a0      	mov	r8, r4
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002f6c:	2408      	movs	r4, #8
 8002f6e:	2500      	movs	r5, #0
 8002f70:	e7a3      	b.n	8002eba <hash_generate_test_vectors+0x36>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002f72:	2408      	movs	r4, #8
 8002f74:	2500      	movs	r5, #0
 8002f76:	e7dd      	b.n	8002f34 <hash_generate_test_vectors+0xb0>
			ret_val = KAT_CRYPTO_FAILURE;
 8002f78:	2604      	movs	r6, #4
 8002f7a:	4276      	negs	r6, r6
 8002f7c:	e7cb      	b.n	8002f16 <hash_generate_test_vectors+0x92>
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	fffffbd4 	.word	0xfffffbd4
 8002f84:	0800498c 	.word	0x0800498c
 8002f88:	20000398 	.word	0x20000398
 8002f8c:	20000090 	.word	0x20000090
 8002f90:	20000298 	.word	0x20000298
 8002f94:	20000094 	.word	0x20000094
 8002f98:	0800499c 	.word	0x0800499c
 8002f9c:	080049b8 	.word	0x080049b8
 8002fa0:	080049c0 	.word	0x080049c0
 8002fa4:	080049d0 	.word	0x080049d0
 8002fa8:	0000042c 	.word	0x0000042c

08002fac <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 8002fac:	0001      	movs	r1, r0
 8002fae:	b510      	push	{r4, lr}
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <aead_hash_print_res+0x1c>)
 8002fb2:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <aead_hash_print_res+0x20>)
 8002fb4:	4806      	ldr	r0, [pc, #24]	; (8002fd0 <aead_hash_print_res+0x24>)
 8002fb6:	f000 f859 	bl	800306c <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002fba:	4906      	ldr	r1, [pc, #24]	; (8002fd4 <aead_hash_print_res+0x28>)
 8002fbc:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <aead_hash_print_res+0x2c>)
 8002fbe:	3120      	adds	r1, #32
 8002fc0:	c90e      	ldmia	r1, {r1, r2, r3}
 8002fc2:	f000 f853 	bl	800306c <lwc_printf>
}
 8002fc6:	bd10      	pop	{r4, pc}
 8002fc8:	080047dc 	.word	0x080047dc
 8002fcc:	0800485c 	.word	0x0800485c
 8002fd0:	080049dc 	.word	0x080049dc
 8002fd4:	20000678 	.word	0x20000678
 8002fd8:	08004a1c 	.word	0x08004a1c

08002fdc <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d008      	beq.n	8002ff2 <init_buffer+0x16>
		buffer[i] = (unsigned char) i + '0';
 8002fe0:	2130      	movs	r1, #48	; 0x30
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	1882      	adds	r2, r0, r2
		buffer[i] = (unsigned char) i + '0';
 8002fe6:	1a08      	subs	r0, r1, r0
 8002fe8:	18c1      	adds	r1, r0, r3
 8002fea:	7019      	strb	r1, [r3, #0]
 8002fec:	3301      	adds	r3, #1
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d1fa      	bne.n	8002fe8 <init_buffer+0xc>
	}
}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 8002ff4:	4a02      	ldr	r2, [pc, #8]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	4770      	bx	lr
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	2000039c 	.word	0x2000039c

08003004 <tick_msr_start>:

void tick_msr_start(void) {

	tim_per_elp_cnt = 0;
 8003004:	2200      	movs	r2, #0
void tick_msr_start(void) {
 8003006:	b510      	push	{r4, lr}
	htim6.Instance->CNT = 0;
 8003008:	4c06      	ldr	r4, [pc, #24]	; (8003024 <tick_msr_start+0x20>)
	tim_per_elp_cnt = 0;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <tick_msr_start+0x24>)
	htim6.Instance->CNT = 0;
 800300c:	6821      	ldr	r1, [r4, #0]
	tim_per_elp_cnt = 0;
 800300e:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8003010:	624a      	str	r2, [r1, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8003012:	f7fd fbd1 	bl	80007b8 <HAL_GetTick>
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <tick_msr_start+0x28>)
 8003018:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800301a:	0020      	movs	r0, r4
 800301c:	f7fe fbe2 	bl	80017e4 <HAL_TIM_Base_Start_IT>
}
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	2000062c 	.word	0x2000062c
 8003028:	2000039c 	.word	0x2000039c
 800302c:	20000094 	.word	0x20000094

08003030 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003030:	b510      	push	{r4, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 8003032:	4c0a      	ldr	r4, [pc, #40]	; (800305c <tick_msr_end+0x2c>)
 8003034:	0020      	movs	r0, r4
 8003036:	f7fe fc27 	bl	8001888 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <tick_msr_end+0x30>)
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003042:	4c08      	ldr	r4, [pc, #32]	; (8003064 <tick_msr_end+0x34>)
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	4313      	orrs	r3, r2
 8003048:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 800304a:	f7fd fbb5 	bl	80007b8 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	4a05      	ldr	r2, [pc, #20]	; (8003068 <tick_msr_end+0x38>)
	return gb_tick_cnt;
 8003052:	6820      	ldr	r0, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8003054:	6811      	ldr	r1, [r2, #0]
 8003056:	1a5b      	subs	r3, r3, r1
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bd10      	pop	{r4, pc}
 800305c:	2000062c 	.word	0x2000062c
 8003060:	2000039c 	.word	0x2000039c
 8003064:	20000090 	.word	0x20000090
 8003068:	20000094 	.word	0x20000094

0800306c <lwc_printf>:

void lwc_printf(const char *format, ...) {
 800306c:	b40f      	push	{r0, r1, r2, r3}
 800306e:	b530      	push	{r4, r5, lr}
 8003070:	b083      	sub	sp, #12
 8003072:	aa06      	add	r2, sp, #24

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
	vsprintf(dbg_out_buf, format, args);
 8003074:	4c0a      	ldr	r4, [pc, #40]	; (80030a0 <lwc_printf+0x34>)
void lwc_printf(const char *format, ...) {
 8003076:	ca02      	ldmia	r2!, {r1}
	vsprintf(dbg_out_buf, format, args);
 8003078:	0020      	movs	r0, r4
	va_start(args, format);
 800307a:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 800307c:	f000 fbd0 	bl	8003820 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8003080:	0020      	movs	r0, r4
 8003082:	f7fd f841 	bl	8000108 <strlen>
 8003086:	4d07      	ldr	r5, [pc, #28]	; (80030a4 <lwc_printf+0x38>)
 8003088:	b282      	uxth	r2, r0
 800308a:	2364      	movs	r3, #100	; 0x64
 800308c:	0021      	movs	r1, r4
 800308e:	0028      	movs	r0, r5
 8003090:	f7fe fea0 	bl	8001dd4 <HAL_UART_Transmit>
}
 8003094:	b003      	add	sp, #12
 8003096:	bc30      	pop	{r4, r5}
 8003098:	bc08      	pop	{r3}
 800309a:	b004      	add	sp, #16
 800309c:	4718      	bx	r3
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	200003a0 	.word	0x200003a0
 80030a4:	200005a8 	.word	0x200005a8

080030a8 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <get_memory_usage+0x98>)
 80030ae:	2234      	movs	r2, #52	; 0x34
 80030b0:	2100      	movs	r1, #0
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f8b3 	bl	800321e <memset>

	mem_stat.flash_start_adr = 0x8000000;
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <get_memory_usage+0x98>)
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	0512      	lsls	r2, r2, #20
 80030be:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 80030c0:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <get_memory_usage+0x98>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <get_memory_usage+0x98>)
 80030c6:	605a      	str	r2, [r3, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <get_memory_usage+0x9c>)
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <get_memory_usage+0x98>)
 80030cc:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <get_memory_usage+0xa0>)
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <get_memory_usage+0x98>)
 80030d2:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <get_memory_usage+0xa4>)
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <get_memory_usage+0x98>)
 80030d8:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 80030da:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <get_memory_usage+0xa8>)
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <get_memory_usage+0x98>)
 80030de:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <get_memory_usage+0xac>)
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <get_memory_usage+0x98>)
 80030e4:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 80030e6:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <get_memory_usage+0xb0>)
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <get_memory_usage+0x98>)
 80030ea:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <get_memory_usage+0x98>)
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b13      	ldr	r3, [pc, #76]	; (8003140 <get_memory_usage+0x98>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	1ad2      	subs	r2, r2, r3
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <get_memory_usage+0x98>)
 80030f8:	621a      	str	r2, [r3, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <get_memory_usage+0x98>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <get_memory_usage+0x98>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	1ad2      	subs	r2, r2, r3
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <get_memory_usage+0x98>)
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <get_memory_usage+0x98>)
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <get_memory_usage+0x98>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	1ad2      	subs	r2, r2, r3
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <get_memory_usage+0x98>)
 8003114:	629a      	str	r2, [r3, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <get_memory_usage+0x98>)
 8003118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <get_memory_usage+0x98>)
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	18d2      	adds	r2, r2, r3
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <get_memory_usage+0x98>)
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <get_memory_usage+0x98>)
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <get_memory_usage+0x98>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	18d2      	adds	r2, r2, r3
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <get_memory_usage+0x98>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	4b02      	ldr	r3, [pc, #8]	; (8003140 <get_memory_usage+0x98>)
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	20000678 	.word	0x20000678
 8003144:	08004578 	.word	0x08004578
 8003148:	20000070 	.word	0x20000070
 800314c:	200006bc 	.word	0x200006bc
 8003150:	20000000 	.word	0x20000000
 8003154:	20000070 	.word	0x20000070
 8003158:	08004b20 	.word	0x08004b20

0800315c <__assert_func>:
 800315c:	b530      	push	{r4, r5, lr}
 800315e:	0014      	movs	r4, r2
 8003160:	001a      	movs	r2, r3
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <__assert_func+0x2c>)
 8003164:	0005      	movs	r5, r0
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b085      	sub	sp, #20
 800316a:	68d8      	ldr	r0, [r3, #12]
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <__assert_func+0x30>)
 800316e:	2c00      	cmp	r4, #0
 8003170:	d101      	bne.n	8003176 <__assert_func+0x1a>
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <__assert_func+0x34>)
 8003174:	001c      	movs	r4, r3
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	9100      	str	r1, [sp, #0]
 800317a:	002b      	movs	r3, r5
 800317c:	4905      	ldr	r1, [pc, #20]	; (8003194 <__assert_func+0x38>)
 800317e:	9402      	str	r4, [sp, #8]
 8003180:	f000 f810 	bl	80031a4 <fiprintf>
 8003184:	f000 fc26 	bl	80039d4 <abort>
 8003188:	2000000c 	.word	0x2000000c
 800318c:	08004a44 	.word	0x08004a44
 8003190:	08004a7f 	.word	0x08004a7f
 8003194:	08004a51 	.word	0x08004a51

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	2000000c 	.word	0x2000000c

080031a4 <fiprintf>:
 80031a4:	b40e      	push	{r1, r2, r3}
 80031a6:	b503      	push	{r0, r1, lr}
 80031a8:	0001      	movs	r1, r0
 80031aa:	ab03      	add	r3, sp, #12
 80031ac:	4804      	ldr	r0, [pc, #16]	; (80031c0 <fiprintf+0x1c>)
 80031ae:	cb04      	ldmia	r3!, {r2}
 80031b0:	6800      	ldr	r0, [r0, #0]
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	f000 f862 	bl	800327c <_vfiprintf_r>
 80031b8:	b002      	add	sp, #8
 80031ba:	bc08      	pop	{r3}
 80031bc:	b003      	add	sp, #12
 80031be:	4718      	bx	r3
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2600      	movs	r6, #0
 80031c8:	4d0c      	ldr	r5, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	2600      	movs	r6, #0
 80031d6:	f001 f9c3 	bl	8004560 <_init>
 80031da:	4d0a      	ldr	r5, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	00b3      	lsls	r3, r6, #2
 80031ea:	58eb      	ldr	r3, [r5, r3]
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	00b3      	lsls	r3, r6, #2
 80031f4:	58eb      	ldr	r3, [r5, r3]
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08004b18 	.word	0x08004b18
 8003200:	08004b18 	.word	0x08004b18
 8003204:	08004b18 	.word	0x08004b18
 8003208:	08004b1c 	.word	0x08004b1c

0800320c <memcpy>:
 800320c:	2300      	movs	r3, #0
 800320e:	b510      	push	{r4, lr}
 8003210:	429a      	cmp	r2, r3
 8003212:	d100      	bne.n	8003216 <memcpy+0xa>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	5ccc      	ldrb	r4, [r1, r3]
 8003218:	54c4      	strb	r4, [r0, r3]
 800321a:	3301      	adds	r3, #1
 800321c:	e7f8      	b.n	8003210 <memcpy+0x4>

0800321e <memset>:
 800321e:	0003      	movs	r3, r0
 8003220:	1882      	adds	r2, r0, r2
 8003222:	4293      	cmp	r3, r2
 8003224:	d100      	bne.n	8003228 <memset+0xa>
 8003226:	4770      	bx	lr
 8003228:	7019      	strb	r1, [r3, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	e7f9      	b.n	8003222 <memset+0x4>

0800322e <__sfputc_r>:
 800322e:	6893      	ldr	r3, [r2, #8]
 8003230:	b510      	push	{r4, lr}
 8003232:	3b01      	subs	r3, #1
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	da04      	bge.n	8003244 <__sfputc_r+0x16>
 800323a:	6994      	ldr	r4, [r2, #24]
 800323c:	42a3      	cmp	r3, r4
 800323e:	db07      	blt.n	8003250 <__sfputc_r+0x22>
 8003240:	290a      	cmp	r1, #10
 8003242:	d005      	beq.n	8003250 <__sfputc_r+0x22>
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	1c58      	adds	r0, r3, #1
 8003248:	6010      	str	r0, [r2, #0]
 800324a:	7019      	strb	r1, [r3, #0]
 800324c:	0008      	movs	r0, r1
 800324e:	bd10      	pop	{r4, pc}
 8003250:	f000 faf2 	bl	8003838 <__swbuf_r>
 8003254:	0001      	movs	r1, r0
 8003256:	e7f9      	b.n	800324c <__sfputc_r+0x1e>

08003258 <__sfputs_r>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	0006      	movs	r6, r0
 800325c:	000f      	movs	r7, r1
 800325e:	0014      	movs	r4, r2
 8003260:	18d5      	adds	r5, r2, r3
 8003262:	42ac      	cmp	r4, r5
 8003264:	d101      	bne.n	800326a <__sfputs_r+0x12>
 8003266:	2000      	movs	r0, #0
 8003268:	e007      	b.n	800327a <__sfputs_r+0x22>
 800326a:	7821      	ldrb	r1, [r4, #0]
 800326c:	003a      	movs	r2, r7
 800326e:	0030      	movs	r0, r6
 8003270:	f7ff ffdd 	bl	800322e <__sfputc_r>
 8003274:	3401      	adds	r4, #1
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	d1f3      	bne.n	8003262 <__sfputs_r+0xa>
 800327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800327c <_vfiprintf_r>:
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	b0a1      	sub	sp, #132	; 0x84
 8003280:	0006      	movs	r6, r0
 8003282:	000c      	movs	r4, r1
 8003284:	001f      	movs	r7, r3
 8003286:	9203      	str	r2, [sp, #12]
 8003288:	2800      	cmp	r0, #0
 800328a:	d004      	beq.n	8003296 <_vfiprintf_r+0x1a>
 800328c:	6983      	ldr	r3, [r0, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <_vfiprintf_r+0x1a>
 8003292:	f000 fcd5 	bl	8003c40 <__sinit>
 8003296:	4b8e      	ldr	r3, [pc, #568]	; (80034d0 <_vfiprintf_r+0x254>)
 8003298:	429c      	cmp	r4, r3
 800329a:	d11c      	bne.n	80032d6 <_vfiprintf_r+0x5a>
 800329c:	6874      	ldr	r4, [r6, #4]
 800329e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032a0:	07db      	lsls	r3, r3, #31
 80032a2:	d405      	bmi.n	80032b0 <_vfiprintf_r+0x34>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	059b      	lsls	r3, r3, #22
 80032a8:	d402      	bmi.n	80032b0 <_vfiprintf_r+0x34>
 80032aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ac:	f000 fd69 	bl	8003d82 <__retarget_lock_acquire_recursive>
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	071b      	lsls	r3, r3, #28
 80032b4:	d502      	bpl.n	80032bc <_vfiprintf_r+0x40>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <_vfiprintf_r+0x7c>
 80032bc:	0021      	movs	r1, r4
 80032be:	0030      	movs	r0, r6
 80032c0:	f000 fb10 	bl	80038e4 <__swsetup_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d017      	beq.n	80032f8 <_vfiprintf_r+0x7c>
 80032c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032ca:	07db      	lsls	r3, r3, #31
 80032cc:	d50d      	bpl.n	80032ea <_vfiprintf_r+0x6e>
 80032ce:	2001      	movs	r0, #1
 80032d0:	4240      	negs	r0, r0
 80032d2:	b021      	add	sp, #132	; 0x84
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d6:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <_vfiprintf_r+0x258>)
 80032d8:	429c      	cmp	r4, r3
 80032da:	d101      	bne.n	80032e0 <_vfiprintf_r+0x64>
 80032dc:	68b4      	ldr	r4, [r6, #8]
 80032de:	e7de      	b.n	800329e <_vfiprintf_r+0x22>
 80032e0:	4b7d      	ldr	r3, [pc, #500]	; (80034d8 <_vfiprintf_r+0x25c>)
 80032e2:	429c      	cmp	r4, r3
 80032e4:	d1db      	bne.n	800329e <_vfiprintf_r+0x22>
 80032e6:	68f4      	ldr	r4, [r6, #12]
 80032e8:	e7d9      	b.n	800329e <_vfiprintf_r+0x22>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	059b      	lsls	r3, r3, #22
 80032ee:	d4ee      	bmi.n	80032ce <_vfiprintf_r+0x52>
 80032f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032f2:	f000 fd47 	bl	8003d84 <__retarget_lock_release_recursive>
 80032f6:	e7ea      	b.n	80032ce <_vfiprintf_r+0x52>
 80032f8:	2300      	movs	r3, #0
 80032fa:	ad08      	add	r5, sp, #32
 80032fc:	616b      	str	r3, [r5, #20]
 80032fe:	3320      	adds	r3, #32
 8003300:	766b      	strb	r3, [r5, #25]
 8003302:	3310      	adds	r3, #16
 8003304:	76ab      	strb	r3, [r5, #26]
 8003306:	9707      	str	r7, [sp, #28]
 8003308:	9f03      	ldr	r7, [sp, #12]
 800330a:	783b      	ldrb	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <_vfiprintf_r+0x98>
 8003310:	2b25      	cmp	r3, #37	; 0x25
 8003312:	d14e      	bne.n	80033b2 <_vfiprintf_r+0x136>
 8003314:	9b03      	ldr	r3, [sp, #12]
 8003316:	1afb      	subs	r3, r7, r3
 8003318:	9305      	str	r3, [sp, #20]
 800331a:	9b03      	ldr	r3, [sp, #12]
 800331c:	429f      	cmp	r7, r3
 800331e:	d00d      	beq.n	800333c <_vfiprintf_r+0xc0>
 8003320:	9b05      	ldr	r3, [sp, #20]
 8003322:	0021      	movs	r1, r4
 8003324:	0030      	movs	r0, r6
 8003326:	9a03      	ldr	r2, [sp, #12]
 8003328:	f7ff ff96 	bl	8003258 <__sfputs_r>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d100      	bne.n	8003332 <_vfiprintf_r+0xb6>
 8003330:	e0b5      	b.n	800349e <_vfiprintf_r+0x222>
 8003332:	696a      	ldr	r2, [r5, #20]
 8003334:	9b05      	ldr	r3, [sp, #20]
 8003336:	4694      	mov	ip, r2
 8003338:	4463      	add	r3, ip
 800333a:	616b      	str	r3, [r5, #20]
 800333c:	783b      	ldrb	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d100      	bne.n	8003344 <_vfiprintf_r+0xc8>
 8003342:	e0ac      	b.n	800349e <_vfiprintf_r+0x222>
 8003344:	2201      	movs	r2, #1
 8003346:	1c7b      	adds	r3, r7, #1
 8003348:	9303      	str	r3, [sp, #12]
 800334a:	2300      	movs	r3, #0
 800334c:	4252      	negs	r2, r2
 800334e:	606a      	str	r2, [r5, #4]
 8003350:	a904      	add	r1, sp, #16
 8003352:	3254      	adds	r2, #84	; 0x54
 8003354:	1852      	adds	r2, r2, r1
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	60eb      	str	r3, [r5, #12]
 800335a:	60ab      	str	r3, [r5, #8]
 800335c:	7013      	strb	r3, [r2, #0]
 800335e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	2205      	movs	r2, #5
 8003364:	7819      	ldrb	r1, [r3, #0]
 8003366:	485d      	ldr	r0, [pc, #372]	; (80034dc <_vfiprintf_r+0x260>)
 8003368:	f000 fd7a 	bl	8003e60 <memchr>
 800336c:	9b03      	ldr	r3, [sp, #12]
 800336e:	1c5f      	adds	r7, r3, #1
 8003370:	2800      	cmp	r0, #0
 8003372:	d120      	bne.n	80033b6 <_vfiprintf_r+0x13a>
 8003374:	682a      	ldr	r2, [r5, #0]
 8003376:	06d3      	lsls	r3, r2, #27
 8003378:	d504      	bpl.n	8003384 <_vfiprintf_r+0x108>
 800337a:	2353      	movs	r3, #83	; 0x53
 800337c:	a904      	add	r1, sp, #16
 800337e:	185b      	adds	r3, r3, r1
 8003380:	2120      	movs	r1, #32
 8003382:	7019      	strb	r1, [r3, #0]
 8003384:	0713      	lsls	r3, r2, #28
 8003386:	d504      	bpl.n	8003392 <_vfiprintf_r+0x116>
 8003388:	2353      	movs	r3, #83	; 0x53
 800338a:	a904      	add	r1, sp, #16
 800338c:	185b      	adds	r3, r3, r1
 800338e:	212b      	movs	r1, #43	; 0x2b
 8003390:	7019      	strb	r1, [r3, #0]
 8003392:	9b03      	ldr	r3, [sp, #12]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b2a      	cmp	r3, #42	; 0x2a
 8003398:	d016      	beq.n	80033c8 <_vfiprintf_r+0x14c>
 800339a:	2100      	movs	r1, #0
 800339c:	68eb      	ldr	r3, [r5, #12]
 800339e:	9f03      	ldr	r7, [sp, #12]
 80033a0:	783a      	ldrb	r2, [r7, #0]
 80033a2:	1c78      	adds	r0, r7, #1
 80033a4:	3a30      	subs	r2, #48	; 0x30
 80033a6:	4684      	mov	ip, r0
 80033a8:	2a09      	cmp	r2, #9
 80033aa:	d94f      	bls.n	800344c <_vfiprintf_r+0x1d0>
 80033ac:	2900      	cmp	r1, #0
 80033ae:	d111      	bne.n	80033d4 <_vfiprintf_r+0x158>
 80033b0:	e017      	b.n	80033e2 <_vfiprintf_r+0x166>
 80033b2:	3701      	adds	r7, #1
 80033b4:	e7a9      	b.n	800330a <_vfiprintf_r+0x8e>
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <_vfiprintf_r+0x260>)
 80033b8:	682a      	ldr	r2, [r5, #0]
 80033ba:	1ac0      	subs	r0, r0, r3
 80033bc:	2301      	movs	r3, #1
 80033be:	4083      	lsls	r3, r0
 80033c0:	4313      	orrs	r3, r2
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	9703      	str	r7, [sp, #12]
 80033c6:	e7cb      	b.n	8003360 <_vfiprintf_r+0xe4>
 80033c8:	9b07      	ldr	r3, [sp, #28]
 80033ca:	1d19      	adds	r1, r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	9107      	str	r1, [sp, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db01      	blt.n	80033d8 <_vfiprintf_r+0x15c>
 80033d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80033d6:	e004      	b.n	80033e2 <_vfiprintf_r+0x166>
 80033d8:	425b      	negs	r3, r3
 80033da:	60eb      	str	r3, [r5, #12]
 80033dc:	2302      	movs	r3, #2
 80033de:	4313      	orrs	r3, r2
 80033e0:	602b      	str	r3, [r5, #0]
 80033e2:	783b      	ldrb	r3, [r7, #0]
 80033e4:	2b2e      	cmp	r3, #46	; 0x2e
 80033e6:	d10a      	bne.n	80033fe <_vfiprintf_r+0x182>
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b2a      	cmp	r3, #42	; 0x2a
 80033ec:	d137      	bne.n	800345e <_vfiprintf_r+0x1e2>
 80033ee:	9b07      	ldr	r3, [sp, #28]
 80033f0:	3702      	adds	r7, #2
 80033f2:	1d1a      	adds	r2, r3, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	9207      	str	r2, [sp, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db2d      	blt.n	8003458 <_vfiprintf_r+0x1dc>
 80033fc:	9309      	str	r3, [sp, #36]	; 0x24
 80033fe:	2203      	movs	r2, #3
 8003400:	7839      	ldrb	r1, [r7, #0]
 8003402:	4837      	ldr	r0, [pc, #220]	; (80034e0 <_vfiprintf_r+0x264>)
 8003404:	f000 fd2c 	bl	8003e60 <memchr>
 8003408:	2800      	cmp	r0, #0
 800340a:	d007      	beq.n	800341c <_vfiprintf_r+0x1a0>
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <_vfiprintf_r+0x264>)
 800340e:	682a      	ldr	r2, [r5, #0]
 8003410:	1ac0      	subs	r0, r0, r3
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	4083      	lsls	r3, r0
 8003416:	4313      	orrs	r3, r2
 8003418:	3701      	adds	r7, #1
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	7839      	ldrb	r1, [r7, #0]
 800341e:	1c7b      	adds	r3, r7, #1
 8003420:	2206      	movs	r2, #6
 8003422:	4830      	ldr	r0, [pc, #192]	; (80034e4 <_vfiprintf_r+0x268>)
 8003424:	9303      	str	r3, [sp, #12]
 8003426:	7629      	strb	r1, [r5, #24]
 8003428:	f000 fd1a 	bl	8003e60 <memchr>
 800342c:	2800      	cmp	r0, #0
 800342e:	d045      	beq.n	80034bc <_vfiprintf_r+0x240>
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <_vfiprintf_r+0x26c>)
 8003432:	2b00      	cmp	r3, #0
 8003434:	d127      	bne.n	8003486 <_vfiprintf_r+0x20a>
 8003436:	2207      	movs	r2, #7
 8003438:	9b07      	ldr	r3, [sp, #28]
 800343a:	3307      	adds	r3, #7
 800343c:	4393      	bics	r3, r2
 800343e:	3308      	adds	r3, #8
 8003440:	9307      	str	r3, [sp, #28]
 8003442:	696b      	ldr	r3, [r5, #20]
 8003444:	9a04      	ldr	r2, [sp, #16]
 8003446:	189b      	adds	r3, r3, r2
 8003448:	616b      	str	r3, [r5, #20]
 800344a:	e75d      	b.n	8003308 <_vfiprintf_r+0x8c>
 800344c:	210a      	movs	r1, #10
 800344e:	434b      	muls	r3, r1
 8003450:	4667      	mov	r7, ip
 8003452:	189b      	adds	r3, r3, r2
 8003454:	3909      	subs	r1, #9
 8003456:	e7a3      	b.n	80033a0 <_vfiprintf_r+0x124>
 8003458:	2301      	movs	r3, #1
 800345a:	425b      	negs	r3, r3
 800345c:	e7ce      	b.n	80033fc <_vfiprintf_r+0x180>
 800345e:	2300      	movs	r3, #0
 8003460:	001a      	movs	r2, r3
 8003462:	3701      	adds	r7, #1
 8003464:	606b      	str	r3, [r5, #4]
 8003466:	7839      	ldrb	r1, [r7, #0]
 8003468:	1c78      	adds	r0, r7, #1
 800346a:	3930      	subs	r1, #48	; 0x30
 800346c:	4684      	mov	ip, r0
 800346e:	2909      	cmp	r1, #9
 8003470:	d903      	bls.n	800347a <_vfiprintf_r+0x1fe>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0c3      	beq.n	80033fe <_vfiprintf_r+0x182>
 8003476:	9209      	str	r2, [sp, #36]	; 0x24
 8003478:	e7c1      	b.n	80033fe <_vfiprintf_r+0x182>
 800347a:	230a      	movs	r3, #10
 800347c:	435a      	muls	r2, r3
 800347e:	4667      	mov	r7, ip
 8003480:	1852      	adds	r2, r2, r1
 8003482:	3b09      	subs	r3, #9
 8003484:	e7ef      	b.n	8003466 <_vfiprintf_r+0x1ea>
 8003486:	ab07      	add	r3, sp, #28
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	0022      	movs	r2, r4
 800348c:	0029      	movs	r1, r5
 800348e:	0030      	movs	r0, r6
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <_vfiprintf_r+0x270>)
 8003492:	e000      	b.n	8003496 <_vfiprintf_r+0x21a>
 8003494:	bf00      	nop
 8003496:	9004      	str	r0, [sp, #16]
 8003498:	9b04      	ldr	r3, [sp, #16]
 800349a:	3301      	adds	r3, #1
 800349c:	d1d1      	bne.n	8003442 <_vfiprintf_r+0x1c6>
 800349e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034a0:	07db      	lsls	r3, r3, #31
 80034a2:	d405      	bmi.n	80034b0 <_vfiprintf_r+0x234>
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	059b      	lsls	r3, r3, #22
 80034a8:	d402      	bmi.n	80034b0 <_vfiprintf_r+0x234>
 80034aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ac:	f000 fc6a 	bl	8003d84 <__retarget_lock_release_recursive>
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	065b      	lsls	r3, r3, #25
 80034b4:	d500      	bpl.n	80034b8 <_vfiprintf_r+0x23c>
 80034b6:	e70a      	b.n	80032ce <_vfiprintf_r+0x52>
 80034b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034ba:	e70a      	b.n	80032d2 <_vfiprintf_r+0x56>
 80034bc:	ab07      	add	r3, sp, #28
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	0022      	movs	r2, r4
 80034c2:	0029      	movs	r1, r5
 80034c4:	0030      	movs	r0, r6
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <_vfiprintf_r+0x270>)
 80034c8:	f000 f882 	bl	80035d0 <_printf_i>
 80034cc:	e7e3      	b.n	8003496 <_vfiprintf_r+0x21a>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	08004ad8 	.word	0x08004ad8
 80034d4:	08004af8 	.word	0x08004af8
 80034d8:	08004ab8 	.word	0x08004ab8
 80034dc:	08004a84 	.word	0x08004a84
 80034e0:	08004a8a 	.word	0x08004a8a
 80034e4:	08004a8e 	.word	0x08004a8e
 80034e8:	00000000 	.word	0x00000000
 80034ec:	08003259 	.word	0x08003259

080034f0 <_printf_common>:
 80034f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034f2:	0015      	movs	r5, r2
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	688a      	ldr	r2, [r1, #8]
 80034f8:	690b      	ldr	r3, [r1, #16]
 80034fa:	000c      	movs	r4, r1
 80034fc:	9000      	str	r0, [sp, #0]
 80034fe:	4293      	cmp	r3, r2
 8003500:	da00      	bge.n	8003504 <_printf_common+0x14>
 8003502:	0013      	movs	r3, r2
 8003504:	0022      	movs	r2, r4
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	3243      	adds	r2, #67	; 0x43
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	2a00      	cmp	r2, #0
 800350e:	d001      	beq.n	8003514 <_printf_common+0x24>
 8003510:	3301      	adds	r3, #1
 8003512:	602b      	str	r3, [r5, #0]
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	069b      	lsls	r3, r3, #26
 8003518:	d502      	bpl.n	8003520 <_printf_common+0x30>
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	3302      	adds	r3, #2
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	2306      	movs	r3, #6
 8003524:	0017      	movs	r7, r2
 8003526:	401f      	ands	r7, r3
 8003528:	421a      	tst	r2, r3
 800352a:	d027      	beq.n	800357c <_printf_common+0x8c>
 800352c:	0023      	movs	r3, r4
 800352e:	3343      	adds	r3, #67	; 0x43
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	0692      	lsls	r2, r2, #26
 800353a:	d430      	bmi.n	800359e <_printf_common+0xae>
 800353c:	0022      	movs	r2, r4
 800353e:	9901      	ldr	r1, [sp, #4]
 8003540:	9800      	ldr	r0, [sp, #0]
 8003542:	9e08      	ldr	r6, [sp, #32]
 8003544:	3243      	adds	r2, #67	; 0x43
 8003546:	47b0      	blx	r6
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d025      	beq.n	8003598 <_printf_common+0xa8>
 800354c:	2306      	movs	r3, #6
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	682a      	ldr	r2, [r5, #0]
 8003552:	68e1      	ldr	r1, [r4, #12]
 8003554:	2500      	movs	r5, #0
 8003556:	4003      	ands	r3, r0
 8003558:	2b04      	cmp	r3, #4
 800355a:	d103      	bne.n	8003564 <_printf_common+0x74>
 800355c:	1a8d      	subs	r5, r1, r2
 800355e:	43eb      	mvns	r3, r5
 8003560:	17db      	asrs	r3, r3, #31
 8003562:	401d      	ands	r5, r3
 8003564:	68a3      	ldr	r3, [r4, #8]
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	4293      	cmp	r3, r2
 800356a:	dd01      	ble.n	8003570 <_printf_common+0x80>
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	18ed      	adds	r5, r5, r3
 8003570:	2700      	movs	r7, #0
 8003572:	42bd      	cmp	r5, r7
 8003574:	d120      	bne.n	80035b8 <_printf_common+0xc8>
 8003576:	2000      	movs	r0, #0
 8003578:	e010      	b.n	800359c <_printf_common+0xac>
 800357a:	3701      	adds	r7, #1
 800357c:	68e3      	ldr	r3, [r4, #12]
 800357e:	682a      	ldr	r2, [r5, #0]
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	42bb      	cmp	r3, r7
 8003584:	ddd2      	ble.n	800352c <_printf_common+0x3c>
 8003586:	0022      	movs	r2, r4
 8003588:	2301      	movs	r3, #1
 800358a:	9901      	ldr	r1, [sp, #4]
 800358c:	9800      	ldr	r0, [sp, #0]
 800358e:	9e08      	ldr	r6, [sp, #32]
 8003590:	3219      	adds	r2, #25
 8003592:	47b0      	blx	r6
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	d1f0      	bne.n	800357a <_printf_common+0x8a>
 8003598:	2001      	movs	r0, #1
 800359a:	4240      	negs	r0, r0
 800359c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800359e:	2030      	movs	r0, #48	; 0x30
 80035a0:	18e1      	adds	r1, r4, r3
 80035a2:	3143      	adds	r1, #67	; 0x43
 80035a4:	7008      	strb	r0, [r1, #0]
 80035a6:	0021      	movs	r1, r4
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	3145      	adds	r1, #69	; 0x45
 80035ac:	7809      	ldrb	r1, [r1, #0]
 80035ae:	18a2      	adds	r2, r4, r2
 80035b0:	3243      	adds	r2, #67	; 0x43
 80035b2:	3302      	adds	r3, #2
 80035b4:	7011      	strb	r1, [r2, #0]
 80035b6:	e7c1      	b.n	800353c <_printf_common+0x4c>
 80035b8:	0022      	movs	r2, r4
 80035ba:	2301      	movs	r3, #1
 80035bc:	9901      	ldr	r1, [sp, #4]
 80035be:	9800      	ldr	r0, [sp, #0]
 80035c0:	9e08      	ldr	r6, [sp, #32]
 80035c2:	321a      	adds	r2, #26
 80035c4:	47b0      	blx	r6
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	d0e6      	beq.n	8003598 <_printf_common+0xa8>
 80035ca:	3701      	adds	r7, #1
 80035cc:	e7d1      	b.n	8003572 <_printf_common+0x82>
	...

080035d0 <_printf_i>:
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	9206      	str	r2, [sp, #24]
 80035d6:	000a      	movs	r2, r1
 80035d8:	3243      	adds	r2, #67	; 0x43
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	9005      	str	r0, [sp, #20]
 80035de:	9204      	str	r2, [sp, #16]
 80035e0:	7e0a      	ldrb	r2, [r1, #24]
 80035e2:	000c      	movs	r4, r1
 80035e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035e6:	2a78      	cmp	r2, #120	; 0x78
 80035e8:	d806      	bhi.n	80035f8 <_printf_i+0x28>
 80035ea:	2a62      	cmp	r2, #98	; 0x62
 80035ec:	d808      	bhi.n	8003600 <_printf_i+0x30>
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d100      	bne.n	80035f4 <_printf_i+0x24>
 80035f2:	e0c0      	b.n	8003776 <_printf_i+0x1a6>
 80035f4:	2a58      	cmp	r2, #88	; 0x58
 80035f6:	d052      	beq.n	800369e <_printf_i+0xce>
 80035f8:	0026      	movs	r6, r4
 80035fa:	3642      	adds	r6, #66	; 0x42
 80035fc:	7032      	strb	r2, [r6, #0]
 80035fe:	e022      	b.n	8003646 <_printf_i+0x76>
 8003600:	0010      	movs	r0, r2
 8003602:	3863      	subs	r0, #99	; 0x63
 8003604:	2815      	cmp	r0, #21
 8003606:	d8f7      	bhi.n	80035f8 <_printf_i+0x28>
 8003608:	f7fc fd86 	bl	8000118 <__gnu_thumb1_case_shi>
 800360c:	001f0016 	.word	0x001f0016
 8003610:	fff6fff6 	.word	0xfff6fff6
 8003614:	fff6fff6 	.word	0xfff6fff6
 8003618:	fff6001f 	.word	0xfff6001f
 800361c:	fff6fff6 	.word	0xfff6fff6
 8003620:	00a8fff6 	.word	0x00a8fff6
 8003624:	009a0036 	.word	0x009a0036
 8003628:	fff6fff6 	.word	0xfff6fff6
 800362c:	fff600b9 	.word	0xfff600b9
 8003630:	fff60036 	.word	0xfff60036
 8003634:	009efff6 	.word	0x009efff6
 8003638:	0026      	movs	r6, r4
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	3642      	adds	r6, #66	; 0x42
 800363e:	1d11      	adds	r1, r2, #4
 8003640:	6019      	str	r1, [r3, #0]
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	7033      	strb	r3, [r6, #0]
 8003646:	2301      	movs	r3, #1
 8003648:	e0a7      	b.n	800379a <_printf_i+0x1ca>
 800364a:	6808      	ldr	r0, [r1, #0]
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	1d0a      	adds	r2, r1, #4
 8003650:	0605      	lsls	r5, r0, #24
 8003652:	d50b      	bpl.n	800366c <_printf_i+0x9c>
 8003654:	680d      	ldr	r5, [r1, #0]
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	2d00      	cmp	r5, #0
 800365a:	da03      	bge.n	8003664 <_printf_i+0x94>
 800365c:	232d      	movs	r3, #45	; 0x2d
 800365e:	9a04      	ldr	r2, [sp, #16]
 8003660:	426d      	negs	r5, r5
 8003662:	7013      	strb	r3, [r2, #0]
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <_printf_i+0x21c>)
 8003666:	270a      	movs	r7, #10
 8003668:	9303      	str	r3, [sp, #12]
 800366a:	e032      	b.n	80036d2 <_printf_i+0x102>
 800366c:	680d      	ldr	r5, [r1, #0]
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	0641      	lsls	r1, r0, #25
 8003672:	d5f1      	bpl.n	8003658 <_printf_i+0x88>
 8003674:	b22d      	sxth	r5, r5
 8003676:	e7ef      	b.n	8003658 <_printf_i+0x88>
 8003678:	680d      	ldr	r5, [r1, #0]
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	1d08      	adds	r0, r1, #4
 800367e:	6018      	str	r0, [r3, #0]
 8003680:	062e      	lsls	r6, r5, #24
 8003682:	d501      	bpl.n	8003688 <_printf_i+0xb8>
 8003684:	680d      	ldr	r5, [r1, #0]
 8003686:	e003      	b.n	8003690 <_printf_i+0xc0>
 8003688:	066d      	lsls	r5, r5, #25
 800368a:	d5fb      	bpl.n	8003684 <_printf_i+0xb4>
 800368c:	680d      	ldr	r5, [r1, #0]
 800368e:	b2ad      	uxth	r5, r5
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <_printf_i+0x21c>)
 8003692:	270a      	movs	r7, #10
 8003694:	9303      	str	r3, [sp, #12]
 8003696:	2a6f      	cmp	r2, #111	; 0x6f
 8003698:	d117      	bne.n	80036ca <_printf_i+0xfa>
 800369a:	2708      	movs	r7, #8
 800369c:	e015      	b.n	80036ca <_printf_i+0xfa>
 800369e:	3145      	adds	r1, #69	; 0x45
 80036a0:	700a      	strb	r2, [r1, #0]
 80036a2:	4a52      	ldr	r2, [pc, #328]	; (80037ec <_printf_i+0x21c>)
 80036a4:	9203      	str	r2, [sp, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	6821      	ldr	r1, [r4, #0]
 80036aa:	ca20      	ldmia	r2!, {r5}
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	0608      	lsls	r0, r1, #24
 80036b0:	d550      	bpl.n	8003754 <_printf_i+0x184>
 80036b2:	07cb      	lsls	r3, r1, #31
 80036b4:	d502      	bpl.n	80036bc <_printf_i+0xec>
 80036b6:	2320      	movs	r3, #32
 80036b8:	4319      	orrs	r1, r3
 80036ba:	6021      	str	r1, [r4, #0]
 80036bc:	2710      	movs	r7, #16
 80036be:	2d00      	cmp	r5, #0
 80036c0:	d103      	bne.n	80036ca <_printf_i+0xfa>
 80036c2:	2320      	movs	r3, #32
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	439a      	bics	r2, r3
 80036c8:	6022      	str	r2, [r4, #0]
 80036ca:	0023      	movs	r3, r4
 80036cc:	2200      	movs	r2, #0
 80036ce:	3343      	adds	r3, #67	; 0x43
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db03      	blt.n	80036e2 <_printf_i+0x112>
 80036da:	2204      	movs	r2, #4
 80036dc:	6821      	ldr	r1, [r4, #0]
 80036de:	4391      	bics	r1, r2
 80036e0:	6021      	str	r1, [r4, #0]
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	d102      	bne.n	80036ec <_printf_i+0x11c>
 80036e6:	9e04      	ldr	r6, [sp, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00c      	beq.n	8003706 <_printf_i+0x136>
 80036ec:	9e04      	ldr	r6, [sp, #16]
 80036ee:	0028      	movs	r0, r5
 80036f0:	0039      	movs	r1, r7
 80036f2:	f7fc fda1 	bl	8000238 <__aeabi_uidivmod>
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	3e01      	subs	r6, #1
 80036fa:	5c5b      	ldrb	r3, [r3, r1]
 80036fc:	7033      	strb	r3, [r6, #0]
 80036fe:	002b      	movs	r3, r5
 8003700:	0005      	movs	r5, r0
 8003702:	429f      	cmp	r7, r3
 8003704:	d9f3      	bls.n	80036ee <_printf_i+0x11e>
 8003706:	2f08      	cmp	r7, #8
 8003708:	d109      	bne.n	800371e <_printf_i+0x14e>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	07db      	lsls	r3, r3, #31
 800370e:	d506      	bpl.n	800371e <_printf_i+0x14e>
 8003710:	6863      	ldr	r3, [r4, #4]
 8003712:	6922      	ldr	r2, [r4, #16]
 8003714:	4293      	cmp	r3, r2
 8003716:	dc02      	bgt.n	800371e <_printf_i+0x14e>
 8003718:	2330      	movs	r3, #48	; 0x30
 800371a:	3e01      	subs	r6, #1
 800371c:	7033      	strb	r3, [r6, #0]
 800371e:	9b04      	ldr	r3, [sp, #16]
 8003720:	1b9b      	subs	r3, r3, r6
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	9b07      	ldr	r3, [sp, #28]
 8003726:	0021      	movs	r1, r4
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	9805      	ldr	r0, [sp, #20]
 800372c:	9b06      	ldr	r3, [sp, #24]
 800372e:	aa09      	add	r2, sp, #36	; 0x24
 8003730:	f7ff fede 	bl	80034f0 <_printf_common>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d135      	bne.n	80037a4 <_printf_i+0x1d4>
 8003738:	2001      	movs	r0, #1
 800373a:	4240      	negs	r0, r0
 800373c:	b00b      	add	sp, #44	; 0x2c
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003740:	2220      	movs	r2, #32
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	6022      	str	r2, [r4, #0]
 8003748:	0022      	movs	r2, r4
 800374a:	2178      	movs	r1, #120	; 0x78
 800374c:	3245      	adds	r2, #69	; 0x45
 800374e:	7011      	strb	r1, [r2, #0]
 8003750:	4a27      	ldr	r2, [pc, #156]	; (80037f0 <_printf_i+0x220>)
 8003752:	e7a7      	b.n	80036a4 <_printf_i+0xd4>
 8003754:	0648      	lsls	r0, r1, #25
 8003756:	d5ac      	bpl.n	80036b2 <_printf_i+0xe2>
 8003758:	b2ad      	uxth	r5, r5
 800375a:	e7aa      	b.n	80036b2 <_printf_i+0xe2>
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	680d      	ldr	r5, [r1, #0]
 8003760:	1d10      	adds	r0, r2, #4
 8003762:	6949      	ldr	r1, [r1, #20]
 8003764:	6018      	str	r0, [r3, #0]
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	062e      	lsls	r6, r5, #24
 800376a:	d501      	bpl.n	8003770 <_printf_i+0x1a0>
 800376c:	6019      	str	r1, [r3, #0]
 800376e:	e002      	b.n	8003776 <_printf_i+0x1a6>
 8003770:	066d      	lsls	r5, r5, #25
 8003772:	d5fb      	bpl.n	800376c <_printf_i+0x19c>
 8003774:	8019      	strh	r1, [r3, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	9e04      	ldr	r6, [sp, #16]
 800377a:	6123      	str	r3, [r4, #16]
 800377c:	e7d2      	b.n	8003724 <_printf_i+0x154>
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	1d11      	adds	r1, r2, #4
 8003782:	6019      	str	r1, [r3, #0]
 8003784:	6816      	ldr	r6, [r2, #0]
 8003786:	2100      	movs	r1, #0
 8003788:	0030      	movs	r0, r6
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	f000 fb68 	bl	8003e60 <memchr>
 8003790:	2800      	cmp	r0, #0
 8003792:	d001      	beq.n	8003798 <_printf_i+0x1c8>
 8003794:	1b80      	subs	r0, r0, r6
 8003796:	6060      	str	r0, [r4, #4]
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	6123      	str	r3, [r4, #16]
 800379c:	2300      	movs	r3, #0
 800379e:	9a04      	ldr	r2, [sp, #16]
 80037a0:	7013      	strb	r3, [r2, #0]
 80037a2:	e7bf      	b.n	8003724 <_printf_i+0x154>
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	0032      	movs	r2, r6
 80037a8:	9906      	ldr	r1, [sp, #24]
 80037aa:	9805      	ldr	r0, [sp, #20]
 80037ac:	9d07      	ldr	r5, [sp, #28]
 80037ae:	47a8      	blx	r5
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d0c1      	beq.n	8003738 <_printf_i+0x168>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	079b      	lsls	r3, r3, #30
 80037b8:	d415      	bmi.n	80037e6 <_printf_i+0x216>
 80037ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037bc:	68e0      	ldr	r0, [r4, #12]
 80037be:	4298      	cmp	r0, r3
 80037c0:	dabc      	bge.n	800373c <_printf_i+0x16c>
 80037c2:	0018      	movs	r0, r3
 80037c4:	e7ba      	b.n	800373c <_printf_i+0x16c>
 80037c6:	0022      	movs	r2, r4
 80037c8:	2301      	movs	r3, #1
 80037ca:	9906      	ldr	r1, [sp, #24]
 80037cc:	9805      	ldr	r0, [sp, #20]
 80037ce:	9e07      	ldr	r6, [sp, #28]
 80037d0:	3219      	adds	r2, #25
 80037d2:	47b0      	blx	r6
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d0af      	beq.n	8003738 <_printf_i+0x168>
 80037d8:	3501      	adds	r5, #1
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	dcf0      	bgt.n	80037c6 <_printf_i+0x1f6>
 80037e4:	e7e9      	b.n	80037ba <_printf_i+0x1ea>
 80037e6:	2500      	movs	r5, #0
 80037e8:	e7f7      	b.n	80037da <_printf_i+0x20a>
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	08004a95 	.word	0x08004a95
 80037f0:	08004aa6 	.word	0x08004aa6

080037f4 <_vsiprintf_r>:
 80037f4:	b500      	push	{lr}
 80037f6:	b09b      	sub	sp, #108	; 0x6c
 80037f8:	9100      	str	r1, [sp, #0]
 80037fa:	9104      	str	r1, [sp, #16]
 80037fc:	4906      	ldr	r1, [pc, #24]	; (8003818 <_vsiprintf_r+0x24>)
 80037fe:	9105      	str	r1, [sp, #20]
 8003800:	9102      	str	r1, [sp, #8]
 8003802:	4906      	ldr	r1, [pc, #24]	; (800381c <_vsiprintf_r+0x28>)
 8003804:	9103      	str	r1, [sp, #12]
 8003806:	4669      	mov	r1, sp
 8003808:	f000 fc78 	bl	80040fc <_svfiprintf_r>
 800380c:	2300      	movs	r3, #0
 800380e:	9a00      	ldr	r2, [sp, #0]
 8003810:	7013      	strb	r3, [r2, #0]
 8003812:	b01b      	add	sp, #108	; 0x6c
 8003814:	bd00      	pop	{pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	7fffffff 	.word	0x7fffffff
 800381c:	ffff0208 	.word	0xffff0208

08003820 <vsiprintf>:
 8003820:	b510      	push	{r4, lr}
 8003822:	0013      	movs	r3, r2
 8003824:	000a      	movs	r2, r1
 8003826:	0001      	movs	r1, r0
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <vsiprintf+0x14>)
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	f7ff ffe2 	bl	80037f4 <_vsiprintf_r>
 8003830:	bd10      	pop	{r4, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	2000000c 	.word	0x2000000c

08003838 <__swbuf_r>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	0005      	movs	r5, r0
 800383c:	000e      	movs	r6, r1
 800383e:	0014      	movs	r4, r2
 8003840:	2800      	cmp	r0, #0
 8003842:	d004      	beq.n	800384e <__swbuf_r+0x16>
 8003844:	6983      	ldr	r3, [r0, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <__swbuf_r+0x16>
 800384a:	f000 f9f9 	bl	8003c40 <__sinit>
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <__swbuf_r+0xa0>)
 8003850:	429c      	cmp	r4, r3
 8003852:	d12e      	bne.n	80038b2 <__swbuf_r+0x7a>
 8003854:	686c      	ldr	r4, [r5, #4]
 8003856:	69a3      	ldr	r3, [r4, #24]
 8003858:	60a3      	str	r3, [r4, #8]
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	071b      	lsls	r3, r3, #28
 800385e:	d532      	bpl.n	80038c6 <__swbuf_r+0x8e>
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02f      	beq.n	80038c6 <__swbuf_r+0x8e>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	6922      	ldr	r2, [r4, #16]
 800386a:	b2f7      	uxtb	r7, r6
 800386c:	1a98      	subs	r0, r3, r2
 800386e:	6963      	ldr	r3, [r4, #20]
 8003870:	b2f6      	uxtb	r6, r6
 8003872:	4283      	cmp	r3, r0
 8003874:	dc05      	bgt.n	8003882 <__swbuf_r+0x4a>
 8003876:	0021      	movs	r1, r4
 8003878:	0028      	movs	r0, r5
 800387a:	f000 f93f 	bl	8003afc <_fflush_r>
 800387e:	2800      	cmp	r0, #0
 8003880:	d127      	bne.n	80038d2 <__swbuf_r+0x9a>
 8003882:	68a3      	ldr	r3, [r4, #8]
 8003884:	3001      	adds	r0, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	60a3      	str	r3, [r4, #8]
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	6022      	str	r2, [r4, #0]
 8003890:	701f      	strb	r7, [r3, #0]
 8003892:	6963      	ldr	r3, [r4, #20]
 8003894:	4283      	cmp	r3, r0
 8003896:	d004      	beq.n	80038a2 <__swbuf_r+0x6a>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	07db      	lsls	r3, r3, #31
 800389c:	d507      	bpl.n	80038ae <__swbuf_r+0x76>
 800389e:	2e0a      	cmp	r6, #10
 80038a0:	d105      	bne.n	80038ae <__swbuf_r+0x76>
 80038a2:	0021      	movs	r1, r4
 80038a4:	0028      	movs	r0, r5
 80038a6:	f000 f929 	bl	8003afc <_fflush_r>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d111      	bne.n	80038d2 <__swbuf_r+0x9a>
 80038ae:	0030      	movs	r0, r6
 80038b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <__swbuf_r+0xa4>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	d101      	bne.n	80038bc <__swbuf_r+0x84>
 80038b8:	68ac      	ldr	r4, [r5, #8]
 80038ba:	e7cc      	b.n	8003856 <__swbuf_r+0x1e>
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <__swbuf_r+0xa8>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	d1c9      	bne.n	8003856 <__swbuf_r+0x1e>
 80038c2:	68ec      	ldr	r4, [r5, #12]
 80038c4:	e7c7      	b.n	8003856 <__swbuf_r+0x1e>
 80038c6:	0021      	movs	r1, r4
 80038c8:	0028      	movs	r0, r5
 80038ca:	f000 f80b 	bl	80038e4 <__swsetup_r>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d0c9      	beq.n	8003866 <__swbuf_r+0x2e>
 80038d2:	2601      	movs	r6, #1
 80038d4:	4276      	negs	r6, r6
 80038d6:	e7ea      	b.n	80038ae <__swbuf_r+0x76>
 80038d8:	08004ad8 	.word	0x08004ad8
 80038dc:	08004af8 	.word	0x08004af8
 80038e0:	08004ab8 	.word	0x08004ab8

080038e4 <__swsetup_r>:
 80038e4:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <__swsetup_r+0xe0>)
 80038e6:	b570      	push	{r4, r5, r6, lr}
 80038e8:	681d      	ldr	r5, [r3, #0]
 80038ea:	0006      	movs	r6, r0
 80038ec:	000c      	movs	r4, r1
 80038ee:	2d00      	cmp	r5, #0
 80038f0:	d005      	beq.n	80038fe <__swsetup_r+0x1a>
 80038f2:	69ab      	ldr	r3, [r5, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <__swsetup_r+0x1a>
 80038f8:	0028      	movs	r0, r5
 80038fa:	f000 f9a1 	bl	8003c40 <__sinit>
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <__swsetup_r+0xe4>)
 8003900:	429c      	cmp	r4, r3
 8003902:	d10f      	bne.n	8003924 <__swsetup_r+0x40>
 8003904:	686c      	ldr	r4, [r5, #4]
 8003906:	230c      	movs	r3, #12
 8003908:	5ee2      	ldrsh	r2, [r4, r3]
 800390a:	b293      	uxth	r3, r2
 800390c:	0711      	lsls	r1, r2, #28
 800390e:	d42d      	bmi.n	800396c <__swsetup_r+0x88>
 8003910:	06d9      	lsls	r1, r3, #27
 8003912:	d411      	bmi.n	8003938 <__swsetup_r+0x54>
 8003914:	2309      	movs	r3, #9
 8003916:	2001      	movs	r0, #1
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	3337      	adds	r3, #55	; 0x37
 800391c:	4313      	orrs	r3, r2
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	4240      	negs	r0, r0
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	4b29      	ldr	r3, [pc, #164]	; (80039cc <__swsetup_r+0xe8>)
 8003926:	429c      	cmp	r4, r3
 8003928:	d101      	bne.n	800392e <__swsetup_r+0x4a>
 800392a:	68ac      	ldr	r4, [r5, #8]
 800392c:	e7eb      	b.n	8003906 <__swsetup_r+0x22>
 800392e:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <__swsetup_r+0xec>)
 8003930:	429c      	cmp	r4, r3
 8003932:	d1e8      	bne.n	8003906 <__swsetup_r+0x22>
 8003934:	68ec      	ldr	r4, [r5, #12]
 8003936:	e7e6      	b.n	8003906 <__swsetup_r+0x22>
 8003938:	075b      	lsls	r3, r3, #29
 800393a:	d513      	bpl.n	8003964 <__swsetup_r+0x80>
 800393c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800393e:	2900      	cmp	r1, #0
 8003940:	d008      	beq.n	8003954 <__swsetup_r+0x70>
 8003942:	0023      	movs	r3, r4
 8003944:	3344      	adds	r3, #68	; 0x44
 8003946:	4299      	cmp	r1, r3
 8003948:	d002      	beq.n	8003950 <__swsetup_r+0x6c>
 800394a:	0030      	movs	r0, r6
 800394c:	f000 faa6 	bl	8003e9c <_free_r>
 8003950:	2300      	movs	r3, #0
 8003952:	6363      	str	r3, [r4, #52]	; 0x34
 8003954:	2224      	movs	r2, #36	; 0x24
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	4393      	bics	r3, r2
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	2300      	movs	r3, #0
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	2308      	movs	r3, #8
 8003966:	89a2      	ldrh	r2, [r4, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	81a3      	strh	r3, [r4, #12]
 800396c:	6923      	ldr	r3, [r4, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <__swsetup_r+0xa6>
 8003972:	21a0      	movs	r1, #160	; 0xa0
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	0089      	lsls	r1, r1, #2
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	400b      	ands	r3, r1
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <__swsetup_r+0xa6>
 8003982:	0021      	movs	r1, r4
 8003984:	0030      	movs	r0, r6
 8003986:	f000 fa27 	bl	8003dd8 <__smakebuf_r>
 800398a:	220c      	movs	r2, #12
 800398c:	5ea3      	ldrsh	r3, [r4, r2]
 800398e:	2001      	movs	r0, #1
 8003990:	001a      	movs	r2, r3
 8003992:	b299      	uxth	r1, r3
 8003994:	4002      	ands	r2, r0
 8003996:	4203      	tst	r3, r0
 8003998:	d00f      	beq.n	80039ba <__swsetup_r+0xd6>
 800399a:	2200      	movs	r2, #0
 800399c:	60a2      	str	r2, [r4, #8]
 800399e:	6962      	ldr	r2, [r4, #20]
 80039a0:	4252      	negs	r2, r2
 80039a2:	61a2      	str	r2, [r4, #24]
 80039a4:	2000      	movs	r0, #0
 80039a6:	6922      	ldr	r2, [r4, #16]
 80039a8:	4282      	cmp	r2, r0
 80039aa:	d1ba      	bne.n	8003922 <__swsetup_r+0x3e>
 80039ac:	060a      	lsls	r2, r1, #24
 80039ae:	d5b8      	bpl.n	8003922 <__swsetup_r+0x3e>
 80039b0:	2240      	movs	r2, #64	; 0x40
 80039b2:	4313      	orrs	r3, r2
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	3801      	subs	r0, #1
 80039b8:	e7b3      	b.n	8003922 <__swsetup_r+0x3e>
 80039ba:	0788      	lsls	r0, r1, #30
 80039bc:	d400      	bmi.n	80039c0 <__swsetup_r+0xdc>
 80039be:	6962      	ldr	r2, [r4, #20]
 80039c0:	60a2      	str	r2, [r4, #8]
 80039c2:	e7ef      	b.n	80039a4 <__swsetup_r+0xc0>
 80039c4:	2000000c 	.word	0x2000000c
 80039c8:	08004ad8 	.word	0x08004ad8
 80039cc:	08004af8 	.word	0x08004af8
 80039d0:	08004ab8 	.word	0x08004ab8

080039d4 <abort>:
 80039d4:	2006      	movs	r0, #6
 80039d6:	b510      	push	{r4, lr}
 80039d8:	f000 fccc 	bl	8004374 <raise>
 80039dc:	2001      	movs	r0, #1
 80039de:	f7fc fdb9 	bl	8000554 <_exit>
	...

080039e4 <__sflush_r>:
 80039e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039e6:	898b      	ldrh	r3, [r1, #12]
 80039e8:	0005      	movs	r5, r0
 80039ea:	000c      	movs	r4, r1
 80039ec:	071a      	lsls	r2, r3, #28
 80039ee:	d45f      	bmi.n	8003ab0 <__sflush_r+0xcc>
 80039f0:	684a      	ldr	r2, [r1, #4]
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	dc04      	bgt.n	8003a00 <__sflush_r+0x1c>
 80039f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	dc01      	bgt.n	8003a00 <__sflush_r+0x1c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a02:	2f00      	cmp	r7, #0
 8003a04:	d0fa      	beq.n	80039fc <__sflush_r+0x18>
 8003a06:	2200      	movs	r2, #0
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	682e      	ldr	r6, [r5, #0]
 8003a0c:	602a      	str	r2, [r5, #0]
 8003a0e:	001a      	movs	r2, r3
 8003a10:	0149      	lsls	r1, r1, #5
 8003a12:	400a      	ands	r2, r1
 8003a14:	420b      	tst	r3, r1
 8003a16:	d034      	beq.n	8003a82 <__sflush_r+0x9e>
 8003a18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	075b      	lsls	r3, r3, #29
 8003a1e:	d506      	bpl.n	8003a2e <__sflush_r+0x4a>
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	1ac0      	subs	r0, r0, r3
 8003a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <__sflush_r+0x4a>
 8003a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a2c:	1ac0      	subs	r0, r0, r3
 8003a2e:	0002      	movs	r2, r0
 8003a30:	6a21      	ldr	r1, [r4, #32]
 8003a32:	2300      	movs	r3, #0
 8003a34:	0028      	movs	r0, r5
 8003a36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a38:	47b8      	blx	r7
 8003a3a:	89a1      	ldrh	r1, [r4, #12]
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d106      	bne.n	8003a4e <__sflush_r+0x6a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	2b1d      	cmp	r3, #29
 8003a44:	d831      	bhi.n	8003aaa <__sflush_r+0xc6>
 8003a46:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <__sflush_r+0x114>)
 8003a48:	40da      	lsrs	r2, r3
 8003a4a:	07d3      	lsls	r3, r2, #31
 8003a4c:	d52d      	bpl.n	8003aaa <__sflush_r+0xc6>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	04cb      	lsls	r3, r1, #19
 8003a58:	d505      	bpl.n	8003a66 <__sflush_r+0x82>
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	d102      	bne.n	8003a64 <__sflush_r+0x80>
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d100      	bne.n	8003a66 <__sflush_r+0x82>
 8003a64:	6560      	str	r0, [r4, #84]	; 0x54
 8003a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a68:	602e      	str	r6, [r5, #0]
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	d0c6      	beq.n	80039fc <__sflush_r+0x18>
 8003a6e:	0023      	movs	r3, r4
 8003a70:	3344      	adds	r3, #68	; 0x44
 8003a72:	4299      	cmp	r1, r3
 8003a74:	d002      	beq.n	8003a7c <__sflush_r+0x98>
 8003a76:	0028      	movs	r0, r5
 8003a78:	f000 fa10 	bl	8003e9c <_free_r>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8003a80:	e7bd      	b.n	80039fe <__sflush_r+0x1a>
 8003a82:	2301      	movs	r3, #1
 8003a84:	0028      	movs	r0, r5
 8003a86:	6a21      	ldr	r1, [r4, #32]
 8003a88:	47b8      	blx	r7
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d1c5      	bne.n	8003a1a <__sflush_r+0x36>
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0c2      	beq.n	8003a1a <__sflush_r+0x36>
 8003a94:	2b1d      	cmp	r3, #29
 8003a96:	d001      	beq.n	8003a9c <__sflush_r+0xb8>
 8003a98:	2b16      	cmp	r3, #22
 8003a9a:	d101      	bne.n	8003aa0 <__sflush_r+0xbc>
 8003a9c:	602e      	str	r6, [r5, #0]
 8003a9e:	e7ad      	b.n	80039fc <__sflush_r+0x18>
 8003aa0:	2340      	movs	r3, #64	; 0x40
 8003aa2:	89a2      	ldrh	r2, [r4, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	81a3      	strh	r3, [r4, #12]
 8003aa8:	e7a9      	b.n	80039fe <__sflush_r+0x1a>
 8003aaa:	2340      	movs	r3, #64	; 0x40
 8003aac:	430b      	orrs	r3, r1
 8003aae:	e7fa      	b.n	8003aa6 <__sflush_r+0xc2>
 8003ab0:	690f      	ldr	r7, [r1, #16]
 8003ab2:	2f00      	cmp	r7, #0
 8003ab4:	d0a2      	beq.n	80039fc <__sflush_r+0x18>
 8003ab6:	680a      	ldr	r2, [r1, #0]
 8003ab8:	600f      	str	r7, [r1, #0]
 8003aba:	1bd2      	subs	r2, r2, r7
 8003abc:	9201      	str	r2, [sp, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	079b      	lsls	r3, r3, #30
 8003ac2:	d100      	bne.n	8003ac6 <__sflush_r+0xe2>
 8003ac4:	694a      	ldr	r2, [r1, #20]
 8003ac6:	60a2      	str	r2, [r4, #8]
 8003ac8:	9b01      	ldr	r3, [sp, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	dc00      	bgt.n	8003ad0 <__sflush_r+0xec>
 8003ace:	e795      	b.n	80039fc <__sflush_r+0x18>
 8003ad0:	003a      	movs	r2, r7
 8003ad2:	0028      	movs	r0, r5
 8003ad4:	9b01      	ldr	r3, [sp, #4]
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ada:	47b0      	blx	r6
 8003adc:	2800      	cmp	r0, #0
 8003ade:	dc06      	bgt.n	8003aee <__sflush_r+0x10a>
 8003ae0:	2340      	movs	r3, #64	; 0x40
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	89a2      	ldrh	r2, [r4, #12]
 8003ae6:	4240      	negs	r0, r0
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	e787      	b.n	80039fe <__sflush_r+0x1a>
 8003aee:	9b01      	ldr	r3, [sp, #4]
 8003af0:	183f      	adds	r7, r7, r0
 8003af2:	1a1b      	subs	r3, r3, r0
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	e7e7      	b.n	8003ac8 <__sflush_r+0xe4>
 8003af8:	20400001 	.word	0x20400001

08003afc <_fflush_r>:
 8003afc:	690b      	ldr	r3, [r1, #16]
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	0005      	movs	r5, r0
 8003b02:	000c      	movs	r4, r1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <_fflush_r+0x12>
 8003b08:	2500      	movs	r5, #0
 8003b0a:	0028      	movs	r0, r5
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d004      	beq.n	8003b1c <_fflush_r+0x20>
 8003b12:	6983      	ldr	r3, [r0, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <_fflush_r+0x20>
 8003b18:	f000 f892 	bl	8003c40 <__sinit>
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <_fflush_r+0x74>)
 8003b1e:	429c      	cmp	r4, r3
 8003b20:	d11b      	bne.n	8003b5a <_fflush_r+0x5e>
 8003b22:	686c      	ldr	r4, [r5, #4]
 8003b24:	220c      	movs	r2, #12
 8003b26:	5ea3      	ldrsh	r3, [r4, r2]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ed      	beq.n	8003b08 <_fflush_r+0xc>
 8003b2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b2e:	07d2      	lsls	r2, r2, #31
 8003b30:	d404      	bmi.n	8003b3c <_fflush_r+0x40>
 8003b32:	059b      	lsls	r3, r3, #22
 8003b34:	d402      	bmi.n	8003b3c <_fflush_r+0x40>
 8003b36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b38:	f000 f923 	bl	8003d82 <__retarget_lock_acquire_recursive>
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	0021      	movs	r1, r4
 8003b40:	f7ff ff50 	bl	80039e4 <__sflush_r>
 8003b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b46:	0005      	movs	r5, r0
 8003b48:	07db      	lsls	r3, r3, #31
 8003b4a:	d4de      	bmi.n	8003b0a <_fflush_r+0xe>
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	059b      	lsls	r3, r3, #22
 8003b50:	d4db      	bmi.n	8003b0a <_fflush_r+0xe>
 8003b52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b54:	f000 f916 	bl	8003d84 <__retarget_lock_release_recursive>
 8003b58:	e7d7      	b.n	8003b0a <_fflush_r+0xe>
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <_fflush_r+0x78>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	d101      	bne.n	8003b64 <_fflush_r+0x68>
 8003b60:	68ac      	ldr	r4, [r5, #8]
 8003b62:	e7df      	b.n	8003b24 <_fflush_r+0x28>
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <_fflush_r+0x7c>)
 8003b66:	429c      	cmp	r4, r3
 8003b68:	d1dc      	bne.n	8003b24 <_fflush_r+0x28>
 8003b6a:	68ec      	ldr	r4, [r5, #12]
 8003b6c:	e7da      	b.n	8003b24 <_fflush_r+0x28>
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	08004ad8 	.word	0x08004ad8
 8003b74:	08004af8 	.word	0x08004af8
 8003b78:	08004ab8 	.word	0x08004ab8

08003b7c <std>:
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	0004      	movs	r4, r0
 8003b82:	6003      	str	r3, [r0, #0]
 8003b84:	6043      	str	r3, [r0, #4]
 8003b86:	6083      	str	r3, [r0, #8]
 8003b88:	8181      	strh	r1, [r0, #12]
 8003b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	81c2      	strh	r2, [r0, #14]
 8003b90:	6103      	str	r3, [r0, #16]
 8003b92:	6143      	str	r3, [r0, #20]
 8003b94:	6183      	str	r3, [r0, #24]
 8003b96:	2208      	movs	r2, #8
 8003b98:	305c      	adds	r0, #92	; 0x5c
 8003b9a:	f7ff fb40 	bl	800321e <memset>
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <std+0x38>)
 8003ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <std+0x3c>)
 8003ba4:	6224      	str	r4, [r4, #32]
 8003ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <std+0x40>)
 8003baa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <std+0x44>)
 8003bae:	6323      	str	r3, [r4, #48]	; 0x30
 8003bb0:	bd10      	pop	{r4, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	080043b5 	.word	0x080043b5
 8003bb8:	080043dd 	.word	0x080043dd
 8003bbc:	08004415 	.word	0x08004415
 8003bc0:	08004441 	.word	0x08004441

08003bc4 <_cleanup_r>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4902      	ldr	r1, [pc, #8]	; (8003bd0 <_cleanup_r+0xc>)
 8003bc8:	f000 f8ba 	bl	8003d40 <_fwalk_reent>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	08003afd 	.word	0x08003afd

08003bd4 <__sfmoreglue>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	2568      	movs	r5, #104	; 0x68
 8003bd8:	1e4a      	subs	r2, r1, #1
 8003bda:	4355      	muls	r5, r2
 8003bdc:	000e      	movs	r6, r1
 8003bde:	0029      	movs	r1, r5
 8003be0:	3174      	adds	r1, #116	; 0x74
 8003be2:	f000 f9a5 	bl	8003f30 <_malloc_r>
 8003be6:	1e04      	subs	r4, r0, #0
 8003be8:	d008      	beq.n	8003bfc <__sfmoreglue+0x28>
 8003bea:	2100      	movs	r1, #0
 8003bec:	002a      	movs	r2, r5
 8003bee:	6001      	str	r1, [r0, #0]
 8003bf0:	6046      	str	r6, [r0, #4]
 8003bf2:	300c      	adds	r0, #12
 8003bf4:	60a0      	str	r0, [r4, #8]
 8003bf6:	3268      	adds	r2, #104	; 0x68
 8003bf8:	f7ff fb11 	bl	800321e <memset>
 8003bfc:	0020      	movs	r0, r4
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}

08003c00 <__sfp_lock_acquire>:
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4802      	ldr	r0, [pc, #8]	; (8003c0c <__sfp_lock_acquire+0xc>)
 8003c04:	f000 f8bd 	bl	8003d82 <__retarget_lock_acquire_recursive>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	200006b4 	.word	0x200006b4

08003c10 <__sfp_lock_release>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4802      	ldr	r0, [pc, #8]	; (8003c1c <__sfp_lock_release+0xc>)
 8003c14:	f000 f8b6 	bl	8003d84 <__retarget_lock_release_recursive>
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	200006b4 	.word	0x200006b4

08003c20 <__sinit_lock_acquire>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4802      	ldr	r0, [pc, #8]	; (8003c2c <__sinit_lock_acquire+0xc>)
 8003c24:	f000 f8ad 	bl	8003d82 <__retarget_lock_acquire_recursive>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	200006af 	.word	0x200006af

08003c30 <__sinit_lock_release>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	4802      	ldr	r0, [pc, #8]	; (8003c3c <__sinit_lock_release+0xc>)
 8003c34:	f000 f8a6 	bl	8003d84 <__retarget_lock_release_recursive>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	200006af 	.word	0x200006af

08003c40 <__sinit>:
 8003c40:	b513      	push	{r0, r1, r4, lr}
 8003c42:	0004      	movs	r4, r0
 8003c44:	f7ff ffec 	bl	8003c20 <__sinit_lock_acquire>
 8003c48:	69a3      	ldr	r3, [r4, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <__sinit+0x14>
 8003c4e:	f7ff ffef 	bl	8003c30 <__sinit_lock_release>
 8003c52:	bd13      	pop	{r0, r1, r4, pc}
 8003c54:	64a3      	str	r3, [r4, #72]	; 0x48
 8003c56:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003c58:	6523      	str	r3, [r4, #80]	; 0x50
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <__sinit+0x68>)
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <__sinit+0x6c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	d101      	bne.n	8003c6c <__sinit+0x2c>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	61a3      	str	r3, [r4, #24]
 8003c6c:	0020      	movs	r0, r4
 8003c6e:	f000 f81f 	bl	8003cb0 <__sfp>
 8003c72:	6060      	str	r0, [r4, #4]
 8003c74:	0020      	movs	r0, r4
 8003c76:	f000 f81b 	bl	8003cb0 <__sfp>
 8003c7a:	60a0      	str	r0, [r4, #8]
 8003c7c:	0020      	movs	r0, r4
 8003c7e:	f000 f817 	bl	8003cb0 <__sfp>
 8003c82:	2200      	movs	r2, #0
 8003c84:	2104      	movs	r1, #4
 8003c86:	60e0      	str	r0, [r4, #12]
 8003c88:	6860      	ldr	r0, [r4, #4]
 8003c8a:	f7ff ff77 	bl	8003b7c <std>
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2109      	movs	r1, #9
 8003c92:	68a0      	ldr	r0, [r4, #8]
 8003c94:	f7ff ff72 	bl	8003b7c <std>
 8003c98:	2202      	movs	r2, #2
 8003c9a:	2112      	movs	r1, #18
 8003c9c:	68e0      	ldr	r0, [r4, #12]
 8003c9e:	f7ff ff6d 	bl	8003b7c <std>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61a3      	str	r3, [r4, #24]
 8003ca6:	e7d2      	b.n	8003c4e <__sinit+0xe>
 8003ca8:	08004a80 	.word	0x08004a80
 8003cac:	08003bc5 	.word	0x08003bc5

08003cb0 <__sfp>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	0007      	movs	r7, r0
 8003cb4:	f7ff ffa4 	bl	8003c00 <__sfp_lock_acquire>
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <__sfp+0x88>)
 8003cba:	681e      	ldr	r6, [r3, #0]
 8003cbc:	69b3      	ldr	r3, [r6, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <__sfp+0x18>
 8003cc2:	0030      	movs	r0, r6
 8003cc4:	f7ff ffbc 	bl	8003c40 <__sinit>
 8003cc8:	3648      	adds	r6, #72	; 0x48
 8003cca:	68b4      	ldr	r4, [r6, #8]
 8003ccc:	6873      	ldr	r3, [r6, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	d504      	bpl.n	8003cdc <__sfp+0x2c>
 8003cd2:	6833      	ldr	r3, [r6, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <__sfp+0x6e>
 8003cd8:	6836      	ldr	r6, [r6, #0]
 8003cda:	e7f6      	b.n	8003cca <__sfp+0x1a>
 8003cdc:	220c      	movs	r2, #12
 8003cde:	5ea5      	ldrsh	r5, [r4, r2]
 8003ce0:	2d00      	cmp	r5, #0
 8003ce2:	d11a      	bne.n	8003d1a <__sfp+0x6a>
 8003ce4:	0020      	movs	r0, r4
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <__sfp+0x8c>)
 8003ce8:	3058      	adds	r0, #88	; 0x58
 8003cea:	60e3      	str	r3, [r4, #12]
 8003cec:	6665      	str	r5, [r4, #100]	; 0x64
 8003cee:	f000 f847 	bl	8003d80 <__retarget_lock_init_recursive>
 8003cf2:	f7ff ff8d 	bl	8003c10 <__sfp_lock_release>
 8003cf6:	0020      	movs	r0, r4
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	0029      	movs	r1, r5
 8003cfc:	6025      	str	r5, [r4, #0]
 8003cfe:	60a5      	str	r5, [r4, #8]
 8003d00:	6065      	str	r5, [r4, #4]
 8003d02:	6125      	str	r5, [r4, #16]
 8003d04:	6165      	str	r5, [r4, #20]
 8003d06:	61a5      	str	r5, [r4, #24]
 8003d08:	305c      	adds	r0, #92	; 0x5c
 8003d0a:	f7ff fa88 	bl	800321e <memset>
 8003d0e:	6365      	str	r5, [r4, #52]	; 0x34
 8003d10:	63a5      	str	r5, [r4, #56]	; 0x38
 8003d12:	64a5      	str	r5, [r4, #72]	; 0x48
 8003d14:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d16:	0020      	movs	r0, r4
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d1a:	3468      	adds	r4, #104	; 0x68
 8003d1c:	e7d7      	b.n	8003cce <__sfp+0x1e>
 8003d1e:	2104      	movs	r1, #4
 8003d20:	0038      	movs	r0, r7
 8003d22:	f7ff ff57 	bl	8003bd4 <__sfmoreglue>
 8003d26:	1e04      	subs	r4, r0, #0
 8003d28:	6030      	str	r0, [r6, #0]
 8003d2a:	d1d5      	bne.n	8003cd8 <__sfp+0x28>
 8003d2c:	f7ff ff70 	bl	8003c10 <__sfp_lock_release>
 8003d30:	230c      	movs	r3, #12
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	e7ef      	b.n	8003d16 <__sfp+0x66>
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	08004a80 	.word	0x08004a80
 8003d3c:	ffff0001 	.word	0xffff0001

08003d40 <_fwalk_reent>:
 8003d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d42:	0004      	movs	r4, r0
 8003d44:	0006      	movs	r6, r0
 8003d46:	2700      	movs	r7, #0
 8003d48:	9101      	str	r1, [sp, #4]
 8003d4a:	3448      	adds	r4, #72	; 0x48
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	68a5      	ldr	r5, [r4, #8]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	9b00      	ldr	r3, [sp, #0]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	d504      	bpl.n	8003d64 <_fwalk_reent+0x24>
 8003d5a:	6824      	ldr	r4, [r4, #0]
 8003d5c:	2c00      	cmp	r4, #0
 8003d5e:	d1f5      	bne.n	8003d4c <_fwalk_reent+0xc>
 8003d60:	0038      	movs	r0, r7
 8003d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d64:	89ab      	ldrh	r3, [r5, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d908      	bls.n	8003d7c <_fwalk_reent+0x3c>
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	5eab      	ldrsh	r3, [r5, r2]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	d004      	beq.n	8003d7c <_fwalk_reent+0x3c>
 8003d72:	0029      	movs	r1, r5
 8003d74:	0030      	movs	r0, r6
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	4307      	orrs	r7, r0
 8003d7c:	3568      	adds	r5, #104	; 0x68
 8003d7e:	e7e8      	b.n	8003d52 <_fwalk_reent+0x12>

08003d80 <__retarget_lock_init_recursive>:
 8003d80:	4770      	bx	lr

08003d82 <__retarget_lock_acquire_recursive>:
 8003d82:	4770      	bx	lr

08003d84 <__retarget_lock_release_recursive>:
 8003d84:	4770      	bx	lr
	...

08003d88 <__swhatbuf_r>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	000e      	movs	r6, r1
 8003d8c:	001d      	movs	r5, r3
 8003d8e:	230e      	movs	r3, #14
 8003d90:	5ec9      	ldrsh	r1, [r1, r3]
 8003d92:	0014      	movs	r4, r2
 8003d94:	b096      	sub	sp, #88	; 0x58
 8003d96:	2900      	cmp	r1, #0
 8003d98:	da07      	bge.n	8003daa <__swhatbuf_r+0x22>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	89b3      	ldrh	r3, [r6, #12]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	d411      	bmi.n	8003dc8 <__swhatbuf_r+0x40>
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	e00f      	b.n	8003dca <__swhatbuf_r+0x42>
 8003daa:	466a      	mov	r2, sp
 8003dac:	f000 fb74 	bl	8004498 <_fstat_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	dbf2      	blt.n	8003d9a <__swhatbuf_r+0x12>
 8003db4:	23f0      	movs	r3, #240	; 0xf0
 8003db6:	9901      	ldr	r1, [sp, #4]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4019      	ands	r1, r3
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <__swhatbuf_r+0x4c>)
 8003dbe:	18c9      	adds	r1, r1, r3
 8003dc0:	424b      	negs	r3, r1
 8003dc2:	4159      	adcs	r1, r3
 8003dc4:	6029      	str	r1, [r5, #0]
 8003dc6:	e7ed      	b.n	8003da4 <__swhatbuf_r+0x1c>
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	2000      	movs	r0, #0
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	b016      	add	sp, #88	; 0x58
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	ffffe000 	.word	0xffffe000

08003dd8 <__smakebuf_r>:
 8003dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dda:	2602      	movs	r6, #2
 8003ddc:	898b      	ldrh	r3, [r1, #12]
 8003dde:	0005      	movs	r5, r0
 8003de0:	000c      	movs	r4, r1
 8003de2:	4233      	tst	r3, r6
 8003de4:	d006      	beq.n	8003df4 <__smakebuf_r+0x1c>
 8003de6:	0023      	movs	r3, r4
 8003de8:	3347      	adds	r3, #71	; 0x47
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	2301      	movs	r3, #1
 8003df0:	6163      	str	r3, [r4, #20]
 8003df2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003df4:	466a      	mov	r2, sp
 8003df6:	ab01      	add	r3, sp, #4
 8003df8:	f7ff ffc6 	bl	8003d88 <__swhatbuf_r>
 8003dfc:	9900      	ldr	r1, [sp, #0]
 8003dfe:	0007      	movs	r7, r0
 8003e00:	0028      	movs	r0, r5
 8003e02:	f000 f895 	bl	8003f30 <_malloc_r>
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d108      	bne.n	8003e1c <__smakebuf_r+0x44>
 8003e0a:	220c      	movs	r2, #12
 8003e0c:	5ea3      	ldrsh	r3, [r4, r2]
 8003e0e:	059a      	lsls	r2, r3, #22
 8003e10:	d4ef      	bmi.n	8003df2 <__smakebuf_r+0x1a>
 8003e12:	2203      	movs	r2, #3
 8003e14:	4393      	bics	r3, r2
 8003e16:	431e      	orrs	r6, r3
 8003e18:	81a6      	strh	r6, [r4, #12]
 8003e1a:	e7e4      	b.n	8003de6 <__smakebuf_r+0xe>
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <__smakebuf_r+0x84>)
 8003e1e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	89a2      	ldrh	r2, [r4, #12]
 8003e24:	6020      	str	r0, [r4, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	9b00      	ldr	r3, [sp, #0]
 8003e2c:	6120      	str	r0, [r4, #16]
 8003e2e:	6163      	str	r3, [r4, #20]
 8003e30:	9b01      	ldr	r3, [sp, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <__smakebuf_r+0x7a>
 8003e36:	0028      	movs	r0, r5
 8003e38:	230e      	movs	r3, #14
 8003e3a:	5ee1      	ldrsh	r1, [r4, r3]
 8003e3c:	f000 fb3e 	bl	80044bc <_isatty_r>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d006      	beq.n	8003e52 <__smakebuf_r+0x7a>
 8003e44:	2203      	movs	r2, #3
 8003e46:	89a3      	ldrh	r3, [r4, #12]
 8003e48:	4393      	bics	r3, r2
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	89a0      	ldrh	r0, [r4, #12]
 8003e54:	4307      	orrs	r7, r0
 8003e56:	81a7      	strh	r7, [r4, #12]
 8003e58:	e7cb      	b.n	8003df2 <__smakebuf_r+0x1a>
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	08003bc5 	.word	0x08003bc5

08003e60 <memchr>:
 8003e60:	b2c9      	uxtb	r1, r1
 8003e62:	1882      	adds	r2, r0, r2
 8003e64:	4290      	cmp	r0, r2
 8003e66:	d101      	bne.n	8003e6c <memchr+0xc>
 8003e68:	2000      	movs	r0, #0
 8003e6a:	4770      	bx	lr
 8003e6c:	7803      	ldrb	r3, [r0, #0]
 8003e6e:	428b      	cmp	r3, r1
 8003e70:	d0fb      	beq.n	8003e6a <memchr+0xa>
 8003e72:	3001      	adds	r0, #1
 8003e74:	e7f6      	b.n	8003e64 <memchr+0x4>

08003e76 <memmove>:
 8003e76:	b510      	push	{r4, lr}
 8003e78:	4288      	cmp	r0, r1
 8003e7a:	d902      	bls.n	8003e82 <memmove+0xc>
 8003e7c:	188b      	adds	r3, r1, r2
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	d303      	bcc.n	8003e8a <memmove+0x14>
 8003e82:	2300      	movs	r3, #0
 8003e84:	e007      	b.n	8003e96 <memmove+0x20>
 8003e86:	5c8b      	ldrb	r3, [r1, r2]
 8003e88:	5483      	strb	r3, [r0, r2]
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	d2fb      	bcs.n	8003e86 <memmove+0x10>
 8003e8e:	bd10      	pop	{r4, pc}
 8003e90:	5ccc      	ldrb	r4, [r1, r3]
 8003e92:	54c4      	strb	r4, [r0, r3]
 8003e94:	3301      	adds	r3, #1
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d1fa      	bne.n	8003e90 <memmove+0x1a>
 8003e9a:	e7f8      	b.n	8003e8e <memmove+0x18>

08003e9c <_free_r>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	0005      	movs	r5, r0
 8003ea0:	2900      	cmp	r1, #0
 8003ea2:	d010      	beq.n	8003ec6 <_free_r+0x2a>
 8003ea4:	1f0c      	subs	r4, r1, #4
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da00      	bge.n	8003eae <_free_r+0x12>
 8003eac:	18e4      	adds	r4, r4, r3
 8003eae:	0028      	movs	r0, r5
 8003eb0:	f000 fb2a 	bl	8004508 <__malloc_lock>
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <_free_r+0x90>)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <_free_r+0x2c>
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	6014      	str	r4, [r2, #0]
 8003ec0:	0028      	movs	r0, r5
 8003ec2:	f000 fb29 	bl	8004518 <__malloc_unlock>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d908      	bls.n	8003ede <_free_r+0x42>
 8003ecc:	6821      	ldr	r1, [r4, #0]
 8003ece:	1860      	adds	r0, r4, r1
 8003ed0:	4283      	cmp	r3, r0
 8003ed2:	d1f3      	bne.n	8003ebc <_free_r+0x20>
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	1841      	adds	r1, r0, r1
 8003eda:	6021      	str	r1, [r4, #0]
 8003edc:	e7ee      	b.n	8003ebc <_free_r+0x20>
 8003ede:	001a      	movs	r2, r3
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <_free_r+0x4e>
 8003ee6:	42a3      	cmp	r3, r4
 8003ee8:	d9f9      	bls.n	8003ede <_free_r+0x42>
 8003eea:	6811      	ldr	r1, [r2, #0]
 8003eec:	1850      	adds	r0, r2, r1
 8003eee:	42a0      	cmp	r0, r4
 8003ef0:	d10b      	bne.n	8003f0a <_free_r+0x6e>
 8003ef2:	6820      	ldr	r0, [r4, #0]
 8003ef4:	1809      	adds	r1, r1, r0
 8003ef6:	1850      	adds	r0, r2, r1
 8003ef8:	6011      	str	r1, [r2, #0]
 8003efa:	4283      	cmp	r3, r0
 8003efc:	d1e0      	bne.n	8003ec0 <_free_r+0x24>
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	1841      	adds	r1, r0, r1
 8003f04:	6011      	str	r1, [r2, #0]
 8003f06:	6053      	str	r3, [r2, #4]
 8003f08:	e7da      	b.n	8003ec0 <_free_r+0x24>
 8003f0a:	42a0      	cmp	r0, r4
 8003f0c:	d902      	bls.n	8003f14 <_free_r+0x78>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	e7d5      	b.n	8003ec0 <_free_r+0x24>
 8003f14:	6821      	ldr	r1, [r4, #0]
 8003f16:	1860      	adds	r0, r4, r1
 8003f18:	4283      	cmp	r3, r0
 8003f1a:	d103      	bne.n	8003f24 <_free_r+0x88>
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	1841      	adds	r1, r0, r1
 8003f22:	6021      	str	r1, [r4, #0]
 8003f24:	6063      	str	r3, [r4, #4]
 8003f26:	6054      	str	r4, [r2, #4]
 8003f28:	e7ca      	b.n	8003ec0 <_free_r+0x24>
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	200005a0 	.word	0x200005a0

08003f30 <_malloc_r>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	2303      	movs	r3, #3
 8003f34:	1ccd      	adds	r5, r1, #3
 8003f36:	439d      	bics	r5, r3
 8003f38:	3508      	adds	r5, #8
 8003f3a:	0006      	movs	r6, r0
 8003f3c:	2d0c      	cmp	r5, #12
 8003f3e:	d21f      	bcs.n	8003f80 <_malloc_r+0x50>
 8003f40:	250c      	movs	r5, #12
 8003f42:	42a9      	cmp	r1, r5
 8003f44:	d81e      	bhi.n	8003f84 <_malloc_r+0x54>
 8003f46:	0030      	movs	r0, r6
 8003f48:	f000 fade 	bl	8004508 <__malloc_lock>
 8003f4c:	4925      	ldr	r1, [pc, #148]	; (8003fe4 <_malloc_r+0xb4>)
 8003f4e:	680a      	ldr	r2, [r1, #0]
 8003f50:	0014      	movs	r4, r2
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	d11a      	bne.n	8003f8c <_malloc_r+0x5c>
 8003f56:	4f24      	ldr	r7, [pc, #144]	; (8003fe8 <_malloc_r+0xb8>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <_malloc_r+0x38>
 8003f5e:	0021      	movs	r1, r4
 8003f60:	0030      	movs	r0, r6
 8003f62:	f000 f9cb 	bl	80042fc <_sbrk_r>
 8003f66:	6038      	str	r0, [r7, #0]
 8003f68:	0029      	movs	r1, r5
 8003f6a:	0030      	movs	r0, r6
 8003f6c:	f000 f9c6 	bl	80042fc <_sbrk_r>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d12b      	bne.n	8003fcc <_malloc_r+0x9c>
 8003f74:	230c      	movs	r3, #12
 8003f76:	0030      	movs	r0, r6
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	f000 facd 	bl	8004518 <__malloc_unlock>
 8003f7e:	e003      	b.n	8003f88 <_malloc_r+0x58>
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	dade      	bge.n	8003f42 <_malloc_r+0x12>
 8003f84:	230c      	movs	r3, #12
 8003f86:	6033      	str	r3, [r6, #0]
 8003f88:	2000      	movs	r0, #0
 8003f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	1b5b      	subs	r3, r3, r5
 8003f90:	d419      	bmi.n	8003fc6 <_malloc_r+0x96>
 8003f92:	2b0b      	cmp	r3, #11
 8003f94:	d903      	bls.n	8003f9e <_malloc_r+0x6e>
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	18e4      	adds	r4, r4, r3
 8003f9a:	6025      	str	r5, [r4, #0]
 8003f9c:	e003      	b.n	8003fa6 <_malloc_r+0x76>
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	42a2      	cmp	r2, r4
 8003fa2:	d10e      	bne.n	8003fc2 <_malloc_r+0x92>
 8003fa4:	600b      	str	r3, [r1, #0]
 8003fa6:	0030      	movs	r0, r6
 8003fa8:	f000 fab6 	bl	8004518 <__malloc_unlock>
 8003fac:	0020      	movs	r0, r4
 8003fae:	2207      	movs	r2, #7
 8003fb0:	300b      	adds	r0, #11
 8003fb2:	1d23      	adds	r3, r4, #4
 8003fb4:	4390      	bics	r0, r2
 8003fb6:	1ac2      	subs	r2, r0, r3
 8003fb8:	4298      	cmp	r0, r3
 8003fba:	d0e6      	beq.n	8003f8a <_malloc_r+0x5a>
 8003fbc:	1a1b      	subs	r3, r3, r0
 8003fbe:	50a3      	str	r3, [r4, r2]
 8003fc0:	e7e3      	b.n	8003f8a <_malloc_r+0x5a>
 8003fc2:	6053      	str	r3, [r2, #4]
 8003fc4:	e7ef      	b.n	8003fa6 <_malloc_r+0x76>
 8003fc6:	0022      	movs	r2, r4
 8003fc8:	6864      	ldr	r4, [r4, #4]
 8003fca:	e7c2      	b.n	8003f52 <_malloc_r+0x22>
 8003fcc:	2303      	movs	r3, #3
 8003fce:	1cc4      	adds	r4, r0, #3
 8003fd0:	439c      	bics	r4, r3
 8003fd2:	42a0      	cmp	r0, r4
 8003fd4:	d0e1      	beq.n	8003f9a <_malloc_r+0x6a>
 8003fd6:	1a21      	subs	r1, r4, r0
 8003fd8:	0030      	movs	r0, r6
 8003fda:	f000 f98f 	bl	80042fc <_sbrk_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d1db      	bne.n	8003f9a <_malloc_r+0x6a>
 8003fe2:	e7c7      	b.n	8003f74 <_malloc_r+0x44>
 8003fe4:	200005a0 	.word	0x200005a0
 8003fe8:	200005a4 	.word	0x200005a4

08003fec <_realloc_r>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	0007      	movs	r7, r0
 8003ff0:	000d      	movs	r5, r1
 8003ff2:	0016      	movs	r6, r2
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	d105      	bne.n	8004004 <_realloc_r+0x18>
 8003ff8:	0011      	movs	r1, r2
 8003ffa:	f7ff ff99 	bl	8003f30 <_malloc_r>
 8003ffe:	0004      	movs	r4, r0
 8004000:	0020      	movs	r0, r4
 8004002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004004:	2a00      	cmp	r2, #0
 8004006:	d103      	bne.n	8004010 <_realloc_r+0x24>
 8004008:	f7ff ff48 	bl	8003e9c <_free_r>
 800400c:	0034      	movs	r4, r6
 800400e:	e7f7      	b.n	8004000 <_realloc_r+0x14>
 8004010:	f000 fa8a 	bl	8004528 <_malloc_usable_size_r>
 8004014:	002c      	movs	r4, r5
 8004016:	42b0      	cmp	r0, r6
 8004018:	d2f2      	bcs.n	8004000 <_realloc_r+0x14>
 800401a:	0031      	movs	r1, r6
 800401c:	0038      	movs	r0, r7
 800401e:	f7ff ff87 	bl	8003f30 <_malloc_r>
 8004022:	1e04      	subs	r4, r0, #0
 8004024:	d0ec      	beq.n	8004000 <_realloc_r+0x14>
 8004026:	0029      	movs	r1, r5
 8004028:	0032      	movs	r2, r6
 800402a:	f7ff f8ef 	bl	800320c <memcpy>
 800402e:	0029      	movs	r1, r5
 8004030:	0038      	movs	r0, r7
 8004032:	f7ff ff33 	bl	8003e9c <_free_r>
 8004036:	e7e3      	b.n	8004000 <_realloc_r+0x14>

08004038 <__ssputs_r>:
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	688e      	ldr	r6, [r1, #8]
 800403c:	b085      	sub	sp, #20
 800403e:	0007      	movs	r7, r0
 8004040:	000c      	movs	r4, r1
 8004042:	9203      	str	r2, [sp, #12]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	429e      	cmp	r6, r3
 8004048:	d83c      	bhi.n	80040c4 <__ssputs_r+0x8c>
 800404a:	2390      	movs	r3, #144	; 0x90
 800404c:	898a      	ldrh	r2, [r1, #12]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	421a      	tst	r2, r3
 8004052:	d034      	beq.n	80040be <__ssputs_r+0x86>
 8004054:	2503      	movs	r5, #3
 8004056:	6909      	ldr	r1, [r1, #16]
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	1a5b      	subs	r3, r3, r1
 800405c:	9302      	str	r3, [sp, #8]
 800405e:	6963      	ldr	r3, [r4, #20]
 8004060:	9802      	ldr	r0, [sp, #8]
 8004062:	435d      	muls	r5, r3
 8004064:	0feb      	lsrs	r3, r5, #31
 8004066:	195d      	adds	r5, r3, r5
 8004068:	9b01      	ldr	r3, [sp, #4]
 800406a:	106d      	asrs	r5, r5, #1
 800406c:	3301      	adds	r3, #1
 800406e:	181b      	adds	r3, r3, r0
 8004070:	42ab      	cmp	r3, r5
 8004072:	d900      	bls.n	8004076 <__ssputs_r+0x3e>
 8004074:	001d      	movs	r5, r3
 8004076:	0553      	lsls	r3, r2, #21
 8004078:	d532      	bpl.n	80040e0 <__ssputs_r+0xa8>
 800407a:	0029      	movs	r1, r5
 800407c:	0038      	movs	r0, r7
 800407e:	f7ff ff57 	bl	8003f30 <_malloc_r>
 8004082:	1e06      	subs	r6, r0, #0
 8004084:	d109      	bne.n	800409a <__ssputs_r+0x62>
 8004086:	230c      	movs	r3, #12
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	2340      	movs	r3, #64	; 0x40
 800408c:	2001      	movs	r0, #1
 800408e:	89a2      	ldrh	r2, [r4, #12]
 8004090:	4240      	negs	r0, r0
 8004092:	4313      	orrs	r3, r2
 8004094:	81a3      	strh	r3, [r4, #12]
 8004096:	b005      	add	sp, #20
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409a:	9a02      	ldr	r2, [sp, #8]
 800409c:	6921      	ldr	r1, [r4, #16]
 800409e:	f7ff f8b5 	bl	800320c <memcpy>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <__ssputs_r+0xc0>)
 80040a6:	401a      	ands	r2, r3
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	4313      	orrs	r3, r2
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	6126      	str	r6, [r4, #16]
 80040b2:	18f6      	adds	r6, r6, r3
 80040b4:	6026      	str	r6, [r4, #0]
 80040b6:	6165      	str	r5, [r4, #20]
 80040b8:	9e01      	ldr	r6, [sp, #4]
 80040ba:	1aed      	subs	r5, r5, r3
 80040bc:	60a5      	str	r5, [r4, #8]
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	429e      	cmp	r6, r3
 80040c2:	d900      	bls.n	80040c6 <__ssputs_r+0x8e>
 80040c4:	9e01      	ldr	r6, [sp, #4]
 80040c6:	0032      	movs	r2, r6
 80040c8:	9903      	ldr	r1, [sp, #12]
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	f7ff fed3 	bl	8003e76 <memmove>
 80040d0:	68a3      	ldr	r3, [r4, #8]
 80040d2:	2000      	movs	r0, #0
 80040d4:	1b9b      	subs	r3, r3, r6
 80040d6:	60a3      	str	r3, [r4, #8]
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	199e      	adds	r6, r3, r6
 80040dc:	6026      	str	r6, [r4, #0]
 80040de:	e7da      	b.n	8004096 <__ssputs_r+0x5e>
 80040e0:	002a      	movs	r2, r5
 80040e2:	0038      	movs	r0, r7
 80040e4:	f7ff ff82 	bl	8003fec <_realloc_r>
 80040e8:	1e06      	subs	r6, r0, #0
 80040ea:	d1e0      	bne.n	80040ae <__ssputs_r+0x76>
 80040ec:	0038      	movs	r0, r7
 80040ee:	6921      	ldr	r1, [r4, #16]
 80040f0:	f7ff fed4 	bl	8003e9c <_free_r>
 80040f4:	e7c7      	b.n	8004086 <__ssputs_r+0x4e>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	fffffb7f 	.word	0xfffffb7f

080040fc <_svfiprintf_r>:
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b0a1      	sub	sp, #132	; 0x84
 8004100:	9003      	str	r0, [sp, #12]
 8004102:	001d      	movs	r5, r3
 8004104:	898b      	ldrh	r3, [r1, #12]
 8004106:	000f      	movs	r7, r1
 8004108:	0016      	movs	r6, r2
 800410a:	061b      	lsls	r3, r3, #24
 800410c:	d511      	bpl.n	8004132 <_svfiprintf_r+0x36>
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10e      	bne.n	8004132 <_svfiprintf_r+0x36>
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	f7ff ff0b 	bl	8003f30 <_malloc_r>
 800411a:	6038      	str	r0, [r7, #0]
 800411c:	6138      	str	r0, [r7, #16]
 800411e:	2800      	cmp	r0, #0
 8004120:	d105      	bne.n	800412e <_svfiprintf_r+0x32>
 8004122:	230c      	movs	r3, #12
 8004124:	9a03      	ldr	r2, [sp, #12]
 8004126:	3801      	subs	r0, #1
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	b021      	add	sp, #132	; 0x84
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412e:	2340      	movs	r3, #64	; 0x40
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	2300      	movs	r3, #0
 8004134:	ac08      	add	r4, sp, #32
 8004136:	6163      	str	r3, [r4, #20]
 8004138:	3320      	adds	r3, #32
 800413a:	7663      	strb	r3, [r4, #25]
 800413c:	3310      	adds	r3, #16
 800413e:	76a3      	strb	r3, [r4, #26]
 8004140:	9507      	str	r5, [sp, #28]
 8004142:	0035      	movs	r5, r6
 8004144:	782b      	ldrb	r3, [r5, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <_svfiprintf_r+0x52>
 800414a:	2b25      	cmp	r3, #37	; 0x25
 800414c:	d147      	bne.n	80041de <_svfiprintf_r+0xe2>
 800414e:	1bab      	subs	r3, r5, r6
 8004150:	9305      	str	r3, [sp, #20]
 8004152:	42b5      	cmp	r5, r6
 8004154:	d00c      	beq.n	8004170 <_svfiprintf_r+0x74>
 8004156:	0032      	movs	r2, r6
 8004158:	0039      	movs	r1, r7
 800415a:	9803      	ldr	r0, [sp, #12]
 800415c:	f7ff ff6c 	bl	8004038 <__ssputs_r>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d100      	bne.n	8004166 <_svfiprintf_r+0x6a>
 8004164:	e0ae      	b.n	80042c4 <_svfiprintf_r+0x1c8>
 8004166:	6962      	ldr	r2, [r4, #20]
 8004168:	9b05      	ldr	r3, [sp, #20]
 800416a:	4694      	mov	ip, r2
 800416c:	4463      	add	r3, ip
 800416e:	6163      	str	r3, [r4, #20]
 8004170:	782b      	ldrb	r3, [r5, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d100      	bne.n	8004178 <_svfiprintf_r+0x7c>
 8004176:	e0a5      	b.n	80042c4 <_svfiprintf_r+0x1c8>
 8004178:	2201      	movs	r2, #1
 800417a:	2300      	movs	r3, #0
 800417c:	4252      	negs	r2, r2
 800417e:	6062      	str	r2, [r4, #4]
 8004180:	a904      	add	r1, sp, #16
 8004182:	3254      	adds	r2, #84	; 0x54
 8004184:	1852      	adds	r2, r2, r1
 8004186:	1c6e      	adds	r6, r5, #1
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	60e3      	str	r3, [r4, #12]
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	7013      	strb	r3, [r2, #0]
 8004190:	65a3      	str	r3, [r4, #88]	; 0x58
 8004192:	2205      	movs	r2, #5
 8004194:	7831      	ldrb	r1, [r6, #0]
 8004196:	4854      	ldr	r0, [pc, #336]	; (80042e8 <_svfiprintf_r+0x1ec>)
 8004198:	f7ff fe62 	bl	8003e60 <memchr>
 800419c:	1c75      	adds	r5, r6, #1
 800419e:	2800      	cmp	r0, #0
 80041a0:	d11f      	bne.n	80041e2 <_svfiprintf_r+0xe6>
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	06d3      	lsls	r3, r2, #27
 80041a6:	d504      	bpl.n	80041b2 <_svfiprintf_r+0xb6>
 80041a8:	2353      	movs	r3, #83	; 0x53
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	185b      	adds	r3, r3, r1
 80041ae:	2120      	movs	r1, #32
 80041b0:	7019      	strb	r1, [r3, #0]
 80041b2:	0713      	lsls	r3, r2, #28
 80041b4:	d504      	bpl.n	80041c0 <_svfiprintf_r+0xc4>
 80041b6:	2353      	movs	r3, #83	; 0x53
 80041b8:	a904      	add	r1, sp, #16
 80041ba:	185b      	adds	r3, r3, r1
 80041bc:	212b      	movs	r1, #43	; 0x2b
 80041be:	7019      	strb	r1, [r3, #0]
 80041c0:	7833      	ldrb	r3, [r6, #0]
 80041c2:	2b2a      	cmp	r3, #42	; 0x2a
 80041c4:	d016      	beq.n	80041f4 <_svfiprintf_r+0xf8>
 80041c6:	0035      	movs	r5, r6
 80041c8:	2100      	movs	r1, #0
 80041ca:	200a      	movs	r0, #10
 80041cc:	68e3      	ldr	r3, [r4, #12]
 80041ce:	782a      	ldrb	r2, [r5, #0]
 80041d0:	1c6e      	adds	r6, r5, #1
 80041d2:	3a30      	subs	r2, #48	; 0x30
 80041d4:	2a09      	cmp	r2, #9
 80041d6:	d94e      	bls.n	8004276 <_svfiprintf_r+0x17a>
 80041d8:	2900      	cmp	r1, #0
 80041da:	d111      	bne.n	8004200 <_svfiprintf_r+0x104>
 80041dc:	e017      	b.n	800420e <_svfiprintf_r+0x112>
 80041de:	3501      	adds	r5, #1
 80041e0:	e7b0      	b.n	8004144 <_svfiprintf_r+0x48>
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <_svfiprintf_r+0x1ec>)
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	1ac0      	subs	r0, r0, r3
 80041e8:	2301      	movs	r3, #1
 80041ea:	4083      	lsls	r3, r0
 80041ec:	4313      	orrs	r3, r2
 80041ee:	002e      	movs	r6, r5
 80041f0:	6023      	str	r3, [r4, #0]
 80041f2:	e7ce      	b.n	8004192 <_svfiprintf_r+0x96>
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	1d19      	adds	r1, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	9107      	str	r1, [sp, #28]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db01      	blt.n	8004204 <_svfiprintf_r+0x108>
 8004200:	930b      	str	r3, [sp, #44]	; 0x2c
 8004202:	e004      	b.n	800420e <_svfiprintf_r+0x112>
 8004204:	425b      	negs	r3, r3
 8004206:	60e3      	str	r3, [r4, #12]
 8004208:	2302      	movs	r3, #2
 800420a:	4313      	orrs	r3, r2
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	782b      	ldrb	r3, [r5, #0]
 8004210:	2b2e      	cmp	r3, #46	; 0x2e
 8004212:	d10a      	bne.n	800422a <_svfiprintf_r+0x12e>
 8004214:	786b      	ldrb	r3, [r5, #1]
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d135      	bne.n	8004286 <_svfiprintf_r+0x18a>
 800421a:	9b07      	ldr	r3, [sp, #28]
 800421c:	3502      	adds	r5, #2
 800421e:	1d1a      	adds	r2, r3, #4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	9207      	str	r2, [sp, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db2b      	blt.n	8004280 <_svfiprintf_r+0x184>
 8004228:	9309      	str	r3, [sp, #36]	; 0x24
 800422a:	4e30      	ldr	r6, [pc, #192]	; (80042ec <_svfiprintf_r+0x1f0>)
 800422c:	2203      	movs	r2, #3
 800422e:	0030      	movs	r0, r6
 8004230:	7829      	ldrb	r1, [r5, #0]
 8004232:	f7ff fe15 	bl	8003e60 <memchr>
 8004236:	2800      	cmp	r0, #0
 8004238:	d006      	beq.n	8004248 <_svfiprintf_r+0x14c>
 800423a:	2340      	movs	r3, #64	; 0x40
 800423c:	1b80      	subs	r0, r0, r6
 800423e:	4083      	lsls	r3, r0
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	3501      	adds	r5, #1
 8004244:	4313      	orrs	r3, r2
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	7829      	ldrb	r1, [r5, #0]
 800424a:	2206      	movs	r2, #6
 800424c:	4828      	ldr	r0, [pc, #160]	; (80042f0 <_svfiprintf_r+0x1f4>)
 800424e:	1c6e      	adds	r6, r5, #1
 8004250:	7621      	strb	r1, [r4, #24]
 8004252:	f7ff fe05 	bl	8003e60 <memchr>
 8004256:	2800      	cmp	r0, #0
 8004258:	d03c      	beq.n	80042d4 <_svfiprintf_r+0x1d8>
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <_svfiprintf_r+0x1f8>)
 800425c:	2b00      	cmp	r3, #0
 800425e:	d125      	bne.n	80042ac <_svfiprintf_r+0x1b0>
 8004260:	2207      	movs	r2, #7
 8004262:	9b07      	ldr	r3, [sp, #28]
 8004264:	3307      	adds	r3, #7
 8004266:	4393      	bics	r3, r2
 8004268:	3308      	adds	r3, #8
 800426a:	9307      	str	r3, [sp, #28]
 800426c:	6963      	ldr	r3, [r4, #20]
 800426e:	9a04      	ldr	r2, [sp, #16]
 8004270:	189b      	adds	r3, r3, r2
 8004272:	6163      	str	r3, [r4, #20]
 8004274:	e765      	b.n	8004142 <_svfiprintf_r+0x46>
 8004276:	4343      	muls	r3, r0
 8004278:	0035      	movs	r5, r6
 800427a:	2101      	movs	r1, #1
 800427c:	189b      	adds	r3, r3, r2
 800427e:	e7a6      	b.n	80041ce <_svfiprintf_r+0xd2>
 8004280:	2301      	movs	r3, #1
 8004282:	425b      	negs	r3, r3
 8004284:	e7d0      	b.n	8004228 <_svfiprintf_r+0x12c>
 8004286:	2300      	movs	r3, #0
 8004288:	200a      	movs	r0, #10
 800428a:	001a      	movs	r2, r3
 800428c:	3501      	adds	r5, #1
 800428e:	6063      	str	r3, [r4, #4]
 8004290:	7829      	ldrb	r1, [r5, #0]
 8004292:	1c6e      	adds	r6, r5, #1
 8004294:	3930      	subs	r1, #48	; 0x30
 8004296:	2909      	cmp	r1, #9
 8004298:	d903      	bls.n	80042a2 <_svfiprintf_r+0x1a6>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0c5      	beq.n	800422a <_svfiprintf_r+0x12e>
 800429e:	9209      	str	r2, [sp, #36]	; 0x24
 80042a0:	e7c3      	b.n	800422a <_svfiprintf_r+0x12e>
 80042a2:	4342      	muls	r2, r0
 80042a4:	0035      	movs	r5, r6
 80042a6:	2301      	movs	r3, #1
 80042a8:	1852      	adds	r2, r2, r1
 80042aa:	e7f1      	b.n	8004290 <_svfiprintf_r+0x194>
 80042ac:	ab07      	add	r3, sp, #28
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	003a      	movs	r2, r7
 80042b2:	0021      	movs	r1, r4
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <_svfiprintf_r+0x1fc>)
 80042b6:	9803      	ldr	r0, [sp, #12]
 80042b8:	e000      	b.n	80042bc <_svfiprintf_r+0x1c0>
 80042ba:	bf00      	nop
 80042bc:	9004      	str	r0, [sp, #16]
 80042be:	9b04      	ldr	r3, [sp, #16]
 80042c0:	3301      	adds	r3, #1
 80042c2:	d1d3      	bne.n	800426c <_svfiprintf_r+0x170>
 80042c4:	89bb      	ldrh	r3, [r7, #12]
 80042c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042c8:	065b      	lsls	r3, r3, #25
 80042ca:	d400      	bmi.n	80042ce <_svfiprintf_r+0x1d2>
 80042cc:	e72d      	b.n	800412a <_svfiprintf_r+0x2e>
 80042ce:	2001      	movs	r0, #1
 80042d0:	4240      	negs	r0, r0
 80042d2:	e72a      	b.n	800412a <_svfiprintf_r+0x2e>
 80042d4:	ab07      	add	r3, sp, #28
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	003a      	movs	r2, r7
 80042da:	0021      	movs	r1, r4
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <_svfiprintf_r+0x1fc>)
 80042de:	9803      	ldr	r0, [sp, #12]
 80042e0:	f7ff f976 	bl	80035d0 <_printf_i>
 80042e4:	e7ea      	b.n	80042bc <_svfiprintf_r+0x1c0>
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	08004a84 	.word	0x08004a84
 80042ec:	08004a8a 	.word	0x08004a8a
 80042f0:	08004a8e 	.word	0x08004a8e
 80042f4:	00000000 	.word	0x00000000
 80042f8:	08004039 	.word	0x08004039

080042fc <_sbrk_r>:
 80042fc:	2300      	movs	r3, #0
 80042fe:	b570      	push	{r4, r5, r6, lr}
 8004300:	4d06      	ldr	r5, [pc, #24]	; (800431c <_sbrk_r+0x20>)
 8004302:	0004      	movs	r4, r0
 8004304:	0008      	movs	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fc f996 	bl	8000638 <_sbrk>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d103      	bne.n	8004318 <_sbrk_r+0x1c>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d000      	beq.n	8004318 <_sbrk_r+0x1c>
 8004316:	6023      	str	r3, [r4, #0]
 8004318:	bd70      	pop	{r4, r5, r6, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	200006b8 	.word	0x200006b8

08004320 <_raise_r>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	0004      	movs	r4, r0
 8004324:	000d      	movs	r5, r1
 8004326:	291f      	cmp	r1, #31
 8004328:	d904      	bls.n	8004334 <_raise_r+0x14>
 800432a:	2316      	movs	r3, #22
 800432c:	6003      	str	r3, [r0, #0]
 800432e:	2001      	movs	r0, #1
 8004330:	4240      	negs	r0, r0
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <_raise_r+0x24>
 800433a:	008a      	lsls	r2, r1, #2
 800433c:	189b      	adds	r3, r3, r2
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2a00      	cmp	r2, #0
 8004342:	d108      	bne.n	8004356 <_raise_r+0x36>
 8004344:	0020      	movs	r0, r4
 8004346:	f000 f831 	bl	80043ac <_getpid_r>
 800434a:	002a      	movs	r2, r5
 800434c:	0001      	movs	r1, r0
 800434e:	0020      	movs	r0, r4
 8004350:	f000 f81a 	bl	8004388 <_kill_r>
 8004354:	e7ed      	b.n	8004332 <_raise_r+0x12>
 8004356:	2000      	movs	r0, #0
 8004358:	2a01      	cmp	r2, #1
 800435a:	d0ea      	beq.n	8004332 <_raise_r+0x12>
 800435c:	1c51      	adds	r1, r2, #1
 800435e:	d103      	bne.n	8004368 <_raise_r+0x48>
 8004360:	2316      	movs	r3, #22
 8004362:	3001      	adds	r0, #1
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	e7e4      	b.n	8004332 <_raise_r+0x12>
 8004368:	2400      	movs	r4, #0
 800436a:	0028      	movs	r0, r5
 800436c:	601c      	str	r4, [r3, #0]
 800436e:	4790      	blx	r2
 8004370:	0020      	movs	r0, r4
 8004372:	e7de      	b.n	8004332 <_raise_r+0x12>

08004374 <raise>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4b03      	ldr	r3, [pc, #12]	; (8004384 <raise+0x10>)
 8004378:	0001      	movs	r1, r0
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	f7ff ffd0 	bl	8004320 <_raise_r>
 8004380:	bd10      	pop	{r4, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	2000000c 	.word	0x2000000c

08004388 <_kill_r>:
 8004388:	2300      	movs	r3, #0
 800438a:	b570      	push	{r4, r5, r6, lr}
 800438c:	4d06      	ldr	r5, [pc, #24]	; (80043a8 <_kill_r+0x20>)
 800438e:	0004      	movs	r4, r0
 8004390:	0008      	movs	r0, r1
 8004392:	0011      	movs	r1, r2
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	f7fc f8cd 	bl	8000534 <_kill>
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	d103      	bne.n	80043a6 <_kill_r+0x1e>
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d000      	beq.n	80043a6 <_kill_r+0x1e>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	200006b8 	.word	0x200006b8

080043ac <_getpid_r>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	f7fc f8bb 	bl	8000528 <_getpid>
 80043b2:	bd10      	pop	{r4, pc}

080043b4 <__sread>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	000c      	movs	r4, r1
 80043b8:	250e      	movs	r5, #14
 80043ba:	5f49      	ldrsh	r1, [r1, r5]
 80043bc:	f000 f8bc 	bl	8004538 <_read_r>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	db03      	blt.n	80043cc <__sread+0x18>
 80043c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043c6:	181b      	adds	r3, r3, r0
 80043c8:	6563      	str	r3, [r4, #84]	; 0x54
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	4a02      	ldr	r2, [pc, #8]	; (80043d8 <__sread+0x24>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	e7f9      	b.n	80043ca <__sread+0x16>
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	ffffefff 	.word	0xffffefff

080043dc <__swrite>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	001f      	movs	r7, r3
 80043e0:	898b      	ldrh	r3, [r1, #12]
 80043e2:	0005      	movs	r5, r0
 80043e4:	000c      	movs	r4, r1
 80043e6:	0016      	movs	r6, r2
 80043e8:	05db      	lsls	r3, r3, #23
 80043ea:	d505      	bpl.n	80043f8 <__swrite+0x1c>
 80043ec:	230e      	movs	r3, #14
 80043ee:	5ec9      	ldrsh	r1, [r1, r3]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2302      	movs	r3, #2
 80043f4:	f000 f874 	bl	80044e0 <_lseek_r>
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <__swrite+0x34>)
 80043fc:	0028      	movs	r0, r5
 80043fe:	4013      	ands	r3, r2
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	0032      	movs	r2, r6
 8004404:	230e      	movs	r3, #14
 8004406:	5ee1      	ldrsh	r1, [r4, r3]
 8004408:	003b      	movs	r3, r7
 800440a:	f000 f81f 	bl	800444c <_write_r>
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004410:	ffffefff 	.word	0xffffefff

08004414 <__sseek>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	000c      	movs	r4, r1
 8004418:	250e      	movs	r5, #14
 800441a:	5f49      	ldrsh	r1, [r1, r5]
 800441c:	f000 f860 	bl	80044e0 <_lseek_r>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	1c42      	adds	r2, r0, #1
 8004424:	d103      	bne.n	800442e <__sseek+0x1a>
 8004426:	4a05      	ldr	r2, [pc, #20]	; (800443c <__sseek+0x28>)
 8004428:	4013      	ands	r3, r2
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	2280      	movs	r2, #128	; 0x80
 8004430:	0152      	lsls	r2, r2, #5
 8004432:	4313      	orrs	r3, r2
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	6560      	str	r0, [r4, #84]	; 0x54
 8004438:	e7f8      	b.n	800442c <__sseek+0x18>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	ffffefff 	.word	0xffffefff

08004440 <__sclose>:
 8004440:	b510      	push	{r4, lr}
 8004442:	230e      	movs	r3, #14
 8004444:	5ec9      	ldrsh	r1, [r1, r3]
 8004446:	f000 f815 	bl	8004474 <_close_r>
 800444a:	bd10      	pop	{r4, pc}

0800444c <_write_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	0004      	movs	r4, r0
 8004450:	0008      	movs	r0, r1
 8004452:	0011      	movs	r1, r2
 8004454:	001a      	movs	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	4d05      	ldr	r5, [pc, #20]	; (8004470 <_write_r+0x24>)
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc f8a3 	bl	80005a6 <_write>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d103      	bne.n	800446c <_write_r+0x20>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d000      	beq.n	800446c <_write_r+0x20>
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	bd70      	pop	{r4, r5, r6, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	200006b8 	.word	0x200006b8

08004474 <_close_r>:
 8004474:	2300      	movs	r3, #0
 8004476:	b570      	push	{r4, r5, r6, lr}
 8004478:	4d06      	ldr	r5, [pc, #24]	; (8004494 <_close_r+0x20>)
 800447a:	0004      	movs	r4, r0
 800447c:	0008      	movs	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc f8ad 	bl	80005de <_close>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d103      	bne.n	8004490 <_close_r+0x1c>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d000      	beq.n	8004490 <_close_r+0x1c>
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	bd70      	pop	{r4, r5, r6, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	200006b8 	.word	0x200006b8

08004498 <_fstat_r>:
 8004498:	2300      	movs	r3, #0
 800449a:	b570      	push	{r4, r5, r6, lr}
 800449c:	4d06      	ldr	r5, [pc, #24]	; (80044b8 <_fstat_r+0x20>)
 800449e:	0004      	movs	r4, r0
 80044a0:	0008      	movs	r0, r1
 80044a2:	0011      	movs	r1, r2
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	f7fc f8a4 	bl	80005f2 <_fstat>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	d103      	bne.n	80044b6 <_fstat_r+0x1e>
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d000      	beq.n	80044b6 <_fstat_r+0x1e>
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	200006b8 	.word	0x200006b8

080044bc <_isatty_r>:
 80044bc:	2300      	movs	r3, #0
 80044be:	b570      	push	{r4, r5, r6, lr}
 80044c0:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_isatty_r+0x20>)
 80044c2:	0004      	movs	r4, r0
 80044c4:	0008      	movs	r0, r1
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	f7fc f8a1 	bl	800060e <_isatty>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d103      	bne.n	80044d8 <_isatty_r+0x1c>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d000      	beq.n	80044d8 <_isatty_r+0x1c>
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	200006b8 	.word	0x200006b8

080044e0 <_lseek_r>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	0004      	movs	r4, r0
 80044e4:	0008      	movs	r0, r1
 80044e6:	0011      	movs	r1, r2
 80044e8:	001a      	movs	r2, r3
 80044ea:	2300      	movs	r3, #0
 80044ec:	4d05      	ldr	r5, [pc, #20]	; (8004504 <_lseek_r+0x24>)
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	f7fc f896 	bl	8000620 <_lseek>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d103      	bne.n	8004500 <_lseek_r+0x20>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d000      	beq.n	8004500 <_lseek_r+0x20>
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	bd70      	pop	{r4, r5, r6, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	200006b8 	.word	0x200006b8

08004508 <__malloc_lock>:
 8004508:	b510      	push	{r4, lr}
 800450a:	4802      	ldr	r0, [pc, #8]	; (8004514 <__malloc_lock+0xc>)
 800450c:	f7ff fc39 	bl	8003d82 <__retarget_lock_acquire_recursive>
 8004510:	bd10      	pop	{r4, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	200006b0 	.word	0x200006b0

08004518 <__malloc_unlock>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4802      	ldr	r0, [pc, #8]	; (8004524 <__malloc_unlock+0xc>)
 800451c:	f7ff fc32 	bl	8003d84 <__retarget_lock_release_recursive>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	200006b0 	.word	0x200006b0

08004528 <_malloc_usable_size_r>:
 8004528:	1f0b      	subs	r3, r1, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	1f18      	subs	r0, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	da01      	bge.n	8004536 <_malloc_usable_size_r+0xe>
 8004532:	580b      	ldr	r3, [r1, r0]
 8004534:	18c0      	adds	r0, r0, r3
 8004536:	4770      	bx	lr

08004538 <_read_r>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	0004      	movs	r4, r0
 800453c:	0008      	movs	r0, r1
 800453e:	0011      	movs	r1, r2
 8004540:	001a      	movs	r2, r3
 8004542:	2300      	movs	r3, #0
 8004544:	4d05      	ldr	r5, [pc, #20]	; (800455c <_read_r+0x24>)
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fc f810 	bl	800056c <_read>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d103      	bne.n	8004558 <_read_r+0x20>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d000      	beq.n	8004558 <_read_r+0x20>
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	bd70      	pop	{r4, r5, r6, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	200006b8 	.word	0x200006b8

08004560 <_init>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr

0800456c <_fini>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr
