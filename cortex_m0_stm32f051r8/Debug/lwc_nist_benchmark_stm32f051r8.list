
lwc_nist_benchmark_stm32f051r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000070  08004030  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08004030  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e13d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237f  00000000  00000000  0002e1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000134c0  00000000  00000000  00031cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef39  00000000  00000000  00045190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007675d  00000000  00000000  000540c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ffc  00000000  00000000  000ca87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c0c 	.word	0x08003c0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c0c 	.word	0x08003c0c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800024e:	6959      	ldr	r1, [r3, #20]
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4013      	ands	r3, r2
 8000260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000262:	68fb      	ldr	r3, [r7, #12]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fa12 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8dc 	bl	8000438 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000280:	f000 f86e 	bl	8000360 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000284:	f000 f8a8 	bl	80003d8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000288:	f002 fdec 	bl	8002e64 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <main+0x28>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fa68 	bl	8000764 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 8000294:	e7f8      	b.n	8000288 <main+0x18>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	000f4240 	.word	0x000f4240

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b097      	sub	sp, #92	; 0x5c
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2428      	movs	r4, #40	; 0x28
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2330      	movs	r3, #48	; 0x30
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f003 f87d 	bl	80033ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	2318      	movs	r3, #24
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	0018      	movs	r0, r3
 80002b8:	2310      	movs	r3, #16
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f003 f875 	bl	80033ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2314      	movs	r3, #20
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f003 f86e 	bl	80033ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2202      	movs	r2, #2
 80002e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	0312      	lsls	r2, r2, #12
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fca1 	bl	8000c48 <HAL_RCC_OscConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800030a:	f000 f89f 	bl	800044c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	2118      	movs	r1, #24
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2100      	movs	r1, #0
 800032c:	0018      	movs	r0, r3
 800032e:	f000 ffa5 	bl	800127c <HAL_RCC_ClockConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000336:	f000 f889 	bl	800044c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f8e9 	bl	8001520 <HAL_RCCEx_PeriphCLKConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000352:	f000 f87b 	bl	800044c <Error_Handler>
  }
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b017      	add	sp, #92	; 0x5c
 800035c:	bd90      	pop	{r4, r7, pc}
	...

08000360 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2308      	movs	r3, #8
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f003 f81c 	bl	80033ac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <MX_TIM6_Init+0x70>)
 8000378:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_TIM6_Init+0x6c>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000388:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_TIM6_Init+0x74>)
 800038a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_TIM6_Init+0x6c>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_TIM6_Init+0x6c>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f9a1 	bl	80016dc <HAL_TIM_Base_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800039e:	f000 f855 	bl	800044c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003ae:	003a      	movs	r2, r7
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_TIM6_Init+0x6c>)
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fc17 	bl	8001be8 <HAL_TIMEx_MasterConfigSynchronization>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80003be:	f000 f845 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	2000062c 	.word	0x2000062c
 80003d0:	40001000 	.word	0x40001000
 80003d4:	0000ffff 	.word	0x0000ffff

080003d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <MX_USART1_UART_Init+0x5c>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003e4:	22e1      	movs	r2, #225	; 0xe1
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART1_UART_Init+0x58>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_USART1_UART_Init+0x58>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fc51 	bl	8001cc4 <HAL_UART_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 f811 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200005a8 	.word	0x200005a8
 8000434:	40013800 	.word	0x40013800

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff feff 	bl	8000244 <LL_AHB1_GRP1_EnableClock>

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	e7fe      	b.n	8000454 <Error_Handler+0x8>
	...

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <HAL_MspInit+0x44>)
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <HAL_MspInit+0x44>)
 8000464:	2101      	movs	r1, #1
 8000466:	430a      	orrs	r2, r1
 8000468:	619a      	str	r2, [r3, #24]
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	2201      	movs	r2, #1
 8000470:	4013      	ands	r3, r2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <HAL_MspInit+0x44>)
 8000478:	69da      	ldr	r2, [r3, #28]
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_MspInit+0x44>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0549      	lsls	r1, r1, #21
 8000480:	430a      	orrs	r2, r1
 8000482:	61da      	str	r2, [r3, #28]
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_MspInit+0x44>)
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	055b      	lsls	r3, r3, #21
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <HAL_TIM_Base_MspInit+0x44>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d113      	bne.n	80004da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <HAL_TIM_Base_MspInit+0x48>)
 80004b4:	69da      	ldr	r2, [r3, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_TIM_Base_MspInit+0x48>)
 80004b8:	2110      	movs	r1, #16
 80004ba:	430a      	orrs	r2, r1
 80004bc:	61da      	str	r2, [r3, #28]
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_TIM_Base_MspInit+0x48>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	2210      	movs	r2, #16
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2011      	movs	r0, #17
 80004d0:	f000 fa18 	bl	8000904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004d4:	2011      	movs	r0, #17
 80004d6:	f000 fa2a 	bl	800092e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40001000 	.word	0x40001000
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	2414      	movs	r4, #20
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 ff54 	bl	80033ac <memset>
  if(huart->Instance==USART1)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <HAL_UART_MspInit+0x94>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d133      	bne.n	8000576 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <HAL_UART_MspInit+0x98>)
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_UART_MspInit+0x98>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	01c9      	lsls	r1, r1, #7
 8000518:	430a      	orrs	r2, r1
 800051a:	619a      	str	r2, [r3, #24]
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_UART_MspInit+0x98>)
 800051e:	699a      	ldr	r2, [r3, #24]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	01db      	lsls	r3, r3, #7
 8000524:	4013      	ands	r3, r2
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_UART_MspInit+0x98>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_UART_MspInit+0x98>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_UART_MspInit+0x98>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	22c0      	movs	r2, #192	; 0xc0
 800054a:	00d2      	lsls	r2, r2, #3
 800054c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2203      	movs	r2, #3
 8000560:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	187a      	adds	r2, r7, r1
 800056a:	2390      	movs	r3, #144	; 0x90
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f000 f9f9 	bl	8000968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b00b      	add	sp, #44	; 0x2c
 800057c:	bd90      	pop	{r4, r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ac:	f000 f8be 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <TIM6_DAC_IRQHandler+0x14>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 f95c 	bl	800187c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	2000062c 	.word	0x2000062c

080005d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <_sbrk+0x5c>)
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <_sbrk+0x60>)
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <_sbrk+0x64>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <_sbrk+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	18d3      	adds	r3, r2, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d207      	bcs.n	8000610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000600:	f002 fe96 	bl	8003330 <__errno>
 8000604:	0003      	movs	r3, r0
 8000606:	220c      	movs	r2, #12
 8000608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060a:	2301      	movs	r3, #1
 800060c:	425b      	negs	r3, r3
 800060e:	e009      	b.n	8000624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <_sbrk+0x64>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	18d2      	adds	r2, r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <_sbrk+0x64>)
 8000620:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	b006      	add	sp, #24
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20002000 	.word	0x20002000
 8000630:	00000400 	.word	0x00000400
 8000634:	2000008c 	.word	0x2000008c
 8000638:	200006c0 	.word	0x200006c0

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0b      	ldr	r4, [pc, #44]	; (8000694 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000672:	f7ff ffe3 	bl	800063c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000676:	f002 fe61 	bl	800333c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fdf9 	bl	8000270 <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800068c:	08003fc0 	.word	0x08003fc0
  ldr r2, =_sbss
 8000690:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000694:	200006bc 	.word	0x200006bc

08000698 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_COMP_IRQHandler>
	...

0800069c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_Init+0x24>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_Init+0x24>)
 80006a6:	2110      	movs	r1, #16
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f809 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b2:	f7ff fed1 	bl	8000458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <HAL_InitTick+0x5c>)
 80006ce:	681c      	ldr	r4, [r3, #0]
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_InitTick+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	0019      	movs	r1, r3
 80006d6:	23fa      	movs	r3, #250	; 0xfa
 80006d8:	0098      	lsls	r0, r3, #2
 80006da:	f7ff fd27 	bl	800012c <__udivsi3>
 80006de:	0003      	movs	r3, r0
 80006e0:	0019      	movs	r1, r3
 80006e2:	0020      	movs	r0, r4
 80006e4:	f7ff fd22 	bl	800012c <__udivsi3>
 80006e8:	0003      	movs	r3, r0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f92f 	bl	800094e <HAL_SYSTICK_Config>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e00f      	b.n	8000718 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d80b      	bhi.n	8000716 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	2301      	movs	r3, #1
 8000702:	425b      	negs	r3, r3
 8000704:	2200      	movs	r2, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f000 f8fc 	bl	8000904 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_InitTick+0x64>)
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b003      	add	sp, #12
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	001a      	movs	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	18d2      	adds	r2, r2, r3
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000008 	.word	0x20000008
 800074c:	20000674 	.word	0x20000674

08000750 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000674 	.word	0x20000674

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff fff0 	bl	8000750 <HAL_GetTick>
 8000770:	0003      	movs	r3, r0
 8000772:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	3301      	adds	r3, #1
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_Delay+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	001a      	movs	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	189b      	adds	r3, r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	f7ff ffe0 	bl	8000750 <HAL_GetTick>
 8000790:	0002      	movs	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008

080007ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b7f      	cmp	r3, #127	; 0x7f
 80007be:	d809      	bhi.n	80007d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	001a      	movs	r2, r3
 80007c6:	231f      	movs	r3, #31
 80007c8:	401a      	ands	r2, r3
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <__NVIC_EnableIRQ+0x30>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	4091      	lsls	r1, r2
 80007d0:	000a      	movs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
  }
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b7f      	cmp	r3, #127	; 0x7f
 80007f4:	d828      	bhi.n	8000848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <__NVIC_SetPriority+0xd4>)
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	089b      	lsrs	r3, r3, #2
 8000800:	33c0      	adds	r3, #192	; 0xc0
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	589b      	ldr	r3, [r3, r2]
 8000806:	1dfa      	adds	r2, r7, #7
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	0011      	movs	r1, r2
 800080c:	2203      	movs	r2, #3
 800080e:	400a      	ands	r2, r1
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	21ff      	movs	r1, #255	; 0xff
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	019b      	lsls	r3, r3, #6
 8000822:	22ff      	movs	r2, #255	; 0xff
 8000824:	401a      	ands	r2, r3
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	2303      	movs	r3, #3
 800082e:	4003      	ands	r3, r0
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	481f      	ldr	r0, [pc, #124]	; (80008b4 <__NVIC_SetPriority+0xd4>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	089b      	lsrs	r3, r3, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	33c0      	adds	r3, #192	; 0xc0
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000846:	e031      	b.n	80008ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <__NVIC_SetPriority+0xd8>)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	0019      	movs	r1, r3
 8000850:	230f      	movs	r3, #15
 8000852:	400b      	ands	r3, r1
 8000854:	3b08      	subs	r3, #8
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	3306      	adds	r3, #6
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	3304      	adds	r3, #4
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1dfa      	adds	r2, r7, #7
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	0011      	movs	r1, r2
 8000868:	2203      	movs	r2, #3
 800086a:	400a      	ands	r2, r1
 800086c:	00d2      	lsls	r2, r2, #3
 800086e:	21ff      	movs	r1, #255	; 0xff
 8000870:	4091      	lsls	r1, r2
 8000872:	000a      	movs	r2, r1
 8000874:	43d2      	mvns	r2, r2
 8000876:	401a      	ands	r2, r3
 8000878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	401a      	ands	r2, r3
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	2303      	movs	r3, #3
 800088a:	4003      	ands	r3, r0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	001c      	movs	r4, r3
 8000898:	230f      	movs	r3, #15
 800089a:	4023      	ands	r3, r4
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	430a      	orrs	r2, r1
 80008a2:	3306      	adds	r3, #6
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	18c3      	adds	r3, r0, r3
 80008a8:	3304      	adds	r3, #4
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b003      	add	sp, #12
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	045b      	lsls	r3, r3, #17
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d301      	bcc.n	80008d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d0:	2301      	movs	r3, #1
 80008d2:	e010      	b.n	80008f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <SysTick_Config+0x44>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	3a01      	subs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
 80008e0:	2103      	movs	r1, #3
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff ff7c 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SysTick_Config+0x44>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <SysTick_Config+0x44>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	210f      	movs	r1, #15
 8000910:	187b      	adds	r3, r7, r1
 8000912:	1c02      	adds	r2, r0, #0
 8000914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	187b      	adds	r3, r7, r1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b25b      	sxtb	r3, r3
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff5d 	bl	80007e0 <__NVIC_SetPriority>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	0002      	movs	r2, r0
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b25b      	sxtb	r3, r3
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ff33 	bl	80007ac <__NVIC_EnableIRQ>
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ffaf 	bl	80008bc <SysTick_Config>
 800095e:	0003      	movs	r3, r0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e14f      	b.n	8000c18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d100      	bne.n	8000990 <HAL_GPIO_Init+0x28>
 800098e:	e140      	b.n	8000c12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d00b      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a4:	2b11      	cmp	r3, #17
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	43da      	mvns	r2, r3
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	2201      	movs	r2, #1
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	43da      	mvns	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0xea>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	58d3      	ldr	r3, [r2, r3]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	2207      	movs	r2, #7
 8000a64:	4013      	ands	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2107      	movs	r1, #7
 8000a7e:	400b      	ands	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	6939      	ldr	r1, [r7, #16]
 8000a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	401a      	ands	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	055b      	lsls	r3, r3, #21
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d100      	bne.n	8000adc <HAL_GPIO_Init+0x174>
 8000ada:	e09a      	b.n	8000c12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b54      	ldr	r3, [pc, #336]	; (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000ade:	699a      	ldr	r2, [r3, #24]
 8000ae0:	4b53      	ldr	r3, [pc, #332]	; (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <HAL_GPIO_Init+0x2c8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	4a4f      	ldr	r2, [pc, #316]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	589b      	ldr	r3, [r3, r2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2203      	movs	r2, #3
 8000b06:	4013      	ands	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	43da      	mvns	r2, r3
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x1de>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a43      	ldr	r2, [pc, #268]	; (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x1da>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a42      	ldr	r2, [pc, #264]	; (8000c40 <HAL_GPIO_Init+0x2d8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x1d6>
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b3e:	2305      	movs	r3, #5
 8000b40:	e004      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x1e4>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	2103      	movs	r1, #3
 8000b50:	400a      	ands	r2, r1
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4093      	lsls	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5c:	4935      	ldr	r1, [pc, #212]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43da      	mvns	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	025b      	lsls	r3, r3, #9
 8000b82:	4013      	ands	r3, r2
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	4013      	ands	r3, r2
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	035b      	lsls	r3, r3, #13
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	039b      	lsls	r3, r3, #14
 8000c00:	4013      	ands	r3, r2
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	40da      	lsrs	r2, r3
 8000c20:	1e13      	subs	r3, r2, #0
 8000c22:	d000      	beq.n	8000c26 <HAL_GPIO_Init+0x2be>
 8000c24:	e6a8      	b.n	8000978 <HAL_GPIO_Init+0x10>
  } 
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b006      	add	sp, #24
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	48000c00 	.word	0x48000c00
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e301      	b.n	800125e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4013      	ands	r3, r2
 8000c62:	d100      	bne.n	8000c66 <HAL_RCC_OscConfig+0x1e>
 8000c64:	e08d      	b.n	8000d82 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c66:	4bc3      	ldr	r3, [pc, #780]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d00e      	beq.n	8000c90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c72:	4bc0      	ldr	r3, [pc, #768]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	220c      	movs	r2, #12
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d116      	bne.n	8000cac <HAL_RCC_OscConfig+0x64>
 8000c7e:	4bbd      	ldr	r3, [pc, #756]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	025b      	lsls	r3, r3, #9
 8000c86:	401a      	ands	r2, r3
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d10d      	bne.n	8000cac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	4bb8      	ldr	r3, [pc, #736]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d100      	bne.n	8000c9e <HAL_RCC_OscConfig+0x56>
 8000c9c:	e070      	b.n	8000d80 <HAL_RCC_OscConfig+0x138>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d000      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x60>
 8000ca6:	e06b      	b.n	8000d80 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e2d8      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d107      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x7c>
 8000cb4:	4baf      	ldr	r3, [pc, #700]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4bae      	ldr	r3, [pc, #696]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e02f      	b.n	8000d24 <HAL_RCC_OscConfig+0xdc>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10c      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x9e>
 8000ccc:	4ba9      	ldr	r3, [pc, #676]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4ba8      	ldr	r3, [pc, #672]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	49a9      	ldr	r1, [pc, #676]	; (8000f78 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	4ba6      	ldr	r3, [pc, #664]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4ba5      	ldr	r3, [pc, #660]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	49a7      	ldr	r1, [pc, #668]	; (8000f7c <HAL_RCC_OscConfig+0x334>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e01e      	b.n	8000d24 <HAL_RCC_OscConfig+0xdc>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d10e      	bne.n	8000d0c <HAL_RCC_OscConfig+0xc4>
 8000cee:	4ba1      	ldr	r3, [pc, #644]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4ba0      	ldr	r3, [pc, #640]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	02c9      	lsls	r1, r1, #11
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b9c      	ldr	r3, [pc, #624]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0249      	lsls	r1, r1, #9
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e00b      	b.n	8000d24 <HAL_RCC_OscConfig+0xdc>
 8000d0c:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b98      	ldr	r3, [pc, #608]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d12:	4999      	ldr	r1, [pc, #612]	; (8000f78 <HAL_RCC_OscConfig+0x330>)
 8000d14:	400a      	ands	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b95      	ldr	r3, [pc, #596]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	4997      	ldr	r1, [pc, #604]	; (8000f7c <HAL_RCC_OscConfig+0x334>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d014      	beq.n	8000d56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fd10 	bl	8000750 <HAL_GetTick>
 8000d30:	0003      	movs	r3, r0
 8000d32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d36:	f7ff fd0b 	bl	8000750 <HAL_GetTick>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b64      	cmp	r3, #100	; 0x64
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e28a      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d48:	4b8a      	ldr	r3, [pc, #552]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	029b      	lsls	r3, r3, #10
 8000d50:	4013      	ands	r3, r2
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0xee>
 8000d54:	e015      	b.n	8000d82 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fcfb 	bl	8000750 <HAL_GetTick>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fcf6 	bl	8000750 <HAL_GetTick>
 8000d64:	0002      	movs	r2, r0
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e275      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d72:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	029b      	lsls	r3, r3, #10
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x118>
 8000d7e:	e000      	b.n	8000d82 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2202      	movs	r2, #2
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d100      	bne.n	8000d8e <HAL_RCC_OscConfig+0x146>
 8000d8c:	e069      	b.n	8000e62 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d8e:	4b79      	ldr	r3, [pc, #484]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	220c      	movs	r2, #12
 8000d94:	4013      	ands	r3, r2
 8000d96:	d00b      	beq.n	8000db0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d98:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d11c      	bne.n	8000dde <HAL_RCC_OscConfig+0x196>
 8000da4:	4b73      	ldr	r3, [pc, #460]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	025b      	lsls	r3, r3, #9
 8000dac:	4013      	ands	r3, r2
 8000dae:	d116      	bne.n	8000dde <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db0:	4b70      	ldr	r3, [pc, #448]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2202      	movs	r2, #2
 8000db6:	4013      	ands	r3, r2
 8000db8:	d005      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x17e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d001      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e24b      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc6:	4b6b      	ldr	r3, [pc, #428]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	22f8      	movs	r2, #248	; 0xf8
 8000dcc:	4393      	bics	r3, r2
 8000dce:	0019      	movs	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	00da      	lsls	r2, r3, #3
 8000dd6:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ddc:	e041      	b.n	8000e62 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d024      	beq.n	8000e30 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de6:	4b63      	ldr	r3, [pc, #396]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fcad 	bl	8000750 <HAL_GetTick>
 8000df6:	0003      	movs	r3, r0
 8000df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fca8 	bl	8000750 <HAL_GetTick>
 8000e00:	0002      	movs	r2, r0
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e227      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	4b59      	ldr	r3, [pc, #356]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	d0f1      	beq.n	8000dfc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b56      	ldr	r3, [pc, #344]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	22f8      	movs	r2, #248	; 0xf8
 8000e1e:	4393      	bics	r3, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	00da      	lsls	r2, r3, #3
 8000e28:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e018      	b.n	8000e62 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e30:	4b50      	ldr	r3, [pc, #320]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b4f      	ldr	r3, [pc, #316]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	438a      	bics	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc88 	bl	8000750 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e46:	f7ff fc83 	bl	8000750 <HAL_GetTick>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e202      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d1f1      	bne.n	8000e46 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2208      	movs	r2, #8
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d036      	beq.n	8000eda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d019      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e74:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e80:	f7ff fc66 	bl	8000750 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fc61 	bl	8000750 <HAL_GetTick>
 8000e8e:	0002      	movs	r2, r0
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e1e0      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d0f1      	beq.n	8000e8a <HAL_RCC_OscConfig+0x242>
 8000ea6:	e018      	b.n	8000eda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eac:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fc4c 	bl	8000750 <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc47 	bl	8000750 <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e1c6      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d1f1      	bne.n	8000ebe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d100      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x29e>
 8000ee4:	e0b4      	b.n	8001050 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee6:	201f      	movs	r0, #31
 8000ee8:	183b      	adds	r3, r7, r0
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	055b      	lsls	r3, r3, #21
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d110      	bne.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	69da      	ldr	r2, [r3, #28]
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	0549      	lsls	r1, r1, #21
 8000f04:	430a      	orrs	r2, r1
 8000f06:	61da      	str	r2, [r3, #28]
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	69da      	ldr	r2, [r3, #28]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	055b      	lsls	r3, r3, #21
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f16:	183b      	adds	r3, r7, r0
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_RCC_OscConfig+0x338>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	d11a      	bne.n	8000f5e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_RCC_OscConfig+0x338>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_RCC_OscConfig+0x338>)
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	0049      	lsls	r1, r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fc0b 	bl	8000750 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f40:	f7ff fc06 	bl	8000750 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e185      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_RCC_OscConfig+0x338>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d10e      	bne.n	8000f84 <HAL_RCC_OscConfig+0x33c>
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f68:	6a1a      	ldr	r2, [r3, #32]
 8000f6a:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	621a      	str	r2, [r3, #32]
 8000f72:	e035      	b.n	8000fe0 <HAL_RCC_OscConfig+0x398>
 8000f74:	40021000 	.word	0x40021000
 8000f78:	fffeffff 	.word	0xfffeffff
 8000f7c:	fffbffff 	.word	0xfffbffff
 8000f80:	40007000 	.word	0x40007000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x35e>
 8000f8c:	4bb6      	ldr	r3, [pc, #728]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	4bb5      	ldr	r3, [pc, #724]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	438a      	bics	r2, r1
 8000f96:	621a      	str	r2, [r3, #32]
 8000f98:	4bb3      	ldr	r3, [pc, #716]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000f9a:	6a1a      	ldr	r2, [r3, #32]
 8000f9c:	4bb2      	ldr	r3, [pc, #712]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	621a      	str	r2, [r3, #32]
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x398>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x380>
 8000fae:	4bae      	ldr	r3, [pc, #696]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	4bad      	ldr	r3, [pc, #692]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	621a      	str	r2, [r3, #32]
 8000fba:	4bab      	ldr	r3, [pc, #684]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fbc:	6a1a      	ldr	r2, [r3, #32]
 8000fbe:	4baa      	ldr	r3, [pc, #680]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0x398>
 8000fc8:	4ba7      	ldr	r3, [pc, #668]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4ba6      	ldr	r3, [pc, #664]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	4ba4      	ldr	r3, [pc, #656]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	4ba3      	ldr	r3, [pc, #652]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	438a      	bics	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d014      	beq.n	8001012 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fbb2 	bl	8000750 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	e009      	b.n	8001006 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fbad 	bl	8000750 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	4a9b      	ldr	r2, [pc, #620]	; (800126c <HAL_RCC_OscConfig+0x624>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e12b      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001006:	4b98      	ldr	r3, [pc, #608]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	2202      	movs	r2, #2
 800100c:	4013      	ands	r3, r2
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3aa>
 8001010:	e013      	b.n	800103a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff fb9d 	bl	8000750 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101a:	e009      	b.n	8001030 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101c:	f7ff fb98 	bl	8000750 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4a91      	ldr	r2, [pc, #580]	; (800126c <HAL_RCC_OscConfig+0x624>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e116      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b8d      	ldr	r3, [pc, #564]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800103a:	231f      	movs	r3, #31
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d105      	bne.n	8001050 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	4b87      	ldr	r3, [pc, #540]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 800104a:	4989      	ldr	r1, [pc, #548]	; (8001270 <HAL_RCC_OscConfig+0x628>)
 800104c:	400a      	ands	r2, r1
 800104e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2210      	movs	r2, #16
 8001056:	4013      	ands	r3, r2
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d12a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001062:	4b81      	ldr	r3, [pc, #516]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b80      	ldr	r3, [pc, #512]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001068:	2104      	movs	r1, #4
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800106e:	4b7e      	ldr	r3, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	4b7d      	ldr	r3, [pc, #500]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fb69 	bl	8000750 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001084:	f7ff fb64 	bl	8000750 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e0e3      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001096:	4b74      	ldr	r3, [pc, #464]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010a0:	4b71      	ldr	r3, [pc, #452]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	22f8      	movs	r2, #248	; 0xf8
 80010a6:	4393      	bics	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	00da      	lsls	r2, r3, #3
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
 80010b6:	e034      	b.n	8001122 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	3305      	adds	r3, #5
 80010be:	d111      	bne.n	80010e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010c0:	4b69      	ldr	r3, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	438a      	bics	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010cc:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	22f8      	movs	r2, #248	; 0xf8
 80010d2:	4393      	bics	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	00da      	lsls	r2, r3, #3
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
 80010e2:	e01e      	b.n	8001122 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e8:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	430a      	orrs	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010f0:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f4:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	438a      	bics	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fb28 	bl	8000750 <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001106:	f7ff fb23 	bl	8000750 <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e0a2      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d1f1      	bne.n	8001106 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x4e4>
 800112a:	e097      	b.n	800125c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	220c      	movs	r2, #12
 8001132:	4013      	ands	r3, r2
 8001134:	2b08      	cmp	r3, #8
 8001136:	d100      	bne.n	800113a <HAL_RCC_OscConfig+0x4f2>
 8001138:	e06b      	b.n	8001212 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d14c      	bne.n	80011dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001148:	494a      	ldr	r1, [pc, #296]	; (8001274 <HAL_RCC_OscConfig+0x62c>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff faff 	bl	8000750 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fafa 	bl	8000750 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e079      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	049b      	lsls	r3, r3, #18
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	220f      	movs	r2, #15
 800117c:	4393      	bics	r3, r2
 800117e:	0019      	movs	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001184:	4b38      	ldr	r3, [pc, #224]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001186:	430a      	orrs	r2, r1
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a3a      	ldr	r2, [pc, #232]	; (8001278 <HAL_RCC_OscConfig+0x630>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	431a      	orrs	r2, r3
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	0449      	lsls	r1, r1, #17
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff facd 	bl	8000750 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fac8 	bl	8000750 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e047      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	049b      	lsls	r3, r3, #18
 80011d6:	4013      	ands	r3, r2
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x574>
 80011da:	e03f      	b.n	800125c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 80011e2:	4924      	ldr	r1, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x62c>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fab2 	bl	8000750 <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff faad 	bl	8000750 <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e02c      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	049b      	lsls	r3, r3, #18
 800120c:	4013      	ands	r3, r2
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5aa>
 8001210:	e024      	b.n	800125c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e01f      	b.n	800125e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_RCC_OscConfig+0x620>)
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	401a      	ands	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	429a      	cmp	r2, r3
 8001238:	d10e      	bne.n	8001258 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	220f      	movs	r2, #15
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d107      	bne.n	8001258 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	23f0      	movs	r3, #240	; 0xf0
 800124c:	039b      	lsls	r3, r3, #14
 800124e:	401a      	ands	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b008      	add	sp, #32
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40021000 	.word	0x40021000
 800126c:	00001388 	.word	0x00001388
 8001270:	efffffff 	.word	0xefffffff
 8001274:	feffffff 	.word	0xfeffffff
 8001278:	ffc2ffff 	.word	0xffc2ffff

0800127c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b3      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d911      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	4b55      	ldr	r3, [pc, #340]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e09a      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	d015      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2204      	movs	r2, #4
 80012d2:	4013      	ands	r3, r2
 80012d4:	d006      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012d6:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012dc:	21e0      	movs	r1, #224	; 0xe0
 80012de:	00c9      	lsls	r1, r1, #3
 80012e0:	430a      	orrs	r2, r1
 80012e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	22f0      	movs	r2, #240	; 0xf0
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	d040      	beq.n	8001384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	029b      	lsls	r3, r3, #10
 8001312:	4013      	ands	r3, r2
 8001314:	d114      	bne.n	8001340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e06e      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049b      	lsls	r3, r3, #18
 800132a:	4013      	ands	r3, r2
 800132c:	d108      	bne.n	8001340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e062      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e05b      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff f9fc 	bl	8000750 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135c:	e009      	b.n	8001372 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7ff f9f7 	bl	8000750 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_RCC_ClockConfig+0x18c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e042      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	220c      	movs	r2, #12
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	429a      	cmp	r2, r3
 8001382:	d1ec      	bne.n	800135e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d211      	bcs.n	80013b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	4393      	bics	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_RCC_ClockConfig+0x184>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e020      	b.n	80013f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2204      	movs	r2, #4
 80013bc:	4013      	ands	r3, r2
 80013be:	d009      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_RCC_ClockConfig+0x190>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013d4:	f000 f820 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80013d8:	0001      	movs	r1, r0
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_RCC_ClockConfig+0x188>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	220f      	movs	r2, #15
 80013e2:	4013      	ands	r3, r2
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_RCC_ClockConfig+0x194>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	000a      	movs	r2, r1
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x198>)
 80013ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff f967 	bl	80006c4 <HAL_InitTick>
  
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40022000 	.word	0x40022000
 8001404:	40021000 	.word	0x40021000
 8001408:	00001388 	.word	0x00001388
 800140c:	fffff8ff 	.word	0xfffff8ff
 8001410:	08003da4 	.word	0x08003da4
 8001414:	20000000 	.word	0x20000000

08001418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b08f      	sub	sp, #60	; 0x3c
 800141c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800141e:	2314      	movs	r3, #20
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	4a2b      	ldr	r2, [pc, #172]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001426:	c313      	stmia	r3!, {r0, r1, r4}
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001432:	c313      	stmia	r3!, {r0, r1, r4}
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	2b04      	cmp	r3, #4
 800145a:	d002      	beq.n	8001462 <HAL_RCC_GetSysClockFreq+0x4a>
 800145c:	2b08      	cmp	r3, #8
 800145e:	d003      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x50>
 8001460:	e02d      	b.n	80014be <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001466:	e02d      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	220f      	movs	r2, #15
 800146e:	4013      	ands	r3, r2
 8001470:	2214      	movs	r2, #20
 8001472:	18ba      	adds	r2, r7, r2
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	220f      	movs	r2, #15
 800147e:	4013      	ands	r3, r2
 8001480:	1d3a      	adds	r2, r7, #4
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4013      	ands	r3, r2
 800148e:	d009      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001494:	f7fe fe4a 	bl	800012c <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	001a      	movs	r2, r3
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	4353      	muls	r3, r2
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
 80014a2:	e009      	b.n	80014b8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a6:	000a      	movs	r2, r1
 80014a8:	0152      	lsls	r2, r2, #5
 80014aa:	1a52      	subs	r2, r2, r1
 80014ac:	0193      	lsls	r3, r2, #6
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	185b      	adds	r3, r3, r1
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80014b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014bc:	e002      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_RCC_GetSysClockFreq+0xc4>)
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b00f      	add	sp, #60	; 0x3c
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	08003c24 	.word	0x08003c24
 80014d4:	08003c34 	.word	0x08003c34
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200

080014e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014f8:	f7ff fff2 	bl	80014e0 <HAL_RCC_GetHCLKFreq>
 80014fc:	0001      	movs	r1, r0
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	2207      	movs	r2, #7
 8001506:	4013      	ands	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_RCC_GetPCLK1Freq+0x28>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	40d9      	lsrs	r1, r3
 800150e:	000b      	movs	r3, r1
}    
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40021000 	.word	0x40021000
 800151c:	08003db4 	.word	0x08003db4

08001520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800153c:	e08e      	b.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2017      	movs	r0, #23
 8001540:	183b      	adds	r3, r7, r0
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	055b      	lsls	r3, r3, #21
 800154e:	4013      	ands	r3, r2
 8001550:	d110      	bne.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0549      	lsls	r1, r1, #21
 800155c:	430a      	orrs	r2, r1
 800155e:	61da      	str	r2, [r3, #28]
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156e:	183b      	adds	r3, r7, r0
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d11a      	bne.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0049      	lsls	r1, r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158e:	f7ff f8df 	bl	8000750 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	e008      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff f8da 	bl	8000750 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e087      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015b6:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d034      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d02c      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0249      	lsls	r1, r1, #9
 80015ec:	430a      	orrs	r2, r1
 80015ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015f6:	4936      	ldr	r1, [pc, #216]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff f8a1 	bl	8000750 <HAL_GetTick>
 800160e:	0003      	movs	r3, r0
 8001610:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	e009      	b.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff f89c 	bl	8000750 <HAL_GetTick>
 8001618:	0002      	movs	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e048      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d0f0      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a25      	ldr	r2, [pc, #148]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001638:	4013      	ands	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001642:	430a      	orrs	r2, r1
 8001644:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001646:	2317      	movs	r3, #23
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001656:	4920      	ldr	r1, [pc, #128]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001658:	400a      	ands	r2, r1
 800165a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	2203      	movs	r2, #3
 800166c:	4393      	bics	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001676:	430a      	orrs	r2, r1
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2220      	movs	r2, #32
 8001680:	4013      	ands	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	2210      	movs	r2, #16
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001694:	430a      	orrs	r2, r1
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4013      	ands	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b006      	add	sp, #24
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40007000 	.word	0x40007000
 80016cc:	fffffcff 	.word	0xfffffcff
 80016d0:	fffeffff 	.word	0xfffeffff
 80016d4:	00001388 	.word	0x00001388
 80016d8:	efffffff 	.word	0xefffffff

080016dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e042      	b.n	8001774 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	223d      	movs	r2, #61	; 0x3d
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	223c      	movs	r2, #60	; 0x3c
 80016fe:	2100      	movs	r1, #0
 8001700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0018      	movs	r0, r3
 8001706:	f7fe fecb 	bl	80004a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	223d      	movs	r2, #61	; 0x3d
 800170e:	2102      	movs	r1, #2
 8001710:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	0019      	movs	r1, r3
 800171c:	0010      	movs	r0, r2
 800171e:	f000 f9e3 	bl	8001ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2246      	movs	r2, #70	; 0x46
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	223e      	movs	r2, #62	; 0x3e
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	223f      	movs	r2, #63	; 0x3f
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2241      	movs	r2, #65	; 0x41
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2242      	movs	r2, #66	; 0x42
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2243      	movs	r2, #67	; 0x43
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2244      	movs	r2, #68	; 0x44
 800175e:	2101      	movs	r1, #1
 8001760:	5499      	strb	r1, [r3, r2]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2245      	movs	r2, #69	; 0x45
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	223d      	movs	r2, #61	; 0x3d
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	223d      	movs	r2, #61	; 0x3d
 8001788:	5c9b      	ldrb	r3, [r3, r2]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d001      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e03b      	b.n	800180c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	223d      	movs	r2, #61	; 0x3d
 8001798:	2102      	movs	r1, #2
 800179a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_TIM_Base_Start_IT+0x98>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00f      	beq.n	80017d6 <HAL_TIM_Base_Start_IT+0x5a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	429a      	cmp	r2, r3
 80017c0:	d009      	beq.n	80017d6 <HAL_TIM_Base_Start_IT+0x5a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_TIM_Base_Start_IT+0x9c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_TIM_Base_Start_IT+0x5a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_TIM_Base_Start_IT+0xa0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d111      	bne.n	80017fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2207      	movs	r2, #7
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d010      	beq.n	800180a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2101      	movs	r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017f8:	e007      	b.n	800180a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40012c00 	.word	0x40012c00
 8001818:	40000400 	.word	0x40000400
 800181c:	40014000 	.word	0x40014000

08001820 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2101      	movs	r1, #1
 8001834:	438a      	bics	r2, r1
 8001836:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_TIM_Base_Stop_IT+0x54>)
 8001840:	4013      	ands	r3, r2
 8001842:	d10d      	bne.n	8001860 <HAL_TIM_Base_Stop_IT+0x40>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_TIM_Base_Stop_IT+0x58>)
 800184c:	4013      	ands	r3, r2
 800184e:	d107      	bne.n	8001860 <HAL_TIM_Base_Stop_IT+0x40>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	438a      	bics	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	223d      	movs	r2, #61	; 0x3d
 8001864:	2101      	movs	r1, #1
 8001866:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	00001111 	.word	0x00001111
 8001878:	00000444 	.word	0x00000444

0800187c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d124      	bne.n	80018dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	2b02      	cmp	r3, #2
 800189e:	d11d      	bne.n	80018dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4252      	negs	r2, r2
 80018a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2203      	movs	r2, #3
 80018b8:	4013      	ands	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f8fa 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 80018c4:	e007      	b.n	80018d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8ed 	bl	8001aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 f8f9 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2204      	movs	r2, #4
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d125      	bne.n	8001936 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2204      	movs	r2, #4
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d11e      	bne.n	8001936 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2205      	movs	r2, #5
 80018fe:	4252      	negs	r2, r2
 8001900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	23c0      	movs	r3, #192	; 0xc0
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f000 f8cd 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 800191e:	e007      	b.n	8001930 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f8c0 	bl	8001aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f000 f8cc 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2208      	movs	r2, #8
 800193e:	4013      	ands	r3, r2
 8001940:	2b08      	cmp	r3, #8
 8001942:	d124      	bne.n	800198e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2208      	movs	r2, #8
 800194c:	4013      	ands	r3, r2
 800194e:	2b08      	cmp	r3, #8
 8001950:	d11d      	bne.n	800198e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2209      	movs	r2, #9
 8001958:	4252      	negs	r2, r2
 800195a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2204      	movs	r2, #4
 8001960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2203      	movs	r2, #3
 800196a:	4013      	ands	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f8a1 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 8001976:	e007      	b.n	8001988 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	f000 f894 	bl	8001aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f000 f8a0 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2210      	movs	r2, #16
 8001996:	4013      	ands	r3, r2
 8001998:	2b10      	cmp	r3, #16
 800199a:	d125      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2210      	movs	r2, #16
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d11e      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2211      	movs	r2, #17
 80019b0:	4252      	negs	r2, r2
 80019b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2208      	movs	r2, #8
 80019b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	23c0      	movs	r3, #192	; 0xc0
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d004      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 f874 	bl	8001ab8 <HAL_TIM_IC_CaptureCallback>
 80019d0:	e007      	b.n	80019e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 f867 	bl	8001aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 f873 	bl	8001ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10f      	bne.n	8001a16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d108      	bne.n	8001a16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4252      	negs	r2, r2
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f001 fbbf 	bl	8003194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b80      	cmp	r3, #128	; 0x80
 8001a22:	d10f      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b80      	cmp	r3, #128	; 0x80
 8001a30:	d108      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2281      	movs	r2, #129	; 0x81
 8001a38:	4252      	negs	r2, r2
 8001a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f938 	bl	8001cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2240      	movs	r2, #64	; 0x40
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b40      	cmp	r3, #64	; 0x40
 8001a50:	d10f      	bne.n	8001a72 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	d108      	bne.n	8001a72 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	4252      	negs	r2, r2
 8001a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f833 	bl	8001ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d108      	bne.n	8001aa0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2221      	movs	r2, #33	; 0x21
 8001a94:	4252      	negs	r2, r2
 8001a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f902 	bl	8001ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <TIM_Base_SetConfig+0xe4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d008      	beq.n	8001b12 <TIM_Base_SetConfig+0x2a>
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d003      	beq.n	8001b12 <TIM_Base_SetConfig+0x2a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <TIM_Base_SetConfig+0xe8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2270      	movs	r2, #112	; 0x70
 8001b16:	4393      	bics	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <TIM_Base_SetConfig+0xe4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d018      	beq.n	8001b5e <TIM_Base_SetConfig+0x76>
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	05db      	lsls	r3, r3, #23
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d013      	beq.n	8001b5e <TIM_Base_SetConfig+0x76>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <TIM_Base_SetConfig+0xe8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00f      	beq.n	8001b5e <TIM_Base_SetConfig+0x76>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <TIM_Base_SetConfig+0xec>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00b      	beq.n	8001b5e <TIM_Base_SetConfig+0x76>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <TIM_Base_SetConfig+0xf0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <TIM_Base_SetConfig+0x76>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <TIM_Base_SetConfig+0xf4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d003      	beq.n	8001b5e <TIM_Base_SetConfig+0x76>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <TIM_Base_SetConfig+0xf8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <TIM_Base_SetConfig+0xfc>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	4393      	bics	r3, r2
 8001b76:	001a      	movs	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <TIM_Base_SetConfig+0xe4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00b      	beq.n	8001bb6 <TIM_Base_SetConfig+0xce>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <TIM_Base_SetConfig+0xf0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <TIM_Base_SetConfig+0xce>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <TIM_Base_SetConfig+0xf4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d003      	beq.n	8001bb6 <TIM_Base_SetConfig+0xce>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <TIM_Base_SetConfig+0xf8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d103      	bne.n	8001bbe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	615a      	str	r2, [r3, #20]
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40012c00 	.word	0x40012c00
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40002000 	.word	0x40002000
 8001bd8:	40014000 	.word	0x40014000
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40014800 	.word	0x40014800
 8001be4:	fffffcff 	.word	0xfffffcff

08001be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223c      	movs	r2, #60	; 0x3c
 8001bf6:	5c9b      	ldrb	r3, [r3, r2]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e047      	b.n	8001c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	223c      	movs	r2, #60	; 0x3c
 8001c04:	2101      	movs	r1, #1
 8001c06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	223d      	movs	r2, #61	; 0x3d
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2270      	movs	r2, #112	; 0x70
 8001c24:	4393      	bics	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00f      	beq.n	8001c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	05db      	lsls	r3, r3, #23
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d009      	beq.n	8001c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d10c      	bne.n	8001c7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	4393      	bics	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	223d      	movs	r2, #61	; 0x3d
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	223c      	movs	r2, #60	; 0x3c
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40014000 	.word	0x40014000

08001ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e044      	b.n	8001d60 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2274      	movs	r2, #116	; 0x74
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7fe fbff 	bl	80004ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2224      	movs	r2, #36	; 0x24
 8001cf2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f000 f8da 	bl	8001ec0 <UART_SetConfig>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e024      	b.n	8001d60 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fa0d 	bl	8002140 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	490d      	ldr	r1, [pc, #52]	; (8001d68 <HAL_UART_Init+0xa4>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	212a      	movs	r1, #42	; 0x2a
 8001d42:	438a      	bics	r2, r1
 8001d44:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 faa5 	bl	80022a8 <UART_CheckIdleState>
 8001d5e:	0003      	movs	r3, r0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	ffffb7ff 	.word	0xffffb7ff

08001d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	1dbb      	adds	r3, r7, #6
 8001d7a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d000      	beq.n	8001d86 <HAL_UART_Transmit+0x1a>
 8001d84:	e096      	b.n	8001eb4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_UART_Transmit+0x28>
 8001d8c:	1dbb      	adds	r3, r7, #6
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e08e      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d109      	bne.n	8001db8 <HAL_UART_Transmit+0x4c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e07e      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2274      	movs	r2, #116	; 0x74
 8001dbc:	5c9b      	ldrb	r3, [r3, r2]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_UART_Transmit+0x5a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e077      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2274      	movs	r2, #116	; 0x74
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fcb8 	bl	8000750 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1dba      	adds	r2, r7, #6
 8001de8:	2150      	movs	r1, #80	; 0x50
 8001dea:	8812      	ldrh	r2, [r2, #0]
 8001dec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1dba      	adds	r2, r7, #6
 8001df2:	2152      	movs	r1, #82	; 0x52
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d108      	bne.n	8001e16 <HAL_UART_Transmit+0xaa>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d104      	bne.n	8001e16 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e003      	b.n	8001e1e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2274      	movs	r2, #116	; 0x74
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001e26:	e02d      	b.n	8001e84 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	0013      	movs	r3, r2
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	f000 fa7f 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e039      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	05d2      	lsls	r2, r2, #23
 8001e52:	0dd2      	lsrs	r2, r2, #23
 8001e54:	b292      	uxth	r2, r2
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e008      	b.n	8001e72 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2252      	movs	r2, #82	; 0x52
 8001e76:	5a9b      	ldrh	r3, [r3, r2]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2252      	movs	r2, #82	; 0x52
 8001e82:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2252      	movs	r2, #82	; 0x52
 8001e88:	5a9b      	ldrh	r3, [r3, r2]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1cb      	bne.n	8001e28 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	0013      	movs	r3, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	f000 fa4b 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e005      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b008      	add	sp, #32
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ec8:	231e      	movs	r3, #30
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a8d      	ldr	r2, [pc, #564]	; (8002124 <UART_SetConfig+0x264>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a88      	ldr	r2, [pc, #544]	; (8002128 <UART_SetConfig+0x268>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a7f      	ldr	r2, [pc, #508]	; (800212c <UART_SetConfig+0x26c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a7b      	ldr	r2, [pc, #492]	; (8002130 <UART_SetConfig+0x270>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d127      	bne.n	8001f96 <UART_SetConfig+0xd6>
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <UART_SetConfig+0x274>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d00d      	beq.n	8001f6e <UART_SetConfig+0xae>
 8001f52:	d81b      	bhi.n	8001f8c <UART_SetConfig+0xcc>
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d014      	beq.n	8001f82 <UART_SetConfig+0xc2>
 8001f58:	d818      	bhi.n	8001f8c <UART_SetConfig+0xcc>
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <UART_SetConfig+0xa4>
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d00a      	beq.n	8001f78 <UART_SetConfig+0xb8>
 8001f62:	e013      	b.n	8001f8c <UART_SetConfig+0xcc>
 8001f64:	231f      	movs	r3, #31
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e021      	b.n	8001fb2 <UART_SetConfig+0xf2>
 8001f6e:	231f      	movs	r3, #31
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2202      	movs	r2, #2
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e01c      	b.n	8001fb2 <UART_SetConfig+0xf2>
 8001f78:	231f      	movs	r3, #31
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	e017      	b.n	8001fb2 <UART_SetConfig+0xf2>
 8001f82:	231f      	movs	r3, #31
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2208      	movs	r2, #8
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e012      	b.n	8001fb2 <UART_SetConfig+0xf2>
 8001f8c:	231f      	movs	r3, #31
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2210      	movs	r2, #16
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e00d      	b.n	8001fb2 <UART_SetConfig+0xf2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a67      	ldr	r2, [pc, #412]	; (8002138 <UART_SetConfig+0x278>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d104      	bne.n	8001faa <UART_SetConfig+0xea>
 8001fa0:	231f      	movs	r3, #31
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e003      	b.n	8001fb2 <UART_SetConfig+0xf2>
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2210      	movs	r2, #16
 8001fb0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d15d      	bne.n	800207a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d015      	beq.n	8001ff4 <UART_SetConfig+0x134>
 8001fc8:	dc18      	bgt.n	8001ffc <UART_SetConfig+0x13c>
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00d      	beq.n	8001fea <UART_SetConfig+0x12a>
 8001fce:	dc15      	bgt.n	8001ffc <UART_SetConfig+0x13c>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <UART_SetConfig+0x11a>
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d005      	beq.n	8001fe4 <UART_SetConfig+0x124>
 8001fd8:	e010      	b.n	8001ffc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fda:	f7ff fa8b 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]
        break;
 8001fe2:	e012      	b.n	800200a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <UART_SetConfig+0x27c>)
 8001fe6:	61bb      	str	r3, [r7, #24]
        break;
 8001fe8:	e00f      	b.n	800200a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fea:	f7ff fa15 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
        break;
 8001ff2:	e00a      	b.n	800200a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	61bb      	str	r3, [r7, #24]
        break;
 8001ffa:	e006      	b.n	800200a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002000:	231e      	movs	r3, #30
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
        break;
 8002008:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d100      	bne.n	8002012 <UART_SetConfig+0x152>
 8002010:	e07b      	b.n	800210a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	005a      	lsls	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	18d2      	adds	r2, r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	0019      	movs	r1, r3
 8002024:	0010      	movs	r0, r2
 8002026:	f7fe f881 	bl	800012c <__udivsi3>
 800202a:	0003      	movs	r3, r0
 800202c:	b29b      	uxth	r3, r3
 800202e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d91c      	bls.n	8002070 <UART_SetConfig+0x1b0>
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	429a      	cmp	r2, r3
 800203e:	d217      	bcs.n	8002070 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	b29a      	uxth	r2, r3
 8002044:	200e      	movs	r0, #14
 8002046:	183b      	adds	r3, r7, r0
 8002048:	210f      	movs	r1, #15
 800204a:	438a      	bics	r2, r1
 800204c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	2207      	movs	r2, #7
 8002056:	4013      	ands	r3, r2
 8002058:	b299      	uxth	r1, r3
 800205a:	183b      	adds	r3, r7, r0
 800205c:	183a      	adds	r2, r7, r0
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	183a      	adds	r2, r7, r0
 800206a:	8812      	ldrh	r2, [r2, #0]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	e04c      	b.n	800210a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002070:	231e      	movs	r3, #30
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e047      	b.n	800210a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800207a:	231f      	movs	r3, #31
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d015      	beq.n	80020b0 <UART_SetConfig+0x1f0>
 8002084:	dc18      	bgt.n	80020b8 <UART_SetConfig+0x1f8>
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00d      	beq.n	80020a6 <UART_SetConfig+0x1e6>
 800208a:	dc15      	bgt.n	80020b8 <UART_SetConfig+0x1f8>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <UART_SetConfig+0x1d6>
 8002090:	2b02      	cmp	r3, #2
 8002092:	d005      	beq.n	80020a0 <UART_SetConfig+0x1e0>
 8002094:	e010      	b.n	80020b8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002096:	f7ff fa2d 	bl	80014f4 <HAL_RCC_GetPCLK1Freq>
 800209a:	0003      	movs	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
        break;
 800209e:	e012      	b.n	80020c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020a0:	4b26      	ldr	r3, [pc, #152]	; (800213c <UART_SetConfig+0x27c>)
 80020a2:	61bb      	str	r3, [r7, #24]
        break;
 80020a4:	e00f      	b.n	80020c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020a6:	f7ff f9b7 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80020aa:	0003      	movs	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
        break;
 80020ae:	e00a      	b.n	80020c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	61bb      	str	r3, [r7, #24]
        break;
 80020b6:	e006      	b.n	80020c6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020bc:	231e      	movs	r3, #30
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
        break;
 80020c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01e      	beq.n	800210a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	085a      	lsrs	r2, r3, #1
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	18d2      	adds	r2, r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f7fe f825 	bl	800012c <__udivsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	d909      	bls.n	8002102 <UART_SetConfig+0x242>
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	025b      	lsls	r3, r3, #9
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d204      	bcs.n	8002102 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	e003      	b.n	800210a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002102:	231e      	movs	r3, #30
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002116:	231e      	movs	r3, #30
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b008      	add	sp, #32
 8002122:	bd80      	pop	{r7, pc}
 8002124:	ffff69f3 	.word	0xffff69f3
 8002128:	ffffcfff 	.word	0xffffcfff
 800212c:	fffff4ff 	.word	0xfffff4ff
 8002130:	40013800 	.word	0x40013800
 8002134:	40021000 	.word	0x40021000
 8002138:	40004400 	.word	0x40004400
 800213c:	007a1200 	.word	0x007a1200

08002140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	d00b      	beq.n	800216a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <UART_AdvFeatureConfig+0x144>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d00b      	beq.n	800218c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a43      	ldr	r2, [pc, #268]	; (8002288 <UART_AdvFeatureConfig+0x148>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	2204      	movs	r2, #4
 8002192:	4013      	ands	r3, r2
 8002194:	d00b      	beq.n	80021ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a3b      	ldr	r2, [pc, #236]	; (800228c <UART_AdvFeatureConfig+0x14c>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	2208      	movs	r2, #8
 80021b4:	4013      	ands	r3, r2
 80021b6:	d00b      	beq.n	80021d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a34      	ldr	r2, [pc, #208]	; (8002290 <UART_AdvFeatureConfig+0x150>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2210      	movs	r2, #16
 80021d6:	4013      	ands	r3, r2
 80021d8:	d00b      	beq.n	80021f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <UART_AdvFeatureConfig+0x154>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2220      	movs	r2, #32
 80021f8:	4013      	ands	r3, r2
 80021fa:	d00b      	beq.n	8002214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4a25      	ldr	r2, [pc, #148]	; (8002298 <UART_AdvFeatureConfig+0x158>)
 8002204:	4013      	ands	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	4013      	ands	r3, r2
 800221c:	d01d      	beq.n	800225a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <UART_AdvFeatureConfig+0x15c>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	035b      	lsls	r3, r3, #13
 800223e:	429a      	cmp	r2, r3
 8002240:	d10b      	bne.n	800225a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <UART_AdvFeatureConfig+0x160>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	4013      	ands	r3, r2
 8002262:	d00b      	beq.n	800227c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <UART_AdvFeatureConfig+0x164>)
 800226c:	4013      	ands	r3, r2
 800226e:	0019      	movs	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
  }
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fffdffff 	.word	0xfffdffff
 8002288:	fffeffff 	.word	0xfffeffff
 800228c:	fffbffff 	.word	0xfffbffff
 8002290:	ffff7fff 	.word	0xffff7fff
 8002294:	ffffefff 	.word	0xffffefff
 8002298:	ffffdfff 	.word	0xffffdfff
 800229c:	ffefffff 	.word	0xffefffff
 80022a0:	ff9fffff 	.word	0xff9fffff
 80022a4:	fff7ffff 	.word	0xfff7ffff

080022a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	2100      	movs	r1, #0
 80022b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022b8:	f7fe fa4a 	bl	8000750 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d10c      	bne.n	80022e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	0391      	lsls	r1, r2, #14
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <UART_CheckIdleState+0x8c>)
 80022d8:	9200      	str	r2, [sp, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	f000 f82c 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d001      	beq.n	80022e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e021      	b.n	800232c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2204      	movs	r2, #4
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d10c      	bne.n	8002310 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	03d1      	lsls	r1, r2, #15
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <UART_CheckIdleState+0x8c>)
 8002300:	9200      	str	r2, [sp, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	f000 f818 	bl	8002338 <UART_WaitOnFlagUntilTimeout>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d001      	beq.n	8002310 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e00d      	b.n	800232c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2274      	movs	r2, #116	; 0x74
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}
 8002334:	01ffffff 	.word	0x01ffffff

08002338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002348:	e05e      	b.n	8002408 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	d05b      	beq.n	8002408 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002350:	f7fe f9fe 	bl	8000750 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d302      	bcc.n	8002366 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11b      	bne.n	800239e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	492f      	ldr	r1, [pc, #188]	; (8002430 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002372:	400a      	ands	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	438a      	bics	r2, r1
 8002384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2274      	movs	r2, #116	; 0x74
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e044      	b.n	8002428 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2204      	movs	r2, #4
 80023a6:	4013      	ands	r3, r2
 80023a8:	d02e      	beq.n	8002408 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	401a      	ands	r2, r3
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d124      	bne.n	8002408 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4917      	ldr	r1, [pc, #92]	; (8002430 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	2120      	movs	r1, #32
 80023fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2274      	movs	r2, #116	; 0x74
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e00f      	b.n	8002428 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	425a      	negs	r2, r3
 8002418:	4153      	adcs	r3, r2
 800241a:	b2db      	uxtb	r3, r3
 800241c:	001a      	movs	r2, r3
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d091      	beq.n	800234a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}
 8002430:	fffffe5f 	.word	0xfffffe5f

08002434 <rotl8>:
static const unsigned char RC0[16]={0x07,0x0a,0x9b,0xe0,0xd1,0x1a,0x22,0xf7,0x62,0x96,0x71,0xaa,0x2b,0xe9,0xcf,0xb7};//Round constants (RC_{2i})
static const unsigned char RC1[16]={0x53,0x5d,0x49,0x7f,0xbe,0x1d,0x28,0x6c,0x82,0x47,0x6b,0x88,0xdc,0x8b,0x59,0xc6};//Round constants (RC_{2i+1})
static const unsigned char RC2[16]={0x43,0xe4,0x5e,0xcc,0x32,0x4e,0x75,0x25,0xfd,0xf9,0x76,0xa0,0xb0,0x09,0x1e,0xad};//Round constants (RC_{2i+2})

unsigned char rotl8 ( const unsigned char x, const unsigned char y, const unsigned char shift )
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	0004      	movs	r4, r0
 800243c:	0008      	movs	r0, r1
 800243e:	0011      	movs	r1, r2
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	1c22      	adds	r2, r4, #0
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	1c02      	adds	r2, r0, #0
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	1d7b      	adds	r3, r7, #5
 800244e:	1c0a      	adds	r2, r1, #0
 8002450:	701a      	strb	r2, [r3, #0]
	return ((x<<shift)|(y>>(8-shift)));
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	1d7b      	adds	r3, r7, #5
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	409a      	lsls	r2, r3
 800245c:	0013      	movs	r3, r2
 800245e:	b25a      	sxtb	r2, r3
 8002460:	1dbb      	adds	r3, r7, #6
 8002462:	7819      	ldrb	r1, [r3, #0]
 8002464:	1d7b      	adds	r3, r7, #5
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2008      	movs	r0, #8
 800246a:	1ac3      	subs	r3, r0, r3
 800246c:	4119      	asrs	r1, r3
 800246e:	000b      	movs	r3, r1
 8002470:	b25b      	sxtb	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b25b      	sxtb	r3, r3
 8002476:	b2db      	uxtb	r3, r3
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b003      	add	sp, #12
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <simeck64_box>:
   *rc: 8-bit round constant
   *input: 64-bit input
   *output: 64-bit output
*/
void simeck64_box( unsigned char *output, const unsigned char *input, const unsigned char rc )
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08b      	sub	sp, #44	; 0x2c
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	701a      	strb	r2, [r3, #0]
	unsigned char i, t;
	unsigned char *tmp_shift_1, *tmp_shift_5, *tmp_pt;

	tmp_shift_1 = (unsigned char *)malloc(4*sizeof(unsigned char));
 800248e:	2004      	movs	r0, #4
 8002490:	f000 ff78 	bl	8003384 <malloc>
 8002494:	0003      	movs	r3, r0
 8002496:	623b      	str	r3, [r7, #32]
	tmp_shift_5 = (unsigned char *)malloc(4*sizeof(unsigned char));
 8002498:	2004      	movs	r0, #4
 800249a:	f000 ff73 	bl	8003384 <malloc>
 800249e:	0003      	movs	r3, r0
 80024a0:	61fb      	str	r3, [r7, #28]
	tmp_pt = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 80024a2:	2008      	movs	r0, #8
 80024a4:	f000 ff6e 	bl	8003384 <malloc>
 80024a8:	0003      	movs	r3, r0
 80024aa:	61bb      	str	r3, [r7, #24]

	for ( i = 0; i < SIMECKBYTES; i++ )
 80024ac:	2327      	movs	r3, #39	; 0x27
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e00f      	b.n	80024d6 <simeck64_box+0x56>
		tmp_pt[i] = input[i];
 80024b6:	2027      	movs	r0, #39	; 0x27
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	18d2      	adds	r2, r2, r3
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	69b9      	ldr	r1, [r7, #24]
 80024c6:	18cb      	adds	r3, r1, r3
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < SIMECKBYTES; i++ )
 80024cc:	183b      	adds	r3, r7, r0
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	183b      	adds	r3, r7, r0
 80024d2:	3201      	adds	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	2227      	movs	r2, #39	; 0x27
 80024d8:	18bb      	adds	r3, r7, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d9ea      	bls.n	80024b6 <simeck64_box+0x36>

	for ( i = 0; i < SIMECKROUND; i++ )
 80024e0:	18bb      	adds	r3, r7, r2
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e12e      	b.n	8002746 <simeck64_box+0x2c6>
	{
		tmp_shift_1[0] = rotl8(tmp_pt[0], tmp_pt[1],1);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	7818      	ldrb	r0, [r3, #0]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3301      	adds	r3, #1
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	0019      	movs	r1, r3
 80024f6:	f7ff ff9d 	bl	8002434 <rotl8>
 80024fa:	0003      	movs	r3, r0
 80024fc:	001a      	movs	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[1] = rotl8(tmp_pt[1], tmp_pt[2],1);
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3301      	adds	r3, #1
 8002506:	7818      	ldrb	r0, [r3, #0]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	3302      	adds	r3, #2
 800250c:	7819      	ldrb	r1, [r3, #0]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	1c5c      	adds	r4, r3, #1
 8002512:	2201      	movs	r2, #1
 8002514:	f7ff ff8e 	bl	8002434 <rotl8>
 8002518:	0003      	movs	r3, r0
 800251a:	7023      	strb	r3, [r4, #0]
		tmp_shift_1[2] = rotl8(tmp_pt[2], tmp_pt[3],1);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3302      	adds	r3, #2
 8002520:	7818      	ldrb	r0, [r3, #0]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	3303      	adds	r3, #3
 8002526:	7819      	ldrb	r1, [r3, #0]
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	1c9c      	adds	r4, r3, #2
 800252c:	2201      	movs	r2, #1
 800252e:	f7ff ff81 	bl	8002434 <rotl8>
 8002532:	0003      	movs	r3, r0
 8002534:	7023      	strb	r3, [r4, #0]
		tmp_shift_1[3] = rotl8(tmp_pt[3], tmp_pt[0],1);
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3303      	adds	r3, #3
 800253a:	7818      	ldrb	r0, [r3, #0]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	7819      	ldrb	r1, [r3, #0]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	1cdc      	adds	r4, r3, #3
 8002544:	2201      	movs	r2, #1
 8002546:	f7ff ff75 	bl	8002434 <rotl8>
 800254a:	0003      	movs	r3, r0
 800254c:	7023      	strb	r3, [r4, #0]

		tmp_shift_5[0] = rotl8(tmp_pt[0], tmp_pt[1],5);
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	7818      	ldrb	r0, [r3, #0]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3301      	adds	r3, #1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2205      	movs	r2, #5
 800255a:	0019      	movs	r1, r3
 800255c:	f7ff ff6a 	bl	8002434 <rotl8>
 8002560:	0003      	movs	r3, r0
 8002562:	001a      	movs	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[1] = rotl8(tmp_pt[1], tmp_pt[2],5);
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	3301      	adds	r3, #1
 800256c:	7818      	ldrb	r0, [r3, #0]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3302      	adds	r3, #2
 8002572:	7819      	ldrb	r1, [r3, #0]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	1c5c      	adds	r4, r3, #1
 8002578:	2205      	movs	r2, #5
 800257a:	f7ff ff5b 	bl	8002434 <rotl8>
 800257e:	0003      	movs	r3, r0
 8002580:	7023      	strb	r3, [r4, #0]
		tmp_shift_5[2] = rotl8(tmp_pt[2], tmp_pt[3],5);
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3302      	adds	r3, #2
 8002586:	7818      	ldrb	r0, [r3, #0]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3303      	adds	r3, #3
 800258c:	7819      	ldrb	r1, [r3, #0]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	1c9c      	adds	r4, r3, #2
 8002592:	2205      	movs	r2, #5
 8002594:	f7ff ff4e 	bl	8002434 <rotl8>
 8002598:	0003      	movs	r3, r0
 800259a:	7023      	strb	r3, [r4, #0]
		tmp_shift_5[3] = rotl8(tmp_pt[3], tmp_pt[0],5);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3303      	adds	r3, #3
 80025a0:	7818      	ldrb	r0, [r3, #0]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	7819      	ldrb	r1, [r3, #0]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	1cdc      	adds	r4, r3, #3
 80025aa:	2205      	movs	r2, #5
 80025ac:	f7ff ff42 	bl	8002434 <rotl8>
 80025b0:	0003      	movs	r3, r0
 80025b2:	7023      	strb	r3, [r4, #0]

		tmp_shift_5[0] = tmp_shift_5[0]&tmp_pt[0];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	4013      	ands	r3, r2
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[1] = tmp_shift_5[1]&tmp_pt[1];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3301      	adds	r3, #1
 80025ce:	7819      	ldrb	r1, [r3, #0]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	3301      	adds	r3, #1
 80025d4:	400a      	ands	r2, r1
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[2] = tmp_shift_5[2]&tmp_pt[2];
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3302      	adds	r3, #2
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	3302      	adds	r3, #2
 80025e4:	7819      	ldrb	r1, [r3, #0]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3302      	adds	r3, #2
 80025ea:	400a      	ands	r2, r1
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[3] = tmp_shift_5[3]&tmp_pt[3];
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3303      	adds	r3, #3
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3303      	adds	r3, #3
 80025fa:	7819      	ldrb	r1, [r3, #0]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3303      	adds	r3, #3
 8002600:	400a      	ands	r2, r1
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

		tmp_shift_1[0] = tmp_shift_1[0]^tmp_shift_5[0];
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4053      	eors	r3, r2
 8002610:	b2da      	uxtb	r2, r3
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[1] = tmp_shift_1[1]^tmp_shift_5[1];
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	3301      	adds	r3, #1
 800261a:	7819      	ldrb	r1, [r3, #0]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	3301      	adds	r3, #1
 8002626:	404a      	eors	r2, r1
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[2] = tmp_shift_1[2]^tmp_shift_5[2];
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	3302      	adds	r3, #2
 8002630:	7819      	ldrb	r1, [r3, #0]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3302      	adds	r3, #2
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	3302      	adds	r3, #2
 800263c:	404a      	eors	r2, r1
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[3] = tmp_shift_1[3]^tmp_shift_5[3];
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	3303      	adds	r3, #3
 8002646:	7819      	ldrb	r1, [r3, #0]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3303      	adds	r3, #3
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	3303      	adds	r3, #3
 8002652:	404a      	eors	r2, r1
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
		
		tmp_shift_1[0] = tmp_shift_1[0]^tmp_pt[4]^(0xff);
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	3304      	adds	r3, #4
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4053      	eors	r3, r2
 8002664:	b2db      	uxtb	r3, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	b2da      	uxtb	r2, r3
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[1] = tmp_shift_1[1]^tmp_pt[5]^(0xff);
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	3301      	adds	r3, #1
 8002672:	781a      	ldrb	r2, [r3, #0]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	3305      	adds	r3, #5
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	4053      	eors	r3, r2
 800267c:	b2da      	uxtb	r2, r3
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	3301      	adds	r3, #1
 8002682:	43d2      	mvns	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[2] = tmp_shift_1[2]^tmp_pt[6]^(0xff);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	3302      	adds	r3, #2
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3306      	adds	r3, #6
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4053      	eors	r3, r2
 8002696:	b2da      	uxtb	r2, r3
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	3302      	adds	r3, #2
 800269c:	43d2      	mvns	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[3] = tmp_shift_1[3]^tmp_pt[7]^(0xfe);
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	3303      	adds	r3, #3
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	3307      	adds	r3, #7
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4053      	eors	r3, r2
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	3303      	adds	r3, #3
 80026b6:	2102      	movs	r1, #2
 80026b8:	4249      	negs	r1, r1
 80026ba:	404a      	eors	r2, r1
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

		t = (rc >> i)&1;
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	2027      	movs	r0, #39	; 0x27
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	411a      	asrs	r2, r3
 80026cc:	0013      	movs	r3, r2
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	2417      	movs	r4, #23
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	2101      	movs	r1, #1
 80026d6:	400a      	ands	r2, r1
 80026d8:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[3] = tmp_shift_1[3]^t;
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	3303      	adds	r3, #3
 80026de:	7819      	ldrb	r1, [r3, #0]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	3303      	adds	r3, #3
 80026e4:	193a      	adds	r2, r7, r4
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	404a      	eors	r2, r1
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

		tmp_pt[4] = tmp_pt[0];
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3304      	adds	r3, #4
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	701a      	strb	r2, [r3, #0]
		tmp_pt[5] = tmp_pt[1];
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3305      	adds	r3, #5
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	7852      	ldrb	r2, [r2, #1]
 8002700:	701a      	strb	r2, [r3, #0]
		tmp_pt[6] = tmp_pt[2];
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3306      	adds	r3, #6
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	7892      	ldrb	r2, [r2, #2]
 800270a:	701a      	strb	r2, [r3, #0]
		tmp_pt[7] = tmp_pt[3];
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	3307      	adds	r3, #7
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	78d2      	ldrb	r2, [r2, #3]
 8002714:	701a      	strb	r2, [r3, #0]

		tmp_pt[0] = tmp_shift_1[0];
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	701a      	strb	r2, [r3, #0]
		tmp_pt[1] = tmp_shift_1[1];
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3301      	adds	r3, #1
 8002722:	6a3a      	ldr	r2, [r7, #32]
 8002724:	7852      	ldrb	r2, [r2, #1]
 8002726:	701a      	strb	r2, [r3, #0]
		tmp_pt[2] = tmp_shift_1[2];
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	3302      	adds	r3, #2
 800272c:	6a3a      	ldr	r2, [r7, #32]
 800272e:	7892      	ldrb	r2, [r2, #2]
 8002730:	701a      	strb	r2, [r3, #0]
		tmp_pt[3] = tmp_shift_1[3];
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	3303      	adds	r3, #3
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	78d2      	ldrb	r2, [r2, #3]
 800273a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < SIMECKROUND; i++ )
 800273c:	183b      	adds	r3, r7, r0
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	183b      	adds	r3, r7, r0
 8002742:	3201      	adds	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	2227      	movs	r2, #39	; 0x27
 8002748:	18bb      	adds	r3, r7, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b07      	cmp	r3, #7
 800274e:	d800      	bhi.n	8002752 <simeck64_box+0x2d2>
 8002750:	e6ca      	b.n	80024e8 <simeck64_box+0x68>

		//simeck_print_data(tmp_pt, 8);
	}
	for ( i = 0; i < SIMECKBYTES; i++ )
 8002752:	18bb      	adds	r3, r7, r2
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e00f      	b.n	800277a <simeck64_box+0x2fa>
		output[i] = tmp_pt[i];
 800275a:	2027      	movs	r0, #39	; 0x27
 800275c:	183b      	adds	r3, r7, r0
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	18d2      	adds	r2, r2, r3
 8002764:	183b      	adds	r3, r7, r0
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	18cb      	adds	r3, r1, r3
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < SIMECKBYTES; i++ )
 8002770:	183b      	adds	r3, r7, r0
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	183b      	adds	r3, r7, r0
 8002776:	3201      	adds	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	2327      	movs	r3, #39	; 0x27
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b07      	cmp	r3, #7
 8002782:	d9ea      	bls.n	800275a <simeck64_box+0x2da>
free(tmp_shift_1);
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 fe06 	bl	8003398 <free>
free(tmp_shift_5);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fe02 	bl	8003398 <free>
free(tmp_pt);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fdfe 	bl	8003398 <free>
return;
 800279c:	46c0      	nop			; (mov r8, r8)
}
 800279e:	46bd      	mov	sp, r7
 80027a0:	b00b      	add	sp, #44	; 0x2c
 80027a2:	bd90      	pop	{r4, r7, pc}

080027a4 <ace_permutation>:
/*
   *ace_permutation: 16-round ACE permutation of width 320 bits
   *input: 320-bit input, and output is stored in input (inplace) 
*/
void ace_permutation( unsigned char *input )
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	unsigned char i, j;
	unsigned char *tmp_inp, *tmp_a, *tmp_c, *tmp_e;

	tmp_inp = (unsigned char *)malloc(STATEBYTES*sizeof(unsigned char));
 80027ac:	2028      	movs	r0, #40	; 0x28
 80027ae:	f000 fde9 	bl	8003384 <malloc>
 80027b2:	0003      	movs	r3, r0
 80027b4:	61bb      	str	r3, [r7, #24]
	tmp_a = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 80027b6:	2008      	movs	r0, #8
 80027b8:	f000 fde4 	bl	8003384 <malloc>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]
	tmp_c = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 80027c0:	2008      	movs	r0, #8
 80027c2:	f000 fddf 	bl	8003384 <malloc>
 80027c6:	0003      	movs	r3, r0
 80027c8:	613b      	str	r3, [r7, #16]
	tmp_e = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 80027ca:	2008      	movs	r0, #8
 80027cc:	f000 fdda 	bl	8003384 <malloc>
 80027d0:	0003      	movs	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]

	for ( i = 0; i < STATEBYTES; i++ )
 80027d4:	231f      	movs	r3, #31
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e00f      	b.n	80027fe <ace_permutation+0x5a>
		tmp_inp[i] = input[i];
 80027de:	201f      	movs	r0, #31
 80027e0:	183b      	adds	r3, r7, r0
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	18d2      	adds	r2, r2, r3
 80027e8:	183b      	adds	r3, r7, r0
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	18cb      	adds	r3, r1, r3
 80027f0:	7812      	ldrb	r2, [r2, #0]
 80027f2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < STATEBYTES; i++ )
 80027f4:	183b      	adds	r3, r7, r0
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	183b      	adds	r3, r7, r0
 80027fa:	3201      	adds	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	221f      	movs	r2, #31
 8002800:	18bb      	adds	r3, r7, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b27      	cmp	r3, #39	; 0x27
 8002806:	d9ea      	bls.n	80027de <ace_permutation+0x3a>

	for ( i = 0; i < NUMSTEPS; i++ )
 8002808:	18bb      	adds	r3, r7, r2
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e14c      	b.n	8002aaa <ace_permutation+0x306>
	{
		//A block
		for ( j = 0; j < SIMECKBYTES; j++ )
 8002810:	231e      	movs	r3, #30
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e00f      	b.n	800283a <ace_permutation+0x96>
			tmp_a[j] = tmp_inp[j];
 800281a:	201e      	movs	r0, #30
 800281c:	183b      	adds	r3, r7, r0
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	18d2      	adds	r2, r2, r3
 8002824:	183b      	adds	r3, r7, r0
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	6979      	ldr	r1, [r7, #20]
 800282a:	18cb      	adds	r3, r1, r3
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 8002830:	183b      	adds	r3, r7, r0
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	183b      	adds	r3, r7, r0
 8002836:	3201      	adds	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	241e      	movs	r4, #30
 800283c:	193b      	adds	r3, r7, r4
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b07      	cmp	r3, #7
 8002842:	d9ea      	bls.n	800281a <ace_permutation+0x76>
		simeck64_box( tmp_a, tmp_a, RC0[i] );
 8002844:	231f      	movs	r3, #31
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4ab1      	ldr	r2, [pc, #708]	; (8002b10 <ace_permutation+0x36c>)
 800284c:	5cd2      	ldrb	r2, [r2, r3]
 800284e:	6979      	ldr	r1, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	0018      	movs	r0, r3
 8002854:	f7ff fe14 	bl	8002480 <simeck64_box>

		//C block
		for ( j = 0; j < SIMECKBYTES; j++ )
 8002858:	193b      	adds	r3, r7, r4
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e011      	b.n	8002884 <ace_permutation+0xe0>
			tmp_c[j] = tmp_inp[2*SIMECKBYTES+j];
 8002860:	201e      	movs	r0, #30
 8002862:	183b      	adds	r3, r7, r0
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	3310      	adds	r3, #16
 8002868:	001a      	movs	r2, r3
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	189a      	adds	r2, r3, r2
 800286e:	183b      	adds	r3, r7, r0
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	6939      	ldr	r1, [r7, #16]
 8002874:	18cb      	adds	r3, r1, r3
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 800287a:	183b      	adds	r3, r7, r0
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	183b      	adds	r3, r7, r0
 8002880:	3201      	adds	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	241e      	movs	r4, #30
 8002886:	193b      	adds	r3, r7, r4
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b07      	cmp	r3, #7
 800288c:	d9e8      	bls.n	8002860 <ace_permutation+0xbc>
		simeck64_box( tmp_c, tmp_c, RC1[i] );
 800288e:	231f      	movs	r3, #31
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4a9f      	ldr	r2, [pc, #636]	; (8002b14 <ace_permutation+0x370>)
 8002896:	5cd2      	ldrb	r2, [r2, r3]
 8002898:	6939      	ldr	r1, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff fdef 	bl	8002480 <simeck64_box>
		
		//E block
		for ( j = 0; j < SIMECKBYTES; j++ )
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e011      	b.n	80028ce <ace_permutation+0x12a>
			tmp_e[j] = tmp_inp[4*SIMECKBYTES+j];
 80028aa:	201e      	movs	r0, #30
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	3320      	adds	r3, #32
 80028b2:	001a      	movs	r2, r3
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	189a      	adds	r2, r3, r2
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	18cb      	adds	r3, r1, r3
 80028c0:	7812      	ldrb	r2, [r2, #0]
 80028c2:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 80028c4:	183b      	adds	r3, r7, r0
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	183b      	adds	r3, r7, r0
 80028ca:	3201      	adds	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	241e      	movs	r4, #30
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d9e8      	bls.n	80028aa <ace_permutation+0x106>
		simeck64_box( tmp_e, tmp_e, RC2[i] );
 80028d8:	231f      	movs	r3, #31
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4a8e      	ldr	r2, [pc, #568]	; (8002b18 <ace_permutation+0x374>)
 80028e0:	5cd2      	ldrb	r2, [r2, r3]
 80028e2:	68f9      	ldr	r1, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff fdca 	bl	8002480 <simeck64_box>

		// Update A: A <= SC_{3i+1}+D+F(E)
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e01a      	b.n	800292a <ace_permutation+0x186>
			tmp_inp[j] = tmp_inp[3*SIMECKBYTES+j]^tmp_e[j]^(0xff);
 80028f4:	201e      	movs	r0, #30
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	3318      	adds	r3, #24
 80028fc:	001a      	movs	r2, r3
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	189b      	adds	r3, r3, r2
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	183b      	adds	r3, r7, r0
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	18cb      	adds	r3, r1, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4053      	eors	r3, r2
 8002910:	b2da      	uxtb	r2, r3
 8002912:	183b      	adds	r3, r7, r0
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	18cb      	adds	r3, r1, r3
 800291a:	43d2      	mvns	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8002920:	183b      	adds	r3, r7, r0
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	183b      	adds	r3, r7, r0
 8002926:	3201      	adds	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	201e      	movs	r0, #30
 800292c:	183b      	adds	r3, r7, r0
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d9df      	bls.n	80028f4 <ace_permutation+0x150>
		tmp_inp[SIMECKBYTES-1] = tmp_inp[4*SIMECKBYTES-1]^tmp_e[SIMECKBYTES-1]^SC1[i];
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	331f      	adds	r3, #31
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3307      	adds	r3, #7
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4053      	eors	r3, r2
 8002942:	b2d9      	uxtb	r1, r3
 8002944:	231f      	movs	r3, #31
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4a74      	ldr	r2, [pc, #464]	; (8002b1c <ace_permutation+0x378>)
 800294c:	5cd2      	ldrb	r2, [r2, r3]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	3307      	adds	r3, #7
 8002952:	404a      	eors	r2, r1
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
		
		// Update E: E <= SC_{3i}+B+F(C)
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8002958:	183b      	adds	r3, r7, r0
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e01c      	b.n	800299a <ace_permutation+0x1f6>
			tmp_inp[4*SIMECKBYTES+j] = tmp_inp[SIMECKBYTES+j]^tmp_c[j]^(0xff);
 8002960:	201e      	movs	r0, #30
 8002962:	183b      	adds	r3, r7, r0
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	3308      	adds	r3, #8
 8002968:	001a      	movs	r2, r3
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	189b      	adds	r3, r3, r2
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	183b      	adds	r3, r7, r0
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	6939      	ldr	r1, [r7, #16]
 8002976:	18cb      	adds	r3, r1, r3
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4053      	eors	r3, r2
 800297c:	b2da      	uxtb	r2, r3
 800297e:	183b      	adds	r3, r7, r0
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	3320      	adds	r3, #32
 8002984:	0019      	movs	r1, r3
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	185b      	adds	r3, r3, r1
 800298a:	43d2      	mvns	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8002990:	183b      	adds	r3, r7, r0
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	183b      	adds	r3, r7, r0
 8002996:	3201      	adds	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	201e      	movs	r0, #30
 800299c:	183b      	adds	r3, r7, r0
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d9dd      	bls.n	8002960 <ace_permutation+0x1bc>
		tmp_inp[5*SIMECKBYTES-1] = tmp_inp[2*SIMECKBYTES-1]^tmp_c[SIMECKBYTES-1]^SC0[i];
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	330f      	adds	r3, #15
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	3307      	adds	r3, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4053      	eors	r3, r2
 80029b2:	b2d9      	uxtb	r1, r3
 80029b4:	231f      	movs	r3, #31
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	4a59      	ldr	r2, [pc, #356]	; (8002b20 <ace_permutation+0x37c>)
 80029bc:	5cd2      	ldrb	r2, [r2, r3]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	3327      	adds	r3, #39	; 0x27
 80029c2:	404a      	eors	r2, r1
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

		// Update B: B <= F(C)
		for ( j = 0; j < SIMECKBYTES; j++ )
 80029c8:	183b      	adds	r3, r7, r0
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e011      	b.n	80029f4 <ace_permutation+0x250>
			tmp_inp[SIMECKBYTES+j] = tmp_c[j];
 80029d0:	201e      	movs	r0, #30
 80029d2:	183b      	adds	r3, r7, r0
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	18d2      	adds	r2, r2, r3
 80029da:	183b      	adds	r3, r7, r0
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3308      	adds	r3, #8
 80029e0:	0019      	movs	r1, r3
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	185b      	adds	r3, r3, r1
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	183b      	adds	r3, r7, r0
 80029f0:	3201      	adds	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	221e      	movs	r2, #30
 80029f6:	18bb      	adds	r3, r7, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	d9e8      	bls.n	80029d0 <ace_permutation+0x22c>
		
		// Update C: C <= F(A)
		for ( j = 0; j < SIMECKBYTES; j++ )
 80029fe:	18bb      	adds	r3, r7, r2
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e011      	b.n	8002a2a <ace_permutation+0x286>
			tmp_inp[2*SIMECKBYTES+j] = tmp_a[j];
 8002a06:	201e      	movs	r0, #30
 8002a08:	183b      	adds	r3, r7, r0
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	18d2      	adds	r2, r2, r3
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3310      	adds	r3, #16
 8002a16:	0019      	movs	r1, r3
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	185b      	adds	r3, r3, r1
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	183b      	adds	r3, r7, r0
 8002a26:	3201      	adds	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	221e      	movs	r2, #30
 8002a2c:	18bb      	adds	r3, r7, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	d9e8      	bls.n	8002a06 <ace_permutation+0x262>
		
		// Update D: D <= SC_{3i+2}+F(A)+F(E)
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8002a34:	18bb      	adds	r3, r7, r2
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e01a      	b.n	8002a72 <ace_permutation+0x2ce>
			tmp_inp[3*SIMECKBYTES+j] = tmp_a[j]^tmp_e[j]^(0xff);
 8002a3c:	201e      	movs	r0, #30
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	18d3      	adds	r3, r2, r3
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	183b      	adds	r3, r7, r0
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	18cb      	adds	r3, r1, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4053      	eors	r3, r2
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	183b      	adds	r3, r7, r0
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	185b      	adds	r3, r3, r1
 8002a62:	43d2      	mvns	r2, r2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8002a68:	183b      	adds	r3, r7, r0
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	183b      	adds	r3, r7, r0
 8002a6e:	3201      	adds	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	231e      	movs	r3, #30
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d9df      	bls.n	8002a3c <ace_permutation+0x298>
		tmp_inp[4*SIMECKBYTES-1] = tmp_a[SIMECKBYTES-1]^tmp_e[SIMECKBYTES-1]^SC2[i];
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3307      	adds	r3, #7
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3307      	adds	r3, #7
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4053      	eors	r3, r2
 8002a8a:	b2d9      	uxtb	r1, r3
 8002a8c:	201f      	movs	r0, #31
 8002a8e:	183b      	adds	r3, r7, r0
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <ace_permutation+0x380>)
 8002a94:	5cd2      	ldrb	r2, [r2, r3]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	331f      	adds	r3, #31
 8002a9a:	404a      	eors	r2, r1
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < NUMSTEPS; i++ )
 8002aa0:	183b      	adds	r3, r7, r0
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	183b      	adds	r3, r7, r0
 8002aa6:	3201      	adds	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	221f      	movs	r2, #31
 8002aac:	18bb      	adds	r3, r7, r2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d800      	bhi.n	8002ab6 <ace_permutation+0x312>
 8002ab4:	e6ac      	b.n	8002810 <ace_permutation+0x6c>
		//ace_print_state256(tmp_pt); // Printing intermediate state
	}
	for ( i = 0; i < STATEBYTES; i++ )
 8002ab6:	18bb      	adds	r3, r7, r2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e00f      	b.n	8002ade <ace_permutation+0x33a>
		input[i] = tmp_inp[i];
 8002abe:	201f      	movs	r0, #31
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	18d2      	adds	r2, r2, r3
 8002ac8:	183b      	adds	r3, r7, r0
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	18cb      	adds	r3, r1, r3
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < STATEBYTES; i++ )
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	183b      	adds	r3, r7, r0
 8002ada:	3201      	adds	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	231f      	movs	r3, #31
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b27      	cmp	r3, #39	; 0x27
 8002ae6:	d9ea      	bls.n	8002abe <ace_permutation+0x31a>

free(tmp_a);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 fc54 	bl	8003398 <free>
free(tmp_c);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fc50 	bl	8003398 <free>
free(tmp_e);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fc4c 	bl	8003398 <free>
free(tmp_inp);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fc48 	bl	8003398 <free>
return;
 8002b08:	46c0      	nop			; (mov r8, r8)
}
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b009      	add	sp, #36	; 0x24
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	08003dec 	.word	0x08003dec
 8002b14:	08003dfc 	.word	0x08003dfc
 8002b18:	08003e0c 	.word	0x08003e0c
 8002b1c:	08003dcc 	.word	0x08003dcc
 8002b20:	08003dbc 	.word	0x08003dbc
 8002b24:	08003ddc 	.word	0x08003ddc

08002b28 <acehash_init>:
/*
   *acehash_init: initialize with IV
   *state: output state after initialization
*/
int acehash_init( unsigned char *state )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	unsigned char i;

	//Initialize the state to all-ZERO 
	for ( i = 0; i < STATEBYTES; i++ )
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e00b      	b.n	8002b52 <acehash_init+0x2a>
		state[i] = 0x0;
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	18d3      	adds	r3, r2, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < STATEBYTES; i++ )
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	3201      	adds	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	230f      	movs	r3, #15
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b27      	cmp	r3, #39	; 0x27
 8002b5a:	d9ee      	bls.n	8002b3a <acehash_init+0x12>
	if ( CRYPTO_BYTES == 32 )
	{
		//Initialize state with IV 0x804040
                //According to specification: B[7] = 0x80; B[6] = 0x40; B[5] = 0x40;
		state[8] = 0x80;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	701a      	strb	r2, [r3, #0]
		state[9] = 0x40;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3309      	adds	r3, #9
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	701a      	strb	r2, [r3, #0]
		state[10] = 0x40;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	330a      	adds	r3, #10
 8002b70:	2240      	movs	r2, #64	; 0x40
 8002b72:	701a      	strb	r2, [r3, #0]
		ace_permutation(state);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff fe14 	bl	80027a4 <ace_permutation>
	}
	else
	{
		return KAT_CRYPTO_FAILURE;
	}
return KAT_SUCCESS;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <crypto_hash>:
int crypto_hash(
	unsigned char *out,
	const unsigned char *in,
	unsigned long long inlen
	)
{
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b08c      	sub	sp, #48	; 0x30
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603a      	str	r2, [r7, #0]
 8002b94:	607b      	str	r3, [r7, #4]
	unsigned char *state;
	unsigned char i, lblen;
	//int func_ret;
	u64 j, in64len;

	in64len = inlen/8;
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0759      	lsls	r1, r3, #29
 8002b9c:	08d4      	lsrs	r4, r2, #3
 8002b9e:	430c      	orrs	r4, r1
 8002ba0:	08dd      	lsrs	r5, r3, #3
 8002ba2:	61bc      	str	r4, [r7, #24]
 8002ba4:	61fd      	str	r5, [r7, #28]
	lblen = (unsigned char)(inlen%8);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1c13      	adds	r3, r2, #0
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	2317      	movs	r3, #23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2107      	movs	r1, #7
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]

	state = (unsigned char *)malloc(sizeof(unsigned char)*STATEBYTES);
 8002bb8:	2028      	movs	r0, #40	; 0x28
 8002bba:	f000 fbe3 	bl	8003384 <malloc>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]

	//Initialize state with predefined IV.
	if ( acehash_init(state)!= KAT_SUCCESS )
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff ffaf 	bl	8002b28 <acehash_init>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d002      	beq.n	8002bd4 <crypto_hash+0x4c>
		return(KAT_CRYPTO_FAILURE);
 8002bce:	2304      	movs	r3, #4
 8002bd0:	425b      	negs	r3, r3
 8002bd2:	e140      	b.n	8002e56 <crypto_hash+0x2ce>

	//Absorbing phase: Rate Bytes A[0],A[1],A[2],A[3],C[0],C[1],C[2],C[3]
	if ( inlen != 0 )
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	d100      	bne.n	8002bde <crypto_hash+0x56>
 8002bdc:	e0a4      	b.n	8002d28 <crypto_hash+0x1a0>
	{

		for ( j = 0; j < in64len; j++ )
 8002bde:	2200      	movs	r2, #0
 8002be0:	2300      	movs	r3, #0
 8002be2:	623a      	str	r2, [r7, #32]
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e035      	b.n	8002c54 <crypto_hash+0xcc>
		{
			for ( i = 0; i < 8; i++ )
 8002be8:	232f      	movs	r3, #47	; 0x2f
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e01f      	b.n	8002c32 <crypto_hash+0xaa>
				state[rate_bytes[i]]^=in[8*j+((u64)i)];
 8002bf2:	242f      	movs	r4, #47	; 0x2f
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4a99      	ldr	r2, [pc, #612]	; (8002e60 <crypto_hash+0x2d8>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	7819      	ldrb	r1, [r3, #0]
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	00da      	lsls	r2, r3, #3
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	18d3      	adds	r3, r2, r3
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4891      	ldr	r0, [pc, #580]	; (8002e60 <crypto_hash+0x2d8>)
 8002c1a:	5cc3      	ldrb	r3, [r0, r3]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	181b      	adds	r3, r3, r0
 8002c22:	404a      	eors	r2, r1
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]
			for ( i = 0; i < 8; i++ )
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	3201      	adds	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	232f      	movs	r3, #47	; 0x2f
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d9da      	bls.n	8002bf2 <crypto_hash+0x6a>
			ace_permutation(state);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7ff fdb0 	bl	80027a4 <ace_permutation>
		for ( j = 0; j < in64len; j++ )
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	2001      	movs	r0, #1
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	1812      	adds	r2, r2, r0
 8002c4e:	414b      	adcs	r3, r1
 8002c50:	623a      	str	r2, [r7, #32]
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8c5      	bhi.n	8002be8 <crypto_hash+0x60>
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d103      	bne.n	8002c6c <crypto_hash+0xe4>
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8bd      	bhi.n	8002be8 <crypto_hash+0x60>
		}

		if ( lblen != 0 )
 8002c6c:	2317      	movs	r3, #23
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d045      	beq.n	8002d02 <crypto_hash+0x17a>
		{
			//Encrypting the padded 64-bit block when "mlen" is not a multiple of 8
			for ( i = 0; i < lblen; i++ )
 8002c76:	232f      	movs	r3, #47	; 0x2f
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e01f      	b.n	8002cc0 <crypto_hash+0x138>
				state[rate_bytes[i]]^= in[in64len*8+(u64)i];
 8002c80:	242f      	movs	r4, #47	; 0x2f
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	4a76      	ldr	r2, [pc, #472]	; (8002e60 <crypto_hash+0x2d8>)
 8002c88:	5cd3      	ldrb	r3, [r2, r3]
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	7819      	ldrb	r1, [r3, #0]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	00da      	lsls	r2, r3, #3
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	18d3      	adds	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	18d3      	adds	r3, r2, r3
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	486e      	ldr	r0, [pc, #440]	; (8002e60 <crypto_hash+0x2d8>)
 8002ca8:	5cc3      	ldrb	r3, [r0, r3]
 8002caa:	0018      	movs	r0, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	181b      	adds	r3, r3, r0
 8002cb0:	404a      	eors	r2, r1
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
			for ( i = 0; i < lblen; i++ )
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	3201      	adds	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	232f      	movs	r3, #47	; 0x2f
 8002cc2:	18fa      	adds	r2, r7, r3
 8002cc4:	2117      	movs	r1, #23
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d3d7      	bcc.n	8002c80 <crypto_hash+0xf8>
			
			state[rate_bytes[lblen]]^=(0x80); //Padding: 10*
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <crypto_hash+0x2d8>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	001a      	movs	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	495e      	ldr	r1, [pc, #376]	; (8002e60 <crypto_hash+0x2d8>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	0019      	movs	r1, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	185b      	adds	r3, r3, r1
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	4249      	negs	r1, r1
 8002cf2:	404a      	eors	r2, r1
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]
			ace_permutation(state);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f7ff fd52 	bl	80027a4 <ace_permutation>
 8002d00:	e024      	b.n	8002d4c <crypto_hash+0x1c4>
		}
		else
		{
			state[rate_bytes[0]]^=(0x80); //Padding: 10*
 8002d02:	2300      	movs	r3, #0
 8002d04:	001a      	movs	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	189b      	adds	r3, r3, r2
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	0019      	movs	r1, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	185b      	adds	r3, r3, r1
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	4249      	negs	r1, r1
 8002d18:	404a      	eors	r2, r1
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
			ace_permutation(state);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fd3f 	bl	80027a4 <ace_permutation>
 8002d26:	e011      	b.n	8002d4c <crypto_hash+0x1c4>
		}
	}
	else
	{
		state[rate_bytes[0]]^=(0x80); //Padding: 10*
 8002d28:	2300      	movs	r3, #0
 8002d2a:	001a      	movs	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	0019      	movs	r1, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	185b      	adds	r3, r3, r1
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	4249      	negs	r1, r1
 8002d3e:	404a      	eors	r2, r1
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
		ace_permutation(state);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff fd2c 	bl	80027a4 <ace_permutation>
	}
	//Squeezing phase
	if ( CRYPTO_BYTES == 32 )
	{
		for ( i = 0; i < 8; i++ )
 8002d4c:	232f      	movs	r3, #47	; 0x2f
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e012      	b.n	8002d7c <crypto_hash+0x1f4>
			out[i] = state[rate_bytes[i]];
 8002d56:	202f      	movs	r0, #47	; 0x2f
 8002d58:	183b      	adds	r3, r7, r0
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4a40      	ldr	r2, [pc, #256]	; (8002e60 <crypto_hash+0x2d8>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	001a      	movs	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	189a      	adds	r2, r3, r2
 8002d66:	183b      	adds	r3, r7, r0
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	18cb      	adds	r3, r1, r3
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8002d72:	183b      	adds	r3, r7, r0
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	3201      	adds	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	242f      	movs	r4, #47	; 0x2f
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d9e7      	bls.n	8002d56 <crypto_hash+0x1ce>
		ace_permutation(state);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7ff fd0b 	bl	80027a4 <ace_permutation>
		for ( i = 0; i < 8; i++ )
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e013      	b.n	8002dbe <crypto_hash+0x236>
			out[i+8] = state[rate_bytes[i]];
 8002d96:	202f      	movs	r0, #47	; 0x2f
 8002d98:	183b      	adds	r3, r7, r0
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <crypto_hash+0x2d8>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	001a      	movs	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	189a      	adds	r2, r3, r2
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	18cb      	adds	r3, r1, r3
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8002db4:	183b      	adds	r3, r7, r0
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	183b      	adds	r3, r7, r0
 8002dba:	3201      	adds	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	242f      	movs	r4, #47	; 0x2f
 8002dc0:	193b      	adds	r3, r7, r4
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b07      	cmp	r3, #7
 8002dc6:	d9e6      	bls.n	8002d96 <crypto_hash+0x20e>
		ace_permutation(state);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff fcea 	bl	80027a4 <ace_permutation>
		for ( i = 0; i < 8; i++ )
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e013      	b.n	8002e00 <crypto_hash+0x278>
			out[i+16] = state[rate_bytes[i]];
 8002dd8:	202f      	movs	r0, #47	; 0x2f
 8002dda:	183b      	adds	r3, r7, r0
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <crypto_hash+0x2d8>)
 8002de0:	5cd3      	ldrb	r3, [r2, r3]
 8002de2:	001a      	movs	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	189a      	adds	r2, r3, r2
 8002de8:	183b      	adds	r3, r7, r0
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	3310      	adds	r3, #16
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	18cb      	adds	r3, r1, r3
 8002df2:	7812      	ldrb	r2, [r2, #0]
 8002df4:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8002df6:	183b      	adds	r3, r7, r0
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	183b      	adds	r3, r7, r0
 8002dfc:	3201      	adds	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	242f      	movs	r4, #47	; 0x2f
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b07      	cmp	r3, #7
 8002e08:	d9e6      	bls.n	8002dd8 <crypto_hash+0x250>
		ace_permutation(state);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7ff fcc9 	bl	80027a4 <ace_permutation>
		for ( i = 0; i < 8; i++ )
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e013      	b.n	8002e42 <crypto_hash+0x2ba>
			out[i+24] = state[rate_bytes[i]];
 8002e1a:	202f      	movs	r0, #47	; 0x2f
 8002e1c:	183b      	adds	r3, r7, r0
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <crypto_hash+0x2d8>)
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	001a      	movs	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	189a      	adds	r2, r3, r2
 8002e2a:	183b      	adds	r3, r7, r0
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3318      	adds	r3, #24
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	18cb      	adds	r3, r1, r3
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8002e38:	183b      	adds	r3, r7, r0
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	3201      	adds	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	232f      	movs	r3, #47	; 0x2f
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	d9e6      	bls.n	8002e1a <crypto_hash+0x292>
	}
	else
		out=NULL;
free(state);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 faa2 	bl	8003398 <free>

return KAT_SUCCESS;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b00c      	add	sp, #48	; 0x30
 8002e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	08003e1c 	.word	0x08003e1c

08002e64 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0

	int ret = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 8002e6e:	f000 fa05 	bl	800327c <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8002e72:	f000 f99f 	bl	80031b4 <tick_msr_start>
	tick_msr_end();
 8002e76:	f000 f9b9 	bl	80031ec <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <genkat_benchmark_hash_aead+0x88>)
 8002e7c:	491c      	ldr	r1, [pc, #112]	; (8002ef0 <genkat_benchmark_hash_aead+0x8c>)
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <genkat_benchmark_hash_aead+0x90>)
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 f9d7 	bl	8003234 <lwc_printf>
	lwc_printf("Memory usage: ");
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <genkat_benchmark_hash_aead+0x94>)
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f9d3 	bl	8003234 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <genkat_benchmark_hash_aead+0x98>)
 8002e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <genkat_benchmark_hash_aead+0x98>)
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <genkat_benchmark_hash_aead+0x9c>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 f9cb 	bl	8003234 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <genkat_benchmark_hash_aead+0x98>)
 8002ea0:	6a19      	ldr	r1, [r3, #32]
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <genkat_benchmark_hash_aead+0x98>)
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <genkat_benchmark_hash_aead+0x98>)
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	4816      	ldr	r0, [pc, #88]	; (8002f04 <genkat_benchmark_hash_aead+0xa0>)
 8002eac:	f000 f9c2 	bl	8003234 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	005a      	lsls	r2, r3, #1
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <genkat_benchmark_hash_aead+0xa4>)
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 fa77 	bl	80033ac <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	005a      	lsls	r2, r3, #1
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <genkat_benchmark_hash_aead+0xa8>)
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fa70 	bl	80033ac <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	005a      	lsls	r2, r3, #1
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <genkat_benchmark_hash_aead+0xac>)
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 fa69 	bl	80033ac <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 8002eda:	f000 f81b 	bl	8002f14 <hash_generate_test_vectors>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	607b      	str	r3, [r7, #4]
#endif

	return ret;
 8002ee2:	687b      	ldr	r3, [r7, #4]
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	08003e24 	.word	0x08003e24
 8002ef0:	08003ea4 	.word	0x08003ea4
 8002ef4:	08003c44 	.word	0x08003c44
 8002ef8:	08003c8c 	.word	0x08003c8c
 8002efc:	20000678 	.word	0x20000678
 8002f00:	08003c9c 	.word	0x08003c9c
 8002f04:	08003cc4 	.word	0x08003cc4
 8002f08:	20000098 	.word	0x20000098
 8002f0c:	20000198 	.word	0x20000198
 8002f10:	20000298 	.word	0x20000298

08002f14 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	4c69      	ldr	r4, [pc, #420]	; (80030bc <hash_generate_test_vectors+0x1a8>)
 8002f18:	44a5      	add	sp, r4
 8002f1a:	af00      	add	r7, sp, #0

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <hash_generate_test_vectors+0x1ac>)
 8002f20:	18ba      	adds	r2, r7, r2
 8002f22:	6013      	str	r3, [r2, #0]

	init_buffer(msg, sizeof(msg));
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	00d2      	lsls	r2, r2, #3
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	1879      	adds	r1, r7, r1
 8002f2e:	0008      	movs	r0, r1
 8002f30:	f000 f902 	bl	8003138 <init_buffer>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002f34:	2200      	movs	r2, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	2185      	movs	r1, #133	; 0x85
 8002f3a:	00c9      	lsls	r1, r1, #3
 8002f3c:	1879      	adds	r1, r7, r1
 8002f3e:	600a      	str	r2, [r1, #0]
 8002f40:	604b      	str	r3, [r1, #4]
 8002f42:	e056      	b.n	8002ff2 <hash_generate_test_vectors+0xde>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8002f44:	2485      	movs	r4, #133	; 0x85
 8002f46:	00e4      	lsls	r4, r4, #3
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <hash_generate_test_vectors+0x1b0>)
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f96f 	bl	8003234 <lwc_printf>

		tick_msr_start();
 8002f56:	f000 f92d 	bl	80031b4 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2120      	movs	r1, #32
 8002f62:	1879      	adds	r1, r7, r1
 8002f64:	0038      	movs	r0, r7
 8002f66:	f7ff fe0f 	bl	8002b88 <crypto_hash>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	4c54      	ldr	r4, [pc, #336]	; (80030c0 <hash_generate_test_vectors+0x1ac>)
 8002f6e:	193a      	adds	r2, r7, r4
 8002f70:	6013      	str	r3, [r2, #0]
#else
		ret_val = 0;
#endif
		tick_msr_end();
 8002f72:	f000 f93b 	bl	80031ec <tick_msr_end>

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8002f76:	4b54      	ldr	r3, [pc, #336]	; (80030c8 <hash_generate_test_vectors+0x1b4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	4a52      	ldr	r2, [pc, #328]	; (80030c8 <hash_generate_test_vectors+0x1b4>)
 8002f7e:	6011      	str	r1, [r2, #0]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <hash_generate_test_vectors+0x1b8>)
 8002f82:	6811      	ldr	r1, [r2, #0]
 8002f84:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <hash_generate_test_vectors+0x1bc>)
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	5099      	str	r1, [r3, r2]

		if(ret_val == 0) {
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <hash_generate_test_vectors+0xb0>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002f92:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <hash_generate_test_vectors+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	0019      	movs	r1, r3
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <hash_generate_test_vectors+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da00      	bge.n	8002fa2 <hash_generate_test_vectors+0x8e>
 8002fa0:	330f      	adds	r3, #15
 8002fa2:	111b      	asrs	r3, r3, #4
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <hash_generate_test_vectors+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	484b      	ldr	r0, [pc, #300]	; (80030d8 <hash_generate_test_vectors+0x1c4>)
 8002fac:	f000 f942 	bl	8003234 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8002fb0:	2385      	movs	r3, #133	; 0x85
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a48      	ldr	r2, [pc, #288]	; (80030dc <hash_generate_test_vectors+0x1c8>)
 8002fba:	18ba      	adds	r2, r7, r2
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	d10d      	bne.n	8002fde <hash_generate_test_vectors+0xca>
 8002fc2:	e005      	b.n	8002fd0 <hash_generate_test_vectors+0xbc>
			ret_val = KAT_CRYPTO_FAILURE;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	425b      	negs	r3, r3
 8002fc8:	4a3d      	ldr	r2, [pc, #244]	; (80030c0 <hash_generate_test_vectors+0x1ac>)
 8002fca:	18ba      	adds	r2, r7, r2
 8002fcc:	6013      	str	r3, [r2, #0]
			break;
 8002fce:	e021      	b.n	8003014 <hash_generate_test_vectors+0x100>
			mlen = 4;
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2185      	movs	r1, #133	; 0x85
 8002fd6:	00c9      	lsls	r1, r1, #3
 8002fd8:	1879      	adds	r1, r7, r1
 8002fda:	600a      	str	r2, [r1, #0]
 8002fdc:	604b      	str	r3, [r1, #4]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002fde:	2185      	movs	r1, #133	; 0x85
 8002fe0:	00c9      	lsls	r1, r1, #3
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	1892      	adds	r2, r2, r2
 8002fea:	415b      	adcs	r3, r3
 8002fec:	1879      	adds	r1, r7, r1
 8002fee:	600a      	str	r2, [r1, #0]
 8002ff0:	604b      	str	r3, [r1, #4]
 8002ff2:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <hash_generate_test_vectors+0x1c8>)
 8002ff4:	18bb      	adds	r3, r7, r2
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <hash_generate_test_vectors+0x100>
 8002ffc:	18bb      	adds	r3, r7, r2
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d19f      	bne.n	8002f44 <hash_generate_test_vectors+0x30>
 8003004:	2385      	movs	r3, #133	; 0x85
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	429a      	cmp	r2, r3
 8003012:	d997      	bls.n	8002f44 <hash_generate_test_vectors+0x30>
		}
	}//end of for loop


	ticks_res_pos = 0;
 8003014:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <hash_generate_test_vectors+0x1b4>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
	aead_hash_print_res("HASH");
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <hash_generate_test_vectors+0x1cc>)
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f869 	bl	80030f4 <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <hash_generate_test_vectors+0x1d0>)
 8003024:	0018      	movs	r0, r3
 8003026:	f000 f905 	bl	8003234 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 800302a:	2200      	movs	r2, #0
 800302c:	2300      	movs	r3, #0
 800302e:	2184      	movs	r1, #132	; 0x84
 8003030:	00c9      	lsls	r1, r1, #3
 8003032:	1879      	adds	r1, r7, r1
 8003034:	600a      	str	r2, [r1, #0]
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e027      	b.n	800308a <hash_generate_test_vectors+0x176>

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 800303a:	2484      	movs	r4, #132	; 0x84
 800303c:	00e4      	lsls	r4, r4, #3
 800303e:	193b      	adds	r3, r7, r4
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <hash_generate_test_vectors+0x1b4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1c59      	adds	r1, r3, #1
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <hash_generate_test_vectors+0x1b4>)
 800304a:	6011      	str	r1, [r2, #0]
 800304c:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <hash_generate_test_vectors+0x1bc>)
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	589b      	ldr	r3, [r3, r2]
 8003052:	001a      	movs	r2, r3
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <hash_generate_test_vectors+0x1d4>)
 8003056:	0001      	movs	r1, r0
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f8eb 	bl	8003234 <lwc_printf>

		if(mlen==0){
 800305e:	193b      	adds	r3, r7, r4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a22      	ldr	r2, [pc, #136]	; (80030ec <hash_generate_test_vectors+0x1d8>)
 8003064:	18ba      	adds	r2, r7, r2
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	d104      	bne.n	8003076 <hash_generate_test_vectors+0x162>
			mlen = 4;
 800306c:	2204      	movs	r2, #4
 800306e:	2300      	movs	r3, #0
 8003070:	1939      	adds	r1, r7, r4
 8003072:	600a      	str	r2, [r1, #0]
 8003074:	604b      	str	r3, [r1, #4]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003076:	2184      	movs	r1, #132	; 0x84
 8003078:	00c9      	lsls	r1, r1, #3
 800307a:	187b      	adds	r3, r7, r1
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	1892      	adds	r2, r2, r2
 8003082:	415b      	adcs	r3, r3
 8003084:	1879      	adds	r1, r7, r1
 8003086:	600a      	str	r2, [r1, #0]
 8003088:	604b      	str	r3, [r1, #4]
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <hash_generate_test_vectors+0x1d8>)
 800308c:	18bb      	adds	r3, r7, r2
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <hash_generate_test_vectors+0x198>
 8003094:	18bb      	adds	r3, r7, r2
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1ce      	bne.n	800303a <hash_generate_test_vectors+0x126>
 800309c:	2384      	movs	r3, #132	; 0x84
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d9c6      	bls.n	800303a <hash_generate_test_vectors+0x126>
		}
	}

	return ret_val;
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <hash_generate_test_vectors+0x1ac>)
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	681b      	ldr	r3, [r3, #0]
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <hash_generate_test_vectors+0x1dc>)
 80030b8:	449d      	add	sp, r3
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	fffffbc4 	.word	0xfffffbc4
 80030c0:	00000434 	.word	0x00000434
 80030c4:	08003cf0 	.word	0x08003cf0
 80030c8:	20000398 	.word	0x20000398
 80030cc:	20000090 	.word	0x20000090
 80030d0:	20000298 	.word	0x20000298
 80030d4:	20000094 	.word	0x20000094
 80030d8:	08003d00 	.word	0x08003d00
 80030dc:	0000042c 	.word	0x0000042c
 80030e0:	08003d1c 	.word	0x08003d1c
 80030e4:	08003d24 	.word	0x08003d24
 80030e8:	08003d34 	.word	0x08003d34
 80030ec:	00000424 	.word	0x00000424
 80030f0:	0000043c 	.word	0x0000043c

080030f4 <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <aead_hash_print_res+0x30>)
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <aead_hash_print_res+0x34>)
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	480a      	ldr	r0, [pc, #40]	; (800312c <aead_hash_print_res+0x38>)
 8003104:	f000 f896 	bl	8003234 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <aead_hash_print_res+0x3c>)
 800310a:	6a19      	ldr	r1, [r3, #32]
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <aead_hash_print_res+0x3c>)
 800310e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <aead_hash_print_res+0x3c>)
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	4807      	ldr	r0, [pc, #28]	; (8003134 <aead_hash_print_res+0x40>)
 8003116:	f000 f88d 	bl	8003234 <lwc_printf>
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	08003e24 	.word	0x08003e24
 8003128:	08003ea4 	.word	0x08003ea4
 800312c:	08003d40 	.word	0x08003d40
 8003130:	20000678 	.word	0x20000678
 8003134:	08003d7c 	.word	0x08003d7c

08003138 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	603a      	str	r2, [r7, #0]
 8003142:	607b      	str	r3, [r7, #4]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003144:	2200      	movs	r2, #0
 8003146:	2300      	movs	r3, #0
 8003148:	613a      	str	r2, [r7, #16]
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e011      	b.n	8003172 <init_buffer+0x3a>
		buffer[i] = (unsigned char) i + '0';
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1c13      	adds	r3, r2, #0
 8003154:	b2da      	uxtb	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	18cb      	adds	r3, r1, r3
 800315c:	3230      	adds	r2, #48	; 0x30
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2001      	movs	r0, #1
 8003168:	2100      	movs	r1, #0
 800316a:	1812      	adds	r2, r2, r0
 800316c:	414b      	adcs	r3, r1
 800316e:	613a      	str	r2, [r7, #16]
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	429a      	cmp	r2, r3
 8003178:	d8e9      	bhi.n	800314e <init_buffer+0x16>
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	429a      	cmp	r2, r3
 8003180:	d103      	bne.n	800318a <init_buffer+0x52>
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	429a      	cmp	r2, r3
 8003188:	d8e1      	bhi.n	800314e <init_buffer+0x16>
	}
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b006      	add	sp, #24
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	2000039c 	.word	0x2000039c

080031b4 <tick_msr_start>:

void tick_msr_start(void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <tick_msr_start+0x2c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <tick_msr_start+0x30>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 80031c6:	f7fd fac3 	bl	8000750 <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <tick_msr_start+0x34>)
 80031ce:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <tick_msr_start+0x30>)
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7fe fad2 	bl	800177c <HAL_TIM_Base_Start_IT>
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	2000039c 	.word	0x2000039c
 80031e4:	2000062c 	.word	0x2000062c
 80031e8:	20000094 	.word	0x20000094

080031ec <tick_msr_end>:

uint32_t tick_msr_end(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <tick_msr_end+0x38>)
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7fe fb14 	bl	8001820 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <tick_msr_end+0x3c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	041a      	lsls	r2, r3, #16
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <tick_msr_end+0x38>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	431a      	orrs	r2, r3
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <tick_msr_end+0x40>)
 8003208:	601a      	str	r2, [r3, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 800320a:	f7fd faa1 	bl	8000750 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <tick_msr_end+0x44>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1ad2      	subs	r2, r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <tick_msr_end+0x44>)
 8003218:	601a      	str	r2, [r3, #0]
	return gb_tick_cnt;
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <tick_msr_end+0x40>)
 800321c:	681b      	ldr	r3, [r3, #0]
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2000062c 	.word	0x2000062c
 8003228:	2000039c 	.word	0x2000039c
 800322c:	20000090 	.word	0x20000090
 8003230:	20000094 	.word	0x20000094

08003234 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003234:	b40f      	push	{r0, r1, r2, r3}
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 800323c:	2314      	movs	r3, #20
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6939      	ldr	r1, [r7, #16]
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <lwc_printf+0x40>)
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f987 	bl	800355c <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <lwc_printf+0x40>)
 8003250:	0018      	movs	r0, r3
 8003252:	f7fc ff59 	bl	8000108 <strlen>
 8003256:	0003      	movs	r3, r0
 8003258:	b29a      	uxth	r2, r3
 800325a:	4906      	ldr	r1, [pc, #24]	; (8003274 <lwc_printf+0x40>)
 800325c:	4806      	ldr	r0, [pc, #24]	; (8003278 <lwc_printf+0x44>)
 800325e:	2364      	movs	r3, #100	; 0x64
 8003260:	f7fe fd84 	bl	8001d6c <HAL_UART_Transmit>
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bc80      	pop	{r7}
 800326c:	bc08      	pop	{r3}
 800326e:	b004      	add	sp, #16
 8003270:	4718      	bx	r3
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	200003a0 	.word	0x200003a0
 8003278:	200005a8 	.word	0x200005a8

0800327c <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <get_memory_usage+0x98>)
 8003282:	2234      	movs	r2, #52	; 0x34
 8003284:	2100      	movs	r1, #0
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f890 	bl	80033ac <memset>

	mem_stat.flash_start_adr = 0x8000000;
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <get_memory_usage+0x98>)
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	0512      	lsls	r2, r2, #20
 8003292:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <get_memory_usage+0x98>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <get_memory_usage+0x98>)
 800329a:	605a      	str	r2, [r3, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 800329c:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <get_memory_usage+0x9c>)
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <get_memory_usage+0x98>)
 80032a0:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <get_memory_usage+0xa0>)
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <get_memory_usage+0x98>)
 80032a6:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <get_memory_usage+0xa4>)
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <get_memory_usage+0x98>)
 80032ac:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <get_memory_usage+0xa8>)
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <get_memory_usage+0x98>)
 80032b2:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <get_memory_usage+0xac>)
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <get_memory_usage+0x98>)
 80032b8:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <get_memory_usage+0xb0>)
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <get_memory_usage+0x98>)
 80032be:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <get_memory_usage+0x98>)
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <get_memory_usage+0x98>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <get_memory_usage+0x98>)
 80032cc:	621a      	str	r2, [r3, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <get_memory_usage+0x98>)
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <get_memory_usage+0x98>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	1ad2      	subs	r2, r2, r3
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <get_memory_usage+0x98>)
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <get_memory_usage+0x98>)
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <get_memory_usage+0x98>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <get_memory_usage+0x98>)
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <get_memory_usage+0x98>)
 80032ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <get_memory_usage+0x98>)
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	18d2      	adds	r2, r2, r3
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <get_memory_usage+0x98>)
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <get_memory_usage+0x98>)
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <get_memory_usage+0x98>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	18d2      	adds	r2, r2, r3
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <get_memory_usage+0x98>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1ad2      	subs	r2, r2, r3
 8003308:	4b02      	ldr	r3, [pc, #8]	; (8003314 <get_memory_usage+0x98>)
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	20000678 	.word	0x20000678
 8003318:	08003c24 	.word	0x08003c24
 800331c:	20000070 	.word	0x20000070
 8003320:	200006bc 	.word	0x200006bc
 8003324:	20000000 	.word	0x20000000
 8003328:	20000070 	.word	0x20000070
 800332c:	08003fc0 	.word	0x08003fc0

08003330 <__errno>:
 8003330:	4b01      	ldr	r3, [pc, #4]	; (8003338 <__errno+0x8>)
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	4770      	bx	lr
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	2000000c 	.word	0x2000000c

0800333c <__libc_init_array>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	2600      	movs	r6, #0
 8003340:	4d0c      	ldr	r5, [pc, #48]	; (8003374 <__libc_init_array+0x38>)
 8003342:	4c0d      	ldr	r4, [pc, #52]	; (8003378 <__libc_init_array+0x3c>)
 8003344:	1b64      	subs	r4, r4, r5
 8003346:	10a4      	asrs	r4, r4, #2
 8003348:	42a6      	cmp	r6, r4
 800334a:	d109      	bne.n	8003360 <__libc_init_array+0x24>
 800334c:	2600      	movs	r6, #0
 800334e:	f000 fc5d 	bl	8003c0c <_init>
 8003352:	4d0a      	ldr	r5, [pc, #40]	; (800337c <__libc_init_array+0x40>)
 8003354:	4c0a      	ldr	r4, [pc, #40]	; (8003380 <__libc_init_array+0x44>)
 8003356:	1b64      	subs	r4, r4, r5
 8003358:	10a4      	asrs	r4, r4, #2
 800335a:	42a6      	cmp	r6, r4
 800335c:	d105      	bne.n	800336a <__libc_init_array+0x2e>
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	00b3      	lsls	r3, r6, #2
 8003362:	58eb      	ldr	r3, [r5, r3]
 8003364:	4798      	blx	r3
 8003366:	3601      	adds	r6, #1
 8003368:	e7ee      	b.n	8003348 <__libc_init_array+0xc>
 800336a:	00b3      	lsls	r3, r6, #2
 800336c:	58eb      	ldr	r3, [r5, r3]
 800336e:	4798      	blx	r3
 8003370:	3601      	adds	r6, #1
 8003372:	e7f2      	b.n	800335a <__libc_init_array+0x1e>
 8003374:	08003fb8 	.word	0x08003fb8
 8003378:	08003fb8 	.word	0x08003fb8
 800337c:	08003fb8 	.word	0x08003fb8
 8003380:	08003fbc 	.word	0x08003fbc

08003384 <malloc>:
 8003384:	b510      	push	{r4, lr}
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <malloc+0x10>)
 8003388:	0001      	movs	r1, r0
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	f000 f860 	bl	8003450 <_malloc_r>
 8003390:	bd10      	pop	{r4, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	2000000c 	.word	0x2000000c

08003398 <free>:
 8003398:	b510      	push	{r4, lr}
 800339a:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <free+0x10>)
 800339c:	0001      	movs	r1, r0
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	f000 f80c 	bl	80033bc <_free_r>
 80033a4:	bd10      	pop	{r4, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	2000000c 	.word	0x2000000c

080033ac <memset>:
 80033ac:	0003      	movs	r3, r0
 80033ae:	1882      	adds	r2, r0, r2
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d100      	bne.n	80033b6 <memset+0xa>
 80033b4:	4770      	bx	lr
 80033b6:	7019      	strb	r1, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	e7f9      	b.n	80033b0 <memset+0x4>

080033bc <_free_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	0005      	movs	r5, r0
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d010      	beq.n	80033e6 <_free_r+0x2a>
 80033c4:	1f0c      	subs	r4, r1, #4
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da00      	bge.n	80033ce <_free_r+0x12>
 80033cc:	18e4      	adds	r4, r4, r3
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f8d2 	bl	8003578 <__malloc_lock>
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <_free_r+0x90>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <_free_r+0x2c>
 80033dc:	6063      	str	r3, [r4, #4]
 80033de:	6014      	str	r4, [r2, #0]
 80033e0:	0028      	movs	r0, r5
 80033e2:	f000 f8d1 	bl	8003588 <__malloc_unlock>
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <_free_r+0x42>
 80033ec:	6821      	ldr	r1, [r4, #0]
 80033ee:	1860      	adds	r0, r4, r1
 80033f0:	4283      	cmp	r3, r0
 80033f2:	d1f3      	bne.n	80033dc <_free_r+0x20>
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	1841      	adds	r1, r0, r1
 80033fa:	6021      	str	r1, [r4, #0]
 80033fc:	e7ee      	b.n	80033dc <_free_r+0x20>
 80033fe:	001a      	movs	r2, r3
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <_free_r+0x4e>
 8003406:	42a3      	cmp	r3, r4
 8003408:	d9f9      	bls.n	80033fe <_free_r+0x42>
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	1850      	adds	r0, r2, r1
 800340e:	42a0      	cmp	r0, r4
 8003410:	d10b      	bne.n	800342a <_free_r+0x6e>
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	1809      	adds	r1, r1, r0
 8003416:	1850      	adds	r0, r2, r1
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	4283      	cmp	r3, r0
 800341c:	d1e0      	bne.n	80033e0 <_free_r+0x24>
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	1841      	adds	r1, r0, r1
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	6053      	str	r3, [r2, #4]
 8003428:	e7da      	b.n	80033e0 <_free_r+0x24>
 800342a:	42a0      	cmp	r0, r4
 800342c:	d902      	bls.n	8003434 <_free_r+0x78>
 800342e:	230c      	movs	r3, #12
 8003430:	602b      	str	r3, [r5, #0]
 8003432:	e7d5      	b.n	80033e0 <_free_r+0x24>
 8003434:	6821      	ldr	r1, [r4, #0]
 8003436:	1860      	adds	r0, r4, r1
 8003438:	4283      	cmp	r3, r0
 800343a:	d103      	bne.n	8003444 <_free_r+0x88>
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	1841      	adds	r1, r0, r1
 8003442:	6021      	str	r1, [r4, #0]
 8003444:	6063      	str	r3, [r4, #4]
 8003446:	6054      	str	r4, [r2, #4]
 8003448:	e7ca      	b.n	80033e0 <_free_r+0x24>
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	200005a0 	.word	0x200005a0

08003450 <_malloc_r>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	2303      	movs	r3, #3
 8003454:	1ccd      	adds	r5, r1, #3
 8003456:	439d      	bics	r5, r3
 8003458:	3508      	adds	r5, #8
 800345a:	0006      	movs	r6, r0
 800345c:	2d0c      	cmp	r5, #12
 800345e:	d21f      	bcs.n	80034a0 <_malloc_r+0x50>
 8003460:	250c      	movs	r5, #12
 8003462:	42a9      	cmp	r1, r5
 8003464:	d81e      	bhi.n	80034a4 <_malloc_r+0x54>
 8003466:	0030      	movs	r0, r6
 8003468:	f000 f886 	bl	8003578 <__malloc_lock>
 800346c:	4925      	ldr	r1, [pc, #148]	; (8003504 <_malloc_r+0xb4>)
 800346e:	680a      	ldr	r2, [r1, #0]
 8003470:	0014      	movs	r4, r2
 8003472:	2c00      	cmp	r4, #0
 8003474:	d11a      	bne.n	80034ac <_malloc_r+0x5c>
 8003476:	4f24      	ldr	r7, [pc, #144]	; (8003508 <_malloc_r+0xb8>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d104      	bne.n	8003488 <_malloc_r+0x38>
 800347e:	0021      	movs	r1, r4
 8003480:	0030      	movs	r0, r6
 8003482:	f000 f843 	bl	800350c <_sbrk_r>
 8003486:	6038      	str	r0, [r7, #0]
 8003488:	0029      	movs	r1, r5
 800348a:	0030      	movs	r0, r6
 800348c:	f000 f83e 	bl	800350c <_sbrk_r>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d12b      	bne.n	80034ec <_malloc_r+0x9c>
 8003494:	230c      	movs	r3, #12
 8003496:	0030      	movs	r0, r6
 8003498:	6033      	str	r3, [r6, #0]
 800349a:	f000 f875 	bl	8003588 <__malloc_unlock>
 800349e:	e003      	b.n	80034a8 <_malloc_r+0x58>
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	dade      	bge.n	8003462 <_malloc_r+0x12>
 80034a4:	230c      	movs	r3, #12
 80034a6:	6033      	str	r3, [r6, #0]
 80034a8:	2000      	movs	r0, #0
 80034aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	1b5b      	subs	r3, r3, r5
 80034b0:	d419      	bmi.n	80034e6 <_malloc_r+0x96>
 80034b2:	2b0b      	cmp	r3, #11
 80034b4:	d903      	bls.n	80034be <_malloc_r+0x6e>
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	18e4      	adds	r4, r4, r3
 80034ba:	6025      	str	r5, [r4, #0]
 80034bc:	e003      	b.n	80034c6 <_malloc_r+0x76>
 80034be:	6863      	ldr	r3, [r4, #4]
 80034c0:	42a2      	cmp	r2, r4
 80034c2:	d10e      	bne.n	80034e2 <_malloc_r+0x92>
 80034c4:	600b      	str	r3, [r1, #0]
 80034c6:	0030      	movs	r0, r6
 80034c8:	f000 f85e 	bl	8003588 <__malloc_unlock>
 80034cc:	0020      	movs	r0, r4
 80034ce:	2207      	movs	r2, #7
 80034d0:	300b      	adds	r0, #11
 80034d2:	1d23      	adds	r3, r4, #4
 80034d4:	4390      	bics	r0, r2
 80034d6:	1ac2      	subs	r2, r0, r3
 80034d8:	4298      	cmp	r0, r3
 80034da:	d0e6      	beq.n	80034aa <_malloc_r+0x5a>
 80034dc:	1a1b      	subs	r3, r3, r0
 80034de:	50a3      	str	r3, [r4, r2]
 80034e0:	e7e3      	b.n	80034aa <_malloc_r+0x5a>
 80034e2:	6053      	str	r3, [r2, #4]
 80034e4:	e7ef      	b.n	80034c6 <_malloc_r+0x76>
 80034e6:	0022      	movs	r2, r4
 80034e8:	6864      	ldr	r4, [r4, #4]
 80034ea:	e7c2      	b.n	8003472 <_malloc_r+0x22>
 80034ec:	2303      	movs	r3, #3
 80034ee:	1cc4      	adds	r4, r0, #3
 80034f0:	439c      	bics	r4, r3
 80034f2:	42a0      	cmp	r0, r4
 80034f4:	d0e1      	beq.n	80034ba <_malloc_r+0x6a>
 80034f6:	1a21      	subs	r1, r4, r0
 80034f8:	0030      	movs	r0, r6
 80034fa:	f000 f807 	bl	800350c <_sbrk_r>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	d1db      	bne.n	80034ba <_malloc_r+0x6a>
 8003502:	e7c7      	b.n	8003494 <_malloc_r+0x44>
 8003504:	200005a0 	.word	0x200005a0
 8003508:	200005a4 	.word	0x200005a4

0800350c <_sbrk_r>:
 800350c:	2300      	movs	r3, #0
 800350e:	b570      	push	{r4, r5, r6, lr}
 8003510:	4d06      	ldr	r5, [pc, #24]	; (800352c <_sbrk_r+0x20>)
 8003512:	0004      	movs	r4, r0
 8003514:	0008      	movs	r0, r1
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	f7fd f85a 	bl	80005d0 <_sbrk>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d103      	bne.n	8003528 <_sbrk_r+0x1c>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d000      	beq.n	8003528 <_sbrk_r+0x1c>
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	200006b8 	.word	0x200006b8

08003530 <_vsiprintf_r>:
 8003530:	b500      	push	{lr}
 8003532:	b09b      	sub	sp, #108	; 0x6c
 8003534:	9100      	str	r1, [sp, #0]
 8003536:	9104      	str	r1, [sp, #16]
 8003538:	4906      	ldr	r1, [pc, #24]	; (8003554 <_vsiprintf_r+0x24>)
 800353a:	9105      	str	r1, [sp, #20]
 800353c:	9102      	str	r1, [sp, #8]
 800353e:	4906      	ldr	r1, [pc, #24]	; (8003558 <_vsiprintf_r+0x28>)
 8003540:	9103      	str	r1, [sp, #12]
 8003542:	4669      	mov	r1, sp
 8003544:	f000 f88a 	bl	800365c <_svfiprintf_r>
 8003548:	2300      	movs	r3, #0
 800354a:	9a00      	ldr	r2, [sp, #0]
 800354c:	7013      	strb	r3, [r2, #0]
 800354e:	b01b      	add	sp, #108	; 0x6c
 8003550:	bd00      	pop	{pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	7fffffff 	.word	0x7fffffff
 8003558:	ffff0208 	.word	0xffff0208

0800355c <vsiprintf>:
 800355c:	b510      	push	{r4, lr}
 800355e:	0013      	movs	r3, r2
 8003560:	000a      	movs	r2, r1
 8003562:	0001      	movs	r1, r0
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <vsiprintf+0x14>)
 8003566:	6800      	ldr	r0, [r0, #0]
 8003568:	f7ff ffe2 	bl	8003530 <_vsiprintf_r>
 800356c:	bd10      	pop	{r4, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	2000000c 	.word	0x2000000c

08003574 <__retarget_lock_acquire_recursive>:
 8003574:	4770      	bx	lr

08003576 <__retarget_lock_release_recursive>:
 8003576:	4770      	bx	lr

08003578 <__malloc_lock>:
 8003578:	b510      	push	{r4, lr}
 800357a:	4802      	ldr	r0, [pc, #8]	; (8003584 <__malloc_lock+0xc>)
 800357c:	f7ff fffa 	bl	8003574 <__retarget_lock_acquire_recursive>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	200006b0 	.word	0x200006b0

08003588 <__malloc_unlock>:
 8003588:	b510      	push	{r4, lr}
 800358a:	4802      	ldr	r0, [pc, #8]	; (8003594 <__malloc_unlock+0xc>)
 800358c:	f7ff fff3 	bl	8003576 <__retarget_lock_release_recursive>
 8003590:	bd10      	pop	{r4, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	200006b0 	.word	0x200006b0

08003598 <__ssputs_r>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	688e      	ldr	r6, [r1, #8]
 800359c:	b085      	sub	sp, #20
 800359e:	0007      	movs	r7, r0
 80035a0:	000c      	movs	r4, r1
 80035a2:	9203      	str	r2, [sp, #12]
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	429e      	cmp	r6, r3
 80035a8:	d83c      	bhi.n	8003624 <__ssputs_r+0x8c>
 80035aa:	2390      	movs	r3, #144	; 0x90
 80035ac:	898a      	ldrh	r2, [r1, #12]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	421a      	tst	r2, r3
 80035b2:	d034      	beq.n	800361e <__ssputs_r+0x86>
 80035b4:	2503      	movs	r5, #3
 80035b6:	6909      	ldr	r1, [r1, #16]
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	1a5b      	subs	r3, r3, r1
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	6963      	ldr	r3, [r4, #20]
 80035c0:	9802      	ldr	r0, [sp, #8]
 80035c2:	435d      	muls	r5, r3
 80035c4:	0feb      	lsrs	r3, r5, #31
 80035c6:	195d      	adds	r5, r3, r5
 80035c8:	9b01      	ldr	r3, [sp, #4]
 80035ca:	106d      	asrs	r5, r5, #1
 80035cc:	3301      	adds	r3, #1
 80035ce:	181b      	adds	r3, r3, r0
 80035d0:	42ab      	cmp	r3, r5
 80035d2:	d900      	bls.n	80035d6 <__ssputs_r+0x3e>
 80035d4:	001d      	movs	r5, r3
 80035d6:	0553      	lsls	r3, r2, #21
 80035d8:	d532      	bpl.n	8003640 <__ssputs_r+0xa8>
 80035da:	0029      	movs	r1, r5
 80035dc:	0038      	movs	r0, r7
 80035de:	f7ff ff37 	bl	8003450 <_malloc_r>
 80035e2:	1e06      	subs	r6, r0, #0
 80035e4:	d109      	bne.n	80035fa <__ssputs_r+0x62>
 80035e6:	230c      	movs	r3, #12
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	2340      	movs	r3, #64	; 0x40
 80035ec:	2001      	movs	r0, #1
 80035ee:	89a2      	ldrh	r2, [r4, #12]
 80035f0:	4240      	negs	r0, r0
 80035f2:	4313      	orrs	r3, r2
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	b005      	add	sp, #20
 80035f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035fa:	9a02      	ldr	r2, [sp, #8]
 80035fc:	6921      	ldr	r1, [r4, #16]
 80035fe:	f000 faba 	bl	8003b76 <memcpy>
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <__ssputs_r+0xc0>)
 8003606:	401a      	ands	r2, r3
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	4313      	orrs	r3, r2
 800360c:	81a3      	strh	r3, [r4, #12]
 800360e:	9b02      	ldr	r3, [sp, #8]
 8003610:	6126      	str	r6, [r4, #16]
 8003612:	18f6      	adds	r6, r6, r3
 8003614:	6026      	str	r6, [r4, #0]
 8003616:	6165      	str	r5, [r4, #20]
 8003618:	9e01      	ldr	r6, [sp, #4]
 800361a:	1aed      	subs	r5, r5, r3
 800361c:	60a5      	str	r5, [r4, #8]
 800361e:	9b01      	ldr	r3, [sp, #4]
 8003620:	429e      	cmp	r6, r3
 8003622:	d900      	bls.n	8003626 <__ssputs_r+0x8e>
 8003624:	9e01      	ldr	r6, [sp, #4]
 8003626:	0032      	movs	r2, r6
 8003628:	9903      	ldr	r1, [sp, #12]
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	f000 faac 	bl	8003b88 <memmove>
 8003630:	68a3      	ldr	r3, [r4, #8]
 8003632:	2000      	movs	r0, #0
 8003634:	1b9b      	subs	r3, r3, r6
 8003636:	60a3      	str	r3, [r4, #8]
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	199e      	adds	r6, r3, r6
 800363c:	6026      	str	r6, [r4, #0]
 800363e:	e7da      	b.n	80035f6 <__ssputs_r+0x5e>
 8003640:	002a      	movs	r2, r5
 8003642:	0038      	movs	r0, r7
 8003644:	f000 fab3 	bl	8003bae <_realloc_r>
 8003648:	1e06      	subs	r6, r0, #0
 800364a:	d1e0      	bne.n	800360e <__ssputs_r+0x76>
 800364c:	0038      	movs	r0, r7
 800364e:	6921      	ldr	r1, [r4, #16]
 8003650:	f7ff feb4 	bl	80033bc <_free_r>
 8003654:	e7c7      	b.n	80035e6 <__ssputs_r+0x4e>
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	fffffb7f 	.word	0xfffffb7f

0800365c <_svfiprintf_r>:
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	b0a1      	sub	sp, #132	; 0x84
 8003660:	9003      	str	r0, [sp, #12]
 8003662:	001d      	movs	r5, r3
 8003664:	898b      	ldrh	r3, [r1, #12]
 8003666:	000f      	movs	r7, r1
 8003668:	0016      	movs	r6, r2
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	d511      	bpl.n	8003692 <_svfiprintf_r+0x36>
 800366e:	690b      	ldr	r3, [r1, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10e      	bne.n	8003692 <_svfiprintf_r+0x36>
 8003674:	2140      	movs	r1, #64	; 0x40
 8003676:	f7ff feeb 	bl	8003450 <_malloc_r>
 800367a:	6038      	str	r0, [r7, #0]
 800367c:	6138      	str	r0, [r7, #16]
 800367e:	2800      	cmp	r0, #0
 8003680:	d105      	bne.n	800368e <_svfiprintf_r+0x32>
 8003682:	230c      	movs	r3, #12
 8003684:	9a03      	ldr	r2, [sp, #12]
 8003686:	3801      	subs	r0, #1
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	b021      	add	sp, #132	; 0x84
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	2300      	movs	r3, #0
 8003694:	ac08      	add	r4, sp, #32
 8003696:	6163      	str	r3, [r4, #20]
 8003698:	3320      	adds	r3, #32
 800369a:	7663      	strb	r3, [r4, #25]
 800369c:	3310      	adds	r3, #16
 800369e:	76a3      	strb	r3, [r4, #26]
 80036a0:	9507      	str	r5, [sp, #28]
 80036a2:	0035      	movs	r5, r6
 80036a4:	782b      	ldrb	r3, [r5, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <_svfiprintf_r+0x52>
 80036aa:	2b25      	cmp	r3, #37	; 0x25
 80036ac:	d147      	bne.n	800373e <_svfiprintf_r+0xe2>
 80036ae:	1bab      	subs	r3, r5, r6
 80036b0:	9305      	str	r3, [sp, #20]
 80036b2:	42b5      	cmp	r5, r6
 80036b4:	d00c      	beq.n	80036d0 <_svfiprintf_r+0x74>
 80036b6:	0032      	movs	r2, r6
 80036b8:	0039      	movs	r1, r7
 80036ba:	9803      	ldr	r0, [sp, #12]
 80036bc:	f7ff ff6c 	bl	8003598 <__ssputs_r>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d100      	bne.n	80036c6 <_svfiprintf_r+0x6a>
 80036c4:	e0ae      	b.n	8003824 <_svfiprintf_r+0x1c8>
 80036c6:	6962      	ldr	r2, [r4, #20]
 80036c8:	9b05      	ldr	r3, [sp, #20]
 80036ca:	4694      	mov	ip, r2
 80036cc:	4463      	add	r3, ip
 80036ce:	6163      	str	r3, [r4, #20]
 80036d0:	782b      	ldrb	r3, [r5, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d100      	bne.n	80036d8 <_svfiprintf_r+0x7c>
 80036d6:	e0a5      	b.n	8003824 <_svfiprintf_r+0x1c8>
 80036d8:	2201      	movs	r2, #1
 80036da:	2300      	movs	r3, #0
 80036dc:	4252      	negs	r2, r2
 80036de:	6062      	str	r2, [r4, #4]
 80036e0:	a904      	add	r1, sp, #16
 80036e2:	3254      	adds	r2, #84	; 0x54
 80036e4:	1852      	adds	r2, r2, r1
 80036e6:	1c6e      	adds	r6, r5, #1
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	60e3      	str	r3, [r4, #12]
 80036ec:	60a3      	str	r3, [r4, #8]
 80036ee:	7013      	strb	r3, [r2, #0]
 80036f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80036f2:	2205      	movs	r2, #5
 80036f4:	7831      	ldrb	r1, [r6, #0]
 80036f6:	4854      	ldr	r0, [pc, #336]	; (8003848 <_svfiprintf_r+0x1ec>)
 80036f8:	f000 fa32 	bl	8003b60 <memchr>
 80036fc:	1c75      	adds	r5, r6, #1
 80036fe:	2800      	cmp	r0, #0
 8003700:	d11f      	bne.n	8003742 <_svfiprintf_r+0xe6>
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	06d3      	lsls	r3, r2, #27
 8003706:	d504      	bpl.n	8003712 <_svfiprintf_r+0xb6>
 8003708:	2353      	movs	r3, #83	; 0x53
 800370a:	a904      	add	r1, sp, #16
 800370c:	185b      	adds	r3, r3, r1
 800370e:	2120      	movs	r1, #32
 8003710:	7019      	strb	r1, [r3, #0]
 8003712:	0713      	lsls	r3, r2, #28
 8003714:	d504      	bpl.n	8003720 <_svfiprintf_r+0xc4>
 8003716:	2353      	movs	r3, #83	; 0x53
 8003718:	a904      	add	r1, sp, #16
 800371a:	185b      	adds	r3, r3, r1
 800371c:	212b      	movs	r1, #43	; 0x2b
 800371e:	7019      	strb	r1, [r3, #0]
 8003720:	7833      	ldrb	r3, [r6, #0]
 8003722:	2b2a      	cmp	r3, #42	; 0x2a
 8003724:	d016      	beq.n	8003754 <_svfiprintf_r+0xf8>
 8003726:	0035      	movs	r5, r6
 8003728:	2100      	movs	r1, #0
 800372a:	200a      	movs	r0, #10
 800372c:	68e3      	ldr	r3, [r4, #12]
 800372e:	782a      	ldrb	r2, [r5, #0]
 8003730:	1c6e      	adds	r6, r5, #1
 8003732:	3a30      	subs	r2, #48	; 0x30
 8003734:	2a09      	cmp	r2, #9
 8003736:	d94e      	bls.n	80037d6 <_svfiprintf_r+0x17a>
 8003738:	2900      	cmp	r1, #0
 800373a:	d111      	bne.n	8003760 <_svfiprintf_r+0x104>
 800373c:	e017      	b.n	800376e <_svfiprintf_r+0x112>
 800373e:	3501      	adds	r5, #1
 8003740:	e7b0      	b.n	80036a4 <_svfiprintf_r+0x48>
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <_svfiprintf_r+0x1ec>)
 8003744:	6822      	ldr	r2, [r4, #0]
 8003746:	1ac0      	subs	r0, r0, r3
 8003748:	2301      	movs	r3, #1
 800374a:	4083      	lsls	r3, r0
 800374c:	4313      	orrs	r3, r2
 800374e:	002e      	movs	r6, r5
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	e7ce      	b.n	80036f2 <_svfiprintf_r+0x96>
 8003754:	9b07      	ldr	r3, [sp, #28]
 8003756:	1d19      	adds	r1, r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	9107      	str	r1, [sp, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db01      	blt.n	8003764 <_svfiprintf_r+0x108>
 8003760:	930b      	str	r3, [sp, #44]	; 0x2c
 8003762:	e004      	b.n	800376e <_svfiprintf_r+0x112>
 8003764:	425b      	negs	r3, r3
 8003766:	60e3      	str	r3, [r4, #12]
 8003768:	2302      	movs	r3, #2
 800376a:	4313      	orrs	r3, r2
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	782b      	ldrb	r3, [r5, #0]
 8003770:	2b2e      	cmp	r3, #46	; 0x2e
 8003772:	d10a      	bne.n	800378a <_svfiprintf_r+0x12e>
 8003774:	786b      	ldrb	r3, [r5, #1]
 8003776:	2b2a      	cmp	r3, #42	; 0x2a
 8003778:	d135      	bne.n	80037e6 <_svfiprintf_r+0x18a>
 800377a:	9b07      	ldr	r3, [sp, #28]
 800377c:	3502      	adds	r5, #2
 800377e:	1d1a      	adds	r2, r3, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	9207      	str	r2, [sp, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	db2b      	blt.n	80037e0 <_svfiprintf_r+0x184>
 8003788:	9309      	str	r3, [sp, #36]	; 0x24
 800378a:	4e30      	ldr	r6, [pc, #192]	; (800384c <_svfiprintf_r+0x1f0>)
 800378c:	2203      	movs	r2, #3
 800378e:	0030      	movs	r0, r6
 8003790:	7829      	ldrb	r1, [r5, #0]
 8003792:	f000 f9e5 	bl	8003b60 <memchr>
 8003796:	2800      	cmp	r0, #0
 8003798:	d006      	beq.n	80037a8 <_svfiprintf_r+0x14c>
 800379a:	2340      	movs	r3, #64	; 0x40
 800379c:	1b80      	subs	r0, r0, r6
 800379e:	4083      	lsls	r3, r0
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	3501      	adds	r5, #1
 80037a4:	4313      	orrs	r3, r2
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	7829      	ldrb	r1, [r5, #0]
 80037aa:	2206      	movs	r2, #6
 80037ac:	4828      	ldr	r0, [pc, #160]	; (8003850 <_svfiprintf_r+0x1f4>)
 80037ae:	1c6e      	adds	r6, r5, #1
 80037b0:	7621      	strb	r1, [r4, #24]
 80037b2:	f000 f9d5 	bl	8003b60 <memchr>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d03c      	beq.n	8003834 <_svfiprintf_r+0x1d8>
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <_svfiprintf_r+0x1f8>)
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d125      	bne.n	800380c <_svfiprintf_r+0x1b0>
 80037c0:	2207      	movs	r2, #7
 80037c2:	9b07      	ldr	r3, [sp, #28]
 80037c4:	3307      	adds	r3, #7
 80037c6:	4393      	bics	r3, r2
 80037c8:	3308      	adds	r3, #8
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	6963      	ldr	r3, [r4, #20]
 80037ce:	9a04      	ldr	r2, [sp, #16]
 80037d0:	189b      	adds	r3, r3, r2
 80037d2:	6163      	str	r3, [r4, #20]
 80037d4:	e765      	b.n	80036a2 <_svfiprintf_r+0x46>
 80037d6:	4343      	muls	r3, r0
 80037d8:	0035      	movs	r5, r6
 80037da:	2101      	movs	r1, #1
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	e7a6      	b.n	800372e <_svfiprintf_r+0xd2>
 80037e0:	2301      	movs	r3, #1
 80037e2:	425b      	negs	r3, r3
 80037e4:	e7d0      	b.n	8003788 <_svfiprintf_r+0x12c>
 80037e6:	2300      	movs	r3, #0
 80037e8:	200a      	movs	r0, #10
 80037ea:	001a      	movs	r2, r3
 80037ec:	3501      	adds	r5, #1
 80037ee:	6063      	str	r3, [r4, #4]
 80037f0:	7829      	ldrb	r1, [r5, #0]
 80037f2:	1c6e      	adds	r6, r5, #1
 80037f4:	3930      	subs	r1, #48	; 0x30
 80037f6:	2909      	cmp	r1, #9
 80037f8:	d903      	bls.n	8003802 <_svfiprintf_r+0x1a6>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c5      	beq.n	800378a <_svfiprintf_r+0x12e>
 80037fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003800:	e7c3      	b.n	800378a <_svfiprintf_r+0x12e>
 8003802:	4342      	muls	r2, r0
 8003804:	0035      	movs	r5, r6
 8003806:	2301      	movs	r3, #1
 8003808:	1852      	adds	r2, r2, r1
 800380a:	e7f1      	b.n	80037f0 <_svfiprintf_r+0x194>
 800380c:	ab07      	add	r3, sp, #28
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	003a      	movs	r2, r7
 8003812:	0021      	movs	r1, r4
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <_svfiprintf_r+0x1fc>)
 8003816:	9803      	ldr	r0, [sp, #12]
 8003818:	e000      	b.n	800381c <_svfiprintf_r+0x1c0>
 800381a:	bf00      	nop
 800381c:	9004      	str	r0, [sp, #16]
 800381e:	9b04      	ldr	r3, [sp, #16]
 8003820:	3301      	adds	r3, #1
 8003822:	d1d3      	bne.n	80037cc <_svfiprintf_r+0x170>
 8003824:	89bb      	ldrh	r3, [r7, #12]
 8003826:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003828:	065b      	lsls	r3, r3, #25
 800382a:	d400      	bmi.n	800382e <_svfiprintf_r+0x1d2>
 800382c:	e72d      	b.n	800368a <_svfiprintf_r+0x2e>
 800382e:	2001      	movs	r0, #1
 8003830:	4240      	negs	r0, r0
 8003832:	e72a      	b.n	800368a <_svfiprintf_r+0x2e>
 8003834:	ab07      	add	r3, sp, #28
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	003a      	movs	r2, r7
 800383a:	0021      	movs	r1, r4
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <_svfiprintf_r+0x1fc>)
 800383e:	9803      	ldr	r0, [sp, #12]
 8003840:	f000 f87c 	bl	800393c <_printf_i>
 8003844:	e7ea      	b.n	800381c <_svfiprintf_r+0x1c0>
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	08003f84 	.word	0x08003f84
 800384c:	08003f8a 	.word	0x08003f8a
 8003850:	08003f8e 	.word	0x08003f8e
 8003854:	00000000 	.word	0x00000000
 8003858:	08003599 	.word	0x08003599

0800385c <_printf_common>:
 800385c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800385e:	0015      	movs	r5, r2
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	688a      	ldr	r2, [r1, #8]
 8003864:	690b      	ldr	r3, [r1, #16]
 8003866:	000c      	movs	r4, r1
 8003868:	9000      	str	r0, [sp, #0]
 800386a:	4293      	cmp	r3, r2
 800386c:	da00      	bge.n	8003870 <_printf_common+0x14>
 800386e:	0013      	movs	r3, r2
 8003870:	0022      	movs	r2, r4
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	3243      	adds	r2, #67	; 0x43
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	2a00      	cmp	r2, #0
 800387a:	d001      	beq.n	8003880 <_printf_common+0x24>
 800387c:	3301      	adds	r3, #1
 800387e:	602b      	str	r3, [r5, #0]
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	069b      	lsls	r3, r3, #26
 8003884:	d502      	bpl.n	800388c <_printf_common+0x30>
 8003886:	682b      	ldr	r3, [r5, #0]
 8003888:	3302      	adds	r3, #2
 800388a:	602b      	str	r3, [r5, #0]
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	2306      	movs	r3, #6
 8003890:	0017      	movs	r7, r2
 8003892:	401f      	ands	r7, r3
 8003894:	421a      	tst	r2, r3
 8003896:	d027      	beq.n	80038e8 <_printf_common+0x8c>
 8003898:	0023      	movs	r3, r4
 800389a:	3343      	adds	r3, #67	; 0x43
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	1e5a      	subs	r2, r3, #1
 80038a0:	4193      	sbcs	r3, r2
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	0692      	lsls	r2, r2, #26
 80038a6:	d430      	bmi.n	800390a <_printf_common+0xae>
 80038a8:	0022      	movs	r2, r4
 80038aa:	9901      	ldr	r1, [sp, #4]
 80038ac:	9800      	ldr	r0, [sp, #0]
 80038ae:	9e08      	ldr	r6, [sp, #32]
 80038b0:	3243      	adds	r2, #67	; 0x43
 80038b2:	47b0      	blx	r6
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d025      	beq.n	8003904 <_printf_common+0xa8>
 80038b8:	2306      	movs	r3, #6
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	682a      	ldr	r2, [r5, #0]
 80038be:	68e1      	ldr	r1, [r4, #12]
 80038c0:	2500      	movs	r5, #0
 80038c2:	4003      	ands	r3, r0
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d103      	bne.n	80038d0 <_printf_common+0x74>
 80038c8:	1a8d      	subs	r5, r1, r2
 80038ca:	43eb      	mvns	r3, r5
 80038cc:	17db      	asrs	r3, r3, #31
 80038ce:	401d      	ands	r5, r3
 80038d0:	68a3      	ldr	r3, [r4, #8]
 80038d2:	6922      	ldr	r2, [r4, #16]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	dd01      	ble.n	80038dc <_printf_common+0x80>
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	18ed      	adds	r5, r5, r3
 80038dc:	2700      	movs	r7, #0
 80038de:	42bd      	cmp	r5, r7
 80038e0:	d120      	bne.n	8003924 <_printf_common+0xc8>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e010      	b.n	8003908 <_printf_common+0xac>
 80038e6:	3701      	adds	r7, #1
 80038e8:	68e3      	ldr	r3, [r4, #12]
 80038ea:	682a      	ldr	r2, [r5, #0]
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	42bb      	cmp	r3, r7
 80038f0:	ddd2      	ble.n	8003898 <_printf_common+0x3c>
 80038f2:	0022      	movs	r2, r4
 80038f4:	2301      	movs	r3, #1
 80038f6:	9901      	ldr	r1, [sp, #4]
 80038f8:	9800      	ldr	r0, [sp, #0]
 80038fa:	9e08      	ldr	r6, [sp, #32]
 80038fc:	3219      	adds	r2, #25
 80038fe:	47b0      	blx	r6
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d1f0      	bne.n	80038e6 <_printf_common+0x8a>
 8003904:	2001      	movs	r0, #1
 8003906:	4240      	negs	r0, r0
 8003908:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800390a:	2030      	movs	r0, #48	; 0x30
 800390c:	18e1      	adds	r1, r4, r3
 800390e:	3143      	adds	r1, #67	; 0x43
 8003910:	7008      	strb	r0, [r1, #0]
 8003912:	0021      	movs	r1, r4
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	3145      	adds	r1, #69	; 0x45
 8003918:	7809      	ldrb	r1, [r1, #0]
 800391a:	18a2      	adds	r2, r4, r2
 800391c:	3243      	adds	r2, #67	; 0x43
 800391e:	3302      	adds	r3, #2
 8003920:	7011      	strb	r1, [r2, #0]
 8003922:	e7c1      	b.n	80038a8 <_printf_common+0x4c>
 8003924:	0022      	movs	r2, r4
 8003926:	2301      	movs	r3, #1
 8003928:	9901      	ldr	r1, [sp, #4]
 800392a:	9800      	ldr	r0, [sp, #0]
 800392c:	9e08      	ldr	r6, [sp, #32]
 800392e:	321a      	adds	r2, #26
 8003930:	47b0      	blx	r6
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	d0e6      	beq.n	8003904 <_printf_common+0xa8>
 8003936:	3701      	adds	r7, #1
 8003938:	e7d1      	b.n	80038de <_printf_common+0x82>
	...

0800393c <_printf_i>:
 800393c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393e:	b08b      	sub	sp, #44	; 0x2c
 8003940:	9206      	str	r2, [sp, #24]
 8003942:	000a      	movs	r2, r1
 8003944:	3243      	adds	r2, #67	; 0x43
 8003946:	9307      	str	r3, [sp, #28]
 8003948:	9005      	str	r0, [sp, #20]
 800394a:	9204      	str	r2, [sp, #16]
 800394c:	7e0a      	ldrb	r2, [r1, #24]
 800394e:	000c      	movs	r4, r1
 8003950:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003952:	2a78      	cmp	r2, #120	; 0x78
 8003954:	d806      	bhi.n	8003964 <_printf_i+0x28>
 8003956:	2a62      	cmp	r2, #98	; 0x62
 8003958:	d808      	bhi.n	800396c <_printf_i+0x30>
 800395a:	2a00      	cmp	r2, #0
 800395c:	d100      	bne.n	8003960 <_printf_i+0x24>
 800395e:	e0c0      	b.n	8003ae2 <_printf_i+0x1a6>
 8003960:	2a58      	cmp	r2, #88	; 0x58
 8003962:	d052      	beq.n	8003a0a <_printf_i+0xce>
 8003964:	0026      	movs	r6, r4
 8003966:	3642      	adds	r6, #66	; 0x42
 8003968:	7032      	strb	r2, [r6, #0]
 800396a:	e022      	b.n	80039b2 <_printf_i+0x76>
 800396c:	0010      	movs	r0, r2
 800396e:	3863      	subs	r0, #99	; 0x63
 8003970:	2815      	cmp	r0, #21
 8003972:	d8f7      	bhi.n	8003964 <_printf_i+0x28>
 8003974:	f7fc fbd0 	bl	8000118 <__gnu_thumb1_case_shi>
 8003978:	001f0016 	.word	0x001f0016
 800397c:	fff6fff6 	.word	0xfff6fff6
 8003980:	fff6fff6 	.word	0xfff6fff6
 8003984:	fff6001f 	.word	0xfff6001f
 8003988:	fff6fff6 	.word	0xfff6fff6
 800398c:	00a8fff6 	.word	0x00a8fff6
 8003990:	009a0036 	.word	0x009a0036
 8003994:	fff6fff6 	.word	0xfff6fff6
 8003998:	fff600b9 	.word	0xfff600b9
 800399c:	fff60036 	.word	0xfff60036
 80039a0:	009efff6 	.word	0x009efff6
 80039a4:	0026      	movs	r6, r4
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	3642      	adds	r6, #66	; 0x42
 80039aa:	1d11      	adds	r1, r2, #4
 80039ac:	6019      	str	r1, [r3, #0]
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	7033      	strb	r3, [r6, #0]
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0a7      	b.n	8003b06 <_printf_i+0x1ca>
 80039b6:	6808      	ldr	r0, [r1, #0]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	1d0a      	adds	r2, r1, #4
 80039bc:	0605      	lsls	r5, r0, #24
 80039be:	d50b      	bpl.n	80039d8 <_printf_i+0x9c>
 80039c0:	680d      	ldr	r5, [r1, #0]
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	da03      	bge.n	80039d0 <_printf_i+0x94>
 80039c8:	232d      	movs	r3, #45	; 0x2d
 80039ca:	9a04      	ldr	r2, [sp, #16]
 80039cc:	426d      	negs	r5, r5
 80039ce:	7013      	strb	r3, [r2, #0]
 80039d0:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <_printf_i+0x21c>)
 80039d2:	270a      	movs	r7, #10
 80039d4:	9303      	str	r3, [sp, #12]
 80039d6:	e032      	b.n	8003a3e <_printf_i+0x102>
 80039d8:	680d      	ldr	r5, [r1, #0]
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	0641      	lsls	r1, r0, #25
 80039de:	d5f1      	bpl.n	80039c4 <_printf_i+0x88>
 80039e0:	b22d      	sxth	r5, r5
 80039e2:	e7ef      	b.n	80039c4 <_printf_i+0x88>
 80039e4:	680d      	ldr	r5, [r1, #0]
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	1d08      	adds	r0, r1, #4
 80039ea:	6018      	str	r0, [r3, #0]
 80039ec:	062e      	lsls	r6, r5, #24
 80039ee:	d501      	bpl.n	80039f4 <_printf_i+0xb8>
 80039f0:	680d      	ldr	r5, [r1, #0]
 80039f2:	e003      	b.n	80039fc <_printf_i+0xc0>
 80039f4:	066d      	lsls	r5, r5, #25
 80039f6:	d5fb      	bpl.n	80039f0 <_printf_i+0xb4>
 80039f8:	680d      	ldr	r5, [r1, #0]
 80039fa:	b2ad      	uxth	r5, r5
 80039fc:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <_printf_i+0x21c>)
 80039fe:	270a      	movs	r7, #10
 8003a00:	9303      	str	r3, [sp, #12]
 8003a02:	2a6f      	cmp	r2, #111	; 0x6f
 8003a04:	d117      	bne.n	8003a36 <_printf_i+0xfa>
 8003a06:	2708      	movs	r7, #8
 8003a08:	e015      	b.n	8003a36 <_printf_i+0xfa>
 8003a0a:	3145      	adds	r1, #69	; 0x45
 8003a0c:	700a      	strb	r2, [r1, #0]
 8003a0e:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <_printf_i+0x21c>)
 8003a10:	9203      	str	r2, [sp, #12]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	6821      	ldr	r1, [r4, #0]
 8003a16:	ca20      	ldmia	r2!, {r5}
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	0608      	lsls	r0, r1, #24
 8003a1c:	d550      	bpl.n	8003ac0 <_printf_i+0x184>
 8003a1e:	07cb      	lsls	r3, r1, #31
 8003a20:	d502      	bpl.n	8003a28 <_printf_i+0xec>
 8003a22:	2320      	movs	r3, #32
 8003a24:	4319      	orrs	r1, r3
 8003a26:	6021      	str	r1, [r4, #0]
 8003a28:	2710      	movs	r7, #16
 8003a2a:	2d00      	cmp	r5, #0
 8003a2c:	d103      	bne.n	8003a36 <_printf_i+0xfa>
 8003a2e:	2320      	movs	r3, #32
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	439a      	bics	r2, r3
 8003a34:	6022      	str	r2, [r4, #0]
 8003a36:	0023      	movs	r3, r4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	3343      	adds	r3, #67	; 0x43
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	60a3      	str	r3, [r4, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db03      	blt.n	8003a4e <_printf_i+0x112>
 8003a46:	2204      	movs	r2, #4
 8003a48:	6821      	ldr	r1, [r4, #0]
 8003a4a:	4391      	bics	r1, r2
 8003a4c:	6021      	str	r1, [r4, #0]
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	d102      	bne.n	8003a58 <_printf_i+0x11c>
 8003a52:	9e04      	ldr	r6, [sp, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <_printf_i+0x136>
 8003a58:	9e04      	ldr	r6, [sp, #16]
 8003a5a:	0028      	movs	r0, r5
 8003a5c:	0039      	movs	r1, r7
 8003a5e:	f7fc fbeb 	bl	8000238 <__aeabi_uidivmod>
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	3e01      	subs	r6, #1
 8003a66:	5c5b      	ldrb	r3, [r3, r1]
 8003a68:	7033      	strb	r3, [r6, #0]
 8003a6a:	002b      	movs	r3, r5
 8003a6c:	0005      	movs	r5, r0
 8003a6e:	429f      	cmp	r7, r3
 8003a70:	d9f3      	bls.n	8003a5a <_printf_i+0x11e>
 8003a72:	2f08      	cmp	r7, #8
 8003a74:	d109      	bne.n	8003a8a <_printf_i+0x14e>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	07db      	lsls	r3, r3, #31
 8003a7a:	d506      	bpl.n	8003a8a <_printf_i+0x14e>
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	6922      	ldr	r2, [r4, #16]
 8003a80:	4293      	cmp	r3, r2
 8003a82:	dc02      	bgt.n	8003a8a <_printf_i+0x14e>
 8003a84:	2330      	movs	r3, #48	; 0x30
 8003a86:	3e01      	subs	r6, #1
 8003a88:	7033      	strb	r3, [r6, #0]
 8003a8a:	9b04      	ldr	r3, [sp, #16]
 8003a8c:	1b9b      	subs	r3, r3, r6
 8003a8e:	6123      	str	r3, [r4, #16]
 8003a90:	9b07      	ldr	r3, [sp, #28]
 8003a92:	0021      	movs	r1, r4
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	9805      	ldr	r0, [sp, #20]
 8003a98:	9b06      	ldr	r3, [sp, #24]
 8003a9a:	aa09      	add	r2, sp, #36	; 0x24
 8003a9c:	f7ff fede 	bl	800385c <_printf_common>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d135      	bne.n	8003b10 <_printf_i+0x1d4>
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	4240      	negs	r0, r0
 8003aa8:	b00b      	add	sp, #44	; 0x2c
 8003aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aac:	2220      	movs	r2, #32
 8003aae:	6809      	ldr	r1, [r1, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	6022      	str	r2, [r4, #0]
 8003ab4:	0022      	movs	r2, r4
 8003ab6:	2178      	movs	r1, #120	; 0x78
 8003ab8:	3245      	adds	r2, #69	; 0x45
 8003aba:	7011      	strb	r1, [r2, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <_printf_i+0x220>)
 8003abe:	e7a7      	b.n	8003a10 <_printf_i+0xd4>
 8003ac0:	0648      	lsls	r0, r1, #25
 8003ac2:	d5ac      	bpl.n	8003a1e <_printf_i+0xe2>
 8003ac4:	b2ad      	uxth	r5, r5
 8003ac6:	e7aa      	b.n	8003a1e <_printf_i+0xe2>
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	680d      	ldr	r5, [r1, #0]
 8003acc:	1d10      	adds	r0, r2, #4
 8003ace:	6949      	ldr	r1, [r1, #20]
 8003ad0:	6018      	str	r0, [r3, #0]
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	062e      	lsls	r6, r5, #24
 8003ad6:	d501      	bpl.n	8003adc <_printf_i+0x1a0>
 8003ad8:	6019      	str	r1, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <_printf_i+0x1a6>
 8003adc:	066d      	lsls	r5, r5, #25
 8003ade:	d5fb      	bpl.n	8003ad8 <_printf_i+0x19c>
 8003ae0:	8019      	strh	r1, [r3, #0]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9e04      	ldr	r6, [sp, #16]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	e7d2      	b.n	8003a90 <_printf_i+0x154>
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	1d11      	adds	r1, r2, #4
 8003aee:	6019      	str	r1, [r3, #0]
 8003af0:	6816      	ldr	r6, [r2, #0]
 8003af2:	2100      	movs	r1, #0
 8003af4:	0030      	movs	r0, r6
 8003af6:	6862      	ldr	r2, [r4, #4]
 8003af8:	f000 f832 	bl	8003b60 <memchr>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d001      	beq.n	8003b04 <_printf_i+0x1c8>
 8003b00:	1b80      	subs	r0, r0, r6
 8003b02:	6060      	str	r0, [r4, #4]
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	6123      	str	r3, [r4, #16]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9a04      	ldr	r2, [sp, #16]
 8003b0c:	7013      	strb	r3, [r2, #0]
 8003b0e:	e7bf      	b.n	8003a90 <_printf_i+0x154>
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	0032      	movs	r2, r6
 8003b14:	9906      	ldr	r1, [sp, #24]
 8003b16:	9805      	ldr	r0, [sp, #20]
 8003b18:	9d07      	ldr	r5, [sp, #28]
 8003b1a:	47a8      	blx	r5
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d0c1      	beq.n	8003aa4 <_printf_i+0x168>
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	079b      	lsls	r3, r3, #30
 8003b24:	d415      	bmi.n	8003b52 <_printf_i+0x216>
 8003b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b28:	68e0      	ldr	r0, [r4, #12]
 8003b2a:	4298      	cmp	r0, r3
 8003b2c:	dabc      	bge.n	8003aa8 <_printf_i+0x16c>
 8003b2e:	0018      	movs	r0, r3
 8003b30:	e7ba      	b.n	8003aa8 <_printf_i+0x16c>
 8003b32:	0022      	movs	r2, r4
 8003b34:	2301      	movs	r3, #1
 8003b36:	9906      	ldr	r1, [sp, #24]
 8003b38:	9805      	ldr	r0, [sp, #20]
 8003b3a:	9e07      	ldr	r6, [sp, #28]
 8003b3c:	3219      	adds	r2, #25
 8003b3e:	47b0      	blx	r6
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d0af      	beq.n	8003aa4 <_printf_i+0x168>
 8003b44:	3501      	adds	r5, #1
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dcf0      	bgt.n	8003b32 <_printf_i+0x1f6>
 8003b50:	e7e9      	b.n	8003b26 <_printf_i+0x1ea>
 8003b52:	2500      	movs	r5, #0
 8003b54:	e7f7      	b.n	8003b46 <_printf_i+0x20a>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	08003f95 	.word	0x08003f95
 8003b5c:	08003fa6 	.word	0x08003fa6

08003b60 <memchr>:
 8003b60:	b2c9      	uxtb	r1, r1
 8003b62:	1882      	adds	r2, r0, r2
 8003b64:	4290      	cmp	r0, r2
 8003b66:	d101      	bne.n	8003b6c <memchr+0xc>
 8003b68:	2000      	movs	r0, #0
 8003b6a:	4770      	bx	lr
 8003b6c:	7803      	ldrb	r3, [r0, #0]
 8003b6e:	428b      	cmp	r3, r1
 8003b70:	d0fb      	beq.n	8003b6a <memchr+0xa>
 8003b72:	3001      	adds	r0, #1
 8003b74:	e7f6      	b.n	8003b64 <memchr+0x4>

08003b76 <memcpy>:
 8003b76:	2300      	movs	r3, #0
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d100      	bne.n	8003b80 <memcpy+0xa>
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	5ccc      	ldrb	r4, [r1, r3]
 8003b82:	54c4      	strb	r4, [r0, r3]
 8003b84:	3301      	adds	r3, #1
 8003b86:	e7f8      	b.n	8003b7a <memcpy+0x4>

08003b88 <memmove>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	4288      	cmp	r0, r1
 8003b8c:	d902      	bls.n	8003b94 <memmove+0xc>
 8003b8e:	188b      	adds	r3, r1, r2
 8003b90:	4298      	cmp	r0, r3
 8003b92:	d303      	bcc.n	8003b9c <memmove+0x14>
 8003b94:	2300      	movs	r3, #0
 8003b96:	e007      	b.n	8003ba8 <memmove+0x20>
 8003b98:	5c8b      	ldrb	r3, [r1, r2]
 8003b9a:	5483      	strb	r3, [r0, r2]
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	d2fb      	bcs.n	8003b98 <memmove+0x10>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	5ccc      	ldrb	r4, [r1, r3]
 8003ba4:	54c4      	strb	r4, [r0, r3]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1fa      	bne.n	8003ba2 <memmove+0x1a>
 8003bac:	e7f8      	b.n	8003ba0 <memmove+0x18>

08003bae <_realloc_r>:
 8003bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb0:	0007      	movs	r7, r0
 8003bb2:	000d      	movs	r5, r1
 8003bb4:	0016      	movs	r6, r2
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	d105      	bne.n	8003bc6 <_realloc_r+0x18>
 8003bba:	0011      	movs	r1, r2
 8003bbc:	f7ff fc48 	bl	8003450 <_malloc_r>
 8003bc0:	0004      	movs	r4, r0
 8003bc2:	0020      	movs	r0, r4
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d103      	bne.n	8003bd2 <_realloc_r+0x24>
 8003bca:	f7ff fbf7 	bl	80033bc <_free_r>
 8003bce:	0034      	movs	r4, r6
 8003bd0:	e7f7      	b.n	8003bc2 <_realloc_r+0x14>
 8003bd2:	f000 f812 	bl	8003bfa <_malloc_usable_size_r>
 8003bd6:	002c      	movs	r4, r5
 8003bd8:	42b0      	cmp	r0, r6
 8003bda:	d2f2      	bcs.n	8003bc2 <_realloc_r+0x14>
 8003bdc:	0031      	movs	r1, r6
 8003bde:	0038      	movs	r0, r7
 8003be0:	f7ff fc36 	bl	8003450 <_malloc_r>
 8003be4:	1e04      	subs	r4, r0, #0
 8003be6:	d0ec      	beq.n	8003bc2 <_realloc_r+0x14>
 8003be8:	0029      	movs	r1, r5
 8003bea:	0032      	movs	r2, r6
 8003bec:	f7ff ffc3 	bl	8003b76 <memcpy>
 8003bf0:	0029      	movs	r1, r5
 8003bf2:	0038      	movs	r0, r7
 8003bf4:	f7ff fbe2 	bl	80033bc <_free_r>
 8003bf8:	e7e3      	b.n	8003bc2 <_realloc_r+0x14>

08003bfa <_malloc_usable_size_r>:
 8003bfa:	1f0b      	subs	r3, r1, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	1f18      	subs	r0, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da01      	bge.n	8003c08 <_malloc_usable_size_r+0xe>
 8003c04:	580b      	ldr	r3, [r1, r0]
 8003c06:	18c0      	adds	r0, r0, r3
 8003c08:	4770      	bx	lr
	...

08003c0c <_init>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr

08003c18 <_fini>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr
