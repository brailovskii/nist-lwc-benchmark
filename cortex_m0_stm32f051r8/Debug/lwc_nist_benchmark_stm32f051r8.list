
lwc_nist_benchmark_stm32f051r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800444c  0800444c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800444c  0800444c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000074  080044c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  080044c8  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e23d  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002385  00000000  00000000  0002e2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000312c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000132c9  00000000  00000000  00031e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb1b  00000000  00000000  00045149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007648f  00000000  00000000  00053c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca0f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  000ca148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004060 	.word	0x08004060

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004060 	.word	0x08004060

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800024e:	6959      	ldr	r1, [r3, #20]
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <LL_AHB1_GRP1_EnableClock+0x28>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4013      	ands	r3, r2
 8000260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000262:	68fb      	ldr	r3, [r7, #12]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b510      	push	{r4, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 f9bf 	bl	80005f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f80f 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f891 	bl	80003a0 <MX_GPIO_Init>
  MX_TIM6_Init();
 800027e:	f000 f849 	bl	8000314 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000282:	f000 f871 	bl	8000368 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000286:	f003 f8e3 	bl	8003450 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <main+0x24>)
 800028c:	f000 fa16 	bl	80006bc <HAL_Delay>
 8000290:	e7f9      	b.n	8000286 <main+0x16>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	000f4240 	.word	0x000f4240

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	221c      	movs	r2, #28
 800029e:	2100      	movs	r1, #0
 80002a0:	a80b      	add	r0, sp, #44	; 0x2c
 80002a2:	f003 fab6 	bl	8003812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2210      	movs	r2, #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	4668      	mov	r0, sp
 80002ac:	f003 fab1 	bl	8003812 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	2214      	movs	r2, #20
 80002b2:	2100      	movs	r1, #0
 80002b4:	a805      	add	r0, sp, #20
 80002b6:	f003 faac 	bl	8003812 <memset>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2202      	movs	r2, #2
 80002bc:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	2010      	movs	r0, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	9212      	str	r2, [sp, #72]	; 0x48
 80002c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80002c4:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2601      	movs	r6, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	0312      	lsls	r2, r2, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	9214      	str	r2, [sp, #80]	; 0x50
 80002d4:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f000 fc61 	bl	8000ba0 <HAL_RCC_OscConfig>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d116      	bne.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	2302      	movs	r3, #2
 80002e4:	2207      	movs	r2, #7
 80002e6:	2400      	movs	r4, #0
 80002e8:	2500      	movs	r5, #0
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ea:	4668      	mov	r0, sp
 80002ec:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	9200      	str	r2, [sp, #0]
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	9402      	str	r4, [sp, #8]
 80002f4:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f6:	f000 ff6d 	bl	80011d4 <HAL_RCC_ClockConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d108      	bne.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000300:	9605      	str	r6, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000302:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	f001 f8b8 	bl	8001478 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	2800      	cmp	r0, #0
 800030a:	d101      	bne.n	8000310 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
}
 800030c:	b016      	add	sp, #88	; 0x58
 800030e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8000310:	f000 f84c 	bl	80003ac <Error_Handler>

08000314 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000314:	b510      	push	{r4, lr}
 8000316:	b082      	sub	sp, #8

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	2208      	movs	r2, #8
 800031a:	2100      	movs	r1, #0
 800031c:	4668      	mov	r0, sp
 800031e:	f003 fa78 	bl	8003812 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
 8000322:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 8000324:	4c0d      	ldr	r4, [pc, #52]	; (800035c <MX_TIM6_Init+0x48>)
 8000326:	490e      	ldr	r1, [pc, #56]	; (8000360 <MX_TIM6_Init+0x4c>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <MX_TIM6_Init+0x50>)
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800032a:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 0;
 800032c:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032e:	60a3      	str	r3, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000330:	61a3      	str	r3, [r4, #24]
  htim6.Instance = TIM6;
 8000332:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = 65535;
 8000334:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000336:	f001 f97d 	bl	8001634 <HAL_TIM_Base_Init>
 800033a:	2800      	cmp	r0, #0
 800033c:	d10b      	bne.n	8000356 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000342:	4669      	mov	r1, sp
 8000344:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800034a:	f001 fbf9 	bl	8001b40 <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	2800      	cmp	r0, #0
 8000350:	d101      	bne.n	8000356 <MX_TIM6_Init+0x42>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000352:	b002      	add	sp, #8
 8000354:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000356:	f000 f829 	bl	80003ac <Error_Handler>
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	20000630 	.word	0x20000630
 8000360:	40001000 	.word	0x40001000
 8000364:	0000ffff 	.word	0x0000ffff

08000368 <MX_USART1_UART_Init>:

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000368:	22e1      	movs	r2, #225	; 0xe1
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	210c      	movs	r1, #12
{
 800036e:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_USART1_UART_Init+0x30>)
 8000372:	4c0a      	ldr	r4, [pc, #40]	; (800039c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8000374:	0252      	lsls	r2, r2, #9
 8000376:	6042      	str	r2, [r0, #4]
  huart1.Instance = USART1;
 8000378:	6004      	str	r4, [r0, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037a:	6141      	str	r1, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000380:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000382:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000386:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000388:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038a:	f001 fc47 	bl	8001c1c <HAL_UART_Init>
 800038e:	2800      	cmp	r0, #0
 8000390:	d100      	bne.n	8000394 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000392:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000394:	f000 f80a 	bl	80003ac <Error_Handler>
 8000398:	200005ac 	.word	0x200005ac
 800039c:	40013800 	.word	0x40013800

080003a0 <MX_GPIO_Init>:
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a0:	2080      	movs	r0, #128	; 0x80
{
 80003a2:	b510      	push	{r4, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a4:	0280      	lsls	r0, r0, #10
 80003a6:	f7ff ff4d 	bl	8000244 <LL_AHB1_GRP1_EnableClock>

}
 80003aa:	bd10      	pop	{r4, pc}

080003ac <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
 80003ae:	e7fe      	b.n	80003ae <Error_Handler+0x2>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x44>)
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <HAL_MspInit+0x44>)
 80003bc:	2101      	movs	r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	619a      	str	r2, [r3, #24]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x44>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	2201      	movs	r2, #1
 80003c8:	4013      	ands	r3, r2
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_MspInit+0x44>)
 80003d0:	69da      	ldr	r2, [r3, #28]
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <HAL_MspInit+0x44>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0549      	lsls	r1, r1, #21
 80003d8:	430a      	orrs	r2, r1
 80003da:	61da      	str	r2, [r3, #28]
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <HAL_MspInit+0x44>)
 80003de:	69da      	ldr	r2, [r3, #28]
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	055b      	lsls	r3, r3, #21
 80003e4:	4013      	ands	r3, r2
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <HAL_TIM_Base_MspInit+0x44>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d113      	bne.n	8000432 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <HAL_TIM_Base_MspInit+0x48>)
 800040c:	69da      	ldr	r2, [r3, #28]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_TIM_Base_MspInit+0x48>)
 8000410:	2110      	movs	r1, #16
 8000412:	430a      	orrs	r2, r1
 8000414:	61da      	str	r2, [r3, #28]
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_TIM_Base_MspInit+0x48>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	2210      	movs	r2, #16
 800041c:	4013      	ands	r3, r2
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2011      	movs	r0, #17
 8000428:	f000 fa18 	bl	800085c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800042c:	2011      	movs	r0, #17
 800042e:	f000 fa2a 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b004      	add	sp, #16
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40001000 	.word	0x40001000
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b08b      	sub	sp, #44	; 0x2c
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	2414      	movs	r4, #20
 800044e:	193b      	adds	r3, r7, r4
 8000450:	0018      	movs	r0, r3
 8000452:	2314      	movs	r3, #20
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f003 f9db 	bl	8003812 <memset>
  if(huart->Instance==USART1)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d133      	bne.n	80004ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000466:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <HAL_UART_MspInit+0x98>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	01c9      	lsls	r1, r1, #7
 8000470:	430a      	orrs	r2, r1
 8000472:	619a      	str	r2, [r3, #24]
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	01db      	lsls	r3, r3, #7
 800047c:	4013      	ands	r3, r2
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b16      	ldr	r3, [pc, #88]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_UART_MspInit+0x98>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	22c0      	movs	r2, #192	; 0xc0
 80004a2:	00d2      	lsls	r2, r2, #3
 80004a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	0021      	movs	r1, r4
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2202      	movs	r2, #2
 80004ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2203      	movs	r2, #3
 80004b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2201      	movs	r2, #1
 80004be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	187a      	adds	r2, r7, r1
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 f9f9 	bl	80008c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b00b      	add	sp, #44	; 0x2c
 80004d4:	bd90      	pop	{r4, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40013800 	.word	0x40013800
 80004dc:	40021000 	.word	0x40021000

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f8be 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <TIM6_DAC_IRQHandler+0x14>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f95c 	bl	80017d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000630 	.word	0x20000630

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	18d3      	adds	r3, r2, r3
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f003 f928 	bl	80037ac <__errno>
 800055c:	0003      	movs	r3, r0
 800055e:	220c      	movs	r2, #12
 8000560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000562:	2301      	movs	r3, #1
 8000564:	425b      	negs	r3, r3
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	18d2      	adds	r2, r2, r3
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <_sbrk+0x64>)
 8000578:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b006      	add	sp, #24
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20002000 	.word	0x20002000
 8000588:	00000400 	.word	0x00000400
 800058c:	20000090 	.word	0x20000090
 8000590:	200006c0 	.word	0x200006c0

08000594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490e      	ldr	r1, [pc, #56]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0b      	ldr	r4, [pc, #44]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ca:	f7ff ffe3 	bl	8000594 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005ce:	f003 f8f3 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe4d 	bl	8000270 <main>

080005d6 <LoopForever>:

LoopForever:
    b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005e4:	08004454 	.word	0x08004454
  ldr r2, =_sbss
 80005e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005ec:	200006c0 	.word	0x200006c0

080005f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_COMP_IRQHandler>
	...

080005f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_Init+0x24>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_Init+0x24>)
 80005fe:	2110      	movs	r1, #16
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 f809 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060a:	f7ff fed1 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_InitTick+0x5c>)
 8000626:	681c      	ldr	r4, [r3, #0]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_InitTick+0x60>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	0019      	movs	r1, r3
 800062e:	23fa      	movs	r3, #250	; 0xfa
 8000630:	0098      	lsls	r0, r3, #2
 8000632:	f7ff fd7b 	bl	800012c <__udivsi3>
 8000636:	0003      	movs	r3, r0
 8000638:	0019      	movs	r1, r3
 800063a:	0020      	movs	r0, r4
 800063c:	f7ff fd76 	bl	800012c <__udivsi3>
 8000640:	0003      	movs	r3, r0
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f92f 	bl	80008a6 <HAL_SYSTICK_Config>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	e00f      	b.n	8000670 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d80b      	bhi.n	800066e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	425b      	negs	r3, r3
 800065c:	2200      	movs	r2, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f8fc 	bl	800085c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_InitTick+0x64>)
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	b003      	add	sp, #12
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	20000000 	.word	0x20000000
 800067c:	20000008 	.word	0x20000008
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	001a      	movs	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	18d2      	adds	r2, r2, r3
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000678 	.word	0x20000678

080006a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000678 	.word	0x20000678

080006bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff fff0 	bl	80006a8 <HAL_GetTick>
 80006c8:	0003      	movs	r3, r0
 80006ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	d005      	beq.n	80006e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_Delay+0x44>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	001a      	movs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	189b      	adds	r3, r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	f7ff ffe0 	bl	80006a8 <HAL_GetTick>
 80006e8:	0002      	movs	r2, r0
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d8f7      	bhi.n	80006e4 <HAL_Delay+0x28>
  {
  }
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000008 	.word	0x20000008

08000704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	1dfb      	adds	r3, r7, #7
 800070e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b7f      	cmp	r3, #127	; 0x7f
 8000716:	d809      	bhi.n	800072c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	001a      	movs	r2, r3
 800071e:	231f      	movs	r3, #31
 8000720:	401a      	ands	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__NVIC_EnableIRQ+0x30>)
 8000724:	2101      	movs	r1, #1
 8000726:	4091      	lsls	r1, r2
 8000728:	000a      	movs	r2, r1
 800072a:	601a      	str	r2, [r3, #0]
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	0002      	movs	r2, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b7f      	cmp	r3, #127	; 0x7f
 800074c:	d828      	bhi.n	80007a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <__NVIC_SetPriority+0xd4>)
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	33c0      	adds	r3, #192	; 0xc0
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	589b      	ldr	r3, [r3, r2]
 800075e:	1dfa      	adds	r2, r7, #7
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	0011      	movs	r1, r2
 8000764:	2203      	movs	r2, #3
 8000766:	400a      	ands	r2, r1
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	21ff      	movs	r1, #255	; 0xff
 800076c:	4091      	lsls	r1, r2
 800076e:	000a      	movs	r2, r1
 8000770:	43d2      	mvns	r2, r2
 8000772:	401a      	ands	r2, r3
 8000774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	22ff      	movs	r2, #255	; 0xff
 800077c:	401a      	ands	r2, r3
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0018      	movs	r0, r3
 8000784:	2303      	movs	r3, #3
 8000786:	4003      	ands	r3, r0
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	481f      	ldr	r0, [pc, #124]	; (800080c <__NVIC_SetPriority+0xd4>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	089b      	lsrs	r3, r3, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	33c0      	adds	r3, #192	; 0xc0
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800079e:	e031      	b.n	8000804 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <__NVIC_SetPriority+0xd8>)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	0019      	movs	r1, r3
 80007a8:	230f      	movs	r3, #15
 80007aa:	400b      	ands	r3, r1
 80007ac:	3b08      	subs	r3, #8
 80007ae:	089b      	lsrs	r3, r3, #2
 80007b0:	3306      	adds	r3, #6
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	3304      	adds	r3, #4
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	1dfa      	adds	r2, r7, #7
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	0011      	movs	r1, r2
 80007c0:	2203      	movs	r2, #3
 80007c2:	400a      	ands	r2, r1
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	21ff      	movs	r1, #255	; 0xff
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	401a      	ands	r2, r3
 80007d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	401a      	ands	r2, r3
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	2303      	movs	r3, #3
 80007e2:	4003      	ands	r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <__NVIC_SetPriority+0xd8>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	001c      	movs	r4, r3
 80007f0:	230f      	movs	r3, #15
 80007f2:	4023      	ands	r3, r4
 80007f4:	3b08      	subs	r3, #8
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	430a      	orrs	r2, r1
 80007fa:	3306      	adds	r3, #6
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	18c3      	adds	r3, r0, r3
 8000800:	3304      	adds	r3, #4
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b003      	add	sp, #12
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	045b      	lsls	r3, r3, #17
 8000824:	429a      	cmp	r2, r3
 8000826:	d301      	bcc.n	800082c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000828:	2301      	movs	r3, #1
 800082a:	e010      	b.n	800084e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <SysTick_Config+0x44>)
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	3a01      	subs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000834:	2301      	movs	r3, #1
 8000836:	425b      	negs	r3, r3
 8000838:	2103      	movs	r1, #3
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff ff7c 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x44>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	210f      	movs	r1, #15
 8000868:	187b      	adds	r3, r7, r1
 800086a:	1c02      	adds	r2, r0, #0
 800086c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b25b      	sxtb	r3, r3
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b004      	add	sp, #16
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	0002      	movs	r2, r0
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff33 	bl	8000704 <__NVIC_EnableIRQ>
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ffaf 	bl	8000814 <SysTick_Config>
 80008b6:	0003      	movs	r3, r0
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ce:	e14f      	b.n	8000b70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <HAL_GPIO_Init+0x28>
 80008e6:	e140      	b.n	8000b6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00b      	beq.n	8000908 <HAL_GPIO_Init+0x48>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d007      	beq.n	8000908 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fc:	2b11      	cmp	r3, #17
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b12      	cmp	r3, #18
 8000906:	d130      	bne.n	800096a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	2203      	movs	r2, #3
 8000914:	409a      	lsls	r2, r3
 8000916:	0013      	movs	r3, r2
 8000918:	43da      	mvns	r2, r3
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68da      	ldr	r2, [r3, #12]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	409a      	lsls	r2, r3
 800092a:	0013      	movs	r3, r2
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800093e:	2201      	movs	r2, #1
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
 8000944:	0013      	movs	r3, r2
 8000946:	43da      	mvns	r2, r3
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	091b      	lsrs	r3, r3, #4
 8000954:	2201      	movs	r2, #1
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
 800095c:	0013      	movs	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	409a      	lsls	r2, r3
 8000978:	0013      	movs	r3, r2
 800097a:	43da      	mvns	r2, r3
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	409a      	lsls	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d003      	beq.n	80009aa <HAL_GPIO_Init+0xea>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b12      	cmp	r3, #18
 80009a8:	d123      	bne.n	80009f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	08da      	lsrs	r2, r3, #3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3208      	adds	r2, #8
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	58d3      	ldr	r3, [r2, r3]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2207      	movs	r2, #7
 80009bc:	4013      	ands	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	691a      	ldr	r2, [r3, #16]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2107      	movs	r1, #7
 80009d6:	400b      	ands	r3, r1
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3208      	adds	r2, #8
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	6939      	ldr	r1, [r7, #16]
 80009f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2203      	movs	r2, #3
 8000a10:	401a      	ands	r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	055b      	lsls	r3, r3, #21
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d100      	bne.n	8000a34 <HAL_GPIO_Init+0x174>
 8000a32:	e09a      	b.n	8000b6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a34:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	4b53      	ldr	r3, [pc, #332]	; (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	619a      	str	r2, [r3, #24]
 8000a40:	4b51      	ldr	r3, [pc, #324]	; (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4013      	ands	r3, r2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a4c:	4a4f      	ldr	r2, [pc, #316]	; (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	589b      	ldr	r3, [r3, r2]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	220f      	movs	r2, #15
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	2390      	movs	r3, #144	; 0x90
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d013      	beq.n	8000aa2 <HAL_GPIO_Init+0x1e2>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d00d      	beq.n	8000a9e <HAL_GPIO_Init+0x1de>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a43      	ldr	r2, [pc, #268]	; (8000b94 <HAL_GPIO_Init+0x2d4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d007      	beq.n	8000a9a <HAL_GPIO_Init+0x1da>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a42      	ldr	r2, [pc, #264]	; (8000b98 <HAL_GPIO_Init+0x2d8>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_GPIO_Init+0x1d6>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a96:	2305      	movs	r3, #5
 8000a98:	e004      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab4:	4935      	ldr	r1, [pc, #212]	; (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	025b      	lsls	r3, r3, #9
 8000ada:	4013      	ands	r3, r2
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	029b      	lsls	r3, r3, #10
 8000b04:	4013      	ands	r3, r2
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	035b      	lsls	r3, r3, #13
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	039b      	lsls	r3, r3, #14
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	40da      	lsrs	r2, r3
 8000b78:	1e13      	subs	r3, r2, #0
 8000b7a:	d000      	beq.n	8000b7e <HAL_GPIO_Init+0x2be>
 8000b7c:	e6a8      	b.n	80008d0 <HAL_GPIO_Init+0x10>
  } 
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b006      	add	sp, #24
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48000c00 	.word	0x48000c00
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e301      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d100      	bne.n	8000bbe <HAL_RCC_OscConfig+0x1e>
 8000bbc:	e08d      	b.n	8000cda <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bbe:	4bc3      	ldr	r3, [pc, #780]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d00e      	beq.n	8000be8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bca:	4bc0      	ldr	r3, [pc, #768]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	220c      	movs	r2, #12
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d116      	bne.n	8000c04 <HAL_RCC_OscConfig+0x64>
 8000bd6:	4bbd      	ldr	r3, [pc, #756]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	401a      	ands	r2, r3
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d10d      	bne.n	8000c04 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be8:	4bb8      	ldr	r3, [pc, #736]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	029b      	lsls	r3, r3, #10
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d100      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x56>
 8000bf4:	e070      	b.n	8000cd8 <HAL_RCC_OscConfig+0x138>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d000      	beq.n	8000c00 <HAL_RCC_OscConfig+0x60>
 8000bfe:	e06b      	b.n	8000cd8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e2d8      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d107      	bne.n	8000c1c <HAL_RCC_OscConfig+0x7c>
 8000c0c:	4baf      	ldr	r3, [pc, #700]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4bae      	ldr	r3, [pc, #696]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	0249      	lsls	r1, r1, #9
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e02f      	b.n	8000c7c <HAL_RCC_OscConfig+0xdc>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10c      	bne.n	8000c3e <HAL_RCC_OscConfig+0x9e>
 8000c24:	4ba9      	ldr	r3, [pc, #676]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4ba8      	ldr	r3, [pc, #672]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c2a:	49a9      	ldr	r1, [pc, #676]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	4ba6      	ldr	r3, [pc, #664]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4ba5      	ldr	r3, [pc, #660]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c36:	49a7      	ldr	r1, [pc, #668]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e01e      	b.n	8000c7c <HAL_RCC_OscConfig+0xdc>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d10e      	bne.n	8000c64 <HAL_RCC_OscConfig+0xc4>
 8000c46:	4ba1      	ldr	r3, [pc, #644]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4ba0      	ldr	r3, [pc, #640]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	02c9      	lsls	r1, r1, #11
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	4b9d      	ldr	r3, [pc, #628]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b9c      	ldr	r3, [pc, #624]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e00b      	b.n	8000c7c <HAL_RCC_OscConfig+0xdc>
 8000c64:	4b99      	ldr	r3, [pc, #612]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b98      	ldr	r3, [pc, #608]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c6a:	4999      	ldr	r1, [pc, #612]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	4b96      	ldr	r3, [pc, #600]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b95      	ldr	r3, [pc, #596]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000c76:	4997      	ldr	r1, [pc, #604]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000c78:	400a      	ands	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d014      	beq.n	8000cae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fd10 	bl	80006a8 <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8e:	f7ff fd0b 	bl	80006a8 <HAL_GetTick>
 8000c92:	0002      	movs	r2, r0
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b64      	cmp	r3, #100	; 0x64
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e28a      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca0:	4b8a      	ldr	r3, [pc, #552]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	029b      	lsls	r3, r3, #10
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d0f0      	beq.n	8000c8e <HAL_RCC_OscConfig+0xee>
 8000cac:	e015      	b.n	8000cda <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cae:	f7ff fcfb 	bl	80006a8 <HAL_GetTick>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fcf6 	bl	80006a8 <HAL_GetTick>
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e275      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b80      	ldr	r3, [pc, #512]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	029b      	lsls	r3, r3, #10
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x118>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d100      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x146>
 8000ce4:	e069      	b.n	8000dba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ce6:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	220c      	movs	r2, #12
 8000cec:	4013      	ands	r3, r2
 8000cee:	d00b      	beq.n	8000d08 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cf0:	4b76      	ldr	r3, [pc, #472]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	220c      	movs	r2, #12
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d11c      	bne.n	8000d36 <HAL_RCC_OscConfig+0x196>
 8000cfc:	4b73      	ldr	r3, [pc, #460]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	025b      	lsls	r3, r3, #9
 8000d04:	4013      	ands	r3, r2
 8000d06:	d116      	bne.n	8000d36 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d08:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d005      	beq.n	8000d1e <HAL_RCC_OscConfig+0x17e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d001      	beq.n	8000d1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e24b      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	22f8      	movs	r2, #248	; 0xf8
 8000d24:	4393      	bics	r3, r2
 8000d26:	0019      	movs	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	00da      	lsls	r2, r3, #3
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d34:	e041      	b.n	8000dba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d024      	beq.n	8000d88 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3e:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b62      	ldr	r3, [pc, #392]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fcad 	bl	80006a8 <HAL_GetTick>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fca8 	bl	80006a8 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e227      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d0f1      	beq.n	8000d54 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d70:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	22f8      	movs	r2, #248	; 0xf8
 8000d76:	4393      	bics	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	00da      	lsls	r2, r3, #3
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e018      	b.n	8000dba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d88:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	438a      	bics	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc88 	bl	80006a8 <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fc83 	bl	80006a8 <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e202      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db0:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2202      	movs	r2, #2
 8000db6:	4013      	ands	r3, r2
 8000db8:	d1f1      	bne.n	8000d9e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d036      	beq.n	8000e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d019      	beq.n	8000e00 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc66 	bl	80006a8 <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de2:	f7ff fc61 	bl	80006a8 <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e1e0      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	2202      	movs	r2, #2
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d0f1      	beq.n	8000de2 <HAL_RCC_OscConfig+0x242>
 8000dfe:	e018      	b.n	8000e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	438a      	bics	r2, r1
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fc4c 	bl	80006a8 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e16:	f7ff fc47 	bl	80006a8 <HAL_GetTick>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e1c6      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d1f1      	bne.n	8000e16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2204      	movs	r2, #4
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d100      	bne.n	8000e3e <HAL_RCC_OscConfig+0x29e>
 8000e3c:	e0b4      	b.n	8000fa8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	201f      	movs	r0, #31
 8000e40:	183b      	adds	r3, r7, r0
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e48:	69da      	ldr	r2, [r3, #28]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	055b      	lsls	r3, r3, #21
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d110      	bne.n	8000e74 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0549      	lsls	r1, r1, #21
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	61da      	str	r2, [r3, #28]
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	055b      	lsls	r3, r3, #21
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e6e:	183b      	adds	r3, r7, r0
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_RCC_OscConfig+0x338>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d11a      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_RCC_OscConfig+0x338>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_RCC_OscConfig+0x338>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0049      	lsls	r1, r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fc0b 	bl	80006a8 <HAL_GetTick>
 8000e92:	0003      	movs	r3, r0
 8000e94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e98:	f7ff fc06 	bl	80006a8 <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e185      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_RCC_OscConfig+0x338>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10e      	bne.n	8000edc <HAL_RCC_OscConfig+0x33c>
 8000ebe:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	621a      	str	r2, [r3, #32]
 8000eca:	e035      	b.n	8000f38 <HAL_RCC_OscConfig+0x398>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	fffeffff 	.word	0xfffeffff
 8000ed4:	fffbffff 	.word	0xfffbffff
 8000ed8:	40007000 	.word	0x40007000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x35e>
 8000ee4:	4bb6      	ldr	r3, [pc, #728]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	4bb5      	ldr	r3, [pc, #724]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	438a      	bics	r2, r1
 8000eee:	621a      	str	r2, [r3, #32]
 8000ef0:	4bb3      	ldr	r3, [pc, #716]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	4bb2      	ldr	r3, [pc, #712]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	438a      	bics	r2, r1
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	e01c      	b.n	8000f38 <HAL_RCC_OscConfig+0x398>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x380>
 8000f06:	4bae      	ldr	r3, [pc, #696]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	4bad      	ldr	r3, [pc, #692]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	621a      	str	r2, [r3, #32]
 8000f12:	4bab      	ldr	r3, [pc, #684]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f14:	6a1a      	ldr	r2, [r3, #32]
 8000f16:	4baa      	ldr	r3, [pc, #680]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	621a      	str	r2, [r3, #32]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0x398>
 8000f20:	4ba7      	ldr	r3, [pc, #668]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4ba6      	ldr	r3, [pc, #664]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	438a      	bics	r2, r1
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	4ba4      	ldr	r3, [pc, #656]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	4ba3      	ldr	r3, [pc, #652]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f32:	2104      	movs	r1, #4
 8000f34:	438a      	bics	r2, r1
 8000f36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d014      	beq.n	8000f6a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f40:	f7ff fbb2 	bl	80006a8 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	e009      	b.n	8000f5e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fbad 	bl	80006a8 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a9b      	ldr	r2, [pc, #620]	; (80011c4 <HAL_RCC_OscConfig+0x624>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e12b      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5e:	4b98      	ldr	r3, [pc, #608]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x3aa>
 8000f68:	e013      	b.n	8000f92 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb9d 	bl	80006a8 <HAL_GetTick>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f72:	e009      	b.n	8000f88 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f74:	f7ff fb98 	bl	80006a8 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4a91      	ldr	r2, [pc, #580]	; (80011c4 <HAL_RCC_OscConfig+0x624>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e116      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	4b8d      	ldr	r3, [pc, #564]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f92:	231f      	movs	r3, #31
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f9c:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000f9e:	69da      	ldr	r2, [r3, #28]
 8000fa0:	4b87      	ldr	r3, [pc, #540]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000fa2:	4989      	ldr	r1, [pc, #548]	; (80011c8 <HAL_RCC_OscConfig+0x628>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2210      	movs	r2, #16
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d063      	beq.n	800107a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d12a      	bne.n	8001010 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fba:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbe:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000fc6:	4b7e      	ldr	r3, [pc, #504]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fca:	4b7d      	ldr	r3, [pc, #500]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fb69 	bl	80006a8 <HAL_GetTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fdc:	f7ff fb64 	bl	80006a8 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e0e3      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fee:	4b74      	ldr	r3, [pc, #464]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0f1      	beq.n	8000fdc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ff8:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	22f8      	movs	r2, #248	; 0xf8
 8000ffe:	4393      	bics	r3, r2
 8001000:	0019      	movs	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	00da      	lsls	r2, r3, #3
 8001008:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800100a:	430a      	orrs	r2, r1
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
 800100e:	e034      	b.n	800107a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	3305      	adds	r3, #5
 8001016:	d111      	bne.n	800103c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001018:	4b69      	ldr	r3, [pc, #420]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800101a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101c:	4b68      	ldr	r3, [pc, #416]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800101e:	2104      	movs	r1, #4
 8001020:	438a      	bics	r2, r1
 8001022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001024:	4b66      	ldr	r3, [pc, #408]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	22f8      	movs	r2, #248	; 0xf8
 800102a:	4393      	bics	r3, r2
 800102c:	0019      	movs	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	00da      	lsls	r2, r3, #3
 8001034:	4b62      	ldr	r3, [pc, #392]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001036:	430a      	orrs	r2, r1
 8001038:	635a      	str	r2, [r3, #52]	; 0x34
 800103a:	e01e      	b.n	800107a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800103c:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800103e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001040:	4b5f      	ldr	r3, [pc, #380]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001042:	2104      	movs	r1, #4
 8001044:	430a      	orrs	r2, r1
 8001046:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001048:	4b5d      	ldr	r3, [pc, #372]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800104a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104c:	4b5c      	ldr	r3, [pc, #368]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800104e:	2101      	movs	r1, #1
 8001050:	438a      	bics	r2, r1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001054:	f7ff fb28 	bl	80006a8 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800105e:	f7ff fb23 	bl	80006a8 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e0a2      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001074:	2202      	movs	r2, #2
 8001076:	4013      	ands	r3, r2
 8001078:	d1f1      	bne.n	800105e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d100      	bne.n	8001084 <HAL_RCC_OscConfig+0x4e4>
 8001082:	e097      	b.n	80011b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	220c      	movs	r2, #12
 800108a:	4013      	ands	r3, r2
 800108c:	2b08      	cmp	r3, #8
 800108e:	d100      	bne.n	8001092 <HAL_RCC_OscConfig+0x4f2>
 8001090:	e06b      	b.n	800116a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d14c      	bne.n	8001134 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010a0:	494a      	ldr	r1, [pc, #296]	; (80011cc <HAL_RCC_OscConfig+0x62c>)
 80010a2:	400a      	ands	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff faff 	bl	80006a8 <HAL_GetTick>
 80010aa:	0003      	movs	r3, r0
 80010ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fafa 	bl	80006a8 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e079      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	049b      	lsls	r3, r3, #18
 80010ca:	4013      	ands	r3, r2
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	220f      	movs	r2, #15
 80010d4:	4393      	bics	r3, r2
 80010d6:	0019      	movs	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a3a      	ldr	r2, [pc, #232]	; (80011d0 <HAL_RCC_OscConfig+0x630>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	0019      	movs	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	431a      	orrs	r2, r3
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010f8:	430a      	orrs	r2, r1
 80010fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0449      	lsls	r1, r1, #17
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff facd 	bl	80006a8 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fac8 	bl	80006a8 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e047      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	049b      	lsls	r3, r3, #18
 800112e:	4013      	ands	r3, r2
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0x574>
 8001132:	e03f      	b.n	80011b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x62c>)
 800113c:	400a      	ands	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fab2 	bl	80006a8 <HAL_GetTick>
 8001144:	0003      	movs	r3, r0
 8001146:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114a:	f7ff faad 	bl	80006a8 <HAL_GetTick>
 800114e:	0002      	movs	r2, r0
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e02c      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	049b      	lsls	r3, r3, #18
 8001164:	4013      	ands	r3, r2
 8001166:	d1f0      	bne.n	800114a <HAL_RCC_OscConfig+0x5aa>
 8001168:	e024      	b.n	80011b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e01f      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_RCC_OscConfig+0x620>)
 800117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001180:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	025b      	lsls	r3, r3, #9
 8001188:	401a      	ands	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	429a      	cmp	r2, r3
 8001190:	d10e      	bne.n	80011b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800119c:	429a      	cmp	r2, r3
 800119e:	d107      	bne.n	80011b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	23f0      	movs	r3, #240	; 0xf0
 80011a4:	039b      	lsls	r3, r3, #14
 80011a6:	401a      	ands	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b008      	add	sp, #32
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40021000 	.word	0x40021000
 80011c4:	00001388 	.word	0x00001388
 80011c8:	efffffff 	.word	0xefffffff
 80011cc:	feffffff 	.word	0xfeffffff
 80011d0:	ffc2ffff 	.word	0xffc2ffff

080011d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0b3      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d911      	bls.n	800121a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b58      	ldr	r3, [pc, #352]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4393      	bics	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	4013      	ands	r3, r2
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e09a      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d015      	beq.n	8001250 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2204      	movs	r2, #4
 800122a:	4013      	ands	r3, r2
 800122c:	d006      	beq.n	800123c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800122e:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 8001234:	21e0      	movs	r1, #224	; 0xe0
 8001236:	00c9      	lsls	r1, r1, #3
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	22f0      	movs	r2, #240	; 0xf0
 8001242:	4393      	bics	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	4b44      	ldr	r3, [pc, #272]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	4013      	ands	r3, r2
 8001258:	d040      	beq.n	80012dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	4013      	ands	r3, r2
 800126c:	d114      	bne.n	8001298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e06e      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	049b      	lsls	r3, r3, #18
 8001282:	4013      	ands	r3, r2
 8001284:	d108      	bne.n	8001298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e062      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e05b      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	4393      	bics	r3, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 80012a8:	430a      	orrs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff f9fc 	bl	80006a8 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b4:	e009      	b.n	80012ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b6:	f7ff f9f7 	bl	80006a8 <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	4a27      	ldr	r2, [pc, #156]	; (8001360 <HAL_RCC_ClockConfig+0x18c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e042      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	220c      	movs	r2, #12
 80012d0:	401a      	ands	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1ec      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d211      	bcs.n	800130e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2201      	movs	r2, #1
 80012f0:	4393      	bics	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_RCC_ClockConfig+0x184>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2201      	movs	r2, #1
 8001302:	4013      	ands	r3, r2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d001      	beq.n	800130e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e020      	b.n	8001350 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d009      	beq.n	800132c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_RCC_ClockConfig+0x190>)
 800131e:	4013      	ands	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800132c:	f000 f820 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 8001330:	0001      	movs	r1, r0
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_RCC_ClockConfig+0x188>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	220f      	movs	r2, #15
 800133a:	4013      	ands	r3, r2
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_RCC_ClockConfig+0x194>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	000a      	movs	r2, r1
 8001342:	40da      	lsrs	r2, r3
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_ClockConfig+0x198>)
 8001346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff f967 	bl	800061c <HAL_InitTick>
  
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40022000 	.word	0x40022000
 800135c:	40021000 	.word	0x40021000
 8001360:	00001388 	.word	0x00001388
 8001364:	fffff8ff 	.word	0xfffff8ff
 8001368:	08004098 	.word	0x08004098
 800136c:	20000000 	.word	0x20000000

08001370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b08f      	sub	sp, #60	; 0x3c
 8001374:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001376:	2314      	movs	r3, #20
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800137c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800137e:	c313      	stmia	r3!, {r0, r1, r4}
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001388:	ca13      	ldmia	r2!, {r0, r1, r4}
 800138a:	c313      	stmia	r3!, {r0, r1, r4}
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	220c      	movs	r2, #12
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d002      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x4a>
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d003      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x50>
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013be:	e02d      	b.n	800141c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	0c9b      	lsrs	r3, r3, #18
 80013c4:	220f      	movs	r2, #15
 80013c6:	4013      	ands	r3, r2
 80013c8:	2214      	movs	r2, #20
 80013ca:	18ba      	adds	r2, r7, r2
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	220f      	movs	r2, #15
 80013d6:	4013      	ands	r3, r2
 80013d8:	1d3a      	adds	r2, r7, #4
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	025b      	lsls	r3, r3, #9
 80013e4:	4013      	ands	r3, r2
 80013e6:	d009      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ea:	4812      	ldr	r0, [pc, #72]	; (8001434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013ec:	f7fe fe9e 	bl	800012c <__udivsi3>
 80013f0:	0003      	movs	r3, r0
 80013f2:	001a      	movs	r2, r3
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	4353      	muls	r3, r2
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
 80013fa:	e009      	b.n	8001410 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80013fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fe:	000a      	movs	r2, r1
 8001400:	0152      	lsls	r2, r2, #5
 8001402:	1a52      	subs	r2, r2, r1
 8001404:	0193      	lsls	r3, r2, #6
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	185b      	adds	r3, r3, r1
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001414:	e002      	b.n	800141c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800141a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b00f      	add	sp, #60	; 0x3c
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	08004078 	.word	0x08004078
 800142c:	08004088 	.word	0x08004088
 8001430:	40021000 	.word	0x40021000
 8001434:	007a1200 	.word	0x007a1200

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	0001      	movs	r1, r0
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	2207      	movs	r2, #7
 800145e:	4013      	ands	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	40d9      	lsrs	r1, r3
 8001466:	000b      	movs	r3, r1
}    
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40021000 	.word	0x40021000
 8001474:	080040a8 	.word	0x080040a8

08001478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001494:	e08e      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2017      	movs	r0, #23
 8001498:	183b      	adds	r3, r7, r0
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	055b      	lsls	r3, r3, #21
 80014a6:	4013      	ands	r3, r2
 80014a8:	d110      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0549      	lsls	r1, r1, #21
 80014b4:	430a      	orrs	r2, r1
 80014b6:	61da      	str	r2, [r3, #28]
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	183b      	adds	r3, r7, r0
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014cc:	4b54      	ldr	r3, [pc, #336]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4013      	ands	r3, r2
 80014d6:	d11a      	bne.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d8:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	0049      	lsls	r1, r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f8df 	bl	80006a8 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	e008      	b.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f0:	f7ff f8da 	bl	80006a8 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e087      	b.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d034      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	23c0      	movs	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4013      	ands	r3, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d02c      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001530:	4b3a      	ldr	r3, [pc, #232]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0249      	lsls	r1, r1, #9
 8001544:	430a      	orrs	r2, r1
 8001546:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800154e:	4936      	ldr	r1, [pc, #216]	; (8001628 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001550:	400a      	ands	r2, r1
 8001552:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f8a1 	bl	80006a8 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e009      	b.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff f89c 	bl	80006a8 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4a2d      	ldr	r2, [pc, #180]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e048      	b.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d0f0      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800159a:	430a      	orrs	r2, r1
 800159c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159e:	2317      	movs	r3, #23
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015ae:	4920      	ldr	r1, [pc, #128]	; (8001630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d009      	beq.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	2203      	movs	r2, #3
 80015c4:	4393      	bics	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2220      	movs	r2, #32
 80015d8:	4013      	ands	r3, r2
 80015da:	d009      	beq.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	2210      	movs	r2, #16
 80015e2:	4393      	bics	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4013      	ands	r3, r2
 80015fa:	d009      	beq.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	4393      	bics	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800160c:	430a      	orrs	r2, r1
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b006      	add	sp, #24
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
 8001624:	fffffcff 	.word	0xfffffcff
 8001628:	fffeffff 	.word	0xfffeffff
 800162c:	00001388 	.word	0x00001388
 8001630:	efffffff 	.word	0xefffffff

08001634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e042      	b.n	80016cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	223d      	movs	r2, #61	; 0x3d
 800164a:	5c9b      	ldrb	r3, [r3, r2]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	223c      	movs	r2, #60	; 0x3c
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7fe fecb 	bl	80003f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	223d      	movs	r2, #61	; 0x3d
 8001666:	2102      	movs	r1, #2
 8001668:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	0019      	movs	r1, r3
 8001674:	0010      	movs	r0, r2
 8001676:	f000 f9e3 	bl	8001a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2246      	movs	r2, #70	; 0x46
 800167e:	2101      	movs	r1, #1
 8001680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	223e      	movs	r2, #62	; 0x3e
 8001686:	2101      	movs	r1, #1
 8001688:	5499      	strb	r1, [r3, r2]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2241      	movs	r2, #65	; 0x41
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2242      	movs	r2, #66	; 0x42
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2243      	movs	r2, #67	; 0x43
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2244      	movs	r2, #68	; 0x44
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2245      	movs	r2, #69	; 0x45
 80016be:	2101      	movs	r1, #1
 80016c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	223d      	movs	r2, #61	; 0x3d
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	223d      	movs	r2, #61	; 0x3d
 80016e0:	5c9b      	ldrb	r3, [r3, r2]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d001      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e03b      	b.n	8001764 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	223d      	movs	r2, #61	; 0x3d
 80016f0:	2102      	movs	r1, #2
 80016f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2101      	movs	r1, #1
 8001700:	430a      	orrs	r2, r1
 8001702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_TIM_Base_Start_IT+0x98>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00f      	beq.n	800172e <HAL_TIM_Base_Start_IT+0x5a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	05db      	lsls	r3, r3, #23
 8001716:	429a      	cmp	r2, r3
 8001718:	d009      	beq.n	800172e <HAL_TIM_Base_Start_IT+0x5a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_TIM_Base_Start_IT+0x9c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d004      	beq.n	800172e <HAL_TIM_Base_Start_IT+0x5a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <HAL_TIM_Base_Start_IT+0xa0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d111      	bne.n	8001752 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2207      	movs	r2, #7
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b06      	cmp	r3, #6
 800173e:	d010      	beq.n	8001762 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001750:	e007      	b.n	8001762 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40012c00 	.word	0x40012c00
 8001770:	40000400 	.word	0x40000400
 8001774:	40014000 	.word	0x40014000

08001778 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	438a      	bics	r2, r1
 800178e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <HAL_TIM_Base_Stop_IT+0x54>)
 8001798:	4013      	ands	r3, r2
 800179a:	d10d      	bne.n	80017b8 <HAL_TIM_Base_Stop_IT+0x40>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_TIM_Base_Stop_IT+0x58>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	d107      	bne.n	80017b8 <HAL_TIM_Base_Stop_IT+0x40>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2101      	movs	r1, #1
 80017b4:	438a      	bics	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	223d      	movs	r2, #61	; 0x3d
 80017bc:	2101      	movs	r1, #1
 80017be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	00001111 	.word	0x00001111
 80017d0:	00000444 	.word	0x00000444

080017d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d124      	bne.n	8001834 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d11d      	bne.n	8001834 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4252      	negs	r2, r2
 8001800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2203      	movs	r2, #3
 8001810:	4013      	ands	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0018      	movs	r0, r3
 8001818:	f000 f8fa 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 800181c:	e007      	b.n	800182e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	0018      	movs	r0, r3
 8001822:	f000 f8ed 	bl	8001a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f000 f8f9 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2204      	movs	r2, #4
 800183c:	4013      	ands	r3, r2
 800183e:	2b04      	cmp	r3, #4
 8001840:	d125      	bne.n	800188e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2204      	movs	r2, #4
 800184a:	4013      	ands	r3, r2
 800184c:	2b04      	cmp	r3, #4
 800184e:	d11e      	bne.n	800188e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2205      	movs	r2, #5
 8001856:	4252      	negs	r2, r2
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	23c0      	movs	r3, #192	; 0xc0
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4013      	ands	r3, r2
 800186c:	d004      	beq.n	8001878 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f8cd 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 8001876:	e007      	b.n	8001888 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f8c0 	bl	8001a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f8cc 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2208      	movs	r2, #8
 8001896:	4013      	ands	r3, r2
 8001898:	2b08      	cmp	r3, #8
 800189a:	d124      	bne.n	80018e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2208      	movs	r2, #8
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d11d      	bne.n	80018e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2209      	movs	r2, #9
 80018b0:	4252      	negs	r2, r2
 80018b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	d004      	beq.n	80018d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8a1 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 80018ce:	e007      	b.n	80018e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f894 	bl	8001a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f8a0 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2210      	movs	r2, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d125      	bne.n	8001940 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2210      	movs	r2, #16
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d11e      	bne.n	8001940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2211      	movs	r2, #17
 8001908:	4252      	negs	r2, r2
 800190a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2208      	movs	r2, #8
 8001910:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d004      	beq.n	800192a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f874 	bl	8001a10 <HAL_TIM_IC_CaptureCallback>
 8001928:	e007      	b.n	800193a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f000 f867 	bl	8001a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f000 f873 	bl	8001a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10f      	bne.n	800196e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	4013      	ands	r3, r2
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2202      	movs	r2, #2
 8001962:	4252      	negs	r2, r2
 8001964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	0018      	movs	r0, r3
 800196a:	f001 fe6b 	bl	8003644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	4013      	ands	r3, r2
 8001978:	2b80      	cmp	r3, #128	; 0x80
 800197a:	d10f      	bne.n	800199c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	4013      	ands	r3, r2
 8001986:	2b80      	cmp	r3, #128	; 0x80
 8001988:	d108      	bne.n	800199c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2281      	movs	r2, #129	; 0x81
 8001990:	4252      	negs	r2, r2
 8001992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0018      	movs	r0, r3
 8001998:	f000 f938 	bl	8001c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2240      	movs	r2, #64	; 0x40
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d10f      	bne.n	80019ca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d108      	bne.n	80019ca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	4252      	negs	r2, r2
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f833 	bl	8001a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2220      	movs	r2, #32
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d10f      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d108      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2221      	movs	r2, #33	; 0x21
 80019ec:	4252      	negs	r2, r2
 80019ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 f902 	bl	8001bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <TIM_Base_SetConfig+0xe4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d008      	beq.n	8001a6a <TIM_Base_SetConfig+0x2a>
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	05db      	lsls	r3, r3, #23
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d003      	beq.n	8001a6a <TIM_Base_SetConfig+0x2a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <TIM_Base_SetConfig+0xe8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d108      	bne.n	8001a7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2270      	movs	r2, #112	; 0x70
 8001a6e:	4393      	bics	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <TIM_Base_SetConfig+0xe4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d018      	beq.n	8001ab6 <TIM_Base_SetConfig+0x76>
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d013      	beq.n	8001ab6 <TIM_Base_SetConfig+0x76>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <TIM_Base_SetConfig+0xe8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00f      	beq.n	8001ab6 <TIM_Base_SetConfig+0x76>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <TIM_Base_SetConfig+0xec>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00b      	beq.n	8001ab6 <TIM_Base_SetConfig+0x76>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <TIM_Base_SetConfig+0xf0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <TIM_Base_SetConfig+0x76>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <TIM_Base_SetConfig+0xf4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <TIM_Base_SetConfig+0x76>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <TIM_Base_SetConfig+0xf8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d108      	bne.n	8001ac8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <TIM_Base_SetConfig+0xfc>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	4393      	bics	r3, r2
 8001ace:	001a      	movs	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <TIM_Base_SetConfig+0xe4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00b      	beq.n	8001b0e <TIM_Base_SetConfig+0xce>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <TIM_Base_SetConfig+0xf0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <TIM_Base_SetConfig+0xce>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <TIM_Base_SetConfig+0xf4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d003      	beq.n	8001b0e <TIM_Base_SetConfig+0xce>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <TIM_Base_SetConfig+0xf8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d103      	bne.n	8001b16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	615a      	str	r2, [r3, #20]
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40002000 	.word	0x40002000
 8001b30:	40014000 	.word	0x40014000
 8001b34:	40014400 	.word	0x40014400
 8001b38:	40014800 	.word	0x40014800
 8001b3c:	fffffcff 	.word	0xfffffcff

08001b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	223c      	movs	r2, #60	; 0x3c
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e047      	b.n	8001be8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	223c      	movs	r2, #60	; 0x3c
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	223d      	movs	r2, #61	; 0x3d
 8001b64:	2102      	movs	r1, #2
 8001b66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2270      	movs	r2, #112	; 0x70
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00f      	beq.n	8001bbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d009      	beq.n	8001bbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d004      	beq.n	8001bbc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d10c      	bne.n	8001bd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	4393      	bics	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	223d      	movs	r2, #61	; 0x3d
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223c      	movs	r2, #60	; 0x3c
 8001be2:	2100      	movs	r1, #0
 8001be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40014000 	.word	0x40014000

08001bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e044      	b.n	8001cb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2274      	movs	r2, #116	; 0x74
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7fe fbff 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2224      	movs	r2, #36	; 0x24
 8001c4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2101      	movs	r1, #1
 8001c58:	438a      	bics	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f8da 	bl	8001e18 <UART_SetConfig>
 8001c64:	0003      	movs	r3, r0
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e024      	b.n	8001cb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fa0d 	bl	8002098 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <HAL_UART_Init+0xa4>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	212a      	movs	r1, #42	; 0x2a
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 faa5 	bl	8002200 <UART_CheckIdleState>
 8001cb6:	0003      	movs	r3, r0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	ffffb7ff 	.word	0xffffb7ff

08001cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	1dbb      	adds	r3, r7, #6
 8001cd2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d000      	beq.n	8001cde <HAL_UART_Transmit+0x1a>
 8001cdc:	e096      	b.n	8001e0c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_UART_Transmit+0x28>
 8001ce4:	1dbb      	adds	r3, r7, #6
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e08e      	b.n	8001e0e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	015b      	lsls	r3, r3, #5
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d109      	bne.n	8001d10 <HAL_UART_Transmit+0x4c>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d001      	beq.n	8001d10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e07e      	b.n	8001e0e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2274      	movs	r2, #116	; 0x74
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_UART_Transmit+0x5a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e077      	b.n	8001e0e <HAL_UART_Transmit+0x14a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2274      	movs	r2, #116	; 0x74
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	; 0x21
 8001d32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d34:	f7fe fcb8 	bl	80006a8 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1dba      	adds	r2, r7, #6
 8001d40:	2150      	movs	r1, #80	; 0x50
 8001d42:	8812      	ldrh	r2, [r2, #0]
 8001d44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1dba      	adds	r2, r7, #6
 8001d4a:	2152      	movs	r1, #82	; 0x52
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	015b      	lsls	r3, r3, #5
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d108      	bne.n	8001d6e <HAL_UART_Transmit+0xaa>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	e003      	b.n	8001d76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2274      	movs	r2, #116	; 0x74
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001d7e:	e02d      	b.n	8001ddc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	0013      	movs	r3, r2
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	f000 fa7f 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e039      	b.n	8001e0e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	881a      	ldrh	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	05d2      	lsls	r2, r2, #23
 8001daa:	0dd2      	lsrs	r2, r2, #23
 8001dac:	b292      	uxth	r2, r2
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3302      	adds	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	e008      	b.n	8001dca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2252      	movs	r2, #82	; 0x52
 8001dce:	5a9b      	ldrh	r3, [r3, r2]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2252      	movs	r2, #82	; 0x52
 8001dda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2252      	movs	r2, #82	; 0x52
 8001de0:	5a9b      	ldrh	r3, [r3, r2]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1cb      	bne.n	8001d80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	0013      	movs	r3, r2
 8001df2:	2200      	movs	r2, #0
 8001df4:	2140      	movs	r1, #64	; 0x40
 8001df6:	f000 fa4b 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e005      	b.n	8001e0e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b008      	add	sp, #32
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e20:	231e      	movs	r3, #30
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a8d      	ldr	r2, [pc, #564]	; (800207c <UART_SetConfig+0x264>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a88      	ldr	r2, [pc, #544]	; (8002080 <UART_SetConfig+0x268>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a7f      	ldr	r2, [pc, #508]	; (8002084 <UART_SetConfig+0x26c>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7b      	ldr	r2, [pc, #492]	; (8002088 <UART_SetConfig+0x270>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d127      	bne.n	8001eee <UART_SetConfig+0xd6>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <UART_SetConfig+0x274>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d00d      	beq.n	8001ec6 <UART_SetConfig+0xae>
 8001eaa:	d81b      	bhi.n	8001ee4 <UART_SetConfig+0xcc>
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d014      	beq.n	8001eda <UART_SetConfig+0xc2>
 8001eb0:	d818      	bhi.n	8001ee4 <UART_SetConfig+0xcc>
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <UART_SetConfig+0xa4>
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d00a      	beq.n	8001ed0 <UART_SetConfig+0xb8>
 8001eba:	e013      	b.n	8001ee4 <UART_SetConfig+0xcc>
 8001ebc:	231f      	movs	r3, #31
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	e021      	b.n	8001f0a <UART_SetConfig+0xf2>
 8001ec6:	231f      	movs	r3, #31
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	2202      	movs	r2, #2
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e01c      	b.n	8001f0a <UART_SetConfig+0xf2>
 8001ed0:	231f      	movs	r3, #31
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e017      	b.n	8001f0a <UART_SetConfig+0xf2>
 8001eda:	231f      	movs	r3, #31
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2208      	movs	r2, #8
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e012      	b.n	8001f0a <UART_SetConfig+0xf2>
 8001ee4:	231f      	movs	r3, #31
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2210      	movs	r2, #16
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e00d      	b.n	8001f0a <UART_SetConfig+0xf2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a67      	ldr	r2, [pc, #412]	; (8002090 <UART_SetConfig+0x278>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d104      	bne.n	8001f02 <UART_SetConfig+0xea>
 8001ef8:	231f      	movs	r3, #31
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e003      	b.n	8001f0a <UART_SetConfig+0xf2>
 8001f02:	231f      	movs	r3, #31
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2210      	movs	r2, #16
 8001f08:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d15d      	bne.n	8001fd2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001f16:	231f      	movs	r3, #31
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d015      	beq.n	8001f4c <UART_SetConfig+0x134>
 8001f20:	dc18      	bgt.n	8001f54 <UART_SetConfig+0x13c>
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00d      	beq.n	8001f42 <UART_SetConfig+0x12a>
 8001f26:	dc15      	bgt.n	8001f54 <UART_SetConfig+0x13c>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <UART_SetConfig+0x11a>
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d005      	beq.n	8001f3c <UART_SetConfig+0x124>
 8001f30:	e010      	b.n	8001f54 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f32:	f7ff fa8b 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001f36:	0003      	movs	r3, r0
 8001f38:	61bb      	str	r3, [r7, #24]
        break;
 8001f3a:	e012      	b.n	8001f62 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f3c:	4b55      	ldr	r3, [pc, #340]	; (8002094 <UART_SetConfig+0x27c>)
 8001f3e:	61bb      	str	r3, [r7, #24]
        break;
 8001f40:	e00f      	b.n	8001f62 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f42:	f7ff fa15 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 8001f46:	0003      	movs	r3, r0
 8001f48:	61bb      	str	r3, [r7, #24]
        break;
 8001f4a:	e00a      	b.n	8001f62 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	61bb      	str	r3, [r7, #24]
        break;
 8001f52:	e006      	b.n	8001f62 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f58:	231e      	movs	r3, #30
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
        break;
 8001f60:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d100      	bne.n	8001f6a <UART_SetConfig+0x152>
 8001f68:	e07b      	b.n	8002062 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	005a      	lsls	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	18d2      	adds	r2, r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	f7fe f8d5 	bl	800012c <__udivsi3>
 8001f82:	0003      	movs	r3, r0
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d91c      	bls.n	8001fc8 <UART_SetConfig+0x1b0>
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	025b      	lsls	r3, r3, #9
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d217      	bcs.n	8001fc8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	200e      	movs	r0, #14
 8001f9e:	183b      	adds	r3, r7, r0
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	438a      	bics	r2, r1
 8001fa4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2207      	movs	r2, #7
 8001fae:	4013      	ands	r3, r2
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	183a      	adds	r2, r7, r0
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	183a      	adds	r2, r7, r0
 8001fc2:	8812      	ldrh	r2, [r2, #0]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e04c      	b.n	8002062 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001fc8:	231e      	movs	r3, #30
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e047      	b.n	8002062 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fd2:	231f      	movs	r3, #31
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d015      	beq.n	8002008 <UART_SetConfig+0x1f0>
 8001fdc:	dc18      	bgt.n	8002010 <UART_SetConfig+0x1f8>
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00d      	beq.n	8001ffe <UART_SetConfig+0x1e6>
 8001fe2:	dc15      	bgt.n	8002010 <UART_SetConfig+0x1f8>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <UART_SetConfig+0x1d6>
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d005      	beq.n	8001ff8 <UART_SetConfig+0x1e0>
 8001fec:	e010      	b.n	8002010 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fee:	f7ff fa2d 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
        break;
 8001ff6:	e012      	b.n	800201e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <UART_SetConfig+0x27c>)
 8001ffa:	61bb      	str	r3, [r7, #24]
        break;
 8001ffc:	e00f      	b.n	800201e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ffe:	f7ff f9b7 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]
        break;
 8002006:	e00a      	b.n	800201e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	61bb      	str	r3, [r7, #24]
        break;
 800200e:	e006      	b.n	800201e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002014:	231e      	movs	r3, #30
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
        break;
 800201c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01e      	beq.n	8002062 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	085a      	lsrs	r2, r3, #1
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	18d2      	adds	r2, r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0019      	movs	r1, r3
 8002034:	0010      	movs	r0, r2
 8002036:	f7fe f879 	bl	800012c <__udivsi3>
 800203a:	0003      	movs	r3, r0
 800203c:	b29b      	uxth	r3, r3
 800203e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	d909      	bls.n	800205a <UART_SetConfig+0x242>
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	429a      	cmp	r2, r3
 800204e:	d204      	bcs.n	800205a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	e003      	b.n	8002062 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800205a:	231e      	movs	r3, #30
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800206e:	231e      	movs	r3, #30
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	781b      	ldrb	r3, [r3, #0]
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b008      	add	sp, #32
 800207a:	bd80      	pop	{r7, pc}
 800207c:	ffff69f3 	.word	0xffff69f3
 8002080:	ffffcfff 	.word	0xffffcfff
 8002084:	fffff4ff 	.word	0xfffff4ff
 8002088:	40013800 	.word	0x40013800
 800208c:	40021000 	.word	0x40021000
 8002090:	40004400 	.word	0x40004400
 8002094:	007a1200 	.word	0x007a1200

08002098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	d00b      	beq.n	80020c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <UART_AdvFeatureConfig+0x144>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a43      	ldr	r2, [pc, #268]	; (80021e0 <UART_AdvFeatureConfig+0x148>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2204      	movs	r2, #4
 80020ea:	4013      	ands	r3, r2
 80020ec:	d00b      	beq.n	8002106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a3b      	ldr	r2, [pc, #236]	; (80021e4 <UART_AdvFeatureConfig+0x14c>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	2208      	movs	r2, #8
 800210c:	4013      	ands	r3, r2
 800210e:	d00b      	beq.n	8002128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a34      	ldr	r2, [pc, #208]	; (80021e8 <UART_AdvFeatureConfig+0x150>)
 8002118:	4013      	ands	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	2210      	movs	r2, #16
 800212e:	4013      	ands	r3, r2
 8002130:	d00b      	beq.n	800214a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <UART_AdvFeatureConfig+0x154>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2220      	movs	r2, #32
 8002150:	4013      	ands	r3, r2
 8002152:	d00b      	beq.n	800216c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <UART_AdvFeatureConfig+0x158>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	4013      	ands	r3, r2
 8002174:	d01d      	beq.n	80021b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <UART_AdvFeatureConfig+0x15c>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	035b      	lsls	r3, r3, #13
 8002196:	429a      	cmp	r2, r3
 8002198:	d10b      	bne.n	80021b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <UART_AdvFeatureConfig+0x160>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	4013      	ands	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <UART_AdvFeatureConfig+0x164>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffdffff 	.word	0xfffdffff
 80021e0:	fffeffff 	.word	0xfffeffff
 80021e4:	fffbffff 	.word	0xfffbffff
 80021e8:	ffff7fff 	.word	0xffff7fff
 80021ec:	ffffefff 	.word	0xffffefff
 80021f0:	ffffdfff 	.word	0xffffdfff
 80021f4:	ffefffff 	.word	0xffefffff
 80021f8:	ff9fffff 	.word	0xff9fffff
 80021fc:	fff7ffff 	.word	0xfff7ffff

08002200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	2100      	movs	r1, #0
 800220e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002210:	f7fe fa4a 	bl	80006a8 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2208      	movs	r2, #8
 8002220:	4013      	ands	r3, r2
 8002222:	2b08      	cmp	r3, #8
 8002224:	d10c      	bne.n	8002240 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0391      	lsls	r1, r2, #14
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <UART_CheckIdleState+0x8c>)
 8002230:	9200      	str	r2, [sp, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	f000 f82c 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e021      	b.n	8002284 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	2b04      	cmp	r3, #4
 800224c:	d10c      	bne.n	8002268 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	03d1      	lsls	r1, r2, #15
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4a0d      	ldr	r2, [pc, #52]	; (800228c <UART_CheckIdleState+0x8c>)
 8002258:	9200      	str	r2, [sp, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	f000 f818 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8002260:	1e03      	subs	r3, r0, #0
 8002262:	d001      	beq.n	8002268 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e00d      	b.n	8002284 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2274      	movs	r2, #116	; 0x74
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bd80      	pop	{r7, pc}
 800228c:	01ffffff 	.word	0x01ffffff

08002290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a0:	e05e      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	3301      	adds	r3, #1
 80022a6:	d05b      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a8:	f7fe f9fe 	bl	80006a8 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d302      	bcc.n	80022be <UART_WaitOnFlagUntilTimeout+0x2e>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11b      	bne.n	80022f6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	492f      	ldr	r1, [pc, #188]	; (8002388 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	438a      	bics	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2274      	movs	r2, #116	; 0x74
 80022ee:	2100      	movs	r1, #0
 80022f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e044      	b.n	8002380 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2204      	movs	r2, #4
 80022fe:	4013      	ands	r3, r2
 8002300:	d02e      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	401a      	ands	r2, r3
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	429a      	cmp	r2, r3
 8002314:	d124      	bne.n	8002360 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4917      	ldr	r1, [pc, #92]	; (8002388 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800232c:	400a      	ands	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	2120      	movs	r1, #32
 8002352:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2274      	movs	r2, #116	; 0x74
 8002358:	2100      	movs	r1, #0
 800235a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e00f      	b.n	8002380 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	425a      	negs	r2, r3
 8002370:	4153      	adcs	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	001a      	movs	r2, r3
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d091      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	fffffe5f 	.word	0xfffffe5f

0800238c <nbedtls_platform_zeroize>:
 * platform and needs.
 */
static void *(*const volatile memset_func)(void *, int, size_t) = memset;

void nbedtls_platform_zeroize(void *buf, size_t len)
{
 800238c:	b510      	push	{r4, lr}
    memset_func(buf, 0, len);
 800238e:	4b03      	ldr	r3, [pc, #12]	; (800239c <nbedtls_platform_zeroize+0x10>)
{
 8002390:	000a      	movs	r2, r1
    memset_func(buf, 0, len);
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2100      	movs	r1, #0
 8002396:	4798      	blx	r3
}
 8002398:	bd10      	pop	{r4, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	2000000c 	.word	0x2000000c

080023a0 <nbedtls_sha256_init>:
        (b)[(i) + 3] = (unsigned char)((n));       \
    } while (0)
#endif

void nbedtls_sha256_init(nbedtls_sha256_context *ctx)
{
 80023a0:	b510      	push	{r4, lr}
    SHA256_VALIDATE(ctx != NULL);

    memset(ctx, 0, sizeof(nbedtls_sha256_context));
 80023a2:	226c      	movs	r2, #108	; 0x6c
 80023a4:	2100      	movs	r1, #0
 80023a6:	f001 fa34 	bl	8003812 <memset>
}
 80023aa:	bd10      	pop	{r4, pc}

080023ac <nbedtls_sha256_free>:

void nbedtls_sha256_free(nbedtls_sha256_context *ctx)
{
 80023ac:	b510      	push	{r4, lr}
    if (ctx == NULL)
 80023ae:	2800      	cmp	r0, #0
 80023b0:	d002      	beq.n	80023b8 <nbedtls_sha256_free+0xc>
        return;

    nbedtls_platform_zeroize(ctx, sizeof(nbedtls_sha256_context));
 80023b2:	216c      	movs	r1, #108	; 0x6c
 80023b4:	f7ff ffea 	bl	800238c <nbedtls_platform_zeroize>
}
 80023b8:	bd10      	pop	{r4, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)

080023bc <nbedtls_sha256_starts_ret>:
int nbedtls_sha256_starts_ret(nbedtls_sha256_context *ctx, int is224)
{
    SHA256_VALIDATE_RET(ctx != NULL);
    SHA256_VALIDATE_RET(is224 == 0 || is224 == 1);

    ctx->total[0] = 0;
 80023bc:	2300      	movs	r3, #0
{
 80023be:	b510      	push	{r4, lr}
    ctx->total[0] = 0;
 80023c0:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 80023c2:	6043      	str	r3, [r0, #4]

    if (is224 == 0)
 80023c4:	2900      	cmp	r1, #0
 80023c6:	d112      	bne.n	80023ee <nbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <nbedtls_sha256_starts_ret+0x54>)
        ctx->state[1] = 0xBB67AE85;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <nbedtls_sha256_starts_ret+0x58>)
        ctx->state[2] = 0x3C6EF372;
 80023cc:	4c12      	ldr	r4, [pc, #72]	; (8002418 <nbedtls_sha256_starts_ret+0x5c>)
        ctx->state[0] = 0x6A09E667;
 80023ce:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 80023d0:	60c3      	str	r3, [r0, #12]
        ctx->state[3] = 0xA54FF53A;
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <nbedtls_sha256_starts_ret+0x60>)
        ctx->state[4] = 0x510E527F;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <nbedtls_sha256_starts_ret+0x64>)
        ctx->state[2] = 0x3C6EF372;
 80023d6:	6104      	str	r4, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 80023d8:	6142      	str	r2, [r0, #20]
        ctx->state[5] = 0x9B05688C;
 80023da:	4c12      	ldr	r4, [pc, #72]	; (8002424 <nbedtls_sha256_starts_ret+0x68>)
        ctx->state[6] = 0x1F83D9AB;
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <nbedtls_sha256_starts_ret+0x6c>)
        ctx->state[4] = 0x510E527F;
 80023de:	6183      	str	r3, [r0, #24]
        ctx->state[7] = 0x5BE0CD19;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <nbedtls_sha256_starts_ret+0x70>)
        ctx->state[5] = 0x9B05688C;
 80023e2:	61c4      	str	r4, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 80023e4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80023e6:	6243      	str	r3, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
 80023e8:	6681      	str	r1, [r0, #104]	; 0x68

    return (0);
}
 80023ea:	2000      	movs	r0, #0
 80023ec:	bd10      	pop	{r4, pc}
        ctx->state[0] = 0xC1059ED8;
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <nbedtls_sha256_starts_ret+0x74>)
        ctx->state[1] = 0x367CD507;
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <nbedtls_sha256_starts_ret+0x78>)
        ctx->state[2] = 0x3070DD17;
 80023f2:	4c11      	ldr	r4, [pc, #68]	; (8002438 <nbedtls_sha256_starts_ret+0x7c>)
        ctx->state[0] = 0xC1059ED8;
 80023f4:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
 80023f6:	60c3      	str	r3, [r0, #12]
        ctx->state[3] = 0xF70E5939;
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <nbedtls_sha256_starts_ret+0x80>)
        ctx->state[4] = 0xFFC00B31;
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <nbedtls_sha256_starts_ret+0x84>)
        ctx->state[2] = 0x3070DD17;
 80023fc:	6104      	str	r4, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 80023fe:	6142      	str	r2, [r0, #20]
        ctx->state[5] = 0x68581511;
 8002400:	4c10      	ldr	r4, [pc, #64]	; (8002444 <nbedtls_sha256_starts_ret+0x88>)
        ctx->state[6] = 0x64F98FA7;
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <nbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 8002404:	6183      	str	r3, [r0, #24]
        ctx->state[7] = 0xBEFA4FA4;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <nbedtls_sha256_starts_ret+0x90>)
        ctx->state[5] = 0x68581511;
 8002408:	61c4      	str	r4, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 800240a:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 800240c:	6243      	str	r3, [r0, #36]	; 0x24
 800240e:	e7eb      	b.n	80023e8 <nbedtls_sha256_starts_ret+0x2c>
 8002410:	6a09e667 	.word	0x6a09e667
 8002414:	bb67ae85 	.word	0xbb67ae85
 8002418:	3c6ef372 	.word	0x3c6ef372
 800241c:	a54ff53a 	.word	0xa54ff53a
 8002420:	510e527f 	.word	0x510e527f
 8002424:	9b05688c 	.word	0x9b05688c
 8002428:	1f83d9ab 	.word	0x1f83d9ab
 800242c:	5be0cd19 	.word	0x5be0cd19
 8002430:	c1059ed8 	.word	0xc1059ed8
 8002434:	367cd507 	.word	0x367cd507
 8002438:	3070dd17 	.word	0x3070dd17
 800243c:	f70e5939 	.word	0xf70e5939
 8002440:	ffc00b31 	.word	0xffc00b31
 8002444:	68581511 	.word	0x68581511
 8002448:	64f98fa7 	.word	0x64f98fa7
 800244c:	befa4fa4 	.word	0xbefa4fa4

08002450 <nbedtls_internal_sha256_process>:
        (h) = temp1 + temp2;                                 \
    } while (0)

int nbedtls_internal_sha256_process(nbedtls_sha256_context *ctx,
                                    const unsigned char data[64])
{
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	46de      	mov	lr, fp
 8002454:	4657      	mov	r7, sl
 8002456:	464e      	mov	r6, r9
 8002458:	4645      	mov	r5, r8
 800245a:	000c      	movs	r4, r1
 800245c:	0001      	movs	r1, r0
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	b0e9      	sub	sp, #420	; 0x1a4
 8002462:	2220      	movs	r2, #32
 8002464:	901f      	str	r0, [sp, #124]	; 0x7c
 8002466:	3108      	adds	r1, #8
 8002468:	a820      	add	r0, sp, #128	; 0x80
 800246a:	f001 f9c9 	bl	8003800 <memcpy>
        A[1] = A[0];
        A[0] = temp1;
    }
#else  /* MBEDTLS_SHA256_SMALLER */
    for (i = 0; i < 16; i++)
        GET_UINT32_BE(W[i], data, 4 * i);
 800246e:	7863      	ldrb	r3, [r4, #1]
 8002470:	7c22      	ldrb	r2, [r4, #16]
 8002472:	4699      	mov	r9, r3
 8002474:	4693      	mov	fp, r2
 8002476:	7d22      	ldrb	r2, [r4, #20]
 8002478:	7823      	ldrb	r3, [r4, #0]
 800247a:	4694      	mov	ip, r2
 800247c:	7ae2      	ldrb	r2, [r4, #11]
 800247e:	469a      	mov	sl, r3
 8002480:	4690      	mov	r8, r2
 8002482:	7b62      	ldrb	r2, [r4, #13]
 8002484:	7963      	ldrb	r3, [r4, #5]
 8002486:	9203      	str	r2, [sp, #12]
 8002488:	7ce2      	ldrb	r2, [r4, #19]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	9204      	str	r2, [sp, #16]
 800248e:	464a      	mov	r2, r9
 8002490:	0412      	lsls	r2, r2, #16
 8002492:	4691      	mov	r9, r2
 8002494:	4652      	mov	r2, sl
 8002496:	0612      	lsls	r2, r2, #24
 8002498:	4692      	mov	sl, r2
 800249a:	465a      	mov	r2, fp
 800249c:	0612      	lsls	r2, r2, #24
 800249e:	4693      	mov	fp, r2
 80024a0:	4662      	mov	r2, ip
 80024a2:	0612      	lsls	r2, r2, #24
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	4694      	mov	ip, r2
 80024a8:	4653      	mov	r3, sl
 80024aa:	464a      	mov	r2, r9
 80024ac:	431a      	orrs	r2, r3
 80024ae:	4692      	mov	sl, r2
 80024b0:	4642      	mov	r2, r8
 80024b2:	7a61      	ldrb	r1, [r4, #9]
 80024b4:	7a26      	ldrb	r6, [r4, #8]
 80024b6:	0409      	lsls	r1, r1, #16
 80024b8:	9102      	str	r1, [sp, #8]
 80024ba:	0636      	lsls	r6, r6, #24
 80024bc:	4659      	mov	r1, fp
 80024be:	4316      	orrs	r6, r2
 80024c0:	7de2      	ldrb	r2, [r4, #23]
 80024c2:	78e3      	ldrb	r3, [r4, #3]
 80024c4:	4690      	mov	r8, r2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	9b01      	ldr	r3, [sp, #4]
 80024ca:	9601      	str	r6, [sp, #4]
 80024cc:	9e04      	ldr	r6, [sp, #16]
 80024ce:	9a03      	ldr	r2, [sp, #12]
 80024d0:	430e      	orrs	r6, r1
 80024d2:	46b1      	mov	r9, r6
 80024d4:	78a6      	ldrb	r6, [r4, #2]
 80024d6:	4641      	mov	r1, r8
 80024d8:	46b3      	mov	fp, r6
 80024da:	4666      	mov	r6, ip
 80024dc:	430e      	orrs	r6, r1
 80024de:	9603      	str	r6, [sp, #12]
 80024e0:	4656      	mov	r6, sl
 80024e2:	79e1      	ldrb	r1, [r4, #7]
 80024e4:	7b20      	ldrb	r0, [r4, #12]
 80024e6:	468c      	mov	ip, r1
 80024e8:	9900      	ldr	r1, [sp, #0]
 80024ea:	7be5      	ldrb	r5, [r4, #15]
 80024ec:	430e      	orrs	r6, r1
 80024ee:	79a1      	ldrb	r1, [r4, #6]
 80024f0:	46b2      	mov	sl, r6
 80024f2:	4688      	mov	r8, r1
 80024f4:	4659      	mov	r1, fp
 80024f6:	0209      	lsls	r1, r1, #8
 80024f8:	468b      	mov	fp, r1
 80024fa:	4641      	mov	r1, r8
 80024fc:	4666      	mov	r6, ip
 80024fe:	7927      	ldrb	r7, [r4, #4]
 8002500:	0600      	lsls	r0, r0, #24
 8002502:	4328      	orrs	r0, r5
 8002504:	063f      	lsls	r7, r7, #24
 8002506:	0412      	lsls	r2, r2, #16
 8002508:	431f      	orrs	r7, r3
 800250a:	4302      	orrs	r2, r0
 800250c:	0209      	lsls	r1, r1, #8
 800250e:	4688      	mov	r8, r1
 8002510:	7c63      	ldrb	r3, [r4, #17]
 8002512:	7d65      	ldrb	r5, [r4, #21]
 8002514:	433e      	orrs	r6, r7
 8002516:	7aa7      	ldrb	r7, [r4, #10]
 8002518:	9902      	ldr	r1, [sp, #8]
 800251a:	9200      	str	r2, [sp, #0]
 800251c:	464a      	mov	r2, r9
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	431a      	orrs	r2, r3
 8002522:	7da3      	ldrb	r3, [r4, #22]
 8002524:	4691      	mov	r9, r2
 8002526:	9a03      	ldr	r2, [sp, #12]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	042d      	lsls	r5, r5, #16
 800252c:	46b4      	mov	ip, r6
 800252e:	4315      	orrs	r5, r2
 8002530:	9e01      	ldr	r6, [sp, #4]
 8002532:	4652      	mov	r2, sl
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	465b      	mov	r3, fp
 8002538:	431a      	orrs	r2, r3
 800253a:	921c      	str	r2, [sp, #112]	; 0x70
 800253c:	4643      	mov	r3, r8
 800253e:	4662      	mov	r2, ip
 8002540:	4331      	orrs	r1, r6
 8002542:	023f      	lsls	r7, r7, #8
 8002544:	4339      	orrs	r1, r7
 8002546:	7ba6      	ldrb	r6, [r4, #14]
 8002548:	9112      	str	r1, [sp, #72]	; 0x48
 800254a:	912a      	str	r1, [sp, #168]	; 0xa8
 800254c:	7e61      	ldrb	r1, [r4, #25]
 800254e:	9f00      	ldr	r7, [sp, #0]
 8002550:	4688      	mov	r8, r1
 8002552:	0236      	lsls	r6, r6, #8
 8002554:	2120      	movs	r1, #32
 8002556:	4337      	orrs	r7, r6
 8002558:	003e      	movs	r6, r7
 800255a:	9711      	str	r7, [sp, #68]	; 0x44
 800255c:	464f      	mov	r7, r9
 800255e:	431a      	orrs	r2, r3
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	7ca0      	ldrb	r0, [r4, #18]
 8002564:	431d      	orrs	r5, r3
 8002566:	7ee3      	ldrb	r3, [r4, #27]
 8002568:	920a      	str	r2, [sp, #40]	; 0x28
 800256a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	5c63      	ldrb	r3, [r4, r1]
 8002570:	3104      	adds	r1, #4
 8002572:	0200      	lsls	r0, r0, #8
 8002574:	9514      	str	r5, [sp, #80]	; 0x50
 8002576:	9228      	str	r2, [sp, #160]	; 0xa0
 8002578:	952d      	str	r5, [sp, #180]	; 0xb4
 800257a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800257c:	5c65      	ldrb	r5, [r4, r1]
 800257e:	3104      	adds	r1, #4
 8002580:	4307      	orrs	r7, r0
 8002582:	5c60      	ldrb	r0, [r4, r1]
 8002584:	3104      	adds	r1, #4
 8002586:	9229      	str	r2, [sp, #164]	; 0xa4
 8002588:	962b      	str	r6, [sp, #172]	; 0xac
 800258a:	7f22      	ldrb	r2, [r4, #28]
 800258c:	7e26      	ldrb	r6, [r4, #24]
 800258e:	9713      	str	r7, [sp, #76]	; 0x4c
 8002590:	972c      	str	r7, [sp, #176]	; 0xb0
 8002592:	5c67      	ldrb	r7, [r4, r1]
 8002594:	3104      	adds	r1, #4
 8002596:	5c61      	ldrb	r1, [r4, r1]
 8002598:	0612      	lsls	r2, r2, #24
 800259a:	910d      	str	r1, [sp, #52]	; 0x34
 800259c:	7fe1      	ldrb	r1, [r4, #31]
 800259e:	9201      	str	r2, [sp, #4]
 80025a0:	4689      	mov	r9, r1
 80025a2:	2123      	movs	r1, #35	; 0x23
 80025a4:	5c61      	ldrb	r1, [r4, r1]
 80025a6:	2222      	movs	r2, #34	; 0x22
 80025a8:	468c      	mov	ip, r1
 80025aa:	2121      	movs	r1, #33	; 0x21
 80025ac:	5c61      	ldrb	r1, [r4, r1]
 80025ae:	5ca2      	ldrb	r2, [r4, r2]
 80025b0:	468b      	mov	fp, r1
 80025b2:	2127      	movs	r1, #39	; 0x27
 80025b4:	5c61      	ldrb	r1, [r4, r1]
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	9103      	str	r1, [sp, #12]
 80025ba:	2125      	movs	r1, #37	; 0x25
 80025bc:	5c61      	ldrb	r1, [r4, r1]
 80025be:	2226      	movs	r2, #38	; 0x26
 80025c0:	9104      	str	r1, [sp, #16]
 80025c2:	212b      	movs	r1, #43	; 0x2b
 80025c4:	5c61      	ldrb	r1, [r4, r1]
 80025c6:	5ca2      	ldrb	r2, [r4, r2]
 80025c8:	9106      	str	r1, [sp, #24]
 80025ca:	2129      	movs	r1, #41	; 0x29
 80025cc:	5c61      	ldrb	r1, [r4, r1]
 80025ce:	9205      	str	r2, [sp, #20]
 80025d0:	9107      	str	r1, [sp, #28]
 80025d2:	212f      	movs	r1, #47	; 0x2f
 80025d4:	5c61      	ldrb	r1, [r4, r1]
 80025d6:	222a      	movs	r2, #42	; 0x2a
 80025d8:	9109      	str	r1, [sp, #36]	; 0x24
 80025da:	212d      	movs	r1, #45	; 0x2d
 80025dc:	5c61      	ldrb	r1, [r4, r1]
 80025de:	5ca2      	ldrb	r2, [r4, r2]
 80025e0:	910b      	str	r1, [sp, #44]	; 0x2c
 80025e2:	2133      	movs	r1, #51	; 0x33
 80025e4:	9208      	str	r2, [sp, #32]
 80025e6:	222e      	movs	r2, #46	; 0x2e
 80025e8:	5c61      	ldrb	r1, [r4, r1]
 80025ea:	5ca2      	ldrb	r2, [r4, r2]
 80025ec:	910e      	str	r1, [sp, #56]	; 0x38
 80025ee:	2131      	movs	r1, #49	; 0x31
 80025f0:	920c      	str	r2, [sp, #48]	; 0x30
 80025f2:	2232      	movs	r2, #50	; 0x32
 80025f4:	5c61      	ldrb	r1, [r4, r1]
 80025f6:	0636      	lsls	r6, r6, #24
 80025f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80025fa:	7f61      	ldrb	r1, [r4, #29]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	468a      	mov	sl, r1
 8002600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002602:	5ca2      	ldrb	r2, [r4, r2]
 8002604:	062d      	lsls	r5, r5, #24
 8002606:	920d      	str	r2, [sp, #52]	; 0x34
 8002608:	9a00      	ldr	r2, [sp, #0]
 800260a:	0600      	lsls	r0, r0, #24
 800260c:	4316      	orrs	r6, r2
 800260e:	4642      	mov	r2, r8
 8002610:	0412      	lsls	r2, r2, #16
 8002612:	4690      	mov	r8, r2
 8002614:	464a      	mov	r2, r9
 8002616:	9600      	str	r6, [sp, #0]
 8002618:	9e01      	ldr	r6, [sp, #4]
 800261a:	063f      	lsls	r7, r7, #24
 800261c:	4316      	orrs	r6, r2
 800261e:	0032      	movs	r2, r6
 8002620:	4656      	mov	r6, sl
 8002622:	0436      	lsls	r6, r6, #16
 8002624:	46b2      	mov	sl, r6
 8002626:	4666      	mov	r6, ip
 8002628:	4333      	orrs	r3, r6
 800262a:	465e      	mov	r6, fp
 800262c:	0436      	lsls	r6, r6, #16
 800262e:	46b4      	mov	ip, r6
 8002630:	9e03      	ldr	r6, [sp, #12]
 8002632:	0609      	lsls	r1, r1, #24
 8002634:	4335      	orrs	r5, r6
 8002636:	7ea6      	ldrb	r6, [r4, #26]
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	46b3      	mov	fp, r6
 800263c:	9e04      	ldr	r6, [sp, #16]
 800263e:	9b00      	ldr	r3, [sp, #0]
 8002640:	0436      	lsls	r6, r6, #16
 8002642:	9603      	str	r6, [sp, #12]
 8002644:	9e06      	ldr	r6, [sp, #24]
 8002646:	4330      	orrs	r0, r6
 8002648:	7fa6      	ldrb	r6, [r4, #30]
 800264a:	46b1      	mov	r9, r6
 800264c:	9e07      	ldr	r6, [sp, #28]
 800264e:	0436      	lsls	r6, r6, #16
 8002650:	9604      	str	r6, [sp, #16]
 8002652:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002654:	4337      	orrs	r7, r6
 8002656:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002658:	0436      	lsls	r6, r6, #16
 800265a:	9606      	str	r6, [sp, #24]
 800265c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800265e:	4331      	orrs	r1, r6
 8002660:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8002662:	0436      	lsls	r6, r6, #16
 8002664:	9607      	str	r6, [sp, #28]
 8002666:	4646      	mov	r6, r8
 8002668:	431e      	orrs	r6, r3
 800266a:	46b0      	mov	r8, r6
 800266c:	465e      	mov	r6, fp
 800266e:	0236      	lsls	r6, r6, #8
 8002670:	46b3      	mov	fp, r6
 8002672:	4656      	mov	r6, sl
 8002674:	4316      	orrs	r6, r2
 8002676:	46b2      	mov	sl, r6
 8002678:	464e      	mov	r6, r9
 800267a:	0236      	lsls	r6, r6, #8
 800267c:	46b1      	mov	r9, r6
 800267e:	4666      	mov	r6, ip
 8002680:	9b01      	ldr	r3, [sp, #4]
 8002682:	9a02      	ldr	r2, [sp, #8]
 8002684:	4333      	orrs	r3, r6
 8002686:	9e03      	ldr	r6, [sp, #12]
 8002688:	0212      	lsls	r2, r2, #8
 800268a:	432e      	orrs	r6, r5
 800268c:	9d05      	ldr	r5, [sp, #20]
 800268e:	9601      	str	r6, [sp, #4]
 8002690:	022d      	lsls	r5, r5, #8
 8002692:	46ac      	mov	ip, r5
 8002694:	9d08      	ldr	r5, [sp, #32]
 8002696:	9e04      	ldr	r6, [sp, #16]
 8002698:	022d      	lsls	r5, r5, #8
 800269a:	4330      	orrs	r0, r6
 800269c:	9502      	str	r5, [sp, #8]
 800269e:	9e06      	ldr	r6, [sp, #24]
 80026a0:	9200      	str	r2, [sp, #0]
 80026a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026a4:	4337      	orrs	r7, r6
 80026a6:	0216      	lsls	r6, r2, #8
 80026a8:	9a07      	ldr	r2, [sp, #28]
 80026aa:	465d      	mov	r5, fp
 80026ac:	4311      	orrs	r1, r2
 80026ae:	9103      	str	r1, [sp, #12]
 80026b0:	4641      	mov	r1, r8
 80026b2:	4329      	orrs	r1, r5
 80026b4:	9110      	str	r1, [sp, #64]	; 0x40
 80026b6:	464d      	mov	r5, r9
 80026b8:	4651      	mov	r1, sl
 80026ba:	4329      	orrs	r1, r5
 80026bc:	4665      	mov	r5, ip
 80026be:	910f      	str	r1, [sp, #60]	; 0x3c
 80026c0:	9900      	ldr	r1, [sp, #0]
 80026c2:	4337      	orrs	r7, r6
 80026c4:	4319      	orrs	r1, r3
 80026c6:	9b01      	ldr	r3, [sp, #4]
 80026c8:	003e      	movs	r6, r7
 80026ca:	432b      	orrs	r3, r5
 80026cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80026ce:	9d02      	ldr	r5, [sp, #8]
 80026d0:	9331      	str	r3, [sp, #196]	; 0xc4
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <nbedtls_internal_sha256_process+0x34c>)
 80026d4:	4328      	orrs	r0, r5
 80026d6:	9307      	str	r3, [sp, #28]
 80026d8:	469a      	mov	sl, r3
 80026da:	2334      	movs	r3, #52	; 0x34
 80026dc:	0005      	movs	r5, r0
 80026de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80026e0:	9717      	str	r7, [sp, #92]	; 0x5c
 80026e2:	9f03      	ldr	r7, [sp, #12]
 80026e4:	0212      	lsls	r2, r2, #8
 80026e6:	4317      	orrs	r7, r2
 80026e8:	aa28      	add	r2, sp, #160	; 0xa0
 80026ea:	9719      	str	r7, [sp, #100]	; 0x64
 80026ec:	9734      	str	r7, [sp, #208]	; 0xd0
 80026ee:	9206      	str	r2, [sp, #24]
 80026f0:	273f      	movs	r7, #63	; 0x3f
 80026f2:	2235      	movs	r2, #53	; 0x35
 80026f4:	901a      	str	r0, [sp, #104]	; 0x68
 80026f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80026f8:	9633      	str	r6, [sp, #204]	; 0xcc
 80026fa:	902e      	str	r0, [sp, #184]	; 0xb8
 80026fc:	5ce6      	ldrb	r6, [r4, r3]
 80026fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002700:	3304      	adds	r3, #4
 8002702:	9532      	str	r5, [sp, #200]	; 0xc8
 8002704:	5ce5      	ldrb	r5, [r4, r3]
 8002706:	3304      	adds	r3, #4
 8002708:	902f      	str	r0, [sp, #188]	; 0xbc
 800270a:	5ce0      	ldrb	r0, [r4, r3]
 800270c:	3b05      	subs	r3, #5
 800270e:	5ce3      	ldrb	r3, [r4, r3]
 8002710:	9115      	str	r1, [sp, #84]	; 0x54
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	9130      	str	r1, [sp, #192]	; 0xc0
 8002716:	5ca1      	ldrb	r1, [r4, r2]
 8002718:	5de7      	ldrb	r7, [r4, r7]
 800271a:	3206      	adds	r2, #6
 800271c:	46b8      	mov	r8, r7
 800271e:	273d      	movs	r7, #61	; 0x3d
 8002720:	5de3      	ldrb	r3, [r4, r7]
 8002722:	3f07      	subs	r7, #7
 8002724:	5ca2      	ldrb	r2, [r4, r2]
 8002726:	5de7      	ldrb	r7, [r4, r7]
 8002728:	4691      	mov	r9, r2
 800272a:	469b      	mov	fp, r3
 800272c:	46bc      	mov	ip, r7
 800272e:	233e      	movs	r3, #62	; 0x3e
 8002730:	2239      	movs	r2, #57	; 0x39
 8002732:	273a      	movs	r7, #58	; 0x3a
 8002734:	5ca2      	ldrb	r2, [r4, r2]
 8002736:	5de7      	ldrb	r7, [r4, r7]
 8002738:	5ce4      	ldrb	r4, [r4, r3]
 800273a:	9b00      	ldr	r3, [sp, #0]
 800273c:	0636      	lsls	r6, r6, #24
 800273e:	431e      	orrs	r6, r3
 8002740:	464b      	mov	r3, r9
 8002742:	062d      	lsls	r5, r5, #24
 8002744:	431d      	orrs	r5, r3
 8002746:	4643      	mov	r3, r8
 8002748:	0600      	lsls	r0, r0, #24
 800274a:	4318      	orrs	r0, r3
 800274c:	465b      	mov	r3, fp
 800274e:	0409      	lsls	r1, r1, #16
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	430e      	orrs	r6, r1
 8002754:	4661      	mov	r1, ip
 8002756:	4318      	orrs	r0, r3
 8002758:	0033      	movs	r3, r6
 800275a:	0412      	lsls	r2, r2, #16
 800275c:	0209      	lsls	r1, r1, #8
 800275e:	4315      	orrs	r5, r2
 8002760:	430b      	orrs	r3, r1
 8002762:	002a      	movs	r2, r5
 8002764:	0001      	movs	r1, r0
 8002766:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8002768:	023f      	lsls	r7, r7, #8
 800276a:	9005      	str	r0, [sp, #20]
 800276c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800276e:	0224      	lsls	r4, r4, #8
 8002770:	9001      	str	r0, [sp, #4]
 8002772:	9826      	ldr	r0, [sp, #152]	; 0x98
 8002774:	433a      	orrs	r2, r7
 8002776:	4680      	mov	r8, r0
 8002778:	9825      	ldr	r0, [sp, #148]	; 0x94
 800277a:	4321      	orrs	r1, r4
 800277c:	9003      	str	r0, [sp, #12]
 800277e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002780:	9318      	str	r3, [sp, #96]	; 0x60
 8002782:	9004      	str	r0, [sp, #16]
 8002784:	9822      	ldr	r0, [sp, #136]	; 0x88
 8002786:	920c      	str	r2, [sp, #48]	; 0x30
 8002788:	9002      	str	r0, [sp, #8]
 800278a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800278c:	910b      	str	r1, [sp, #44]	; 0x2c
 800278e:	4681      	mov	r9, r0
 8002790:	9820      	ldr	r0, [sp, #128]	; 0x80
 8002792:	9335      	str	r3, [sp, #212]	; 0xd4
 8002794:	9000      	str	r0, [sp, #0]
 8002796:	9236      	str	r2, [sp, #216]	; 0xd8
 8002798:	9137      	str	r1, [sp, #220]	; 0xdc
 800279a:	e001      	b.n	80027a0 <nbedtls_internal_sha256_process+0x350>
 800279c:	080040b0 	.word	0x080040b0

    for (i = 0; i < 16; i += 8)
    {
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i + 0], K[i + 0]);
 80027a0:	9b01      	ldr	r3, [sp, #4]
 80027a2:	9f00      	ldr	r7, [sp, #0]
 80027a4:	0019      	movs	r1, r3
 80027a6:	2206      	movs	r2, #6
 80027a8:	0018      	movs	r0, r3
 80027aa:	240b      	movs	r4, #11
 80027ac:	003e      	movs	r6, r7
 80027ae:	41d1      	rors	r1, r2
 80027b0:	3a04      	subs	r2, #4
 80027b2:	41d6      	rors	r6, r2
 80027b4:	41e0      	rors	r0, r4
 80027b6:	003a      	movs	r2, r7
 80027b8:	2519      	movs	r5, #25
 80027ba:	3402      	adds	r4, #2
 80027bc:	41e2      	rors	r2, r4
 80027be:	4048      	eors	r0, r1
 80027c0:	003c      	movs	r4, r7
 80027c2:	4651      	mov	r1, sl
 80027c4:	41eb      	rors	r3, r5
 80027c6:	3d03      	subs	r5, #3
 80027c8:	41ec      	rors	r4, r5
 80027ca:	680d      	ldr	r5, [r1, #0]
 80027cc:	9906      	ldr	r1, [sp, #24]
 80027ce:	4072      	eors	r2, r6
 80027d0:	4646      	mov	r6, r8
 80027d2:	4058      	eors	r0, r3
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	9903      	ldr	r1, [sp, #12]
 80027d8:	18eb      	adds	r3, r5, r3
 80027da:	4645      	mov	r5, r8
 80027dc:	18c0      	adds	r0, r0, r3
 80027de:	003b      	movs	r3, r7
 80027e0:	404e      	eors	r6, r1
 80027e2:	9901      	ldr	r1, [sp, #4]
 80027e4:	4062      	eors	r2, r4
 80027e6:	400e      	ands	r6, r1
 80027e8:	9904      	ldr	r1, [sp, #16]
 80027ea:	406e      	eors	r6, r5
 80027ec:	9d02      	ldr	r5, [sp, #8]
 80027ee:	430f      	orrs	r7, r1
 80027f0:	1980      	adds	r0, r0, r6
 80027f2:	9e05      	ldr	r6, [sp, #20]
 80027f4:	400b      	ands	r3, r1
 80027f6:	402f      	ands	r7, r5
 80027f8:	46b4      	mov	ip, r6
 80027fa:	431f      	orrs	r7, r3
 80027fc:	19d2      	adds	r2, r2, r7
 80027fe:	464f      	mov	r7, r9
 8002800:	4460      	add	r0, ip
 8002802:	183f      	adds	r7, r7, r0
 8002804:	4691      	mov	r9, r2
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 8002806:	003e      	movs	r6, r7
 8002808:	240b      	movs	r4, #11
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i + 0], K[i + 0]);
 800280a:	4481      	add	r9, r0
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 800280c:	41e6      	rors	r6, r4
 800280e:	0038      	movs	r0, r7
 8002810:	2206      	movs	r2, #6
 8002812:	0031      	movs	r1, r6
 8002814:	41d0      	rors	r0, r2
 8002816:	2602      	movs	r6, #2
 8002818:	464a      	mov	r2, r9
 800281a:	2519      	movs	r5, #25
 800281c:	41f2      	rors	r2, r6
 800281e:	003e      	movs	r6, r7
 8002820:	41ee      	rors	r6, r5
 8002822:	464d      	mov	r5, r9
 8002824:	3402      	adds	r4, #2
 8002826:	41e5      	rors	r5, r4
 8002828:	2316      	movs	r3, #22
 800282a:	464c      	mov	r4, r9
 800282c:	41dc      	rors	r4, r3
 800282e:	4653      	mov	r3, sl
 8002830:	4041      	eors	r1, r0
 8002832:	9806      	ldr	r0, [sp, #24]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	6840      	ldr	r0, [r0, #4]
 8002838:	406a      	eors	r2, r5
 800283a:	1818      	adds	r0, r3, r0
 800283c:	4440      	add	r0, r8
 800283e:	4684      	mov	ip, r0
 8002840:	9803      	ldr	r0, [sp, #12]
 8002842:	9d01      	ldr	r5, [sp, #4]
 8002844:	0003      	movs	r3, r0
 8002846:	406b      	eors	r3, r5
 8002848:	9d00      	ldr	r5, [sp, #0]
 800284a:	403b      	ands	r3, r7
 800284c:	4071      	eors	r1, r6
 800284e:	4043      	eors	r3, r0
 8002850:	002e      	movs	r6, r5
 8002852:	4648      	mov	r0, r9
 8002854:	4306      	orrs	r6, r0
 8002856:	9804      	ldr	r0, [sp, #16]
 8002858:	4463      	add	r3, ip
 800285a:	4006      	ands	r6, r0
 800285c:	0018      	movs	r0, r3
 800285e:	002b      	movs	r3, r5
 8002860:	1840      	adds	r0, r0, r1
 8002862:	464d      	mov	r5, r9
 8002864:	9902      	ldr	r1, [sp, #8]
 8002866:	402b      	ands	r3, r5
 8002868:	468b      	mov	fp, r1
 800286a:	431e      	orrs	r6, r3
 800286c:	4062      	eors	r2, r4
 800286e:	4483      	add	fp, r0
 8002870:	1992      	adds	r2, r2, r6
 8002872:	1810      	adds	r0, r2, r0
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 8002874:	4659      	mov	r1, fp
 8002876:	2206      	movs	r2, #6
 8002878:	2602      	movs	r6, #2
 800287a:	41d1      	rors	r1, r2
 800287c:	0002      	movs	r2, r0
 800287e:	465d      	mov	r5, fp
 8002880:	468c      	mov	ip, r1
 8002882:	240b      	movs	r4, #11
 8002884:	4659      	mov	r1, fp
 8002886:	41f2      	rors	r2, r6
 8002888:	3617      	adds	r6, #23
 800288a:	41f5      	rors	r5, r6
 800288c:	0006      	movs	r6, r0
 800288e:	41e1      	rors	r1, r4
 8002890:	3402      	adds	r4, #2
 8002892:	41e0      	rors	r0, r4
 8002894:	2316      	movs	r3, #22
 8002896:	0034      	movs	r4, r6
 8002898:	41dc      	rors	r4, r3
 800289a:	9405      	str	r4, [sp, #20]
 800289c:	4664      	mov	r4, ip
 800289e:	4653      	mov	r3, sl
 80028a0:	4061      	eors	r1, r4
 80028a2:	9c06      	ldr	r4, [sp, #24]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	68a4      	ldr	r4, [r4, #8]
 80028a8:	4698      	mov	r8, r3
 80028aa:	46a4      	mov	ip, r4
 80028ac:	9c03      	ldr	r4, [sp, #12]
 80028ae:	44e0      	add	r8, ip
 80028b0:	46a4      	mov	ip, r4
 80028b2:	9c01      	ldr	r4, [sp, #4]
 80028b4:	4042      	eors	r2, r0
 80028b6:	0023      	movs	r3, r4
 80028b8:	9202      	str	r2, [sp, #8]
 80028ba:	465a      	mov	r2, fp
 80028bc:	407b      	eors	r3, r7
 80028be:	4013      	ands	r3, r2
 80028c0:	4640      	mov	r0, r8
 80028c2:	0032      	movs	r2, r6
 80028c4:	4063      	eors	r3, r4
 80028c6:	464c      	mov	r4, r9
 80028c8:	4069      	eors	r1, r5
 80028ca:	464d      	mov	r5, r9
 80028cc:	4460      	add	r0, ip
 80028ce:	4014      	ands	r4, r2
 80028d0:	18c3      	adds	r3, r0, r3
 80028d2:	0020      	movs	r0, r4
 80028d4:	4335      	orrs	r5, r6
 80028d6:	9e00      	ldr	r6, [sp, #0]
 80028d8:	9c05      	ldr	r4, [sp, #20]
 80028da:	4035      	ands	r5, r6
 80028dc:	0016      	movs	r6, r2
 80028de:	9a02      	ldr	r2, [sp, #8]
 80028e0:	4305      	orrs	r5, r0
 80028e2:	9804      	ldr	r0, [sp, #16]
 80028e4:	4062      	eors	r2, r4
 80028e6:	1859      	adds	r1, r3, r1
 80028e8:	1955      	adds	r5, r2, r5
 80028ea:	1842      	adds	r2, r0, r1
 80028ec:	186b      	adds	r3, r5, r1
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 80028ee:	0015      	movs	r5, r2
 80028f0:	2106      	movs	r1, #6
 80028f2:	41cd      	rors	r5, r1
 80028f4:	200b      	movs	r0, #11
 80028f6:	46a8      	mov	r8, r5
 80028f8:	0015      	movs	r5, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	41c5      	rors	r5, r0
 80028fe:	3809      	subs	r0, #9
 8002900:	41c1      	rors	r1, r0
 8002902:	2419      	movs	r4, #25
 8002904:	0010      	movs	r0, r2
 8002906:	9204      	str	r2, [sp, #16]
 8002908:	41e0      	rors	r0, r4
 800290a:	220d      	movs	r2, #13
 800290c:	001c      	movs	r4, r3
 800290e:	41d4      	rors	r4, r2
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	46a4      	mov	ip, r4
 8002914:	001c      	movs	r4, r3
 8002916:	2316      	movs	r3, #22
 8002918:	4642      	mov	r2, r8
 800291a:	41dc      	rors	r4, r3
 800291c:	4653      	mov	r3, sl
 800291e:	9402      	str	r4, [sp, #8]
 8002920:	4055      	eors	r5, r2
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	9a06      	ldr	r2, [sp, #24]
 8002926:	465c      	mov	r4, fp
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4045      	eors	r5, r0
 800292c:	4690      	mov	r8, r2
 800292e:	4662      	mov	r2, ip
 8002930:	4051      	eors	r1, r2
 8002932:	9a01      	ldr	r2, [sp, #4]
 8002934:	4443      	add	r3, r8
 8002936:	4694      	mov	ip, r2
 8002938:	003a      	movs	r2, r7
 800293a:	4062      	eors	r2, r4
 800293c:	9c04      	ldr	r4, [sp, #16]
 800293e:	9601      	str	r6, [sp, #4]
 8002940:	4022      	ands	r2, r4
 8002942:	407a      	eors	r2, r7
 8002944:	4690      	mov	r8, r2
 8002946:	9c03      	ldr	r4, [sp, #12]
 8002948:	0030      	movs	r0, r6
 800294a:	4463      	add	r3, ip
 800294c:	4026      	ands	r6, r4
 800294e:	464a      	mov	r2, r9
 8002950:	4443      	add	r3, r8
 8002952:	46b0      	mov	r8, r6
 8002954:	9e02      	ldr	r6, [sp, #8]
 8002956:	4320      	orrs	r0, r4
 8002958:	4071      	eors	r1, r6
 800295a:	9e00      	ldr	r6, [sp, #0]
 800295c:	4010      	ands	r0, r2
 800295e:	4642      	mov	r2, r8
 8002960:	46b4      	mov	ip, r6
 8002962:	195b      	adds	r3, r3, r5
 8002964:	4310      	orrs	r0, r2
 8002966:	449c      	add	ip, r3
 8002968:	1809      	adds	r1, r1, r0
 800296a:	4666      	mov	r6, ip
 800296c:	4660      	mov	r0, ip
 800296e:	468c      	mov	ip, r1
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 8002970:	250b      	movs	r5, #11
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 8002972:	449c      	add	ip, r3
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 8002974:	0033      	movs	r3, r6
 8002976:	41eb      	rors	r3, r5
 8002978:	4665      	mov	r5, ip
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2302      	movs	r3, #2
 800297e:	0031      	movs	r1, r6
 8002980:	41dd      	rors	r5, r3
 8002982:	2419      	movs	r4, #25
 8002984:	2206      	movs	r2, #6
 8002986:	9502      	str	r5, [sp, #8]
 8002988:	41e1      	rors	r1, r4
 800298a:	4665      	mov	r5, ip
 800298c:	41d0      	rors	r0, r2
 800298e:	3207      	adds	r2, #7
 8002990:	41d5      	rors	r5, r2
 8002992:	000c      	movs	r4, r1
 8002994:	4662      	mov	r2, ip
 8002996:	2116      	movs	r1, #22
 8002998:	41ca      	rors	r2, r1
 800299a:	0011      	movs	r1, r2
 800299c:	4652      	mov	r2, sl
 800299e:	002b      	movs	r3, r5
 80029a0:	6915      	ldr	r5, [r2, #16]
 80029a2:	9a06      	ldr	r2, [sp, #24]
 80029a4:	6912      	ldr	r2, [r2, #16]
 80029a6:	4690      	mov	r8, r2
 80029a8:	4445      	add	r5, r8
 80029aa:	19ed      	adds	r5, r5, r7
 80029ac:	465f      	mov	r7, fp
 80029ae:	9a00      	ldr	r2, [sp, #0]
 80029b0:	9600      	str	r6, [sp, #0]
 80029b2:	4050      	eors	r0, r2
 80029b4:	9a04      	ldr	r2, [sp, #16]
 80029b6:	4060      	eors	r0, r4
 80029b8:	4057      	eors	r7, r2
 80029ba:	4037      	ands	r7, r6
 80029bc:	465e      	mov	r6, fp
 80029be:	9a03      	ldr	r2, [sp, #12]
 80029c0:	4077      	eors	r7, r6
 80029c2:	9e02      	ldr	r6, [sp, #8]
 80029c4:	19ef      	adds	r7, r5, r7
 80029c6:	4073      	eors	r3, r6
 80029c8:	0015      	movs	r5, r2
 80029ca:	4666      	mov	r6, ip
 80029cc:	4335      	orrs	r5, r6
 80029ce:	9e01      	ldr	r6, [sp, #4]
 80029d0:	0014      	movs	r4, r2
 80029d2:	4035      	ands	r5, r6
 80029d4:	4666      	mov	r6, ip
 80029d6:	4034      	ands	r4, r6
 80029d8:	183f      	adds	r7, r7, r0
 80029da:	404b      	eors	r3, r1
 80029dc:	432c      	orrs	r4, r5
 80029de:	191c      	adds	r4, r3, r4
 80029e0:	44b9      	add	r9, r7
 80029e2:	4649      	mov	r1, r9
 80029e4:	46a1      	mov	r9, r4
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80029e6:	0008      	movs	r0, r1
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 80029e8:	44b9      	add	r9, r7
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80029ea:	2706      	movs	r7, #6
 80029ec:	250b      	movs	r5, #11
 80029ee:	41f8      	rors	r0, r7
 80029f0:	2302      	movs	r3, #2
 80029f2:	000f      	movs	r7, r1
 80029f4:	464c      	mov	r4, r9
 80029f6:	41ef      	rors	r7, r5
 80029f8:	41dc      	rors	r4, r3
 80029fa:	220d      	movs	r2, #13
 80029fc:	464b      	mov	r3, r9
 80029fe:	46b8      	mov	r8, r7
 8002a00:	41d3      	rors	r3, r2
 8002a02:	2716      	movs	r7, #22
 8002a04:	464a      	mov	r2, r9
 8002a06:	41fa      	rors	r2, r7
 8002a08:	0017      	movs	r7, r2
 8002a0a:	4652      	mov	r2, sl
 8002a0c:	4646      	mov	r6, r8
 8002a0e:	350e      	adds	r5, #14
 8002a10:	9105      	str	r1, [sp, #20]
 8002a12:	41e9      	rors	r1, r5
 8002a14:	6955      	ldr	r5, [r2, #20]
 8002a16:	9a06      	ldr	r2, [sp, #24]
 8002a18:	4070      	eors	r0, r6
 8002a1a:	6952      	ldr	r2, [r2, #20]
 8002a1c:	9e04      	ldr	r6, [sp, #16]
 8002a1e:	4690      	mov	r8, r2
 8002a20:	9a00      	ldr	r2, [sp, #0]
 8002a22:	4063      	eors	r3, r4
 8002a24:	4072      	eors	r2, r6
 8002a26:	0016      	movs	r6, r2
 8002a28:	9a05      	ldr	r2, [sp, #20]
 8002a2a:	4664      	mov	r4, ip
 8002a2c:	4016      	ands	r6, r2
 8002a2e:	9a04      	ldr	r2, [sp, #16]
 8002a30:	4445      	add	r5, r8
 8002a32:	4056      	eors	r6, r2
 8002a34:	464a      	mov	r2, r9
 8002a36:	445d      	add	r5, fp
 8002a38:	4314      	orrs	r4, r2
 8002a3a:	4048      	eors	r0, r1
 8002a3c:	19ae      	adds	r6, r5, r6
 8002a3e:	4661      	mov	r1, ip
 8002a40:	0025      	movs	r5, r4
 8002a42:	9c03      	ldr	r4, [sp, #12]
 8002a44:	4011      	ands	r1, r2
 8002a46:	4025      	ands	r5, r4
 8002a48:	407b      	eors	r3, r7
 8002a4a:	4329      	orrs	r1, r5
 8002a4c:	1859      	adds	r1, r3, r1
 8002a4e:	9b01      	ldr	r3, [sp, #4]
 8002a50:	1836      	adds	r6, r6, r0
 8002a52:	4698      	mov	r8, r3
 8002a54:	44b0      	add	r8, r6
 8002a56:	1989      	adds	r1, r1, r6
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002a58:	230b      	movs	r3, #11
 8002a5a:	4646      	mov	r6, r8
 8002a5c:	41de      	rors	r6, r3
 8002a5e:	000b      	movs	r3, r1
 8002a60:	0032      	movs	r2, r6
 8002a62:	2602      	movs	r6, #2
 8002a64:	41f3      	rors	r3, r6
 8002a66:	250d      	movs	r5, #13
 8002a68:	001c      	movs	r4, r3
 8002a6a:	000b      	movs	r3, r1
 8002a6c:	41eb      	rors	r3, r5
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	4643      	mov	r3, r8
 8002a72:	3617      	adds	r6, #23
 8002a74:	41f3      	rors	r3, r6
 8002a76:	2706      	movs	r7, #6
 8002a78:	4640      	mov	r0, r8
 8002a7a:	000e      	movs	r6, r1
 8002a7c:	41f8      	rors	r0, r7
 8002a7e:	001f      	movs	r7, r3
 8002a80:	2316      	movs	r3, #22
 8002a82:	41de      	rors	r6, r3
 8002a84:	4653      	mov	r3, sl
 8002a86:	9102      	str	r1, [sp, #8]
 8002a88:	699d      	ldr	r5, [r3, #24]
 8002a8a:	9b06      	ldr	r3, [sp, #24]
 8002a8c:	4050      	eors	r0, r2
 8002a8e:	6999      	ldr	r1, [r3, #24]
 8002a90:	9a04      	ldr	r2, [sp, #16]
 8002a92:	1869      	adds	r1, r5, r1
 8002a94:	9d00      	ldr	r5, [sp, #0]
 8002a96:	4693      	mov	fp, r2
 8002a98:	002a      	movs	r2, r5
 8002a9a:	9b05      	ldr	r3, [sp, #20]
 8002a9c:	4459      	add	r1, fp
 8002a9e:	405a      	eors	r2, r3
 8002aa0:	4643      	mov	r3, r8
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	9b01      	ldr	r3, [sp, #4]
 8002aa6:	406a      	eors	r2, r5
 8002aa8:	464d      	mov	r5, r9
 8002aaa:	4063      	eors	r3, r4
 8002aac:	4664      	mov	r4, ip
 8002aae:	188a      	adds	r2, r1, r2
 8002ab0:	9902      	ldr	r1, [sp, #8]
 8002ab2:	4078      	eors	r0, r7
 8002ab4:	430d      	orrs	r5, r1
 8002ab6:	4025      	ands	r5, r4
 8002ab8:	9c03      	ldr	r4, [sp, #12]
 8002aba:	464f      	mov	r7, r9
 8002abc:	46a3      	mov	fp, r4
 8002abe:	1812      	adds	r2, r2, r0
 8002ac0:	4493      	add	fp, r2
 8002ac2:	400f      	ands	r7, r1
 8002ac4:	433d      	orrs	r5, r7
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002ac6:	4659      	mov	r1, fp
 8002ac8:	2706      	movs	r7, #6
 8002aca:	200b      	movs	r0, #11
 8002acc:	41f9      	rors	r1, r7
 8002ace:	465f      	mov	r7, fp
 8002ad0:	41c7      	rors	r7, r0
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002ad2:	4073      	eors	r3, r6
 8002ad4:	195b      	adds	r3, r3, r5
 8002ad6:	189a      	adds	r2, r3, r2
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002ad8:	0010      	movs	r0, r2
 8002ada:	003b      	movs	r3, r7
 8002adc:	0017      	movs	r7, r2
 8002ade:	2202      	movs	r2, #2
 8002ae0:	240d      	movs	r4, #13
 8002ae2:	41d7      	rors	r7, r2
 8002ae4:	0002      	movs	r2, r0
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002ae6:	465d      	mov	r5, fp
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002ae8:	41e2      	rors	r2, r4
 8002aea:	340c      	adds	r4, #12
 8002aec:	9503      	str	r5, [sp, #12]
 8002aee:	9004      	str	r0, [sp, #16]
 8002af0:	41e5      	rors	r5, r4
 8002af2:	0004      	movs	r4, r0
 8002af4:	2016      	movs	r0, #22
 8002af6:	41c4      	rors	r4, r0
 8002af8:	4650      	mov	r0, sl
 8002afa:	9401      	str	r4, [sp, #4]
 8002afc:	9c06      	ldr	r4, [sp, #24]
 8002afe:	69c0      	ldr	r0, [r0, #28]
 8002b00:	69e6      	ldr	r6, [r4, #28]
 8002b02:	4059      	eors	r1, r3
 8002b04:	1980      	adds	r0, r0, r6
 8002b06:	9b00      	ldr	r3, [sp, #0]
 8002b08:	9e05      	ldr	r6, [sp, #20]
 8002b0a:	469b      	mov	fp, r3
 8002b0c:	4644      	mov	r4, r8
 8002b0e:	0033      	movs	r3, r6
 8002b10:	4063      	eors	r3, r4
 8002b12:	9c03      	ldr	r4, [sp, #12]
 8002b14:	4458      	add	r0, fp
 8002b16:	4023      	ands	r3, r4
 8002b18:	4073      	eors	r3, r6
 8002b1a:	18c0      	adds	r0, r0, r3
 8002b1c:	9b02      	ldr	r3, [sp, #8]
 8002b1e:	464c      	mov	r4, r9
 8002b20:	001e      	movs	r6, r3
 8002b22:	407a      	eors	r2, r7
 8002b24:	9f04      	ldr	r7, [sp, #16]
 8002b26:	4069      	eors	r1, r5
 8002b28:	433e      	orrs	r6, r7
 8002b2a:	4026      	ands	r6, r4
 8002b2c:	403b      	ands	r3, r7
 8002b2e:	431e      	orrs	r6, r3
 8002b30:	2320      	movs	r3, #32
 8002b32:	469b      	mov	fp, r3
 8002b34:	9b06      	ldr	r3, [sp, #24]
 8002b36:	1841      	adds	r1, r0, r1
 8002b38:	445b      	add	r3, fp
 8002b3a:	448c      	add	ip, r1
 8002b3c:	9306      	str	r3, [sp, #24]
 8002b3e:	4663      	mov	r3, ip
 8002b40:	9c01      	ldr	r4, [sp, #4]
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	4062      	eors	r2, r4
 8002b46:	1992      	adds	r2, r2, r6
 8002b48:	1853      	adds	r3, r2, r1
 8002b4a:	9300      	str	r3, [sp, #0]
    for (i = 0; i < 16; i += 8)
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <nbedtls_internal_sha256_process+0x718>)
 8002b4e:	44da      	add	sl, fp
 8002b50:	459a      	cmp	sl, r3
 8002b52:	d000      	beq.n	8002b56 <nbedtls_internal_sha256_process+0x706>
 8002b54:	e624      	b.n	80027a0 <nbedtls_internal_sha256_process+0x350>
 8002b56:	9b07      	ldr	r3, [sp, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	33ff      	adds	r3, #255	; 0xff
 8002b5c:	931e      	str	r3, [sp, #120]	; 0x78
 8002b5e:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <nbedtls_internal_sha256_process+0x718>)
 8002b60:	469a      	mov	sl, r3
 8002b62:	ab38      	add	r3, sp, #224	; 0xe0
 8002b64:	469b      	mov	fp, r3
 8002b66:	e010      	b.n	8002b8a <nbedtls_internal_sha256_process+0x73a>
 8002b68:	080040f0 	.word	0x080040f0
 8002b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002b6e:	950b      	str	r5, [sp, #44]	; 0x2c
 8002b70:	930c      	str	r3, [sp, #48]	; 0x30
 8002b72:	9b07      	ldr	r3, [sp, #28]
 8002b74:	931b      	str	r3, [sp, #108]	; 0x6c
 8002b76:	9b06      	ldr	r3, [sp, #24]
 8002b78:	9315      	str	r3, [sp, #84]	; 0x54
 8002b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8002b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b80:	9317      	str	r3, [sp, #92]	; 0x5c
 8002b82:	9b08      	ldr	r3, [sp, #32]
 8002b84:	9319      	str	r3, [sp, #100]	; 0x64
 8002b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b88:	9318      	str	r3, [sp, #96]	; 0x60
    }

    for (i = 16; i < 64; i += 8)
    {
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b8c:	2311      	movs	r3, #17
 8002b8e:	0011      	movs	r1, r2
 8002b90:	41d9      	rors	r1, r3
 8002b92:	468c      	mov	ip, r1
 8002b94:	0011      	movs	r1, r2
 8002b96:	2213      	movs	r2, #19
 8002b98:	41d1      	rors	r1, r2
 8002b9a:	9a01      	ldr	r2, [sp, #4]
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	2006      	movs	r0, #6
 8002ba0:	0011      	movs	r1, r2
 8002ba2:	240b      	movs	r4, #11
 8002ba4:	41c1      	rors	r1, r0
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	41e0      	rors	r0, r4
 8002baa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002bac:	9007      	str	r0, [sp, #28]
 8002bae:	002e      	movs	r6, r5
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	2512      	movs	r5, #18
 8002bb4:	41ee      	rors	r6, r5
 8002bb6:	0037      	movs	r7, r6
 8002bb8:	0016      	movs	r6, r2
 8002bba:	3c04      	subs	r4, #4
 8002bbc:	41e0      	rors	r0, r4
 8002bbe:	3412      	adds	r4, #18
 8002bc0:	41e6      	rors	r6, r4
 8002bc2:	9c00      	ldr	r4, [sp, #0]
 8002bc4:	220d      	movs	r2, #13
 8002bc6:	0025      	movs	r5, r4
 8002bc8:	41d5      	rors	r5, r2
 8002bca:	0022      	movs	r2, r4
 8002bcc:	9508      	str	r5, [sp, #32]
 8002bce:	2502      	movs	r5, #2
 8002bd0:	41ea      	rors	r2, r5
 8002bd2:	3514      	adds	r5, #20
 8002bd4:	41ec      	rors	r4, r5
 8002bd6:	4665      	mov	r5, ip
 8002bd8:	406b      	eors	r3, r5
 8002bda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bdc:	4078      	eors	r0, r7
 8002bde:	0aad      	lsrs	r5, r5, #10
 8002be0:	9506      	str	r5, [sp, #24]
 8002be2:	9d07      	ldr	r5, [sp, #28]
 8002be4:	4069      	eors	r1, r5
 8002be6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002be8:	9107      	str	r1, [sp, #28]
 8002bea:	0029      	movs	r1, r5
 8002bec:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002bee:	46ac      	mov	ip, r5
 8002bf0:	4461      	add	r1, ip
 8002bf2:	000d      	movs	r5, r1
 8002bf4:	9906      	ldr	r1, [sp, #24]
 8002bf6:	46ac      	mov	ip, r5
 8002bf8:	404b      	eors	r3, r1
 8002bfa:	9907      	ldr	r1, [sp, #28]
 8002bfc:	9d01      	ldr	r5, [sp, #4]
 8002bfe:	404e      	eors	r6, r1
 8002c00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002c02:	4463      	add	r3, ip
 8002c04:	08cf      	lsrs	r7, r1, #3
 8002c06:	4078      	eors	r0, r7
 8002c08:	4647      	mov	r7, r8
 8002c0a:	9903      	ldr	r1, [sp, #12]
 8002c0c:	1818      	adds	r0, r3, r0
 8002c0e:	404f      	eors	r7, r1
 8002c10:	0039      	movs	r1, r7
 8002c12:	4647      	mov	r7, r8
 8002c14:	4029      	ands	r1, r5
 8002c16:	4079      	eors	r1, r7
 8002c18:	1871      	adds	r1, r6, r1
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002c1c:	2311      	movs	r3, #17
 8002c1e:	0037      	movs	r7, r6
 8002c20:	41df      	rors	r7, r3
 8002c22:	0033      	movs	r3, r6
 8002c24:	9707      	str	r7, [sp, #28]
 8002c26:	2713      	movs	r7, #19
 8002c28:	41fb      	rors	r3, r7
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c2a:	9d08      	ldr	r5, [sp, #32]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c2c:	930d      	str	r3, [sp, #52]	; 0x34
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c2e:	406a      	eors	r2, r5
 8002c30:	4653      	mov	r3, sl
 8002c32:	4054      	eors	r4, r2
 8002c34:	9a00      	ldr	r2, [sp, #0]
 8002c36:	4684      	mov	ip, r0
 8002c38:	0015      	movs	r5, r2
 8002c3a:	681e      	ldr	r6, [r3, #0]
 8002c3c:	9b04      	ldr	r3, [sp, #16]
 8002c3e:	9f02      	ldr	r7, [sp, #8]
 8002c40:	1989      	adds	r1, r1, r6
 8002c42:	9006      	str	r0, [sp, #24]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c44:	9e12      	ldr	r6, [sp, #72]	; 0x48
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c46:	9805      	ldr	r0, [sp, #20]
 8002c48:	431d      	orrs	r5, r3
 8002c4a:	403d      	ands	r5, r7
 8002c4c:	4461      	add	r1, ip
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c4e:	2707      	movs	r7, #7
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c50:	4684      	mov	ip, r0
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c52:	0030      	movs	r0, r6
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c54:	401a      	ands	r2, r3
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c56:	41f8      	rors	r0, r7
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c58:	432a      	orrs	r2, r5
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c5a:	0037      	movs	r7, r6
 8002c5c:	2512      	movs	r5, #18
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c5e:	464e      	mov	r6, r9
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c60:	41ef      	rors	r7, r5
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002c62:	4461      	add	r1, ip
 8002c64:	1873      	adds	r3, r6, r1
 8002c66:	18a4      	adds	r4, r4, r2
 8002c68:	1864      	adds	r4, r4, r1
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002c6a:	970e      	str	r7, [sp, #56]	; 0x38
 8002c6c:	2106      	movs	r1, #6
 8002c6e:	001f      	movs	r7, r3
 8002c70:	260b      	movs	r6, #11
 8002c72:	41cf      	rors	r7, r1
 8002c74:	0019      	movs	r1, r3
 8002c76:	0025      	movs	r5, r4
 8002c78:	220d      	movs	r2, #13
 8002c7a:	41f1      	rors	r1, r6
 8002c7c:	41d5      	rors	r5, r2
 8002c7e:	9008      	str	r0, [sp, #32]
 8002c80:	9716      	str	r7, [sp, #88]	; 0x58
 8002c82:	911c      	str	r1, [sp, #112]	; 0x70
 8002c84:	9309      	str	r3, [sp, #36]	; 0x24
 8002c86:	0019      	movs	r1, r3
 8002c88:	2316      	movs	r3, #22
 8002c8a:	002a      	movs	r2, r5
 8002c8c:	2519      	movs	r5, #25
 8002c8e:	9405      	str	r4, [sp, #20]
 8002c90:	0026      	movs	r6, r4
 8002c92:	41dc      	rors	r4, r3
 8002c94:	41e9      	rors	r1, r5
 8002c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002c9a:	941d      	str	r4, [sp, #116]	; 0x74
 8002c9c:	9c07      	ldr	r4, [sp, #28]
 8002c9e:	000d      	movs	r5, r1
 8002ca0:	4063      	eors	r3, r4
 8002ca2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002ca4:	0a84      	lsrs	r4, r0, #10
 8002ca6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ca8:	46a1      	mov	r9, r4
 8002caa:	468c      	mov	ip, r1
 8002cac:	0004      	movs	r4, r0
 8002cae:	4464      	add	r4, ip
 8002cb0:	46a4      	mov	ip, r4
 8002cb2:	464c      	mov	r4, r9
 8002cb4:	9808      	ldr	r0, [sp, #32]
 8002cb6:	4063      	eors	r3, r4
 8002cb8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002cba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002cbc:	4044      	eors	r4, r0
 8002cbe:	0020      	movs	r0, r4
 8002cc0:	08cc      	lsrs	r4, r1, #3
 8002cc2:	4463      	add	r3, ip
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002cc4:	9911      	ldr	r1, [sp, #68]	; 0x44
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002cc6:	4060      	eors	r0, r4
 8002cc8:	1818      	adds	r0, r3, r0
 8002cca:	9007      	str	r0, [sp, #28]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002ccc:	2307      	movs	r3, #7
 8002cce:	0008      	movs	r0, r1
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002cd0:	2702      	movs	r7, #2
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002cd2:	41d8      	rors	r0, r3
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002cd4:	41fe      	rors	r6, r7
 8002cd6:	9c16      	ldr	r4, [sp, #88]	; 0x58
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002cd8:	000b      	movs	r3, r1
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002cda:	991c      	ldr	r1, [sp, #112]	; 0x70
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002cdc:	4684      	mov	ip, r0
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002cde:	4061      	eors	r1, r4
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002ce0:	2012      	movs	r0, #18
 8002ce2:	4654      	mov	r4, sl
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002ce4:	4072      	eors	r2, r6
 8002ce6:	9e03      	ldr	r6, [sp, #12]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002ce8:	41c3      	rors	r3, r0
 8002cea:	6860      	ldr	r0, [r4, #4]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002cec:	0034      	movs	r4, r6
 8002cee:	4069      	eors	r1, r5
 8002cf0:	9d01      	ldr	r5, [sp, #4]
 8002cf2:	4440      	add	r0, r8
 8002cf4:	406c      	eors	r4, r5
 8002cf6:	0025      	movs	r5, r4
 8002cf8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002cfa:	4025      	ands	r5, r4
 8002cfc:	4075      	eors	r5, r6
 8002cfe:	9e07      	ldr	r6, [sp, #28]
 8002d00:	46b0      	mov	r8, r6
 8002d02:	4440      	add	r0, r8
 8002d04:	182d      	adds	r5, r5, r0
 8002d06:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002d08:	9e05      	ldr	r6, [sp, #20]
 8002d0a:	4042      	eors	r2, r0
 8002d0c:	9800      	ldr	r0, [sp, #0]
 8002d0e:	194d      	adds	r5, r1, r5
 8002d10:	0004      	movs	r4, r0
 8002d12:	4334      	orrs	r4, r6
 8002d14:	9e04      	ldr	r6, [sp, #16]
 8002d16:	9905      	ldr	r1, [sp, #20]
 8002d18:	4034      	ands	r4, r6
 8002d1a:	0006      	movs	r6, r0
 8002d1c:	400e      	ands	r6, r1
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d1e:	9906      	ldr	r1, [sp, #24]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002d20:	4334      	orrs	r4, r6
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d22:	0008      	movs	r0, r1
 8002d24:	2611      	movs	r6, #17
 8002d26:	41f0      	rors	r0, r6
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002d28:	1914      	adds	r4, r2, r4
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	2213      	movs	r2, #19
 8002d2e:	0008      	movs	r0, r1
 8002d30:	41d0      	rors	r0, r2
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002d32:	9a02      	ldr	r2, [sp, #8]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d34:	2106      	movs	r1, #6
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002d36:	4691      	mov	r9, r2
 8002d38:	44a9      	add	r9, r5
 8002d3a:	1962      	adds	r2, r4, r5
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d3c:	464c      	mov	r4, r9
 8002d3e:	41cc      	rors	r4, r1
 8002d40:	4649      	mov	r1, r9
 8002d42:	9408      	str	r4, [sp, #32]
 8002d44:	240b      	movs	r4, #11
 8002d46:	41e1      	rors	r1, r4
 8002d48:	0014      	movs	r4, r2
 8002d4a:	41fa      	rors	r2, r7
 8002d4c:	0016      	movs	r6, r2
 8002d4e:	0022      	movs	r2, r4
 8002d50:	370b      	adds	r7, #11
 8002d52:	41fa      	rors	r2, r7
 8002d54:	4667      	mov	r7, ip
 8002d56:	464d      	mov	r5, r9
 8002d58:	920d      	str	r2, [sp, #52]	; 0x34
 8002d5a:	407b      	eors	r3, r7
 8002d5c:	2219      	movs	r2, #25
 8002d5e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8002d60:	950a      	str	r5, [sp, #40]	; 0x28
 8002d62:	08ff      	lsrs	r7, r7, #3
 8002d64:	46b9      	mov	r9, r7
 8002d66:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8002d68:	41d5      	rors	r5, r2
 8002d6a:	3a03      	subs	r2, #3
 8002d6c:	9402      	str	r4, [sp, #8]
 8002d6e:	41d4      	rors	r4, r2
 8002d70:	003a      	movs	r2, r7
 8002d72:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8002d74:	46bc      	mov	ip, r7
 8002d76:	464f      	mov	r7, r9
 8002d78:	4462      	add	r2, ip
 8002d7a:	407b      	eors	r3, r7
 8002d7c:	4647      	mov	r7, r8
 8002d7e:	4694      	mov	ip, r2
 8002d80:	9a06      	ldr	r2, [sp, #24]
 8002d82:	4078      	eors	r0, r7
 8002d84:	0a97      	lsrs	r7, r2, #10
 8002d86:	4078      	eors	r0, r7
 8002d88:	4463      	add	r3, ip
 8002d8a:	181b      	adds	r3, r3, r0
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002d8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d8e:	001f      	movs	r7, r3
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002d90:	0002      	movs	r2, r0
 8002d92:	2307      	movs	r3, #7
 8002d94:	41da      	rors	r2, r3
 8002d96:	0003      	movs	r3, r0
 8002d98:	2012      	movs	r0, #18
 8002d9a:	4690      	mov	r8, r2
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002d9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002d9e:	41c3      	rors	r3, r0
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002da0:	4072      	eors	r2, r6
 8002da2:	4656      	mov	r6, sl
 8002da4:	9808      	ldr	r0, [sp, #32]
 8002da6:	4062      	eors	r2, r4
 8002da8:	4041      	eors	r1, r0
 8002daa:	4069      	eors	r1, r5
 8002dac:	9d03      	ldr	r5, [sp, #12]
 8002dae:	68b0      	ldr	r0, [r6, #8]
 8002db0:	46ac      	mov	ip, r5
 8002db2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002db4:	9d01      	ldr	r5, [sp, #4]
 8002db6:	4460      	add	r0, ip
 8002db8:	4075      	eors	r5, r6
 8002dba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002dbc:	46bc      	mov	ip, r7
 8002dbe:	4035      	ands	r5, r6
 8002dc0:	9e01      	ldr	r6, [sp, #4]
 8002dc2:	4460      	add	r0, ip
 8002dc4:	4075      	eors	r5, r6
 8002dc6:	9e05      	ldr	r6, [sp, #20]
 8002dc8:	970d      	str	r7, [sp, #52]	; 0x34
 8002dca:	0034      	movs	r4, r6
 8002dcc:	9f02      	ldr	r7, [sp, #8]
 8002dce:	182d      	adds	r5, r5, r0
 8002dd0:	9800      	ldr	r0, [sp, #0]
 8002dd2:	433c      	orrs	r4, r7
 8002dd4:	4004      	ands	r4, r0
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002dd6:	9807      	ldr	r0, [sp, #28]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002dd8:	194d      	adds	r5, r1, r5
 8002dda:	403e      	ands	r6, r7
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002ddc:	2111      	movs	r1, #17
 8002dde:	0007      	movs	r7, r0
 8002de0:	41cf      	rors	r7, r1
 8002de2:	3102      	adds	r1, #2
 8002de4:	41c8      	rors	r0, r1
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002de6:	9904      	ldr	r1, [sp, #16]
 8002de8:	4334      	orrs	r4, r6
 8002dea:	1914      	adds	r4, r2, r4
 8002dec:	194a      	adds	r2, r1, r5
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002dee:	0016      	movs	r6, r2
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002df0:	1965      	adds	r5, r4, r5
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002df2:	2406      	movs	r4, #6
 8002df4:	41e6      	rors	r6, r4
 8002df6:	9608      	str	r6, [sp, #32]
 8002df8:	0016      	movs	r6, r2
 8002dfa:	3405      	adds	r4, #5
 8002dfc:	41e6      	rors	r6, r4
 8002dfe:	46b9      	mov	r9, r7
 8002e00:	0029      	movs	r1, r5
 8002e02:	2702      	movs	r7, #2
 8002e04:	0034      	movs	r4, r6
 8002e06:	9204      	str	r2, [sp, #16]
 8002e08:	0016      	movs	r6, r2
 8002e0a:	2219      	movs	r2, #25
 8002e0c:	41f9      	rors	r1, r7
 8002e0e:	41d6      	rors	r6, r2
 8002e10:	3a03      	subs	r2, #3
 8002e12:	910e      	str	r1, [sp, #56]	; 0x38
 8002e14:	9503      	str	r5, [sp, #12]
 8002e16:	0029      	movs	r1, r5
 8002e18:	41d5      	rors	r5, r2
 8002e1a:	4642      	mov	r2, r8
 8002e1c:	4053      	eors	r3, r2
 8002e1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002e20:	370b      	adds	r7, #11
 8002e22:	08d2      	lsrs	r2, r2, #3
 8002e24:	41f9      	rors	r1, r7
 8002e26:	0017      	movs	r7, r2
 8002e28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002e2a:	407b      	eors	r3, r7
 8002e2c:	4694      	mov	ip, r2
 8002e2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002e30:	9f07      	ldr	r7, [sp, #28]
 8002e32:	4690      	mov	r8, r2
 8002e34:	464a      	mov	r2, r9
 8002e36:	44c4      	add	ip, r8
 8002e38:	4050      	eors	r0, r2
 8002e3a:	0aba      	lsrs	r2, r7, #10
 8002e3c:	4050      	eors	r0, r2
 8002e3e:	4463      	add	r3, ip
 8002e40:	181b      	adds	r3, r3, r0
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002e42:	9814      	ldr	r0, [sp, #80]	; 0x50
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002e44:	001f      	movs	r7, r3
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002e46:	0002      	movs	r2, r0
 8002e48:	2307      	movs	r3, #7
 8002e4a:	41da      	rors	r2, r3
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	2012      	movs	r0, #18
 8002e50:	41c3      	rors	r3, r0
 8002e52:	0018      	movs	r0, r3
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002e54:	9b08      	ldr	r3, [sp, #32]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002e56:	4691      	mov	r9, r2
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002e58:	405c      	eors	r4, r3
 8002e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e5c:	9a01      	ldr	r2, [sp, #4]
 8002e5e:	4059      	eors	r1, r3
 8002e60:	4653      	mov	r3, sl
 8002e62:	4694      	mov	ip, r2
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4074      	eors	r4, r6
 8002e68:	4463      	add	r3, ip
 8002e6a:	46bc      	mov	ip, r7
 8002e6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e70:	4463      	add	r3, ip
 8002e72:	4056      	eors	r6, r2
 8002e74:	9a04      	ldr	r2, [sp, #16]
 8002e76:	970e      	str	r7, [sp, #56]	; 0x38
 8002e78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002e7a:	4016      	ands	r6, r2
 8002e7c:	407e      	eors	r6, r7
 8002e7e:	9f02      	ldr	r7, [sp, #8]
 8002e80:	18f6      	adds	r6, r6, r3
 8002e82:	003b      	movs	r3, r7
 8002e84:	19a6      	adds	r6, r4, r6
 8002e86:	003c      	movs	r4, r7
 8002e88:	9a03      	ldr	r2, [sp, #12]
 8002e8a:	4069      	eors	r1, r5
 8002e8c:	9d05      	ldr	r5, [sp, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	402b      	ands	r3, r5
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002e92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002e94:	4014      	ands	r4, r2
 8002e96:	4323      	orrs	r3, r4
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002e98:	2211      	movs	r2, #17
 8002e9a:	002c      	movs	r4, r5
 8002e9c:	41d4      	rors	r4, r2
 8002e9e:	9401      	str	r4, [sp, #4]
 8002ea0:	2413      	movs	r4, #19
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002ea2:	18c9      	adds	r1, r1, r3
 8002ea4:	9b00      	ldr	r3, [sp, #0]
 8002ea6:	1989      	adds	r1, r1, r6
 8002ea8:	199a      	adds	r2, r3, r6
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002eaa:	41e5      	rors	r5, r4
 8002eac:	0013      	movs	r3, r2
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002eae:	000c      	movs	r4, r1
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002eb0:	2106      	movs	r1, #6
 8002eb2:	41cb      	rors	r3, r1
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	4698      	mov	r8, r3
 8002eb8:	230b      	movs	r3, #11
 8002eba:	41d9      	rors	r1, r3
 8002ebc:	0023      	movs	r3, r4
 8002ebe:	2702      	movs	r7, #2
 8002ec0:	001e      	movs	r6, r3
 8002ec2:	41fc      	rors	r4, r7
 8002ec4:	370b      	adds	r7, #11
 8002ec6:	41fe      	rors	r6, r7
 8002ec8:	9612      	str	r6, [sp, #72]	; 0x48
 8002eca:	2619      	movs	r6, #25
 8002ecc:	9200      	str	r2, [sp, #0]
 8002ece:	41f2      	rors	r2, r6
 8002ed0:	9211      	str	r2, [sp, #68]	; 0x44
 8002ed2:	464a      	mov	r2, r9
 8002ed4:	001e      	movs	r6, r3
 8002ed6:	4050      	eors	r0, r2
 8002ed8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002eda:	3709      	adds	r7, #9
 8002edc:	08d2      	lsrs	r2, r2, #3
 8002ede:	41fe      	rors	r6, r7
 8002ee0:	0017      	movs	r7, r2
 8002ee2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002ee4:	4078      	eors	r0, r7
 8002ee6:	4694      	mov	ip, r2
 8002ee8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002eea:	9f01      	ldr	r7, [sp, #4]
 8002eec:	4691      	mov	r9, r2
 8002eee:	407d      	eors	r5, r7
 8002ef0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002ef2:	44cc      	add	ip, r9
 8002ef4:	0aba      	lsrs	r2, r7, #10
 8002ef6:	4460      	add	r0, ip
 8002ef8:	4055      	eors	r5, r2
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002efa:	9a10      	ldr	r2, [sp, #64]	; 0x40
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002efc:	1945      	adds	r5, r0, r5
 8002efe:	9508      	str	r5, [sp, #32]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f00:	2007      	movs	r0, #7
 8002f02:	0015      	movs	r5, r2
 8002f04:	41c5      	rors	r5, r0
 8002f06:	300b      	adds	r0, #11
 8002f08:	41c2      	rors	r2, r0
 8002f0a:	9513      	str	r5, [sp, #76]	; 0x4c
 8002f0c:	0015      	movs	r5, r2
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002f0e:	4642      	mov	r2, r8
 8002f10:	4051      	eors	r1, r2
 8002f12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f16:	4054      	eors	r4, r2
 8002f18:	4652      	mov	r2, sl
 8002f1a:	4684      	mov	ip, r0
 8002f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002f1e:	6912      	ldr	r2, [r2, #16]
 8002f20:	0007      	movs	r7, r0
 8002f22:	4691      	mov	r9, r2
 8002f24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002f26:	44e1      	add	r9, ip
 8002f28:	4051      	eors	r1, r2
 8002f2a:	9a04      	ldr	r2, [sp, #16]
 8002f2c:	4074      	eors	r4, r6
 8002f2e:	4057      	eors	r7, r2
 8002f30:	9a00      	ldr	r2, [sp, #0]
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	4017      	ands	r7, r2
 8002f36:	9a08      	ldr	r2, [sp, #32]
 8002f38:	4047      	eors	r7, r0
 8002f3a:	4694      	mov	ip, r2
 8002f3c:	9a03      	ldr	r2, [sp, #12]
 8002f3e:	44e1      	add	r9, ip
 8002f40:	0010      	movs	r0, r2
 8002f42:	4318      	orrs	r0, r3
 8002f44:	444f      	add	r7, r9
 8002f46:	0006      	movs	r6, r0
 8002f48:	19c9      	adds	r1, r1, r7
 8002f4a:	0017      	movs	r7, r2
 8002f4c:	9802      	ldr	r0, [sp, #8]
 8002f4e:	401f      	ands	r7, r3
 8002f50:	4006      	ands	r6, r0
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f52:	980e      	ldr	r0, [sp, #56]	; 0x38
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002f54:	433e      	orrs	r6, r7
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f56:	2211      	movs	r2, #17
 8002f58:	0007      	movs	r7, r0
 8002f5a:	41d7      	rors	r7, r2
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002f5c:	19a4      	adds	r4, r4, r6
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f5e:	9711      	str	r7, [sp, #68]	; 0x44
 8002f60:	0006      	movs	r6, r0
 8002f62:	2713      	movs	r7, #19
 8002f64:	41fe      	rors	r6, r7
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002f66:	9f05      	ldr	r7, [sp, #20]
 8002f68:	46a1      	mov	r9, r4
 8002f6a:	46bc      	mov	ip, r7
 8002f6c:	448c      	add	ip, r1
 8002f6e:	4662      	mov	r2, ip
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f70:	2406      	movs	r4, #6
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002f72:	4489      	add	r9, r1
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f74:	4661      	mov	r1, ip
 8002f76:	464b      	mov	r3, r9
 8002f78:	41e2      	rors	r2, r4
 8002f7a:	3405      	adds	r4, #5
 8002f7c:	41e1      	rors	r1, r4
 8002f7e:	3c09      	subs	r4, #9
 8002f80:	41e3      	rors	r3, r4
 8002f82:	200d      	movs	r0, #13
 8002f84:	001c      	movs	r4, r3
 8002f86:	464b      	mov	r3, r9
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002f88:	4667      	mov	r7, ip
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002f8a:	41c3      	rors	r3, r0
 8002f8c:	300c      	adds	r0, #12
 8002f8e:	9705      	str	r7, [sp, #20]
 8002f90:	41c7      	rors	r7, r0
 8002f92:	4698      	mov	r8, r3
 8002f94:	9712      	str	r7, [sp, #72]	; 0x48
 8002f96:	464b      	mov	r3, r9
 8002f98:	2716      	movs	r7, #22
 8002f9a:	41fb      	rors	r3, r7
 8002f9c:	001f      	movs	r7, r3
 8002f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002fa0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002fa8:	4068      	eors	r0, r5
 8002faa:	001d      	movs	r5, r3
 8002fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fae:	4051      	eors	r1, r2
 8002fb0:	469c      	mov	ip, r3
 8002fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb4:	4465      	add	r5, ip
 8002fb6:	4058      	eors	r0, r3
 8002fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fba:	1940      	adds	r0, r0, r5
 8002fbc:	405e      	eors	r6, r3
 8002fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fc2:	0a9d      	lsrs	r5, r3, #10
 8002fc4:	406e      	eors	r6, r5
 8002fc6:	1983      	adds	r3, r0, r6
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8002fc8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8002fca:	2507      	movs	r5, #7
 8002fcc:	0030      	movs	r0, r6
 8002fce:	41e8      	rors	r0, r5
 8002fd0:	0035      	movs	r5, r6
 8002fd2:	2612      	movs	r6, #18
 8002fd4:	41f5      	rors	r5, r6
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002fd6:	4646      	mov	r6, r8
 8002fd8:	4074      	eors	r4, r6
 8002fda:	4656      	mov	r6, sl
 8002fdc:	4694      	mov	ip, r2
 8002fde:	6976      	ldr	r6, [r6, #20]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8002fe0:	9511      	str	r5, [sp, #68]	; 0x44
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002fe2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002fe4:	44b4      	add	ip, r6
 8002fe6:	4069      	eors	r1, r5
 8002fe8:	9e04      	ldr	r6, [sp, #16]
 8002fea:	9d00      	ldr	r5, [sp, #0]
 8002fec:	9a05      	ldr	r2, [sp, #20]
 8002fee:	4698      	mov	r8, r3
 8002ff0:	406e      	eors	r6, r5
 8002ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff4:	9d01      	ldr	r5, [sp, #4]
 8002ff6:	9b04      	ldr	r3, [sp, #16]
 8002ff8:	4016      	ands	r6, r2
 8002ffa:	405e      	eors	r6, r3
 8002ffc:	464a      	mov	r2, r9
 8002ffe:	002b      	movs	r3, r5
 8003000:	44c4      	add	ip, r8
 8003002:	4313      	orrs	r3, r2
 8003004:	4466      	add	r6, ip
 8003006:	407c      	eors	r4, r7
 8003008:	001f      	movs	r7, r3
 800300a:	1989      	adds	r1, r1, r6
 800300c:	002e      	movs	r6, r5
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	4016      	ands	r6, r2
 8003012:	401f      	ands	r7, r3
 8003014:	002b      	movs	r3, r5
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8003016:	9d08      	ldr	r5, [sp, #32]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8003018:	4337      	orrs	r7, r6
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 800301a:	002a      	movs	r2, r5
 800301c:	2611      	movs	r6, #17
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800301e:	19e4      	adds	r4, r4, r7
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8003020:	41f2      	rors	r2, r6
 8003022:	2713      	movs	r7, #19
 8003024:	002e      	movs	r6, r5
 8003026:	41fe      	rors	r6, r7
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8003028:	9f02      	ldr	r7, [sp, #8]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 800302a:	2502      	movs	r5, #2
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800302c:	46b8      	mov	r8, r7
 800302e:	4488      	add	r8, r1
 8003030:	1867      	adds	r7, r4, r1
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8003032:	2406      	movs	r4, #6
 8003034:	4641      	mov	r1, r8
 8003036:	41e1      	rors	r1, r4
 8003038:	4644      	mov	r4, r8
 800303a:	9112      	str	r1, [sp, #72]	; 0x48
 800303c:	210b      	movs	r1, #11
 800303e:	41cc      	rors	r4, r1
 8003040:	0021      	movs	r1, r4
 8003042:	003c      	movs	r4, r7
 8003044:	41ec      	rors	r4, r5
 8003046:	9414      	str	r4, [sp, #80]	; 0x50
 8003048:	003c      	movs	r4, r7
 800304a:	920a      	str	r2, [sp, #40]	; 0x28
 800304c:	4642      	mov	r2, r8
 800304e:	350b      	adds	r5, #11
 8003050:	41ec      	rors	r4, r5
 8003052:	350c      	adds	r5, #12
 8003054:	41ea      	rors	r2, r5
 8003056:	9213      	str	r2, [sp, #76]	; 0x4c
 8003058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800305a:	3d03      	subs	r5, #3
 800305c:	4050      	eors	r0, r2
 800305e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003060:	9702      	str	r7, [sp, #8]
 8003062:	41ef      	rors	r7, r5
 8003064:	08d5      	lsrs	r5, r2, #3
 8003066:	9501      	str	r5, [sp, #4]
 8003068:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800306a:	0015      	movs	r5, r2
 800306c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800306e:	4694      	mov	ip, r2
 8003070:	9a01      	ldr	r2, [sp, #4]
 8003072:	4465      	add	r5, ip
 8003074:	4050      	eors	r0, r2
 8003076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003078:	1940      	adds	r0, r0, r5
 800307a:	4056      	eors	r6, r2
 800307c:	9a08      	ldr	r2, [sp, #32]
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	0a95      	lsrs	r5, r2, #10
 8003082:	406e      	eors	r6, r5
 8003084:	1980      	adds	r0, r0, r6
 8003086:	4656      	mov	r6, sl
 8003088:	9016      	str	r0, [sp, #88]	; 0x58
 800308a:	69b0      	ldr	r0, [r6, #24]
 800308c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800308e:	9d00      	ldr	r5, [sp, #0]
 8003090:	4071      	eors	r1, r6
 8003092:	9e04      	ldr	r6, [sp, #16]
 8003094:	9a05      	ldr	r2, [sp, #20]
 8003096:	46b4      	mov	ip, r6
 8003098:	4646      	mov	r6, r8
 800309a:	406a      	eors	r2, r5
 800309c:	4032      	ands	r2, r6
 800309e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80030a0:	4460      	add	r0, ip
 80030a2:	46b4      	mov	ip, r6
 80030a4:	464e      	mov	r6, r9
 80030a6:	4460      	add	r0, ip
 80030a8:	406a      	eors	r2, r5
 80030aa:	1812      	adds	r2, r2, r0
 80030ac:	9802      	ldr	r0, [sp, #8]
 80030ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80030b0:	4306      	orrs	r6, r0
 80030b2:	406c      	eors	r4, r5
 80030b4:	0035      	movs	r5, r6
 80030b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80030b8:	401d      	ands	r5, r3
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80030bc:	2007      	movs	r0, #7
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80030be:	4071      	eors	r1, r6
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030c0:	001e      	movs	r6, r3
 80030c2:	41c6      	rors	r6, r0
 80030c4:	9604      	str	r6, [sp, #16]
 80030c6:	001e      	movs	r6, r3
 80030c8:	300b      	adds	r0, #11
 80030ca:	41c6      	rors	r6, r0
 80030cc:	0030      	movs	r0, r6
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80030ce:	464e      	mov	r6, r9
 80030d0:	1889      	adds	r1, r1, r2
 80030d2:	407c      	eors	r4, r7
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80030d6:	9f02      	ldr	r7, [sp, #8]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030d8:	0013      	movs	r3, r2
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80030da:	403e      	ands	r6, r7
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030dc:	2711      	movs	r7, #17
 80030de:	41fb      	rors	r3, r7
 80030e0:	930a      	str	r3, [sp, #40]	; 0x28
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80030e2:	9b03      	ldr	r3, [sp, #12]
 80030e4:	4335      	orrs	r5, r6
 80030e6:	469c      	mov	ip, r3
 80030e8:	1964      	adds	r4, r4, r5
 80030ea:	1864      	adds	r4, r4, r1
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030ec:	0015      	movs	r5, r2
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80030ee:	448c      	add	ip, r1
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80030f0:	0021      	movs	r1, r4
 80030f2:	3702      	adds	r7, #2
 80030f4:	41fd      	rors	r5, r7
 80030f6:	3f06      	subs	r7, #6
 80030f8:	41f9      	rors	r1, r7
 80030fa:	2302      	movs	r3, #2
 80030fc:	0027      	movs	r7, r4
 80030fe:	41df      	rors	r7, r3
 8003100:	9712      	str	r7, [sp, #72]	; 0x48
 8003102:	2716      	movs	r7, #22
 8003104:	0023      	movs	r3, r4
 8003106:	41fc      	rors	r4, r7
 8003108:	4667      	mov	r7, ip
 800310a:	9413      	str	r4, [sp, #76]	; 0x4c
 800310c:	2406      	movs	r4, #6
 800310e:	41e7      	rors	r7, r4
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8003110:	4662      	mov	r2, ip
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 8003112:	9710      	str	r7, [sp, #64]	; 0x40
 8003114:	4667      	mov	r7, ip
 8003116:	3405      	adds	r4, #5
 8003118:	41e2      	rors	r2, r4
 800311a:	340e      	adds	r4, #14
 800311c:	9703      	str	r7, [sp, #12]
 800311e:	41e7      	rors	r7, r4
 8003120:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003122:	9e04      	ldr	r6, [sp, #16]
 8003124:	4065      	eors	r5, r4
 8003126:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003128:	4070      	eors	r0, r6
 800312a:	46a4      	mov	ip, r4
 800312c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800312e:	9c06      	ldr	r4, [sp, #24]
 8003130:	08f6      	lsrs	r6, r6, #3
 8003132:	4070      	eors	r0, r6
 8003134:	4656      	mov	r6, sl
 8003136:	4460      	add	r0, ip
 8003138:	46a4      	mov	ip, r4
 800313a:	9711      	str	r7, [sp, #68]	; 0x44
 800313c:	69f6      	ldr	r6, [r6, #28]
 800313e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003140:	0034      	movs	r4, r6
 8003142:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003144:	4460      	add	r0, ip
 8003146:	404e      	eors	r6, r1
 8003148:	960a      	str	r6, [sp, #40]	; 0x28
 800314a:	0abe      	lsrs	r6, r7, #10
 800314c:	9f05      	ldr	r7, [sp, #20]
 800314e:	4075      	eors	r5, r6
 8003150:	1945      	adds	r5, r0, r5
 8003152:	4646      	mov	r6, r8
 8003154:	0038      	movs	r0, r7
 8003156:	4070      	eors	r0, r6
 8003158:	464e      	mov	r6, r9
 800315a:	46a4      	mov	ip, r4
 800315c:	9c03      	ldr	r4, [sp, #12]
 800315e:	9304      	str	r3, [sp, #16]
 8003160:	4020      	ands	r0, r4
 8003162:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003164:	9902      	ldr	r1, [sp, #8]
 8003166:	4062      	eors	r2, r4
 8003168:	4078      	eors	r0, r7
 800316a:	9c02      	ldr	r4, [sp, #8]
 800316c:	9f04      	ldr	r7, [sp, #16]
 800316e:	4319      	orrs	r1, r3
 8003170:	403c      	ands	r4, r7
 8003172:	4031      	ands	r1, r6
 8003174:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8003176:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003178:	9b00      	ldr	r3, [sp, #0]
 800317a:	4077      	eors	r7, r6
 800317c:	2620      	movs	r6, #32
 800317e:	4463      	add	r3, ip
 8003180:	46b4      	mov	ip, r6
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8003182:	465e      	mov	r6, fp
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 8003184:	4321      	orrs	r1, r4
 8003186:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8003188:	195b      	adds	r3, r3, r5
 800318a:	18c0      	adds	r0, r0, r3
 800318c:	4062      	eors	r2, r4
 800318e:	1812      	adds	r2, r2, r0
 8003190:	981b      	ldr	r0, [sp, #108]	; 0x6c
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8003192:	9c06      	ldr	r4, [sp, #24]
 8003194:	900a      	str	r0, [sp, #40]	; 0x28
 8003196:	981a      	ldr	r0, [sp, #104]	; 0x68
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 8003198:	1879      	adds	r1, r7, r1
 800319a:	9012      	str	r0, [sp, #72]	; 0x48
 800319c:	9817      	ldr	r0, [sp, #92]	; 0x5c
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 800319e:	9f07      	ldr	r7, [sp, #28]
 80031a0:	9011      	str	r0, [sp, #68]	; 0x44
 80031a2:	9819      	ldr	r0, [sp, #100]	; 0x64
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 80031a4:	6034      	str	r4, [r6, #0]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80031a6:	6077      	str	r7, [r6, #4]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80031a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80031aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80031ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80031ae:	9818      	ldr	r0, [sp, #96]	; 0x60
 80031b0:	60b7      	str	r7, [r6, #8]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80031b2:	60f4      	str	r4, [r6, #12]
 80031b4:	9014      	str	r0, [sp, #80]	; 0x50
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80031b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80031b8:	44e2      	add	sl, ip
 80031ba:	61b3      	str	r3, [r6, #24]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80031bc:	9b01      	ldr	r3, [sp, #4]
 80031be:	1889      	adds	r1, r1, r2
 80031c0:	469c      	mov	ip, r3
 80031c2:	4494      	add	ip, r2
 80031c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031c6:	9100      	str	r1, [sp, #0]
 80031c8:	920f      	str	r2, [sp, #60]	; 0x3c
 80031ca:	2220      	movs	r2, #32
 80031cc:	4661      	mov	r1, ip
 80031ce:	4694      	mov	ip, r2
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80031d0:	9c08      	ldr	r4, [sp, #32]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80031d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80031d4:	6134      	str	r4, [r6, #16]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80031d6:	6177      	str	r7, [r6, #20]
 80031d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80031da:	61f5      	str	r5, [r6, #28]
    for (i = 16; i < 64; i += 8)
 80031dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80031de:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80031e0:	9410      	str	r4, [sp, #64]	; 0x40
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80031e2:	9101      	str	r1, [sp, #4]
 80031e4:	44e3      	add	fp, ip
 80031e6:	961c      	str	r6, [sp, #112]	; 0x70
    for (i = 16; i < 64; i += 8)
 80031e8:	459a      	cmp	sl, r3
 80031ea:	d000      	beq.n	80031ee <nbedtls_internal_sha256_process+0xd9e>
 80031ec:	e4be      	b.n	8002b6c <nbedtls_internal_sha256_process+0x71c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for (i = 0; i < 8; i++)
        ctx->state[i] += A[i];
 80031ee:	9800      	ldr	r0, [sp, #0]
 80031f0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80031f2:	4684      	mov	ip, r0
 80031f4:	688b      	ldr	r3, [r1, #8]
 80031f6:	9804      	ldr	r0, [sp, #16]
 80031f8:	4463      	add	r3, ip
 80031fa:	4684      	mov	ip, r0
 80031fc:	68ca      	ldr	r2, [r1, #12]
 80031fe:	690c      	ldr	r4, [r1, #16]
 8003200:	4462      	add	r2, ip
 8003202:	4692      	mov	sl, r2
 8003204:	9a02      	ldr	r2, [sp, #8]
 8003206:	698e      	ldr	r6, [r1, #24]
 8003208:	4694      	mov	ip, r2
 800320a:	9a01      	ldr	r2, [sp, #4]
 800320c:	4464      	add	r4, ip
 800320e:	4694      	mov	ip, r2
 8003210:	9a03      	ldr	r2, [sp, #12]
 8003212:	4466      	add	r6, ip
 8003214:	4694      	mov	ip, r2
 8003216:	69cd      	ldr	r5, [r1, #28]
 8003218:	9a05      	ldr	r2, [sp, #20]
 800321a:	6a08      	ldr	r0, [r1, #32]
 800321c:	4465      	add	r5, ip
 800321e:	4694      	mov	ip, r2
 8003220:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003222:	4440      	add	r0, r8
 8003224:	694f      	ldr	r7, [r1, #20]
 8003226:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003228:	6093      	str	r3, [r2, #8]
 800322a:	6210      	str	r0, [r2, #32]
 800322c:	4653      	mov	r3, sl

    return (0);
}
 800322e:	2000      	movs	r0, #0
        ctx->state[i] += A[i];
 8003230:	444f      	add	r7, r9
 8003232:	4461      	add	r1, ip
 8003234:	60d3      	str	r3, [r2, #12]
 8003236:	6114      	str	r4, [r2, #16]
 8003238:	6157      	str	r7, [r2, #20]
 800323a:	6196      	str	r6, [r2, #24]
 800323c:	61d5      	str	r5, [r2, #28]
 800323e:	6251      	str	r1, [r2, #36]	; 0x24
}
 8003240:	b069      	add	sp, #420	; 0x1a4
 8003242:	bcf0      	pop	{r4, r5, r6, r7}
 8003244:	46bb      	mov	fp, r7
 8003246:	46b2      	mov	sl, r6
 8003248:	46a9      	mov	r9, r5
 800324a:	46a0      	mov	r8, r4
 800324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)

08003250 <nbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int nbedtls_sha256_update_ret(nbedtls_sha256_context *ctx,
                              const unsigned char *input,
                              size_t ilen)
{
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	4647      	mov	r7, r8
 8003254:	46ce      	mov	lr, r9
 8003256:	000e      	movs	r6, r1
 8003258:	b580      	push	{r7, lr}
 800325a:	0014      	movs	r4, r2
 800325c:	0007      	movs	r7, r0
    uint32_t left;

    SHA256_VALIDATE_RET(ctx != NULL);
    SHA256_VALIDATE_RET(ilen == 0 || input != NULL);

    if (ilen == 0)
 800325e:	2a00      	cmp	r2, #0
 8003260:	d03f      	beq.n	80032e2 <nbedtls_sha256_update_ret+0x92>
        return (0);

    left = ctx->total[0] & 0x3F;
 8003262:	253f      	movs	r5, #63	; 0x3f
 8003264:	6800      	ldr	r0, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += (uint32_t)ilen;
 8003266:	1883      	adds	r3, r0, r2
 8003268:	603b      	str	r3, [r7, #0]
    left = ctx->total[0] & 0x3F;
 800326a:	4005      	ands	r5, r0
    ctx->total[0] &= 0xFFFFFFFF;

    if (ctx->total[0] < (uint32_t)ilen)
 800326c:	4293      	cmp	r3, r2
 800326e:	d202      	bcs.n	8003276 <nbedtls_sha256_update_ret+0x26>
        ctx->total[1]++;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	607b      	str	r3, [r7, #4]

    if (left && ilen >= fill)
 8003276:	2d00      	cmp	r5, #0
 8003278:	d110      	bne.n	800329c <nbedtls_sha256_update_ret+0x4c>
        input += fill;
        ilen -= fill;
        left = 0;
    }

    while (ilen >= 64)
 800327a:	2c3f      	cmp	r4, #63	; 0x3f
 800327c:	d803      	bhi.n	8003286 <nbedtls_sha256_update_ret+0x36>
 800327e:	e029      	b.n	80032d4 <nbedtls_sha256_update_ret+0x84>
    {
        if ((ret = nbedtls_internal_sha256_process(ctx, input)) != 0)
            return (ret);

        input += 64;
 8003280:	3640      	adds	r6, #64	; 0x40
    while (ilen >= 64)
 8003282:	2c3f      	cmp	r4, #63	; 0x3f
 8003284:	d924      	bls.n	80032d0 <nbedtls_sha256_update_ret+0x80>
        if ((ret = nbedtls_internal_sha256_process(ctx, input)) != 0)
 8003286:	0031      	movs	r1, r6
 8003288:	0038      	movs	r0, r7
 800328a:	f7ff f8e1 	bl	8002450 <nbedtls_internal_sha256_process>
        ilen -= 64;
 800328e:	3c40      	subs	r4, #64	; 0x40
        if ((ret = nbedtls_internal_sha256_process(ctx, input)) != 0)
 8003290:	2800      	cmp	r0, #0
 8003292:	d0f5      	beq.n	8003280 <nbedtls_sha256_update_ret+0x30>

    if (ilen > 0)
        memcpy((void *)(ctx->buffer + left), input, ilen);

    return (0);
}
 8003294:	bcc0      	pop	{r6, r7}
 8003296:	46b9      	mov	r9, r7
 8003298:	46b0      	mov	r8, r6
 800329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fill = 64 - left;
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	1b5b      	subs	r3, r3, r5
 80032a0:	4698      	mov	r8, r3
    if (left && ilen >= fill)
 80032a2:	429c      	cmp	r4, r3
 80032a4:	d3e9      	bcc.n	800327a <nbedtls_sha256_update_ret+0x2a>
        memcpy((void *)(ctx->buffer + left), input, fill);
 80032a6:	2328      	movs	r3, #40	; 0x28
 80032a8:	4699      	mov	r9, r3
 80032aa:	44b9      	add	r9, r7
 80032ac:	464b      	mov	r3, r9
 80032ae:	0031      	movs	r1, r6
 80032b0:	4642      	mov	r2, r8
 80032b2:	1958      	adds	r0, r3, r5
 80032b4:	f000 faa4 	bl	8003800 <memcpy>
        if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 80032b8:	4649      	mov	r1, r9
 80032ba:	0038      	movs	r0, r7
 80032bc:	f7ff f8c8 	bl	8002450 <nbedtls_internal_sha256_process>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d1e7      	bne.n	8003294 <nbedtls_sha256_update_ret+0x44>
 80032c4:	1964      	adds	r4, r4, r5
        ilen -= fill;
 80032c6:	3c40      	subs	r4, #64	; 0x40
        left = 0;
 80032c8:	2500      	movs	r5, #0
        input += fill;
 80032ca:	4446      	add	r6, r8
    while (ilen >= 64)
 80032cc:	2c3f      	cmp	r4, #63	; 0x3f
 80032ce:	d8da      	bhi.n	8003286 <nbedtls_sha256_update_ret+0x36>
    if (ilen > 0)
 80032d0:	2c00      	cmp	r4, #0
 80032d2:	d006      	beq.n	80032e2 <nbedtls_sha256_update_ret+0x92>
        memcpy((void *)(ctx->buffer + left), input, ilen);
 80032d4:	0038      	movs	r0, r7
 80032d6:	3028      	adds	r0, #40	; 0x28
 80032d8:	0022      	movs	r2, r4
 80032da:	0031      	movs	r1, r6
 80032dc:	1940      	adds	r0, r0, r5
 80032de:	f000 fa8f 	bl	8003800 <memcpy>
    return (0);
 80032e2:	2000      	movs	r0, #0
 80032e4:	e7d6      	b.n	8003294 <nbedtls_sha256_update_ret+0x44>
 80032e6:	46c0      	nop			; (mov r8, r8)

080032e8 <nbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET((unsigned char *)output != NULL);

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80032e8:	233f      	movs	r3, #63	; 0x3f
{
 80032ea:	b570      	push	{r4, r5, r6, lr}
 80032ec:	0004      	movs	r4, r0

    ctx->buffer[used++] = 0x80;
 80032ee:	2280      	movs	r2, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 80032f0:	6800      	ldr	r0, [r0, #0]
{
 80032f2:	000d      	movs	r5, r1
    used = ctx->total[0] & 0x3F;
 80032f4:	4018      	ands	r0, r3
    ctx->buffer[used++] = 0x80;
 80032f6:	1823      	adds	r3, r4, r0
 80032f8:	3328      	adds	r3, #40	; 0x28
 80032fa:	3001      	adds	r0, #1
 80032fc:	701a      	strb	r2, [r3, #0]

    if (used <= 56)
 80032fe:	2838      	cmp	r0, #56	; 0x38
 8003300:	d900      	bls.n	8003304 <nbedtls_sha256_finish_ret+0x1c>
 8003302:	e065      	b.n	80033d0 <nbedtls_sha256_finish_ret+0xe8>
    {
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
 8003304:	0026      	movs	r6, r4
 8003306:	3a48      	subs	r2, #72	; 0x48
 8003308:	3628      	adds	r6, #40	; 0x28
 800330a:	1a12      	subs	r2, r2, r0
 800330c:	2100      	movs	r1, #0
 800330e:	1830      	adds	r0, r6, r0
 8003310:	f000 fa7f 	bl	8003812 <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29) | (ctx->total[1] << 3);
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	6863      	ldr	r3, [r4, #4]
 8003318:	0f51      	lsrs	r1, r2, #29
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	430b      	orrs	r3, r1
    low = (ctx->total[0] << 3);
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	ba12      	rev	r2, r2
 8003322:	ba1b      	rev	r3, r3

    PUT_UINT32_BE(high, ctx->buffer, 56);
    PUT_UINT32_BE(low, ctx->buffer, 60);

    if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 8003324:	0031      	movs	r1, r6
 8003326:	0020      	movs	r0, r4
    PUT_UINT32_BE(low, ctx->buffer, 60);
 8003328:	6662      	str	r2, [r4, #100]	; 0x64
    PUT_UINT32_BE(high, ctx->buffer, 56);
 800332a:	6623      	str	r3, [r4, #96]	; 0x60
    if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 800332c:	f7ff f890 	bl	8002450 <nbedtls_internal_sha256_process>
 8003330:	2800      	cmp	r0, #0
 8003332:	d14c      	bne.n	80033ce <nbedtls_sha256_finish_ret+0xe6>
        return (ret);

    /*
     * Output final state
     */
    PUT_UINT32_BE(ctx->state[0], output, 0);
 8003334:	7ae3      	ldrb	r3, [r4, #11]
 8003336:	702b      	strb	r3, [r5, #0]
 8003338:	8963      	ldrh	r3, [r4, #10]
 800333a:	706b      	strb	r3, [r5, #1]
 800333c:	68a3      	ldr	r3, [r4, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	70ab      	strb	r3, [r5, #2]
 8003342:	68a3      	ldr	r3, [r4, #8]
 8003344:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE(ctx->state[1], output, 4);
 8003346:	7be3      	ldrb	r3, [r4, #15]
 8003348:	712b      	strb	r3, [r5, #4]
 800334a:	89e3      	ldrh	r3, [r4, #14]
 800334c:	716b      	strb	r3, [r5, #5]
 800334e:	68e3      	ldr	r3, [r4, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	71ab      	strb	r3, [r5, #6]
 8003354:	68e3      	ldr	r3, [r4, #12]
 8003356:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE(ctx->state[2], output, 8);
 8003358:	7ce3      	ldrb	r3, [r4, #19]
 800335a:	722b      	strb	r3, [r5, #8]
 800335c:	8a63      	ldrh	r3, [r4, #18]
 800335e:	726b      	strb	r3, [r5, #9]
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	72ab      	strb	r3, [r5, #10]
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE(ctx->state[3], output, 12);
 800336a:	7de3      	ldrb	r3, [r4, #23]
 800336c:	732b      	strb	r3, [r5, #12]
 800336e:	8ae3      	ldrh	r3, [r4, #22]
 8003370:	736b      	strb	r3, [r5, #13]
 8003372:	6963      	ldr	r3, [r4, #20]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	73ab      	strb	r3, [r5, #14]
 8003378:	6963      	ldr	r3, [r4, #20]
 800337a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE(ctx->state[4], output, 16);
 800337c:	7ee3      	ldrb	r3, [r4, #27]
 800337e:	742b      	strb	r3, [r5, #16]
 8003380:	8b63      	ldrh	r3, [r4, #26]
 8003382:	746b      	strb	r3, [r5, #17]
 8003384:	69a3      	ldr	r3, [r4, #24]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	74ab      	strb	r3, [r5, #18]
 800338a:	69a3      	ldr	r3, [r4, #24]
 800338c:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE(ctx->state[5], output, 20);
 800338e:	7fe3      	ldrb	r3, [r4, #31]
 8003390:	752b      	strb	r3, [r5, #20]
 8003392:	8be3      	ldrh	r3, [r4, #30]
 8003394:	756b      	strb	r3, [r5, #21]
 8003396:	69e3      	ldr	r3, [r4, #28]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	75ab      	strb	r3, [r5, #22]
 800339c:	69e3      	ldr	r3, [r4, #28]
 800339e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE(ctx->state[6], output, 24);
 80033a0:	6a23      	ldr	r3, [r4, #32]
 80033a2:	0e1b      	lsrs	r3, r3, #24
 80033a4:	762b      	strb	r3, [r5, #24]
 80033a6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80033a8:	766b      	strb	r3, [r5, #25]
 80033aa:	6a23      	ldr	r3, [r4, #32]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	76ab      	strb	r3, [r5, #26]
 80033b0:	6a23      	ldr	r3, [r4, #32]
 80033b2:	76eb      	strb	r3, [r5, #27]

    if (ctx->is224 == 0)
 80033b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <nbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE(ctx->state[7], output, 28);
 80033ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	772b      	strb	r3, [r5, #28]
 80033c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80033c2:	776b      	strb	r3, [r5, #29]
 80033c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	77ab      	strb	r3, [r5, #30]
 80033ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033cc:	77eb      	strb	r3, [r5, #31]

    return (0);
}
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
        memset(ctx->buffer + used, 0, 64 - used);
 80033d0:	0026      	movs	r6, r4
 80033d2:	2240      	movs	r2, #64	; 0x40
 80033d4:	3628      	adds	r6, #40	; 0x28
 80033d6:	2100      	movs	r1, #0
 80033d8:	1a12      	subs	r2, r2, r0
 80033da:	1830      	adds	r0, r6, r0
 80033dc:	f000 fa19 	bl	8003812 <memset>
        if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 80033e0:	0031      	movs	r1, r6
 80033e2:	0020      	movs	r0, r4
 80033e4:	f7ff f834 	bl	8002450 <nbedtls_internal_sha256_process>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d1f0      	bne.n	80033ce <nbedtls_sha256_finish_ret+0xe6>
        memset(ctx->buffer, 0, 56);
 80033ec:	2238      	movs	r2, #56	; 0x38
 80033ee:	2100      	movs	r1, #0
 80033f0:	0030      	movs	r0, r6
 80033f2:	f000 fa0e 	bl	8003812 <memset>
 80033f6:	e78d      	b.n	8003314 <nbedtls_sha256_finish_ret+0x2c>

080033f8 <nbedtls_sha256_ret>:
 */
int nbedtls_sha256_ret(const unsigned char *input,
                       size_t ilen,
                       unsigned char output[32],
                       int is224)
{
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	001c      	movs	r4, r3
 80033fc:	b09d      	sub	sp, #116	; 0x74
 80033fe:	0005      	movs	r5, r0

    SHA256_VALIDATE_RET(is224 == 0 || is224 == 1);
    SHA256_VALIDATE_RET(ilen == 0 || input != NULL);
    SHA256_VALIDATE_RET((unsigned char *)output != NULL);

    nbedtls_sha256_init(&ctx);
 8003400:	a801      	add	r0, sp, #4
{
 8003402:	000e      	movs	r6, r1
 8003404:	0017      	movs	r7, r2
    nbedtls_sha256_init(&ctx);
 8003406:	f7fe ffcb 	bl	80023a0 <nbedtls_sha256_init>

    if ((ret = nbedtls_sha256_starts_ret(&ctx, is224)) != 0)
 800340a:	0021      	movs	r1, r4
 800340c:	a801      	add	r0, sp, #4
 800340e:	f7fe ffd5 	bl	80023bc <nbedtls_sha256_starts_ret>
 8003412:	1e04      	subs	r4, r0, #0
 8003414:	d005      	beq.n	8003422 <nbedtls_sha256_ret+0x2a>

    if ((ret = nbedtls_sha256_finish_ret(&ctx, output)) != 0)
        goto exit;

exit:
    nbedtls_sha256_free(&ctx);
 8003416:	a801      	add	r0, sp, #4
 8003418:	f7fe ffc8 	bl	80023ac <nbedtls_sha256_free>

    return (ret);
}
 800341c:	0020      	movs	r0, r4
 800341e:	b01d      	add	sp, #116	; 0x74
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((ret = nbedtls_sha256_update_ret(&ctx, input, ilen)) != 0)
 8003422:	0032      	movs	r2, r6
 8003424:	0029      	movs	r1, r5
 8003426:	a801      	add	r0, sp, #4
 8003428:	f7ff ff12 	bl	8003250 <nbedtls_sha256_update_ret>
 800342c:	1e04      	subs	r4, r0, #0
 800342e:	d1f2      	bne.n	8003416 <nbedtls_sha256_ret+0x1e>
    if ((ret = nbedtls_sha256_finish_ret(&ctx, output)) != 0)
 8003430:	0039      	movs	r1, r7
 8003432:	a801      	add	r0, sp, #4
 8003434:	f7ff ff58 	bl	80032e8 <nbedtls_sha256_finish_ret>
 8003438:	0004      	movs	r4, r0
exit:
 800343a:	e7ec      	b.n	8003416 <nbedtls_sha256_ret+0x1e>

0800343c <crypto_hash>:
    nbedtls_sha256_ret(input, ilen, output, is224);
}
#endif

int crypto_hash(unsigned char* out, const unsigned char* in, unsigned long long inlen)
{
 800343c:	0013      	movs	r3, r2
 800343e:	b510      	push	{r4, lr}
 8003440:	0002      	movs	r2, r0
 8003442:	0008      	movs	r0, r1
 8003444:	0019      	movs	r1, r3
    return nbedtls_sha256_ret(in, inlen, out, 0);
 8003446:	2300      	movs	r3, #0
 8003448:	f7ff ffd6 	bl	80033f8 <nbedtls_sha256_ret>
}
 800344c:	bd10      	pop	{r4, pc}
 800344e:	46c0      	nop			; (mov r8, r8)

08003450 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003450:	b510      	push	{r4, lr}

	int ret = 0;

	get_memory_usage();
 8003452:	f000 f951 	bl	80036f8 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8003456:	f000 f8fd 	bl	8003654 <tick_msr_start>
	tick_msr_end();
 800345a:	f000 f911 	bl	8003680 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <genkat_benchmark_hash_aead+0x5c>)
 8003460:	4913      	ldr	r1, [pc, #76]	; (80034b0 <genkat_benchmark_hash_aead+0x60>)
 8003462:	4814      	ldr	r0, [pc, #80]	; (80034b4 <genkat_benchmark_hash_aead+0x64>)
 8003464:	f000 f92a 	bl	80036bc <lwc_printf>
	lwc_printf("Memory usage: ");
 8003468:	4813      	ldr	r0, [pc, #76]	; (80034b8 <genkat_benchmark_hash_aead+0x68>)
 800346a:	f000 f927 	bl	80036bc <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 800346e:	4c13      	ldr	r4, [pc, #76]	; (80034bc <genkat_benchmark_hash_aead+0x6c>)
 8003470:	4813      	ldr	r0, [pc, #76]	; (80034c0 <genkat_benchmark_hash_aead+0x70>)
 8003472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003474:	6b21      	ldr	r1, [r4, #48]	; 0x30
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003476:	3420      	adds	r4, #32
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003478:	f000 f920 	bl	80036bc <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800347c:	cc0e      	ldmia	r4!, {r1, r2, r3}

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 800347e:	2480      	movs	r4, #128	; 0x80
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003480:	4810      	ldr	r0, [pc, #64]	; (80034c4 <genkat_benchmark_hash_aead+0x74>)
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003482:	0064      	lsls	r4, r4, #1
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003484:	f000 f91a 	bl	80036bc <lwc_printf>
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003488:	0022      	movs	r2, r4
 800348a:	2100      	movs	r1, #0
 800348c:	480e      	ldr	r0, [pc, #56]	; (80034c8 <genkat_benchmark_hash_aead+0x78>)
 800348e:	f000 f9c0 	bl	8003812 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8003492:	0022      	movs	r2, r4
 8003494:	2100      	movs	r1, #0
 8003496:	480d      	ldr	r0, [pc, #52]	; (80034cc <genkat_benchmark_hash_aead+0x7c>)
 8003498:	f000 f9bb 	bl	8003812 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 800349c:	0022      	movs	r2, r4
 800349e:	2100      	movs	r1, #0
 80034a0:	480b      	ldr	r0, [pc, #44]	; (80034d0 <genkat_benchmark_hash_aead+0x80>)
 80034a2:	f000 f9b6 	bl	8003812 <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 80034a6:	f000 f815 	bl	80034d4 <hash_generate_test_vectors>
#endif

	return ret;
}
 80034aa:	bd10      	pop	{r4, pc}
 80034ac:	080041b0 	.word	0x080041b0
 80034b0:	08004230 	.word	0x08004230
 80034b4:	080042b0 	.word	0x080042b0
 80034b8:	080042fc 	.word	0x080042fc
 80034bc:	2000067c 	.word	0x2000067c
 80034c0:	0800430c 	.word	0x0800430c
 80034c4:	08004334 	.word	0x08004334
 80034c8:	2000009c 	.word	0x2000009c
 80034cc:	2000019c 	.word	0x2000019c
 80034d0:	2000029c 	.word	0x2000029c

080034d4 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 80034d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d6:	46de      	mov	lr, fp
 80034d8:	4657      	mov	r7, sl
 80034da:	4645      	mov	r5, r8
 80034dc:	464e      	mov	r6, r9

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;

	init_buffer(msg, sizeof(msg));
 80034de:	2280      	movs	r2, #128	; 0x80
int hash_generate_test_vectors(){
 80034e0:	b5e0      	push	{r5, r6, r7, lr}
 80034e2:	4c3b      	ldr	r4, [pc, #236]	; (80035d0 <hash_generate_test_vectors+0xfc>)

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80034e4:	2500      	movs	r5, #0
int hash_generate_test_vectors(){
 80034e6:	44a5      	add	sp, r4
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80034e8:	2400      	movs	r4, #0
	init_buffer(msg, sizeof(msg));
 80034ea:	2300      	movs	r3, #0
 80034ec:	00d2      	lsls	r2, r2, #3
 80034ee:	a80a      	add	r0, sp, #40	; 0x28
 80034f0:	f000 f89c 	bl	800362c <init_buffer>
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <hash_generate_test_vectors+0x100>)
 80034f6:	4f38      	ldr	r7, [pc, #224]	; (80035d8 <hash_generate_test_vectors+0x104>)
 80034f8:	4699      	mov	r9, r3
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <hash_generate_test_vectors+0x108>)
 80034fc:	469a      	mov	sl, r3
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <hash_generate_test_vectors+0x10c>)
 8003500:	4698      	mov	r8, r3
		tick_msr_end();

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;

		if(ret_val == 0) {
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003502:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <hash_generate_test_vectors+0x110>)
 8003504:	469b      	mov	fp, r3
 8003506:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <hash_generate_test_vectors+0x114>)
 8003508:	9301      	str	r3, [sp, #4]
		lwc_printf("msg_len:%6d ", (int)mlen);
 800350a:	0021      	movs	r1, r4
 800350c:	4648      	mov	r0, r9
 800350e:	f000 f8d5 	bl	80036bc <lwc_printf>
		tick_msr_start();
 8003512:	f000 f89f 	bl	8003654 <tick_msr_start>
		ret_val = crypto_hash(digest, msg, mlen);
 8003516:	0022      	movs	r2, r4
 8003518:	002b      	movs	r3, r5
 800351a:	a90a      	add	r1, sp, #40	; 0x28
 800351c:	a802      	add	r0, sp, #8
 800351e:	f7ff ff8d 	bl	800343c <crypto_hash>
 8003522:	0006      	movs	r6, r0
		tick_msr_end();
 8003524:	f000 f8ac 	bl	8003680 <tick_msr_end>
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8003528:	4652      	mov	r2, sl
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6811      	ldr	r1, [r2, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	603a      	str	r2, [r7, #0]
 8003532:	4642      	mov	r2, r8
 8003534:	009b      	lsls	r3, r3, #2
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003536:	17c8      	asrs	r0, r1, #31
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8003538:	50d1      	str	r1, [r2, r3]
		if(ret_val == 0) {
 800353a:	2e00      	cmp	r6, #0
 800353c:	d144      	bne.n	80035c8 <hash_generate_test_vectors+0xf4>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 800353e:	220f      	movs	r2, #15
 8003540:	465b      	mov	r3, fp
 8003542:	4002      	ands	r2, r0
 8003544:	1852      	adds	r2, r2, r1
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9801      	ldr	r0, [sp, #4]
 800354a:	1112      	asrs	r2, r2, #4
 800354c:	f000 f8b6 	bl	80036bc <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8003550:	0023      	movs	r3, r4
 8003552:	432b      	orrs	r3, r5
 8003554:	d032      	beq.n	80035bc <hash_generate_test_vectors+0xe8>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003556:	1924      	adds	r4, r4, r4
 8003558:	416d      	adcs	r5, r5
 800355a:	2d00      	cmp	r5, #0
 800355c:	d103      	bne.n	8003566 <hash_generate_test_vectors+0x92>
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	42a3      	cmp	r3, r4
 8003564:	d2d1      	bcs.n	800350a <hash_generate_test_vectors+0x36>
			mlen = 4;
		}
	}//end of for loop


	ticks_res_pos = 0;
 8003566:	2300      	movs	r3, #0
	aead_hash_print_res("HASH");
 8003568:	4820      	ldr	r0, [pc, #128]	; (80035ec <hash_generate_test_vectors+0x118>)
	ticks_res_pos = 0;
 800356a:	603b      	str	r3, [r7, #0]
	aead_hash_print_res("HASH");
 800356c:	f000 f846 	bl	80035fc <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 8003570:	481f      	ldr	r0, [pc, #124]	; (80035f0 <hash_generate_test_vectors+0x11c>)
 8003572:	f000 f8a3 	bl	80036bc <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <hash_generate_test_vectors+0x120>)
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	2400      	movs	r4, #0
 800357e:	2500      	movs	r5, #0
 8003580:	4691      	mov	r9, r2
 8003582:	469a      	mov	sl, r3

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 8003584:	4640      	mov	r0, r8
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	0021      	movs	r1, r4
 800358a:	009a      	lsls	r2, r3, #2
 800358c:	5882      	ldr	r2, [r0, r2]
 800358e:	3301      	adds	r3, #1
 8003590:	4648      	mov	r0, r9
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	f000 f892 	bl	80036bc <lwc_printf>

		if(mlen==0){
 8003598:	0023      	movs	r3, r4
 800359a:	432b      	orrs	r3, r5
 800359c:	d011      	beq.n	80035c2 <hash_generate_test_vectors+0xee>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 800359e:	1924      	adds	r4, r4, r4
 80035a0:	416d      	adcs	r5, r5
 80035a2:	2d00      	cmp	r5, #0
 80035a4:	d101      	bne.n	80035aa <hash_generate_test_vectors+0xd6>
 80035a6:	45a2      	cmp	sl, r4
 80035a8:	d2ec      	bcs.n	8003584 <hash_generate_test_vectors+0xb0>
			mlen = 4;
		}
	}

	return ret_val;
}
 80035aa:	0030      	movs	r0, r6
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <hash_generate_test_vectors+0x124>)
 80035ae:	449d      	add	sp, r3
 80035b0:	bcf0      	pop	{r4, r5, r6, r7}
 80035b2:	46bb      	mov	fp, r7
 80035b4:	46b2      	mov	sl, r6
 80035b6:	46a9      	mov	r9, r5
 80035b8:	46a0      	mov	r8, r4
 80035ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80035bc:	2408      	movs	r4, #8
 80035be:	2500      	movs	r5, #0
 80035c0:	e7a3      	b.n	800350a <hash_generate_test_vectors+0x36>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80035c2:	2408      	movs	r4, #8
 80035c4:	2500      	movs	r5, #0
 80035c6:	e7dd      	b.n	8003584 <hash_generate_test_vectors+0xb0>
			ret_val = KAT_CRYPTO_FAILURE;
 80035c8:	2604      	movs	r6, #4
 80035ca:	4276      	negs	r6, r6
 80035cc:	e7cb      	b.n	8003566 <hash_generate_test_vectors+0x92>
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	fffffbd4 	.word	0xfffffbd4
 80035d4:	08004360 	.word	0x08004360
 80035d8:	2000039c 	.word	0x2000039c
 80035dc:	20000094 	.word	0x20000094
 80035e0:	2000029c 	.word	0x2000029c
 80035e4:	20000098 	.word	0x20000098
 80035e8:	08004370 	.word	0x08004370
 80035ec:	0800438c 	.word	0x0800438c
 80035f0:	08004394 	.word	0x08004394
 80035f4:	080043a4 	.word	0x080043a4
 80035f8:	0000042c 	.word	0x0000042c

080035fc <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 80035fc:	0001      	movs	r1, r0
 80035fe:	b510      	push	{r4, lr}
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <aead_hash_print_res+0x1c>)
 8003602:	4a06      	ldr	r2, [pc, #24]	; (800361c <aead_hash_print_res+0x20>)
 8003604:	4806      	ldr	r0, [pc, #24]	; (8003620 <aead_hash_print_res+0x24>)
 8003606:	f000 f859 	bl	80036bc <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800360a:	4906      	ldr	r1, [pc, #24]	; (8003624 <aead_hash_print_res+0x28>)
 800360c:	4806      	ldr	r0, [pc, #24]	; (8003628 <aead_hash_print_res+0x2c>)
 800360e:	3120      	adds	r1, #32
 8003610:	c90e      	ldmia	r1, {r1, r2, r3}
 8003612:	f000 f853 	bl	80036bc <lwc_printf>
}
 8003616:	bd10      	pop	{r4, pc}
 8003618:	080041b0 	.word	0x080041b0
 800361c:	08004230 	.word	0x08004230
 8003620:	080043b0 	.word	0x080043b0
 8003624:	2000067c 	.word	0x2000067c
 8003628:	080043f0 	.word	0x080043f0

0800362c <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
	for (unsigned long long i = 0; i < numbytes; i++) {
 800362c:	4313      	orrs	r3, r2
 800362e:	d008      	beq.n	8003642 <init_buffer+0x16>
		buffer[i] = (unsigned char) i + '0';
 8003630:	2130      	movs	r1, #48	; 0x30
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003632:	0003      	movs	r3, r0
 8003634:	1882      	adds	r2, r0, r2
		buffer[i] = (unsigned char) i + '0';
 8003636:	1a08      	subs	r0, r1, r0
 8003638:	18c1      	adds	r1, r0, r3
 800363a:	7019      	strb	r1, [r3, #0]
 800363c:	3301      	adds	r3, #1
	for (unsigned long long i = 0; i < numbytes; i++) {
 800363e:	4293      	cmp	r3, r2
 8003640:	d1fa      	bne.n	8003638 <init_buffer+0xc>
	}
}
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 8003644:	4a02      	ldr	r2, [pc, #8]	; (8003650 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	4770      	bx	lr
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	200003a0 	.word	0x200003a0

08003654 <tick_msr_start>:

void tick_msr_start(void) {

	tim_per_elp_cnt = 0;
 8003654:	2200      	movs	r2, #0
void tick_msr_start(void) {
 8003656:	b510      	push	{r4, lr}
	htim6.Instance->CNT = 0;
 8003658:	4c06      	ldr	r4, [pc, #24]	; (8003674 <tick_msr_start+0x20>)
	tim_per_elp_cnt = 0;
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <tick_msr_start+0x24>)
	htim6.Instance->CNT = 0;
 800365c:	6821      	ldr	r1, [r4, #0]
	tim_per_elp_cnt = 0;
 800365e:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8003660:	624a      	str	r2, [r1, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8003662:	f7fd f821 	bl	80006a8 <HAL_GetTick>
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <tick_msr_start+0x28>)
 8003668:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800366a:	0020      	movs	r0, r4
 800366c:	f7fe f832 	bl	80016d4 <HAL_TIM_Base_Start_IT>
}
 8003670:	bd10      	pop	{r4, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20000630 	.word	0x20000630
 8003678:	200003a0 	.word	0x200003a0
 800367c:	20000098 	.word	0x20000098

08003680 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003680:	b510      	push	{r4, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 8003682:	4c0a      	ldr	r4, [pc, #40]	; (80036ac <tick_msr_end+0x2c>)
 8003684:	0020      	movs	r0, r4
 8003686:	f7fe f877 	bl	8001778 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <tick_msr_end+0x30>)
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	4c08      	ldr	r4, [pc, #32]	; (80036b4 <tick_msr_end+0x34>)
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	4313      	orrs	r3, r2
 8003698:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 800369a:	f7fd f805 	bl	80006a8 <HAL_GetTick>
 800369e:	0003      	movs	r3, r0
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <tick_msr_end+0x38>)
	return gb_tick_cnt;
 80036a2:	6820      	ldr	r0, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 80036a4:	6811      	ldr	r1, [r2, #0]
 80036a6:	1a5b      	subs	r3, r3, r1
 80036a8:	6013      	str	r3, [r2, #0]
}
 80036aa:	bd10      	pop	{r4, pc}
 80036ac:	20000630 	.word	0x20000630
 80036b0:	200003a0 	.word	0x200003a0
 80036b4:	20000094 	.word	0x20000094
 80036b8:	20000098 	.word	0x20000098

080036bc <lwc_printf>:

void lwc_printf(const char *format, ...) {
 80036bc:	b40f      	push	{r0, r1, r2, r3}
 80036be:	b530      	push	{r4, r5, lr}
 80036c0:	b083      	sub	sp, #12
 80036c2:	aa06      	add	r2, sp, #24

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
	vsprintf(dbg_out_buf, format, args);
 80036c4:	4c0a      	ldr	r4, [pc, #40]	; (80036f0 <lwc_printf+0x34>)
void lwc_printf(const char *format, ...) {
 80036c6:	ca02      	ldmia	r2!, {r1}
	vsprintf(dbg_out_buf, format, args);
 80036c8:	0020      	movs	r0, r4
	va_start(args, format);
 80036ca:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 80036cc:	f000 f8c0 	bl	8003850 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 80036d0:	0020      	movs	r0, r4
 80036d2:	f7fc fd19 	bl	8000108 <strlen>
 80036d6:	4d07      	ldr	r5, [pc, #28]	; (80036f4 <lwc_printf+0x38>)
 80036d8:	b282      	uxth	r2, r0
 80036da:	2364      	movs	r3, #100	; 0x64
 80036dc:	0021      	movs	r1, r4
 80036de:	0028      	movs	r0, r5
 80036e0:	f7fe faf0 	bl	8001cc4 <HAL_UART_Transmit>
}
 80036e4:	b003      	add	sp, #12
 80036e6:	bc30      	pop	{r4, r5}
 80036e8:	bc08      	pop	{r3}
 80036ea:	b004      	add	sp, #16
 80036ec:	4718      	bx	r3
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	200003a4 	.word	0x200003a4
 80036f4:	200005ac 	.word	0x200005ac

080036f8 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 80036fc:	4b24      	ldr	r3, [pc, #144]	; (8003790 <get_memory_usage+0x98>)
 80036fe:	2234      	movs	r2, #52	; 0x34
 8003700:	2100      	movs	r1, #0
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f885 	bl	8003812 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <get_memory_usage+0x98>)
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	0512      	lsls	r2, r2, #20
 800370e:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003710:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <get_memory_usage+0x98>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <get_memory_usage+0x98>)
 8003716:	605a      	str	r2, [r3, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <get_memory_usage+0x9c>)
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <get_memory_usage+0x98>)
 800371c:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <get_memory_usage+0xa0>)
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <get_memory_usage+0x98>)
 8003722:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <get_memory_usage+0xa4>)
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <get_memory_usage+0x98>)
 8003728:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <get_memory_usage+0xa8>)
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <get_memory_usage+0x98>)
 800372e:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8003730:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <get_memory_usage+0xac>)
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <get_memory_usage+0x98>)
 8003734:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <get_memory_usage+0xb0>)
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <get_memory_usage+0x98>)
 800373a:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <get_memory_usage+0x98>)
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <get_memory_usage+0x98>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <get_memory_usage+0x98>)
 8003748:	621a      	str	r2, [r3, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <get_memory_usage+0x98>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <get_memory_usage+0x98>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <get_memory_usage+0x98>)
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <get_memory_usage+0x98>)
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <get_memory_usage+0x98>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <get_memory_usage+0x98>)
 8003764:	629a      	str	r2, [r3, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <get_memory_usage+0x98>)
 8003768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <get_memory_usage+0x98>)
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	18d2      	adds	r2, r2, r3
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <get_memory_usage+0x98>)
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <get_memory_usage+0x98>)
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <get_memory_usage+0x98>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	18d2      	adds	r2, r2, r3
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <get_memory_usage+0x98>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1ad2      	subs	r2, r2, r3
 8003784:	4b02      	ldr	r3, [pc, #8]	; (8003790 <get_memory_usage+0x98>)
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	2000067c 	.word	0x2000067c
 8003794:	08004078 	.word	0x08004078
 8003798:	20000074 	.word	0x20000074
 800379c:	200006c0 	.word	0x200006c0
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000074 	.word	0x20000074
 80037a8:	08004454 	.word	0x08004454

080037ac <__errno>:
 80037ac:	4b01      	ldr	r3, [pc, #4]	; (80037b4 <__errno+0x8>)
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	4770      	bx	lr
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	20000010 	.word	0x20000010

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	2600      	movs	r6, #0
 80037bc:	4d0c      	ldr	r5, [pc, #48]	; (80037f0 <__libc_init_array+0x38>)
 80037be:	4c0d      	ldr	r4, [pc, #52]	; (80037f4 <__libc_init_array+0x3c>)
 80037c0:	1b64      	subs	r4, r4, r5
 80037c2:	10a4      	asrs	r4, r4, #2
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	2600      	movs	r6, #0
 80037ca:	f000 fc49 	bl	8004060 <_init>
 80037ce:	4d0a      	ldr	r5, [pc, #40]	; (80037f8 <__libc_init_array+0x40>)
 80037d0:	4c0a      	ldr	r4, [pc, #40]	; (80037fc <__libc_init_array+0x44>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	00b3      	lsls	r3, r6, #2
 80037de:	58eb      	ldr	r3, [r5, r3]
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	00b3      	lsls	r3, r6, #2
 80037e8:	58eb      	ldr	r3, [r5, r3]
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	0800444c 	.word	0x0800444c
 80037f4:	0800444c 	.word	0x0800444c
 80037f8:	0800444c 	.word	0x0800444c
 80037fc:	08004450 	.word	0x08004450

08003800 <memcpy>:
 8003800:	2300      	movs	r3, #0
 8003802:	b510      	push	{r4, lr}
 8003804:	429a      	cmp	r2, r3
 8003806:	d100      	bne.n	800380a <memcpy+0xa>
 8003808:	bd10      	pop	{r4, pc}
 800380a:	5ccc      	ldrb	r4, [r1, r3]
 800380c:	54c4      	strb	r4, [r0, r3]
 800380e:	3301      	adds	r3, #1
 8003810:	e7f8      	b.n	8003804 <memcpy+0x4>

08003812 <memset>:
 8003812:	0003      	movs	r3, r0
 8003814:	1882      	adds	r2, r0, r2
 8003816:	4293      	cmp	r3, r2
 8003818:	d100      	bne.n	800381c <memset+0xa>
 800381a:	4770      	bx	lr
 800381c:	7019      	strb	r1, [r3, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	e7f9      	b.n	8003816 <memset+0x4>
	...

08003824 <_vsiprintf_r>:
 8003824:	b500      	push	{lr}
 8003826:	b09b      	sub	sp, #108	; 0x6c
 8003828:	9100      	str	r1, [sp, #0]
 800382a:	9104      	str	r1, [sp, #16]
 800382c:	4906      	ldr	r1, [pc, #24]	; (8003848 <_vsiprintf_r+0x24>)
 800382e:	9105      	str	r1, [sp, #20]
 8003830:	9102      	str	r1, [sp, #8]
 8003832:	4906      	ldr	r1, [pc, #24]	; (800384c <_vsiprintf_r+0x28>)
 8003834:	9103      	str	r1, [sp, #12]
 8003836:	4669      	mov	r1, sp
 8003838:	f000 f878 	bl	800392c <_svfiprintf_r>
 800383c:	2300      	movs	r3, #0
 800383e:	9a00      	ldr	r2, [sp, #0]
 8003840:	7013      	strb	r3, [r2, #0]
 8003842:	b01b      	add	sp, #108	; 0x6c
 8003844:	bd00      	pop	{pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	7fffffff 	.word	0x7fffffff
 800384c:	ffff0208 	.word	0xffff0208

08003850 <vsiprintf>:
 8003850:	b510      	push	{r4, lr}
 8003852:	0013      	movs	r3, r2
 8003854:	000a      	movs	r2, r1
 8003856:	0001      	movs	r1, r0
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <vsiprintf+0x14>)
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	f7ff ffe2 	bl	8003824 <_vsiprintf_r>
 8003860:	bd10      	pop	{r4, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	20000010 	.word	0x20000010

08003868 <__ssputs_r>:
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	688e      	ldr	r6, [r1, #8]
 800386c:	b085      	sub	sp, #20
 800386e:	0007      	movs	r7, r0
 8003870:	000c      	movs	r4, r1
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	429e      	cmp	r6, r3
 8003878:	d83c      	bhi.n	80038f4 <__ssputs_r+0x8c>
 800387a:	2390      	movs	r3, #144	; 0x90
 800387c:	898a      	ldrh	r2, [r1, #12]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	421a      	tst	r2, r3
 8003882:	d034      	beq.n	80038ee <__ssputs_r+0x86>
 8003884:	2503      	movs	r5, #3
 8003886:	6909      	ldr	r1, [r1, #16]
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	1a5b      	subs	r3, r3, r1
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	9802      	ldr	r0, [sp, #8]
 8003892:	435d      	muls	r5, r3
 8003894:	0feb      	lsrs	r3, r5, #31
 8003896:	195d      	adds	r5, r3, r5
 8003898:	9b01      	ldr	r3, [sp, #4]
 800389a:	106d      	asrs	r5, r5, #1
 800389c:	3301      	adds	r3, #1
 800389e:	181b      	adds	r3, r3, r0
 80038a0:	42ab      	cmp	r3, r5
 80038a2:	d900      	bls.n	80038a6 <__ssputs_r+0x3e>
 80038a4:	001d      	movs	r5, r3
 80038a6:	0553      	lsls	r3, r2, #21
 80038a8:	d532      	bpl.n	8003910 <__ssputs_r+0xa8>
 80038aa:	0029      	movs	r1, r5
 80038ac:	0038      	movs	r0, r7
 80038ae:	f000 fb27 	bl	8003f00 <_malloc_r>
 80038b2:	1e06      	subs	r6, r0, #0
 80038b4:	d109      	bne.n	80038ca <__ssputs_r+0x62>
 80038b6:	230c      	movs	r3, #12
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	2001      	movs	r0, #1
 80038be:	89a2      	ldrh	r2, [r4, #12]
 80038c0:	4240      	negs	r0, r0
 80038c2:	4313      	orrs	r3, r2
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	b005      	add	sp, #20
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ca:	9a02      	ldr	r2, [sp, #8]
 80038cc:	6921      	ldr	r1, [r4, #16]
 80038ce:	f7ff ff97 	bl	8003800 <memcpy>
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <__ssputs_r+0xc0>)
 80038d6:	401a      	ands	r2, r3
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	4313      	orrs	r3, r2
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	9b02      	ldr	r3, [sp, #8]
 80038e0:	6126      	str	r6, [r4, #16]
 80038e2:	18f6      	adds	r6, r6, r3
 80038e4:	6026      	str	r6, [r4, #0]
 80038e6:	6165      	str	r5, [r4, #20]
 80038e8:	9e01      	ldr	r6, [sp, #4]
 80038ea:	1aed      	subs	r5, r5, r3
 80038ec:	60a5      	str	r5, [r4, #8]
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	429e      	cmp	r6, r3
 80038f2:	d900      	bls.n	80038f6 <__ssputs_r+0x8e>
 80038f4:	9e01      	ldr	r6, [sp, #4]
 80038f6:	0032      	movs	r2, r6
 80038f8:	9903      	ldr	r1, [sp, #12]
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	f000 faa3 	bl	8003e46 <memmove>
 8003900:	68a3      	ldr	r3, [r4, #8]
 8003902:	2000      	movs	r0, #0
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	60a3      	str	r3, [r4, #8]
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	199e      	adds	r6, r3, r6
 800390c:	6026      	str	r6, [r4, #0]
 800390e:	e7da      	b.n	80038c6 <__ssputs_r+0x5e>
 8003910:	002a      	movs	r2, r5
 8003912:	0038      	movs	r0, r7
 8003914:	f000 fb52 	bl	8003fbc <_realloc_r>
 8003918:	1e06      	subs	r6, r0, #0
 800391a:	d1e0      	bne.n	80038de <__ssputs_r+0x76>
 800391c:	0038      	movs	r0, r7
 800391e:	6921      	ldr	r1, [r4, #16]
 8003920:	f000 faa4 	bl	8003e6c <_free_r>
 8003924:	e7c7      	b.n	80038b6 <__ssputs_r+0x4e>
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	fffffb7f 	.word	0xfffffb7f

0800392c <_svfiprintf_r>:
 800392c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392e:	b0a1      	sub	sp, #132	; 0x84
 8003930:	9003      	str	r0, [sp, #12]
 8003932:	001d      	movs	r5, r3
 8003934:	898b      	ldrh	r3, [r1, #12]
 8003936:	000f      	movs	r7, r1
 8003938:	0016      	movs	r6, r2
 800393a:	061b      	lsls	r3, r3, #24
 800393c:	d511      	bpl.n	8003962 <_svfiprintf_r+0x36>
 800393e:	690b      	ldr	r3, [r1, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10e      	bne.n	8003962 <_svfiprintf_r+0x36>
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	f000 fadb 	bl	8003f00 <_malloc_r>
 800394a:	6038      	str	r0, [r7, #0]
 800394c:	6138      	str	r0, [r7, #16]
 800394e:	2800      	cmp	r0, #0
 8003950:	d105      	bne.n	800395e <_svfiprintf_r+0x32>
 8003952:	230c      	movs	r3, #12
 8003954:	9a03      	ldr	r2, [sp, #12]
 8003956:	3801      	subs	r0, #1
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	b021      	add	sp, #132	; 0x84
 800395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395e:	2340      	movs	r3, #64	; 0x40
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	2300      	movs	r3, #0
 8003964:	ac08      	add	r4, sp, #32
 8003966:	6163      	str	r3, [r4, #20]
 8003968:	3320      	adds	r3, #32
 800396a:	7663      	strb	r3, [r4, #25]
 800396c:	3310      	adds	r3, #16
 800396e:	76a3      	strb	r3, [r4, #26]
 8003970:	9507      	str	r5, [sp, #28]
 8003972:	0035      	movs	r5, r6
 8003974:	782b      	ldrb	r3, [r5, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <_svfiprintf_r+0x52>
 800397a:	2b25      	cmp	r3, #37	; 0x25
 800397c:	d147      	bne.n	8003a0e <_svfiprintf_r+0xe2>
 800397e:	1bab      	subs	r3, r5, r6
 8003980:	9305      	str	r3, [sp, #20]
 8003982:	42b5      	cmp	r5, r6
 8003984:	d00c      	beq.n	80039a0 <_svfiprintf_r+0x74>
 8003986:	0032      	movs	r2, r6
 8003988:	0039      	movs	r1, r7
 800398a:	9803      	ldr	r0, [sp, #12]
 800398c:	f7ff ff6c 	bl	8003868 <__ssputs_r>
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	d100      	bne.n	8003996 <_svfiprintf_r+0x6a>
 8003994:	e0ae      	b.n	8003af4 <_svfiprintf_r+0x1c8>
 8003996:	6962      	ldr	r2, [r4, #20]
 8003998:	9b05      	ldr	r3, [sp, #20]
 800399a:	4694      	mov	ip, r2
 800399c:	4463      	add	r3, ip
 800399e:	6163      	str	r3, [r4, #20]
 80039a0:	782b      	ldrb	r3, [r5, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d100      	bne.n	80039a8 <_svfiprintf_r+0x7c>
 80039a6:	e0a5      	b.n	8003af4 <_svfiprintf_r+0x1c8>
 80039a8:	2201      	movs	r2, #1
 80039aa:	2300      	movs	r3, #0
 80039ac:	4252      	negs	r2, r2
 80039ae:	6062      	str	r2, [r4, #4]
 80039b0:	a904      	add	r1, sp, #16
 80039b2:	3254      	adds	r2, #84	; 0x54
 80039b4:	1852      	adds	r2, r2, r1
 80039b6:	1c6e      	adds	r6, r5, #1
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	60e3      	str	r3, [r4, #12]
 80039bc:	60a3      	str	r3, [r4, #8]
 80039be:	7013      	strb	r3, [r2, #0]
 80039c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80039c2:	2205      	movs	r2, #5
 80039c4:	7831      	ldrb	r1, [r6, #0]
 80039c6:	4854      	ldr	r0, [pc, #336]	; (8003b18 <_svfiprintf_r+0x1ec>)
 80039c8:	f000 fa32 	bl	8003e30 <memchr>
 80039cc:	1c75      	adds	r5, r6, #1
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d11f      	bne.n	8003a12 <_svfiprintf_r+0xe6>
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	06d3      	lsls	r3, r2, #27
 80039d6:	d504      	bpl.n	80039e2 <_svfiprintf_r+0xb6>
 80039d8:	2353      	movs	r3, #83	; 0x53
 80039da:	a904      	add	r1, sp, #16
 80039dc:	185b      	adds	r3, r3, r1
 80039de:	2120      	movs	r1, #32
 80039e0:	7019      	strb	r1, [r3, #0]
 80039e2:	0713      	lsls	r3, r2, #28
 80039e4:	d504      	bpl.n	80039f0 <_svfiprintf_r+0xc4>
 80039e6:	2353      	movs	r3, #83	; 0x53
 80039e8:	a904      	add	r1, sp, #16
 80039ea:	185b      	adds	r3, r3, r1
 80039ec:	212b      	movs	r1, #43	; 0x2b
 80039ee:	7019      	strb	r1, [r3, #0]
 80039f0:	7833      	ldrb	r3, [r6, #0]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d016      	beq.n	8003a24 <_svfiprintf_r+0xf8>
 80039f6:	0035      	movs	r5, r6
 80039f8:	2100      	movs	r1, #0
 80039fa:	200a      	movs	r0, #10
 80039fc:	68e3      	ldr	r3, [r4, #12]
 80039fe:	782a      	ldrb	r2, [r5, #0]
 8003a00:	1c6e      	adds	r6, r5, #1
 8003a02:	3a30      	subs	r2, #48	; 0x30
 8003a04:	2a09      	cmp	r2, #9
 8003a06:	d94e      	bls.n	8003aa6 <_svfiprintf_r+0x17a>
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	d111      	bne.n	8003a30 <_svfiprintf_r+0x104>
 8003a0c:	e017      	b.n	8003a3e <_svfiprintf_r+0x112>
 8003a0e:	3501      	adds	r5, #1
 8003a10:	e7b0      	b.n	8003974 <_svfiprintf_r+0x48>
 8003a12:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <_svfiprintf_r+0x1ec>)
 8003a14:	6822      	ldr	r2, [r4, #0]
 8003a16:	1ac0      	subs	r0, r0, r3
 8003a18:	2301      	movs	r3, #1
 8003a1a:	4083      	lsls	r3, r0
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	002e      	movs	r6, r5
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	e7ce      	b.n	80039c2 <_svfiprintf_r+0x96>
 8003a24:	9b07      	ldr	r3, [sp, #28]
 8003a26:	1d19      	adds	r1, r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	9107      	str	r1, [sp, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	db01      	blt.n	8003a34 <_svfiprintf_r+0x108>
 8003a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a32:	e004      	b.n	8003a3e <_svfiprintf_r+0x112>
 8003a34:	425b      	negs	r3, r3
 8003a36:	60e3      	str	r3, [r4, #12]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	782b      	ldrb	r3, [r5, #0]
 8003a40:	2b2e      	cmp	r3, #46	; 0x2e
 8003a42:	d10a      	bne.n	8003a5a <_svfiprintf_r+0x12e>
 8003a44:	786b      	ldrb	r3, [r5, #1]
 8003a46:	2b2a      	cmp	r3, #42	; 0x2a
 8003a48:	d135      	bne.n	8003ab6 <_svfiprintf_r+0x18a>
 8003a4a:	9b07      	ldr	r3, [sp, #28]
 8003a4c:	3502      	adds	r5, #2
 8003a4e:	1d1a      	adds	r2, r3, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	9207      	str	r2, [sp, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db2b      	blt.n	8003ab0 <_svfiprintf_r+0x184>
 8003a58:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5a:	4e30      	ldr	r6, [pc, #192]	; (8003b1c <_svfiprintf_r+0x1f0>)
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	0030      	movs	r0, r6
 8003a60:	7829      	ldrb	r1, [r5, #0]
 8003a62:	f000 f9e5 	bl	8003e30 <memchr>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d006      	beq.n	8003a78 <_svfiprintf_r+0x14c>
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	1b80      	subs	r0, r0, r6
 8003a6e:	4083      	lsls	r3, r0
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	3501      	adds	r5, #1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	7829      	ldrb	r1, [r5, #0]
 8003a7a:	2206      	movs	r2, #6
 8003a7c:	4828      	ldr	r0, [pc, #160]	; (8003b20 <_svfiprintf_r+0x1f4>)
 8003a7e:	1c6e      	adds	r6, r5, #1
 8003a80:	7621      	strb	r1, [r4, #24]
 8003a82:	f000 f9d5 	bl	8003e30 <memchr>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d03c      	beq.n	8003b04 <_svfiprintf_r+0x1d8>
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <_svfiprintf_r+0x1f8>)
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d125      	bne.n	8003adc <_svfiprintf_r+0x1b0>
 8003a90:	2207      	movs	r2, #7
 8003a92:	9b07      	ldr	r3, [sp, #28]
 8003a94:	3307      	adds	r3, #7
 8003a96:	4393      	bics	r3, r2
 8003a98:	3308      	adds	r3, #8
 8003a9a:	9307      	str	r3, [sp, #28]
 8003a9c:	6963      	ldr	r3, [r4, #20]
 8003a9e:	9a04      	ldr	r2, [sp, #16]
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	6163      	str	r3, [r4, #20]
 8003aa4:	e765      	b.n	8003972 <_svfiprintf_r+0x46>
 8003aa6:	4343      	muls	r3, r0
 8003aa8:	0035      	movs	r5, r6
 8003aaa:	2101      	movs	r1, #1
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	e7a6      	b.n	80039fe <_svfiprintf_r+0xd2>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	425b      	negs	r3, r3
 8003ab4:	e7d0      	b.n	8003a58 <_svfiprintf_r+0x12c>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	200a      	movs	r0, #10
 8003aba:	001a      	movs	r2, r3
 8003abc:	3501      	adds	r5, #1
 8003abe:	6063      	str	r3, [r4, #4]
 8003ac0:	7829      	ldrb	r1, [r5, #0]
 8003ac2:	1c6e      	adds	r6, r5, #1
 8003ac4:	3930      	subs	r1, #48	; 0x30
 8003ac6:	2909      	cmp	r1, #9
 8003ac8:	d903      	bls.n	8003ad2 <_svfiprintf_r+0x1a6>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0c5      	beq.n	8003a5a <_svfiprintf_r+0x12e>
 8003ace:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad0:	e7c3      	b.n	8003a5a <_svfiprintf_r+0x12e>
 8003ad2:	4342      	muls	r2, r0
 8003ad4:	0035      	movs	r5, r6
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	1852      	adds	r2, r2, r1
 8003ada:	e7f1      	b.n	8003ac0 <_svfiprintf_r+0x194>
 8003adc:	ab07      	add	r3, sp, #28
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	003a      	movs	r2, r7
 8003ae2:	0021      	movs	r1, r4
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <_svfiprintf_r+0x1fc>)
 8003ae6:	9803      	ldr	r0, [sp, #12]
 8003ae8:	e000      	b.n	8003aec <_svfiprintf_r+0x1c0>
 8003aea:	bf00      	nop
 8003aec:	9004      	str	r0, [sp, #16]
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	3301      	adds	r3, #1
 8003af2:	d1d3      	bne.n	8003a9c <_svfiprintf_r+0x170>
 8003af4:	89bb      	ldrh	r3, [r7, #12]
 8003af6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003af8:	065b      	lsls	r3, r3, #25
 8003afa:	d400      	bmi.n	8003afe <_svfiprintf_r+0x1d2>
 8003afc:	e72d      	b.n	800395a <_svfiprintf_r+0x2e>
 8003afe:	2001      	movs	r0, #1
 8003b00:	4240      	negs	r0, r0
 8003b02:	e72a      	b.n	800395a <_svfiprintf_r+0x2e>
 8003b04:	ab07      	add	r3, sp, #28
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	003a      	movs	r2, r7
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <_svfiprintf_r+0x1fc>)
 8003b0e:	9803      	ldr	r0, [sp, #12]
 8003b10:	f000 f87c 	bl	8003c0c <_printf_i>
 8003b14:	e7ea      	b.n	8003aec <_svfiprintf_r+0x1c0>
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	08004418 	.word	0x08004418
 8003b1c:	0800441e 	.word	0x0800441e
 8003b20:	08004422 	.word	0x08004422
 8003b24:	00000000 	.word	0x00000000
 8003b28:	08003869 	.word	0x08003869

08003b2c <_printf_common>:
 8003b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b2e:	0015      	movs	r5, r2
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	688a      	ldr	r2, [r1, #8]
 8003b34:	690b      	ldr	r3, [r1, #16]
 8003b36:	000c      	movs	r4, r1
 8003b38:	9000      	str	r0, [sp, #0]
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	da00      	bge.n	8003b40 <_printf_common+0x14>
 8003b3e:	0013      	movs	r3, r2
 8003b40:	0022      	movs	r2, r4
 8003b42:	602b      	str	r3, [r5, #0]
 8003b44:	3243      	adds	r2, #67	; 0x43
 8003b46:	7812      	ldrb	r2, [r2, #0]
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d001      	beq.n	8003b50 <_printf_common+0x24>
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	069b      	lsls	r3, r3, #26
 8003b54:	d502      	bpl.n	8003b5c <_printf_common+0x30>
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	3302      	adds	r3, #2
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	2306      	movs	r3, #6
 8003b60:	0017      	movs	r7, r2
 8003b62:	401f      	ands	r7, r3
 8003b64:	421a      	tst	r2, r3
 8003b66:	d027      	beq.n	8003bb8 <_printf_common+0x8c>
 8003b68:	0023      	movs	r3, r4
 8003b6a:	3343      	adds	r3, #67	; 0x43
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	4193      	sbcs	r3, r2
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	0692      	lsls	r2, r2, #26
 8003b76:	d430      	bmi.n	8003bda <_printf_common+0xae>
 8003b78:	0022      	movs	r2, r4
 8003b7a:	9901      	ldr	r1, [sp, #4]
 8003b7c:	9800      	ldr	r0, [sp, #0]
 8003b7e:	9e08      	ldr	r6, [sp, #32]
 8003b80:	3243      	adds	r2, #67	; 0x43
 8003b82:	47b0      	blx	r6
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d025      	beq.n	8003bd4 <_printf_common+0xa8>
 8003b88:	2306      	movs	r3, #6
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	682a      	ldr	r2, [r5, #0]
 8003b8e:	68e1      	ldr	r1, [r4, #12]
 8003b90:	2500      	movs	r5, #0
 8003b92:	4003      	ands	r3, r0
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d103      	bne.n	8003ba0 <_printf_common+0x74>
 8003b98:	1a8d      	subs	r5, r1, r2
 8003b9a:	43eb      	mvns	r3, r5
 8003b9c:	17db      	asrs	r3, r3, #31
 8003b9e:	401d      	ands	r5, r3
 8003ba0:	68a3      	ldr	r3, [r4, #8]
 8003ba2:	6922      	ldr	r2, [r4, #16]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	dd01      	ble.n	8003bac <_printf_common+0x80>
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	18ed      	adds	r5, r5, r3
 8003bac:	2700      	movs	r7, #0
 8003bae:	42bd      	cmp	r5, r7
 8003bb0:	d120      	bne.n	8003bf4 <_printf_common+0xc8>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e010      	b.n	8003bd8 <_printf_common+0xac>
 8003bb6:	3701      	adds	r7, #1
 8003bb8:	68e3      	ldr	r3, [r4, #12]
 8003bba:	682a      	ldr	r2, [r5, #0]
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	42bb      	cmp	r3, r7
 8003bc0:	ddd2      	ble.n	8003b68 <_printf_common+0x3c>
 8003bc2:	0022      	movs	r2, r4
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	9901      	ldr	r1, [sp, #4]
 8003bc8:	9800      	ldr	r0, [sp, #0]
 8003bca:	9e08      	ldr	r6, [sp, #32]
 8003bcc:	3219      	adds	r2, #25
 8003bce:	47b0      	blx	r6
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d1f0      	bne.n	8003bb6 <_printf_common+0x8a>
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	4240      	negs	r0, r0
 8003bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bda:	2030      	movs	r0, #48	; 0x30
 8003bdc:	18e1      	adds	r1, r4, r3
 8003bde:	3143      	adds	r1, #67	; 0x43
 8003be0:	7008      	strb	r0, [r1, #0]
 8003be2:	0021      	movs	r1, r4
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	3145      	adds	r1, #69	; 0x45
 8003be8:	7809      	ldrb	r1, [r1, #0]
 8003bea:	18a2      	adds	r2, r4, r2
 8003bec:	3243      	adds	r2, #67	; 0x43
 8003bee:	3302      	adds	r3, #2
 8003bf0:	7011      	strb	r1, [r2, #0]
 8003bf2:	e7c1      	b.n	8003b78 <_printf_common+0x4c>
 8003bf4:	0022      	movs	r2, r4
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	9901      	ldr	r1, [sp, #4]
 8003bfa:	9800      	ldr	r0, [sp, #0]
 8003bfc:	9e08      	ldr	r6, [sp, #32]
 8003bfe:	321a      	adds	r2, #26
 8003c00:	47b0      	blx	r6
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d0e6      	beq.n	8003bd4 <_printf_common+0xa8>
 8003c06:	3701      	adds	r7, #1
 8003c08:	e7d1      	b.n	8003bae <_printf_common+0x82>
	...

08003c0c <_printf_i>:
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	b08b      	sub	sp, #44	; 0x2c
 8003c10:	9206      	str	r2, [sp, #24]
 8003c12:	000a      	movs	r2, r1
 8003c14:	3243      	adds	r2, #67	; 0x43
 8003c16:	9307      	str	r3, [sp, #28]
 8003c18:	9005      	str	r0, [sp, #20]
 8003c1a:	9204      	str	r2, [sp, #16]
 8003c1c:	7e0a      	ldrb	r2, [r1, #24]
 8003c1e:	000c      	movs	r4, r1
 8003c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c22:	2a78      	cmp	r2, #120	; 0x78
 8003c24:	d806      	bhi.n	8003c34 <_printf_i+0x28>
 8003c26:	2a62      	cmp	r2, #98	; 0x62
 8003c28:	d808      	bhi.n	8003c3c <_printf_i+0x30>
 8003c2a:	2a00      	cmp	r2, #0
 8003c2c:	d100      	bne.n	8003c30 <_printf_i+0x24>
 8003c2e:	e0c0      	b.n	8003db2 <_printf_i+0x1a6>
 8003c30:	2a58      	cmp	r2, #88	; 0x58
 8003c32:	d052      	beq.n	8003cda <_printf_i+0xce>
 8003c34:	0026      	movs	r6, r4
 8003c36:	3642      	adds	r6, #66	; 0x42
 8003c38:	7032      	strb	r2, [r6, #0]
 8003c3a:	e022      	b.n	8003c82 <_printf_i+0x76>
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	3863      	subs	r0, #99	; 0x63
 8003c40:	2815      	cmp	r0, #21
 8003c42:	d8f7      	bhi.n	8003c34 <_printf_i+0x28>
 8003c44:	f7fc fa68 	bl	8000118 <__gnu_thumb1_case_shi>
 8003c48:	001f0016 	.word	0x001f0016
 8003c4c:	fff6fff6 	.word	0xfff6fff6
 8003c50:	fff6fff6 	.word	0xfff6fff6
 8003c54:	fff6001f 	.word	0xfff6001f
 8003c58:	fff6fff6 	.word	0xfff6fff6
 8003c5c:	00a8fff6 	.word	0x00a8fff6
 8003c60:	009a0036 	.word	0x009a0036
 8003c64:	fff6fff6 	.word	0xfff6fff6
 8003c68:	fff600b9 	.word	0xfff600b9
 8003c6c:	fff60036 	.word	0xfff60036
 8003c70:	009efff6 	.word	0x009efff6
 8003c74:	0026      	movs	r6, r4
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	3642      	adds	r6, #66	; 0x42
 8003c7a:	1d11      	adds	r1, r2, #4
 8003c7c:	6019      	str	r1, [r3, #0]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	7033      	strb	r3, [r6, #0]
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0a7      	b.n	8003dd6 <_printf_i+0x1ca>
 8003c86:	6808      	ldr	r0, [r1, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	1d0a      	adds	r2, r1, #4
 8003c8c:	0605      	lsls	r5, r0, #24
 8003c8e:	d50b      	bpl.n	8003ca8 <_printf_i+0x9c>
 8003c90:	680d      	ldr	r5, [r1, #0]
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	da03      	bge.n	8003ca0 <_printf_i+0x94>
 8003c98:	232d      	movs	r3, #45	; 0x2d
 8003c9a:	9a04      	ldr	r2, [sp, #16]
 8003c9c:	426d      	negs	r5, r5
 8003c9e:	7013      	strb	r3, [r2, #0]
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <_printf_i+0x21c>)
 8003ca2:	270a      	movs	r7, #10
 8003ca4:	9303      	str	r3, [sp, #12]
 8003ca6:	e032      	b.n	8003d0e <_printf_i+0x102>
 8003ca8:	680d      	ldr	r5, [r1, #0]
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	0641      	lsls	r1, r0, #25
 8003cae:	d5f1      	bpl.n	8003c94 <_printf_i+0x88>
 8003cb0:	b22d      	sxth	r5, r5
 8003cb2:	e7ef      	b.n	8003c94 <_printf_i+0x88>
 8003cb4:	680d      	ldr	r5, [r1, #0]
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	1d08      	adds	r0, r1, #4
 8003cba:	6018      	str	r0, [r3, #0]
 8003cbc:	062e      	lsls	r6, r5, #24
 8003cbe:	d501      	bpl.n	8003cc4 <_printf_i+0xb8>
 8003cc0:	680d      	ldr	r5, [r1, #0]
 8003cc2:	e003      	b.n	8003ccc <_printf_i+0xc0>
 8003cc4:	066d      	lsls	r5, r5, #25
 8003cc6:	d5fb      	bpl.n	8003cc0 <_printf_i+0xb4>
 8003cc8:	680d      	ldr	r5, [r1, #0]
 8003cca:	b2ad      	uxth	r5, r5
 8003ccc:	4b56      	ldr	r3, [pc, #344]	; (8003e28 <_printf_i+0x21c>)
 8003cce:	270a      	movs	r7, #10
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	2a6f      	cmp	r2, #111	; 0x6f
 8003cd4:	d117      	bne.n	8003d06 <_printf_i+0xfa>
 8003cd6:	2708      	movs	r7, #8
 8003cd8:	e015      	b.n	8003d06 <_printf_i+0xfa>
 8003cda:	3145      	adds	r1, #69	; 0x45
 8003cdc:	700a      	strb	r2, [r1, #0]
 8003cde:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <_printf_i+0x21c>)
 8003ce0:	9203      	str	r2, [sp, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	6821      	ldr	r1, [r4, #0]
 8003ce6:	ca20      	ldmia	r2!, {r5}
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	0608      	lsls	r0, r1, #24
 8003cec:	d550      	bpl.n	8003d90 <_printf_i+0x184>
 8003cee:	07cb      	lsls	r3, r1, #31
 8003cf0:	d502      	bpl.n	8003cf8 <_printf_i+0xec>
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	4319      	orrs	r1, r3
 8003cf6:	6021      	str	r1, [r4, #0]
 8003cf8:	2710      	movs	r7, #16
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	d103      	bne.n	8003d06 <_printf_i+0xfa>
 8003cfe:	2320      	movs	r3, #32
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	439a      	bics	r2, r3
 8003d04:	6022      	str	r2, [r4, #0]
 8003d06:	0023      	movs	r3, r4
 8003d08:	2200      	movs	r2, #0
 8003d0a:	3343      	adds	r3, #67	; 0x43
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	6863      	ldr	r3, [r4, #4]
 8003d10:	60a3      	str	r3, [r4, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db03      	blt.n	8003d1e <_printf_i+0x112>
 8003d16:	2204      	movs	r2, #4
 8003d18:	6821      	ldr	r1, [r4, #0]
 8003d1a:	4391      	bics	r1, r2
 8003d1c:	6021      	str	r1, [r4, #0]
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	d102      	bne.n	8003d28 <_printf_i+0x11c>
 8003d22:	9e04      	ldr	r6, [sp, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <_printf_i+0x136>
 8003d28:	9e04      	ldr	r6, [sp, #16]
 8003d2a:	0028      	movs	r0, r5
 8003d2c:	0039      	movs	r1, r7
 8003d2e:	f7fc fa83 	bl	8000238 <__aeabi_uidivmod>
 8003d32:	9b03      	ldr	r3, [sp, #12]
 8003d34:	3e01      	subs	r6, #1
 8003d36:	5c5b      	ldrb	r3, [r3, r1]
 8003d38:	7033      	strb	r3, [r6, #0]
 8003d3a:	002b      	movs	r3, r5
 8003d3c:	0005      	movs	r5, r0
 8003d3e:	429f      	cmp	r7, r3
 8003d40:	d9f3      	bls.n	8003d2a <_printf_i+0x11e>
 8003d42:	2f08      	cmp	r7, #8
 8003d44:	d109      	bne.n	8003d5a <_printf_i+0x14e>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	07db      	lsls	r3, r3, #31
 8003d4a:	d506      	bpl.n	8003d5a <_printf_i+0x14e>
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	6922      	ldr	r2, [r4, #16]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	dc02      	bgt.n	8003d5a <_printf_i+0x14e>
 8003d54:	2330      	movs	r3, #48	; 0x30
 8003d56:	3e01      	subs	r6, #1
 8003d58:	7033      	strb	r3, [r6, #0]
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	1b9b      	subs	r3, r3, r6
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	9b07      	ldr	r3, [sp, #28]
 8003d62:	0021      	movs	r1, r4
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	9805      	ldr	r0, [sp, #20]
 8003d68:	9b06      	ldr	r3, [sp, #24]
 8003d6a:	aa09      	add	r2, sp, #36	; 0x24
 8003d6c:	f7ff fede 	bl	8003b2c <_printf_common>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d135      	bne.n	8003de0 <_printf_i+0x1d4>
 8003d74:	2001      	movs	r0, #1
 8003d76:	4240      	negs	r0, r0
 8003d78:	b00b      	add	sp, #44	; 0x2c
 8003d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	6022      	str	r2, [r4, #0]
 8003d84:	0022      	movs	r2, r4
 8003d86:	2178      	movs	r1, #120	; 0x78
 8003d88:	3245      	adds	r2, #69	; 0x45
 8003d8a:	7011      	strb	r1, [r2, #0]
 8003d8c:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <_printf_i+0x220>)
 8003d8e:	e7a7      	b.n	8003ce0 <_printf_i+0xd4>
 8003d90:	0648      	lsls	r0, r1, #25
 8003d92:	d5ac      	bpl.n	8003cee <_printf_i+0xe2>
 8003d94:	b2ad      	uxth	r5, r5
 8003d96:	e7aa      	b.n	8003cee <_printf_i+0xe2>
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	680d      	ldr	r5, [r1, #0]
 8003d9c:	1d10      	adds	r0, r2, #4
 8003d9e:	6949      	ldr	r1, [r1, #20]
 8003da0:	6018      	str	r0, [r3, #0]
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	062e      	lsls	r6, r5, #24
 8003da6:	d501      	bpl.n	8003dac <_printf_i+0x1a0>
 8003da8:	6019      	str	r1, [r3, #0]
 8003daa:	e002      	b.n	8003db2 <_printf_i+0x1a6>
 8003dac:	066d      	lsls	r5, r5, #25
 8003dae:	d5fb      	bpl.n	8003da8 <_printf_i+0x19c>
 8003db0:	8019      	strh	r1, [r3, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9e04      	ldr	r6, [sp, #16]
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	e7d2      	b.n	8003d60 <_printf_i+0x154>
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	1d11      	adds	r1, r2, #4
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	6816      	ldr	r6, [r2, #0]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	0030      	movs	r0, r6
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	f000 f832 	bl	8003e30 <memchr>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d001      	beq.n	8003dd4 <_printf_i+0x1c8>
 8003dd0:	1b80      	subs	r0, r0, r6
 8003dd2:	6060      	str	r0, [r4, #4]
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	6123      	str	r3, [r4, #16]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9a04      	ldr	r2, [sp, #16]
 8003ddc:	7013      	strb	r3, [r2, #0]
 8003dde:	e7bf      	b.n	8003d60 <_printf_i+0x154>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	0032      	movs	r2, r6
 8003de4:	9906      	ldr	r1, [sp, #24]
 8003de6:	9805      	ldr	r0, [sp, #20]
 8003de8:	9d07      	ldr	r5, [sp, #28]
 8003dea:	47a8      	blx	r5
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d0c1      	beq.n	8003d74 <_printf_i+0x168>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	079b      	lsls	r3, r3, #30
 8003df4:	d415      	bmi.n	8003e22 <_printf_i+0x216>
 8003df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df8:	68e0      	ldr	r0, [r4, #12]
 8003dfa:	4298      	cmp	r0, r3
 8003dfc:	dabc      	bge.n	8003d78 <_printf_i+0x16c>
 8003dfe:	0018      	movs	r0, r3
 8003e00:	e7ba      	b.n	8003d78 <_printf_i+0x16c>
 8003e02:	0022      	movs	r2, r4
 8003e04:	2301      	movs	r3, #1
 8003e06:	9906      	ldr	r1, [sp, #24]
 8003e08:	9805      	ldr	r0, [sp, #20]
 8003e0a:	9e07      	ldr	r6, [sp, #28]
 8003e0c:	3219      	adds	r2, #25
 8003e0e:	47b0      	blx	r6
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d0af      	beq.n	8003d74 <_printf_i+0x168>
 8003e14:	3501      	adds	r5, #1
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	42ab      	cmp	r3, r5
 8003e1e:	dcf0      	bgt.n	8003e02 <_printf_i+0x1f6>
 8003e20:	e7e9      	b.n	8003df6 <_printf_i+0x1ea>
 8003e22:	2500      	movs	r5, #0
 8003e24:	e7f7      	b.n	8003e16 <_printf_i+0x20a>
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	08004429 	.word	0x08004429
 8003e2c:	0800443a 	.word	0x0800443a

08003e30 <memchr>:
 8003e30:	b2c9      	uxtb	r1, r1
 8003e32:	1882      	adds	r2, r0, r2
 8003e34:	4290      	cmp	r0, r2
 8003e36:	d101      	bne.n	8003e3c <memchr+0xc>
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr
 8003e3c:	7803      	ldrb	r3, [r0, #0]
 8003e3e:	428b      	cmp	r3, r1
 8003e40:	d0fb      	beq.n	8003e3a <memchr+0xa>
 8003e42:	3001      	adds	r0, #1
 8003e44:	e7f6      	b.n	8003e34 <memchr+0x4>

08003e46 <memmove>:
 8003e46:	b510      	push	{r4, lr}
 8003e48:	4288      	cmp	r0, r1
 8003e4a:	d902      	bls.n	8003e52 <memmove+0xc>
 8003e4c:	188b      	adds	r3, r1, r2
 8003e4e:	4298      	cmp	r0, r3
 8003e50:	d303      	bcc.n	8003e5a <memmove+0x14>
 8003e52:	2300      	movs	r3, #0
 8003e54:	e007      	b.n	8003e66 <memmove+0x20>
 8003e56:	5c8b      	ldrb	r3, [r1, r2]
 8003e58:	5483      	strb	r3, [r0, r2]
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	d2fb      	bcs.n	8003e56 <memmove+0x10>
 8003e5e:	bd10      	pop	{r4, pc}
 8003e60:	5ccc      	ldrb	r4, [r1, r3]
 8003e62:	54c4      	strb	r4, [r0, r3]
 8003e64:	3301      	adds	r3, #1
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d1fa      	bne.n	8003e60 <memmove+0x1a>
 8003e6a:	e7f8      	b.n	8003e5e <memmove+0x18>

08003e6c <_free_r>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	0005      	movs	r5, r0
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d010      	beq.n	8003e96 <_free_r+0x2a>
 8003e74:	1f0c      	subs	r4, r1, #4
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da00      	bge.n	8003e7e <_free_r+0x12>
 8003e7c:	18e4      	adds	r4, r4, r3
 8003e7e:	0028      	movs	r0, r5
 8003e80:	f000 f8d4 	bl	800402c <__malloc_lock>
 8003e84:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <_free_r+0x90>)
 8003e86:	6813      	ldr	r3, [r2, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <_free_r+0x2c>
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6014      	str	r4, [r2, #0]
 8003e90:	0028      	movs	r0, r5
 8003e92:	f000 f8d3 	bl	800403c <__malloc_unlock>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	42a3      	cmp	r3, r4
 8003e9a:	d908      	bls.n	8003eae <_free_r+0x42>
 8003e9c:	6821      	ldr	r1, [r4, #0]
 8003e9e:	1860      	adds	r0, r4, r1
 8003ea0:	4283      	cmp	r3, r0
 8003ea2:	d1f3      	bne.n	8003e8c <_free_r+0x20>
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	1841      	adds	r1, r0, r1
 8003eaa:	6021      	str	r1, [r4, #0]
 8003eac:	e7ee      	b.n	8003e8c <_free_r+0x20>
 8003eae:	001a      	movs	r2, r3
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <_free_r+0x4e>
 8003eb6:	42a3      	cmp	r3, r4
 8003eb8:	d9f9      	bls.n	8003eae <_free_r+0x42>
 8003eba:	6811      	ldr	r1, [r2, #0]
 8003ebc:	1850      	adds	r0, r2, r1
 8003ebe:	42a0      	cmp	r0, r4
 8003ec0:	d10b      	bne.n	8003eda <_free_r+0x6e>
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	1809      	adds	r1, r1, r0
 8003ec6:	1850      	adds	r0, r2, r1
 8003ec8:	6011      	str	r1, [r2, #0]
 8003eca:	4283      	cmp	r3, r0
 8003ecc:	d1e0      	bne.n	8003e90 <_free_r+0x24>
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	1841      	adds	r1, r0, r1
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	6053      	str	r3, [r2, #4]
 8003ed8:	e7da      	b.n	8003e90 <_free_r+0x24>
 8003eda:	42a0      	cmp	r0, r4
 8003edc:	d902      	bls.n	8003ee4 <_free_r+0x78>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	e7d5      	b.n	8003e90 <_free_r+0x24>
 8003ee4:	6821      	ldr	r1, [r4, #0]
 8003ee6:	1860      	adds	r0, r4, r1
 8003ee8:	4283      	cmp	r3, r0
 8003eea:	d103      	bne.n	8003ef4 <_free_r+0x88>
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	1841      	adds	r1, r0, r1
 8003ef2:	6021      	str	r1, [r4, #0]
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	6054      	str	r4, [r2, #4]
 8003ef8:	e7ca      	b.n	8003e90 <_free_r+0x24>
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	200005a4 	.word	0x200005a4

08003f00 <_malloc_r>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	2303      	movs	r3, #3
 8003f04:	1ccd      	adds	r5, r1, #3
 8003f06:	439d      	bics	r5, r3
 8003f08:	3508      	adds	r5, #8
 8003f0a:	0006      	movs	r6, r0
 8003f0c:	2d0c      	cmp	r5, #12
 8003f0e:	d21f      	bcs.n	8003f50 <_malloc_r+0x50>
 8003f10:	250c      	movs	r5, #12
 8003f12:	42a9      	cmp	r1, r5
 8003f14:	d81e      	bhi.n	8003f54 <_malloc_r+0x54>
 8003f16:	0030      	movs	r0, r6
 8003f18:	f000 f888 	bl	800402c <__malloc_lock>
 8003f1c:	4925      	ldr	r1, [pc, #148]	; (8003fb4 <_malloc_r+0xb4>)
 8003f1e:	680a      	ldr	r2, [r1, #0]
 8003f20:	0014      	movs	r4, r2
 8003f22:	2c00      	cmp	r4, #0
 8003f24:	d11a      	bne.n	8003f5c <_malloc_r+0x5c>
 8003f26:	4f24      	ldr	r7, [pc, #144]	; (8003fb8 <_malloc_r+0xb8>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <_malloc_r+0x38>
 8003f2e:	0021      	movs	r1, r4
 8003f30:	0030      	movs	r0, r6
 8003f32:	f000 f869 	bl	8004008 <_sbrk_r>
 8003f36:	6038      	str	r0, [r7, #0]
 8003f38:	0029      	movs	r1, r5
 8003f3a:	0030      	movs	r0, r6
 8003f3c:	f000 f864 	bl	8004008 <_sbrk_r>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d12b      	bne.n	8003f9c <_malloc_r+0x9c>
 8003f44:	230c      	movs	r3, #12
 8003f46:	0030      	movs	r0, r6
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	f000 f877 	bl	800403c <__malloc_unlock>
 8003f4e:	e003      	b.n	8003f58 <_malloc_r+0x58>
 8003f50:	2d00      	cmp	r5, #0
 8003f52:	dade      	bge.n	8003f12 <_malloc_r+0x12>
 8003f54:	230c      	movs	r3, #12
 8003f56:	6033      	str	r3, [r6, #0]
 8003f58:	2000      	movs	r0, #0
 8003f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	1b5b      	subs	r3, r3, r5
 8003f60:	d419      	bmi.n	8003f96 <_malloc_r+0x96>
 8003f62:	2b0b      	cmp	r3, #11
 8003f64:	d903      	bls.n	8003f6e <_malloc_r+0x6e>
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	18e4      	adds	r4, r4, r3
 8003f6a:	6025      	str	r5, [r4, #0]
 8003f6c:	e003      	b.n	8003f76 <_malloc_r+0x76>
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	42a2      	cmp	r2, r4
 8003f72:	d10e      	bne.n	8003f92 <_malloc_r+0x92>
 8003f74:	600b      	str	r3, [r1, #0]
 8003f76:	0030      	movs	r0, r6
 8003f78:	f000 f860 	bl	800403c <__malloc_unlock>
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	2207      	movs	r2, #7
 8003f80:	300b      	adds	r0, #11
 8003f82:	1d23      	adds	r3, r4, #4
 8003f84:	4390      	bics	r0, r2
 8003f86:	1ac2      	subs	r2, r0, r3
 8003f88:	4298      	cmp	r0, r3
 8003f8a:	d0e6      	beq.n	8003f5a <_malloc_r+0x5a>
 8003f8c:	1a1b      	subs	r3, r3, r0
 8003f8e:	50a3      	str	r3, [r4, r2]
 8003f90:	e7e3      	b.n	8003f5a <_malloc_r+0x5a>
 8003f92:	6053      	str	r3, [r2, #4]
 8003f94:	e7ef      	b.n	8003f76 <_malloc_r+0x76>
 8003f96:	0022      	movs	r2, r4
 8003f98:	6864      	ldr	r4, [r4, #4]
 8003f9a:	e7c2      	b.n	8003f22 <_malloc_r+0x22>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	1cc4      	adds	r4, r0, #3
 8003fa0:	439c      	bics	r4, r3
 8003fa2:	42a0      	cmp	r0, r4
 8003fa4:	d0e1      	beq.n	8003f6a <_malloc_r+0x6a>
 8003fa6:	1a21      	subs	r1, r4, r0
 8003fa8:	0030      	movs	r0, r6
 8003faa:	f000 f82d 	bl	8004008 <_sbrk_r>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d1db      	bne.n	8003f6a <_malloc_r+0x6a>
 8003fb2:	e7c7      	b.n	8003f44 <_malloc_r+0x44>
 8003fb4:	200005a4 	.word	0x200005a4
 8003fb8:	200005a8 	.word	0x200005a8

08003fbc <_realloc_r>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	0007      	movs	r7, r0
 8003fc0:	000d      	movs	r5, r1
 8003fc2:	0016      	movs	r6, r2
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	d105      	bne.n	8003fd4 <_realloc_r+0x18>
 8003fc8:	0011      	movs	r1, r2
 8003fca:	f7ff ff99 	bl	8003f00 <_malloc_r>
 8003fce:	0004      	movs	r4, r0
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	d103      	bne.n	8003fe0 <_realloc_r+0x24>
 8003fd8:	f7ff ff48 	bl	8003e6c <_free_r>
 8003fdc:	0034      	movs	r4, r6
 8003fde:	e7f7      	b.n	8003fd0 <_realloc_r+0x14>
 8003fe0:	f000 f834 	bl	800404c <_malloc_usable_size_r>
 8003fe4:	002c      	movs	r4, r5
 8003fe6:	42b0      	cmp	r0, r6
 8003fe8:	d2f2      	bcs.n	8003fd0 <_realloc_r+0x14>
 8003fea:	0031      	movs	r1, r6
 8003fec:	0038      	movs	r0, r7
 8003fee:	f7ff ff87 	bl	8003f00 <_malloc_r>
 8003ff2:	1e04      	subs	r4, r0, #0
 8003ff4:	d0ec      	beq.n	8003fd0 <_realloc_r+0x14>
 8003ff6:	0029      	movs	r1, r5
 8003ff8:	0032      	movs	r2, r6
 8003ffa:	f7ff fc01 	bl	8003800 <memcpy>
 8003ffe:	0029      	movs	r1, r5
 8004000:	0038      	movs	r0, r7
 8004002:	f7ff ff33 	bl	8003e6c <_free_r>
 8004006:	e7e3      	b.n	8003fd0 <_realloc_r+0x14>

08004008 <_sbrk_r>:
 8004008:	2300      	movs	r3, #0
 800400a:	b570      	push	{r4, r5, r6, lr}
 800400c:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_sbrk_r+0x20>)
 800400e:	0004      	movs	r4, r0
 8004010:	0008      	movs	r0, r1
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	f7fc fa88 	bl	8000528 <_sbrk>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d103      	bne.n	8004024 <_sbrk_r+0x1c>
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d000      	beq.n	8004024 <_sbrk_r+0x1c>
 8004022:	6023      	str	r3, [r4, #0]
 8004024:	bd70      	pop	{r4, r5, r6, pc}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	200006b0 	.word	0x200006b0

0800402c <__malloc_lock>:
 800402c:	b510      	push	{r4, lr}
 800402e:	4802      	ldr	r0, [pc, #8]	; (8004038 <__malloc_lock+0xc>)
 8004030:	f000 f814 	bl	800405c <__retarget_lock_acquire_recursive>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	200006b8 	.word	0x200006b8

0800403c <__malloc_unlock>:
 800403c:	b510      	push	{r4, lr}
 800403e:	4802      	ldr	r0, [pc, #8]	; (8004048 <__malloc_unlock+0xc>)
 8004040:	f000 f80d 	bl	800405e <__retarget_lock_release_recursive>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	200006b8 	.word	0x200006b8

0800404c <_malloc_usable_size_r>:
 800404c:	1f0b      	subs	r3, r1, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1f18      	subs	r0, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	da01      	bge.n	800405a <_malloc_usable_size_r+0xe>
 8004056:	580b      	ldr	r3, [r1, r0]
 8004058:	18c0      	adds	r0, r0, r3
 800405a:	4770      	bx	lr

0800405c <__retarget_lock_acquire_recursive>:
 800405c:	4770      	bx	lr

0800405e <__retarget_lock_release_recursive>:
 800405e:	4770      	bx	lr

08004060 <_init>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr

0800406c <_fini>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr
