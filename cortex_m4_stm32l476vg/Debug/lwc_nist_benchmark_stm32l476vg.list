
lwc_nist_benchmark_stm32l476vg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c3c  08005c3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c44  08005c44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000070  08005cbc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08005cbc  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  00033d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000366b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00037678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ae7  00000000  00000000  00038530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c01  00000000  00000000  00062017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feafd  00000000  00000000  00073c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb4  00000000  00000000  00172768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005770 	.word	0x08005770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005770 	.word	0x08005770

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800058e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 facb 	bl	8000b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f80e 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f8d8 	bl	8000768 <MX_GPIO_Init>
  MX_TIM6_Init();
 80005b8:	f000 f870 	bl	800069c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f8a4 	bl	8000708 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 80005c0:	f003 fcda 	bl	8003f78 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <main+0x24>)
 80005c6:	f000 fb33 	bl	8000c30 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 80005ca:	e7f9      	b.n	80005c0 <main+0x18>
 80005cc:	000f4240 	.word	0x000f4240

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0b8      	sub	sp, #224	; 0xe0
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 ff70 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2288      	movs	r2, #136	; 0x88
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 ff62 	bl	80044c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000600:	2310      	movs	r3, #16
 8000602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fe48 	bl	80012b8 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800062e:	f000 f8a2 	bl	8000776 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa14 	bl	8001a84 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000662:	f000 f888 	bl	8000776 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000666:	2301      	movs	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800066a:	2300      	movs	r3, #0
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fc0d 	bl	8001e90 <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800067c:	f000 f87b 	bl	8000776 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000680:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000684:	f000 fdc2 	bl	800120c <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f872 	bl	8000776 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	37e0      	adds	r7, #224	; 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_TIM6_Init+0x64>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_TIM6_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_TIM6_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_TIM6_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_TIM6_Init+0x64>)
 80006c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_TIM6_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_TIM6_Init+0x64>)
 80006ce:	f002 f89b 	bl	8002808 <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006d8:	f000 f84d 	bl	8000776 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_TIM6_Init+0x64>)
 80006ea:	f002 fb65 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f83f 	bl	8000776 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000062c 	.word	0x2000062c
 8000704:	40001000 	.word	0x40001000

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART1_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800074c:	f002 fbda 	bl	8002f04 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f80e 	bl	8000776 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200005a8 	.word	0x200005a8
 8000764:	40013800 	.word	0x40013800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff03 	bl	8000578 <LL_AHB2_GRP1_EnableClock>

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077e:	e7fe      	b.n	800077e <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x44>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6613      	str	r3, [r2, #96]	; 0x60
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x44>)
 8000794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x44>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6593      	str	r3, [r2, #88]	; 0x58
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x44>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d113      	bne.n	8000802 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_TIM_Base_MspInit+0x48>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <HAL_TIM_Base_MspInit+0x48>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6593      	str	r3, [r2, #88]	; 0x58
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_TIM_Base_MspInit+0x48>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2036      	movs	r0, #54	; 0x36
 80007f8:	f000 fb19 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007fc:	2036      	movs	r0, #54	; 0x36
 80007fe:	f000 fb32 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40001000 	.word	0x40001000
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_UART_MspInit+0x80>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d129      	bne.n	800088a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_UART_MspInit+0x84>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_UART_MspInit+0x84>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000866:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000878:	2307      	movs	r3, #7
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f000 fb09 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40013800 	.word	0x40013800
 8000898:	40021000 	.word	0x40021000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f982 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <TIM6_DAC_IRQHandler+0x10>)
 80008f6:	f002 f87e 	bl	80029f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000062c 	.word	0x2000062c

08000904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	return 1;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_kill>:

int _kill(int pid, int sig)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800091e:	f003 fd87 	bl	8004430 <__errno>
 8000922:	4603      	mov	r3, r0
 8000924:	2216      	movs	r2, #22
 8000926:	601a      	str	r2, [r3, #0]
	return -1;
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_exit>:

void _exit (int status)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ffe7 	bl	8000914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000946:	e7fe      	b.n	8000946 <_exit+0x12>

08000948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
	}

return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e009      	b.n	80009a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf1      	blt.n	8000994 <_write+0x12>
	}
	return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_close>:

int _close(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e2:	605a      	str	r2, [r3, #4]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_isatty>:

int _isatty(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return 1;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f003 fcec 	bl	8004430 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20018000 	.word	0x20018000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	200006c0 	.word	0x200006c0

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <SystemInit+0x5c>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <SystemInit+0x5c>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <SystemInit+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <SystemInit+0x60>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <SystemInit+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <SystemInit+0x60>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <SystemInit+0x60>)
 8000abc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ac0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SystemInit+0x60>)
 8000ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000acc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x60>)
 8000ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SystemInit+0x60>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	40021000 	.word	0x40021000

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff ffca 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
	ldr	r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b18:	f842 3b04 	str.w	r3, [r2], #4

08000b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <LoopForever+0x16>)
	cmp	r2, r3
 8000b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f003 fc9d 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fd3f 	bl	80005a8 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b30:	08005c4c 	.word	0x08005c4c
	ldr	r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b38:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000b3c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000b40:	200006c0 	.word	0x200006c0

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>

08000b46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f961 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f80e 	bl	8000b78 <HAL_InitTick>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	e001      	b.n	8000b6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b68:	f7ff fe0a 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d023      	beq.n	8000bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_InitTick+0x70>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f96d 	bl	8000e82 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d809      	bhi.n	8000bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f937 	bl	8000e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e001      	b.n	8000bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000678 	.word	0x20000678

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000678 	.word	0x20000678

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff29 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff3e 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff8e 	bl	8000d6c <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff31 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa2 	bl	8000dd4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e17f      	b.n	80011ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8171 	beq.w	80011a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d00b      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	2b11      	cmp	r3, #17
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b12      	cmp	r3, #18
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 0201 	and.w	r2, r3, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d118      	bne.n	8000f84 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x128>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b12      	cmp	r3, #18
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	6939      	ldr	r1, [r7, #16]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80ac 	beq.w	80011a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	; 0x60
 800105a:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <HAL_GPIO_Init+0x330>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x242>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x338>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x23e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x33c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x23a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x340>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x236>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x344>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x232>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x348>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x22e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x34c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x22a>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e00c      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00a      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	f002 0203 	and.w	r2, r2, #3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f0:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x334>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_GPIO_Init+0x350>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_GPIO_Init+0x350>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_GPIO_Init+0x350>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_GPIO_Init+0x350>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f ae78 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	48001400 	.word	0x48001400
 80011e8:	48001800 	.word	0x48001800
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121a:	d130      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001228:	d038      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2232      	movs	r2, #50	; 0x32
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001250:	e002      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d102      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f2      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d110      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e00f      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d007      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3d4      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d4:	4b9e      	ldr	r3, [pc, #632]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e4 	beq.w	80014b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x4a>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	f040 808b 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 8087 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001302:	4b93      	ldr	r3, [pc, #588]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3ac      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	4b8c      	ldr	r3, [pc, #560]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_RCC_OscConfig+0x7c>
 800132a:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001332:	e005      	b.n	8001340 <HAL_RCC_OscConfig+0x88>
 8001334:	4b86      	ldr	r3, [pc, #536]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001340:	4293      	cmp	r3, r2
 8001342:	d223      	bcs.n	800138c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd41 	bl	8001dd0 <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e38d      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001358:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a7c      	ldr	r2, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b7a      	ldr	r3, [pc, #488]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	4977      	ldr	r1, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4972      	ldr	r1, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6f      	ldr	r2, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	496a      	ldr	r1, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fd01 	bl	8001dd0 <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e34d      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d8:	f000 fc36 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	495a      	ldr	r1, [pc, #360]	; (8001554 <HAL_RCC_OscConfig+0x29c>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x2a0>)
 80013f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f8:	4b58      	ldr	r3, [pc, #352]	; (800155c <HAL_RCC_OscConfig+0x2a4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbbb 	bl	8000b78 <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d052      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	e331      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d032      	beq.n	800147e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001424:	f7ff fbf8 	bl	8000c18 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fbf4 	bl	8000c18 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e31a      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a40      	ldr	r2, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	493b      	ldr	r1, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	4936      	ldr	r1, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a33      	ldr	r2, [pc, #204]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fbc5 	bl	8000c18 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fbc1 	bl	8000c18 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2e7      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x1da>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d074      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x21a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d064      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d160      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e2c4      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x24a>
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e01d      	b.n	800153e <HAL_RCC_OscConfig+0x286>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x26e>
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x286>
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_RCC_OscConfig+0x298>)
 8001538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fb67 	bl	8000c18 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154c:	e011      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	080059f4 	.word	0x080059f4
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb5a 	bl	8000c18 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e280      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4baf      	ldr	r3, [pc, #700]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb4a 	bl	8000c18 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb46 	bl	8000c18 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e26c      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4ba5      	ldr	r3, [pc, #660]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b99      	ldr	r3, [pc, #612]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e249      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b93      	ldr	r3, [pc, #588]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4990      	ldr	r1, [pc, #576]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a8b      	ldr	r2, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb05 	bl	8000c18 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb01 	bl	8000c18 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e227      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b82      	ldr	r3, [pc, #520]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b7f      	ldr	r3, [pc, #508]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	497c      	ldr	r1, [pc, #496]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b7a      	ldr	r3, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a79      	ldr	r2, [pc, #484]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fae1 	bl	8000c18 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fadd 	bl	8000c18 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e203      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b70      	ldr	r3, [pc, #448]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	4a67      	ldr	r2, [pc, #412]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fabc 	bl	8000c18 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fab8 	bl	8000c18 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1de      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fa9f 	bl	8000c18 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fa9b 	bl	8000c18 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1c1      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b44      	ldr	r3, [pc, #272]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a43      	ldr	r2, [pc, #268]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <HAL_RCC_OscConfig+0x57c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x57c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <HAL_RCC_OscConfig+0x57c>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa62 	bl	8000c18 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fa5e 	bl	8000c18 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e184      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_RCC_OscConfig+0x57c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178e:	e024      	b.n	80017da <HAL_RCC_OscConfig+0x522>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d110      	bne.n	80017ba <HAL_RCC_OscConfig+0x502>
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a24      	ldr	r2, [pc, #144]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a20      	ldr	r2, [pc, #128]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	e00f      	b.n	80017da <HAL_RCC_OscConfig+0x522>
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa19 	bl	8000c18 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff fa15 	bl	8000c18 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e139      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_OscConfig+0x578>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ed      	beq.n	80017ea <HAL_RCC_OscConfig+0x532>
 800180e:	e01a      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fa02 	bl	8000c18 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001816:	e00f      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff f9fe 	bl	8000c18 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d906      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e122      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e8      	bne.n	8001818 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a8a      	ldr	r2, [pc, #552]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8108 	beq.w	8001a72 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	2b02      	cmp	r3, #2
 8001868:	f040 80d0 	bne.w	8001a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800186c:	4b83      	ldr	r3, [pc, #524]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d130      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	3b01      	subs	r3, #1
 800188c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d127      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ac:	2a07      	cmp	r2, #7
 80018ae:	bf14      	ite	ne
 80018b0:	2201      	movne	r2, #1
 80018b2:	2200      	moveq	r2, #0
 80018b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d06e      	beq.n	80019c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d069      	beq.n	80019bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b7      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a5c      	ldr	r2, [pc, #368]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800190a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001910:	f7ff f982 	bl	8000c18 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f97e 	bl	8000c18 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0a4      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <HAL_RCC_OscConfig+0x7c8>)
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001946:	3a01      	subs	r2, #1
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001950:	0212      	lsls	r2, r2, #8
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001958:	0852      	lsrs	r2, r2, #1
 800195a:	3a01      	subs	r2, #1
 800195c:	0552      	lsls	r2, r2, #21
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	3a01      	subs	r2, #1
 8001968:	0652      	lsls	r2, r2, #25
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001970:	0912      	lsrs	r2, r2, #4
 8001972:	0452      	lsls	r2, r2, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	4941      	ldr	r1, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a3e      	ldr	r2, [pc, #248]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a3b      	ldr	r2, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f940 	bl	8000c18 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f93c 	bl	8000c18 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e062      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	e05a      	b.n	8001a72 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e059      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d152      	bne.n	8001a72 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e4:	f7ff f918 	bl	8000c18 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f914 	bl	8000c18 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e03a      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x734>
 8001a0a:	e032      	b.n	8001a72 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d02d      	beq.n	8001a6e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a30:	f023 0303 	bic.w	r3, r3, #3
 8001a34:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f8e7 	bl	8000c18 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f8e3 	bl	8000c18 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x7c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x796>
 8001a6c:	e001      	b.n	8001a72 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	f99d808c 	.word	0xf99d808c

08001a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0c8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a98:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d910      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 0207 	bic.w	r2, r3, #7
 8001aae:	4961      	ldr	r1, [pc, #388]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0b0      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d04c      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d121      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e09e      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d115      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e092      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e086      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e07e      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 0203 	bic.w	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	493f      	ldr	r1, [pc, #252]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3e:	f7ff f86b 	bl	8000c18 <HAL_GetTick>
 8001b42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7ff f867 	bl	8000c18 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e066      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 020c 	and.w	r2, r3, #12
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d1eb      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	492c      	ldr	r1, [pc, #176]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d210      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4924      	ldr	r1, [pc, #144]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1b0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e036      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4918      	ldr	r1, [pc, #96]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4910      	ldr	r1, [pc, #64]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bfa:	f000 f825 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_ClockConfig+0x1b4>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490c      	ldr	r1, [pc, #48]	; (8001c3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe ffaa 	bl	8000b78 <HAL_InitTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	080059f4 	.word	0x080059f4
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4b3e      	ldr	r3, [pc, #248]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d11e      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c7c:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e005      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca4:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	e004      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d134      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0xa6>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d003      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cec:	e005      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf0:	617b      	str	r3, [r7, #20]
      break;
 8001cf2:	e005      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	617b      	str	r3, [r7, #20]
      break;
 8001cf8:	e002      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	617b      	str	r3, [r7, #20]
      break;
 8001cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	fb02 f203 	mul.w	r2, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0e5b      	lsrs	r3, r3, #25
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	3301      	adds	r3, #1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d40:	69bb      	ldr	r3, [r7, #24]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08005a0c 	.word	0x08005a0c
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08005a04 	.word	0x08005a04

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001da8:	f7ff ffda 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0adb      	lsrs	r3, r3, #11
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08005a04 	.word	0x08005a04

08001dd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001de8:	f7ff fa02 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001dec:	6178      	str	r0, [r7, #20]
 8001dee:	e014      	b.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e08:	f7ff f9f2 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e20:	d10b      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d919      	bls.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e2c:	d902      	bls.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2e:	2302      	movs	r3, #2
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	e013      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e34:	2301      	movs	r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e010      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d902      	bls.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e40:	2303      	movs	r3, #3
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e00a      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d102      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e004      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b70      	cmp	r3, #112	; 0x70
 8001e56:	d101      	bne.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 0207 	bic.w	r2, r3, #7
 8001e64:	4909      	ldr	r1, [pc, #36]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d041      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eb4:	d02a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eba:	d824      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ec6:	d81e      	bhi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ed2:	e018      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ed4:	4b86      	ldr	r3, [pc, #536]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a85      	ldr	r2, [pc, #532]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee0:	e015      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fabb 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef2:	e00c      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3320      	adds	r3, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fba6 	bl	800264c <RCCEx_PLLSAI2_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f04:	e003      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0a:	e000      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f14:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f22:	4973      	ldr	r1, [pc, #460]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f2a:	e001      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d041      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f44:	d02a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f4a:	d824      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f50:	d008      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f56:	d81e      	bhi.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d010      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f62:	e018      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f70:	e015      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fa73 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f82:	e00c      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3320      	adds	r3, #32
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fb5e 	bl	800264c <RCCEx_PLLSAI2_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f94:	e003      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	74fb      	strb	r3, [r7, #19]
      break;
 8001f9a:	e000      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb2:	494f      	ldr	r1, [pc, #316]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fba:	e001      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a0 	beq.w	800210e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002000:	2301      	movs	r3, #1
 8002002:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002010:	f7fe fe02 	bl	8000c18 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002016:	e009      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe fdfe 	bl	8000c18 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d902      	bls.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	74fb      	strb	r3, [r7, #19]
        break;
 800202a:	e005      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ef      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d15c      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002048:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01f      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d019      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fdbd 	bl	8000c18 <HAL_GetTick>
 800209e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a0:	e00b      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fdb9 	bl	8000c18 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d902      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	74fb      	strb	r3, [r7, #19]
            break;
 80020b8:	e006      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ec      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020e6:	e009      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	74bb      	strb	r3, [r7, #18]
 80020ec:	e006      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fc:	7c7b      	ldrb	r3, [r7, #17]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	4b9e      	ldr	r3, [pc, #632]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a9d      	ldr	r2, [pc, #628]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800211a:	4b98      	ldr	r3, [pc, #608]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f023 0203 	bic.w	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	4994      	ldr	r1, [pc, #592]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800213c:	4b8f      	ldr	r3, [pc, #572]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 020c 	bic.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	498c      	ldr	r1, [pc, #560]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4983      	ldr	r1, [pc, #524]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002180:	4b7e      	ldr	r3, [pc, #504]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	497b      	ldr	r1, [pc, #492]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	4972      	ldr	r1, [pc, #456]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c4:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	496a      	ldr	r1, [pc, #424]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e6:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	4961      	ldr	r1, [pc, #388]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002208:	4b5c      	ldr	r3, [pc, #368]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	4959      	ldr	r1, [pc, #356]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	4950      	ldr	r1, [pc, #320]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	4948      	ldr	r1, [pc, #288]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800226e:	4b43      	ldr	r3, [pc, #268]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	493f      	ldr	r1, [pc, #252]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d028      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229e:	4937      	ldr	r1, [pc, #220]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ae:	d106      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ba:	60d3      	str	r3, [r2, #12]
 80022bc:	e011      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c6:	d10c      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f8c8 	bl	8002464 <RCCEx_PLLSAI1_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d028      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	491f      	ldr	r1, [pc, #124]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230c:	d106      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002318:	60d3      	str	r3, [r2, #12]
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f899 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236a:	d109      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a02      	ldr	r2, [pc, #8]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002376:	60d3      	str	r3, [r2, #12]
 8002378:	e014      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2101      	movs	r1, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f867 	bl	8002464 <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d02f      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023be:	4928      	ldr	r1, [pc, #160]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ce:	d10d      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3304      	adds	r3, #4
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f844 	bl	8002464 <RCCEx_PLLSAI1_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d014      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	74bb      	strb	r3, [r7, #18]
 80023ea:	e011      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3320      	adds	r3, #32
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f925 	bl	800264c <RCCEx_PLLSAI2_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242a:	490d      	ldr	r1, [pc, #52]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002456:	7cbb      	ldrb	r3, [r7, #18]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000

08002464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002472:	4b75      	ldr	r3, [pc, #468]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d018      	beq.n	80024b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800247e:	4b72      	ldr	r3, [pc, #456]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d10d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
       ||
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
       ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d047      	beq.n	800253a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e044      	b.n	800253a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d018      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0x86>
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d825      	bhi.n	8002508 <RCCEx_PLLSAI1_Config+0xa4>
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d002      	beq.n	80024c6 <RCCEx_PLLSAI1_Config+0x62>
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d009      	beq.n	80024d8 <RCCEx_PLLSAI1_Config+0x74>
 80024c4:	e020      	b.n	8002508 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024c6:	4b60      	ldr	r3, [pc, #384]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d6:	e01a      	b.n	800250e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024d8:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d116      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e8:	e013      	b.n	8002512 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024f6:	4b54      	ldr	r3, [pc, #336]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002506:	e006      	b.n	8002516 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e004      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800250e:	bf00      	nop
 8002510:	e002      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002512:	bf00      	nop
 8002514:	e000      	b.n	8002518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002516:	bf00      	nop
    }

    if(status == HAL_OK)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	430b      	orrs	r3, r1
 8002534:	4944      	ldr	r1, [pc, #272]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d17d      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a40      	ldr	r2, [pc, #256]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800254a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe fb64 	bl	8000c18 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002552:	e009      	b.n	8002568 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002554:	f7fe fb60 	bl	8000c18 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	73fb      	strb	r3, [r7, #15]
        break;
 8002566:	e005      	b.n	8002574 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002568:	4b37      	ldr	r3, [pc, #220]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1ef      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d160      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68d2      	ldr	r2, [r2, #12]
 8002596:	0912      	lsrs	r2, r2, #4
 8002598:	0452      	lsls	r2, r2, #17
 800259a:	430a      	orrs	r2, r1
 800259c:	492a      	ldr	r1, [pc, #168]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	610b      	str	r3, [r1, #16]
 80025a2:	e027      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d112      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	0211      	lsls	r1, r2, #8
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6912      	ldr	r2, [r2, #16]
 80025c0:	0852      	lsrs	r2, r2, #1
 80025c2:	3a01      	subs	r2, #1
 80025c4:	0552      	lsls	r2, r2, #21
 80025c6:	430a      	orrs	r2, r1
 80025c8:	491f      	ldr	r1, [pc, #124]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	610b      	str	r3, [r1, #16]
 80025ce:	e011      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	0211      	lsls	r1, r2, #8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6952      	ldr	r2, [r2, #20]
 80025e6:	0852      	lsrs	r2, r2, #1
 80025e8:	3a01      	subs	r2, #1
 80025ea:	0652      	lsls	r2, r2, #25
 80025ec:	430a      	orrs	r2, r1
 80025ee:	4916      	ldr	r1, [pc, #88]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fb0a 	bl	8000c18 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002606:	e009      	b.n	800261c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002608:	f7fe fb06 	bl	8000c18 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	73fb      	strb	r3, [r7, #15]
          break;
 800261a:	e005      	b.n	8002628 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	4904      	ldr	r1, [pc, #16]	; (8002648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800265a:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0203 	and.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
       ||
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800267e:	4b61      	ldr	r3, [pc, #388]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
       ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d047      	beq.n	8002722 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e044      	b.n	8002722 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d018      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0x86>
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d825      	bhi.n	80026f0 <RCCEx_PLLSAI2_Config+0xa4>
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d002      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x62>
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d009      	beq.n	80026c0 <RCCEx_PLLSAI2_Config+0x74>
 80026ac:	e020      	b.n	80026f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ae:	4b55      	ldr	r3, [pc, #340]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11d      	bne.n	80026f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026be:	e01a      	b.n	80026f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d116      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e013      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026d2:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026de:	4b49      	ldr	r3, [pc, #292]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ee:	e006      	b.n	80026fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e004      	b.n	8002700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026f6:	bf00      	nop
 80026f8:	e002      	b.n	8002700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fa:	bf00      	nop
 80026fc:	e000      	b.n	8002700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	430b      	orrs	r3, r1
 800271c:	4939      	ldr	r1, [pc, #228]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d167      	bne.n	80027f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fa70 	bl	8000c18 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273a:	e009      	b.n	8002750 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800273c:	f7fe fa6c 	bl	8000c18 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	73fb      	strb	r3, [r7, #15]
        break;
 800274e:	e005      	b.n	800275c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ef      	bne.n	800273c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d14a      	bne.n	80027f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0912      	lsrs	r2, r2, #4
 8002780:	0452      	lsls	r2, r2, #17
 8002782:	430a      	orrs	r2, r1
 8002784:	491f      	ldr	r1, [pc, #124]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	614b      	str	r3, [r1, #20]
 800278a:	e011      	b.n	80027b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002794:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6892      	ldr	r2, [r2, #8]
 800279c:	0211      	lsls	r1, r2, #8
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6912      	ldr	r2, [r2, #16]
 80027a2:	0852      	lsrs	r2, r2, #1
 80027a4:	3a01      	subs	r2, #1
 80027a6:	0652      	lsls	r2, r2, #25
 80027a8:	430a      	orrs	r2, r1
 80027aa:	4916      	ldr	r1, [pc, #88]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fa2c 	bl	8000c18 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c2:	e009      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c4:	f7fe fa28 	bl	8000c18 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	73fb      	strb	r3, [r7, #15]
          break;
 80027d6:	e005      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ef      	beq.n	80027c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e049      	b.n	80028ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fd ffca 	bl	80007c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 fa1c 	bl	8002c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d001      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e04f      	b.n	8002970 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_TIM_Base_Start_IT+0xc4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x76>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d018      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x76>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_TIM_Base_Start_IT+0xc8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_TIM_Base_Start_IT+0xcc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x76>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_TIM_Base_Start_IT+0xd0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x76>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_TIM_Base_Start_IT+0xd4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_TIM_Base_Start_IT+0x76>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_TIM_Base_Start_IT+0xd8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d115      	bne.n	800295a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_TIM_Base_Start_IT+0xdc>)
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b06      	cmp	r3, #6
 800293e:	d015      	beq.n	800296c <HAL_TIM_Base_Start_IT+0xb4>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002946:	d011      	beq.n	800296c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	e008      	b.n	800296c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e000      	b.n	800296e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40013400 	.word	0x40013400
 8002990:	40014000 	.word	0x40014000
 8002994:	00010007 	.word	0x00010007

08002998 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10f      	bne.n	80029e0 <HAL_TIM_Base_Stop_IT+0x48>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	f240 4344 	movw	r3, #1092	; 0x444
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_TIM_Base_Stop_IT+0x48>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d122      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d11b      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0202 	mvn.w	r2, #2
 8002a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f905 	bl	8002c48 <HAL_TIM_IC_CaptureCallback>
 8002a3e:	e005      	b.n	8002a4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8f7 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f908 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d122      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d11b      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0204 	mvn.w	r2, #4
 8002a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8db 	bl	8002c48 <HAL_TIM_IC_CaptureCallback>
 8002a92:	e005      	b.n	8002aa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f8cd 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8de 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d122      	bne.n	8002afa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d11b      	bne.n	8002afa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0208 	mvn.w	r2, #8
 8002aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f8b1 	bl	8002c48 <HAL_TIM_IC_CaptureCallback>
 8002ae6:	e005      	b.n	8002af4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8a3 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8b4 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d122      	bne.n	8002b4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d11b      	bne.n	8002b4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0210 	mvn.w	r2, #16
 8002b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2208      	movs	r2, #8
 8002b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f887 	bl	8002c48 <HAL_TIM_IC_CaptureCallback>
 8002b3a:	e005      	b.n	8002b48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f879 	bl	8002c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f88a 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10e      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0201 	mvn.w	r2, #1
 8002b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f001 fb75 	bl	8004264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d10e      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f99b 	bl	8002edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f98e 	bl	8002ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f838 	bl	8002c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d10e      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0220 	mvn.w	r2, #32
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f94e 	bl	8002ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <TIM_Base_SetConfig+0x114>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca2:	d00f      	beq.n	8002cc4 <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <TIM_Base_SetConfig+0x118>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3c      	ldr	r2, [pc, #240]	; (8002da0 <TIM_Base_SetConfig+0x11c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d007      	beq.n	8002cc4 <TIM_Base_SetConfig+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a3b      	ldr	r2, [pc, #236]	; (8002da4 <TIM_Base_SetConfig+0x120>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <TIM_Base_SetConfig+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <TIM_Base_SetConfig+0x124>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d108      	bne.n	8002cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2f      	ldr	r2, [pc, #188]	; (8002d98 <TIM_Base_SetConfig+0x114>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01f      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d01b      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2c      	ldr	r2, [pc, #176]	; (8002d9c <TIM_Base_SetConfig+0x118>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d017      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <TIM_Base_SetConfig+0x11c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	; (8002da4 <TIM_Base_SetConfig+0x120>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00f      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <TIM_Base_SetConfig+0x124>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a28      	ldr	r2, [pc, #160]	; (8002dac <TIM_Base_SetConfig+0x128>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a27      	ldr	r2, [pc, #156]	; (8002db0 <TIM_Base_SetConfig+0x12c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <TIM_Base_SetConfig+0x130>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <TIM_Base_SetConfig+0x114>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00f      	beq.n	8002d7c <TIM_Base_SetConfig+0xf8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <TIM_Base_SetConfig+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00b      	beq.n	8002d7c <TIM_Base_SetConfig+0xf8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <TIM_Base_SetConfig+0x128>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_Base_SetConfig+0xf8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <TIM_Base_SetConfig+0x12c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_Base_SetConfig+0xf8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <TIM_Base_SetConfig+0x130>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d103      	bne.n	8002d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	615a      	str	r2, [r3, #20]
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40000c00 	.word	0x40000c00
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800

08002db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e068      	b.n	8002ea2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e42:	d018      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10c      	bne.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40013400 	.word	0x40013400
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40014000 	.word	0x40014000

08002ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e040      	b.n	8002f98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fc74 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8c0 	bl	80030c8 <UART_SetConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e022      	b.n	8002f98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fb3e 	bl	80035dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fbc5 	bl	8003720 <UART_CheckIdleState>
 8002f96:	4603      	mov	r3, r0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	f040 8082 	bne.w	80030be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_UART_Transmit+0x26>
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07a      	b.n	80030c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Transmit+0x38>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e073      	b.n	80030c0 <HAL_UART_Transmit+0x120>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	; 0x21
 8002fec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fee:	f7fd fe13 	bl	8000c18 <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d108      	bne.n	8003020 <HAL_UART_Transmit+0x80>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e003      	b.n	8003028 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003030:	e02d      	b.n	800308e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fbb8 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e039      	b.n	80030c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305e:	b292      	uxth	r2, r2
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3302      	adds	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e008      	b.n	800307c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	b292      	uxth	r2, r2
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1cb      	bne.n	8003032 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fb84 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e005      	b.n	80030c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4bad      	ldr	r3, [pc, #692]	; (80033a8 <UART_SetConfig+0x2e0>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	69f9      	ldr	r1, [r7, #28]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4aa2      	ldr	r2, [pc, #648]	; (80033ac <UART_SetConfig+0x2e4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	430a      	orrs	r2, r1
 8003142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a99      	ldr	r2, [pc, #612]	; (80033b0 <UART_SetConfig+0x2e8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d121      	bne.n	8003192 <UART_SetConfig+0xca>
 800314e:	4b99      	ldr	r3, [pc, #612]	; (80033b4 <UART_SetConfig+0x2ec>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d817      	bhi.n	800318c <UART_SetConfig+0xc4>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x9c>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003175 	.word	0x08003175
 8003168:	08003181 	.word	0x08003181
 800316c:	0800317b 	.word	0x0800317b
 8003170:	08003187 	.word	0x08003187
 8003174:	2301      	movs	r3, #1
 8003176:	76fb      	strb	r3, [r7, #27]
 8003178:	e0e7      	b.n	800334a <UART_SetConfig+0x282>
 800317a:	2302      	movs	r3, #2
 800317c:	76fb      	strb	r3, [r7, #27]
 800317e:	e0e4      	b.n	800334a <UART_SetConfig+0x282>
 8003180:	2304      	movs	r3, #4
 8003182:	76fb      	strb	r3, [r7, #27]
 8003184:	e0e1      	b.n	800334a <UART_SetConfig+0x282>
 8003186:	2308      	movs	r3, #8
 8003188:	76fb      	strb	r3, [r7, #27]
 800318a:	e0de      	b.n	800334a <UART_SetConfig+0x282>
 800318c:	2310      	movs	r3, #16
 800318e:	76fb      	strb	r3, [r7, #27]
 8003190:	e0db      	b.n	800334a <UART_SetConfig+0x282>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a88      	ldr	r2, [pc, #544]	; (80033b8 <UART_SetConfig+0x2f0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d132      	bne.n	8003202 <UART_SetConfig+0x13a>
 800319c:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <UART_SetConfig+0x2ec>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d828      	bhi.n	80031fc <UART_SetConfig+0x134>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <UART_SetConfig+0xe8>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	080031fd 	.word	0x080031fd
 80031b8:	080031fd 	.word	0x080031fd
 80031bc:	080031fd 	.word	0x080031fd
 80031c0:	080031f1 	.word	0x080031f1
 80031c4:	080031fd 	.word	0x080031fd
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	080031fd 	.word	0x080031fd
 80031d0:	080031eb 	.word	0x080031eb
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	080031fd 	.word	0x080031fd
 80031e0:	080031f7 	.word	0x080031f7
 80031e4:	2300      	movs	r3, #0
 80031e6:	76fb      	strb	r3, [r7, #27]
 80031e8:	e0af      	b.n	800334a <UART_SetConfig+0x282>
 80031ea:	2302      	movs	r3, #2
 80031ec:	76fb      	strb	r3, [r7, #27]
 80031ee:	e0ac      	b.n	800334a <UART_SetConfig+0x282>
 80031f0:	2304      	movs	r3, #4
 80031f2:	76fb      	strb	r3, [r7, #27]
 80031f4:	e0a9      	b.n	800334a <UART_SetConfig+0x282>
 80031f6:	2308      	movs	r3, #8
 80031f8:	76fb      	strb	r3, [r7, #27]
 80031fa:	e0a6      	b.n	800334a <UART_SetConfig+0x282>
 80031fc:	2310      	movs	r3, #16
 80031fe:	76fb      	strb	r3, [r7, #27]
 8003200:	e0a3      	b.n	800334a <UART_SetConfig+0x282>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UART_SetConfig+0x2f4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d120      	bne.n	800324e <UART_SetConfig+0x186>
 800320c:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <UART_SetConfig+0x2ec>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003216:	2b30      	cmp	r3, #48	; 0x30
 8003218:	d013      	beq.n	8003242 <UART_SetConfig+0x17a>
 800321a:	2b30      	cmp	r3, #48	; 0x30
 800321c:	d814      	bhi.n	8003248 <UART_SetConfig+0x180>
 800321e:	2b20      	cmp	r3, #32
 8003220:	d009      	beq.n	8003236 <UART_SetConfig+0x16e>
 8003222:	2b20      	cmp	r3, #32
 8003224:	d810      	bhi.n	8003248 <UART_SetConfig+0x180>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <UART_SetConfig+0x168>
 800322a:	2b10      	cmp	r3, #16
 800322c:	d006      	beq.n	800323c <UART_SetConfig+0x174>
 800322e:	e00b      	b.n	8003248 <UART_SetConfig+0x180>
 8003230:	2300      	movs	r3, #0
 8003232:	76fb      	strb	r3, [r7, #27]
 8003234:	e089      	b.n	800334a <UART_SetConfig+0x282>
 8003236:	2302      	movs	r3, #2
 8003238:	76fb      	strb	r3, [r7, #27]
 800323a:	e086      	b.n	800334a <UART_SetConfig+0x282>
 800323c:	2304      	movs	r3, #4
 800323e:	76fb      	strb	r3, [r7, #27]
 8003240:	e083      	b.n	800334a <UART_SetConfig+0x282>
 8003242:	2308      	movs	r3, #8
 8003244:	76fb      	strb	r3, [r7, #27]
 8003246:	e080      	b.n	800334a <UART_SetConfig+0x282>
 8003248:	2310      	movs	r3, #16
 800324a:	76fb      	strb	r3, [r7, #27]
 800324c:	e07d      	b.n	800334a <UART_SetConfig+0x282>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a5b      	ldr	r2, [pc, #364]	; (80033c0 <UART_SetConfig+0x2f8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d120      	bne.n	800329a <UART_SetConfig+0x1d2>
 8003258:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <UART_SetConfig+0x2ec>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003262:	2bc0      	cmp	r3, #192	; 0xc0
 8003264:	d013      	beq.n	800328e <UART_SetConfig+0x1c6>
 8003266:	2bc0      	cmp	r3, #192	; 0xc0
 8003268:	d814      	bhi.n	8003294 <UART_SetConfig+0x1cc>
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d009      	beq.n	8003282 <UART_SetConfig+0x1ba>
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d810      	bhi.n	8003294 <UART_SetConfig+0x1cc>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <UART_SetConfig+0x1b4>
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x1c0>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x1cc>
 800327c:	2300      	movs	r3, #0
 800327e:	76fb      	strb	r3, [r7, #27]
 8003280:	e063      	b.n	800334a <UART_SetConfig+0x282>
 8003282:	2302      	movs	r3, #2
 8003284:	76fb      	strb	r3, [r7, #27]
 8003286:	e060      	b.n	800334a <UART_SetConfig+0x282>
 8003288:	2304      	movs	r3, #4
 800328a:	76fb      	strb	r3, [r7, #27]
 800328c:	e05d      	b.n	800334a <UART_SetConfig+0x282>
 800328e:	2308      	movs	r3, #8
 8003290:	76fb      	strb	r3, [r7, #27]
 8003292:	e05a      	b.n	800334a <UART_SetConfig+0x282>
 8003294:	2310      	movs	r3, #16
 8003296:	76fb      	strb	r3, [r7, #27]
 8003298:	e057      	b.n	800334a <UART_SetConfig+0x282>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <UART_SetConfig+0x2fc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d125      	bne.n	80032f0 <UART_SetConfig+0x228>
 80032a4:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <UART_SetConfig+0x2ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b2:	d017      	beq.n	80032e4 <UART_SetConfig+0x21c>
 80032b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b8:	d817      	bhi.n	80032ea <UART_SetConfig+0x222>
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d00b      	beq.n	80032d8 <UART_SetConfig+0x210>
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c4:	d811      	bhi.n	80032ea <UART_SetConfig+0x222>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <UART_SetConfig+0x20a>
 80032ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ce:	d006      	beq.n	80032de <UART_SetConfig+0x216>
 80032d0:	e00b      	b.n	80032ea <UART_SetConfig+0x222>
 80032d2:	2300      	movs	r3, #0
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e038      	b.n	800334a <UART_SetConfig+0x282>
 80032d8:	2302      	movs	r3, #2
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e035      	b.n	800334a <UART_SetConfig+0x282>
 80032de:	2304      	movs	r3, #4
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e032      	b.n	800334a <UART_SetConfig+0x282>
 80032e4:	2308      	movs	r3, #8
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e02f      	b.n	800334a <UART_SetConfig+0x282>
 80032ea:	2310      	movs	r3, #16
 80032ec:	76fb      	strb	r3, [r7, #27]
 80032ee:	e02c      	b.n	800334a <UART_SetConfig+0x282>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <UART_SetConfig+0x2e4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d125      	bne.n	8003346 <UART_SetConfig+0x27e>
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <UART_SetConfig+0x2ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003308:	d017      	beq.n	800333a <UART_SetConfig+0x272>
 800330a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800330e:	d817      	bhi.n	8003340 <UART_SetConfig+0x278>
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003314:	d00b      	beq.n	800332e <UART_SetConfig+0x266>
 8003316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331a:	d811      	bhi.n	8003340 <UART_SetConfig+0x278>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <UART_SetConfig+0x260>
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003324:	d006      	beq.n	8003334 <UART_SetConfig+0x26c>
 8003326:	e00b      	b.n	8003340 <UART_SetConfig+0x278>
 8003328:	2300      	movs	r3, #0
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e00d      	b.n	800334a <UART_SetConfig+0x282>
 800332e:	2302      	movs	r3, #2
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e00a      	b.n	800334a <UART_SetConfig+0x282>
 8003334:	2304      	movs	r3, #4
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e007      	b.n	800334a <UART_SetConfig+0x282>
 800333a:	2308      	movs	r3, #8
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e004      	b.n	800334a <UART_SetConfig+0x282>
 8003340:	2310      	movs	r3, #16
 8003342:	76fb      	strb	r3, [r7, #27]
 8003344:	e001      	b.n	800334a <UART_SetConfig+0x282>
 8003346:	2310      	movs	r3, #16
 8003348:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <UART_SetConfig+0x2e4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	f040 8087 	bne.w	8003464 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003356:	7efb      	ldrb	r3, [r7, #27]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d837      	bhi.n	80033cc <UART_SetConfig+0x304>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x29c>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003389 	.word	0x08003389
 8003368:	080033cd 	.word	0x080033cd
 800336c:	08003391 	.word	0x08003391
 8003370:	080033cd 	.word	0x080033cd
 8003374:	08003397 	.word	0x08003397
 8003378:	080033cd 	.word	0x080033cd
 800337c:	080033cd 	.word	0x080033cd
 8003380:	080033cd 	.word	0x080033cd
 8003384:	0800339f 	.word	0x0800339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7fe fcf6 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800338c:	6178      	str	r0, [r7, #20]
        break;
 800338e:	e022      	b.n	80033d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <UART_SetConfig+0x300>)
 8003392:	617b      	str	r3, [r7, #20]
        break;
 8003394:	e01f      	b.n	80033d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003396:	f7fe fc57 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 800339a:	6178      	str	r0, [r7, #20]
        break;
 800339c:	e01b      	b.n	80033d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a2:	617b      	str	r3, [r7, #20]
        break;
 80033a4:	e017      	b.n	80033d6 <UART_SetConfig+0x30e>
 80033a6:	bf00      	nop
 80033a8:	efff69f3 	.word	0xefff69f3
 80033ac:	40008000 	.word	0x40008000
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40004400 	.word	0x40004400
 80033bc:	40004800 	.word	0x40004800
 80033c0:	40004c00 	.word	0x40004c00
 80033c4:	40005000 	.word	0x40005000
 80033c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	76bb      	strb	r3, [r7, #26]
        break;
 80033d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80f1 	beq.w	80035c0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d305      	bcc.n	80033fa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d902      	bls.n	8003400 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	76bb      	strb	r3, [r7, #26]
 80033fe:	e0df      	b.n	80035c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4618      	mov	r0, r3
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	020b      	lsls	r3, r1, #8
 8003412:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003416:	0202      	lsls	r2, r0, #8
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	6849      	ldr	r1, [r1, #4]
 800341c:	0849      	lsrs	r1, r1, #1
 800341e:	4608      	mov	r0, r1
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	1814      	adds	r4, r2, r0
 8003426:	eb43 0501 	adc.w	r5, r3, r1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	4620      	mov	r0, r4
 8003436:	4629      	mov	r1, r5
 8003438:	f7fc ff22 	bl	8000280 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4613      	mov	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344a:	d308      	bcc.n	800345e <UART_SetConfig+0x396>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d204      	bcs.n	800345e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e0b0      	b.n	80035c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ad      	b.n	80035c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346c:	d15c      	bne.n	8003528 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800346e:	7efb      	ldrb	r3, [r7, #27]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d828      	bhi.n	80034c6 <UART_SetConfig+0x3fe>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <UART_SetConfig+0x3b4>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034b1 	.word	0x080034b1
 8003488:	080034c7 	.word	0x080034c7
 800348c:	080034b7 	.word	0x080034b7
 8003490:	080034c7 	.word	0x080034c7
 8003494:	080034c7 	.word	0x080034c7
 8003498:	080034c7 	.word	0x080034c7
 800349c:	080034bf 	.word	0x080034bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a0:	f7fe fc6a 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80034a4:	6178      	str	r0, [r7, #20]
        break;
 80034a6:	e013      	b.n	80034d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7fe fc7c 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 80034ac:	6178      	str	r0, [r7, #20]
        break;
 80034ae:	e00f      	b.n	80034d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <UART_SetConfig+0x510>)
 80034b2:	617b      	str	r3, [r7, #20]
        break;
 80034b4:	e00c      	b.n	80034d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b6:	f7fe fbc7 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80034ba:	6178      	str	r0, [r7, #20]
        break;
 80034bc:	e008      	b.n	80034d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c2:	617b      	str	r3, [r7, #20]
        break;
 80034c4:	e004      	b.n	80034d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	76bb      	strb	r3, [r7, #26]
        break;
 80034ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d074      	beq.n	80035c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005a      	lsls	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d916      	bls.n	8003522 <UART_SetConfig+0x45a>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d212      	bcs.n	8003522 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f023 030f 	bic.w	r3, r3, #15
 8003504:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	b29a      	uxth	r2, r3
 8003512:	89fb      	ldrh	r3, [r7, #14]
 8003514:	4313      	orrs	r3, r2
 8003516:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	89fa      	ldrh	r2, [r7, #14]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	e04e      	b.n	80035c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	76bb      	strb	r3, [r7, #26]
 8003526:	e04b      	b.n	80035c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003528:	7efb      	ldrb	r3, [r7, #27]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d827      	bhi.n	800357e <UART_SetConfig+0x4b6>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0x46c>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003559 	.word	0x08003559
 8003538:	08003561 	.word	0x08003561
 800353c:	08003569 	.word	0x08003569
 8003540:	0800357f 	.word	0x0800357f
 8003544:	0800356f 	.word	0x0800356f
 8003548:	0800357f 	.word	0x0800357f
 800354c:	0800357f 	.word	0x0800357f
 8003550:	0800357f 	.word	0x0800357f
 8003554:	08003577 	.word	0x08003577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7fe fc0e 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800355c:	6178      	str	r0, [r7, #20]
        break;
 800355e:	e013      	b.n	8003588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003560:	f7fe fc20 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8003564:	6178      	str	r0, [r7, #20]
        break;
 8003566:	e00f      	b.n	8003588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <UART_SetConfig+0x510>)
 800356a:	617b      	str	r3, [r7, #20]
        break;
 800356c:	e00c      	b.n	8003588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800356e:	f7fe fb6b 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8003572:	6178      	str	r0, [r7, #20]
        break;
 8003574:	e008      	b.n	8003588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357a:	617b      	str	r3, [r7, #20]
        break;
 800357c:	e004      	b.n	8003588 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	76bb      	strb	r3, [r7, #26]
        break;
 8003586:	bf00      	nop
    }

    if (pclk != 0U)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	085a      	lsrs	r2, r3, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	441a      	add	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	d908      	bls.n	80035bc <UART_SetConfig+0x4f4>
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d204      	bcs.n	80035bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e001      	b.n	80035c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bdb0      	pop	{r4, r5, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	00f42400 	.word	0x00f42400

080035dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036da:	d10a      	bne.n	80036f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003730:	f7fd fa72 	bl	8000c18 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d10e      	bne.n	8003762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f82d 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e023      	b.n	80037aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d10e      	bne.n	800378e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f817 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e00d      	b.n	80037aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c2:	e05e      	b.n	8003882 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d05a      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fd fa24 	bl	8000c18 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11b      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e043      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02c      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003836:	d124      	bne.n	8003882 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003840:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003850:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e00f      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4013      	ands	r3, r2
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	429a      	cmp	r2, r3
 800389e:	d091      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <injectm_ref>:
// The function injectm_ref adds a 16-byte block of the message to the two
// leftmost branches of the state (i.e. to the state-words x0, y0, x1, and y1),
// whereby the block is first ransformed via a linear Feistel function.

void injectm_ref(state_t *state, const uchar_t *msgbytes, int nb)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b08b      	sub	sp, #44	; 0x2c
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
  uint32_t *msgwords = (uint32_t *) msgbytes;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpx = 0, tmpy = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	2300      	movs	r3, #0
 80038c0:	623b      	str	r3, [r7, #32]
  int i, j;

  // Since the message block is 16 bytes long, we need to consider only two
  // x-words when computing tmpx and two y-words when computing tmpy.

  for(i = 0; i < MSGBLOCK_WLEN; i += 2) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e013      	b.n	80038f0 <injectm_ref+0x46>
    tmpx ^= msgwords[i];
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4413      	add	r3, r2
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	4053      	eors	r3, r2
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    tmpy ^= msgwords[i+1];
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4413      	add	r3, r2
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	4053      	eors	r3, r2
 80038e8:	623b      	str	r3, [r7, #32]
  for(i = 0; i < MSGBLOCK_WLEN; i += 2) {
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3302      	adds	r3, #2
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	dde8      	ble.n	80038c8 <injectm_ref+0x1e>
  }
  tmpx = ELL(tmpx);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	4053      	eors	r3, r2
 80038fe:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  tmpy = ELL(tmpy);
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	041a      	lsls	r2, r3, #16
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	4053      	eors	r3, r2
 800390c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003910:	623b      	str	r3, [r7, #32]
  // The two leftmost x-words of the state are updated by adding the two
  // x-words of the message and tmpy to them, and the same is done with the two
  // leftmost y-words. The remaining nb/2-2 x-words are updated by just adding
  // tmpy to them, and the same is done with the remaining nb/2-2 y-words.

  for (i = j = 0; i < MSGBLOCK_WLEN/2; i++) {
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e02a      	b.n	8003972 <injectm_ref+0xc8>
    state->x[i] ^= (msgwords[j++] ^ tmpy);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	61ba      	str	r2, [r7, #24]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4413      	add	r3, r2
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	405a      	eors	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	69f9      	ldr	r1, [r7, #28]
 8003932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003936:	ea82 0103 	eor.w	r1, r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    state->y[i] ^= (msgwords[j++] ^ tmpx);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	61ba      	str	r2, [r7, #24]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4413      	add	r3, r2
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	405a      	eors	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	3108      	adds	r1, #8
 800395a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800395e:	ea82 0103 	eor.w	r1, r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	3208      	adds	r2, #8
 8003968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = j = 0; i < MSGBLOCK_WLEN/2; i++) {
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2b01      	cmp	r3, #1
 8003976:	ddd1      	ble.n	800391c <injectm_ref+0x72>
  }
  for (i = MSGBLOCK_WLEN/2; i < nb/2; i++) {
 8003978:	2302      	movs	r3, #2
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	e01a      	b.n	80039b4 <injectm_ref+0x10a>
    state->x[i] ^= tmpy;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	ea82 0103 	eor.w	r1, r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    state->y[i] ^= tmpx;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	3208      	adds	r2, #8
 800399a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	ea82 0103 	eor.w	r1, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	3208      	adds	r2, #8
 80039aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = MSGBLOCK_WLEN/2; i < nb/2; i++) {
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0fda      	lsrs	r2, r3, #31
 80039b8:	4413      	add	r3, r2
 80039ba:	105b      	asrs	r3, r3, #1
 80039bc:	461a      	mov	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	dbdc      	blt.n	800397e <injectm_ref+0xd4>
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	372c      	adds	r7, #44	; 0x2c
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <trunc_state>:

// The function trunc_state extracts the four 32-bit words x0, y0, x1, and y1
// from the state and copies these 16 bytes to the array <out>.

void trunc_state(uchar_t *out, const state_t *state)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b087      	sub	sp, #28
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t *out_words = (uint32_t *) out;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60fb      	str	r3, [r7, #12]
  int i, j;

  for (i = j = 0; j < SQZBLOCK_WLEN; i++) {
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e019      	b.n	8003a1e <trunc_state+0x4c>
    out_words[j++] = state->x[i];
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	613a      	str	r2, [r7, #16]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	6979      	ldr	r1, [r7, #20]
 80039fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80039fe:	601a      	str	r2, [r3, #0]
    out_words[j++] = state->y[i];
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	613a      	str	r2, [r7, #16]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	3108      	adds	r1, #8
 8003a12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003a16:	601a      	str	r2, [r3, #0]
  for (i = j = 0; j < SQZBLOCK_WLEN; i++) {
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	dde2      	ble.n	80039ea <trunc_state+0x18>
  }
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <crypto_hash>:

// To ensure compatibility with the SUPERCOP, the below implementation of
// crypto_hash can handle overlapping input and output buffers.

int crypto_hash(uchar_t *out, const uchar_t *in, ullint_t inlen)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b09c      	sub	sp, #112	; 0x70
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	e9c7 2300 	strd	r2, r3, [r7]
  state_t state = { { 0 }, { 0 } };   // State with x, y array initialized to 0
 8003a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a44:	2240      	movs	r2, #64	; 0x40
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fd3b 	bl	80044c4 <memset>
  uchar_t lastblk[MSGBLOCK_BLEN] = { 0 };   // Buffer for last block of message
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	f107 0318 	add.w	r3, r7, #24
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
  // The type size_t is large enough to contain the size in bytes of any object
  size_t in_blen = (size_t) inlen, hashed_bytes = 0, lastblk_blen;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a62:	2300      	movs	r3, #0
 8003a64:	66fb      	str	r3, [r7, #108]	; 0x6c

  // A message exceeding 16 bytes is absorbed in 16-byte blocks. Note that the
  // loop below is not iterated at all when inlen <= 16 bytes.

  while((in_blen - hashed_bytes) > MSGBLOCK_BLEN) {
 8003a66:	e012      	b.n	8003a8e <crypto_hash+0x5c>
    // Add 16 bytes of the message to the state
    injectm_ref(&state, &(in[hashed_bytes]), NUM_BRANCHES);
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6c:	18d1      	adds	r1, r2, r3
 8003a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a72:	2208      	movs	r2, #8
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff18 	bl	80038aa <injectm_ref>
    // Execute SPARKLE with a slim number of steps
    sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8003a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7e:	2208      	movs	r2, #8
 8003a80:	2108      	movs	r1, #8
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f966 	bl	8003d54 <sparkle_ref>
    hashed_bytes += MSGBLOCK_BLEN;
 8003a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8a:	3310      	adds	r3, #16
 8003a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  while((in_blen - hashed_bytes) > MSGBLOCK_BLEN) {
 8003a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d8e7      	bhi.n	8003a68 <crypto_hash+0x36>
  }

  // The last block can be between 0 and 16 bytes long (it can only be 0 when
  // inlen is 0). It is padded only when its length is shorter than 16 bytes.

  lastblk_blen = in_blen - hashed_bytes;
 8003a98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	667b      	str	r3, [r7, #100]	; 0x64
  memcpy(lastblk, &(in[hashed_bytes]), lastblk_blen);
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa4:	18d1      	adds	r1, r2, r3
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fcfb 	bl	80044a8 <memcpy>
  if (lastblk_blen < MSGBLOCK_BLEN) {
 8003ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d805      	bhi.n	8003ac4 <crypto_hash+0x92>
    lastblk[lastblk_blen] = 0x80;
 8003ab8:	f107 0214 	add.w	r2, r7, #20
 8003abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003abe:	4413      	add	r3, r2
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	701a      	strb	r2, [r3, #0]
  }
  // Absorb the (padded) last message block
  injectm_ref(&state, lastblk, NUM_BRANCHES);
 8003ac4:	f107 0114 	add.w	r1, r7, #20
 8003ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003acc:	2208      	movs	r2, #8
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff feeb 	bl	80038aa <injectm_ref>
  // Const_M is added to y3, which is state.y[3]
  if (lastblk_blen < MSGBLOCK_BLEN) {
 8003ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d804      	bhi.n	8003ae4 <crypto_hash+0xb2>
    state.y[(NUM_BRANCHES/2)-1] ^= 0x01000000;
 8003ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003adc:	f083 7380 	eor.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ae2:	e003      	b.n	8003aec <crypto_hash+0xba>
  } else {
    state.y[(NUM_BRANCHES/2)-1] ^= 0x02000000;
 8003ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae6:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
  }
  // Execute SPARKLE with a big number of steps
  sparkle_ref(&state, NUM_BRANCHES, STEPS_BIG);
 8003aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af0:	220c      	movs	r2, #12
 8003af2:	2108      	movs	r1, #8
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f92d 	bl	8003d54 <sparkle_ref>

  // Squeeze to produce the message digest

  trunc_state(out, &state);
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff ff66 	bl	80039d2 <trunc_state>
  sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8003b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	2108      	movs	r1, #8
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f920 	bl	8003d54 <sparkle_ref>
  trunc_state(&(out[SQZBLOCK_BLEN]), &state);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3310      	adds	r3, #16
 8003b18:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff57 	bl	80039d2 <trunc_state>
  sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	2208      	movs	r2, #8
 8003b2a:	2108      	movs	r1, #8
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f911 	bl	8003d54 <sparkle_ref>
  trunc_state(&(out[2*SQZBLOCK_BLEN]), &state);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3320      	adds	r3, #32
 8003b36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff48 	bl	80039d2 <trunc_state>

  return 0;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3770      	adds	r7, #112	; 0x70
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <linear_layer>:
  0xBB1185EB, 0x4F7C7B57, 0xCFBFA1C8, 0xC2B3293D  \
};


void linear_layer(state_t *state, int nb)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  int i, b = nb/2;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	0fda      	lsrs	r2, r3, #31
 8003b5a:	4413      	add	r3, r2
 8003b5c:	105b      	asrs	r3, r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
  uint32_t *x = state->x, *y = state->y;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3320      	adds	r3, #32
 8003b68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;
  
  // Feistel function (adding to y part)
  tmp = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e00a      	b.n	8003b8a <linear_layer+0x3e>
    tmp ^= x[i];
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4053      	eors	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dbf0      	blt.n	8003b74 <linear_layer+0x28>
  tmp = ELL(tmp);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	041a      	lsls	r2, r3, #16
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4053      	eors	r3, r2
 8003b9a:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003b9e:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e018      	b.n	8003bd8 <linear_layer+0x8c>
    y[i+b] ^= (tmp ^ y[i]);
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	405a      	eors	r2, r3
 8003bc2:	69f8      	ldr	r0, [r7, #28]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4403      	add	r3, r0
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	4403      	add	r3, r0
 8003bce:	404a      	eors	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
  for(i = 0; i < b; i ++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	dbe2      	blt.n	8003ba6 <linear_layer+0x5a>
  
  // Feistel function (adding to x part)
  tmp = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e00a      	b.n	8003c00 <linear_layer+0xb4>
    tmp ^= y[i];
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4053      	eors	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	dbf0      	blt.n	8003bea <linear_layer+0x9e>
  tmp = ELL(tmp);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4053      	eors	r3, r2
 8003c10:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003c14:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	e018      	b.n	8003c4e <linear_layer+0x102>
    x[i+b] ^= (tmp ^ x[i]);
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4413      	add	r3, r2
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	405a      	eors	r2, r3
 8003c38:	69f8      	ldr	r0, [r7, #28]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4403      	add	r3, r0
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	6938      	ldr	r0, [r7, #16]
 8003c42:	4403      	add	r3, r0
 8003c44:	404a      	eors	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
  for(i = 0; i < b; i ++)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dbe2      	blt.n	8003c1c <linear_layer+0xd0>
  // <------- left side --------> <------- right side ------->
  //    0    1    2 ...  B-2  B-1    B  B+1  B+2 ... 2B-2 2B-1
  //  B+1  B+2  B+3 ... 2B-1    B    0    1    2 ...  B-2  B-1
  
  // Branch swap of the x part
  tmp = x[0];
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < b-1; i ++) {
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e01d      	b.n	8003c9e <linear_layer+0x152>
    x[i] = x[i+b+1];
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	3301      	adds	r3, #1
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	441a      	add	r2, r3
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	6939      	ldr	r1, [r7, #16]
 8003c76:	440b      	add	r3, r1
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	601a      	str	r2, [r3, #0]
    x[i+b+1] = x[i+1];
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	441a      	add	r2, r3
 8003c86:	69f9      	ldr	r1, [r7, #28]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	6939      	ldr	r1, [r7, #16]
 8003c92:	440b      	add	r3, r1
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	601a      	str	r2, [r3, #0]
  for (i = 0; i < b-1; i ++) {
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	dbdc      	blt.n	8003c62 <linear_layer+0x116>
  }
  x[b-1] = x[b];
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	441a      	add	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	6939      	ldr	r1, [r7, #16]
 8003cbc:	440b      	add	r3, r1
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	601a      	str	r2, [r3, #0]
  x[b] = tmp;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	601a      	str	r2, [r3, #0]
  
  // Branch swap of the y part
  tmp = y[0];
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < b-1; i ++) {
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e01d      	b.n	8003d16 <linear_layer+0x1ca>
    y[i] = y[i+b+1];
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	441a      	add	r2, r3
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	440b      	add	r3, r1
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	601a      	str	r2, [r3, #0]
    y[i+b+1] = y[i+1];
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	441a      	add	r2, r3
 8003cfe:	69f9      	ldr	r1, [r7, #28]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	440b      	add	r3, r1
 8003d04:	3301      	adds	r3, #1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	440b      	add	r3, r1
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < b-1; i ++) {
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	3301      	adds	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dbdc      	blt.n	8003cda <linear_layer+0x18e>
  }
  y[b-1] = y[b];
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	441a      	add	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	440b      	add	r3, r1
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	601a      	str	r2, [r3, #0]
  y[b] = tmp;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3724      	adds	r7, #36	; 0x24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <sparkle_ref>:


void sparkle_ref(state_t *state, int nb, int ns)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  int i, j;  // Step and branch counter
  
  // The number of branches (nb) must be even and not bigger than MAX_BRANCHES.
  assert(((nb & 1) == 0) && (nb >= 4) && (nb <= MAX_BRANCHES));
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <sparkle_ref+0x22>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	dd02      	ble.n	8003d76 <sparkle_ref+0x22>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	dd05      	ble.n	8003d82 <sparkle_ref+0x2e>
 8003d76:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <sparkle_ref+0x214>)
 8003d78:	4a7c      	ldr	r2, [pc, #496]	; (8003f6c <sparkle_ref+0x218>)
 8003d7a:	216f      	movs	r1, #111	; 0x6f
 8003d7c:	487c      	ldr	r0, [pc, #496]	; (8003f70 <sparkle_ref+0x21c>)
 8003d7e:	f000 fb39 	bl	80043f4 <__assert_func>
  
  for(i = 0; i < ns; i ++) {
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e0e5      	b.n	8003f54 <sparkle_ref+0x200>
    // Add step counter
    state->y[0] ^= RCON[i%MAX_BRANCHES];
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4259      	negs	r1, r3
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	f001 0107 	and.w	r1, r1, #7
 8003d98:	bf58      	it	pl
 8003d9a:	424b      	negpl	r3, r1
 8003d9c:	4975      	ldr	r1, [pc, #468]	; (8003f74 <sparkle_ref+0x220>)
 8003d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da2:	405a      	eors	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	621a      	str	r2, [r3, #32]
    state->y[1] ^= i;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	405a      	eors	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
    // ARXBox layer
    for(j = 0; j < nb; j ++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e0c0      	b.n	8003f3c <sparkle_ref+0x1e8>
      ARXBOX(state->x[j], state->y[j], RCON[j]);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6939      	ldr	r1, [r7, #16]
 8003dc6:	3108      	adds	r1, #8
 8003dc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003dcc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003dd0:	18d1      	adds	r1, r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	3208      	adds	r2, #8
 8003de0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6939      	ldr	r1, [r7, #16]
 8003de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003dec:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003df0:	ea82 0103 	eor.w	r1, r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e06:	495b      	ldr	r1, [pc, #364]	; (8003f74 <sparkle_ref+0x220>)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e0e:	ea82 0103 	eor.w	r1, r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6939      	ldr	r1, [r7, #16]
 8003e26:	3108      	adds	r1, #8
 8003e28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e2c:	ea4f 4373 	mov.w	r3, r3, ror #17
 8003e30:	18d1      	adds	r1, r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e4c:	ea4f 4373 	mov.w	r3, r3, ror #17
 8003e50:	ea82 0103 	eor.w	r1, r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e66:	4943      	ldr	r1, [pc, #268]	; (8003f74 <sparkle_ref+0x220>)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e6e:	ea82 0103 	eor.w	r1, r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6939      	ldr	r1, [r7, #16]
 8003e86:	3108      	adds	r1, #8
 8003e88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e8c:	18d1      	adds	r1, r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6939      	ldr	r1, [r7, #16]
 8003ea4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ea8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8003eac:	ea82 0103 	eor.w	r1, r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	3208      	adds	r2, #8
 8003eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ec2:	492c      	ldr	r1, [pc, #176]	; (8003f74 <sparkle_ref+0x220>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eca:	ea82 0103 	eor.w	r1, r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	3108      	adds	r1, #8
 8003ee4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ee8:	ea4f 6333 	mov.w	r3, r3, ror #24
 8003eec:	18d1      	adds	r1, r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	3208      	adds	r2, #8
 8003efc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f08:	ea4f 4333 	mov.w	r3, r3, ror #16
 8003f0c:	ea82 0103 	eor.w	r1, r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	3208      	adds	r2, #8
 8003f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f22:	4914      	ldr	r1, [pc, #80]	; (8003f74 <sparkle_ref+0x220>)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f2a:	ea82 0103 	eor.w	r1, r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = 0; j < nb; j ++)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	f6ff af3a 	blt.w	8003dba <sparkle_ref+0x66>
    // Linear layer
    linear_layer(state, nb);
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff fdff 	bl	8003b4c <linear_layer>
  for(i = 0; i < ns; i ++) {
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	f6ff af15 	blt.w	8003d88 <sparkle_ref+0x34>
  }
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	08005788 	.word	0x08005788
 8003f6c:	08005a5c 	.word	0x08005a5c
 8003f70:	080057c0 	.word	0x080057c0
 8003f74:	08005a3c 	.word	0x08005a3c

08003f78 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0

	int ret = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 8003f82:	f000 f9df 	bl	8004344 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8003f86:	f000 f97f 	bl	8004288 <tick_msr_start>
	tick_msr_end();
 8003f8a:	f000 f997 	bl	80042bc <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <genkat_benchmark_hash_aead+0x7c>)
 8003f90:	4919      	ldr	r1, [pc, #100]	; (8003ff8 <genkat_benchmark_hash_aead+0x80>)
 8003f92:	481a      	ldr	r0, [pc, #104]	; (8003ffc <genkat_benchmark_hash_aead+0x84>)
 8003f94:	f000 f9b4 	bl	8004300 <lwc_printf>
	lwc_printf("Memory usage: ");
 8003f98:	4819      	ldr	r0, [pc, #100]	; (8004000 <genkat_benchmark_hash_aead+0x88>)
 8003f9a:	f000 f9b1 	bl	8004300 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <genkat_benchmark_hash_aead+0x8c>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <genkat_benchmark_hash_aead+0x8c>)
 8003fa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4817      	ldr	r0, [pc, #92]	; (8004008 <genkat_benchmark_hash_aead+0x90>)
 8003faa:	f000 f9a9 	bl	8004300 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <genkat_benchmark_hash_aead+0x8c>)
 8003fb0:	6a19      	ldr	r1, [r3, #32]
 8003fb2:	4b14      	ldr	r3, [pc, #80]	; (8004004 <genkat_benchmark_hash_aead+0x8c>)
 8003fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <genkat_benchmark_hash_aead+0x8c>)
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	4814      	ldr	r0, [pc, #80]	; (800400c <genkat_benchmark_hash_aead+0x94>)
 8003fbc:	f000 f9a0 	bl	8004300 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4812      	ldr	r0, [pc, #72]	; (8004010 <genkat_benchmark_hash_aead+0x98>)
 8003fc8:	f000 fa7c 	bl	80044c4 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8003fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4810      	ldr	r0, [pc, #64]	; (8004014 <genkat_benchmark_hash_aead+0x9c>)
 8003fd4:	f000 fa76 	bl	80044c4 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8003fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fdc:	2100      	movs	r1, #0
 8003fde:	480e      	ldr	r0, [pc, #56]	; (8004018 <genkat_benchmark_hash_aead+0xa0>)
 8003fe0:	f000 fa70 	bl	80044c4 <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 8003fe4:	f000 f81a 	bl	800401c <hash_generate_test_vectors>
 8003fe8:	6078      	str	r0, [r7, #4]
#endif

	return ret;
 8003fea:	687b      	ldr	r3, [r7, #4]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	08005a68 	.word	0x08005a68
 8003ff8:	08005ae8 	.word	0x08005ae8
 8003ffc:	08005894 	.word	0x08005894
 8004000:	080058dc 	.word	0x080058dc
 8004004:	2000067c 	.word	0x2000067c
 8004008:	080058ec 	.word	0x080058ec
 800400c:	08005914 	.word	0x08005914
 8004010:	20000098 	.word	0x20000098
 8004014:	20000198 	.word	0x20000198
 8004018:	20000298 	.word	0x20000298

0800401c <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 800401c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004020:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8004024:	af00      	add	r7, sp, #0

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

	init_buffer(msg, sizeof(msg));
 800402c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	4608      	mov	r0, r1
 800403a:	f000 f8e9 	bl	8004210 <init_buffer>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 800404a:	e9c1 2300 	strd	r2, r3, [r1]
 800404e:	e051      	b.n	80040f4 <hash_generate_test_vectors+0xd8>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8004050:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8004054:	4619      	mov	r1, r3
 8004056:	4854      	ldr	r0, [pc, #336]	; (80041a8 <hash_generate_test_vectors+0x18c>)
 8004058:	f000 f952 	bl	8004300 <lwc_printf>

		tick_msr_start();
 800405c:	f000 f914 	bl	8004288 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 8004060:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004064:	4638      	mov	r0, r7
 8004066:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f7ff fce0 	bl	8003a32 <crypto_hash>
 8004072:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
#else
		ret_val = 0;
#endif
		tick_msr_end();
 8004076:	f000 f921 	bl	80042bc <tick_msr_end>

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 800407a:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <hash_generate_test_vectors+0x190>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	494a      	ldr	r1, [pc, #296]	; (80041ac <hash_generate_test_vectors+0x190>)
 8004082:	600a      	str	r2, [r1, #0]
 8004084:	4a4a      	ldr	r2, [pc, #296]	; (80041b0 <hash_generate_test_vectors+0x194>)
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	494a      	ldr	r1, [pc, #296]	; (80041b4 <hash_generate_test_vectors+0x198>)
 800408a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(ret_val == 0) {
 800408e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8004092:	2b00      	cmp	r3, #0
 8004094:	d115      	bne.n	80040c2 <hash_generate_test_vectors+0xa6>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8004096:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <hash_generate_test_vectors+0x194>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4619      	mov	r1, r3
 800409c:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <hash_generate_test_vectors+0x194>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	da00      	bge.n	80040a6 <hash_generate_test_vectors+0x8a>
 80040a4:	330f      	adds	r3, #15
 80040a6:	111b      	asrs	r3, r3, #4
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <hash_generate_test_vectors+0x19c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4843      	ldr	r0, [pc, #268]	; (80041bc <hash_generate_test_vectors+0x1a0>)
 80040b0:	f000 f926 	bl	8004300 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 80040b4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	4313      	orrs	r3, r2
 80040be:	d10d      	bne.n	80040dc <hash_generate_test_vectors+0xc0>
 80040c0:	e004      	b.n	80040cc <hash_generate_test_vectors+0xb0>
			ret_val = KAT_CRYPTO_FAILURE;
 80040c2:	f06f 0303 	mvn.w	r3, #3
 80040c6:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			break;
 80040ca:	e01f      	b.n	800410c <hash_generate_test_vectors+0xf0>
			mlen = 4;
 80040cc:	f04f 0204 	mov.w	r2, #4
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80040d8:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80040dc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	eb12 0802 	adds.w	r8, r2, r2
 80040e8:	eb43 0903 	adc.w	r9, r3, r3
 80040ec:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80040f0:	e9c3 8900 	strd	r8, r9, [r3]
 80040f4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	4299      	cmp	r1, r3
 8004106:	bf08      	it	eq
 8004108:	4290      	cmpeq	r0, r2
 800410a:	d2a1      	bcs.n	8004050 <hash_generate_test_vectors+0x34>
		}
	}//end of for loop


	ticks_res_pos = 0;
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <hash_generate_test_vectors+0x190>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
	aead_hash_print_res("HASH");
 8004112:	482b      	ldr	r0, [pc, #172]	; (80041c0 <hash_generate_test_vectors+0x1a4>)
 8004114:	f000 f85a 	bl	80041cc <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 8004118:	482a      	ldr	r0, [pc, #168]	; (80041c4 <hash_generate_test_vectors+0x1a8>)
 800411a:	f000 f8f1 	bl	8004300 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 800412a:	e9c1 2300 	strd	r2, r3, [r1]
 800412e:	e026      	b.n	800417e <hash_generate_test_vectors+0x162>

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 8004130:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <hash_generate_test_vectors+0x190>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	481c      	ldr	r0, [pc, #112]	; (80041ac <hash_generate_test_vectors+0x190>)
 800413c:	6002      	str	r2, [r0, #0]
 800413e:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <hash_generate_test_vectors+0x198>)
 8004140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004144:	461a      	mov	r2, r3
 8004146:	4820      	ldr	r0, [pc, #128]	; (80041c8 <hash_generate_test_vectors+0x1ac>)
 8004148:	f000 f8da 	bl	8004300 <lwc_printf>

		if(mlen==0){
 800414c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	4313      	orrs	r3, r2
 8004156:	d107      	bne.n	8004168 <hash_generate_test_vectors+0x14c>
			mlen = 4;
 8004158:	f04f 0204 	mov.w	r2, #4
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8004164:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8004168:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	1894      	adds	r4, r2, r2
 8004172:	eb43 0503 	adc.w	r5, r3, r3
 8004176:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800417a:	e9c3 4500 	strd	r4, r5, [r3]
 800417e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	4299      	cmp	r1, r3
 8004190:	bf08      	it	eq
 8004192:	4290      	cmpeq	r0, r2
 8004194:	d2cc      	bcs.n	8004130 <hash_generate_test_vectors+0x114>
		}
	}

	return ret_val;
 8004196:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
}
 800419a:	4618      	mov	r0, r3
 800419c:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041a6:	bf00      	nop
 80041a8:	08005940 	.word	0x08005940
 80041ac:	20000398 	.word	0x20000398
 80041b0:	20000090 	.word	0x20000090
 80041b4:	20000298 	.word	0x20000298
 80041b8:	20000094 	.word	0x20000094
 80041bc:	08005950 	.word	0x08005950
 80041c0:	0800596c 	.word	0x0800596c
 80041c4:	08005974 	.word	0x08005974
 80041c8:	08005984 	.word	0x08005984

080041cc <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <aead_hash_print_res+0x30>)
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <aead_hash_print_res+0x34>)
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	480a      	ldr	r0, [pc, #40]	; (8004204 <aead_hash_print_res+0x38>)
 80041dc:	f000 f890 	bl	8004300 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <aead_hash_print_res+0x3c>)
 80041e2:	6a19      	ldr	r1, [r3, #32]
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <aead_hash_print_res+0x3c>)
 80041e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <aead_hash_print_res+0x3c>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	4807      	ldr	r0, [pc, #28]	; (800420c <aead_hash_print_res+0x40>)
 80041ee:	f000 f887 	bl	8004300 <lwc_printf>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	08005a68 	.word	0x08005a68
 8004200:	08005ae8 	.word	0x08005ae8
 8004204:	08005990 	.word	0x08005990
 8004208:	2000067c 	.word	0x2000067c
 800420c:	080059cc 	.word	0x080059cc

08004210 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8004210:	b4b0      	push	{r4, r5, r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++) {
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004228:	e00d      	b.n	8004246 <init_buffer+0x36>
		buffer[i] = (unsigned char) i + '0';
 800422a:	7c3a      	ldrb	r2, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	440b      	add	r3, r1
 8004232:	3230      	adds	r2, #48	; 0x30
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8004238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800423c:	1c54      	adds	r4, r2, #1
 800423e:	f143 0500 	adc.w	r5, r3, #0
 8004242:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8004246:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800424a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800424e:	4299      	cmp	r1, r3
 8004250:	bf08      	it	eq
 8004252:	4290      	cmpeq	r0, r2
 8004254:	d3e9      	bcc.n	800422a <init_buffer+0x1a>
	}
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bcb0      	pop	{r4, r5, r7}
 8004260:	4770      	bx	lr
	...

08004264 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004274:	6013      	str	r3, [r2, #0]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000039c 	.word	0x2000039c

08004288 <tick_msr_start>:

void tick_msr_start(void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <tick_msr_start+0x28>)
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <tick_msr_start+0x2c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 800429a:	f7fc fcbd 	bl	8000c18 <HAL_GetTick>
 800429e:	4603      	mov	r3, r0
 80042a0:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <tick_msr_start+0x30>)
 80042a2:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <tick_msr_start+0x2c>)
 80042a6:	f7fe fb07 	bl	80028b8 <HAL_TIM_Base_Start_IT>
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000039c 	.word	0x2000039c
 80042b4:	2000062c 	.word	0x2000062c
 80042b8:	20000094 	.word	0x20000094

080042bc <tick_msr_end>:

uint32_t tick_msr_end(void) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 80042c0:	480b      	ldr	r0, [pc, #44]	; (80042f0 <tick_msr_end+0x34>)
 80042c2:	f7fe fb69 	bl	8002998 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <tick_msr_end+0x38>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	041a      	lsls	r2, r3, #16
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <tick_msr_end+0x34>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	4313      	orrs	r3, r2
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <tick_msr_end+0x3c>)
 80042d6:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 80042d8:	f7fc fc9e 	bl	8000c18 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <tick_msr_end+0x40>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	4a05      	ldr	r2, [pc, #20]	; (80042fc <tick_msr_end+0x40>)
 80042e6:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <tick_msr_end+0x3c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	2000062c 	.word	0x2000062c
 80042f4:	2000039c 	.word	0x2000039c
 80042f8:	20000090 	.word	0x20000090
 80042fc:	20000094 	.word	0x20000094

08004300 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8004300:	b40f      	push	{r0, r1, r2, r3}
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	480a      	ldr	r0, [pc, #40]	; (800433c <lwc_printf+0x3c>)
 8004314:	f000 fbe2 	bl	8004adc <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8004318:	4808      	ldr	r0, [pc, #32]	; (800433c <lwc_printf+0x3c>)
 800431a:	f7fb ff59 	bl	80001d0 <strlen>
 800431e:	4603      	mov	r3, r0
 8004320:	b29a      	uxth	r2, r3
 8004322:	2364      	movs	r3, #100	; 0x64
 8004324:	4905      	ldr	r1, [pc, #20]	; (800433c <lwc_printf+0x3c>)
 8004326:	4806      	ldr	r0, [pc, #24]	; (8004340 <lwc_printf+0x40>)
 8004328:	f7fe fe3a 	bl	8002fa0 <HAL_UART_Transmit>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004336:	b004      	add	sp, #16
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200003a0 	.word	0x200003a0
 8004340:	200005a8 	.word	0x200005a8

08004344 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8004348:	2234      	movs	r2, #52	; 0x34
 800434a:	2100      	movs	r1, #0
 800434c:	4822      	ldr	r0, [pc, #136]	; (80043d8 <get_memory_usage+0x94>)
 800434e:	f000 f8b9 	bl	80044c4 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <get_memory_usage+0x94>)
 8004354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004358:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 800435a:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <get_memory_usage+0x94>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <get_memory_usage+0x94>)
 8004360:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <get_memory_usage+0x98>)
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <get_memory_usage+0x94>)
 8004366:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <get_memory_usage+0x9c>)
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <get_memory_usage+0x94>)
 800436c:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <get_memory_usage+0xa0>)
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <get_memory_usage+0x94>)
 8004372:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <get_memory_usage+0xa4>)
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <get_memory_usage+0x94>)
 8004378:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <get_memory_usage+0xa8>)
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <get_memory_usage+0x94>)
 800437e:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8004380:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <get_memory_usage+0xac>)
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <get_memory_usage+0x94>)
 8004384:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <get_memory_usage+0x94>)
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <get_memory_usage+0x94>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <get_memory_usage+0x94>)
 8004392:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <get_memory_usage+0x94>)
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <get_memory_usage+0x94>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	4a0e      	ldr	r2, [pc, #56]	; (80043d8 <get_memory_usage+0x94>)
 80043a0:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <get_memory_usage+0x94>)
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <get_memory_usage+0x94>)
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <get_memory_usage+0x94>)
 80043ae:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <get_memory_usage+0x94>)
 80043b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <get_memory_usage+0x94>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	4413      	add	r3, r2
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <get_memory_usage+0x94>)
 80043bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <get_memory_usage+0x94>)
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <get_memory_usage+0x94>)
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	441a      	add	r2, r3
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <get_memory_usage+0x94>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	4a02      	ldr	r2, [pc, #8]	; (80043d8 <get_memory_usage+0x94>)
 80043d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000067c 	.word	0x2000067c
 80043dc:	08005788 	.word	0x08005788
 80043e0:	20000070 	.word	0x20000070
 80043e4:	200006c0 	.word	0x200006c0
 80043e8:	20000000 	.word	0x20000000
 80043ec:	20000070 	.word	0x20000070
 80043f0:	08005c4c 	.word	0x08005c4c

080043f4 <__assert_func>:
 80043f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043f6:	4614      	mov	r4, r2
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <__assert_func+0x2c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4605      	mov	r5, r0
 8004400:	68d8      	ldr	r0, [r3, #12]
 8004402:	b14c      	cbz	r4, 8004418 <__assert_func+0x24>
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <__assert_func+0x30>)
 8004406:	9100      	str	r1, [sp, #0]
 8004408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800440c:	4906      	ldr	r1, [pc, #24]	; (8004428 <__assert_func+0x34>)
 800440e:	462b      	mov	r3, r5
 8004410:	f000 f814 	bl	800443c <fiprintf>
 8004414:	f000 fc2c 	bl	8004c70 <abort>
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <__assert_func+0x38>)
 800441a:	461c      	mov	r4, r3
 800441c:	e7f3      	b.n	8004406 <__assert_func+0x12>
 800441e:	bf00      	nop
 8004420:	2000000c 	.word	0x2000000c
 8004424:	08005b68 	.word	0x08005b68
 8004428:	08005b75 	.word	0x08005b75
 800442c:	08005ba3 	.word	0x08005ba3

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000000c 	.word	0x2000000c

0800443c <fiprintf>:
 800443c:	b40e      	push	{r1, r2, r3}
 800443e:	b503      	push	{r0, r1, lr}
 8004440:	4601      	mov	r1, r0
 8004442:	ab03      	add	r3, sp, #12
 8004444:	4805      	ldr	r0, [pc, #20]	; (800445c <fiprintf+0x20>)
 8004446:	f853 2b04 	ldr.w	r2, [r3], #4
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	f000 f86b 	bl	8004528 <_vfiprintf_r>
 8004452:	b002      	add	sp, #8
 8004454:	f85d eb04 	ldr.w	lr, [sp], #4
 8004458:	b003      	add	sp, #12
 800445a:	4770      	bx	lr
 800445c:	2000000c 	.word	0x2000000c

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4d0d      	ldr	r5, [pc, #52]	; (8004498 <__libc_init_array+0x38>)
 8004464:	4c0d      	ldr	r4, [pc, #52]	; (800449c <__libc_init_array+0x3c>)
 8004466:	1b64      	subs	r4, r4, r5
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	2600      	movs	r6, #0
 800446c:	42a6      	cmp	r6, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	4d0b      	ldr	r5, [pc, #44]	; (80044a0 <__libc_init_array+0x40>)
 8004472:	4c0c      	ldr	r4, [pc, #48]	; (80044a4 <__libc_init_array+0x44>)
 8004474:	f001 f97c 	bl	8005770 <_init>
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	2600      	movs	r6, #0
 800447e:	42a6      	cmp	r6, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f855 3b04 	ldr.w	r3, [r5], #4
 8004488:	4798      	blx	r3
 800448a:	3601      	adds	r6, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004492:	4798      	blx	r3
 8004494:	3601      	adds	r6, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	08005c44 	.word	0x08005c44
 800449c:	08005c44 	.word	0x08005c44
 80044a0:	08005c44 	.word	0x08005c44
 80044a4:	08005c48 	.word	0x08005c48

080044a8 <memcpy>:
 80044a8:	440a      	add	r2, r1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b0:	d100      	bne.n	80044b4 <memcpy+0xc>
 80044b2:	4770      	bx	lr
 80044b4:	b510      	push	{r4, lr}
 80044b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044be:	4291      	cmp	r1, r2
 80044c0:	d1f9      	bne.n	80044b6 <memcpy+0xe>
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__sfputc_r>:
 80044d4:	6893      	ldr	r3, [r2, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	b410      	push	{r4}
 80044dc:	6093      	str	r3, [r2, #8]
 80044de:	da08      	bge.n	80044f2 <__sfputc_r+0x1e>
 80044e0:	6994      	ldr	r4, [r2, #24]
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	db01      	blt.n	80044ea <__sfputc_r+0x16>
 80044e6:	290a      	cmp	r1, #10
 80044e8:	d103      	bne.n	80044f2 <__sfputc_r+0x1e>
 80044ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ee:	f000 baff 	b.w	8004af0 <__swbuf_r>
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	1c58      	adds	r0, r3, #1
 80044f6:	6010      	str	r0, [r2, #0]
 80044f8:	7019      	strb	r1, [r3, #0]
 80044fa:	4608      	mov	r0, r1
 80044fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004500:	4770      	bx	lr

08004502 <__sfputs_r>:
 8004502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004504:	4606      	mov	r6, r0
 8004506:	460f      	mov	r7, r1
 8004508:	4614      	mov	r4, r2
 800450a:	18d5      	adds	r5, r2, r3
 800450c:	42ac      	cmp	r4, r5
 800450e:	d101      	bne.n	8004514 <__sfputs_r+0x12>
 8004510:	2000      	movs	r0, #0
 8004512:	e007      	b.n	8004524 <__sfputs_r+0x22>
 8004514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004518:	463a      	mov	r2, r7
 800451a:	4630      	mov	r0, r6
 800451c:	f7ff ffda 	bl	80044d4 <__sfputc_r>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d1f3      	bne.n	800450c <__sfputs_r+0xa>
 8004524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004528 <_vfiprintf_r>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	460d      	mov	r5, r1
 800452e:	b09d      	sub	sp, #116	; 0x74
 8004530:	4614      	mov	r4, r2
 8004532:	4698      	mov	r8, r3
 8004534:	4606      	mov	r6, r0
 8004536:	b118      	cbz	r0, 8004540 <_vfiprintf_r+0x18>
 8004538:	6983      	ldr	r3, [r0, #24]
 800453a:	b90b      	cbnz	r3, 8004540 <_vfiprintf_r+0x18>
 800453c:	f000 fcba 	bl	8004eb4 <__sinit>
 8004540:	4b89      	ldr	r3, [pc, #548]	; (8004768 <_vfiprintf_r+0x240>)
 8004542:	429d      	cmp	r5, r3
 8004544:	d11b      	bne.n	800457e <_vfiprintf_r+0x56>
 8004546:	6875      	ldr	r5, [r6, #4]
 8004548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800454a:	07d9      	lsls	r1, r3, #31
 800454c:	d405      	bmi.n	800455a <_vfiprintf_r+0x32>
 800454e:	89ab      	ldrh	r3, [r5, #12]
 8004550:	059a      	lsls	r2, r3, #22
 8004552:	d402      	bmi.n	800455a <_vfiprintf_r+0x32>
 8004554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004556:	f000 fd4b 	bl	8004ff0 <__retarget_lock_acquire_recursive>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	d501      	bpl.n	8004564 <_vfiprintf_r+0x3c>
 8004560:	692b      	ldr	r3, [r5, #16]
 8004562:	b9eb      	cbnz	r3, 80045a0 <_vfiprintf_r+0x78>
 8004564:	4629      	mov	r1, r5
 8004566:	4630      	mov	r0, r6
 8004568:	f000 fb14 	bl	8004b94 <__swsetup_r>
 800456c:	b1c0      	cbz	r0, 80045a0 <_vfiprintf_r+0x78>
 800456e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004570:	07dc      	lsls	r4, r3, #31
 8004572:	d50e      	bpl.n	8004592 <_vfiprintf_r+0x6a>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	b01d      	add	sp, #116	; 0x74
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457e:	4b7b      	ldr	r3, [pc, #492]	; (800476c <_vfiprintf_r+0x244>)
 8004580:	429d      	cmp	r5, r3
 8004582:	d101      	bne.n	8004588 <_vfiprintf_r+0x60>
 8004584:	68b5      	ldr	r5, [r6, #8]
 8004586:	e7df      	b.n	8004548 <_vfiprintf_r+0x20>
 8004588:	4b79      	ldr	r3, [pc, #484]	; (8004770 <_vfiprintf_r+0x248>)
 800458a:	429d      	cmp	r5, r3
 800458c:	bf08      	it	eq
 800458e:	68f5      	ldreq	r5, [r6, #12]
 8004590:	e7da      	b.n	8004548 <_vfiprintf_r+0x20>
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	0598      	lsls	r0, r3, #22
 8004596:	d4ed      	bmi.n	8004574 <_vfiprintf_r+0x4c>
 8004598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800459a:	f000 fd2a 	bl	8004ff2 <__retarget_lock_release_recursive>
 800459e:	e7e9      	b.n	8004574 <_vfiprintf_r+0x4c>
 80045a0:	2300      	movs	r3, #0
 80045a2:	9309      	str	r3, [sp, #36]	; 0x24
 80045a4:	2320      	movs	r3, #32
 80045a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ae:	2330      	movs	r3, #48	; 0x30
 80045b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004774 <_vfiprintf_r+0x24c>
 80045b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045b8:	f04f 0901 	mov.w	r9, #1
 80045bc:	4623      	mov	r3, r4
 80045be:	469a      	mov	sl, r3
 80045c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045c4:	b10a      	cbz	r2, 80045ca <_vfiprintf_r+0xa2>
 80045c6:	2a25      	cmp	r2, #37	; 0x25
 80045c8:	d1f9      	bne.n	80045be <_vfiprintf_r+0x96>
 80045ca:	ebba 0b04 	subs.w	fp, sl, r4
 80045ce:	d00b      	beq.n	80045e8 <_vfiprintf_r+0xc0>
 80045d0:	465b      	mov	r3, fp
 80045d2:	4622      	mov	r2, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7ff ff93 	bl	8004502 <__sfputs_r>
 80045dc:	3001      	adds	r0, #1
 80045de:	f000 80aa 	beq.w	8004736 <_vfiprintf_r+0x20e>
 80045e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045e4:	445a      	add	r2, fp
 80045e6:	9209      	str	r2, [sp, #36]	; 0x24
 80045e8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a2 	beq.w	8004736 <_vfiprintf_r+0x20e>
 80045f2:	2300      	movs	r3, #0
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045fc:	f10a 0a01 	add.w	sl, sl, #1
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	9307      	str	r3, [sp, #28]
 8004604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004608:	931a      	str	r3, [sp, #104]	; 0x68
 800460a:	4654      	mov	r4, sl
 800460c:	2205      	movs	r2, #5
 800460e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004612:	4858      	ldr	r0, [pc, #352]	; (8004774 <_vfiprintf_r+0x24c>)
 8004614:	f7fb fde4 	bl	80001e0 <memchr>
 8004618:	9a04      	ldr	r2, [sp, #16]
 800461a:	b9d8      	cbnz	r0, 8004654 <_vfiprintf_r+0x12c>
 800461c:	06d1      	lsls	r1, r2, #27
 800461e:	bf44      	itt	mi
 8004620:	2320      	movmi	r3, #32
 8004622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004626:	0713      	lsls	r3, r2, #28
 8004628:	bf44      	itt	mi
 800462a:	232b      	movmi	r3, #43	; 0x2b
 800462c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004630:	f89a 3000 	ldrb.w	r3, [sl]
 8004634:	2b2a      	cmp	r3, #42	; 0x2a
 8004636:	d015      	beq.n	8004664 <_vfiprintf_r+0x13c>
 8004638:	9a07      	ldr	r2, [sp, #28]
 800463a:	4654      	mov	r4, sl
 800463c:	2000      	movs	r0, #0
 800463e:	f04f 0c0a 	mov.w	ip, #10
 8004642:	4621      	mov	r1, r4
 8004644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004648:	3b30      	subs	r3, #48	; 0x30
 800464a:	2b09      	cmp	r3, #9
 800464c:	d94e      	bls.n	80046ec <_vfiprintf_r+0x1c4>
 800464e:	b1b0      	cbz	r0, 800467e <_vfiprintf_r+0x156>
 8004650:	9207      	str	r2, [sp, #28]
 8004652:	e014      	b.n	800467e <_vfiprintf_r+0x156>
 8004654:	eba0 0308 	sub.w	r3, r0, r8
 8004658:	fa09 f303 	lsl.w	r3, r9, r3
 800465c:	4313      	orrs	r3, r2
 800465e:	9304      	str	r3, [sp, #16]
 8004660:	46a2      	mov	sl, r4
 8004662:	e7d2      	b.n	800460a <_vfiprintf_r+0xe2>
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	1d19      	adds	r1, r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	9103      	str	r1, [sp, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	bfbb      	ittet	lt
 8004670:	425b      	neglt	r3, r3
 8004672:	f042 0202 	orrlt.w	r2, r2, #2
 8004676:	9307      	strge	r3, [sp, #28]
 8004678:	9307      	strlt	r3, [sp, #28]
 800467a:	bfb8      	it	lt
 800467c:	9204      	strlt	r2, [sp, #16]
 800467e:	7823      	ldrb	r3, [r4, #0]
 8004680:	2b2e      	cmp	r3, #46	; 0x2e
 8004682:	d10c      	bne.n	800469e <_vfiprintf_r+0x176>
 8004684:	7863      	ldrb	r3, [r4, #1]
 8004686:	2b2a      	cmp	r3, #42	; 0x2a
 8004688:	d135      	bne.n	80046f6 <_vfiprintf_r+0x1ce>
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	1d1a      	adds	r2, r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	9203      	str	r2, [sp, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	bfb8      	it	lt
 8004696:	f04f 33ff 	movlt.w	r3, #4294967295
 800469a:	3402      	adds	r4, #2
 800469c:	9305      	str	r3, [sp, #20]
 800469e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004784 <_vfiprintf_r+0x25c>
 80046a2:	7821      	ldrb	r1, [r4, #0]
 80046a4:	2203      	movs	r2, #3
 80046a6:	4650      	mov	r0, sl
 80046a8:	f7fb fd9a 	bl	80001e0 <memchr>
 80046ac:	b140      	cbz	r0, 80046c0 <_vfiprintf_r+0x198>
 80046ae:	2340      	movs	r3, #64	; 0x40
 80046b0:	eba0 000a 	sub.w	r0, r0, sl
 80046b4:	fa03 f000 	lsl.w	r0, r3, r0
 80046b8:	9b04      	ldr	r3, [sp, #16]
 80046ba:	4303      	orrs	r3, r0
 80046bc:	3401      	adds	r4, #1
 80046be:	9304      	str	r3, [sp, #16]
 80046c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c4:	482c      	ldr	r0, [pc, #176]	; (8004778 <_vfiprintf_r+0x250>)
 80046c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ca:	2206      	movs	r2, #6
 80046cc:	f7fb fd88 	bl	80001e0 <memchr>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d03f      	beq.n	8004754 <_vfiprintf_r+0x22c>
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <_vfiprintf_r+0x254>)
 80046d6:	bb1b      	cbnz	r3, 8004720 <_vfiprintf_r+0x1f8>
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	3307      	adds	r3, #7
 80046dc:	f023 0307 	bic.w	r3, r3, #7
 80046e0:	3308      	adds	r3, #8
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e6:	443b      	add	r3, r7
 80046e8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ea:	e767      	b.n	80045bc <_vfiprintf_r+0x94>
 80046ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80046f0:	460c      	mov	r4, r1
 80046f2:	2001      	movs	r0, #1
 80046f4:	e7a5      	b.n	8004642 <_vfiprintf_r+0x11a>
 80046f6:	2300      	movs	r3, #0
 80046f8:	3401      	adds	r4, #1
 80046fa:	9305      	str	r3, [sp, #20]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f04f 0c0a 	mov.w	ip, #10
 8004702:	4620      	mov	r0, r4
 8004704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004708:	3a30      	subs	r2, #48	; 0x30
 800470a:	2a09      	cmp	r2, #9
 800470c:	d903      	bls.n	8004716 <_vfiprintf_r+0x1ee>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0c5      	beq.n	800469e <_vfiprintf_r+0x176>
 8004712:	9105      	str	r1, [sp, #20]
 8004714:	e7c3      	b.n	800469e <_vfiprintf_r+0x176>
 8004716:	fb0c 2101 	mla	r1, ip, r1, r2
 800471a:	4604      	mov	r4, r0
 800471c:	2301      	movs	r3, #1
 800471e:	e7f0      	b.n	8004702 <_vfiprintf_r+0x1da>
 8004720:	ab03      	add	r3, sp, #12
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	462a      	mov	r2, r5
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <_vfiprintf_r+0x258>)
 8004728:	a904      	add	r1, sp, #16
 800472a:	4630      	mov	r0, r6
 800472c:	f3af 8000 	nop.w
 8004730:	4607      	mov	r7, r0
 8004732:	1c78      	adds	r0, r7, #1
 8004734:	d1d6      	bne.n	80046e4 <_vfiprintf_r+0x1bc>
 8004736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004738:	07d9      	lsls	r1, r3, #31
 800473a:	d405      	bmi.n	8004748 <_vfiprintf_r+0x220>
 800473c:	89ab      	ldrh	r3, [r5, #12]
 800473e:	059a      	lsls	r2, r3, #22
 8004740:	d402      	bmi.n	8004748 <_vfiprintf_r+0x220>
 8004742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004744:	f000 fc55 	bl	8004ff2 <__retarget_lock_release_recursive>
 8004748:	89ab      	ldrh	r3, [r5, #12]
 800474a:	065b      	lsls	r3, r3, #25
 800474c:	f53f af12 	bmi.w	8004574 <_vfiprintf_r+0x4c>
 8004750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004752:	e711      	b.n	8004578 <_vfiprintf_r+0x50>
 8004754:	ab03      	add	r3, sp, #12
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	462a      	mov	r2, r5
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <_vfiprintf_r+0x258>)
 800475c:	a904      	add	r1, sp, #16
 800475e:	4630      	mov	r0, r6
 8004760:	f000 f880 	bl	8004864 <_printf_i>
 8004764:	e7e4      	b.n	8004730 <_vfiprintf_r+0x208>
 8004766:	bf00      	nop
 8004768:	08005bfc 	.word	0x08005bfc
 800476c:	08005c1c 	.word	0x08005c1c
 8004770:	08005bdc 	.word	0x08005bdc
 8004774:	08005ba8 	.word	0x08005ba8
 8004778:	08005bb2 	.word	0x08005bb2
 800477c:	00000000 	.word	0x00000000
 8004780:	08004503 	.word	0x08004503
 8004784:	08005bae 	.word	0x08005bae

08004788 <_printf_common>:
 8004788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	4616      	mov	r6, r2
 800478e:	4699      	mov	r9, r3
 8004790:	688a      	ldr	r2, [r1, #8]
 8004792:	690b      	ldr	r3, [r1, #16]
 8004794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004798:	4293      	cmp	r3, r2
 800479a:	bfb8      	it	lt
 800479c:	4613      	movlt	r3, r2
 800479e:	6033      	str	r3, [r6, #0]
 80047a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047a4:	4607      	mov	r7, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	b10a      	cbz	r2, 80047ae <_printf_common+0x26>
 80047aa:	3301      	adds	r3, #1
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	0699      	lsls	r1, r3, #26
 80047b2:	bf42      	ittt	mi
 80047b4:	6833      	ldrmi	r3, [r6, #0]
 80047b6:	3302      	addmi	r3, #2
 80047b8:	6033      	strmi	r3, [r6, #0]
 80047ba:	6825      	ldr	r5, [r4, #0]
 80047bc:	f015 0506 	ands.w	r5, r5, #6
 80047c0:	d106      	bne.n	80047d0 <_printf_common+0x48>
 80047c2:	f104 0a19 	add.w	sl, r4, #25
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	6832      	ldr	r2, [r6, #0]
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc26      	bgt.n	800481e <_printf_common+0x96>
 80047d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047d4:	1e13      	subs	r3, r2, #0
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	bf18      	it	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	0692      	lsls	r2, r2, #26
 80047de:	d42b      	bmi.n	8004838 <_printf_common+0xb0>
 80047e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047e4:	4649      	mov	r1, r9
 80047e6:	4638      	mov	r0, r7
 80047e8:	47c0      	blx	r8
 80047ea:	3001      	adds	r0, #1
 80047ec:	d01e      	beq.n	800482c <_printf_common+0xa4>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	68e5      	ldr	r5, [r4, #12]
 80047f2:	6832      	ldr	r2, [r6, #0]
 80047f4:	f003 0306 	and.w	r3, r3, #6
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	bf08      	it	eq
 80047fc:	1aad      	subeq	r5, r5, r2
 80047fe:	68a3      	ldr	r3, [r4, #8]
 8004800:	6922      	ldr	r2, [r4, #16]
 8004802:	bf0c      	ite	eq
 8004804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004808:	2500      	movne	r5, #0
 800480a:	4293      	cmp	r3, r2
 800480c:	bfc4      	itt	gt
 800480e:	1a9b      	subgt	r3, r3, r2
 8004810:	18ed      	addgt	r5, r5, r3
 8004812:	2600      	movs	r6, #0
 8004814:	341a      	adds	r4, #26
 8004816:	42b5      	cmp	r5, r6
 8004818:	d11a      	bne.n	8004850 <_printf_common+0xc8>
 800481a:	2000      	movs	r0, #0
 800481c:	e008      	b.n	8004830 <_printf_common+0xa8>
 800481e:	2301      	movs	r3, #1
 8004820:	4652      	mov	r2, sl
 8004822:	4649      	mov	r1, r9
 8004824:	4638      	mov	r0, r7
 8004826:	47c0      	blx	r8
 8004828:	3001      	adds	r0, #1
 800482a:	d103      	bne.n	8004834 <_printf_common+0xac>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004834:	3501      	adds	r5, #1
 8004836:	e7c6      	b.n	80047c6 <_printf_common+0x3e>
 8004838:	18e1      	adds	r1, r4, r3
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	2030      	movs	r0, #48	; 0x30
 800483e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004842:	4422      	add	r2, r4
 8004844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800484c:	3302      	adds	r3, #2
 800484e:	e7c7      	b.n	80047e0 <_printf_common+0x58>
 8004850:	2301      	movs	r3, #1
 8004852:	4622      	mov	r2, r4
 8004854:	4649      	mov	r1, r9
 8004856:	4638      	mov	r0, r7
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d0e6      	beq.n	800482c <_printf_common+0xa4>
 800485e:	3601      	adds	r6, #1
 8004860:	e7d9      	b.n	8004816 <_printf_common+0x8e>
	...

08004864 <_printf_i>:
 8004864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004868:	460c      	mov	r4, r1
 800486a:	4691      	mov	r9, r2
 800486c:	7e27      	ldrb	r7, [r4, #24]
 800486e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004870:	2f78      	cmp	r7, #120	; 0x78
 8004872:	4680      	mov	r8, r0
 8004874:	469a      	mov	sl, r3
 8004876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800487a:	d807      	bhi.n	800488c <_printf_i+0x28>
 800487c:	2f62      	cmp	r7, #98	; 0x62
 800487e:	d80a      	bhi.n	8004896 <_printf_i+0x32>
 8004880:	2f00      	cmp	r7, #0
 8004882:	f000 80d8 	beq.w	8004a36 <_printf_i+0x1d2>
 8004886:	2f58      	cmp	r7, #88	; 0x58
 8004888:	f000 80a3 	beq.w	80049d2 <_printf_i+0x16e>
 800488c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004894:	e03a      	b.n	800490c <_printf_i+0xa8>
 8004896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800489a:	2b15      	cmp	r3, #21
 800489c:	d8f6      	bhi.n	800488c <_printf_i+0x28>
 800489e:	a001      	add	r0, pc, #4	; (adr r0, 80048a4 <_printf_i+0x40>)
 80048a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048a4:	080048fd 	.word	0x080048fd
 80048a8:	08004911 	.word	0x08004911
 80048ac:	0800488d 	.word	0x0800488d
 80048b0:	0800488d 	.word	0x0800488d
 80048b4:	0800488d 	.word	0x0800488d
 80048b8:	0800488d 	.word	0x0800488d
 80048bc:	08004911 	.word	0x08004911
 80048c0:	0800488d 	.word	0x0800488d
 80048c4:	0800488d 	.word	0x0800488d
 80048c8:	0800488d 	.word	0x0800488d
 80048cc:	0800488d 	.word	0x0800488d
 80048d0:	08004a1d 	.word	0x08004a1d
 80048d4:	08004941 	.word	0x08004941
 80048d8:	080049ff 	.word	0x080049ff
 80048dc:	0800488d 	.word	0x0800488d
 80048e0:	0800488d 	.word	0x0800488d
 80048e4:	08004a3f 	.word	0x08004a3f
 80048e8:	0800488d 	.word	0x0800488d
 80048ec:	08004941 	.word	0x08004941
 80048f0:	0800488d 	.word	0x0800488d
 80048f4:	0800488d 	.word	0x0800488d
 80048f8:	08004a07 	.word	0x08004a07
 80048fc:	680b      	ldr	r3, [r1, #0]
 80048fe:	1d1a      	adds	r2, r3, #4
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	600a      	str	r2, [r1, #0]
 8004904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800490c:	2301      	movs	r3, #1
 800490e:	e0a3      	b.n	8004a58 <_printf_i+0x1f4>
 8004910:	6825      	ldr	r5, [r4, #0]
 8004912:	6808      	ldr	r0, [r1, #0]
 8004914:	062e      	lsls	r6, r5, #24
 8004916:	f100 0304 	add.w	r3, r0, #4
 800491a:	d50a      	bpl.n	8004932 <_printf_i+0xce>
 800491c:	6805      	ldr	r5, [r0, #0]
 800491e:	600b      	str	r3, [r1, #0]
 8004920:	2d00      	cmp	r5, #0
 8004922:	da03      	bge.n	800492c <_printf_i+0xc8>
 8004924:	232d      	movs	r3, #45	; 0x2d
 8004926:	426d      	negs	r5, r5
 8004928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800492c:	485e      	ldr	r0, [pc, #376]	; (8004aa8 <_printf_i+0x244>)
 800492e:	230a      	movs	r3, #10
 8004930:	e019      	b.n	8004966 <_printf_i+0x102>
 8004932:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004936:	6805      	ldr	r5, [r0, #0]
 8004938:	600b      	str	r3, [r1, #0]
 800493a:	bf18      	it	ne
 800493c:	b22d      	sxthne	r5, r5
 800493e:	e7ef      	b.n	8004920 <_printf_i+0xbc>
 8004940:	680b      	ldr	r3, [r1, #0]
 8004942:	6825      	ldr	r5, [r4, #0]
 8004944:	1d18      	adds	r0, r3, #4
 8004946:	6008      	str	r0, [r1, #0]
 8004948:	0628      	lsls	r0, r5, #24
 800494a:	d501      	bpl.n	8004950 <_printf_i+0xec>
 800494c:	681d      	ldr	r5, [r3, #0]
 800494e:	e002      	b.n	8004956 <_printf_i+0xf2>
 8004950:	0669      	lsls	r1, r5, #25
 8004952:	d5fb      	bpl.n	800494c <_printf_i+0xe8>
 8004954:	881d      	ldrh	r5, [r3, #0]
 8004956:	4854      	ldr	r0, [pc, #336]	; (8004aa8 <_printf_i+0x244>)
 8004958:	2f6f      	cmp	r7, #111	; 0x6f
 800495a:	bf0c      	ite	eq
 800495c:	2308      	moveq	r3, #8
 800495e:	230a      	movne	r3, #10
 8004960:	2100      	movs	r1, #0
 8004962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004966:	6866      	ldr	r6, [r4, #4]
 8004968:	60a6      	str	r6, [r4, #8]
 800496a:	2e00      	cmp	r6, #0
 800496c:	bfa2      	ittt	ge
 800496e:	6821      	ldrge	r1, [r4, #0]
 8004970:	f021 0104 	bicge.w	r1, r1, #4
 8004974:	6021      	strge	r1, [r4, #0]
 8004976:	b90d      	cbnz	r5, 800497c <_printf_i+0x118>
 8004978:	2e00      	cmp	r6, #0
 800497a:	d04d      	beq.n	8004a18 <_printf_i+0x1b4>
 800497c:	4616      	mov	r6, r2
 800497e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004982:	fb03 5711 	mls	r7, r3, r1, r5
 8004986:	5dc7      	ldrb	r7, [r0, r7]
 8004988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800498c:	462f      	mov	r7, r5
 800498e:	42bb      	cmp	r3, r7
 8004990:	460d      	mov	r5, r1
 8004992:	d9f4      	bls.n	800497e <_printf_i+0x11a>
 8004994:	2b08      	cmp	r3, #8
 8004996:	d10b      	bne.n	80049b0 <_printf_i+0x14c>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	07df      	lsls	r7, r3, #31
 800499c:	d508      	bpl.n	80049b0 <_printf_i+0x14c>
 800499e:	6923      	ldr	r3, [r4, #16]
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4299      	cmp	r1, r3
 80049a4:	bfde      	ittt	le
 80049a6:	2330      	movle	r3, #48	; 0x30
 80049a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049b0:	1b92      	subs	r2, r2, r6
 80049b2:	6122      	str	r2, [r4, #16]
 80049b4:	f8cd a000 	str.w	sl, [sp]
 80049b8:	464b      	mov	r3, r9
 80049ba:	aa03      	add	r2, sp, #12
 80049bc:	4621      	mov	r1, r4
 80049be:	4640      	mov	r0, r8
 80049c0:	f7ff fee2 	bl	8004788 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d14c      	bne.n	8004a62 <_printf_i+0x1fe>
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295
 80049cc:	b004      	add	sp, #16
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d2:	4835      	ldr	r0, [pc, #212]	; (8004aa8 <_printf_i+0x244>)
 80049d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	680e      	ldr	r6, [r1, #0]
 80049dc:	061f      	lsls	r7, r3, #24
 80049de:	f856 5b04 	ldr.w	r5, [r6], #4
 80049e2:	600e      	str	r6, [r1, #0]
 80049e4:	d514      	bpl.n	8004a10 <_printf_i+0x1ac>
 80049e6:	07d9      	lsls	r1, r3, #31
 80049e8:	bf44      	itt	mi
 80049ea:	f043 0320 	orrmi.w	r3, r3, #32
 80049ee:	6023      	strmi	r3, [r4, #0]
 80049f0:	b91d      	cbnz	r5, 80049fa <_printf_i+0x196>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	f023 0320 	bic.w	r3, r3, #32
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	2310      	movs	r3, #16
 80049fc:	e7b0      	b.n	8004960 <_printf_i+0xfc>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	f043 0320 	orr.w	r3, r3, #32
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	2378      	movs	r3, #120	; 0x78
 8004a08:	4828      	ldr	r0, [pc, #160]	; (8004aac <_printf_i+0x248>)
 8004a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a0e:	e7e3      	b.n	80049d8 <_printf_i+0x174>
 8004a10:	065e      	lsls	r6, r3, #25
 8004a12:	bf48      	it	mi
 8004a14:	b2ad      	uxthmi	r5, r5
 8004a16:	e7e6      	b.n	80049e6 <_printf_i+0x182>
 8004a18:	4616      	mov	r6, r2
 8004a1a:	e7bb      	b.n	8004994 <_printf_i+0x130>
 8004a1c:	680b      	ldr	r3, [r1, #0]
 8004a1e:	6826      	ldr	r6, [r4, #0]
 8004a20:	6960      	ldr	r0, [r4, #20]
 8004a22:	1d1d      	adds	r5, r3, #4
 8004a24:	600d      	str	r5, [r1, #0]
 8004a26:	0635      	lsls	r5, r6, #24
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	d501      	bpl.n	8004a30 <_printf_i+0x1cc>
 8004a2c:	6018      	str	r0, [r3, #0]
 8004a2e:	e002      	b.n	8004a36 <_printf_i+0x1d2>
 8004a30:	0671      	lsls	r1, r6, #25
 8004a32:	d5fb      	bpl.n	8004a2c <_printf_i+0x1c8>
 8004a34:	8018      	strh	r0, [r3, #0]
 8004a36:	2300      	movs	r3, #0
 8004a38:	6123      	str	r3, [r4, #16]
 8004a3a:	4616      	mov	r6, r2
 8004a3c:	e7ba      	b.n	80049b4 <_printf_i+0x150>
 8004a3e:	680b      	ldr	r3, [r1, #0]
 8004a40:	1d1a      	adds	r2, r3, #4
 8004a42:	600a      	str	r2, [r1, #0]
 8004a44:	681e      	ldr	r6, [r3, #0]
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7fb fbc8 	bl	80001e0 <memchr>
 8004a50:	b108      	cbz	r0, 8004a56 <_printf_i+0x1f2>
 8004a52:	1b80      	subs	r0, r0, r6
 8004a54:	6060      	str	r0, [r4, #4]
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a60:	e7a8      	b.n	80049b4 <_printf_i+0x150>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	4632      	mov	r2, r6
 8004a66:	4649      	mov	r1, r9
 8004a68:	4640      	mov	r0, r8
 8004a6a:	47d0      	blx	sl
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d0ab      	beq.n	80049c8 <_printf_i+0x164>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	079b      	lsls	r3, r3, #30
 8004a74:	d413      	bmi.n	8004a9e <_printf_i+0x23a>
 8004a76:	68e0      	ldr	r0, [r4, #12]
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	4298      	cmp	r0, r3
 8004a7c:	bfb8      	it	lt
 8004a7e:	4618      	movlt	r0, r3
 8004a80:	e7a4      	b.n	80049cc <_printf_i+0x168>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4632      	mov	r2, r6
 8004a86:	4649      	mov	r1, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	47d0      	blx	sl
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d09b      	beq.n	80049c8 <_printf_i+0x164>
 8004a90:	3501      	adds	r5, #1
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	9903      	ldr	r1, [sp, #12]
 8004a96:	1a5b      	subs	r3, r3, r1
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	dcf2      	bgt.n	8004a82 <_printf_i+0x21e>
 8004a9c:	e7eb      	b.n	8004a76 <_printf_i+0x212>
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	f104 0619 	add.w	r6, r4, #25
 8004aa4:	e7f5      	b.n	8004a92 <_printf_i+0x22e>
 8004aa6:	bf00      	nop
 8004aa8:	08005bb9 	.word	0x08005bb9
 8004aac:	08005bca 	.word	0x08005bca

08004ab0 <_vsiprintf_r>:
 8004ab0:	b500      	push	{lr}
 8004ab2:	b09b      	sub	sp, #108	; 0x6c
 8004ab4:	9100      	str	r1, [sp, #0]
 8004ab6:	9104      	str	r1, [sp, #16]
 8004ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	9102      	str	r1, [sp, #8]
 8004ac0:	4905      	ldr	r1, [pc, #20]	; (8004ad8 <_vsiprintf_r+0x28>)
 8004ac2:	9103      	str	r1, [sp, #12]
 8004ac4:	4669      	mov	r1, sp
 8004ac6:	f000 fc3f 	bl	8005348 <_svfiprintf_r>
 8004aca:	9b00      	ldr	r3, [sp, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	b01b      	add	sp, #108	; 0x6c
 8004ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ad6:	bf00      	nop
 8004ad8:	ffff0208 	.word	0xffff0208

08004adc <vsiprintf>:
 8004adc:	4613      	mov	r3, r2
 8004ade:	460a      	mov	r2, r1
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4802      	ldr	r0, [pc, #8]	; (8004aec <vsiprintf+0x10>)
 8004ae4:	6800      	ldr	r0, [r0, #0]
 8004ae6:	f7ff bfe3 	b.w	8004ab0 <_vsiprintf_r>
 8004aea:	bf00      	nop
 8004aec:	2000000c 	.word	0x2000000c

08004af0 <__swbuf_r>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	460e      	mov	r6, r1
 8004af4:	4614      	mov	r4, r2
 8004af6:	4605      	mov	r5, r0
 8004af8:	b118      	cbz	r0, 8004b02 <__swbuf_r+0x12>
 8004afa:	6983      	ldr	r3, [r0, #24]
 8004afc:	b90b      	cbnz	r3, 8004b02 <__swbuf_r+0x12>
 8004afe:	f000 f9d9 	bl	8004eb4 <__sinit>
 8004b02:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <__swbuf_r+0x98>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d12b      	bne.n	8004b60 <__swbuf_r+0x70>
 8004b08:	686c      	ldr	r4, [r5, #4]
 8004b0a:	69a3      	ldr	r3, [r4, #24]
 8004b0c:	60a3      	str	r3, [r4, #8]
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	071a      	lsls	r2, r3, #28
 8004b12:	d52f      	bpl.n	8004b74 <__swbuf_r+0x84>
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	b36b      	cbz	r3, 8004b74 <__swbuf_r+0x84>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	1ac0      	subs	r0, r0, r3
 8004b1e:	6963      	ldr	r3, [r4, #20]
 8004b20:	b2f6      	uxtb	r6, r6
 8004b22:	4283      	cmp	r3, r0
 8004b24:	4637      	mov	r7, r6
 8004b26:	dc04      	bgt.n	8004b32 <__swbuf_r+0x42>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 f92e 	bl	8004d8c <_fflush_r>
 8004b30:	bb30      	cbnz	r0, 8004b80 <__swbuf_r+0x90>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	701e      	strb	r6, [r3, #0]
 8004b40:	6963      	ldr	r3, [r4, #20]
 8004b42:	3001      	adds	r0, #1
 8004b44:	4283      	cmp	r3, r0
 8004b46:	d004      	beq.n	8004b52 <__swbuf_r+0x62>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	07db      	lsls	r3, r3, #31
 8004b4c:	d506      	bpl.n	8004b5c <__swbuf_r+0x6c>
 8004b4e:	2e0a      	cmp	r6, #10
 8004b50:	d104      	bne.n	8004b5c <__swbuf_r+0x6c>
 8004b52:	4621      	mov	r1, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	f000 f919 	bl	8004d8c <_fflush_r>
 8004b5a:	b988      	cbnz	r0, 8004b80 <__swbuf_r+0x90>
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <__swbuf_r+0x9c>)
 8004b62:	429c      	cmp	r4, r3
 8004b64:	d101      	bne.n	8004b6a <__swbuf_r+0x7a>
 8004b66:	68ac      	ldr	r4, [r5, #8]
 8004b68:	e7cf      	b.n	8004b0a <__swbuf_r+0x1a>
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <__swbuf_r+0xa0>)
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	bf08      	it	eq
 8004b70:	68ec      	ldreq	r4, [r5, #12]
 8004b72:	e7ca      	b.n	8004b0a <__swbuf_r+0x1a>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f80c 	bl	8004b94 <__swsetup_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d0cb      	beq.n	8004b18 <__swbuf_r+0x28>
 8004b80:	f04f 37ff 	mov.w	r7, #4294967295
 8004b84:	e7ea      	b.n	8004b5c <__swbuf_r+0x6c>
 8004b86:	bf00      	nop
 8004b88:	08005bfc 	.word	0x08005bfc
 8004b8c:	08005c1c 	.word	0x08005c1c
 8004b90:	08005bdc 	.word	0x08005bdc

08004b94 <__swsetup_r>:
 8004b94:	4b32      	ldr	r3, [pc, #200]	; (8004c60 <__swsetup_r+0xcc>)
 8004b96:	b570      	push	{r4, r5, r6, lr}
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	b125      	cbz	r5, 8004baa <__swsetup_r+0x16>
 8004ba0:	69ab      	ldr	r3, [r5, #24]
 8004ba2:	b913      	cbnz	r3, 8004baa <__swsetup_r+0x16>
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 f985 	bl	8004eb4 <__sinit>
 8004baa:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <__swsetup_r+0xd0>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	d10f      	bne.n	8004bd0 <__swsetup_r+0x3c>
 8004bb0:	686c      	ldr	r4, [r5, #4]
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bb8:	0719      	lsls	r1, r3, #28
 8004bba:	d42c      	bmi.n	8004c16 <__swsetup_r+0x82>
 8004bbc:	06dd      	lsls	r5, r3, #27
 8004bbe:	d411      	bmi.n	8004be4 <__swsetup_r+0x50>
 8004bc0:	2309      	movs	r3, #9
 8004bc2:	6033      	str	r3, [r6, #0]
 8004bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295
 8004bce:	e03e      	b.n	8004c4e <__swsetup_r+0xba>
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <__swsetup_r+0xd4>)
 8004bd2:	429c      	cmp	r4, r3
 8004bd4:	d101      	bne.n	8004bda <__swsetup_r+0x46>
 8004bd6:	68ac      	ldr	r4, [r5, #8]
 8004bd8:	e7eb      	b.n	8004bb2 <__swsetup_r+0x1e>
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <__swsetup_r+0xd8>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	bf08      	it	eq
 8004be0:	68ec      	ldreq	r4, [r5, #12]
 8004be2:	e7e6      	b.n	8004bb2 <__swsetup_r+0x1e>
 8004be4:	0758      	lsls	r0, r3, #29
 8004be6:	d512      	bpl.n	8004c0e <__swsetup_r+0x7a>
 8004be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bea:	b141      	cbz	r1, 8004bfe <__swsetup_r+0x6a>
 8004bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	d002      	beq.n	8004bfa <__swsetup_r+0x66>
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 fa7b 	bl	80050f0 <_free_r>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	2300      	movs	r3, #0
 8004c08:	6063      	str	r3, [r4, #4]
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f043 0308 	orr.w	r3, r3, #8
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	b94b      	cbnz	r3, 8004c2e <__swsetup_r+0x9a>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c24:	d003      	beq.n	8004c2e <__swsetup_r+0x9a>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 fa07 	bl	800503c <__smakebuf_r>
 8004c2e:	89a0      	ldrh	r0, [r4, #12]
 8004c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c34:	f010 0301 	ands.w	r3, r0, #1
 8004c38:	d00a      	beq.n	8004c50 <__swsetup_r+0xbc>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	6963      	ldr	r3, [r4, #20]
 8004c40:	425b      	negs	r3, r3
 8004c42:	61a3      	str	r3, [r4, #24]
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	b943      	cbnz	r3, 8004c5a <__swsetup_r+0xc6>
 8004c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c4c:	d1ba      	bne.n	8004bc4 <__swsetup_r+0x30>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	0781      	lsls	r1, r0, #30
 8004c52:	bf58      	it	pl
 8004c54:	6963      	ldrpl	r3, [r4, #20]
 8004c56:	60a3      	str	r3, [r4, #8]
 8004c58:	e7f4      	b.n	8004c44 <__swsetup_r+0xb0>
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	e7f7      	b.n	8004c4e <__swsetup_r+0xba>
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c
 8004c64:	08005bfc 	.word	0x08005bfc
 8004c68:	08005c1c 	.word	0x08005c1c
 8004c6c:	08005bdc 	.word	0x08005bdc

08004c70 <abort>:
 8004c70:	b508      	push	{r3, lr}
 8004c72:	2006      	movs	r0, #6
 8004c74:	f000 fca0 	bl	80055b8 <raise>
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f7fb fe5b 	bl	8000934 <_exit>
	...

08004c80 <__sflush_r>:
 8004c80:	898a      	ldrh	r2, [r1, #12]
 8004c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c86:	4605      	mov	r5, r0
 8004c88:	0710      	lsls	r0, r2, #28
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	d458      	bmi.n	8004d40 <__sflush_r+0xc0>
 8004c8e:	684b      	ldr	r3, [r1, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	dc05      	bgt.n	8004ca0 <__sflush_r+0x20>
 8004c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dc02      	bgt.n	8004ca0 <__sflush_r+0x20>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca2:	2e00      	cmp	r6, #0
 8004ca4:	d0f9      	beq.n	8004c9a <__sflush_r+0x1a>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cac:	682f      	ldr	r7, [r5, #0]
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	d032      	beq.n	8004d18 <__sflush_r+0x98>
 8004cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	075a      	lsls	r2, r3, #29
 8004cb8:	d505      	bpl.n	8004cc6 <__sflush_r+0x46>
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	1ac0      	subs	r0, r0, r3
 8004cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cc0:	b10b      	cbz	r3, 8004cc6 <__sflush_r+0x46>
 8004cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cc4:	1ac0      	subs	r0, r0, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ccc:	6a21      	ldr	r1, [r4, #32]
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b0      	blx	r6
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	d106      	bne.n	8004ce6 <__sflush_r+0x66>
 8004cd8:	6829      	ldr	r1, [r5, #0]
 8004cda:	291d      	cmp	r1, #29
 8004cdc:	d82c      	bhi.n	8004d38 <__sflush_r+0xb8>
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <__sflush_r+0x108>)
 8004ce0:	40ca      	lsrs	r2, r1
 8004ce2:	07d6      	lsls	r6, r2, #31
 8004ce4:	d528      	bpl.n	8004d38 <__sflush_r+0xb8>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	6062      	str	r2, [r4, #4]
 8004cea:	04d9      	lsls	r1, r3, #19
 8004cec:	6922      	ldr	r2, [r4, #16]
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	d504      	bpl.n	8004cfc <__sflush_r+0x7c>
 8004cf2:	1c42      	adds	r2, r0, #1
 8004cf4:	d101      	bne.n	8004cfa <__sflush_r+0x7a>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	b903      	cbnz	r3, 8004cfc <__sflush_r+0x7c>
 8004cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8004cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfe:	602f      	str	r7, [r5, #0]
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d0ca      	beq.n	8004c9a <__sflush_r+0x1a>
 8004d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	d002      	beq.n	8004d12 <__sflush_r+0x92>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f9ef 	bl	80050f0 <_free_r>
 8004d12:	2000      	movs	r0, #0
 8004d14:	6360      	str	r0, [r4, #52]	; 0x34
 8004d16:	e7c1      	b.n	8004c9c <__sflush_r+0x1c>
 8004d18:	6a21      	ldr	r1, [r4, #32]
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b0      	blx	r6
 8004d20:	1c41      	adds	r1, r0, #1
 8004d22:	d1c7      	bne.n	8004cb4 <__sflush_r+0x34>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0c4      	beq.n	8004cb4 <__sflush_r+0x34>
 8004d2a:	2b1d      	cmp	r3, #29
 8004d2c:	d001      	beq.n	8004d32 <__sflush_r+0xb2>
 8004d2e:	2b16      	cmp	r3, #22
 8004d30:	d101      	bne.n	8004d36 <__sflush_r+0xb6>
 8004d32:	602f      	str	r7, [r5, #0]
 8004d34:	e7b1      	b.n	8004c9a <__sflush_r+0x1a>
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	e7ad      	b.n	8004c9c <__sflush_r+0x1c>
 8004d40:	690f      	ldr	r7, [r1, #16]
 8004d42:	2f00      	cmp	r7, #0
 8004d44:	d0a9      	beq.n	8004c9a <__sflush_r+0x1a>
 8004d46:	0793      	lsls	r3, r2, #30
 8004d48:	680e      	ldr	r6, [r1, #0]
 8004d4a:	bf08      	it	eq
 8004d4c:	694b      	ldreq	r3, [r1, #20]
 8004d4e:	600f      	str	r7, [r1, #0]
 8004d50:	bf18      	it	ne
 8004d52:	2300      	movne	r3, #0
 8004d54:	eba6 0807 	sub.w	r8, r6, r7
 8004d58:	608b      	str	r3, [r1, #8]
 8004d5a:	f1b8 0f00 	cmp.w	r8, #0
 8004d5e:	dd9c      	ble.n	8004c9a <__sflush_r+0x1a>
 8004d60:	6a21      	ldr	r1, [r4, #32]
 8004d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d64:	4643      	mov	r3, r8
 8004d66:	463a      	mov	r2, r7
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b0      	blx	r6
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	dc06      	bgt.n	8004d7e <__sflush_r+0xfe>
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	e78e      	b.n	8004c9c <__sflush_r+0x1c>
 8004d7e:	4407      	add	r7, r0
 8004d80:	eba8 0800 	sub.w	r8, r8, r0
 8004d84:	e7e9      	b.n	8004d5a <__sflush_r+0xda>
 8004d86:	bf00      	nop
 8004d88:	20400001 	.word	0x20400001

08004d8c <_fflush_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	4605      	mov	r5, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	b913      	cbnz	r3, 8004d9c <_fflush_r+0x10>
 8004d96:	2500      	movs	r5, #0
 8004d98:	4628      	mov	r0, r5
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	b118      	cbz	r0, 8004da6 <_fflush_r+0x1a>
 8004d9e:	6983      	ldr	r3, [r0, #24]
 8004da0:	b90b      	cbnz	r3, 8004da6 <_fflush_r+0x1a>
 8004da2:	f000 f887 	bl	8004eb4 <__sinit>
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <_fflush_r+0x6c>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d11b      	bne.n	8004de4 <_fflush_r+0x58>
 8004dac:	686c      	ldr	r4, [r5, #4]
 8004dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ef      	beq.n	8004d96 <_fflush_r+0xa>
 8004db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004db8:	07d0      	lsls	r0, r2, #31
 8004dba:	d404      	bmi.n	8004dc6 <_fflush_r+0x3a>
 8004dbc:	0599      	lsls	r1, r3, #22
 8004dbe:	d402      	bmi.n	8004dc6 <_fflush_r+0x3a>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc2:	f000 f915 	bl	8004ff0 <__retarget_lock_acquire_recursive>
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	4621      	mov	r1, r4
 8004dca:	f7ff ff59 	bl	8004c80 <__sflush_r>
 8004dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd0:	07da      	lsls	r2, r3, #31
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	d4e0      	bmi.n	8004d98 <_fflush_r+0xc>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	059b      	lsls	r3, r3, #22
 8004dda:	d4dd      	bmi.n	8004d98 <_fflush_r+0xc>
 8004ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dde:	f000 f908 	bl	8004ff2 <__retarget_lock_release_recursive>
 8004de2:	e7d9      	b.n	8004d98 <_fflush_r+0xc>
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <_fflush_r+0x70>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d101      	bne.n	8004dee <_fflush_r+0x62>
 8004dea:	68ac      	ldr	r4, [r5, #8]
 8004dec:	e7df      	b.n	8004dae <_fflush_r+0x22>
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <_fflush_r+0x74>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	bf08      	it	eq
 8004df4:	68ec      	ldreq	r4, [r5, #12]
 8004df6:	e7da      	b.n	8004dae <_fflush_r+0x22>
 8004df8:	08005bfc 	.word	0x08005bfc
 8004dfc:	08005c1c 	.word	0x08005c1c
 8004e00:	08005bdc 	.word	0x08005bdc

08004e04 <std>:
 8004e04:	2300      	movs	r3, #0
 8004e06:	b510      	push	{r4, lr}
 8004e08:	4604      	mov	r4, r0
 8004e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e12:	6083      	str	r3, [r0, #8]
 8004e14:	8181      	strh	r1, [r0, #12]
 8004e16:	6643      	str	r3, [r0, #100]	; 0x64
 8004e18:	81c2      	strh	r2, [r0, #14]
 8004e1a:	6183      	str	r3, [r0, #24]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	2208      	movs	r2, #8
 8004e20:	305c      	adds	r0, #92	; 0x5c
 8004e22:	f7ff fb4f 	bl	80044c4 <memset>
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <std+0x38>)
 8004e28:	6263      	str	r3, [r4, #36]	; 0x24
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <std+0x3c>)
 8004e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <std+0x40>)
 8004e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <std+0x44>)
 8004e34:	6224      	str	r4, [r4, #32]
 8004e36:	6323      	str	r3, [r4, #48]	; 0x30
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	bf00      	nop
 8004e3c:	080055f1 	.word	0x080055f1
 8004e40:	08005613 	.word	0x08005613
 8004e44:	0800564b 	.word	0x0800564b
 8004e48:	0800566f 	.word	0x0800566f

08004e4c <_cleanup_r>:
 8004e4c:	4901      	ldr	r1, [pc, #4]	; (8004e54 <_cleanup_r+0x8>)
 8004e4e:	f000 b8af 	b.w	8004fb0 <_fwalk_reent>
 8004e52:	bf00      	nop
 8004e54:	08004d8d 	.word	0x08004d8d

08004e58 <__sfmoreglue>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	1e4a      	subs	r2, r1, #1
 8004e5c:	2568      	movs	r5, #104	; 0x68
 8004e5e:	4355      	muls	r5, r2
 8004e60:	460e      	mov	r6, r1
 8004e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e66:	f000 f993 	bl	8005190 <_malloc_r>
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	b140      	cbz	r0, 8004e80 <__sfmoreglue+0x28>
 8004e6e:	2100      	movs	r1, #0
 8004e70:	e9c0 1600 	strd	r1, r6, [r0]
 8004e74:	300c      	adds	r0, #12
 8004e76:	60a0      	str	r0, [r4, #8]
 8004e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e7c:	f7ff fb22 	bl	80044c4 <memset>
 8004e80:	4620      	mov	r0, r4
 8004e82:	bd70      	pop	{r4, r5, r6, pc}

08004e84 <__sfp_lock_acquire>:
 8004e84:	4801      	ldr	r0, [pc, #4]	; (8004e8c <__sfp_lock_acquire+0x8>)
 8004e86:	f000 b8b3 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	200006b8 	.word	0x200006b8

08004e90 <__sfp_lock_release>:
 8004e90:	4801      	ldr	r0, [pc, #4]	; (8004e98 <__sfp_lock_release+0x8>)
 8004e92:	f000 b8ae 	b.w	8004ff2 <__retarget_lock_release_recursive>
 8004e96:	bf00      	nop
 8004e98:	200006b8 	.word	0x200006b8

08004e9c <__sinit_lock_acquire>:
 8004e9c:	4801      	ldr	r0, [pc, #4]	; (8004ea4 <__sinit_lock_acquire+0x8>)
 8004e9e:	f000 b8a7 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 8004ea2:	bf00      	nop
 8004ea4:	200006b3 	.word	0x200006b3

08004ea8 <__sinit_lock_release>:
 8004ea8:	4801      	ldr	r0, [pc, #4]	; (8004eb0 <__sinit_lock_release+0x8>)
 8004eaa:	f000 b8a2 	b.w	8004ff2 <__retarget_lock_release_recursive>
 8004eae:	bf00      	nop
 8004eb0:	200006b3 	.word	0x200006b3

08004eb4 <__sinit>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	f7ff fff0 	bl	8004e9c <__sinit_lock_acquire>
 8004ebc:	69a3      	ldr	r3, [r4, #24]
 8004ebe:	b11b      	cbz	r3, 8004ec8 <__sinit+0x14>
 8004ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec4:	f7ff bff0 	b.w	8004ea8 <__sinit_lock_release>
 8004ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <__sinit+0x68>)
 8004ed0:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <__sinit+0x6c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	bf04      	itt	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	61a3      	streq	r3, [r4, #24]
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f000 f820 	bl	8004f24 <__sfp>
 8004ee4:	6060      	str	r0, [r4, #4]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f81c 	bl	8004f24 <__sfp>
 8004eec:	60a0      	str	r0, [r4, #8]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 f818 	bl	8004f24 <__sfp>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	60e0      	str	r0, [r4, #12]
 8004ef8:	2104      	movs	r1, #4
 8004efa:	6860      	ldr	r0, [r4, #4]
 8004efc:	f7ff ff82 	bl	8004e04 <std>
 8004f00:	68a0      	ldr	r0, [r4, #8]
 8004f02:	2201      	movs	r2, #1
 8004f04:	2109      	movs	r1, #9
 8004f06:	f7ff ff7d 	bl	8004e04 <std>
 8004f0a:	68e0      	ldr	r0, [r4, #12]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	2112      	movs	r1, #18
 8004f10:	f7ff ff78 	bl	8004e04 <std>
 8004f14:	2301      	movs	r3, #1
 8004f16:	61a3      	str	r3, [r4, #24]
 8004f18:	e7d2      	b.n	8004ec0 <__sinit+0xc>
 8004f1a:	bf00      	nop
 8004f1c:	08005ba4 	.word	0x08005ba4
 8004f20:	08004e4d 	.word	0x08004e4d

08004f24 <__sfp>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	4607      	mov	r7, r0
 8004f28:	f7ff ffac 	bl	8004e84 <__sfp_lock_acquire>
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <__sfp+0x84>)
 8004f2e:	681e      	ldr	r6, [r3, #0]
 8004f30:	69b3      	ldr	r3, [r6, #24]
 8004f32:	b913      	cbnz	r3, 8004f3a <__sfp+0x16>
 8004f34:	4630      	mov	r0, r6
 8004f36:	f7ff ffbd 	bl	8004eb4 <__sinit>
 8004f3a:	3648      	adds	r6, #72	; 0x48
 8004f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	d503      	bpl.n	8004f4c <__sfp+0x28>
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	b30b      	cbz	r3, 8004f8c <__sfp+0x68>
 8004f48:	6836      	ldr	r6, [r6, #0]
 8004f4a:	e7f7      	b.n	8004f3c <__sfp+0x18>
 8004f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f50:	b9d5      	cbnz	r5, 8004f88 <__sfp+0x64>
 8004f52:	4b16      	ldr	r3, [pc, #88]	; (8004fac <__sfp+0x88>)
 8004f54:	60e3      	str	r3, [r4, #12]
 8004f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f5c:	f000 f847 	bl	8004fee <__retarget_lock_init_recursive>
 8004f60:	f7ff ff96 	bl	8004e90 <__sfp_lock_release>
 8004f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f6c:	6025      	str	r5, [r4, #0]
 8004f6e:	61a5      	str	r5, [r4, #24]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4629      	mov	r1, r5
 8004f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f78:	f7ff faa4 	bl	80044c4 <memset>
 8004f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f84:	4620      	mov	r0, r4
 8004f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f88:	3468      	adds	r4, #104	; 0x68
 8004f8a:	e7d9      	b.n	8004f40 <__sfp+0x1c>
 8004f8c:	2104      	movs	r1, #4
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ff62 	bl	8004e58 <__sfmoreglue>
 8004f94:	4604      	mov	r4, r0
 8004f96:	6030      	str	r0, [r6, #0]
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1d5      	bne.n	8004f48 <__sfp+0x24>
 8004f9c:	f7ff ff78 	bl	8004e90 <__sfp_lock_release>
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	e7ee      	b.n	8004f84 <__sfp+0x60>
 8004fa6:	bf00      	nop
 8004fa8:	08005ba4 	.word	0x08005ba4
 8004fac:	ffff0001 	.word	0xffff0001

08004fb0 <_fwalk_reent>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fbc:	2700      	movs	r7, #0
 8004fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8004fc6:	d505      	bpl.n	8004fd4 <_fwalk_reent+0x24>
 8004fc8:	6824      	ldr	r4, [r4, #0]
 8004fca:	2c00      	cmp	r4, #0
 8004fcc:	d1f7      	bne.n	8004fbe <_fwalk_reent+0xe>
 8004fce:	4638      	mov	r0, r7
 8004fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd4:	89ab      	ldrh	r3, [r5, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d907      	bls.n	8004fea <_fwalk_reent+0x3a>
 8004fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	d003      	beq.n	8004fea <_fwalk_reent+0x3a>
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	47c0      	blx	r8
 8004fe8:	4307      	orrs	r7, r0
 8004fea:	3568      	adds	r5, #104	; 0x68
 8004fec:	e7e9      	b.n	8004fc2 <_fwalk_reent+0x12>

08004fee <__retarget_lock_init_recursive>:
 8004fee:	4770      	bx	lr

08004ff0 <__retarget_lock_acquire_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_release_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <__swhatbuf_r>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	b096      	sub	sp, #88	; 0x58
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	da07      	bge.n	8005016 <__swhatbuf_r+0x22>
 8005006:	2300      	movs	r3, #0
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	89b3      	ldrh	r3, [r6, #12]
 800500c:	061a      	lsls	r2, r3, #24
 800500e:	d410      	bmi.n	8005032 <__swhatbuf_r+0x3e>
 8005010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005014:	e00e      	b.n	8005034 <__swhatbuf_r+0x40>
 8005016:	466a      	mov	r2, sp
 8005018:	f000 fb50 	bl	80056bc <_fstat_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	dbf2      	blt.n	8005006 <__swhatbuf_r+0x12>
 8005020:	9a01      	ldr	r2, [sp, #4]
 8005022:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005026:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800502a:	425a      	negs	r2, r3
 800502c:	415a      	adcs	r2, r3
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	e7ee      	b.n	8005010 <__swhatbuf_r+0x1c>
 8005032:	2340      	movs	r3, #64	; 0x40
 8005034:	2000      	movs	r0, #0
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	b016      	add	sp, #88	; 0x58
 800503a:	bd70      	pop	{r4, r5, r6, pc}

0800503c <__smakebuf_r>:
 800503c:	898b      	ldrh	r3, [r1, #12]
 800503e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005040:	079d      	lsls	r5, r3, #30
 8005042:	4606      	mov	r6, r0
 8005044:	460c      	mov	r4, r1
 8005046:	d507      	bpl.n	8005058 <__smakebuf_r+0x1c>
 8005048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	6123      	str	r3, [r4, #16]
 8005050:	2301      	movs	r3, #1
 8005052:	6163      	str	r3, [r4, #20]
 8005054:	b002      	add	sp, #8
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	ab01      	add	r3, sp, #4
 800505a:	466a      	mov	r2, sp
 800505c:	f7ff ffca 	bl	8004ff4 <__swhatbuf_r>
 8005060:	9900      	ldr	r1, [sp, #0]
 8005062:	4605      	mov	r5, r0
 8005064:	4630      	mov	r0, r6
 8005066:	f000 f893 	bl	8005190 <_malloc_r>
 800506a:	b948      	cbnz	r0, 8005080 <__smakebuf_r+0x44>
 800506c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005070:	059a      	lsls	r2, r3, #22
 8005072:	d4ef      	bmi.n	8005054 <__smakebuf_r+0x18>
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	f043 0302 	orr.w	r3, r3, #2
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	e7e3      	b.n	8005048 <__smakebuf_r+0xc>
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <__smakebuf_r+0x7c>)
 8005082:	62b3      	str	r3, [r6, #40]	; 0x28
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	6020      	str	r0, [r4, #0]
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	9b00      	ldr	r3, [sp, #0]
 8005090:	6163      	str	r3, [r4, #20]
 8005092:	9b01      	ldr	r3, [sp, #4]
 8005094:	6120      	str	r0, [r4, #16]
 8005096:	b15b      	cbz	r3, 80050b0 <__smakebuf_r+0x74>
 8005098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800509c:	4630      	mov	r0, r6
 800509e:	f000 fb1f 	bl	80056e0 <_isatty_r>
 80050a2:	b128      	cbz	r0, 80050b0 <__smakebuf_r+0x74>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f023 0303 	bic.w	r3, r3, #3
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	89a0      	ldrh	r0, [r4, #12]
 80050b2:	4305      	orrs	r5, r0
 80050b4:	81a5      	strh	r5, [r4, #12]
 80050b6:	e7cd      	b.n	8005054 <__smakebuf_r+0x18>
 80050b8:	08004e4d 	.word	0x08004e4d

080050bc <memmove>:
 80050bc:	4288      	cmp	r0, r1
 80050be:	b510      	push	{r4, lr}
 80050c0:	eb01 0402 	add.w	r4, r1, r2
 80050c4:	d902      	bls.n	80050cc <memmove+0x10>
 80050c6:	4284      	cmp	r4, r0
 80050c8:	4623      	mov	r3, r4
 80050ca:	d807      	bhi.n	80050dc <memmove+0x20>
 80050cc:	1e43      	subs	r3, r0, #1
 80050ce:	42a1      	cmp	r1, r4
 80050d0:	d008      	beq.n	80050e4 <memmove+0x28>
 80050d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050da:	e7f8      	b.n	80050ce <memmove+0x12>
 80050dc:	4402      	add	r2, r0
 80050de:	4601      	mov	r1, r0
 80050e0:	428a      	cmp	r2, r1
 80050e2:	d100      	bne.n	80050e6 <memmove+0x2a>
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ee:	e7f7      	b.n	80050e0 <memmove+0x24>

080050f0 <_free_r>:
 80050f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f2:	2900      	cmp	r1, #0
 80050f4:	d048      	beq.n	8005188 <_free_r+0x98>
 80050f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005102:	bfb8      	it	lt
 8005104:	18e4      	addlt	r4, r4, r3
 8005106:	f000 fb0d 	bl	8005724 <__malloc_lock>
 800510a:	4a20      	ldr	r2, [pc, #128]	; (800518c <_free_r+0x9c>)
 800510c:	9801      	ldr	r0, [sp, #4]
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	4615      	mov	r5, r2
 8005112:	b933      	cbnz	r3, 8005122 <_free_r+0x32>
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	6014      	str	r4, [r2, #0]
 8005118:	b003      	add	sp, #12
 800511a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800511e:	f000 bb07 	b.w	8005730 <__malloc_unlock>
 8005122:	42a3      	cmp	r3, r4
 8005124:	d90b      	bls.n	800513e <_free_r+0x4e>
 8005126:	6821      	ldr	r1, [r4, #0]
 8005128:	1862      	adds	r2, r4, r1
 800512a:	4293      	cmp	r3, r2
 800512c:	bf04      	itt	eq
 800512e:	681a      	ldreq	r2, [r3, #0]
 8005130:	685b      	ldreq	r3, [r3, #4]
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	bf04      	itt	eq
 8005136:	1852      	addeq	r2, r2, r1
 8005138:	6022      	streq	r2, [r4, #0]
 800513a:	602c      	str	r4, [r5, #0]
 800513c:	e7ec      	b.n	8005118 <_free_r+0x28>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x58>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x4e>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1855      	adds	r5, r2, r1
 800514c:	42a5      	cmp	r5, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x78>
 8005150:	6824      	ldr	r4, [r4, #0]
 8005152:	4421      	add	r1, r4
 8005154:	1854      	adds	r4, r2, r1
 8005156:	42a3      	cmp	r3, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1dd      	bne.n	8005118 <_free_r+0x28>
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	4421      	add	r1, r4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	e7d7      	b.n	8005118 <_free_r+0x28>
 8005168:	d902      	bls.n	8005170 <_free_r+0x80>
 800516a:	230c      	movs	r3, #12
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	e7d3      	b.n	8005118 <_free_r+0x28>
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	1961      	adds	r1, r4, r5
 8005174:	428b      	cmp	r3, r1
 8005176:	bf04      	itt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	bf04      	itt	eq
 8005180:	1949      	addeq	r1, r1, r5
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	6054      	str	r4, [r2, #4]
 8005186:	e7c7      	b.n	8005118 <_free_r+0x28>
 8005188:	b003      	add	sp, #12
 800518a:	bd30      	pop	{r4, r5, pc}
 800518c:	200005a0 	.word	0x200005a0

08005190 <_malloc_r>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	1ccd      	adds	r5, r1, #3
 8005194:	f025 0503 	bic.w	r5, r5, #3
 8005198:	3508      	adds	r5, #8
 800519a:	2d0c      	cmp	r5, #12
 800519c:	bf38      	it	cc
 800519e:	250c      	movcc	r5, #12
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	4606      	mov	r6, r0
 80051a4:	db01      	blt.n	80051aa <_malloc_r+0x1a>
 80051a6:	42a9      	cmp	r1, r5
 80051a8:	d903      	bls.n	80051b2 <_malloc_r+0x22>
 80051aa:	230c      	movs	r3, #12
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	2000      	movs	r0, #0
 80051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b2:	f000 fab7 	bl	8005724 <__malloc_lock>
 80051b6:	4921      	ldr	r1, [pc, #132]	; (800523c <_malloc_r+0xac>)
 80051b8:	680a      	ldr	r2, [r1, #0]
 80051ba:	4614      	mov	r4, r2
 80051bc:	b99c      	cbnz	r4, 80051e6 <_malloc_r+0x56>
 80051be:	4f20      	ldr	r7, [pc, #128]	; (8005240 <_malloc_r+0xb0>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b923      	cbnz	r3, 80051ce <_malloc_r+0x3e>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	f000 f9be 	bl	8005548 <_sbrk_r>
 80051cc:	6038      	str	r0, [r7, #0]
 80051ce:	4629      	mov	r1, r5
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 f9b9 	bl	8005548 <_sbrk_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	d123      	bne.n	8005222 <_malloc_r+0x92>
 80051da:	230c      	movs	r3, #12
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 faa6 	bl	8005730 <__malloc_unlock>
 80051e4:	e7e3      	b.n	80051ae <_malloc_r+0x1e>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	1b5b      	subs	r3, r3, r5
 80051ea:	d417      	bmi.n	800521c <_malloc_r+0x8c>
 80051ec:	2b0b      	cmp	r3, #11
 80051ee:	d903      	bls.n	80051f8 <_malloc_r+0x68>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	441c      	add	r4, r3
 80051f4:	6025      	str	r5, [r4, #0]
 80051f6:	e004      	b.n	8005202 <_malloc_r+0x72>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	42a2      	cmp	r2, r4
 80051fc:	bf0c      	ite	eq
 80051fe:	600b      	streq	r3, [r1, #0]
 8005200:	6053      	strne	r3, [r2, #4]
 8005202:	4630      	mov	r0, r6
 8005204:	f000 fa94 	bl	8005730 <__malloc_unlock>
 8005208:	f104 000b 	add.w	r0, r4, #11
 800520c:	1d23      	adds	r3, r4, #4
 800520e:	f020 0007 	bic.w	r0, r0, #7
 8005212:	1ac2      	subs	r2, r0, r3
 8005214:	d0cc      	beq.n	80051b0 <_malloc_r+0x20>
 8005216:	1a1b      	subs	r3, r3, r0
 8005218:	50a3      	str	r3, [r4, r2]
 800521a:	e7c9      	b.n	80051b0 <_malloc_r+0x20>
 800521c:	4622      	mov	r2, r4
 800521e:	6864      	ldr	r4, [r4, #4]
 8005220:	e7cc      	b.n	80051bc <_malloc_r+0x2c>
 8005222:	1cc4      	adds	r4, r0, #3
 8005224:	f024 0403 	bic.w	r4, r4, #3
 8005228:	42a0      	cmp	r0, r4
 800522a:	d0e3      	beq.n	80051f4 <_malloc_r+0x64>
 800522c:	1a21      	subs	r1, r4, r0
 800522e:	4630      	mov	r0, r6
 8005230:	f000 f98a 	bl	8005548 <_sbrk_r>
 8005234:	3001      	adds	r0, #1
 8005236:	d1dd      	bne.n	80051f4 <_malloc_r+0x64>
 8005238:	e7cf      	b.n	80051da <_malloc_r+0x4a>
 800523a:	bf00      	nop
 800523c:	200005a0 	.word	0x200005a0
 8005240:	200005a4 	.word	0x200005a4

08005244 <_realloc_r>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	4607      	mov	r7, r0
 8005248:	4614      	mov	r4, r2
 800524a:	460e      	mov	r6, r1
 800524c:	b921      	cbnz	r1, 8005258 <_realloc_r+0x14>
 800524e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005252:	4611      	mov	r1, r2
 8005254:	f7ff bf9c 	b.w	8005190 <_malloc_r>
 8005258:	b922      	cbnz	r2, 8005264 <_realloc_r+0x20>
 800525a:	f7ff ff49 	bl	80050f0 <_free_r>
 800525e:	4625      	mov	r5, r4
 8005260:	4628      	mov	r0, r5
 8005262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005264:	f000 fa6a 	bl	800573c <_malloc_usable_size_r>
 8005268:	42a0      	cmp	r0, r4
 800526a:	d20f      	bcs.n	800528c <_realloc_r+0x48>
 800526c:	4621      	mov	r1, r4
 800526e:	4638      	mov	r0, r7
 8005270:	f7ff ff8e 	bl	8005190 <_malloc_r>
 8005274:	4605      	mov	r5, r0
 8005276:	2800      	cmp	r0, #0
 8005278:	d0f2      	beq.n	8005260 <_realloc_r+0x1c>
 800527a:	4631      	mov	r1, r6
 800527c:	4622      	mov	r2, r4
 800527e:	f7ff f913 	bl	80044a8 <memcpy>
 8005282:	4631      	mov	r1, r6
 8005284:	4638      	mov	r0, r7
 8005286:	f7ff ff33 	bl	80050f0 <_free_r>
 800528a:	e7e9      	b.n	8005260 <_realloc_r+0x1c>
 800528c:	4635      	mov	r5, r6
 800528e:	e7e7      	b.n	8005260 <_realloc_r+0x1c>

08005290 <__ssputs_r>:
 8005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	688e      	ldr	r6, [r1, #8]
 8005296:	429e      	cmp	r6, r3
 8005298:	4682      	mov	sl, r0
 800529a:	460c      	mov	r4, r1
 800529c:	4690      	mov	r8, r2
 800529e:	461f      	mov	r7, r3
 80052a0:	d838      	bhi.n	8005314 <__ssputs_r+0x84>
 80052a2:	898a      	ldrh	r2, [r1, #12]
 80052a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a8:	d032      	beq.n	8005310 <__ssputs_r+0x80>
 80052aa:	6825      	ldr	r5, [r4, #0]
 80052ac:	6909      	ldr	r1, [r1, #16]
 80052ae:	eba5 0901 	sub.w	r9, r5, r1
 80052b2:	6965      	ldr	r5, [r4, #20]
 80052b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052bc:	3301      	adds	r3, #1
 80052be:	444b      	add	r3, r9
 80052c0:	106d      	asrs	r5, r5, #1
 80052c2:	429d      	cmp	r5, r3
 80052c4:	bf38      	it	cc
 80052c6:	461d      	movcc	r5, r3
 80052c8:	0553      	lsls	r3, r2, #21
 80052ca:	d531      	bpl.n	8005330 <__ssputs_r+0xa0>
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7ff ff5f 	bl	8005190 <_malloc_r>
 80052d2:	4606      	mov	r6, r0
 80052d4:	b950      	cbnz	r0, 80052ec <__ssputs_r+0x5c>
 80052d6:	230c      	movs	r3, #12
 80052d8:	f8ca 3000 	str.w	r3, [sl]
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e2:	81a3      	strh	r3, [r4, #12]
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ec:	6921      	ldr	r1, [r4, #16]
 80052ee:	464a      	mov	r2, r9
 80052f0:	f7ff f8da 	bl	80044a8 <memcpy>
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	6126      	str	r6, [r4, #16]
 8005302:	6165      	str	r5, [r4, #20]
 8005304:	444e      	add	r6, r9
 8005306:	eba5 0509 	sub.w	r5, r5, r9
 800530a:	6026      	str	r6, [r4, #0]
 800530c:	60a5      	str	r5, [r4, #8]
 800530e:	463e      	mov	r6, r7
 8005310:	42be      	cmp	r6, r7
 8005312:	d900      	bls.n	8005316 <__ssputs_r+0x86>
 8005314:	463e      	mov	r6, r7
 8005316:	4632      	mov	r2, r6
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	4641      	mov	r1, r8
 800531c:	f7ff fece 	bl	80050bc <memmove>
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	4432      	add	r2, r6
 8005328:	60a3      	str	r3, [r4, #8]
 800532a:	6022      	str	r2, [r4, #0]
 800532c:	2000      	movs	r0, #0
 800532e:	e7db      	b.n	80052e8 <__ssputs_r+0x58>
 8005330:	462a      	mov	r2, r5
 8005332:	f7ff ff87 	bl	8005244 <_realloc_r>
 8005336:	4606      	mov	r6, r0
 8005338:	2800      	cmp	r0, #0
 800533a:	d1e1      	bne.n	8005300 <__ssputs_r+0x70>
 800533c:	6921      	ldr	r1, [r4, #16]
 800533e:	4650      	mov	r0, sl
 8005340:	f7ff fed6 	bl	80050f0 <_free_r>
 8005344:	e7c7      	b.n	80052d6 <__ssputs_r+0x46>
	...

08005348 <_svfiprintf_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	4698      	mov	r8, r3
 800534e:	898b      	ldrh	r3, [r1, #12]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	b09d      	sub	sp, #116	; 0x74
 8005354:	4607      	mov	r7, r0
 8005356:	460d      	mov	r5, r1
 8005358:	4614      	mov	r4, r2
 800535a:	d50e      	bpl.n	800537a <_svfiprintf_r+0x32>
 800535c:	690b      	ldr	r3, [r1, #16]
 800535e:	b963      	cbnz	r3, 800537a <_svfiprintf_r+0x32>
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	f7ff ff15 	bl	8005190 <_malloc_r>
 8005366:	6028      	str	r0, [r5, #0]
 8005368:	6128      	str	r0, [r5, #16]
 800536a:	b920      	cbnz	r0, 8005376 <_svfiprintf_r+0x2e>
 800536c:	230c      	movs	r3, #12
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e0d1      	b.n	800551a <_svfiprintf_r+0x1d2>
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	616b      	str	r3, [r5, #20]
 800537a:	2300      	movs	r3, #0
 800537c:	9309      	str	r3, [sp, #36]	; 0x24
 800537e:	2320      	movs	r3, #32
 8005380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005384:	f8cd 800c 	str.w	r8, [sp, #12]
 8005388:	2330      	movs	r3, #48	; 0x30
 800538a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005534 <_svfiprintf_r+0x1ec>
 800538e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005392:	f04f 0901 	mov.w	r9, #1
 8005396:	4623      	mov	r3, r4
 8005398:	469a      	mov	sl, r3
 800539a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800539e:	b10a      	cbz	r2, 80053a4 <_svfiprintf_r+0x5c>
 80053a0:	2a25      	cmp	r2, #37	; 0x25
 80053a2:	d1f9      	bne.n	8005398 <_svfiprintf_r+0x50>
 80053a4:	ebba 0b04 	subs.w	fp, sl, r4
 80053a8:	d00b      	beq.n	80053c2 <_svfiprintf_r+0x7a>
 80053aa:	465b      	mov	r3, fp
 80053ac:	4622      	mov	r2, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ff6d 	bl	8005290 <__ssputs_r>
 80053b6:	3001      	adds	r0, #1
 80053b8:	f000 80aa 	beq.w	8005510 <_svfiprintf_r+0x1c8>
 80053bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053be:	445a      	add	r2, fp
 80053c0:	9209      	str	r2, [sp, #36]	; 0x24
 80053c2:	f89a 3000 	ldrb.w	r3, [sl]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 80a2 	beq.w	8005510 <_svfiprintf_r+0x1c8>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295
 80053d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053d6:	f10a 0a01 	add.w	sl, sl, #1
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	9307      	str	r3, [sp, #28]
 80053de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e2:	931a      	str	r3, [sp, #104]	; 0x68
 80053e4:	4654      	mov	r4, sl
 80053e6:	2205      	movs	r2, #5
 80053e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ec:	4851      	ldr	r0, [pc, #324]	; (8005534 <_svfiprintf_r+0x1ec>)
 80053ee:	f7fa fef7 	bl	80001e0 <memchr>
 80053f2:	9a04      	ldr	r2, [sp, #16]
 80053f4:	b9d8      	cbnz	r0, 800542e <_svfiprintf_r+0xe6>
 80053f6:	06d0      	lsls	r0, r2, #27
 80053f8:	bf44      	itt	mi
 80053fa:	2320      	movmi	r3, #32
 80053fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005400:	0711      	lsls	r1, r2, #28
 8005402:	bf44      	itt	mi
 8005404:	232b      	movmi	r3, #43	; 0x2b
 8005406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540a:	f89a 3000 	ldrb.w	r3, [sl]
 800540e:	2b2a      	cmp	r3, #42	; 0x2a
 8005410:	d015      	beq.n	800543e <_svfiprintf_r+0xf6>
 8005412:	9a07      	ldr	r2, [sp, #28]
 8005414:	4654      	mov	r4, sl
 8005416:	2000      	movs	r0, #0
 8005418:	f04f 0c0a 	mov.w	ip, #10
 800541c:	4621      	mov	r1, r4
 800541e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005422:	3b30      	subs	r3, #48	; 0x30
 8005424:	2b09      	cmp	r3, #9
 8005426:	d94e      	bls.n	80054c6 <_svfiprintf_r+0x17e>
 8005428:	b1b0      	cbz	r0, 8005458 <_svfiprintf_r+0x110>
 800542a:	9207      	str	r2, [sp, #28]
 800542c:	e014      	b.n	8005458 <_svfiprintf_r+0x110>
 800542e:	eba0 0308 	sub.w	r3, r0, r8
 8005432:	fa09 f303 	lsl.w	r3, r9, r3
 8005436:	4313      	orrs	r3, r2
 8005438:	9304      	str	r3, [sp, #16]
 800543a:	46a2      	mov	sl, r4
 800543c:	e7d2      	b.n	80053e4 <_svfiprintf_r+0x9c>
 800543e:	9b03      	ldr	r3, [sp, #12]
 8005440:	1d19      	adds	r1, r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	9103      	str	r1, [sp, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfbb      	ittet	lt
 800544a:	425b      	neglt	r3, r3
 800544c:	f042 0202 	orrlt.w	r2, r2, #2
 8005450:	9307      	strge	r3, [sp, #28]
 8005452:	9307      	strlt	r3, [sp, #28]
 8005454:	bfb8      	it	lt
 8005456:	9204      	strlt	r2, [sp, #16]
 8005458:	7823      	ldrb	r3, [r4, #0]
 800545a:	2b2e      	cmp	r3, #46	; 0x2e
 800545c:	d10c      	bne.n	8005478 <_svfiprintf_r+0x130>
 800545e:	7863      	ldrb	r3, [r4, #1]
 8005460:	2b2a      	cmp	r3, #42	; 0x2a
 8005462:	d135      	bne.n	80054d0 <_svfiprintf_r+0x188>
 8005464:	9b03      	ldr	r3, [sp, #12]
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	9203      	str	r2, [sp, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	bfb8      	it	lt
 8005470:	f04f 33ff 	movlt.w	r3, #4294967295
 8005474:	3402      	adds	r4, #2
 8005476:	9305      	str	r3, [sp, #20]
 8005478:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005544 <_svfiprintf_r+0x1fc>
 800547c:	7821      	ldrb	r1, [r4, #0]
 800547e:	2203      	movs	r2, #3
 8005480:	4650      	mov	r0, sl
 8005482:	f7fa fead 	bl	80001e0 <memchr>
 8005486:	b140      	cbz	r0, 800549a <_svfiprintf_r+0x152>
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	eba0 000a 	sub.w	r0, r0, sl
 800548e:	fa03 f000 	lsl.w	r0, r3, r0
 8005492:	9b04      	ldr	r3, [sp, #16]
 8005494:	4303      	orrs	r3, r0
 8005496:	3401      	adds	r4, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549e:	4826      	ldr	r0, [pc, #152]	; (8005538 <_svfiprintf_r+0x1f0>)
 80054a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a4:	2206      	movs	r2, #6
 80054a6:	f7fa fe9b 	bl	80001e0 <memchr>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d038      	beq.n	8005520 <_svfiprintf_r+0x1d8>
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <_svfiprintf_r+0x1f4>)
 80054b0:	bb1b      	cbnz	r3, 80054fa <_svfiprintf_r+0x1b2>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	3307      	adds	r3, #7
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	3308      	adds	r3, #8
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c0:	4433      	add	r3, r6
 80054c2:	9309      	str	r3, [sp, #36]	; 0x24
 80054c4:	e767      	b.n	8005396 <_svfiprintf_r+0x4e>
 80054c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ca:	460c      	mov	r4, r1
 80054cc:	2001      	movs	r0, #1
 80054ce:	e7a5      	b.n	800541c <_svfiprintf_r+0xd4>
 80054d0:	2300      	movs	r3, #0
 80054d2:	3401      	adds	r4, #1
 80054d4:	9305      	str	r3, [sp, #20]
 80054d6:	4619      	mov	r1, r3
 80054d8:	f04f 0c0a 	mov.w	ip, #10
 80054dc:	4620      	mov	r0, r4
 80054de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e2:	3a30      	subs	r2, #48	; 0x30
 80054e4:	2a09      	cmp	r2, #9
 80054e6:	d903      	bls.n	80054f0 <_svfiprintf_r+0x1a8>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0c5      	beq.n	8005478 <_svfiprintf_r+0x130>
 80054ec:	9105      	str	r1, [sp, #20]
 80054ee:	e7c3      	b.n	8005478 <_svfiprintf_r+0x130>
 80054f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f4:	4604      	mov	r4, r0
 80054f6:	2301      	movs	r3, #1
 80054f8:	e7f0      	b.n	80054dc <_svfiprintf_r+0x194>
 80054fa:	ab03      	add	r3, sp, #12
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	462a      	mov	r2, r5
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <_svfiprintf_r+0x1f8>)
 8005502:	a904      	add	r1, sp, #16
 8005504:	4638      	mov	r0, r7
 8005506:	f3af 8000 	nop.w
 800550a:	1c42      	adds	r2, r0, #1
 800550c:	4606      	mov	r6, r0
 800550e:	d1d6      	bne.n	80054be <_svfiprintf_r+0x176>
 8005510:	89ab      	ldrh	r3, [r5, #12]
 8005512:	065b      	lsls	r3, r3, #25
 8005514:	f53f af2c 	bmi.w	8005370 <_svfiprintf_r+0x28>
 8005518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800551a:	b01d      	add	sp, #116	; 0x74
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	ab03      	add	r3, sp, #12
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	462a      	mov	r2, r5
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_svfiprintf_r+0x1f8>)
 8005528:	a904      	add	r1, sp, #16
 800552a:	4638      	mov	r0, r7
 800552c:	f7ff f99a 	bl	8004864 <_printf_i>
 8005530:	e7eb      	b.n	800550a <_svfiprintf_r+0x1c2>
 8005532:	bf00      	nop
 8005534:	08005ba8 	.word	0x08005ba8
 8005538:	08005bb2 	.word	0x08005bb2
 800553c:	00000000 	.word	0x00000000
 8005540:	08005291 	.word	0x08005291
 8005544:	08005bae 	.word	0x08005bae

08005548 <_sbrk_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d06      	ldr	r5, [pc, #24]	; (8005564 <_sbrk_r+0x1c>)
 800554c:	2300      	movs	r3, #0
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	f7fb fa66 	bl	8000a24 <_sbrk>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_sbrk_r+0x1a>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_sbrk_r+0x1a>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	200006bc 	.word	0x200006bc

08005568 <_raise_r>:
 8005568:	291f      	cmp	r1, #31
 800556a:	b538      	push	{r3, r4, r5, lr}
 800556c:	4604      	mov	r4, r0
 800556e:	460d      	mov	r5, r1
 8005570:	d904      	bls.n	800557c <_raise_r+0x14>
 8005572:	2316      	movs	r3, #22
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800557e:	b112      	cbz	r2, 8005586 <_raise_r+0x1e>
 8005580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005584:	b94b      	cbnz	r3, 800559a <_raise_r+0x32>
 8005586:	4620      	mov	r0, r4
 8005588:	f000 f830 	bl	80055ec <_getpid_r>
 800558c:	462a      	mov	r2, r5
 800558e:	4601      	mov	r1, r0
 8005590:	4620      	mov	r0, r4
 8005592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005596:	f000 b817 	b.w	80055c8 <_kill_r>
 800559a:	2b01      	cmp	r3, #1
 800559c:	d00a      	beq.n	80055b4 <_raise_r+0x4c>
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	d103      	bne.n	80055aa <_raise_r+0x42>
 80055a2:	2316      	movs	r3, #22
 80055a4:	6003      	str	r3, [r0, #0]
 80055a6:	2001      	movs	r0, #1
 80055a8:	e7e7      	b.n	800557a <_raise_r+0x12>
 80055aa:	2400      	movs	r4, #0
 80055ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055b0:	4628      	mov	r0, r5
 80055b2:	4798      	blx	r3
 80055b4:	2000      	movs	r0, #0
 80055b6:	e7e0      	b.n	800557a <_raise_r+0x12>

080055b8 <raise>:
 80055b8:	4b02      	ldr	r3, [pc, #8]	; (80055c4 <raise+0xc>)
 80055ba:	4601      	mov	r1, r0
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	f7ff bfd3 	b.w	8005568 <_raise_r>
 80055c2:	bf00      	nop
 80055c4:	2000000c 	.word	0x2000000c

080055c8 <_kill_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <_kill_r+0x20>)
 80055cc:	2300      	movs	r3, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	4611      	mov	r1, r2
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	f7fb f99d 	bl	8000914 <_kill>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	d102      	bne.n	80055e4 <_kill_r+0x1c>
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	b103      	cbz	r3, 80055e4 <_kill_r+0x1c>
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	bd38      	pop	{r3, r4, r5, pc}
 80055e6:	bf00      	nop
 80055e8:	200006bc 	.word	0x200006bc

080055ec <_getpid_r>:
 80055ec:	f7fb b98a 	b.w	8000904 <_getpid>

080055f0 <__sread>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f8:	f000 f8a8 	bl	800574c <_read_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	bfab      	itete	ge
 8005600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005602:	89a3      	ldrhlt	r3, [r4, #12]
 8005604:	181b      	addge	r3, r3, r0
 8005606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800560a:	bfac      	ite	ge
 800560c:	6563      	strge	r3, [r4, #84]	; 0x54
 800560e:	81a3      	strhlt	r3, [r4, #12]
 8005610:	bd10      	pop	{r4, pc}

08005612 <__swrite>:
 8005612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	461f      	mov	r7, r3
 8005618:	898b      	ldrh	r3, [r1, #12]
 800561a:	05db      	lsls	r3, r3, #23
 800561c:	4605      	mov	r5, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4616      	mov	r6, r2
 8005622:	d505      	bpl.n	8005630 <__swrite+0x1e>
 8005624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005628:	2302      	movs	r3, #2
 800562a:	2200      	movs	r2, #0
 800562c:	f000 f868 	bl	8005700 <_lseek_r>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	4632      	mov	r2, r6
 800563e:	463b      	mov	r3, r7
 8005640:	4628      	mov	r0, r5
 8005642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005646:	f000 b817 	b.w	8005678 <_write_r>

0800564a <__sseek>:
 800564a:	b510      	push	{r4, lr}
 800564c:	460c      	mov	r4, r1
 800564e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005652:	f000 f855 	bl	8005700 <_lseek_r>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	bf15      	itete	ne
 800565c:	6560      	strne	r0, [r4, #84]	; 0x54
 800565e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005666:	81a3      	strheq	r3, [r4, #12]
 8005668:	bf18      	it	ne
 800566a:	81a3      	strhne	r3, [r4, #12]
 800566c:	bd10      	pop	{r4, pc}

0800566e <__sclose>:
 800566e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005672:	f000 b813 	b.w	800569c <_close_r>
	...

08005678 <_write_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	; (8005698 <_write_r+0x20>)
 800567c:	4604      	mov	r4, r0
 800567e:	4608      	mov	r0, r1
 8005680:	4611      	mov	r1, r2
 8005682:	2200      	movs	r2, #0
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f7fb f97b 	bl	8000982 <_write>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_write_r+0x1e>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_write_r+0x1e>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	200006bc 	.word	0x200006bc

0800569c <_close_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d06      	ldr	r5, [pc, #24]	; (80056b8 <_close_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fb f987 	bl	80009ba <_close>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_close_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_close_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200006bc 	.word	0x200006bc

080056bc <_fstat_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d07      	ldr	r5, [pc, #28]	; (80056dc <_fstat_r+0x20>)
 80056c0:	2300      	movs	r3, #0
 80056c2:	4604      	mov	r4, r0
 80056c4:	4608      	mov	r0, r1
 80056c6:	4611      	mov	r1, r2
 80056c8:	602b      	str	r3, [r5, #0]
 80056ca:	f7fb f982 	bl	80009d2 <_fstat>
 80056ce:	1c43      	adds	r3, r0, #1
 80056d0:	d102      	bne.n	80056d8 <_fstat_r+0x1c>
 80056d2:	682b      	ldr	r3, [r5, #0]
 80056d4:	b103      	cbz	r3, 80056d8 <_fstat_r+0x1c>
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	bd38      	pop	{r3, r4, r5, pc}
 80056da:	bf00      	nop
 80056dc:	200006bc 	.word	0x200006bc

080056e0 <_isatty_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d06      	ldr	r5, [pc, #24]	; (80056fc <_isatty_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	602b      	str	r3, [r5, #0]
 80056ec:	f7fb f981 	bl	80009f2 <_isatty>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_isatty_r+0x1a>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_isatty_r+0x1a>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	200006bc 	.word	0x200006bc

08005700 <_lseek_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d07      	ldr	r5, [pc, #28]	; (8005720 <_lseek_r+0x20>)
 8005704:	4604      	mov	r4, r0
 8005706:	4608      	mov	r0, r1
 8005708:	4611      	mov	r1, r2
 800570a:	2200      	movs	r2, #0
 800570c:	602a      	str	r2, [r5, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	f7fb f97a 	bl	8000a08 <_lseek>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_lseek_r+0x1e>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_lseek_r+0x1e>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	200006bc 	.word	0x200006bc

08005724 <__malloc_lock>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__malloc_lock+0x8>)
 8005726:	f7ff bc63 	b.w	8004ff0 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	200006b4 	.word	0x200006b4

08005730 <__malloc_unlock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_unlock+0x8>)
 8005732:	f7ff bc5e 	b.w	8004ff2 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	200006b4 	.word	0x200006b4

0800573c <_malloc_usable_size_r>:
 800573c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005740:	1f18      	subs	r0, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfbc      	itt	lt
 8005746:	580b      	ldrlt	r3, [r1, r0]
 8005748:	18c0      	addlt	r0, r0, r3
 800574a:	4770      	bx	lr

0800574c <_read_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d07      	ldr	r5, [pc, #28]	; (800576c <_read_r+0x20>)
 8005750:	4604      	mov	r4, r0
 8005752:	4608      	mov	r0, r1
 8005754:	4611      	mov	r1, r2
 8005756:	2200      	movs	r2, #0
 8005758:	602a      	str	r2, [r5, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f7fb f8f4 	bl	8000948 <_read>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_read_r+0x1e>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_read_r+0x1e>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	200006bc 	.word	0x200006bc

08005770 <_init>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr

0800577c <_fini>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr
