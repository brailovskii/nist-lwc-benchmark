
lwc_nist_benchmark_stm32f303vc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a54  08004a54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a54  08004a54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a54  08004a54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000070  08004acc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08004acc  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100e2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e2  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00033348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f38b  00000000  00000000  00033f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010496  00000000  00000000  000532cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c06aa  00000000  00000000  00063761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a24  00000000  00000000  00123e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004730 	.word	0x08004730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004730 	.word	0x08004730

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4907      	ldr	r1, [pc, #28]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4013      	ands	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029e:	68fb      	ldr	r3, [r7, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fa12 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f80e 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f8c8 	bl	8000450 <MX_GPIO_Init>
  MX_TIM6_Init();
 80002c0:	f000 f860 	bl	8000384 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80002c4:	f000 f894 	bl	80003f0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 80002c8:	f003 fbfc 	bl	8003ac4 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80002cc:	4801      	ldr	r0, [pc, #4]	; (80002d4 <main+0x24>)
 80002ce:	f000 fa6b 	bl	80007a8 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 80002d2:	e7f9      	b.n	80002c8 <main+0x18>
 80002d4:	000f4240 	.word	0x000f4240

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09e      	sub	sp, #120	; 0x78
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002e2:	2228      	movs	r2, #40	; 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fdec 	bl	8003ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	223c      	movs	r2, #60	; 0x3c
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fdde 	bl	8003ec4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	2302      	movs	r3, #2
 800030a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000310:	2310      	movs	r3, #16
 8000312:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000318:	2300      	movs	r3, #0
 800031a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800031c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000320:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fcee 	bl	8000d08 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000332:	f000 f899 	bl	8000468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2302      	movs	r3, #2
 800033c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f001 fbe1 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800035c:	f000 f884 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000360:	2301      	movs	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fe0a 	bl	8001f84 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000376:	f000 f877 	bl	8000468 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3778      	adds	r7, #120	; 0x78
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_TIM6_Init+0x64>)
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <MX_TIM6_Init+0x68>)
 8000398:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_TIM6_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003b6:	f001 ff95 	bl	80022e4 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80003c0:	f000 f852 	bl	8000468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003d2:	f002 fa4f 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80003dc:	f000 f844 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000052c 	.word	0x2000052c
 80003ec:	40001000 	.word	0x40001000

080003f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <MX_USART1_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000434:	f002 fabc 	bl	80029b0 <HAL_UART_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f813 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200004a8 	.word	0x200004a8
 800044c:	40013800 	.word	0x40013800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000454:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000458:	f7ff ff12 	bl	8000280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800045c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000460:	f7ff ff0e 	bl	8000280 <LL_AHB1_GRP1_EnableClock>

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x44>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_MspInit+0x44>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <HAL_MspInit+0x44>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_MspInit+0x44>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_TIM_Base_MspInit+0x44>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d113      	bne.n	80004f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <HAL_TIM_Base_MspInit+0x48>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_TIM_Base_MspInit+0x48>)
 80004d4:	f043 0310 	orr.w	r3, r3, #16
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_TIM_Base_MspInit+0x48>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 0310 	and.w	r3, r3, #16
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2036      	movs	r0, #54	; 0x36
 80004ec:	f000 fa5b 	bl	80009a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004f0:	2036      	movs	r0, #54	; 0x36
 80004f2:	f000 fa74 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40001000 	.word	0x40001000
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <HAL_UART_MspInit+0x7c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d127      	bne.n	800057a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <HAL_UART_MspInit+0x80>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a16      	ldr	r2, [pc, #88]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800055a:	2330      	movs	r3, #48	; 0x30
 800055c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000566:	2303      	movs	r3, #3
 8000568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800056a:	2307      	movs	r3, #7
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <HAL_UART_MspInit+0x84>)
 8000576:	f000 fa4d 	bl	8000a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	; 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40013800 	.word	0x40013800
 8000588:	40021000 	.word	0x40021000
 800058c:	48000800 	.word	0x48000800

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <NMI_Handler+0x4>

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <MemManage_Handler+0x4>

080005a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <BusFault_Handler+0x4>

080005a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <UsageFault_Handler+0x4>

080005ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 f8c4 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <TIM6_DAC_IRQHandler+0x10>)
 80005ea:	f001 ff6c 	bl	80024c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000052c 	.word	0x2000052c

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f003 fc12 	bl	8003e50 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000a000 	.word	0x2000a000
 8000658:	00000400 	.word	0x00000400
 800065c:	2000008c 	.word	0x2000008c
 8000660:	200005c0 	.word	0x200005c0

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff ffd7 	bl	8000664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f003 fbd1 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fdf9 	bl	80002b0 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006cc:	08004a5c 	.word	0x08004a5c
  ldr r2, =_sbss
 80006d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006d4:	200005c0 	.word	0x200005c0

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f94f 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff febc 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f967 	bl	80009fa <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f92f 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	20000578 	.word	0x20000578

08000790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;  
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000578 	.word	0x20000578

080007a8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff ffee 	bl	8000790 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffde 	bl	8000790 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	db0b      	blt.n	800087e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 021f 	and.w	r2, r3, #31
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <__NVIC_EnableIRQ+0x38>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff8e 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff29 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff3e 	bl	8000838 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff8e 	bl	80008e4 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff31 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a22:	e154      	b.n	8000cce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 8146 	beq.w	8000cc8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d00b      	beq.n	8000a5c <HAL_GPIO_Init+0x48>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d007      	beq.n	8000a5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a50:	2b11      	cmp	r3, #17
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b12      	cmp	r3, #18
 8000a5a:	d130      	bne.n	8000abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a92:	2201      	movs	r2, #1
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	091b      	lsrs	r3, r3, #4
 8000aa8:	f003 0201 	and.w	r2, r3, #1
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0xea>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d123      	bne.n	8000b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	08da      	lsrs	r2, r3, #3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3208      	adds	r2, #8
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	220f      	movs	r2, #15
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0203 	and.w	r2, r3, #3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80a0 	beq.w	8000cc8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b58      	ldr	r3, [pc, #352]	; (8000cec <HAL_GPIO_Init+0x2d8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a57      	ldr	r2, [pc, #348]	; (8000cec <HAL_GPIO_Init+0x2d8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b55      	ldr	r3, [pc, #340]	; (8000cec <HAL_GPIO_Init+0x2d8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba0:	4a53      	ldr	r2, [pc, #332]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bca:	d019      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a49      	ldr	r2, [pc, #292]	; (8000cf4 <HAL_GPIO_Init+0x2e0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d013      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a48      	ldr	r2, [pc, #288]	; (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d00d      	beq.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a47      	ldr	r2, [pc, #284]	; (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d007      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a46      	ldr	r2, [pc, #280]	; (8000d00 <HAL_GPIO_Init+0x2ec>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d101      	bne.n	8000bf0 <HAL_GPIO_Init+0x1dc>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e008      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000c00:	2300      	movs	r3, #0
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c12:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <HAL_GPIO_Init+0x2dc>)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c20:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c44:	4a2f      	ldr	r2, [pc, #188]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6e:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c98:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f47f aea3 	bne.w	8000a24 <HAL_GPIO_Init+0x10>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000c00 	.word	0x48000c00
 8000d00:	48001000 	.word	0x48001000
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f000 bef4 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 816a 	beq.w	8001006 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d32:	4bb3      	ldr	r3, [pc, #716]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d00c      	beq.n	8000d58 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3e:	4bb0      	ldr	r3, [pc, #704]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d159      	bne.n	8000dfe <HAL_RCC_OscConfig+0xf6>
 8000d4a:	4bad      	ldr	r3, [pc, #692]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d56:	d152      	bne.n	8000dfe <HAL_RCC_OscConfig+0xf6>
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x82>
 8000d84:	4b9e      	ldr	r3, [pc, #632]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0xae>
 8000d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000da6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dbe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dc2:	fa92 f2a2 	rbit	r2, r2
 8000dc6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	f042 0220 	orr.w	r2, r2, #32
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	f002 021f 	and.w	r2, r2, #31
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 810c 	beq.w	8001004 <HAL_RCC_OscConfig+0x2fc>
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8106 	bne.w	8001004 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f000 be86 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e08:	d106      	bne.n	8000e18 <HAL_RCC_OscConfig+0x110>
 8000e0a:	4b7d      	ldr	r3, [pc, #500]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a7c      	ldr	r2, [pc, #496]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e030      	b.n	8000e7a <HAL_RCC_OscConfig+0x172>
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x134>
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a76      	ldr	r2, [pc, #472]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b74      	ldr	r3, [pc, #464]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a73      	ldr	r2, [pc, #460]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e01e      	b.n	8000e7a <HAL_RCC_OscConfig+0x172>
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e46:	d10c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x15a>
 8000e48:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a6c      	ldr	r2, [pc, #432]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a69      	ldr	r2, [pc, #420]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e00b      	b.n	8000e7a <HAL_RCC_OscConfig+0x172>
 8000e62:	4b67      	ldr	r3, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a66      	ldr	r2, [pc, #408]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b64      	ldr	r3, [pc, #400]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a63      	ldr	r2, [pc, #396]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e7a:	4b61      	ldr	r3, [pc, #388]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	f023 020f 	bic.w	r2, r3, #15
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	495d      	ldr	r1, [pc, #372]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d059      	beq.n	8000f4c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fc7a 	bl	8000790 <HAL_GetTick>
 8000e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea0:	e00a      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea2:	f7ff fc75 	bl	8000790 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d902      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f000 be29 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>
 8000eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ecc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed0:	fab3 f383 	clz	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d102      	bne.n	8000eea <HAL_RCC_OscConfig+0x1e2>
 8000ee4:	4b46      	ldr	r3, [pc, #280]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	e015      	b.n	8000f16 <HAL_RCC_OscConfig+0x20e>
 8000eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f06:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f22:	fa92 f2a2 	rbit	r2, r2
 8000f26:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f2a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f2e:	fab2 f282 	clz	r2, r2
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	f042 0220 	orr.w	r2, r2, #32
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f002 021f 	and.w	r2, r2, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0ab      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x19a>
 8000f4a:	e05c      	b.n	8001006 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fc20 	bl	8000790 <HAL_GetTick>
 8000f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f56:	f7ff fc1b 	bl	8000790 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d902      	bls.n	8000f6c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f000 bdcf 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>
 8000f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f84:	fab3 f383 	clz	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d102      	bne.n	8000f9e <HAL_RCC_OscConfig+0x296>
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x2c2>
 8000f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_RCC_OscConfig+0x2f8>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fd6:	fa92 f2a2 	rbit	r2, r2
 8000fda:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fde:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fe2:	fab2 f282 	clz	r2, r2
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	f002 021f 	and.w	r2, r2, #31
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1ab      	bne.n	8000f56 <HAL_RCC_OscConfig+0x24e>
 8000ffe:	e002      	b.n	8001006 <HAL_RCC_OscConfig+0x2fe>
 8001000:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 816f 	beq.w	80012f4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001016:	4bd0      	ldr	r3, [pc, #832]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001022:	4bcd      	ldr	r3, [pc, #820]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b08      	cmp	r3, #8
 800102c:	d16c      	bne.n	8001108 <HAL_RCC_OscConfig+0x400>
 800102e:	4bca      	ldr	r3, [pc, #808]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d166      	bne.n	8001108 <HAL_RCC_OscConfig+0x400>
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800104c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <HAL_RCC_OscConfig+0x362>
 8001064:	4bbc      	ldr	r3, [pc, #752]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	e013      	b.n	8001092 <HAL_RCC_OscConfig+0x38a>
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001082:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800108e:	4bb2      	ldr	r3, [pc, #712]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	2202      	movs	r2, #2
 8001094:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001098:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800109c:	fa92 f2a2 	rbit	r2, r2
 80010a0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010a4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010a8:	fab2 f282 	clz	r2, r2
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	f042 0220 	orr.w	r2, r2, #32
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	f002 021f 	and.w	r2, r2, #31
 80010b8:	2101      	movs	r1, #1
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	4013      	ands	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <HAL_RCC_OscConfig+0x3cc>
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d002      	beq.n	80010d4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f000 bd1b 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4ba0      	ldr	r3, [pc, #640]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	21f8      	movs	r1, #248	; 0xf8
 80010e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010ec:	fa91 f1a1 	rbit	r1, r1
 80010f0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010f8:	fab1 f181 	clz	r1, r1
 80010fc:	b2c9      	uxtb	r1, r1
 80010fe:	408b      	lsls	r3, r1
 8001100:	4995      	ldr	r1, [pc, #596]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	e0f5      	b.n	80012f4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8085 	beq.w	800121e <HAL_RCC_OscConfig+0x516>
 8001114:	2301      	movs	r3, #1
 8001116:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001126:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	461a      	mov	r2, r3
 800113c:	2301      	movs	r3, #1
 800113e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fb26 	bl	8000790 <HAL_GetTick>
 8001144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	e00a      	b.n	8001160 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114a:	f7ff fb21 	bl	8000790 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d902      	bls.n	8001160 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	f000 bcd5 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001172:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	095b      	lsrs	r3, r3, #5
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <HAL_RCC_OscConfig+0x488>
 800118a:	4b73      	ldr	r3, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	e013      	b.n	80011b8 <HAL_RCC_OscConfig+0x4b0>
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011b4:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	2202      	movs	r2, #2
 80011ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011c2:	fa92 f2a2 	rbit	r2, r2
 80011c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	f042 0220 	orr.w	r2, r2, #32
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f002 021f 	and.w	r2, r2, #31
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0af      	beq.n	800114a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	21f8      	movs	r1, #248	; 0xf8
 80011fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001202:	fa91 f1a1 	rbit	r1, r1
 8001206:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800120a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800120e:	fab1 f181 	clz	r1, r1
 8001212:	b2c9      	uxtb	r1, r1
 8001214:	408b      	lsls	r3, r1
 8001216:	4950      	ldr	r1, [pc, #320]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e06a      	b.n	80012f4 <HAL_RCC_OscConfig+0x5ec>
 800121e:	2301      	movs	r3, #1
 8001220:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001230:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001234:	fab3 f383 	clz	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800123e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	461a      	mov	r2, r3
 8001246:	2300      	movs	r3, #0
 8001248:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff faa1 	bl	8000790 <HAL_GetTick>
 800124e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fa9c 	bl	8000790 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d902      	bls.n	800126a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	f000 bc50 	b.w	8001b0a <HAL_RCC_OscConfig+0xe02>
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800127c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001280:	fab3 f383 	clz	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d102      	bne.n	800129a <HAL_RCC_OscConfig+0x592>
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	e013      	b.n	80012c2 <HAL_RCC_OscConfig+0x5ba>
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <HAL_RCC_OscConfig+0x650>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	2202      	movs	r2, #2
 80012c4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012cc:	fa92 f2a2 	rbit	r2, r2
 80012d0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f002 021f 	and.w	r2, r2, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1af      	bne.n	8001254 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80da 	beq.w	80014b8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d069      	beq.n	80013e2 <HAL_RCC_OscConfig+0x6da>
 800130e:	2301      	movs	r3, #1
 8001310:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_OscConfig+0x654>)
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	461a      	mov	r2, r3
 8001334:	2301      	movs	r3, #1
 8001336:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fa2a 	bl	8000790 <HAL_GetTick>
 800133c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001340:	e00e      	b.n	8001360 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fa25 	bl	8000790 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d906      	bls.n	8001360 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e3d9      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	10908120 	.word	0x10908120
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001372:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001376:	2202      	movs	r2, #2
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800138e:	2202      	movs	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4ba5      	ldr	r3, [pc, #660]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80013a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013aa:	2102      	movs	r1, #2
 80013ac:	6019      	str	r1, [r3, #0]
 80013ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	fa93 f1a3 	rbit	r1, r3
 80013b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013bc:	6019      	str	r1, [r3, #0]
  return result;
 80013be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0b0      	beq.n	8001342 <HAL_RCC_OscConfig+0x63a>
 80013e0:	e06a      	b.n	80014b8 <HAL_RCC_OscConfig+0x7b0>
 80013e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013f8:	601a      	str	r2, [r3, #0]
  return result;
 80013fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	4b8c      	ldr	r3, [pc, #560]	; (800163c <HAL_RCC_OscConfig+0x934>)
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	461a      	mov	r2, r3
 8001410:	2300      	movs	r3, #0
 8001412:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff f9bc 	bl	8000790 <HAL_GetTick>
 8001418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e009      	b.n	8001432 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff f9b7 	bl	8000790 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e36b      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 8001432:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001436:	2202      	movs	r2, #2
 8001438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800144e:	2202      	movs	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001466:	2202      	movs	r2, #2
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fa93 f2a3 	rbit	r2, r3
 8001474:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001478:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001482:	2102      	movs	r1, #2
 8001484:	6019      	str	r1, [r3, #0]
 8001486:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fa93 f1a3 	rbit	r1, r3
 8001490:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001494:	6019      	str	r1, [r3, #0]
  return result;
 8001496:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1b2      	bne.n	800141e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8158 	beq.w	8001778 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d112      	bne.n	8001500 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a56      	ldr	r2, [pc, #344]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <HAL_RCC_OscConfig+0x938>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11a      	bne.n	8001542 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <HAL_RCC_OscConfig+0x938>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <HAL_RCC_OscConfig+0x938>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001518:	f7ff f93a 	bl	8000790 <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	e009      	b.n	8001536 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001522:	f7ff f935 	bl	8000790 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e2e9      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_RCC_OscConfig+0x938>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0ef      	beq.n	8001522 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x852>
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a39      	ldr	r2, [pc, #228]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	e02f      	b.n	80015ba <HAL_RCC_OscConfig+0x8b2>
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x876>
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a33      	ldr	r2, [pc, #204]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a30      	ldr	r2, [pc, #192]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e01d      	b.n	80015ba <HAL_RCC_OscConfig+0x8b2>
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d10c      	bne.n	80015a2 <HAL_RCC_OscConfig+0x89a>
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6213      	str	r3, [r2, #32]
 80015a0:	e00b      	b.n	80015ba <HAL_RCC_OscConfig+0x8b2>
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d06b      	beq.n	800169c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff f8e4 	bl	8000790 <HAL_GetTick>
 80015c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff f8df 	bl	8000790 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e291      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 80015e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001614:	601a      	str	r2, [r3, #0]
  return result;
 8001616:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800161a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d109      	bne.n	8001644 <HAL_RCC_OscConfig+0x93c>
 8001630:	4b01      	ldr	r3, [pc, #4]	; (8001638 <HAL_RCC_OscConfig+0x930>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x958>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	10908120 	.word	0x10908120
 8001640:	40007000 	.word	0x40007000
 8001644:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	4bbb      	ldr	r3, [pc, #748]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001664:	2102      	movs	r1, #2
 8001666:	6011      	str	r1, [r2, #0]
 8001668:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	fa92 f1a2 	rbit	r1, r2
 8001672:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001676:	6011      	str	r1, [r2, #0]
  return result;
 8001678:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	fab2 f282 	clz	r2, r2
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f002 021f 	and.w	r2, r2, #31
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d099      	beq.n	80015ce <HAL_RCC_OscConfig+0x8c6>
 800169a:	e063      	b.n	8001764 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7ff f878 	bl	8000790 <HAL_GetTick>
 80016a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff f873 	bl	8000790 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e225      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 80016be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016da:	2202      	movs	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016ec:	601a      	str	r2, [r3, #0]
  return result;
 80016ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d102      	bne.n	800170e <HAL_RCC_OscConfig+0xa06>
 8001708:	4b90      	ldr	r3, [pc, #576]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	e00d      	b.n	800172a <HAL_RCC_OscConfig+0xa22>
 800170e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800172e:	2102      	movs	r1, #2
 8001730:	6011      	str	r1, [r2, #0]
 8001732:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	fa92 f1a2 	rbit	r1, r2
 800173c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001740:	6011      	str	r1, [r2, #0]
  return result;
 8001742:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f002 021f 	and.w	r2, r2, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1a0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001764:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4b77      	ldr	r3, [pc, #476]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	4a76      	ldr	r2, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001776:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 81c2 	beq.w	8001b08 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	f000 819c 	beq.w	8001aca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b02      	cmp	r3, #2
 800179a:	f040 8114 	bne.w	80019c6 <HAL_RCC_OscConfig+0xcbe>
 800179e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	fa93 f2a3 	rbit	r2, r3
 80017b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017b6:	601a      	str	r2, [r3, #0]
  return result;
 80017b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	461a      	mov	r2, r3
 80017d0:	2300      	movs	r3, #0
 80017d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7fe ffdc 	bl	8000790 <HAL_GetTick>
 80017d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017de:	f7fe ffd7 	bl	8000790 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e18b      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 80017f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001810:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0xb24>
 8001826:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e01b      	b.n	8001864 <HAL_RCC_OscConfig+0xb5c>
 800182c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001868:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800186c:	6011      	str	r1, [r2, #0]
 800186e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	fa92 f1a2 	rbit	r1, r2
 8001878:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800187c:	6011      	str	r1, [r2, #0]
  return result;
 800187e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	fab2 f282 	clz	r2, r2
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f002 021f 	and.w	r2, r2, #31
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d19e      	bne.n	80017de <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	4925      	ldr	r1, [pc, #148]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018d4:	601a      	str	r2, [r3, #0]
  return result;
 80018d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018da:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	461a      	mov	r2, r3
 80018ee:	2301      	movs	r3, #1
 80018f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7fe ff4d 	bl	8000790 <HAL_GetTick>
 80018f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fa:	e009      	b.n	8001910 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7fe ff48 	bl	8000790 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0fc      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 8001910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001928:	601a      	str	r2, [r3, #0]
  return result;
 800192a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800192e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0xc48>
 8001944:	4b01      	ldr	r3, [pc, #4]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e01e      	b.n	8001988 <HAL_RCC_OscConfig+0xc80>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_OscConfig+0xe0c>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800198c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	fa92 f1a2 	rbit	r1, r2
 800199c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019a0:	6011      	str	r1, [r2, #0]
  return result;
 80019a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fab2 f282 	clz	r2, r2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f002 021f 	and.w	r2, r2, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d09b      	beq.n	80018fc <HAL_RCC_OscConfig+0xbf4>
 80019c4:	e0a0      	b.n	8001b08 <HAL_RCC_OscConfig+0xe00>
 80019c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019de:	601a      	str	r2, [r3, #0]
  return result;
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	461a      	mov	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe fec8 	bl	8000790 <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7fe fec3 	bl	8000790 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e077      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	601a      	str	r2, [r3, #0]
  return result;
 8001a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0xd4c>
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_OscConfig+0xe0c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0xd84>
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 0318 	add.w	r3, r7, #24
 8001a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_OscConfig+0xe0c>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f107 0210 	add.w	r2, r7, #16
 8001a90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a94:	6011      	str	r1, [r2, #0]
 8001a96:	f107 0210 	add.w	r2, r7, #16
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fa92 f1a2 	rbit	r1, r2
 8001aa0:	f107 020c 	add.w	r2, r7, #12
 8001aa4:	6011      	str	r1, [r2, #0]
  return result;
 8001aa6:	f107 020c 	add.w	r2, r7, #12
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f002 021f 	and.w	r2, r2, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d19e      	bne.n	8001a06 <HAL_RCC_OscConfig+0xcfe>
 8001ac8:	e01e      	b.n	8001b08 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e018      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_RCC_OscConfig+0xe0c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ae0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d108      	bne.n	8001b04 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b09e      	sub	sp, #120	; 0x78
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e162      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b30:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d910      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	4b8d      	ldr	r3, [pc, #564]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 0207 	bic.w	r2, r3, #7
 8001b46:	498b      	ldr	r1, [pc, #556]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e14a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	497f      	ldr	r1, [pc, #508]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80dc 	beq.w	8001d44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d13c      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xf6>
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xa6>
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e00f      	b.n	8001bde <HAL_RCC_ClockConfig+0xc6>
 8001bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	667b      	str	r3, [r7, #100]	; 0x64
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8001bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001be6:	fa92 f2a2 	rbit	r2, r2
 8001bea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bee:	fab2 f282 	clz	r2, r2
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f042 0220 	orr.w	r2, r2, #32
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f002 021f 	and.w	r2, r2, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d17b      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0f3      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d13c      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x178>
 8001c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x128>
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_ClockConfig+0x148>
 8001c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
 8001c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c64:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c68:	fa92 f2a2 	rbit	r2, r2
 8001c6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f002 021f 	and.w	r2, r2, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d13a      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b2      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
 8001c90:	2302      	movs	r3, #2
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x1a0>
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e00d      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1bc>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	61ba      	str	r2, [r7, #24]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	fa92 f2a2 	rbit	r2, r2
 8001cde:	617a      	str	r2, [r7, #20]
  return result;
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f042 0220 	orr.w	r2, r2, #32
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f002 021f 	and.w	r2, r2, #31
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e079      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	491a      	ldr	r1, [pc, #104]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7fe fd3c 	bl	8000790 <HAL_GetTick>
 8001d18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7fe fd38 	bl	8000790 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e061      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_ClockConfig+0x260>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d214      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4906      	ldr	r1, [pc, #24]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <HAL_RCC_ClockConfig+0x25c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e040      	b.n	8001df6 <HAL_RCC_ClockConfig+0x2de>
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_ClockConfig+0x2e8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	491a      	ldr	r1, [pc, #104]	; (8001e00 <HAL_RCC_ClockConfig+0x2e8>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_RCC_ClockConfig+0x2e8>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4912      	ldr	r1, [pc, #72]	; (8001e00 <HAL_RCC_ClockConfig+0x2e8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dba:	f000 f829 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_RCC_ClockConfig+0x2e8>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc8:	22f0      	movs	r2, #240	; 0xf0
 8001dca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	60fa      	str	r2, [r7, #12]
  return result;
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	40d3      	lsrs	r3, r2
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x2ec>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	fa21 f303 	lsr.w	r3, r1, r3
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_RCC_ClockConfig+0x2f0>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_RCC_ClockConfig+0x2f4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fc8a 	bl	8000708 <HAL_InitTick>
  
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3778      	adds	r7, #120	; 0x78
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08004820 	.word	0x08004820
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x30>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x36>
 8001e3e:	e03c      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e42:	623b      	str	r3, [r7, #32]
      break;
 8001e44:	e03c      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	fa92 f2a2 	rbit	r2, r2
 8001e58:	607a      	str	r2, [r7, #4]
  return result;
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	fab2 f282 	clz	r2, r2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	40d3      	lsrs	r3, r2
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	220f      	movs	r2, #15
 8001e74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	fa92 f2a2 	rbit	r2, r2
 8001e7c:	60fa      	str	r2, [r7, #12]
  return result;
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	40d3      	lsrs	r3, r2
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e98:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	e004      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	623b      	str	r3, [r7, #32]
      break;
 8001eb8:	e002      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ebc:	623b      	str	r3, [r7, #32]
      break;
 8001ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	372c      	adds	r7, #44	; 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	007a1200 	.word	0x007a1200
 8001ed8:	08004838 	.word	0x08004838
 8001edc:	08004848 	.word	0x08004848
 8001ee0:	003d0900 	.word	0x003d0900

08001ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f02:	f7ff ffef 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f06:	4601      	mov	r1, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	603a      	str	r2, [r7, #0]
  return result;
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	40d3      	lsrs	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08004830 	.word	0x08004830

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f46:	f7ff ffcd 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	fa92 f2a2 	rbit	r2, r2
 8001f60:	603a      	str	r2, [r7, #0]
  return result;
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	40d3      	lsrs	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08004830 	.word	0x08004830

08001f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b092      	sub	sp, #72	; 0x48
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80d4 	beq.w	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa8:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a4a      	ldr	r2, [pc, #296]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	61d3      	str	r3, [r2, #28]
 8001fc0:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b45      	ldr	r3, [pc, #276]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a41      	ldr	r2, [pc, #260]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fbd1 	bl	8000790 <HAL_GetTick>
 8001fee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7fe fbcd 	bl	8000790 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e169      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8084 	beq.w	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800202c:	429a      	cmp	r2, r3
 800202e:	d07c      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002030:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	461a      	mov	r2, r3
 800205a:	2301      	movs	r3, #1
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	461a      	mov	r2, r3
 800207e:	2300      	movs	r3, #0
 8002080:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002086:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d04b      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fb7d 	bl	8000790 <HAL_GetTick>
 8002096:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe fb79 	bl	8000790 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e113      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80020b0:	2302      	movs	r3, #2
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	61fb      	str	r3, [r7, #28]
  return result;
 80020c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d108      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80020de:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	e00d      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	10908100 	.word	0x10908100
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	4b78      	ldr	r3, [pc, #480]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2202      	movs	r2, #2
 8002102:	613a      	str	r2, [r7, #16]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	fa92 f2a2 	rbit	r2, r2
 800210a:	60fa      	str	r2, [r7, #12]
  return result;
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	fab2 f282 	clz	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f002 021f 	and.w	r2, r2, #31
 800211e:	2101      	movs	r1, #1
 8002120:	fa01 f202 	lsl.w	r2, r1, r2
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0b7      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800212a:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	496a      	ldr	r1, [pc, #424]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800213c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215c:	4b60      	ldr	r3, [pc, #384]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	495d      	ldr	r1, [pc, #372]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800216a:	4313      	orrs	r3, r2
 800216c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800217a:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4956      	ldr	r1, [pc, #344]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002198:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	494e      	ldr	r1, [pc, #312]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f023 0210 	bic.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4947      	ldr	r1, [pc, #284]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80021d4:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	493f      	ldr	r1, [pc, #252]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f023 0220 	bic.w	r2, r3, #32
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4938      	ldr	r1, [pc, #224]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	4930      	ldr	r1, [pc, #192]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	4929      	ldr	r1, [pc, #164]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	4921      	ldr	r1, [pc, #132]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	491a      	ldr	r1, [pc, #104]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	4912      	ldr	r1, [pc, #72]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002296:	4313      	orrs	r3, r2
 8002298:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	490b      	ldr	r1, [pc, #44]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3748      	adds	r7, #72	; 0x48
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000

080022e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e049      	b.n	800238a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe f8d6 	bl	80004bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f000 fa16 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d001      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e04a      	b.n	8002442 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_TIM_Base_Start_IT+0xbc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d018      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x6c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d6:	d013      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x6c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <HAL_TIM_Base_Start_IT+0xc0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x6c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <HAL_TIM_Base_Start_IT+0xc4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x6c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_TIM_Base_Start_IT+0xc8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_TIM_Base_Start_IT+0x6c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_TIM_Base_Start_IT+0xcc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d115      	bne.n	800242c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_TIM_Base_Start_IT+0xd0>)
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b06      	cmp	r3, #6
 8002410:	d015      	beq.n	800243e <HAL_TIM_Base_Start_IT+0xaa>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d011      	beq.n	800243e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242a:	e008      	b.n	800243e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e000      	b.n	8002440 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40012c00 	.word	0x40012c00
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40013400 	.word	0x40013400
 8002460:	40014000 	.word	0x40014000
 8002464:	00010007 	.word	0x00010007

08002468 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	f241 1311 	movw	r3, #4369	; 0x1111
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_TIM_Base_Stop_IT+0x48>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	f240 4344 	movw	r3, #1092	; 0x444
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_Base_Stop_IT+0x48>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d122      	bne.n	8002522 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d11b      	bne.n	8002522 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f06f 0202 	mvn.w	r2, #2
 80024f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f905 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 800250e:	e005      	b.n	800251c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8f7 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f908 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b04      	cmp	r3, #4
 800252e:	d122      	bne.n	8002576 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d11b      	bne.n	8002576 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0204 	mvn.w	r2, #4
 8002546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f8db 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 8002562:	e005      	b.n	8002570 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8cd 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8de 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b08      	cmp	r3, #8
 8002582:	d122      	bne.n	80025ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11b      	bne.n	80025ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f06f 0208 	mvn.w	r2, #8
 800259a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2204      	movs	r2, #4
 80025a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f8b1 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 80025b6:	e005      	b.n	80025c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8a3 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8b4 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d122      	bne.n	800261e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d11b      	bne.n	800261e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f06f 0210 	mvn.w	r2, #16
 80025ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2208      	movs	r2, #8
 80025f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f887 	bl	8002718 <HAL_TIM_IC_CaptureCallback>
 800260a:	e005      	b.n	8002618 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f879 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f88a 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10e      	bne.n	800264a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0201 	mvn.w	r2, #1
 8002642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f001 fb3b 	bl	8003cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d10e      	bne.n	8002676 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d107      	bne.n	8002676 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f989 	bl	8002988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f97c 	bl	800299c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d10e      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d107      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f838 	bl	8002740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d107      	bne.n	80026fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0220 	mvn.w	r2, #32
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f93c 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <TIM_Base_SetConfig+0x104>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00f      	beq.n	800278c <TIM_Base_SetConfig+0x38>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d00b      	beq.n	800278c <TIM_Base_SetConfig+0x38>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a39      	ldr	r2, [pc, #228]	; (800285c <TIM_Base_SetConfig+0x108>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <TIM_Base_SetConfig+0x38>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a38      	ldr	r2, [pc, #224]	; (8002860 <TIM_Base_SetConfig+0x10c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0x38>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a37      	ldr	r2, [pc, #220]	; (8002864 <TIM_Base_SetConfig+0x110>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <TIM_Base_SetConfig+0x104>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01b      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d017      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <TIM_Base_SetConfig+0x108>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <TIM_Base_SetConfig+0x10c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00f      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a28      	ldr	r2, [pc, #160]	; (8002864 <TIM_Base_SetConfig+0x110>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00b      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a27      	ldr	r2, [pc, #156]	; (8002868 <TIM_Base_SetConfig+0x114>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a26      	ldr	r2, [pc, #152]	; (800286c <TIM_Base_SetConfig+0x118>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <TIM_Base_SetConfig+0x8a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <TIM_Base_SetConfig+0x11c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d108      	bne.n	80027f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <TIM_Base_SetConfig+0x104>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00f      	beq.n	800283c <TIM_Base_SetConfig+0xe8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a11      	ldr	r2, [pc, #68]	; (8002864 <TIM_Base_SetConfig+0x110>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00b      	beq.n	800283c <TIM_Base_SetConfig+0xe8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <TIM_Base_SetConfig+0x114>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0xe8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0f      	ldr	r2, [pc, #60]	; (800286c <TIM_Base_SetConfig+0x118>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0xe8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <TIM_Base_SetConfig+0x11c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	615a      	str	r2, [r3, #20]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40013400 	.word	0x40013400
 8002868:	40014000 	.word	0x40014000
 800286c:	40014400 	.word	0x40014400
 8002870:	40014800 	.word	0x40014800

08002874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e063      	b.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d013      	beq.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10c      	bne.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40014000 	.word	0x40014000

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e040      	b.n	8002a44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fd98 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8c0 	bl	8002b74 <UART_SetConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e022      	b.n	8002a44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa88 	bl	8002f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fb0f 	bl	8003060 <UART_CheckIdleState>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	f040 8082 	bne.w	8002b6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_UART_Transmit+0x26>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07a      	b.n	8002b6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Transmit+0x38>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e073      	b.n	8002b6c <HAL_UART_Transmit+0x120>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a9a:	f7fd fe79 	bl	8000790 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d108      	bne.n	8002acc <HAL_UART_Transmit+0x80>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e003      	b.n	8002ad4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002adc:	e02d      	b.n	8002b3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fb02 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e039      	b.n	8002b6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3302      	adds	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e008      	b.n	8002b28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1cb      	bne.n	8002ade <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 face 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e005      	b.n	8002b6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ba2:	f023 030c 	bic.w	r3, r3, #12
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6979      	ldr	r1, [r7, #20]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4aae      	ldr	r2, [pc, #696]	; (8002ea8 <UART_SetConfig+0x334>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d120      	bne.n	8002c36 <UART_SetConfig+0xc2>
 8002bf4:	4bad      	ldr	r3, [pc, #692]	; (8002eac <UART_SetConfig+0x338>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d817      	bhi.n	8002c30 <UART_SetConfig+0xbc>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <UART_SetConfig+0x94>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c25 	.word	0x08002c25
 8002c10:	08002c2b 	.word	0x08002c2b
 8002c14:	08002c1f 	.word	0x08002c1f
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e0b5      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e0b2      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c24:	2304      	movs	r3, #4
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e0af      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e0ac      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c30:	2310      	movs	r3, #16
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	e0a9      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a9d      	ldr	r2, [pc, #628]	; (8002eb0 <UART_SetConfig+0x33c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d124      	bne.n	8002c8a <UART_SetConfig+0x116>
 8002c40:	4b9a      	ldr	r3, [pc, #616]	; (8002eac <UART_SetConfig+0x338>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c4c:	d011      	beq.n	8002c72 <UART_SetConfig+0xfe>
 8002c4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c52:	d817      	bhi.n	8002c84 <UART_SetConfig+0x110>
 8002c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c58:	d011      	beq.n	8002c7e <UART_SetConfig+0x10a>
 8002c5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5e:	d811      	bhi.n	8002c84 <UART_SetConfig+0x110>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <UART_SetConfig+0xf8>
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d006      	beq.n	8002c78 <UART_SetConfig+0x104>
 8002c6a:	e00b      	b.n	8002c84 <UART_SetConfig+0x110>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e08b      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c72:	2302      	movs	r3, #2
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e088      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e085      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e082      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c84:	2310      	movs	r3, #16
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e07f      	b.n	8002d8a <UART_SetConfig+0x216>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a89      	ldr	r2, [pc, #548]	; (8002eb4 <UART_SetConfig+0x340>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d124      	bne.n	8002cde <UART_SetConfig+0x16a>
 8002c94:	4b85      	ldr	r3, [pc, #532]	; (8002eac <UART_SetConfig+0x338>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002c9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ca0:	d011      	beq.n	8002cc6 <UART_SetConfig+0x152>
 8002ca2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ca6:	d817      	bhi.n	8002cd8 <UART_SetConfig+0x164>
 8002ca8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cac:	d011      	beq.n	8002cd2 <UART_SetConfig+0x15e>
 8002cae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cb2:	d811      	bhi.n	8002cd8 <UART_SetConfig+0x164>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <UART_SetConfig+0x14c>
 8002cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cbc:	d006      	beq.n	8002ccc <UART_SetConfig+0x158>
 8002cbe:	e00b      	b.n	8002cd8 <UART_SetConfig+0x164>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e061      	b.n	8002d8a <UART_SetConfig+0x216>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e05e      	b.n	8002d8a <UART_SetConfig+0x216>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e05b      	b.n	8002d8a <UART_SetConfig+0x216>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	77fb      	strb	r3, [r7, #31]
 8002cd6:	e058      	b.n	8002d8a <UART_SetConfig+0x216>
 8002cd8:	2310      	movs	r3, #16
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	e055      	b.n	8002d8a <UART_SetConfig+0x216>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a75      	ldr	r2, [pc, #468]	; (8002eb8 <UART_SetConfig+0x344>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d124      	bne.n	8002d32 <UART_SetConfig+0x1be>
 8002ce8:	4b70      	ldr	r3, [pc, #448]	; (8002eac <UART_SetConfig+0x338>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cf4:	d011      	beq.n	8002d1a <UART_SetConfig+0x1a6>
 8002cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cfa:	d817      	bhi.n	8002d2c <UART_SetConfig+0x1b8>
 8002cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d00:	d011      	beq.n	8002d26 <UART_SetConfig+0x1b2>
 8002d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d06:	d811      	bhi.n	8002d2c <UART_SetConfig+0x1b8>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <UART_SetConfig+0x1a0>
 8002d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d10:	d006      	beq.n	8002d20 <UART_SetConfig+0x1ac>
 8002d12:	e00b      	b.n	8002d2c <UART_SetConfig+0x1b8>
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e037      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e034      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d20:	2304      	movs	r3, #4
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e031      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d26:	2308      	movs	r3, #8
 8002d28:	77fb      	strb	r3, [r7, #31]
 8002d2a:	e02e      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	e02b      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a61      	ldr	r2, [pc, #388]	; (8002ebc <UART_SetConfig+0x348>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d124      	bne.n	8002d86 <UART_SetConfig+0x212>
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <UART_SetConfig+0x338>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d48:	d011      	beq.n	8002d6e <UART_SetConfig+0x1fa>
 8002d4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d4e:	d817      	bhi.n	8002d80 <UART_SetConfig+0x20c>
 8002d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d54:	d011      	beq.n	8002d7a <UART_SetConfig+0x206>
 8002d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d5a:	d811      	bhi.n	8002d80 <UART_SetConfig+0x20c>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <UART_SetConfig+0x1f4>
 8002d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d64:	d006      	beq.n	8002d74 <UART_SetConfig+0x200>
 8002d66:	e00b      	b.n	8002d80 <UART_SetConfig+0x20c>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e00d      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e00a      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d74:	2304      	movs	r3, #4
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e007      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e004      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d80:	2310      	movs	r3, #16
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e001      	b.n	8002d8a <UART_SetConfig+0x216>
 8002d86:	2310      	movs	r3, #16
 8002d88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d92:	d15c      	bne.n	8002e4e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d827      	bhi.n	8002dea <UART_SetConfig+0x276>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0x22c>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002dcd 	.word	0x08002dcd
 8002da8:	08002dd5 	.word	0x08002dd5
 8002dac:	08002deb 	.word	0x08002deb
 8002db0:	08002ddb 	.word	0x08002ddb
 8002db4:	08002deb 	.word	0x08002deb
 8002db8:	08002deb 	.word	0x08002deb
 8002dbc:	08002deb 	.word	0x08002deb
 8002dc0:	08002de3 	.word	0x08002de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7ff f89a 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002dc8:	61b8      	str	r0, [r7, #24]
        break;
 8002dca:	e013      	b.n	8002df4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dcc:	f7ff f8b8 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 8002dd0:	61b8      	str	r0, [r7, #24]
        break;
 8002dd2:	e00f      	b.n	8002df4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <UART_SetConfig+0x34c>)
 8002dd6:	61bb      	str	r3, [r7, #24]
        break;
 8002dd8:	e00c      	b.n	8002df4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dda:	f7ff f819 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8002dde:	61b8      	str	r0, [r7, #24]
        break;
 8002de0:	e008      	b.n	8002df4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de6:	61bb      	str	r3, [r7, #24]
        break;
 8002de8:	e004      	b.n	8002df4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	77bb      	strb	r3, [r7, #30]
        break;
 8002df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8085 	beq.w	8002f06 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	005a      	lsls	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d916      	bls.n	8002e48 <UART_SetConfig+0x2d4>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d212      	bcs.n	8002e48 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f023 030f 	bic.w	r3, r3, #15
 8002e2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	89fa      	ldrh	r2, [r7, #14]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	e05e      	b.n	8002f06 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	77bb      	strb	r3, [r7, #30]
 8002e4c:	e05b      	b.n	8002f06 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d837      	bhi.n	8002ec4 <UART_SetConfig+0x350>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <UART_SetConfig+0x2e8>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e81 	.word	0x08002e81
 8002e60:	08002e89 	.word	0x08002e89
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08002ec5 	.word	0x08002ec5
 8002e6c:	08002e97 	.word	0x08002e97
 8002e70:	08002ec5 	.word	0x08002ec5
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	08002ec5 	.word	0x08002ec5
 8002e7c:	08002e9f 	.word	0x08002e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e80:	f7ff f83c 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002e84:	61b8      	str	r0, [r7, #24]
        break;
 8002e86:	e022      	b.n	8002ece <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e88:	f7ff f85a 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 8002e8c:	61b8      	str	r0, [r7, #24]
        break;
 8002e8e:	e01e      	b.n	8002ece <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <UART_SetConfig+0x34c>)
 8002e92:	61bb      	str	r3, [r7, #24]
        break;
 8002e94:	e01b      	b.n	8002ece <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e96:	f7fe ffbb 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8002e9a:	61b8      	str	r0, [r7, #24]
        break;
 8002e9c:	e017      	b.n	8002ece <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea2:	61bb      	str	r3, [r7, #24]
        break;
 8002ea4:	e013      	b.n	8002ece <UART_SetConfig+0x35a>
 8002ea6:	bf00      	nop
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40004800 	.word	0x40004800
 8002eb8:	40004c00 	.word	0x40004c00
 8002ebc:	40005000 	.word	0x40005000
 8002ec0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77bb      	strb	r3, [r7, #30]
        break;
 8002ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d018      	beq.n	8002f06 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	085a      	lsrs	r2, r3, #1
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b0f      	cmp	r3, #15
 8002eee:	d908      	bls.n	8002f02 <UART_SetConfig+0x38e>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	d204      	bcs.n	8002f02 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	e001      	b.n	8002f06 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f12:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01a      	beq.n	8003032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301a:	d10a      	bne.n	8003032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  }
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003070:	f7fd fb8e 	bl	8000790 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d10e      	bne.n	80030a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f82d 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e023      	b.n	80030ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d10e      	bne.n	80030ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f817 	bl	80030f2 <UART_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e00d      	b.n	80030ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	e05e      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d05a      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fd fb40 	bl	8000790 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <UART_WaitOnFlagUntilTimeout+0x30>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11b      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003130:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e043      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02c      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d124      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003190:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d091      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <rotl8>:
static const unsigned char RC0[16]={0x07,0x0a,0x9b,0xe0,0xd1,0x1a,0x22,0xf7,0x62,0x96,0x71,0xaa,0x2b,0xe9,0xcf,0xb7};//Round constants (RC_{2i})
static const unsigned char RC1[16]={0x53,0x5d,0x49,0x7f,0xbe,0x1d,0x28,0x6c,0x82,0x47,0x6b,0x88,0xdc,0x8b,0x59,0xc6};//Round constants (RC_{2i+1})
static const unsigned char RC2[16]={0x43,0xe4,0x5e,0xcc,0x32,0x4e,0x75,0x25,0xfd,0xf9,0x76,0xa0,0xb0,0x09,0x1e,0xad};//Round constants (RC_{2i+2})

unsigned char rotl8 ( const unsigned char x, const unsigned char y, const unsigned char shift )
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	71fb      	strb	r3, [r7, #7]
 80031f4:	460b      	mov	r3, r1
 80031f6:	71bb      	strb	r3, [r7, #6]
 80031f8:	4613      	mov	r3, r2
 80031fa:	717b      	strb	r3, [r7, #5]
	return ((x<<shift)|(y>>(8-shift)));
 80031fc:	79fa      	ldrb	r2, [r7, #7]
 80031fe:	797b      	ldrb	r3, [r7, #5]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	b25a      	sxtb	r2, r3
 8003206:	79b9      	ldrb	r1, [r7, #6]
 8003208:	797b      	ldrb	r3, [r7, #5]
 800320a:	f1c3 0308 	rsb	r3, r3, #8
 800320e:	fa41 f303 	asr.w	r3, r1, r3
 8003212:	b25b      	sxtb	r3, r3
 8003214:	4313      	orrs	r3, r2
 8003216:	b25b      	sxtb	r3, r3
 8003218:	b2db      	uxtb	r3, r3
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <simeck64_box>:
   *rc: 8-bit round constant
   *input: 64-bit input
   *output: 64-bit output
*/
void simeck64_box( unsigned char *output, const unsigned char *input, const unsigned char rc )
{
 8003226:	b590      	push	{r4, r7, lr}
 8003228:	b08b      	sub	sp, #44	; 0x2c
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	4613      	mov	r3, r2
 8003232:	71fb      	strb	r3, [r7, #7]
	unsigned char i, t;
	unsigned char *tmp_shift_1, *tmp_shift_5, *tmp_pt;

	tmp_shift_1 = (unsigned char *)malloc(4*sizeof(unsigned char));
 8003234:	2004      	movs	r0, #4
 8003236:	f000 fe35 	bl	8003ea4 <malloc>
 800323a:	4603      	mov	r3, r0
 800323c:	623b      	str	r3, [r7, #32]
	tmp_shift_5 = (unsigned char *)malloc(4*sizeof(unsigned char));
 800323e:	2004      	movs	r0, #4
 8003240:	f000 fe30 	bl	8003ea4 <malloc>
 8003244:	4603      	mov	r3, r0
 8003246:	61fb      	str	r3, [r7, #28]
	tmp_pt = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 8003248:	2008      	movs	r0, #8
 800324a:	f000 fe2b 	bl	8003ea4 <malloc>
 800324e:	4603      	mov	r3, r0
 8003250:	61bb      	str	r3, [r7, #24]

	for ( i = 0; i < SIMECKBYTES; i++ )
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003258:	e00e      	b.n	8003278 <simeck64_box+0x52>
		tmp_pt[i] = input[i];
 800325a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	441a      	add	r2, r3
 8003262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	440b      	add	r3, r1
 800326a:	7812      	ldrb	r2, [r2, #0]
 800326c:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < SIMECKBYTES; i++ )
 800326e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003272:	3301      	adds	r3, #1
 8003274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800327c:	2b07      	cmp	r3, #7
 800327e:	d9ec      	bls.n	800325a <simeck64_box+0x34>

	for ( i = 0; i < SIMECKROUND; i++ )
 8003280:	2300      	movs	r3, #0
 8003282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003286:	e129      	b.n	80034dc <simeck64_box+0x2b6>
	{
		tmp_shift_1[0] = rotl8(tmp_pt[0], tmp_pt[1],1);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	7818      	ldrb	r0, [r3, #0]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	3301      	adds	r3, #1
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2201      	movs	r2, #1
 8003294:	4619      	mov	r1, r3
 8003296:	f7ff ffa8 	bl	80031ea <rotl8>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[1] = rotl8(tmp_pt[1], tmp_pt[2],1);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	3301      	adds	r3, #1
 80032a6:	7818      	ldrb	r0, [r3, #0]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3302      	adds	r3, #2
 80032ac:	7819      	ldrb	r1, [r3, #0]
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	1c5c      	adds	r4, r3, #1
 80032b2:	2201      	movs	r2, #1
 80032b4:	f7ff ff99 	bl	80031ea <rotl8>
 80032b8:	4603      	mov	r3, r0
 80032ba:	7023      	strb	r3, [r4, #0]
		tmp_shift_1[2] = rotl8(tmp_pt[2], tmp_pt[3],1);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3302      	adds	r3, #2
 80032c0:	7818      	ldrb	r0, [r3, #0]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	3303      	adds	r3, #3
 80032c6:	7819      	ldrb	r1, [r3, #0]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	1c9c      	adds	r4, r3, #2
 80032cc:	2201      	movs	r2, #1
 80032ce:	f7ff ff8c 	bl	80031ea <rotl8>
 80032d2:	4603      	mov	r3, r0
 80032d4:	7023      	strb	r3, [r4, #0]
		tmp_shift_1[3] = rotl8(tmp_pt[3], tmp_pt[0],1);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3303      	adds	r3, #3
 80032da:	7818      	ldrb	r0, [r3, #0]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	7819      	ldrb	r1, [r3, #0]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	1cdc      	adds	r4, r3, #3
 80032e4:	2201      	movs	r2, #1
 80032e6:	f7ff ff80 	bl	80031ea <rotl8>
 80032ea:	4603      	mov	r3, r0
 80032ec:	7023      	strb	r3, [r4, #0]

		tmp_shift_5[0] = rotl8(tmp_pt[0], tmp_pt[1],5);
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	7818      	ldrb	r0, [r3, #0]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3301      	adds	r3, #1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2205      	movs	r2, #5
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7ff ff75 	bl	80031ea <rotl8>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[1] = rotl8(tmp_pt[1], tmp_pt[2],5);
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	3301      	adds	r3, #1
 800330c:	7818      	ldrb	r0, [r3, #0]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3302      	adds	r3, #2
 8003312:	7819      	ldrb	r1, [r3, #0]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	1c5c      	adds	r4, r3, #1
 8003318:	2205      	movs	r2, #5
 800331a:	f7ff ff66 	bl	80031ea <rotl8>
 800331e:	4603      	mov	r3, r0
 8003320:	7023      	strb	r3, [r4, #0]
		tmp_shift_5[2] = rotl8(tmp_pt[2], tmp_pt[3],5);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3302      	adds	r3, #2
 8003326:	7818      	ldrb	r0, [r3, #0]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3303      	adds	r3, #3
 800332c:	7819      	ldrb	r1, [r3, #0]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1c9c      	adds	r4, r3, #2
 8003332:	2205      	movs	r2, #5
 8003334:	f7ff ff59 	bl	80031ea <rotl8>
 8003338:	4603      	mov	r3, r0
 800333a:	7023      	strb	r3, [r4, #0]
		tmp_shift_5[3] = rotl8(tmp_pt[3], tmp_pt[0],5);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	3303      	adds	r3, #3
 8003340:	7818      	ldrb	r0, [r3, #0]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	7819      	ldrb	r1, [r3, #0]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	1cdc      	adds	r4, r3, #3
 800334a:	2205      	movs	r2, #5
 800334c:	f7ff ff4d 	bl	80031ea <rotl8>
 8003350:	4603      	mov	r3, r0
 8003352:	7023      	strb	r3, [r4, #0]

		tmp_shift_5[0] = tmp_shift_5[0]&tmp_pt[0];
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4013      	ands	r3, r2
 800335e:	b2da      	uxtb	r2, r3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[1] = tmp_shift_5[1]&tmp_pt[1];
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	3301      	adds	r3, #1
 8003368:	7819      	ldrb	r1, [r3, #0]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	3301      	adds	r3, #1
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	3301      	adds	r3, #1
 8003374:	400a      	ands	r2, r1
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[2] = tmp_shift_5[2]&tmp_pt[2];
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3302      	adds	r3, #2
 800337e:	7819      	ldrb	r1, [r3, #0]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	3302      	adds	r3, #2
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3302      	adds	r3, #2
 800338a:	400a      	ands	r2, r1
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]
		tmp_shift_5[3] = tmp_shift_5[3]&tmp_pt[3];
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3303      	adds	r3, #3
 8003394:	7819      	ldrb	r1, [r3, #0]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3303      	adds	r3, #3
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	3303      	adds	r3, #3
 80033a0:	400a      	ands	r2, r1
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

		tmp_shift_1[0] = tmp_shift_1[0]^tmp_shift_5[0];
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	4053      	eors	r3, r2
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[1] = tmp_shift_1[1]^tmp_shift_5[1];
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	3301      	adds	r3, #1
 80033ba:	7819      	ldrb	r1, [r3, #0]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	3301      	adds	r3, #1
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	3301      	adds	r3, #1
 80033c6:	404a      	eors	r2, r1
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[2] = tmp_shift_1[2]^tmp_shift_5[2];
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	3302      	adds	r3, #2
 80033d0:	7819      	ldrb	r1, [r3, #0]
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3302      	adds	r3, #2
 80033d6:	781a      	ldrb	r2, [r3, #0]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	3302      	adds	r3, #2
 80033dc:	404a      	eors	r2, r1
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[3] = tmp_shift_1[3]^tmp_shift_5[3];
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	3303      	adds	r3, #3
 80033e6:	7819      	ldrb	r1, [r3, #0]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3303      	adds	r3, #3
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	3303      	adds	r3, #3
 80033f2:	404a      	eors	r2, r1
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]
		
		tmp_shift_1[0] = tmp_shift_1[0]^tmp_pt[4]^(0xff);
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	3304      	adds	r3, #4
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	4053      	eors	r3, r2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	b2da      	uxtb	r2, r3
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[1] = tmp_shift_1[1]^tmp_pt[5]^(0xff);
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	3301      	adds	r3, #1
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	3305      	adds	r3, #5
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4053      	eors	r3, r2
 800341c:	b2da      	uxtb	r2, r3
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	3301      	adds	r3, #1
 8003422:	43d2      	mvns	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[2] = tmp_shift_1[2]^tmp_pt[6]^(0xff);
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	3302      	adds	r3, #2
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3306      	adds	r3, #6
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4053      	eors	r3, r2
 8003436:	b2da      	uxtb	r2, r3
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	3302      	adds	r3, #2
 800343c:	43d2      	mvns	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
		tmp_shift_1[3] = tmp_shift_1[3]^tmp_pt[7]^(0xfe);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	3303      	adds	r3, #3
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	3307      	adds	r3, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4053      	eors	r3, r2
 8003450:	b2db      	uxtb	r3, r3
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	3203      	adds	r2, #3
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	43db      	mvns	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	7013      	strb	r3, [r2, #0]

		t = (rc >> i)&1;
 8003460:	79fa      	ldrb	r2, [r7, #7]
 8003462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003466:	fa42 f303 	asr.w	r3, r2, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
		tmp_shift_1[3] = tmp_shift_1[3]^t;
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	3303      	adds	r3, #3
 8003476:	7819      	ldrb	r1, [r3, #0]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	3303      	adds	r3, #3
 800347c:	7dfa      	ldrb	r2, [r7, #23]
 800347e:	404a      	eors	r2, r1
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]

		tmp_pt[4] = tmp_pt[0];
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	3304      	adds	r3, #4
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
		tmp_pt[5] = tmp_pt[1];
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3305      	adds	r3, #5
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	7852      	ldrb	r2, [r2, #1]
 8003496:	701a      	strb	r2, [r3, #0]
		tmp_pt[6] = tmp_pt[2];
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	3306      	adds	r3, #6
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	7892      	ldrb	r2, [r2, #2]
 80034a0:	701a      	strb	r2, [r3, #0]
		tmp_pt[7] = tmp_pt[3];
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3307      	adds	r3, #7
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	78d2      	ldrb	r2, [r2, #3]
 80034aa:	701a      	strb	r2, [r3, #0]

		tmp_pt[0] = tmp_shift_1[0];
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	701a      	strb	r2, [r3, #0]
		tmp_pt[1] = tmp_shift_1[1];
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	3301      	adds	r3, #1
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	7852      	ldrb	r2, [r2, #1]
 80034bc:	701a      	strb	r2, [r3, #0]
		tmp_pt[2] = tmp_shift_1[2];
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3302      	adds	r3, #2
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	7892      	ldrb	r2, [r2, #2]
 80034c6:	701a      	strb	r2, [r3, #0]
		tmp_pt[3] = tmp_shift_1[3];
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	3303      	adds	r3, #3
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	78d2      	ldrb	r2, [r2, #3]
 80034d0:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < SIMECKROUND; i++ )
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	3301      	adds	r3, #1
 80034d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	f67f aed1 	bls.w	8003288 <simeck64_box+0x62>

		//simeck_print_data(tmp_pt, 8);
	}
	for ( i = 0; i < SIMECKBYTES; i++ )
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034ec:	e00e      	b.n	800350c <simeck64_box+0x2e6>
		output[i] = tmp_pt[i];
 80034ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	441a      	add	r2, r3
 80034f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	440b      	add	r3, r1
 80034fe:	7812      	ldrb	r2, [r2, #0]
 8003500:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < SIMECKBYTES; i++ )
 8003502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003506:	3301      	adds	r3, #1
 8003508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003510:	2b07      	cmp	r3, #7
 8003512:	d9ec      	bls.n	80034ee <simeck64_box+0x2c8>
free(tmp_shift_1);
 8003514:	6a38      	ldr	r0, [r7, #32]
 8003516:	f000 fccd 	bl	8003eb4 <free>
free(tmp_shift_5);
 800351a:	69f8      	ldr	r0, [r7, #28]
 800351c:	f000 fcca 	bl	8003eb4 <free>
free(tmp_pt);
 8003520:	69b8      	ldr	r0, [r7, #24]
 8003522:	f000 fcc7 	bl	8003eb4 <free>
return;
 8003526:	bf00      	nop
}
 8003528:	372c      	adds	r7, #44	; 0x2c
 800352a:	46bd      	mov	sp, r7
 800352c:	bd90      	pop	{r4, r7, pc}
	...

08003530 <ace_permutation>:
/*
   *ace_permutation: 16-round ACE permutation of width 320 bits
   *input: 320-bit input, and output is stored in input (inplace) 
*/
void ace_permutation( unsigned char *input )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	unsigned char i, j;
	unsigned char *tmp_inp, *tmp_a, *tmp_c, *tmp_e;

	tmp_inp = (unsigned char *)malloc(STATEBYTES*sizeof(unsigned char));
 8003538:	2028      	movs	r0, #40	; 0x28
 800353a:	f000 fcb3 	bl	8003ea4 <malloc>
 800353e:	4603      	mov	r3, r0
 8003540:	61bb      	str	r3, [r7, #24]
	tmp_a = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 8003542:	2008      	movs	r0, #8
 8003544:	f000 fcae 	bl	8003ea4 <malloc>
 8003548:	4603      	mov	r3, r0
 800354a:	617b      	str	r3, [r7, #20]
	tmp_c = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 800354c:	2008      	movs	r0, #8
 800354e:	f000 fca9 	bl	8003ea4 <malloc>
 8003552:	4603      	mov	r3, r0
 8003554:	613b      	str	r3, [r7, #16]
	tmp_e = (unsigned char *)malloc(SIMECKBYTES*sizeof(unsigned char));
 8003556:	2008      	movs	r0, #8
 8003558:	f000 fca4 	bl	8003ea4 <malloc>
 800355c:	4603      	mov	r3, r0
 800355e:	60fb      	str	r3, [r7, #12]

	for ( i = 0; i < STATEBYTES; i++ )
 8003560:	2300      	movs	r3, #0
 8003562:	77fb      	strb	r3, [r7, #31]
 8003564:	e00a      	b.n	800357c <ace_permutation+0x4c>
		tmp_inp[i] = input[i];
 8003566:	7ffb      	ldrb	r3, [r7, #31]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	441a      	add	r2, r3
 800356c:	7ffb      	ldrb	r3, [r7, #31]
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	440b      	add	r3, r1
 8003572:	7812      	ldrb	r2, [r2, #0]
 8003574:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < STATEBYTES; i++ )
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	3301      	adds	r3, #1
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b27      	cmp	r3, #39	; 0x27
 8003580:	d9f1      	bls.n	8003566 <ace_permutation+0x36>

	for ( i = 0; i < NUMSTEPS; i++ )
 8003582:	2300      	movs	r3, #0
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e0fa      	b.n	800377e <ace_permutation+0x24e>
	{
		//A block
		for ( j = 0; j < SIMECKBYTES; j++ )
 8003588:	2300      	movs	r3, #0
 800358a:	77bb      	strb	r3, [r7, #30]
 800358c:	e00a      	b.n	80035a4 <ace_permutation+0x74>
			tmp_a[j] = tmp_inp[j];
 800358e:	7fbb      	ldrb	r3, [r7, #30]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	441a      	add	r2, r3
 8003594:	7fbb      	ldrb	r3, [r7, #30]
 8003596:	6979      	ldr	r1, [r7, #20]
 8003598:	440b      	add	r3, r1
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 800359e:	7fbb      	ldrb	r3, [r7, #30]
 80035a0:	3301      	adds	r3, #1
 80035a2:	77bb      	strb	r3, [r7, #30]
 80035a4:	7fbb      	ldrb	r3, [r7, #30]
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d9f1      	bls.n	800358e <ace_permutation+0x5e>
		simeck64_box( tmp_a, tmp_a, RC0[i] );
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	4a86      	ldr	r2, [pc, #536]	; (80037c8 <ace_permutation+0x298>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6979      	ldr	r1, [r7, #20]
 80035b4:	6978      	ldr	r0, [r7, #20]
 80035b6:	f7ff fe36 	bl	8003226 <simeck64_box>

		//C block
		for ( j = 0; j < SIMECKBYTES; j++ )
 80035ba:	2300      	movs	r3, #0
 80035bc:	77bb      	strb	r3, [r7, #30]
 80035be:	e00c      	b.n	80035da <ace_permutation+0xaa>
			tmp_c[j] = tmp_inp[2*SIMECKBYTES+j];
 80035c0:	7fbb      	ldrb	r3, [r7, #30]
 80035c2:	3310      	adds	r3, #16
 80035c4:	461a      	mov	r2, r3
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	441a      	add	r2, r3
 80035ca:	7fbb      	ldrb	r3, [r7, #30]
 80035cc:	6939      	ldr	r1, [r7, #16]
 80035ce:	440b      	add	r3, r1
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 80035d4:	7fbb      	ldrb	r3, [r7, #30]
 80035d6:	3301      	adds	r3, #1
 80035d8:	77bb      	strb	r3, [r7, #30]
 80035da:	7fbb      	ldrb	r3, [r7, #30]
 80035dc:	2b07      	cmp	r3, #7
 80035de:	d9ef      	bls.n	80035c0 <ace_permutation+0x90>
		simeck64_box( tmp_c, tmp_c, RC1[i] );
 80035e0:	7ffb      	ldrb	r3, [r7, #31]
 80035e2:	4a7a      	ldr	r2, [pc, #488]	; (80037cc <ace_permutation+0x29c>)
 80035e4:	5cd3      	ldrb	r3, [r2, r3]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6939      	ldr	r1, [r7, #16]
 80035ea:	6938      	ldr	r0, [r7, #16]
 80035ec:	f7ff fe1b 	bl	8003226 <simeck64_box>
		
		//E block
		for ( j = 0; j < SIMECKBYTES; j++ )
 80035f0:	2300      	movs	r3, #0
 80035f2:	77bb      	strb	r3, [r7, #30]
 80035f4:	e00c      	b.n	8003610 <ace_permutation+0xe0>
			tmp_e[j] = tmp_inp[4*SIMECKBYTES+j];
 80035f6:	7fbb      	ldrb	r3, [r7, #30]
 80035f8:	3320      	adds	r3, #32
 80035fa:	461a      	mov	r2, r3
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	441a      	add	r2, r3
 8003600:	7fbb      	ldrb	r3, [r7, #30]
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	440b      	add	r3, r1
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 800360a:	7fbb      	ldrb	r3, [r7, #30]
 800360c:	3301      	adds	r3, #1
 800360e:	77bb      	strb	r3, [r7, #30]
 8003610:	7fbb      	ldrb	r3, [r7, #30]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d9ef      	bls.n	80035f6 <ace_permutation+0xc6>
		simeck64_box( tmp_e, tmp_e, RC2[i] );
 8003616:	7ffb      	ldrb	r3, [r7, #31]
 8003618:	4a6d      	ldr	r2, [pc, #436]	; (80037d0 <ace_permutation+0x2a0>)
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	461a      	mov	r2, r3
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fe00 	bl	8003226 <simeck64_box>

		// Update A: A <= SC_{3i+1}+D+F(E)
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8003626:	2300      	movs	r3, #0
 8003628:	77bb      	strb	r3, [r7, #30]
 800362a:	e014      	b.n	8003656 <ace_permutation+0x126>
			tmp_inp[j] = tmp_inp[3*SIMECKBYTES+j]^tmp_e[j]^(0xff);
 800362c:	7fbb      	ldrb	r3, [r7, #30]
 800362e:	3318      	adds	r3, #24
 8003630:	461a      	mov	r2, r3
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	7fbb      	ldrb	r3, [r7, #30]
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	440b      	add	r3, r1
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4053      	eors	r3, r2
 8003642:	b2da      	uxtb	r2, r3
 8003644:	7fbb      	ldrb	r3, [r7, #30]
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	440b      	add	r3, r1
 800364a:	43d2      	mvns	r2, r2
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8003650:	7fbb      	ldrb	r3, [r7, #30]
 8003652:	3301      	adds	r3, #1
 8003654:	77bb      	strb	r3, [r7, #30]
 8003656:	7fbb      	ldrb	r3, [r7, #30]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d9e7      	bls.n	800362c <ace_permutation+0xfc>
		tmp_inp[SIMECKBYTES-1] = tmp_inp[4*SIMECKBYTES-1]^tmp_e[SIMECKBYTES-1]^SC1[i];
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	331f      	adds	r3, #31
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3307      	adds	r3, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4053      	eors	r3, r2
 800366a:	b2d9      	uxtb	r1, r3
 800366c:	7ffb      	ldrb	r3, [r7, #31]
 800366e:	4a59      	ldr	r2, [pc, #356]	; (80037d4 <ace_permutation+0x2a4>)
 8003670:	5cd2      	ldrb	r2, [r2, r3]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3307      	adds	r3, #7
 8003676:	404a      	eors	r2, r1
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
		
		// Update E: E <= SC_{3i}+B+F(C)
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 800367c:	2300      	movs	r3, #0
 800367e:	77bb      	strb	r3, [r7, #30]
 8003680:	e016      	b.n	80036b0 <ace_permutation+0x180>
			tmp_inp[4*SIMECKBYTES+j] = tmp_inp[SIMECKBYTES+j]^tmp_c[j]^(0xff);
 8003682:	7fbb      	ldrb	r3, [r7, #30]
 8003684:	3308      	adds	r3, #8
 8003686:	461a      	mov	r2, r3
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	7fbb      	ldrb	r3, [r7, #30]
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	440b      	add	r3, r1
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	4053      	eors	r3, r2
 8003698:	b2da      	uxtb	r2, r3
 800369a:	7fbb      	ldrb	r3, [r7, #30]
 800369c:	3320      	adds	r3, #32
 800369e:	4619      	mov	r1, r3
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	440b      	add	r3, r1
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 80036aa:	7fbb      	ldrb	r3, [r7, #30]
 80036ac:	3301      	adds	r3, #1
 80036ae:	77bb      	strb	r3, [r7, #30]
 80036b0:	7fbb      	ldrb	r3, [r7, #30]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d9e5      	bls.n	8003682 <ace_permutation+0x152>
		tmp_inp[5*SIMECKBYTES-1] = tmp_inp[2*SIMECKBYTES-1]^tmp_c[SIMECKBYTES-1]^SC0[i];
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	330f      	adds	r3, #15
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3307      	adds	r3, #7
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	4053      	eors	r3, r2
 80036c4:	b2d9      	uxtb	r1, r3
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	4a43      	ldr	r2, [pc, #268]	; (80037d8 <ace_permutation+0x2a8>)
 80036ca:	5cd2      	ldrb	r2, [r2, r3]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	3327      	adds	r3, #39	; 0x27
 80036d0:	404a      	eors	r2, r1
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

		// Update B: B <= F(C)
		for ( j = 0; j < SIMECKBYTES; j++ )
 80036d6:	2300      	movs	r3, #0
 80036d8:	77bb      	strb	r3, [r7, #30]
 80036da:	e00c      	b.n	80036f6 <ace_permutation+0x1c6>
			tmp_inp[SIMECKBYTES+j] = tmp_c[j];
 80036dc:	7fbb      	ldrb	r3, [r7, #30]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	441a      	add	r2, r3
 80036e2:	7fbb      	ldrb	r3, [r7, #30]
 80036e4:	3308      	adds	r3, #8
 80036e6:	4619      	mov	r1, r3
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	440b      	add	r3, r1
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 80036f0:	7fbb      	ldrb	r3, [r7, #30]
 80036f2:	3301      	adds	r3, #1
 80036f4:	77bb      	strb	r3, [r7, #30]
 80036f6:	7fbb      	ldrb	r3, [r7, #30]
 80036f8:	2b07      	cmp	r3, #7
 80036fa:	d9ef      	bls.n	80036dc <ace_permutation+0x1ac>
		
		// Update C: C <= F(A)
		for ( j = 0; j < SIMECKBYTES; j++ )
 80036fc:	2300      	movs	r3, #0
 80036fe:	77bb      	strb	r3, [r7, #30]
 8003700:	e00c      	b.n	800371c <ace_permutation+0x1ec>
			tmp_inp[2*SIMECKBYTES+j] = tmp_a[j];
 8003702:	7fbb      	ldrb	r3, [r7, #30]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	441a      	add	r2, r3
 8003708:	7fbb      	ldrb	r3, [r7, #30]
 800370a:	3310      	adds	r3, #16
 800370c:	4619      	mov	r1, r3
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	440b      	add	r3, r1
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES; j++ )
 8003716:	7fbb      	ldrb	r3, [r7, #30]
 8003718:	3301      	adds	r3, #1
 800371a:	77bb      	strb	r3, [r7, #30]
 800371c:	7fbb      	ldrb	r3, [r7, #30]
 800371e:	2b07      	cmp	r3, #7
 8003720:	d9ef      	bls.n	8003702 <ace_permutation+0x1d2>
		
		// Update D: D <= SC_{3i+2}+F(A)+F(E)
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 8003722:	2300      	movs	r3, #0
 8003724:	77bb      	strb	r3, [r7, #30]
 8003726:	e014      	b.n	8003752 <ace_permutation+0x222>
			tmp_inp[3*SIMECKBYTES+j] = tmp_a[j]^tmp_e[j]^(0xff);
 8003728:	7fbb      	ldrb	r3, [r7, #30]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4413      	add	r3, r2
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	7fbb      	ldrb	r3, [r7, #30]
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	440b      	add	r3, r1
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4053      	eors	r3, r2
 800373a:	b2da      	uxtb	r2, r3
 800373c:	7fbb      	ldrb	r3, [r7, #30]
 800373e:	3318      	adds	r3, #24
 8003740:	4619      	mov	r1, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	440b      	add	r3, r1
 8003746:	43d2      	mvns	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]
		for ( j = 0; j < SIMECKBYTES-1; j++ )
 800374c:	7fbb      	ldrb	r3, [r7, #30]
 800374e:	3301      	adds	r3, #1
 8003750:	77bb      	strb	r3, [r7, #30]
 8003752:	7fbb      	ldrb	r3, [r7, #30]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d9e7      	bls.n	8003728 <ace_permutation+0x1f8>
		tmp_inp[4*SIMECKBYTES-1] = tmp_a[SIMECKBYTES-1]^tmp_e[SIMECKBYTES-1]^SC2[i];
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3307      	adds	r3, #7
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3307      	adds	r3, #7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4053      	eors	r3, r2
 8003766:	b2d9      	uxtb	r1, r3
 8003768:	7ffb      	ldrb	r3, [r7, #31]
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <ace_permutation+0x2ac>)
 800376c:	5cd2      	ldrb	r2, [r2, r3]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	331f      	adds	r3, #31
 8003772:	404a      	eors	r2, r1
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < NUMSTEPS; i++ )
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	3301      	adds	r3, #1
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	7ffb      	ldrb	r3, [r7, #31]
 8003780:	2b0f      	cmp	r3, #15
 8003782:	f67f af01 	bls.w	8003588 <ace_permutation+0x58>
		//ace_print_state256(tmp_pt); // Printing intermediate state
	}
	for ( i = 0; i < STATEBYTES; i++ )
 8003786:	2300      	movs	r3, #0
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e00a      	b.n	80037a2 <ace_permutation+0x272>
		input[i] = tmp_inp[i];
 800378c:	7ffb      	ldrb	r3, [r7, #31]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	441a      	add	r2, r3
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	440b      	add	r3, r1
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < STATEBYTES; i++ )
 800379c:	7ffb      	ldrb	r3, [r7, #31]
 800379e:	3301      	adds	r3, #1
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	7ffb      	ldrb	r3, [r7, #31]
 80037a4:	2b27      	cmp	r3, #39	; 0x27
 80037a6:	d9f1      	bls.n	800378c <ace_permutation+0x25c>

free(tmp_a);
 80037a8:	6978      	ldr	r0, [r7, #20]
 80037aa:	f000 fb83 	bl	8003eb4 <free>
free(tmp_c);
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f000 fb80 	bl	8003eb4 <free>
free(tmp_e);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fb7d 	bl	8003eb4 <free>
free(tmp_inp);
 80037ba:	69b8      	ldr	r0, [r7, #24]
 80037bc:	f000 fb7a 	bl	8003eb4 <free>
return;
 80037c0:	bf00      	nop
}
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	08004888 	.word	0x08004888
 80037cc:	08004898 	.word	0x08004898
 80037d0:	080048a8 	.word	0x080048a8
 80037d4:	08004868 	.word	0x08004868
 80037d8:	08004858 	.word	0x08004858
 80037dc:	08004878 	.word	0x08004878

080037e0 <acehash_init>:
/*
   *acehash_init: initialize with IV
   *state: output state after initialization
*/
int acehash_init( unsigned char *state )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	unsigned char i;

	//Initialize the state to all-ZERO 
	for ( i = 0; i < STATEBYTES; i++ )
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e007      	b.n	80037fe <acehash_init+0x1e>
		state[i] = 0x0;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < STATEBYTES; i++ )
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	3301      	adds	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b27      	cmp	r3, #39	; 0x27
 8003802:	d9f4      	bls.n	80037ee <acehash_init+0xe>
	if ( CRYPTO_BYTES == 32 )
	{
		//Initialize state with IV 0x804040
                //According to specification: B[7] = 0x80; B[6] = 0x40; B[5] = 0x40;
		state[8] = 0x80;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3308      	adds	r3, #8
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	701a      	strb	r2, [r3, #0]
		state[9] = 0x40;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3309      	adds	r3, #9
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	701a      	strb	r2, [r3, #0]
		state[10] = 0x40;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	330a      	adds	r3, #10
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	701a      	strb	r2, [r3, #0]
		ace_permutation(state);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fe87 	bl	8003530 <ace_permutation>
	}
	else
	{
		return KAT_CRYPTO_FAILURE;
	}
return KAT_SUCCESS;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <crypto_hash>:
int crypto_hash(
	unsigned char *out,
	const unsigned char *in,
	unsigned long long inlen
	)
{
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b08c      	sub	sp, #48	; 0x30
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned char *state;
	unsigned char i, lblen;
	//int func_ret;
	u64 j, in64len;

	in64len = inlen/8;
 800383a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	08c2      	lsrs	r2, r0, #3
 8003848:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800384c:	08cb      	lsrs	r3, r1, #3
 800384e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	lblen = (unsigned char)(inlen%8);
 8003852:	783b      	ldrb	r3, [r7, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	75fb      	strb	r3, [r7, #23]

	state = (unsigned char *)malloc(sizeof(unsigned char)*STATEBYTES);
 800385a:	2028      	movs	r0, #40	; 0x28
 800385c:	f000 fb22 	bl	8003ea4 <malloc>
 8003860:	4603      	mov	r3, r0
 8003862:	613b      	str	r3, [r7, #16]

	//Initialize state with predefined IV.
	if ( acehash_init(state)!= KAT_SUCCESS )
 8003864:	6938      	ldr	r0, [r7, #16]
 8003866:	f7ff ffbb 	bl	80037e0 <acehash_init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <crypto_hash+0x4a>
		return(KAT_CRYPTO_FAILURE);
 8003870:	f06f 0303 	mvn.w	r3, #3
 8003874:	e120      	b.n	8003ab8 <crypto_hash+0x28c>

	//Absorbing phase: Rate Bytes A[0],A[1],A[2],A[3],C[0],C[1],C[2],C[3]
	if ( inlen != 0 )
 8003876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800387a:	4313      	orrs	r3, r2
 800387c:	f000 8093 	beq.w	80039a6 <crypto_hash+0x17a>
	{

		for ( j = 0; j < in64len; j++ )
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800388c:	e030      	b.n	80038f0 <crypto_hash+0xc4>
		{
			for ( i = 0; i < 8; i++ )
 800388e:	2300      	movs	r3, #0
 8003890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003894:	e01e      	b.n	80038d4 <crypto_hash+0xa8>
				state[rate_bytes[i]]^=in[8*j+((u64)i)];
 8003896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800389a:	4a89      	ldr	r2, [pc, #548]	; (8003ac0 <crypto_hash+0x294>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	461a      	mov	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	7819      	ldrb	r1, [r3, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	00da      	lsls	r2, r3, #3
 80038aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ae:	4413      	add	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	4413      	add	r3, r2
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ba:	4881      	ldr	r0, [pc, #516]	; (8003ac0 <crypto_hash+0x294>)
 80038bc:	5cc3      	ldrb	r3, [r0, r3]
 80038be:	4618      	mov	r0, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4403      	add	r3, r0
 80038c4:	404a      	eors	r2, r1
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
			for ( i = 0; i < 8; i++ )
 80038ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ce:	3301      	adds	r3, #1
 80038d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038d8:	2b07      	cmp	r3, #7
 80038da:	d9dc      	bls.n	8003896 <crypto_hash+0x6a>
			ace_permutation(state);
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f7ff fe27 	bl	8003530 <ace_permutation>
		for ( j = 0; j < in64len; j++ )
 80038e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038e6:	1c54      	adds	r4, r2, #1
 80038e8:	f143 0500 	adc.w	r5, r3, #0
 80038ec:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80038f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f8:	4299      	cmp	r1, r3
 80038fa:	bf08      	it	eq
 80038fc:	4290      	cmpeq	r0, r2
 80038fe:	d3c6      	bcc.n	800388e <crypto_hash+0x62>
		}

		if ( lblen != 0 )
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03d      	beq.n	8003982 <crypto_hash+0x156>
		{
			//Encrypting the padded 64-bit block when "mlen" is not a multiple of 8
			for ( i = 0; i < lblen; i++ )
 8003906:	2300      	movs	r3, #0
 8003908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800390c:	e01e      	b.n	800394c <crypto_hash+0x120>
				state[rate_bytes[i]]^= in[in64len*8+(u64)i];
 800390e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003912:	4a6b      	ldr	r2, [pc, #428]	; (8003ac0 <crypto_hash+0x294>)
 8003914:	5cd3      	ldrb	r3, [r2, r3]
 8003916:	461a      	mov	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	7819      	ldrb	r1, [r3, #0]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	00da      	lsls	r2, r3, #3
 8003922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003926:	4413      	add	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	4413      	add	r3, r2
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003932:	4863      	ldr	r0, [pc, #396]	; (8003ac0 <crypto_hash+0x294>)
 8003934:	5cc3      	ldrb	r3, [r0, r3]
 8003936:	4618      	mov	r0, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4403      	add	r3, r0
 800393c:	404a      	eors	r2, r1
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
			for ( i = 0; i < lblen; i++ )
 8003942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003946:	3301      	adds	r3, #1
 8003948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800394c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3db      	bcc.n	800390e <crypto_hash+0xe2>
			
			state[rate_bytes[lblen]]^=(0x80); //Padding: 10*
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	4a59      	ldr	r2, [pc, #356]	; (8003ac0 <crypto_hash+0x294>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	461a      	mov	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	7dfa      	ldrb	r2, [r7, #23]
 8003966:	4956      	ldr	r1, [pc, #344]	; (8003ac0 <crypto_hash+0x294>)
 8003968:	5c8a      	ldrb	r2, [r1, r2]
 800396a:	4611      	mov	r1, r2
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	440a      	add	r2, r1
 8003970:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8003974:	43db      	mvns	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	7013      	strb	r3, [r2, #0]
			ace_permutation(state);
 800397a:	6938      	ldr	r0, [r7, #16]
 800397c:	f7ff fdd8 	bl	8003530 <ace_permutation>
 8003980:	e022      	b.n	80039c8 <crypto_hash+0x19c>
		}
		else
		{
			state[rate_bytes[0]]^=(0x80); //Padding: 10*
 8003982:	2300      	movs	r3, #0
 8003984:	461a      	mov	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	4611      	mov	r1, r2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	440a      	add	r2, r1
 8003994:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8003998:	43db      	mvns	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	7013      	strb	r3, [r2, #0]
			ace_permutation(state);
 800399e:	6938      	ldr	r0, [r7, #16]
 80039a0:	f7ff fdc6 	bl	8003530 <ace_permutation>
 80039a4:	e010      	b.n	80039c8 <crypto_hash+0x19c>
		}
	}
	else
	{
		state[rate_bytes[0]]^=(0x80); //Padding: 10*
 80039a6:	2300      	movs	r3, #0
 80039a8:	461a      	mov	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2200      	movs	r2, #0
 80039b2:	4611      	mov	r1, r2
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	440a      	add	r2, r1
 80039b8:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80039bc:	43db      	mvns	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	7013      	strb	r3, [r2, #0]
		ace_permutation(state);
 80039c2:	6938      	ldr	r0, [r7, #16]
 80039c4:	f7ff fdb4 	bl	8003530 <ace_permutation>
	}
	//Squeezing phase
	if ( CRYPTO_BYTES == 32 )
	{
		for ( i = 0; i < 8; i++ )
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039ce:	e011      	b.n	80039f4 <crypto_hash+0x1c8>
			out[i] = state[rate_bytes[i]];
 80039d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039d4:	4a3a      	ldr	r2, [pc, #232]	; (8003ac0 <crypto_hash+0x294>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	461a      	mov	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	441a      	add	r2, r3
 80039de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	440b      	add	r3, r1
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 80039ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039ee:	3301      	adds	r3, #1
 80039f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039f8:	2b07      	cmp	r3, #7
 80039fa:	d9e9      	bls.n	80039d0 <crypto_hash+0x1a4>
		ace_permutation(state);
 80039fc:	6938      	ldr	r0, [r7, #16]
 80039fe:	f7ff fd97 	bl	8003530 <ace_permutation>
		for ( i = 0; i < 8; i++ )
 8003a02:	2300      	movs	r3, #0
 8003a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a08:	e012      	b.n	8003a30 <crypto_hash+0x204>
			out[i+8] = state[rate_bytes[i]];
 8003a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <crypto_hash+0x294>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
 8003a12:	461a      	mov	r2, r3
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	441a      	add	r2, r3
 8003a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	440b      	add	r3, r1
 8003a22:	7812      	ldrb	r2, [r2, #0]
 8003a24:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8003a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a34:	2b07      	cmp	r3, #7
 8003a36:	d9e8      	bls.n	8003a0a <crypto_hash+0x1de>
		ace_permutation(state);
 8003a38:	6938      	ldr	r0, [r7, #16]
 8003a3a:	f7ff fd79 	bl	8003530 <ace_permutation>
		for ( i = 0; i < 8; i++ )
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a44:	e012      	b.n	8003a6c <crypto_hash+0x240>
			out[i+16] = state[rate_bytes[i]];
 8003a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <crypto_hash+0x294>)
 8003a4c:	5cd3      	ldrb	r3, [r2, r3]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	441a      	add	r2, r3
 8003a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a58:	3310      	adds	r3, #16
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	440b      	add	r3, r1
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8003a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a66:	3301      	adds	r3, #1
 8003a68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a70:	2b07      	cmp	r3, #7
 8003a72:	d9e8      	bls.n	8003a46 <crypto_hash+0x21a>
		ace_permutation(state);
 8003a74:	6938      	ldr	r0, [r7, #16]
 8003a76:	f7ff fd5b 	bl	8003530 <ace_permutation>
		for ( i = 0; i < 8; i++ )
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a80:	e012      	b.n	8003aa8 <crypto_hash+0x27c>
			out[i+24] = state[rate_bytes[i]];
 8003a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <crypto_hash+0x294>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	441a      	add	r2, r3
 8003a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a94:	3318      	adds	r3, #24
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	440b      	add	r3, r1
 8003a9a:	7812      	ldrb	r2, [r2, #0]
 8003a9c:	701a      	strb	r2, [r3, #0]
		for ( i = 0; i < 8; i++ )
 8003a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aac:	2b07      	cmp	r3, #7
 8003aae:	d9e8      	bls.n	8003a82 <crypto_hash+0x256>
	}
	else
		out=NULL;
free(state);
 8003ab0:	6938      	ldr	r0, [r7, #16]
 8003ab2:	f000 f9ff 	bl	8003eb4 <free>

return KAT_SUCCESS;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3730      	adds	r7, #48	; 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac0:	080048b8 	.word	0x080048b8

08003ac4 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0

	int ret = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 8003ace:	f000 f967 	bl	8003da0 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8003ad2:	f000 f907 	bl	8003ce4 <tick_msr_start>
	tick_msr_end();
 8003ad6:	f000 f91f 	bl	8003d18 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <genkat_benchmark_hash_aead+0x70>)
 8003adc:	4916      	ldr	r1, [pc, #88]	; (8003b38 <genkat_benchmark_hash_aead+0x74>)
 8003ade:	4817      	ldr	r0, [pc, #92]	; (8003b3c <genkat_benchmark_hash_aead+0x78>)
 8003ae0:	f000 f93c 	bl	8003d5c <lwc_printf>
	lwc_printf("Memory usage: ");
 8003ae4:	4816      	ldr	r0, [pc, #88]	; (8003b40 <genkat_benchmark_hash_aead+0x7c>)
 8003ae6:	f000 f939 	bl	8003d5c <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <genkat_benchmark_hash_aead+0x80>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <genkat_benchmark_hash_aead+0x80>)
 8003af0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003af2:	4619      	mov	r1, r3
 8003af4:	4814      	ldr	r0, [pc, #80]	; (8003b48 <genkat_benchmark_hash_aead+0x84>)
 8003af6:	f000 f931 	bl	8003d5c <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <genkat_benchmark_hash_aead+0x80>)
 8003afc:	6a19      	ldr	r1, [r3, #32]
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <genkat_benchmark_hash_aead+0x80>)
 8003b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <genkat_benchmark_hash_aead+0x80>)
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	4811      	ldr	r0, [pc, #68]	; (8003b4c <genkat_benchmark_hash_aead+0x88>)
 8003b08:	f000 f928 	bl	8003d5c <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b10:	2100      	movs	r1, #0
 8003b12:	480f      	ldr	r0, [pc, #60]	; (8003b50 <genkat_benchmark_hash_aead+0x8c>)
 8003b14:	f000 f9d6 	bl	8003ec4 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8003b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	480d      	ldr	r0, [pc, #52]	; (8003b54 <genkat_benchmark_hash_aead+0x90>)
 8003b20:	f000 f9d0 	bl	8003ec4 <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 8003b24:	f000 f818 	bl	8003b58 <hash_generate_test_vectors>
 8003b28:	6078      	str	r0, [r7, #4]
#endif

	return ret;
 8003b2a:	687b      	ldr	r3, [r7, #4]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	080048c0 	.word	0x080048c0
 8003b38:	08004940 	.word	0x08004940
 8003b3c:	08004748 	.word	0x08004748
 8003b40:	08004790 	.word	0x08004790
 8003b44:	2000057c 	.word	0x2000057c
 8003b48:	080047a0 	.word	0x080047a0
 8003b4c:	080047c8 	.word	0x080047c8
 8003b50:	20000098 	.word	0x20000098
 8003b54:	20000198 	.word	0x20000198

08003b58 <hash_generate_test_vectors>:
#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024


int hash_generate_test_vectors(){
 8003b58:	b5b0      	push	{r4, r5, r7, lr}
 8003b5a:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8003b5e:	af00      	add	r7, sp, #0


	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

	init_buffer(msg, sizeof(msg));
 8003b66:	f107 0120 	add.w	r1, r7, #32
 8003b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	4608      	mov	r0, r1
 8003b74:	f000 f87a 	bl	8003c6c <init_buffer>


	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8003b84:	e9c1 2300 	strd	r2, r3, [r1]
 8003b88:	e050      	b.n	8003c2c <hash_generate_test_vectors+0xd4>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8003b8a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4830      	ldr	r0, [pc, #192]	; (8003c54 <hash_generate_test_vectors+0xfc>)
 8003b92:	f000 f8e3 	bl	8003d5c <lwc_printf>

		tick_msr_start();
 8003b96:	f000 f8a5 	bl	8003ce4 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 8003b9a:	f107 0120 	add.w	r1, r7, #32
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7ff fe40 	bl	800382c <crypto_hash>
 8003bac:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
#else
		ret_val = 0;
#endif
		tick_msr_end();
 8003bb0:	f000 f8b2 	bl	8003d18 <tick_msr_end>

		aead_enc_ticks_res[aead_enc_dec_pos++] = gb_tick_cnt;
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <hash_generate_test_vectors+0x100>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	4927      	ldr	r1, [pc, #156]	; (8003c58 <hash_generate_test_vectors+0x100>)
 8003bbc:	600a      	str	r2, [r1, #0]
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <hash_generate_test_vectors+0x104>)
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	4927      	ldr	r1, [pc, #156]	; (8003c60 <hash_generate_test_vectors+0x108>)
 8003bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(ret_val == 0) {
 8003bc8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d115      	bne.n	8003bfc <hash_generate_test_vectors+0xa4>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003bd0:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <hash_generate_test_vectors+0x104>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <hash_generate_test_vectors+0x104>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da00      	bge.n	8003be0 <hash_generate_test_vectors+0x88>
 8003bde:	330f      	adds	r3, #15
 8003be0:	111b      	asrs	r3, r3, #4
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <hash_generate_test_vectors+0x10c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	481f      	ldr	r0, [pc, #124]	; (8003c68 <hash_generate_test_vectors+0x110>)
 8003bea:	f000 f8b7 	bl	8003d5c <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8003bee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d10d      	bne.n	8003c16 <hash_generate_test_vectors+0xbe>
 8003bfa:	e004      	b.n	8003c06 <hash_generate_test_vectors+0xae>
			ret_val = KAT_CRYPTO_FAILURE;
 8003bfc:	f06f 0303 	mvn.w	r3, #3
 8003c00:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			break;
 8003c04:	e01e      	b.n	8003c44 <hash_generate_test_vectors+0xec>
			mlen = 4;
 8003c06:	f04f 0204 	mov.w	r2, #4
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8003c12:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003c16:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	1894      	adds	r4, r2, r2
 8003c20:	eb43 0503 	adc.w	r5, r3, r3
 8003c24:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c28:	e9c3 4500 	strd	r4, r5, [r3]
 8003c2c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	bf08      	it	eq
 8003c40:	4290      	cmpeq	r0, r2
 8003c42:	d2a2      	bcs.n	8003b8a <hash_generate_test_vectors+0x32>
		}
	}//end of for loop

	return ret_val;
 8003c44:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bdb0      	pop	{r4, r5, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	080047f4 	.word	0x080047f4
 8003c58:	20000298 	.word	0x20000298
 8003c5c:	20000090 	.word	0x20000090
 8003c60:	20000098 	.word	0x20000098
 8003c64:	20000094 	.word	0x20000094
 8003c68:	08004804 	.word	0x08004804

08003c6c <init_buffer>:

#endif

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8003c6c:	b4b0      	push	{r4, r5, r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003c84:	e00d      	b.n	8003ca2 <init_buffer+0x36>
		buffer[i] = (unsigned char) i + '0';
 8003c86:	7c3a      	ldrb	r2, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3230      	adds	r2, #48	; 0x30
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003c94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c98:	1c54      	adds	r4, r2, #1
 8003c9a:	f143 0500 	adc.w	r5, r3, #0
 8003c9e:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003caa:	4299      	cmp	r1, r3
 8003cac:	bf08      	it	eq
 8003cae:	4290      	cmpeq	r0, r2
 8003cb0:	d3e9      	bcc.n	8003c86 <init_buffer+0x1a>
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bcb0      	pop	{r4, r5, r7}
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cd0:	6013      	str	r3, [r2, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	2000029c 	.word	0x2000029c

08003ce4 <tick_msr_start>:

void tick_msr_start(void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <tick_msr_start+0x28>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <tick_msr_start+0x2c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8003cf6:	f7fc fd4b 	bl	8000790 <HAL_GetTick>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <tick_msr_start+0x30>)
 8003cfe:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8003d00:	4803      	ldr	r0, [pc, #12]	; (8003d10 <tick_msr_start+0x2c>)
 8003d02:	f7fe fb47 	bl	8002394 <HAL_TIM_Base_Start_IT>
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	2000029c 	.word	0x2000029c
 8003d10:	2000052c 	.word	0x2000052c
 8003d14:	20000094 	.word	0x20000094

08003d18 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 8003d1c:	480b      	ldr	r0, [pc, #44]	; (8003d4c <tick_msr_end+0x34>)
 8003d1e:	f7fe fba3 	bl	8002468 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <tick_msr_end+0x38>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	041a      	lsls	r2, r3, #16
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <tick_msr_end+0x34>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <tick_msr_end+0x3c>)
 8003d32:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8003d34:	f7fc fd2c 	bl	8000790 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <tick_msr_end+0x40>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <tick_msr_end+0x40>)
 8003d42:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <tick_msr_end+0x3c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	2000052c 	.word	0x2000052c
 8003d50:	2000029c 	.word	0x2000029c
 8003d54:	20000090 	.word	0x20000090
 8003d58:	20000094 	.word	0x20000094

08003d5c <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003d5c:	b40f      	push	{r0, r1, r2, r3}
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6939      	ldr	r1, [r7, #16]
 8003d6e:	480a      	ldr	r0, [pc, #40]	; (8003d98 <lwc_printf+0x3c>)
 8003d70:	f000 f980 	bl	8004074 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8003d74:	4808      	ldr	r0, [pc, #32]	; (8003d98 <lwc_printf+0x3c>)
 8003d76:	f7fc fa2b 	bl	80001d0 <strlen>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	2364      	movs	r3, #100	; 0x64
 8003d80:	4905      	ldr	r1, [pc, #20]	; (8003d98 <lwc_printf+0x3c>)
 8003d82:	4806      	ldr	r0, [pc, #24]	; (8003d9c <lwc_printf+0x40>)
 8003d84:	f7fe fe62 	bl	8002a4c <HAL_UART_Transmit>
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d92:	b004      	add	sp, #16
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	200002a0 	.word	0x200002a0
 8003d9c:	200004a8 	.word	0x200004a8

08003da0 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8003da4:	2234      	movs	r2, #52	; 0x34
 8003da6:	2100      	movs	r1, #0
 8003da8:	4822      	ldr	r0, [pc, #136]	; (8003e34 <get_memory_usage+0x94>)
 8003daa:	f000 f88b 	bl	8003ec4 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <get_memory_usage+0x94>)
 8003db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db4:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <get_memory_usage+0x94>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <get_memory_usage+0x94>)
 8003dbc:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <get_memory_usage+0x98>)
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <get_memory_usage+0x94>)
 8003dc2:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <get_memory_usage+0x9c>)
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <get_memory_usage+0x94>)
 8003dc8:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003dca:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <get_memory_usage+0xa0>)
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <get_memory_usage+0x94>)
 8003dce:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <get_memory_usage+0xa4>)
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <get_memory_usage+0x94>)
 8003dd4:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <get_memory_usage+0xa8>)
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <get_memory_usage+0x94>)
 8003dda:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003ddc:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <get_memory_usage+0xac>)
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <get_memory_usage+0x94>)
 8003de0:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <get_memory_usage+0x94>)
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <get_memory_usage+0x94>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <get_memory_usage+0x94>)
 8003dee:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <get_memory_usage+0x94>)
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <get_memory_usage+0x94>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <get_memory_usage+0x94>)
 8003dfc:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <get_memory_usage+0x94>)
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <get_memory_usage+0x94>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <get_memory_usage+0x94>)
 8003e0a:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <get_memory_usage+0x94>)
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <get_memory_usage+0x94>)
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	4413      	add	r3, r2
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <get_memory_usage+0x94>)
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <get_memory_usage+0x94>)
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <get_memory_usage+0x94>)
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	441a      	add	r2, r3
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <get_memory_usage+0x94>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	4a02      	ldr	r2, [pc, #8]	; (8003e34 <get_memory_usage+0x94>)
 8003e2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	2000057c 	.word	0x2000057c
 8003e38:	08004748 	.word	0x08004748
 8003e3c:	20000070 	.word	0x20000070
 8003e40:	200005c0 	.word	0x200005c0
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000070 	.word	0x20000070
 8003e4c:	08004a5c 	.word	0x08004a5c

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	2000000c 	.word	0x2000000c

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4d0d      	ldr	r5, [pc, #52]	; (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1b64      	subs	r4, r4, r5
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2600      	movs	r6, #0
 8003e68:	42a6      	cmp	r6, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4d0b      	ldr	r5, [pc, #44]	; (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f000 fc5e 	bl	8004730 <_init>
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2600      	movs	r6, #0
 8003e7a:	42a6      	cmp	r6, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e84:	4798      	blx	r3
 8003e86:	3601      	adds	r6, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8e:	4798      	blx	r3
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08004a54 	.word	0x08004a54
 8003e98:	08004a54 	.word	0x08004a54
 8003e9c:	08004a54 	.word	0x08004a54
 8003ea0:	08004a58 	.word	0x08004a58

08003ea4 <malloc>:
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <malloc+0xc>)
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	f000 b863 	b.w	8003f74 <_malloc_r>
 8003eae:	bf00      	nop
 8003eb0:	2000000c 	.word	0x2000000c

08003eb4 <free>:
 8003eb4:	4b02      	ldr	r3, [pc, #8]	; (8003ec0 <free+0xc>)
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	f000 b80b 	b.w	8003ed4 <_free_r>
 8003ebe:	bf00      	nop
 8003ec0:	2000000c 	.word	0x2000000c

08003ec4 <memset>:
 8003ec4:	4402      	add	r2, r0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d100      	bne.n	8003ece <memset+0xa>
 8003ecc:	4770      	bx	lr
 8003ece:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed2:	e7f9      	b.n	8003ec8 <memset+0x4>

08003ed4 <_free_r>:
 8003ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ed6:	2900      	cmp	r1, #0
 8003ed8:	d048      	beq.n	8003f6c <_free_r+0x98>
 8003eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ede:	9001      	str	r0, [sp, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ee6:	bfb8      	it	lt
 8003ee8:	18e4      	addlt	r4, r4, r3
 8003eea:	f000 f8cf 	bl	800408c <__malloc_lock>
 8003eee:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <_free_r+0x9c>)
 8003ef0:	9801      	ldr	r0, [sp, #4]
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	4615      	mov	r5, r2
 8003ef6:	b933      	cbnz	r3, 8003f06 <_free_r+0x32>
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6014      	str	r4, [r2, #0]
 8003efc:	b003      	add	sp, #12
 8003efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f02:	f000 b8c9 	b.w	8004098 <__malloc_unlock>
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	d90b      	bls.n	8003f22 <_free_r+0x4e>
 8003f0a:	6821      	ldr	r1, [r4, #0]
 8003f0c:	1862      	adds	r2, r4, r1
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bf04      	itt	eq
 8003f12:	681a      	ldreq	r2, [r3, #0]
 8003f14:	685b      	ldreq	r3, [r3, #4]
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	bf04      	itt	eq
 8003f1a:	1852      	addeq	r2, r2, r1
 8003f1c:	6022      	streq	r2, [r4, #0]
 8003f1e:	602c      	str	r4, [r5, #0]
 8003f20:	e7ec      	b.n	8003efc <_free_r+0x28>
 8003f22:	461a      	mov	r2, r3
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b10b      	cbz	r3, 8003f2c <_free_r+0x58>
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d9fa      	bls.n	8003f22 <_free_r+0x4e>
 8003f2c:	6811      	ldr	r1, [r2, #0]
 8003f2e:	1855      	adds	r5, r2, r1
 8003f30:	42a5      	cmp	r5, r4
 8003f32:	d10b      	bne.n	8003f4c <_free_r+0x78>
 8003f34:	6824      	ldr	r4, [r4, #0]
 8003f36:	4421      	add	r1, r4
 8003f38:	1854      	adds	r4, r2, r1
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	6011      	str	r1, [r2, #0]
 8003f3e:	d1dd      	bne.n	8003efc <_free_r+0x28>
 8003f40:	681c      	ldr	r4, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	6053      	str	r3, [r2, #4]
 8003f46:	4421      	add	r1, r4
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	e7d7      	b.n	8003efc <_free_r+0x28>
 8003f4c:	d902      	bls.n	8003f54 <_free_r+0x80>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	6003      	str	r3, [r0, #0]
 8003f52:	e7d3      	b.n	8003efc <_free_r+0x28>
 8003f54:	6825      	ldr	r5, [r4, #0]
 8003f56:	1961      	adds	r1, r4, r5
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf04      	itt	eq
 8003f5c:	6819      	ldreq	r1, [r3, #0]
 8003f5e:	685b      	ldreq	r3, [r3, #4]
 8003f60:	6063      	str	r3, [r4, #4]
 8003f62:	bf04      	itt	eq
 8003f64:	1949      	addeq	r1, r1, r5
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	6054      	str	r4, [r2, #4]
 8003f6a:	e7c7      	b.n	8003efc <_free_r+0x28>
 8003f6c:	b003      	add	sp, #12
 8003f6e:	bd30      	pop	{r4, r5, pc}
 8003f70:	200004a0 	.word	0x200004a0

08003f74 <_malloc_r>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	1ccd      	adds	r5, r1, #3
 8003f78:	f025 0503 	bic.w	r5, r5, #3
 8003f7c:	3508      	adds	r5, #8
 8003f7e:	2d0c      	cmp	r5, #12
 8003f80:	bf38      	it	cc
 8003f82:	250c      	movcc	r5, #12
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	4606      	mov	r6, r0
 8003f88:	db01      	blt.n	8003f8e <_malloc_r+0x1a>
 8003f8a:	42a9      	cmp	r1, r5
 8003f8c:	d903      	bls.n	8003f96 <_malloc_r+0x22>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	2000      	movs	r0, #0
 8003f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f96:	f000 f879 	bl	800408c <__malloc_lock>
 8003f9a:	4921      	ldr	r1, [pc, #132]	; (8004020 <_malloc_r+0xac>)
 8003f9c:	680a      	ldr	r2, [r1, #0]
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	b99c      	cbnz	r4, 8003fca <_malloc_r+0x56>
 8003fa2:	4f20      	ldr	r7, [pc, #128]	; (8004024 <_malloc_r+0xb0>)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	b923      	cbnz	r3, 8003fb2 <_malloc_r+0x3e>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4630      	mov	r0, r6
 8003fac:	f000 f83c 	bl	8004028 <_sbrk_r>
 8003fb0:	6038      	str	r0, [r7, #0]
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	f000 f837 	bl	8004028 <_sbrk_r>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	d123      	bne.n	8004006 <_malloc_r+0x92>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	6033      	str	r3, [r6, #0]
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 f868 	bl	8004098 <__malloc_unlock>
 8003fc8:	e7e3      	b.n	8003f92 <_malloc_r+0x1e>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	1b5b      	subs	r3, r3, r5
 8003fce:	d417      	bmi.n	8004000 <_malloc_r+0x8c>
 8003fd0:	2b0b      	cmp	r3, #11
 8003fd2:	d903      	bls.n	8003fdc <_malloc_r+0x68>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	441c      	add	r4, r3
 8003fd8:	6025      	str	r5, [r4, #0]
 8003fda:	e004      	b.n	8003fe6 <_malloc_r+0x72>
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	42a2      	cmp	r2, r4
 8003fe0:	bf0c      	ite	eq
 8003fe2:	600b      	streq	r3, [r1, #0]
 8003fe4:	6053      	strne	r3, [r2, #4]
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f000 f856 	bl	8004098 <__malloc_unlock>
 8003fec:	f104 000b 	add.w	r0, r4, #11
 8003ff0:	1d23      	adds	r3, r4, #4
 8003ff2:	f020 0007 	bic.w	r0, r0, #7
 8003ff6:	1ac2      	subs	r2, r0, r3
 8003ff8:	d0cc      	beq.n	8003f94 <_malloc_r+0x20>
 8003ffa:	1a1b      	subs	r3, r3, r0
 8003ffc:	50a3      	str	r3, [r4, r2]
 8003ffe:	e7c9      	b.n	8003f94 <_malloc_r+0x20>
 8004000:	4622      	mov	r2, r4
 8004002:	6864      	ldr	r4, [r4, #4]
 8004004:	e7cc      	b.n	8003fa0 <_malloc_r+0x2c>
 8004006:	1cc4      	adds	r4, r0, #3
 8004008:	f024 0403 	bic.w	r4, r4, #3
 800400c:	42a0      	cmp	r0, r4
 800400e:	d0e3      	beq.n	8003fd8 <_malloc_r+0x64>
 8004010:	1a21      	subs	r1, r4, r0
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f808 	bl	8004028 <_sbrk_r>
 8004018:	3001      	adds	r0, #1
 800401a:	d1dd      	bne.n	8003fd8 <_malloc_r+0x64>
 800401c:	e7cf      	b.n	8003fbe <_malloc_r+0x4a>
 800401e:	bf00      	nop
 8004020:	200004a0 	.word	0x200004a0
 8004024:	200004a4 	.word	0x200004a4

08004028 <_sbrk_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	4d06      	ldr	r5, [pc, #24]	; (8004044 <_sbrk_r+0x1c>)
 800402c:	2300      	movs	r3, #0
 800402e:	4604      	mov	r4, r0
 8004030:	4608      	mov	r0, r1
 8004032:	602b      	str	r3, [r5, #0]
 8004034:	f7fc fae0 	bl	80005f8 <_sbrk>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_sbrk_r+0x1a>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_sbrk_r+0x1a>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	200005bc 	.word	0x200005bc

08004048 <_vsiprintf_r>:
 8004048:	b500      	push	{lr}
 800404a:	b09b      	sub	sp, #108	; 0x6c
 800404c:	9100      	str	r1, [sp, #0]
 800404e:	9104      	str	r1, [sp, #16]
 8004050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004054:	9105      	str	r1, [sp, #20]
 8004056:	9102      	str	r1, [sp, #8]
 8004058:	4905      	ldr	r1, [pc, #20]	; (8004070 <_vsiprintf_r+0x28>)
 800405a:	9103      	str	r1, [sp, #12]
 800405c:	4669      	mov	r1, sp
 800405e:	f000 f87d 	bl	800415c <_svfiprintf_r>
 8004062:	9b00      	ldr	r3, [sp, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	b01b      	add	sp, #108	; 0x6c
 800406a:	f85d fb04 	ldr.w	pc, [sp], #4
 800406e:	bf00      	nop
 8004070:	ffff0208 	.word	0xffff0208

08004074 <vsiprintf>:
 8004074:	4613      	mov	r3, r2
 8004076:	460a      	mov	r2, r1
 8004078:	4601      	mov	r1, r0
 800407a:	4802      	ldr	r0, [pc, #8]	; (8004084 <vsiprintf+0x10>)
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f7ff bfe3 	b.w	8004048 <_vsiprintf_r>
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c

08004088 <__retarget_lock_acquire_recursive>:
 8004088:	4770      	bx	lr

0800408a <__retarget_lock_release_recursive>:
 800408a:	4770      	bx	lr

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff bffb 	b.w	8004088 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	200005b4 	.word	0x200005b4

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff bff6 	b.w	800408a <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	200005b4 	.word	0x200005b4

080040a4 <__ssputs_r>:
 80040a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	688e      	ldr	r6, [r1, #8]
 80040aa:	429e      	cmp	r6, r3
 80040ac:	4682      	mov	sl, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	4690      	mov	r8, r2
 80040b2:	461f      	mov	r7, r3
 80040b4:	d838      	bhi.n	8004128 <__ssputs_r+0x84>
 80040b6:	898a      	ldrh	r2, [r1, #12]
 80040b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040bc:	d032      	beq.n	8004124 <__ssputs_r+0x80>
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	6909      	ldr	r1, [r1, #16]
 80040c2:	eba5 0901 	sub.w	r9, r5, r1
 80040c6:	6965      	ldr	r5, [r4, #20]
 80040c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d0:	3301      	adds	r3, #1
 80040d2:	444b      	add	r3, r9
 80040d4:	106d      	asrs	r5, r5, #1
 80040d6:	429d      	cmp	r5, r3
 80040d8:	bf38      	it	cc
 80040da:	461d      	movcc	r5, r3
 80040dc:	0553      	lsls	r3, r2, #21
 80040de:	d531      	bpl.n	8004144 <__ssputs_r+0xa0>
 80040e0:	4629      	mov	r1, r5
 80040e2:	f7ff ff47 	bl	8003f74 <_malloc_r>
 80040e6:	4606      	mov	r6, r0
 80040e8:	b950      	cbnz	r0, 8004100 <__ssputs_r+0x5c>
 80040ea:	230c      	movs	r3, #12
 80040ec:	f8ca 3000 	str.w	r3, [sl]
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004100:	6921      	ldr	r1, [r4, #16]
 8004102:	464a      	mov	r2, r9
 8004104:	f000 fabe 	bl	8004684 <memcpy>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	6126      	str	r6, [r4, #16]
 8004116:	6165      	str	r5, [r4, #20]
 8004118:	444e      	add	r6, r9
 800411a:	eba5 0509 	sub.w	r5, r5, r9
 800411e:	6026      	str	r6, [r4, #0]
 8004120:	60a5      	str	r5, [r4, #8]
 8004122:	463e      	mov	r6, r7
 8004124:	42be      	cmp	r6, r7
 8004126:	d900      	bls.n	800412a <__ssputs_r+0x86>
 8004128:	463e      	mov	r6, r7
 800412a:	4632      	mov	r2, r6
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	4641      	mov	r1, r8
 8004130:	f000 fab6 	bl	80046a0 <memmove>
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	1b9b      	subs	r3, r3, r6
 800413a:	4432      	add	r2, r6
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	6022      	str	r2, [r4, #0]
 8004140:	2000      	movs	r0, #0
 8004142:	e7db      	b.n	80040fc <__ssputs_r+0x58>
 8004144:	462a      	mov	r2, r5
 8004146:	f000 fac5 	bl	80046d4 <_realloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d1e1      	bne.n	8004114 <__ssputs_r+0x70>
 8004150:	6921      	ldr	r1, [r4, #16]
 8004152:	4650      	mov	r0, sl
 8004154:	f7ff febe 	bl	8003ed4 <_free_r>
 8004158:	e7c7      	b.n	80040ea <__ssputs_r+0x46>
	...

0800415c <_svfiprintf_r>:
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	4698      	mov	r8, r3
 8004162:	898b      	ldrh	r3, [r1, #12]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	b09d      	sub	sp, #116	; 0x74
 8004168:	4607      	mov	r7, r0
 800416a:	460d      	mov	r5, r1
 800416c:	4614      	mov	r4, r2
 800416e:	d50e      	bpl.n	800418e <_svfiprintf_r+0x32>
 8004170:	690b      	ldr	r3, [r1, #16]
 8004172:	b963      	cbnz	r3, 800418e <_svfiprintf_r+0x32>
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	f7ff fefd 	bl	8003f74 <_malloc_r>
 800417a:	6028      	str	r0, [r5, #0]
 800417c:	6128      	str	r0, [r5, #16]
 800417e:	b920      	cbnz	r0, 800418a <_svfiprintf_r+0x2e>
 8004180:	230c      	movs	r3, #12
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	e0d1      	b.n	800432e <_svfiprintf_r+0x1d2>
 800418a:	2340      	movs	r3, #64	; 0x40
 800418c:	616b      	str	r3, [r5, #20]
 800418e:	2300      	movs	r3, #0
 8004190:	9309      	str	r3, [sp, #36]	; 0x24
 8004192:	2320      	movs	r3, #32
 8004194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004198:	f8cd 800c 	str.w	r8, [sp, #12]
 800419c:	2330      	movs	r3, #48	; 0x30
 800419e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004348 <_svfiprintf_r+0x1ec>
 80041a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041a6:	f04f 0901 	mov.w	r9, #1
 80041aa:	4623      	mov	r3, r4
 80041ac:	469a      	mov	sl, r3
 80041ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b2:	b10a      	cbz	r2, 80041b8 <_svfiprintf_r+0x5c>
 80041b4:	2a25      	cmp	r2, #37	; 0x25
 80041b6:	d1f9      	bne.n	80041ac <_svfiprintf_r+0x50>
 80041b8:	ebba 0b04 	subs.w	fp, sl, r4
 80041bc:	d00b      	beq.n	80041d6 <_svfiprintf_r+0x7a>
 80041be:	465b      	mov	r3, fp
 80041c0:	4622      	mov	r2, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	4638      	mov	r0, r7
 80041c6:	f7ff ff6d 	bl	80040a4 <__ssputs_r>
 80041ca:	3001      	adds	r0, #1
 80041cc:	f000 80aa 	beq.w	8004324 <_svfiprintf_r+0x1c8>
 80041d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d2:	445a      	add	r2, fp
 80041d4:	9209      	str	r2, [sp, #36]	; 0x24
 80041d6:	f89a 3000 	ldrb.w	r3, [sl]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a2 	beq.w	8004324 <_svfiprintf_r+0x1c8>
 80041e0:	2300      	movs	r3, #0
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295
 80041e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ea:	f10a 0a01 	add.w	sl, sl, #1
 80041ee:	9304      	str	r3, [sp, #16]
 80041f0:	9307      	str	r3, [sp, #28]
 80041f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041f6:	931a      	str	r3, [sp, #104]	; 0x68
 80041f8:	4654      	mov	r4, sl
 80041fa:	2205      	movs	r2, #5
 80041fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004200:	4851      	ldr	r0, [pc, #324]	; (8004348 <_svfiprintf_r+0x1ec>)
 8004202:	f7fb ffed 	bl	80001e0 <memchr>
 8004206:	9a04      	ldr	r2, [sp, #16]
 8004208:	b9d8      	cbnz	r0, 8004242 <_svfiprintf_r+0xe6>
 800420a:	06d0      	lsls	r0, r2, #27
 800420c:	bf44      	itt	mi
 800420e:	2320      	movmi	r3, #32
 8004210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004214:	0711      	lsls	r1, r2, #28
 8004216:	bf44      	itt	mi
 8004218:	232b      	movmi	r3, #43	; 0x2b
 800421a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800421e:	f89a 3000 	ldrb.w	r3, [sl]
 8004222:	2b2a      	cmp	r3, #42	; 0x2a
 8004224:	d015      	beq.n	8004252 <_svfiprintf_r+0xf6>
 8004226:	9a07      	ldr	r2, [sp, #28]
 8004228:	4654      	mov	r4, sl
 800422a:	2000      	movs	r0, #0
 800422c:	f04f 0c0a 	mov.w	ip, #10
 8004230:	4621      	mov	r1, r4
 8004232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004236:	3b30      	subs	r3, #48	; 0x30
 8004238:	2b09      	cmp	r3, #9
 800423a:	d94e      	bls.n	80042da <_svfiprintf_r+0x17e>
 800423c:	b1b0      	cbz	r0, 800426c <_svfiprintf_r+0x110>
 800423e:	9207      	str	r2, [sp, #28]
 8004240:	e014      	b.n	800426c <_svfiprintf_r+0x110>
 8004242:	eba0 0308 	sub.w	r3, r0, r8
 8004246:	fa09 f303 	lsl.w	r3, r9, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	46a2      	mov	sl, r4
 8004250:	e7d2      	b.n	80041f8 <_svfiprintf_r+0x9c>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	1d19      	adds	r1, r3, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	9103      	str	r1, [sp, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	bfbb      	ittet	lt
 800425e:	425b      	neglt	r3, r3
 8004260:	f042 0202 	orrlt.w	r2, r2, #2
 8004264:	9307      	strge	r3, [sp, #28]
 8004266:	9307      	strlt	r3, [sp, #28]
 8004268:	bfb8      	it	lt
 800426a:	9204      	strlt	r2, [sp, #16]
 800426c:	7823      	ldrb	r3, [r4, #0]
 800426e:	2b2e      	cmp	r3, #46	; 0x2e
 8004270:	d10c      	bne.n	800428c <_svfiprintf_r+0x130>
 8004272:	7863      	ldrb	r3, [r4, #1]
 8004274:	2b2a      	cmp	r3, #42	; 0x2a
 8004276:	d135      	bne.n	80042e4 <_svfiprintf_r+0x188>
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	1d1a      	adds	r2, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	9203      	str	r2, [sp, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	bfb8      	it	lt
 8004284:	f04f 33ff 	movlt.w	r3, #4294967295
 8004288:	3402      	adds	r4, #2
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004358 <_svfiprintf_r+0x1fc>
 8004290:	7821      	ldrb	r1, [r4, #0]
 8004292:	2203      	movs	r2, #3
 8004294:	4650      	mov	r0, sl
 8004296:	f7fb ffa3 	bl	80001e0 <memchr>
 800429a:	b140      	cbz	r0, 80042ae <_svfiprintf_r+0x152>
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	eba0 000a 	sub.w	r0, r0, sl
 80042a2:	fa03 f000 	lsl.w	r0, r3, r0
 80042a6:	9b04      	ldr	r3, [sp, #16]
 80042a8:	4303      	orrs	r3, r0
 80042aa:	3401      	adds	r4, #1
 80042ac:	9304      	str	r3, [sp, #16]
 80042ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b2:	4826      	ldr	r0, [pc, #152]	; (800434c <_svfiprintf_r+0x1f0>)
 80042b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042b8:	2206      	movs	r2, #6
 80042ba:	f7fb ff91 	bl	80001e0 <memchr>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d038      	beq.n	8004334 <_svfiprintf_r+0x1d8>
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <_svfiprintf_r+0x1f4>)
 80042c4:	bb1b      	cbnz	r3, 800430e <_svfiprintf_r+0x1b2>
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	3307      	adds	r3, #7
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	3308      	adds	r3, #8
 80042d0:	9303      	str	r3, [sp, #12]
 80042d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d4:	4433      	add	r3, r6
 80042d6:	9309      	str	r3, [sp, #36]	; 0x24
 80042d8:	e767      	b.n	80041aa <_svfiprintf_r+0x4e>
 80042da:	fb0c 3202 	mla	r2, ip, r2, r3
 80042de:	460c      	mov	r4, r1
 80042e0:	2001      	movs	r0, #1
 80042e2:	e7a5      	b.n	8004230 <_svfiprintf_r+0xd4>
 80042e4:	2300      	movs	r3, #0
 80042e6:	3401      	adds	r4, #1
 80042e8:	9305      	str	r3, [sp, #20]
 80042ea:	4619      	mov	r1, r3
 80042ec:	f04f 0c0a 	mov.w	ip, #10
 80042f0:	4620      	mov	r0, r4
 80042f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f6:	3a30      	subs	r2, #48	; 0x30
 80042f8:	2a09      	cmp	r2, #9
 80042fa:	d903      	bls.n	8004304 <_svfiprintf_r+0x1a8>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0c5      	beq.n	800428c <_svfiprintf_r+0x130>
 8004300:	9105      	str	r1, [sp, #20]
 8004302:	e7c3      	b.n	800428c <_svfiprintf_r+0x130>
 8004304:	fb0c 2101 	mla	r1, ip, r1, r2
 8004308:	4604      	mov	r4, r0
 800430a:	2301      	movs	r3, #1
 800430c:	e7f0      	b.n	80042f0 <_svfiprintf_r+0x194>
 800430e:	ab03      	add	r3, sp, #12
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	462a      	mov	r2, r5
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <_svfiprintf_r+0x1f8>)
 8004316:	a904      	add	r1, sp, #16
 8004318:	4638      	mov	r0, r7
 800431a:	f3af 8000 	nop.w
 800431e:	1c42      	adds	r2, r0, #1
 8004320:	4606      	mov	r6, r0
 8004322:	d1d6      	bne.n	80042d2 <_svfiprintf_r+0x176>
 8004324:	89ab      	ldrh	r3, [r5, #12]
 8004326:	065b      	lsls	r3, r3, #25
 8004328:	f53f af2c 	bmi.w	8004184 <_svfiprintf_r+0x28>
 800432c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800432e:	b01d      	add	sp, #116	; 0x74
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	462a      	mov	r2, r5
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <_svfiprintf_r+0x1f8>)
 800433c:	a904      	add	r1, sp, #16
 800433e:	4638      	mov	r0, r7
 8004340:	f000 f87a 	bl	8004438 <_printf_i>
 8004344:	e7eb      	b.n	800431e <_svfiprintf_r+0x1c2>
 8004346:	bf00      	nop
 8004348:	08004a20 	.word	0x08004a20
 800434c:	08004a2a 	.word	0x08004a2a
 8004350:	00000000 	.word	0x00000000
 8004354:	080040a5 	.word	0x080040a5
 8004358:	08004a26 	.word	0x08004a26

0800435c <_printf_common>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	4616      	mov	r6, r2
 8004362:	4699      	mov	r9, r3
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	690b      	ldr	r3, [r1, #16]
 8004368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800436c:	4293      	cmp	r3, r2
 800436e:	bfb8      	it	lt
 8004370:	4613      	movlt	r3, r2
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004378:	4607      	mov	r7, r0
 800437a:	460c      	mov	r4, r1
 800437c:	b10a      	cbz	r2, 8004382 <_printf_common+0x26>
 800437e:	3301      	adds	r3, #1
 8004380:	6033      	str	r3, [r6, #0]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	0699      	lsls	r1, r3, #26
 8004386:	bf42      	ittt	mi
 8004388:	6833      	ldrmi	r3, [r6, #0]
 800438a:	3302      	addmi	r3, #2
 800438c:	6033      	strmi	r3, [r6, #0]
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	f015 0506 	ands.w	r5, r5, #6
 8004394:	d106      	bne.n	80043a4 <_printf_common+0x48>
 8004396:	f104 0a19 	add.w	sl, r4, #25
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	6832      	ldr	r2, [r6, #0]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dc26      	bgt.n	80043f2 <_printf_common+0x96>
 80043a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043a8:	1e13      	subs	r3, r2, #0
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	bf18      	it	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	0692      	lsls	r2, r2, #26
 80043b2:	d42b      	bmi.n	800440c <_printf_common+0xb0>
 80043b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043b8:	4649      	mov	r1, r9
 80043ba:	4638      	mov	r0, r7
 80043bc:	47c0      	blx	r8
 80043be:	3001      	adds	r0, #1
 80043c0:	d01e      	beq.n	8004400 <_printf_common+0xa4>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	68e5      	ldr	r5, [r4, #12]
 80043c6:	6832      	ldr	r2, [r6, #0]
 80043c8:	f003 0306 	and.w	r3, r3, #6
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	bf08      	it	eq
 80043d0:	1aad      	subeq	r5, r5, r2
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	6922      	ldr	r2, [r4, #16]
 80043d6:	bf0c      	ite	eq
 80043d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043dc:	2500      	movne	r5, #0
 80043de:	4293      	cmp	r3, r2
 80043e0:	bfc4      	itt	gt
 80043e2:	1a9b      	subgt	r3, r3, r2
 80043e4:	18ed      	addgt	r5, r5, r3
 80043e6:	2600      	movs	r6, #0
 80043e8:	341a      	adds	r4, #26
 80043ea:	42b5      	cmp	r5, r6
 80043ec:	d11a      	bne.n	8004424 <_printf_common+0xc8>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e008      	b.n	8004404 <_printf_common+0xa8>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4652      	mov	r2, sl
 80043f6:	4649      	mov	r1, r9
 80043f8:	4638      	mov	r0, r7
 80043fa:	47c0      	blx	r8
 80043fc:	3001      	adds	r0, #1
 80043fe:	d103      	bne.n	8004408 <_printf_common+0xac>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	3501      	adds	r5, #1
 800440a:	e7c6      	b.n	800439a <_printf_common+0x3e>
 800440c:	18e1      	adds	r1, r4, r3
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	2030      	movs	r0, #48	; 0x30
 8004412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004416:	4422      	add	r2, r4
 8004418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800441c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004420:	3302      	adds	r3, #2
 8004422:	e7c7      	b.n	80043b4 <_printf_common+0x58>
 8004424:	2301      	movs	r3, #1
 8004426:	4622      	mov	r2, r4
 8004428:	4649      	mov	r1, r9
 800442a:	4638      	mov	r0, r7
 800442c:	47c0      	blx	r8
 800442e:	3001      	adds	r0, #1
 8004430:	d0e6      	beq.n	8004400 <_printf_common+0xa4>
 8004432:	3601      	adds	r6, #1
 8004434:	e7d9      	b.n	80043ea <_printf_common+0x8e>
	...

08004438 <_printf_i>:
 8004438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	460c      	mov	r4, r1
 800443e:	4691      	mov	r9, r2
 8004440:	7e27      	ldrb	r7, [r4, #24]
 8004442:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004444:	2f78      	cmp	r7, #120	; 0x78
 8004446:	4680      	mov	r8, r0
 8004448:	469a      	mov	sl, r3
 800444a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800444e:	d807      	bhi.n	8004460 <_printf_i+0x28>
 8004450:	2f62      	cmp	r7, #98	; 0x62
 8004452:	d80a      	bhi.n	800446a <_printf_i+0x32>
 8004454:	2f00      	cmp	r7, #0
 8004456:	f000 80d8 	beq.w	800460a <_printf_i+0x1d2>
 800445a:	2f58      	cmp	r7, #88	; 0x58
 800445c:	f000 80a3 	beq.w	80045a6 <_printf_i+0x16e>
 8004460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004468:	e03a      	b.n	80044e0 <_printf_i+0xa8>
 800446a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800446e:	2b15      	cmp	r3, #21
 8004470:	d8f6      	bhi.n	8004460 <_printf_i+0x28>
 8004472:	a001      	add	r0, pc, #4	; (adr r0, 8004478 <_printf_i+0x40>)
 8004474:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044e5 	.word	0x080044e5
 8004480:	08004461 	.word	0x08004461
 8004484:	08004461 	.word	0x08004461
 8004488:	08004461 	.word	0x08004461
 800448c:	08004461 	.word	0x08004461
 8004490:	080044e5 	.word	0x080044e5
 8004494:	08004461 	.word	0x08004461
 8004498:	08004461 	.word	0x08004461
 800449c:	08004461 	.word	0x08004461
 80044a0:	08004461 	.word	0x08004461
 80044a4:	080045f1 	.word	0x080045f1
 80044a8:	08004515 	.word	0x08004515
 80044ac:	080045d3 	.word	0x080045d3
 80044b0:	08004461 	.word	0x08004461
 80044b4:	08004461 	.word	0x08004461
 80044b8:	08004613 	.word	0x08004613
 80044bc:	08004461 	.word	0x08004461
 80044c0:	08004515 	.word	0x08004515
 80044c4:	08004461 	.word	0x08004461
 80044c8:	08004461 	.word	0x08004461
 80044cc:	080045db 	.word	0x080045db
 80044d0:	680b      	ldr	r3, [r1, #0]
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	600a      	str	r2, [r1, #0]
 80044d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0a3      	b.n	800462c <_printf_i+0x1f4>
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	6808      	ldr	r0, [r1, #0]
 80044e8:	062e      	lsls	r6, r5, #24
 80044ea:	f100 0304 	add.w	r3, r0, #4
 80044ee:	d50a      	bpl.n	8004506 <_printf_i+0xce>
 80044f0:	6805      	ldr	r5, [r0, #0]
 80044f2:	600b      	str	r3, [r1, #0]
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	da03      	bge.n	8004500 <_printf_i+0xc8>
 80044f8:	232d      	movs	r3, #45	; 0x2d
 80044fa:	426d      	negs	r5, r5
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004500:	485e      	ldr	r0, [pc, #376]	; (800467c <_printf_i+0x244>)
 8004502:	230a      	movs	r3, #10
 8004504:	e019      	b.n	800453a <_printf_i+0x102>
 8004506:	f015 0f40 	tst.w	r5, #64	; 0x40
 800450a:	6805      	ldr	r5, [r0, #0]
 800450c:	600b      	str	r3, [r1, #0]
 800450e:	bf18      	it	ne
 8004510:	b22d      	sxthne	r5, r5
 8004512:	e7ef      	b.n	80044f4 <_printf_i+0xbc>
 8004514:	680b      	ldr	r3, [r1, #0]
 8004516:	6825      	ldr	r5, [r4, #0]
 8004518:	1d18      	adds	r0, r3, #4
 800451a:	6008      	str	r0, [r1, #0]
 800451c:	0628      	lsls	r0, r5, #24
 800451e:	d501      	bpl.n	8004524 <_printf_i+0xec>
 8004520:	681d      	ldr	r5, [r3, #0]
 8004522:	e002      	b.n	800452a <_printf_i+0xf2>
 8004524:	0669      	lsls	r1, r5, #25
 8004526:	d5fb      	bpl.n	8004520 <_printf_i+0xe8>
 8004528:	881d      	ldrh	r5, [r3, #0]
 800452a:	4854      	ldr	r0, [pc, #336]	; (800467c <_printf_i+0x244>)
 800452c:	2f6f      	cmp	r7, #111	; 0x6f
 800452e:	bf0c      	ite	eq
 8004530:	2308      	moveq	r3, #8
 8004532:	230a      	movne	r3, #10
 8004534:	2100      	movs	r1, #0
 8004536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800453a:	6866      	ldr	r6, [r4, #4]
 800453c:	60a6      	str	r6, [r4, #8]
 800453e:	2e00      	cmp	r6, #0
 8004540:	bfa2      	ittt	ge
 8004542:	6821      	ldrge	r1, [r4, #0]
 8004544:	f021 0104 	bicge.w	r1, r1, #4
 8004548:	6021      	strge	r1, [r4, #0]
 800454a:	b90d      	cbnz	r5, 8004550 <_printf_i+0x118>
 800454c:	2e00      	cmp	r6, #0
 800454e:	d04d      	beq.n	80045ec <_printf_i+0x1b4>
 8004550:	4616      	mov	r6, r2
 8004552:	fbb5 f1f3 	udiv	r1, r5, r3
 8004556:	fb03 5711 	mls	r7, r3, r1, r5
 800455a:	5dc7      	ldrb	r7, [r0, r7]
 800455c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004560:	462f      	mov	r7, r5
 8004562:	42bb      	cmp	r3, r7
 8004564:	460d      	mov	r5, r1
 8004566:	d9f4      	bls.n	8004552 <_printf_i+0x11a>
 8004568:	2b08      	cmp	r3, #8
 800456a:	d10b      	bne.n	8004584 <_printf_i+0x14c>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	07df      	lsls	r7, r3, #31
 8004570:	d508      	bpl.n	8004584 <_printf_i+0x14c>
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	6861      	ldr	r1, [r4, #4]
 8004576:	4299      	cmp	r1, r3
 8004578:	bfde      	ittt	le
 800457a:	2330      	movle	r3, #48	; 0x30
 800457c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004584:	1b92      	subs	r2, r2, r6
 8004586:	6122      	str	r2, [r4, #16]
 8004588:	f8cd a000 	str.w	sl, [sp]
 800458c:	464b      	mov	r3, r9
 800458e:	aa03      	add	r2, sp, #12
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff fee2 	bl	800435c <_printf_common>
 8004598:	3001      	adds	r0, #1
 800459a:	d14c      	bne.n	8004636 <_printf_i+0x1fe>
 800459c:	f04f 30ff 	mov.w	r0, #4294967295
 80045a0:	b004      	add	sp, #16
 80045a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a6:	4835      	ldr	r0, [pc, #212]	; (800467c <_printf_i+0x244>)
 80045a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	680e      	ldr	r6, [r1, #0]
 80045b0:	061f      	lsls	r7, r3, #24
 80045b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80045b6:	600e      	str	r6, [r1, #0]
 80045b8:	d514      	bpl.n	80045e4 <_printf_i+0x1ac>
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	bf44      	itt	mi
 80045be:	f043 0320 	orrmi.w	r3, r3, #32
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b91d      	cbnz	r5, 80045ce <_printf_i+0x196>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f023 0320 	bic.w	r3, r3, #32
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	2310      	movs	r3, #16
 80045d0:	e7b0      	b.n	8004534 <_printf_i+0xfc>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f043 0320 	orr.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	2378      	movs	r3, #120	; 0x78
 80045dc:	4828      	ldr	r0, [pc, #160]	; (8004680 <_printf_i+0x248>)
 80045de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045e2:	e7e3      	b.n	80045ac <_printf_i+0x174>
 80045e4:	065e      	lsls	r6, r3, #25
 80045e6:	bf48      	it	mi
 80045e8:	b2ad      	uxthmi	r5, r5
 80045ea:	e7e6      	b.n	80045ba <_printf_i+0x182>
 80045ec:	4616      	mov	r6, r2
 80045ee:	e7bb      	b.n	8004568 <_printf_i+0x130>
 80045f0:	680b      	ldr	r3, [r1, #0]
 80045f2:	6826      	ldr	r6, [r4, #0]
 80045f4:	6960      	ldr	r0, [r4, #20]
 80045f6:	1d1d      	adds	r5, r3, #4
 80045f8:	600d      	str	r5, [r1, #0]
 80045fa:	0635      	lsls	r5, r6, #24
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	d501      	bpl.n	8004604 <_printf_i+0x1cc>
 8004600:	6018      	str	r0, [r3, #0]
 8004602:	e002      	b.n	800460a <_printf_i+0x1d2>
 8004604:	0671      	lsls	r1, r6, #25
 8004606:	d5fb      	bpl.n	8004600 <_printf_i+0x1c8>
 8004608:	8018      	strh	r0, [r3, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	6123      	str	r3, [r4, #16]
 800460e:	4616      	mov	r6, r2
 8004610:	e7ba      	b.n	8004588 <_printf_i+0x150>
 8004612:	680b      	ldr	r3, [r1, #0]
 8004614:	1d1a      	adds	r2, r3, #4
 8004616:	600a      	str	r2, [r1, #0]
 8004618:	681e      	ldr	r6, [r3, #0]
 800461a:	6862      	ldr	r2, [r4, #4]
 800461c:	2100      	movs	r1, #0
 800461e:	4630      	mov	r0, r6
 8004620:	f7fb fdde 	bl	80001e0 <memchr>
 8004624:	b108      	cbz	r0, 800462a <_printf_i+0x1f2>
 8004626:	1b80      	subs	r0, r0, r6
 8004628:	6060      	str	r0, [r4, #4]
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	6123      	str	r3, [r4, #16]
 800462e:	2300      	movs	r3, #0
 8004630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004634:	e7a8      	b.n	8004588 <_printf_i+0x150>
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	4632      	mov	r2, r6
 800463a:	4649      	mov	r1, r9
 800463c:	4640      	mov	r0, r8
 800463e:	47d0      	blx	sl
 8004640:	3001      	adds	r0, #1
 8004642:	d0ab      	beq.n	800459c <_printf_i+0x164>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	079b      	lsls	r3, r3, #30
 8004648:	d413      	bmi.n	8004672 <_printf_i+0x23a>
 800464a:	68e0      	ldr	r0, [r4, #12]
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	4298      	cmp	r0, r3
 8004650:	bfb8      	it	lt
 8004652:	4618      	movlt	r0, r3
 8004654:	e7a4      	b.n	80045a0 <_printf_i+0x168>
 8004656:	2301      	movs	r3, #1
 8004658:	4632      	mov	r2, r6
 800465a:	4649      	mov	r1, r9
 800465c:	4640      	mov	r0, r8
 800465e:	47d0      	blx	sl
 8004660:	3001      	adds	r0, #1
 8004662:	d09b      	beq.n	800459c <_printf_i+0x164>
 8004664:	3501      	adds	r5, #1
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	9903      	ldr	r1, [sp, #12]
 800466a:	1a5b      	subs	r3, r3, r1
 800466c:	42ab      	cmp	r3, r5
 800466e:	dcf2      	bgt.n	8004656 <_printf_i+0x21e>
 8004670:	e7eb      	b.n	800464a <_printf_i+0x212>
 8004672:	2500      	movs	r5, #0
 8004674:	f104 0619 	add.w	r6, r4, #25
 8004678:	e7f5      	b.n	8004666 <_printf_i+0x22e>
 800467a:	bf00      	nop
 800467c:	08004a31 	.word	0x08004a31
 8004680:	08004a42 	.word	0x08004a42

08004684 <memcpy>:
 8004684:	440a      	add	r2, r1
 8004686:	4291      	cmp	r1, r2
 8004688:	f100 33ff 	add.w	r3, r0, #4294967295
 800468c:	d100      	bne.n	8004690 <memcpy+0xc>
 800468e:	4770      	bx	lr
 8004690:	b510      	push	{r4, lr}
 8004692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800469a:	4291      	cmp	r1, r2
 800469c:	d1f9      	bne.n	8004692 <memcpy+0xe>
 800469e:	bd10      	pop	{r4, pc}

080046a0 <memmove>:
 80046a0:	4288      	cmp	r0, r1
 80046a2:	b510      	push	{r4, lr}
 80046a4:	eb01 0402 	add.w	r4, r1, r2
 80046a8:	d902      	bls.n	80046b0 <memmove+0x10>
 80046aa:	4284      	cmp	r4, r0
 80046ac:	4623      	mov	r3, r4
 80046ae:	d807      	bhi.n	80046c0 <memmove+0x20>
 80046b0:	1e43      	subs	r3, r0, #1
 80046b2:	42a1      	cmp	r1, r4
 80046b4:	d008      	beq.n	80046c8 <memmove+0x28>
 80046b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046be:	e7f8      	b.n	80046b2 <memmove+0x12>
 80046c0:	4402      	add	r2, r0
 80046c2:	4601      	mov	r1, r0
 80046c4:	428a      	cmp	r2, r1
 80046c6:	d100      	bne.n	80046ca <memmove+0x2a>
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046d2:	e7f7      	b.n	80046c4 <memmove+0x24>

080046d4 <_realloc_r>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	4607      	mov	r7, r0
 80046d8:	4614      	mov	r4, r2
 80046da:	460e      	mov	r6, r1
 80046dc:	b921      	cbnz	r1, 80046e8 <_realloc_r+0x14>
 80046de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046e2:	4611      	mov	r1, r2
 80046e4:	f7ff bc46 	b.w	8003f74 <_malloc_r>
 80046e8:	b922      	cbnz	r2, 80046f4 <_realloc_r+0x20>
 80046ea:	f7ff fbf3 	bl	8003ed4 <_free_r>
 80046ee:	4625      	mov	r5, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f4:	f000 f814 	bl	8004720 <_malloc_usable_size_r>
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d20f      	bcs.n	800471c <_realloc_r+0x48>
 80046fc:	4621      	mov	r1, r4
 80046fe:	4638      	mov	r0, r7
 8004700:	f7ff fc38 	bl	8003f74 <_malloc_r>
 8004704:	4605      	mov	r5, r0
 8004706:	2800      	cmp	r0, #0
 8004708:	d0f2      	beq.n	80046f0 <_realloc_r+0x1c>
 800470a:	4631      	mov	r1, r6
 800470c:	4622      	mov	r2, r4
 800470e:	f7ff ffb9 	bl	8004684 <memcpy>
 8004712:	4631      	mov	r1, r6
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff fbdd 	bl	8003ed4 <_free_r>
 800471a:	e7e9      	b.n	80046f0 <_realloc_r+0x1c>
 800471c:	4635      	mov	r5, r6
 800471e:	e7e7      	b.n	80046f0 <_realloc_r+0x1c>

08004720 <_malloc_usable_size_r>:
 8004720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004724:	1f18      	subs	r0, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bfbc      	itt	lt
 800472a:	580b      	ldrlt	r3, [r1, r0]
 800472c:	18c0      	addlt	r0, r0, r3
 800472e:	4770      	bx	lr

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
