
lwc_nist_benchmark_stm32f303vc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004990  08004990  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  200000f0  08004a88  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08004a88  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edcd  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002198  00000000  00000000  0002eeed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00031088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00031d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed9d  00000000  00000000  000328f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f208  00000000  00000000  0005168d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfd51  00000000  00000000  00060895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001205e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  0012063c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800472c 	.word	0x0800472c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800472c 	.word	0x0800472c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fa12 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f80e 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f8c8 	bl	8000748 <MX_GPIO_Init>
  MX_TIM6_Init();
 80005b8:	f000 f860 	bl	800067c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 f894 	bl	80006e8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 80005c0:	f003 fa94 	bl	8003aec <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <main+0x24>)
 80005c6:	f000 fa6b 	bl	8000aa0 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 80005ca:	e7f9      	b.n	80005c0 <main+0x18>
 80005cc:	000f4240 	.word	0x000f4240

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09e      	sub	sp, #120	; 0x78
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005da:	2228      	movs	r2, #40	; 0x28
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fc6e 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	223c      	movs	r2, #60	; 0x3c
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fc60 	bl	8003ec0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000614:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000618:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fcee 	bl	8001000 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800062a:	f000 f899 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000642:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fbe1 	bl	8001e10 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000654:	f000 f884 	bl	8000760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000658:	2301      	movs	r3, #1
 800065a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fe0a 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800066e:	f000 f877 	bl	8000760 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3778      	adds	r7, #120	; 0x78
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_TIM6_Init+0x64>)
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_TIM6_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_TIM6_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_TIM6_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006ae:	f001 ff95 	bl	80025dc <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006b8:	f000 f852 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_TIM6_Init+0x64>)
 80006ca:	f002 fa4f 	bl	8002b6c <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f844 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200005ac 	.word	0x200005ac
 80006e4:	40001000 	.word	0x40001000

080006e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART1_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART1_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART1_UART_Init+0x58>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART1_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART1_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART1_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART1_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART1_UART_Init+0x58>)
 800072c:	f002 fabc 	bl	8002ca8 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f813 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000528 	.word	0x20000528
 8000744:	40013800 	.word	0x40013800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800074c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000750:	f7ff ff12 	bl	8000578 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000754:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000758:	f7ff ff0e 	bl	8000578 <LL_AHB1_GRP1_EnableClock>

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <HAL_TIM_Base_MspInit+0x44>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d113      	bne.n	80007ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2036      	movs	r0, #54	; 0x36
 80007e4:	f000 fa5b 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007e8:	2036      	movs	r0, #54	; 0x36
 80007ea:	f000 fa74 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40001000 	.word	0x40001000
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_UART_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d127      	bne.n	8000872 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_UART_MspInit+0x80>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000852:	2330      	movs	r3, #48	; 0x30
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000862:	2307      	movs	r3, #7
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_UART_MspInit+0x84>)
 800086e:	f000 fa4d 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40013800 	.word	0x40013800
 8000880:	40021000 	.word	0x40021000
 8000884:	48000800 	.word	0x48000800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f8c4 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM6_DAC_IRQHandler+0x10>)
 80008e2:	f001 ff6c 	bl	80027be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200005ac 	.word	0x200005ac

080008f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f8:	4a14      	ldr	r2, [pc, #80]	; (800094c <_sbrk+0x5c>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <_sbrk+0x60>)
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <_sbrk+0x64>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <_sbrk+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	429a      	cmp	r2, r3
 800091e:	d207      	bcs.n	8000930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000920:	f003 faa4 	bl	8003e6c <__errno>
 8000924:	4603      	mov	r3, r0
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e009      	b.n	8000944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <_sbrk+0x64>)
 8000940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000942:	68fb      	ldr	r3, [r7, #12]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000a000 	.word	0x2000a000
 8000950:	00000400 	.word	0x00000400
 8000954:	2000010c 	.word	0x2000010c
 8000958:	20000640 	.word	0x20000640

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490e      	ldr	r1, [pc, #56]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0b      	ldr	r4, [pc, #44]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009aa:	f7ff ffd7 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f003 fa63 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fdf9 	bl	80005a8 <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80009c4:	08004998 	.word	0x08004998
  ldr r2, =_sbss
 80009c8:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80009cc:	20000640 	.word	0x20000640

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x28>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f94f 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff febc 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f967 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f92f 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	200005f8 	.word	0x200005f8

08000a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200005f8 	.word	0x200005f8

08000aa0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa8:	f7ff ffee 	bl	8000a88 <HAL_GetTick>
 8000aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d005      	beq.n	8000ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_Delay+0x44>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ac6:	bf00      	nop
 8000ac8:	f7ff ffde 	bl	8000a88 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8f7      	bhi.n	8000ac8 <HAL_Delay+0x28>
  {
  }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <__NVIC_EnableIRQ+0x38>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff29 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff3e 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff31 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa2 	bl	8000c44 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e154      	b.n	8000fc6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8146 	beq.w	8000fc0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d00b      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d48:	2b11      	cmp	r3, #17
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d130      	bne.n	8000db6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0201 	and.w	r2, r3, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0xea>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d123      	bne.n	8000e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	6939      	ldr	r1, [r7, #16]
 8000e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0203 	and.w	r2, r3, #3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80a0 	beq.w	8000fc0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e80:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a57      	ldr	r2, [pc, #348]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e98:	4a53      	ldr	r2, [pc, #332]	; (8000fe8 <HAL_GPIO_Init+0x2dc>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec2:	d019      	beq.n	8000ef8 <HAL_GPIO_Init+0x1ec>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a49      	ldr	r2, [pc, #292]	; (8000fec <HAL_GPIO_Init+0x2e0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d013      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e8>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_GPIO_Init+0x2e4>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00d      	beq.n	8000ef0 <HAL_GPIO_Init+0x1e4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d101      	bne.n	8000ee8 <HAL_GPIO_Init+0x1dc>
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	e008      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ee8:	2305      	movs	r3, #5
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000eec:	2303      	movs	r3, #3
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f0a:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2dc>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f18:	4b38      	ldr	r3, [pc, #224]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f66:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f90:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f47f aea3 	bne.w	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000c00 	.word	0x48000c00
 8000ff8:	48001000 	.word	0x48001000
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001006:	af00      	add	r7, sp, #0
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	f000 bef4 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 816a 	beq.w	80012fe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800102a:	4bb3      	ldr	r3, [pc, #716]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b04      	cmp	r3, #4
 8001034:	d00c      	beq.n	8001050 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001036:	4bb0      	ldr	r3, [pc, #704]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b08      	cmp	r3, #8
 8001040:	d159      	bne.n	80010f6 <HAL_RCC_OscConfig+0xf6>
 8001042:	4bad      	ldr	r3, [pc, #692]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104e:	d152      	bne.n	80010f6 <HAL_RCC_OscConfig+0xf6>
 8001050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001054:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001064:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d102      	bne.n	8001082 <HAL_RCC_OscConfig+0x82>
 800107c:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	e015      	b.n	80010ae <HAL_RCC_OscConfig+0xae>
 8001082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001086:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800109e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010aa:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010ba:	fa92 f2a2 	rbit	r2, r2
 80010be:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010c6:	fab2 f282 	clz	r2, r2
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	f002 021f 	and.w	r2, r2, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 810c 	beq.w	80012fc <HAL_RCC_OscConfig+0x2fc>
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 8106 	bne.w	80012fc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f000 be86 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x110>
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7c      	ldr	r2, [pc, #496]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e030      	b.n	8001172 <HAL_RCC_OscConfig+0x172>
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x134>
 800111a:	4b77      	ldr	r3, [pc, #476]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a76      	ldr	r2, [pc, #472]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b74      	ldr	r3, [pc, #464]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a73      	ldr	r2, [pc, #460]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800112c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01e      	b.n	8001172 <HAL_RCC_OscConfig+0x172>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x15a>
 8001140:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e00b      	b.n	8001172 <HAL_RCC_OscConfig+0x172>
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001172:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	f023 020f 	bic.w	r2, r3, #15
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	495d      	ldr	r1, [pc, #372]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001182:	4313      	orrs	r3, r2
 8001184:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d059      	beq.n	8001244 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fc7a 	bl	8000a88 <HAL_GetTick>
 8001194:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119a:	f7ff fc75 	bl	8000a88 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	; 0x64
 80011a8:	d902      	bls.n	80011b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f000 be29 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>
 80011b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <HAL_RCC_OscConfig+0x1e2>
 80011dc:	4b46      	ldr	r3, [pc, #280]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x20e>
 80011e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001212:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001216:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001222:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f002 021f 	and.w	r2, r2, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0ab      	beq.n	800119a <HAL_RCC_OscConfig+0x19a>
 8001242:	e05c      	b.n	80012fe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fc20 	bl	8000a88 <HAL_GetTick>
 8001248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124e:	f7ff fc1b 	bl	8000a88 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d902      	bls.n	8001264 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	f000 bdcf 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>
 8001264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001268:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001278:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d102      	bne.n	8001296 <HAL_RCC_OscConfig+0x296>
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x2c2>
 8001296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012b2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_RCC_OscConfig+0x2f8>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012ca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012ce:	fa92 f2a2 	rbit	r2, r2
 80012d2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012d6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012da:	fab2 f282 	clz	r2, r2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	f002 021f 	and.w	r2, r2, #31
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f202 	lsl.w	r2, r1, r2
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ab      	bne.n	800124e <HAL_RCC_OscConfig+0x24e>
 80012f6:	e002      	b.n	80012fe <HAL_RCC_OscConfig+0x2fe>
 80012f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 816f 	beq.w	80015ec <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800130e:	4bd0      	ldr	r3, [pc, #832]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800131a:	4bcd      	ldr	r3, [pc, #820]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d16c      	bne.n	8001400 <HAL_RCC_OscConfig+0x400>
 8001326:	4bca      	ldr	r3, [pc, #808]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d166      	bne.n	8001400 <HAL_RCC_OscConfig+0x400>
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001344:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <HAL_RCC_OscConfig+0x362>
 800135c:	4bbc      	ldr	r3, [pc, #752]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	e013      	b.n	800138a <HAL_RCC_OscConfig+0x38a>
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800137a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001386:	4bb2      	ldr	r3, [pc, #712]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	2202      	movs	r2, #2
 800138c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001390:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001394:	fa92 f2a2 	rbit	r2, r2
 8001398:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800139c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013a0:	fab2 f282 	clz	r2, r2
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f002 021f 	and.w	r2, r2, #31
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_RCC_OscConfig+0x3cc>
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 bd1b 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	21f8      	movs	r1, #248	; 0xf8
 80013dc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013e4:	fa91 f1a1 	rbit	r1, r1
 80013e8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013ec:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013f0:	fab1 f181 	clz	r1, r1
 80013f4:	b2c9      	uxtb	r1, r1
 80013f6:	408b      	lsls	r3, r1
 80013f8:	4995      	ldr	r1, [pc, #596]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e0f5      	b.n	80015ec <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8085 	beq.w	8001516 <HAL_RCC_OscConfig+0x516>
 800140c:	2301      	movs	r3, #1
 800140e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800141e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800142c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	461a      	mov	r2, r3
 8001434:	2301      	movs	r3, #1
 8001436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fb26 	bl	8000a88 <HAL_GetTick>
 800143c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fb21 	bl	8000a88 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d902      	bls.n	8001458 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	f000 bcd5 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800146a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	095b      	lsrs	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d102      	bne.n	8001488 <HAL_RCC_OscConfig+0x488>
 8001482:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	e013      	b.n	80014b0 <HAL_RCC_OscConfig+0x4b0>
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2202      	movs	r2, #2
 80014b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014ba:	fa92 f2a2 	rbit	r2, r2
 80014be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014c6:	fab2 f282 	clz	r2, r2
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	f042 0220 	orr.w	r2, r2, #32
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f002 021f 	and.w	r2, r2, #31
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0af      	beq.n	8001442 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	4b5b      	ldr	r3, [pc, #364]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	21f8      	movs	r1, #248	; 0xf8
 80014f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014fa:	fa91 f1a1 	rbit	r1, r1
 80014fe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001502:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001506:	fab1 f181 	clz	r1, r1
 800150a:	b2c9      	uxtb	r1, r1
 800150c:	408b      	lsls	r3, r1
 800150e:	4950      	ldr	r1, [pc, #320]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e06a      	b.n	80015ec <HAL_RCC_OscConfig+0x5ec>
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001528:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001536:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	461a      	mov	r2, r3
 800153e:	2300      	movs	r3, #0
 8001540:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff faa1 	bl	8000a88 <HAL_GetTick>
 8001546:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e00a      	b.n	8001562 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fa9c 	bl	8000a88 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d902      	bls.n	8001562 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	f000 bc50 	b.w	8001e02 <HAL_RCC_OscConfig+0xe02>
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x592>
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	e013      	b.n	80015ba <HAL_RCC_OscConfig+0x5ba>
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x650>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	2202      	movs	r2, #2
 80015bc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015c4:	fa92 f2a2 	rbit	r2, r2
 80015c8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015d0:	fab2 f282 	clz	r2, r2
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f042 0220 	orr.w	r2, r2, #32
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	f002 021f 	and.w	r2, r2, #31
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1af      	bne.n	800154c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80da 	beq.w	80017b0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d069      	beq.n	80016da <HAL_RCC_OscConfig+0x6da>
 8001606:	2301      	movs	r3, #1
 8001608:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x654>)
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	461a      	mov	r2, r3
 800162c:	2301      	movs	r3, #1
 800162e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fa2a 	bl	8000a88 <HAL_GetTick>
 8001634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001638:	e00e      	b.n	8001658 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fa25 	bl	8000a88 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d906      	bls.n	8001658 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e3d9      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	10908120 	.word	0x10908120
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800166e:	2202      	movs	r2, #2
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fa93 f2a3 	rbit	r2, r3
 800167c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001698:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4ba5      	ldr	r3, [pc, #660]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016a2:	2102      	movs	r1, #2
 80016a4:	6019      	str	r1, [r3, #0]
 80016a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f1a3 	rbit	r1, r3
 80016b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016b4:	6019      	str	r1, [r3, #0]
  return result;
 80016b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0b0      	beq.n	800163a <HAL_RCC_OscConfig+0x63a>
 80016d8:	e06a      	b.n	80017b0 <HAL_RCC_OscConfig+0x7b0>
 80016da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f2a3 	rbit	r2, r3
 80016ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016f0:	601a      	str	r2, [r3, #0]
  return result;
 80016f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001702:	4413      	add	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	461a      	mov	r2, r3
 8001708:	2300      	movs	r3, #0
 800170a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff f9bc 	bl	8000a88 <HAL_GetTick>
 8001710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff f9b7 	bl	8000a88 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e36b      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 800172a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001746:	2202      	movs	r2, #2
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	fa93 f2a3 	rbit	r2, r3
 8001754:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001770:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001772:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800177a:	2102      	movs	r1, #2
 800177c:	6019      	str	r1, [r3, #0]
 800177e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f1a3 	rbit	r1, r3
 8001788:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800178c:	6019      	str	r1, [r3, #0]
  return result;
 800178e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1b2      	bne.n	8001716 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8158 	beq.w	8001a70 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d112      	bne.n	80017f8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b57      	ldr	r3, [pc, #348]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a56      	ldr	r2, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b54      	ldr	r3, [pc, #336]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d11a      	bne.n	800183a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001804:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff f93a 	bl	8000a88 <HAL_GetTick>
 8001814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	e009      	b.n	800182e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181a:	f7ff f935 	bl	8000a88 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e2e9      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0ef      	beq.n	800181a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x852>
 8001844:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a39      	ldr	r2, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e02f      	b.n	80018b2 <HAL_RCC_OscConfig+0x8b2>
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x876>
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a33      	ldr	r2, [pc, #204]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a30      	ldr	r2, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	e01d      	b.n	80018b2 <HAL_RCC_OscConfig+0x8b2>
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x89a>
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x8b2>
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6213      	str	r3, [r2, #32]
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d06b      	beq.n	8001994 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f8e4 	bl	8000a88 <HAL_GetTick>
 80018c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f8df 	bl	8000a88 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e291      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 80018de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800190c:	601a      	str	r2, [r3, #0]
  return result;
 800190e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001912:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d109      	bne.n	800193c <HAL_RCC_OscConfig+0x93c>
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <HAL_RCC_OscConfig+0x930>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x958>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	10908120 	.word	0x10908120
 8001938:	40007000 	.word	0x40007000
 800193c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001940:	2202      	movs	r2, #2
 8001942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4bbb      	ldr	r3, [pc, #748]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800195c:	2102      	movs	r1, #2
 800195e:	6011      	str	r1, [r2, #0]
 8001960:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	fa92 f1a2 	rbit	r1, r2
 800196a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800196e:	6011      	str	r1, [r2, #0]
  return result;
 8001970:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	fab2 f282 	clz	r2, r2
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	f002 021f 	and.w	r2, r2, #31
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d099      	beq.n	80018c6 <HAL_RCC_OscConfig+0x8c6>
 8001992:	e063      	b.n	8001a5c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff f878 	bl	8000a88 <HAL_GetTick>
 8001998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f873 	bl	8000a88 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e225      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 80019b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fa93 f2a3 	rbit	r2, r3
 80019c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019e4:	601a      	str	r2, [r3, #0]
  return result;
 80019e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0xa06>
 8001a00:	4b90      	ldr	r3, [pc, #576]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	e00d      	b.n	8001a22 <HAL_RCC_OscConfig+0xa22>
 8001a06:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a26:	2102      	movs	r1, #2
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	fa92 f1a2 	rbit	r1, r2
 8001a34:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a38:	6011      	str	r1, [r2, #0]
  return result;
 8001a3a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f002 021f 	and.w	r2, r2, #31
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1a0      	bne.n	800199e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b77      	ldr	r3, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	4a76      	ldr	r2, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 81c2 	beq.w	8001e00 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	4b71      	ldr	r3, [pc, #452]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	f000 819c 	beq.w	8001dc2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	f040 8114 	bne.w	8001cbe <HAL_RCC_OscConfig+0xcbe>
 8001a96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001aae:	601a      	str	r2, [r3, #0]
  return result;
 8001ab0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ab4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7fe ffdc 	bl	8000a88 <HAL_GetTick>
 8001ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7fe ffd7 	bl	8000a88 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e18b      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 8001aea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0xb24>
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0xb5c>
 8001b24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b64:	6011      	str	r1, [r2, #0]
 8001b66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fa92 f1a2 	rbit	r1, r2
 8001b70:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b74:	6011      	str	r1, [r2, #0]
  return result;
 8001b76:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d19e      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	4925      	ldr	r1, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bcc:	601a      	str	r2, [r3, #0]
  return result;
 8001bce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bd2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	461a      	mov	r2, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe ff4d 	bl	8000a88 <HAL_GetTick>
 8001bee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf2:	e009      	b.n	8001c08 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7fe ff48 	bl	8000a88 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0fc      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 8001c08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c20:	601a      	str	r2, [r3, #0]
  return result;
 8001c22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0xc48>
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e01e      	b.n	8001c80 <HAL_RCC_OscConfig+0xc80>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_OscConfig+0xe0c>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c88:	6011      	str	r1, [r2, #0]
 8001c8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fa92 f1a2 	rbit	r1, r2
 8001c94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c98:	6011      	str	r1, [r2, #0]
  return result;
 8001c9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d09b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xbf4>
 8001cbc:	e0a0      	b.n	8001e00 <HAL_RCC_OscConfig+0xe00>
 8001cbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fec8 	bl	8000a88 <HAL_GetTick>
 8001cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe fec3 	bl	8000a88 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e077      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
 8001d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	601a      	str	r2, [r3, #0]
  return result;
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0xd4c>
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_OscConfig+0xe0c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd84>
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f107 0318 	add.w	r3, r7, #24
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0xe0c>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f107 0210 	add.w	r2, r7, #16
 8001d88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d8c:	6011      	str	r1, [r2, #0]
 8001d8e:	f107 0210 	add.w	r2, r7, #16
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f107 020c 	add.w	r2, r7, #12
 8001d9c:	6011      	str	r1, [r2, #0]
  return result;
 8001d9e:	f107 020c 	add.w	r2, r7, #12
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d19e      	bne.n	8001cfe <HAL_RCC_OscConfig+0xcfe>
 8001dc0:	e01e      	b.n	8001e00 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e018      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_RCC_OscConfig+0xe0c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b09e      	sub	sp, #120	; 0x78
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e162      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b90      	ldr	r3, [pc, #576]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b8d      	ldr	r3, [pc, #564]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	498b      	ldr	r1, [pc, #556]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e14a      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	497f      	ldr	r1, [pc, #508]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80dc 	beq.w	800203c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d13c      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xf6>
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xa6>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e00f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0xc6>
 8001eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eda:	65ba      	str	r2, [r7, #88]	; 0x58
 8001edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d17b      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0f3      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d13c      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x178>
 8001f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x128>
 8001f32:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_ClockConfig+0x148>
 8001f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	647b      	str	r3, [r7, #68]	; 0x44
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13a      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b2      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1a0>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e00d      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1bc>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2202      	movs	r2, #2
 8001fce:	61ba      	str	r2, [r7, #24]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	617a      	str	r2, [r7, #20]
  return result;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f042 0220 	orr.w	r2, r2, #32
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f002 021f 	and.w	r2, r2, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e079      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	491a      	ldr	r1, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7fe fd3c 	bl	8000a88 <HAL_GetTick>
 8002010:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fd38 	bl	8000a88 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e061      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d214      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4906      	ldr	r1, [pc, #24]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e040      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	491a      	ldr	r1, [pc, #104]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b2:	f000 f829 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	60fa      	str	r2, [r7, #12]
  return result;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	40d3      	lsrs	r3, r2
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x2ec>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	fa21 f303 	lsr.w	r3, r1, r3
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_RCC_ClockConfig+0x2f0>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x2f4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fc8a 	bl	8000a00 <HAL_InitTick>
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3778      	adds	r7, #120	; 0x78
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	0800481c 	.word	0x0800481c
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	; 0x2c
 800210c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d002      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x30>
 8002132:	2b08      	cmp	r3, #8
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x36>
 8002136:	e03c      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800213a:	623b      	str	r3, [r7, #32]
      break;
 800213c:	e03c      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002144:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002148:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	607a      	str	r2, [r7, #4]
  return result;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	40d3      	lsrs	r3, r2
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	220f      	movs	r2, #15
 800216c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	60fa      	str	r2, [r7, #12]
  return result;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	40d3      	lsrs	r3, r2
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	e004      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	623b      	str	r3, [r7, #32]
      break;
 80021b0:	e002      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b4:	623b      	str	r3, [r7, #32]
      break;
 80021b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	372c      	adds	r7, #44	; 0x2c
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	007a1200 	.word	0x007a1200
 80021d0:	08004834 	.word	0x08004834
 80021d4:	08004844 	.word	0x08004844
 80021d8:	003d0900 	.word	0x003d0900

080021dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000

080021f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021fa:	f7ff ffef 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 80021fe:	4601      	mov	r1, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002208:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800220c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	603a      	str	r2, [r7, #0]
  return result;
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	40d3      	lsrs	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	0800482c 	.word	0x0800482c

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800223e:	f7ff ffcd 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002242:	4601      	mov	r1, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800224c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002250:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	603a      	str	r2, [r7, #0]
  return result;
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	40d3      	lsrs	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	0800482c 	.word	0x0800482c

0800227c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b092      	sub	sp, #72	; 0x48
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80d4 	beq.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a0:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10e      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ac:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b6:	61d3      	str	r3, [r2, #28]
 80022b8:	4b48      	ldr	r3, [pc, #288]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b45      	ldr	r3, [pc, #276]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a41      	ldr	r2, [pc, #260]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fbd1 	bl	8000a88 <HAL_GetTick>
 80022e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e008      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7fe fbcd 	bl	8000a88 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	; 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e169      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002308:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8084 	beq.w	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002324:	429a      	cmp	r2, r3
 8002326:	d07c      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	461a      	mov	r2, r3
 8002352:	2301      	movs	r3, #1
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	461a      	mov	r2, r3
 8002376:	2300      	movs	r3, #0
 8002378:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800237a:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04b      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe fb7d 	bl	8000a88 <HAL_GetTick>
 800238e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fb79 	bl	8000a88 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e113      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61fb      	str	r3, [r7, #28]
  return result;
 80023c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d108      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023d6:	4b01      	ldr	r3, [pc, #4]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	e00d      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
 80023e4:	10908100 	.word	0x10908100
 80023e8:	2302      	movs	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	4b78      	ldr	r3, [pc, #480]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2202      	movs	r2, #2
 80023fa:	613a      	str	r2, [r7, #16]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	60fa      	str	r2, [r7, #12]
  return result;
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f002 021f 	and.w	r2, r2, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0b7      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002422:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	496a      	ldr	r1, [pc, #424]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002430:	4313      	orrs	r3, r2
 8002432:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a65      	ldr	r2, [pc, #404]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002454:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f023 0203 	bic.w	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	495d      	ldr	r1, [pc, #372]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4956      	ldr	r1, [pc, #344]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002490:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	494e      	ldr	r1, [pc, #312]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f023 0210 	bic.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4947      	ldr	r1, [pc, #284]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024cc:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	493f      	ldr	r1, [pc, #252]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f023 0220 	bic.w	r2, r3, #32
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4938      	ldr	r1, [pc, #224]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	4930      	ldr	r1, [pc, #192]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4929      	ldr	r1, [pc, #164]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	4921      	ldr	r1, [pc, #132]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	491a      	ldr	r1, [pc, #104]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	4912      	ldr	r1, [pc, #72]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	490b      	ldr	r1, [pc, #44]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3748      	adds	r7, #72	; 0x48
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e049      	b.n	8002682 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f8d6 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fa16 	bl	8002a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d001      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04a      	b.n	800273a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a21      	ldr	r2, [pc, #132]	; (8002748 <HAL_TIM_Base_Start_IT+0xbc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x6c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d013      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x6c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_TIM_Base_Start_IT+0xc0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x6c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_TIM_Base_Start_IT+0xc4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x6c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_TIM_Base_Start_IT+0xc8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x6c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_Base_Start_IT+0xcc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d115      	bne.n	8002724 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_TIM_Base_Start_IT+0xd0>)
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b06      	cmp	r3, #6
 8002708:	d015      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0xaa>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002710:	d011      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002722:	e008      	b.n	8002736 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e000      	b.n	8002738 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40000400 	.word	0x40000400
 8002750:	40000800 	.word	0x40000800
 8002754:	40013400 	.word	0x40013400
 8002758:	40014000 	.word	0x40014000
 800275c:	00010007 	.word	0x00010007

08002760 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6a1a      	ldr	r2, [r3, #32]
 800277e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10f      	bne.n	80027a8 <HAL_TIM_Base_Stop_IT+0x48>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	f240 4344 	movw	r3, #1092	; 0x444
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_Base_Stop_IT+0x48>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d122      	bne.n	800281a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d11b      	bne.n	800281a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0202 	mvn.w	r2, #2
 80027ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f905 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 8002806:	e005      	b.n	8002814 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8f7 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f908 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d122      	bne.n	800286e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b04      	cmp	r3, #4
 8002834:	d11b      	bne.n	800286e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0204 	mvn.w	r2, #4
 800283e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f8db 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 800285a:	e005      	b.n	8002868 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8cd 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8de 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d122      	bne.n	80028c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11b      	bne.n	80028c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0208 	mvn.w	r2, #8
 8002892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2204      	movs	r2, #4
 8002898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8b1 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 80028ae:	e005      	b.n	80028bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8a3 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f8b4 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d122      	bne.n	8002916 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d11b      	bne.n	8002916 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f06f 0210 	mvn.w	r2, #16
 80028e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2208      	movs	r2, #8
 80028ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f887 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 8002902:	e005      	b.n	8002910 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f879 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f88a 	bl	8002a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10e      	bne.n	8002942 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0201 	mvn.w	r2, #1
 800293a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f001 f9cd 	bl	8003cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d10e      	bne.n	800296e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b80      	cmp	r3, #128	; 0x80
 800295c:	d107      	bne.n	800296e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f989 	bl	8002c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f97c 	bl	8002c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d10e      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d107      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f838 	bl	8002a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d107      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0220 	mvn.w	r2, #32
 80029ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f93c 	bl	8002c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3c      	ldr	r2, [pc, #240]	; (8002b50 <TIM_Base_SetConfig+0x104>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00f      	beq.n	8002a84 <TIM_Base_SetConfig+0x38>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6a:	d00b      	beq.n	8002a84 <TIM_Base_SetConfig+0x38>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a39      	ldr	r2, [pc, #228]	; (8002b54 <TIM_Base_SetConfig+0x108>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <TIM_Base_SetConfig+0x38>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a38      	ldr	r2, [pc, #224]	; (8002b58 <TIM_Base_SetConfig+0x10c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0x38>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a37      	ldr	r2, [pc, #220]	; (8002b5c <TIM_Base_SetConfig+0x110>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2d      	ldr	r2, [pc, #180]	; (8002b50 <TIM_Base_SetConfig+0x104>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01b      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d017      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <TIM_Base_SetConfig+0x108>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <TIM_Base_SetConfig+0x10c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00f      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <TIM_Base_SetConfig+0x110>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <TIM_Base_SetConfig+0x114>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <TIM_Base_SetConfig+0x118>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_Base_SetConfig+0x8a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <TIM_Base_SetConfig+0x11c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d108      	bne.n	8002ae8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <TIM_Base_SetConfig+0x104>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00f      	beq.n	8002b34 <TIM_Base_SetConfig+0xe8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a11      	ldr	r2, [pc, #68]	; (8002b5c <TIM_Base_SetConfig+0x110>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00b      	beq.n	8002b34 <TIM_Base_SetConfig+0xe8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <TIM_Base_SetConfig+0x114>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d007      	beq.n	8002b34 <TIM_Base_SetConfig+0xe8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <TIM_Base_SetConfig+0x118>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0xe8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <TIM_Base_SetConfig+0x11c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d103      	bne.n	8002b3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	615a      	str	r2, [r3, #20]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40013400 	.word	0x40013400
 8002b60:	40014000 	.word	0x40014000
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40014800 	.word	0x40014800

08002b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e063      	b.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d108      	bne.n	8002bca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002bbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d018      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf6:	d013      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10c      	bne.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40013400 	.word	0x40013400
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40014000 	.word	0x40014000

08002c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e040      	b.n	8002d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fd98 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	; 0x24
 8002cd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8c0 	bl	8002e6c <UART_SetConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e022      	b.n	8002d3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa88 	bl	8003214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fb0f 	bl	8003358 <UART_CheckIdleState>
 8002d3a:	4603      	mov	r3, r0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	f040 8082 	bne.w	8002e62 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_UART_Transmit+0x26>
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07a      	b.n	8002e64 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_UART_Transmit+0x38>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e073      	b.n	8002e64 <HAL_UART_Transmit+0x120>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2221      	movs	r2, #33	; 0x21
 8002d90:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d92:	f7fd fe79 	bl	8000a88 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db0:	d108      	bne.n	8002dc4 <HAL_UART_Transmit+0x80>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002dd4:	e02d      	b.n	8002e32 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fb02 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e039      	b.n	8002e64 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e02:	b292      	uxth	r2, r2
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e008      	b.n	8002e20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b292      	uxth	r2, r2
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1cb      	bne.n	8002dd6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2140      	movs	r1, #64	; 0x40
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 face 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e005      	b.n	8002e64 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e9a:	f023 030c 	bic.w	r3, r3, #12
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	6979      	ldr	r1, [r7, #20]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4aae      	ldr	r2, [pc, #696]	; (80031a0 <UART_SetConfig+0x334>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d120      	bne.n	8002f2e <UART_SetConfig+0xc2>
 8002eec:	4bad      	ldr	r3, [pc, #692]	; (80031a4 <UART_SetConfig+0x338>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d817      	bhi.n	8002f28 <UART_SetConfig+0xbc>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <UART_SetConfig+0x94>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f23 	.word	0x08002f23
 8002f0c:	08002f17 	.word	0x08002f17
 8002f10:	2301      	movs	r3, #1
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e0b5      	b.n	8003082 <UART_SetConfig+0x216>
 8002f16:	2302      	movs	r3, #2
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e0b2      	b.n	8003082 <UART_SetConfig+0x216>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e0af      	b.n	8003082 <UART_SetConfig+0x216>
 8002f22:	2308      	movs	r3, #8
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e0ac      	b.n	8003082 <UART_SetConfig+0x216>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e0a9      	b.n	8003082 <UART_SetConfig+0x216>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a9d      	ldr	r2, [pc, #628]	; (80031a8 <UART_SetConfig+0x33c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d124      	bne.n	8002f82 <UART_SetConfig+0x116>
 8002f38:	4b9a      	ldr	r3, [pc, #616]	; (80031a4 <UART_SetConfig+0x338>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f44:	d011      	beq.n	8002f6a <UART_SetConfig+0xfe>
 8002f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f4a:	d817      	bhi.n	8002f7c <UART_SetConfig+0x110>
 8002f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f50:	d011      	beq.n	8002f76 <UART_SetConfig+0x10a>
 8002f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f56:	d811      	bhi.n	8002f7c <UART_SetConfig+0x110>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <UART_SetConfig+0xf8>
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d006      	beq.n	8002f70 <UART_SetConfig+0x104>
 8002f62:	e00b      	b.n	8002f7c <UART_SetConfig+0x110>
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e08b      	b.n	8003082 <UART_SetConfig+0x216>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e088      	b.n	8003082 <UART_SetConfig+0x216>
 8002f70:	2304      	movs	r3, #4
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e085      	b.n	8003082 <UART_SetConfig+0x216>
 8002f76:	2308      	movs	r3, #8
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e082      	b.n	8003082 <UART_SetConfig+0x216>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e07f      	b.n	8003082 <UART_SetConfig+0x216>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a89      	ldr	r2, [pc, #548]	; (80031ac <UART_SetConfig+0x340>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d124      	bne.n	8002fd6 <UART_SetConfig+0x16a>
 8002f8c:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <UART_SetConfig+0x338>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f98:	d011      	beq.n	8002fbe <UART_SetConfig+0x152>
 8002f9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f9e:	d817      	bhi.n	8002fd0 <UART_SetConfig+0x164>
 8002fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fa4:	d011      	beq.n	8002fca <UART_SetConfig+0x15e>
 8002fa6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002faa:	d811      	bhi.n	8002fd0 <UART_SetConfig+0x164>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <UART_SetConfig+0x14c>
 8002fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb4:	d006      	beq.n	8002fc4 <UART_SetConfig+0x158>
 8002fb6:	e00b      	b.n	8002fd0 <UART_SetConfig+0x164>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e061      	b.n	8003082 <UART_SetConfig+0x216>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e05e      	b.n	8003082 <UART_SetConfig+0x216>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e05b      	b.n	8003082 <UART_SetConfig+0x216>
 8002fca:	2308      	movs	r3, #8
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e058      	b.n	8003082 <UART_SetConfig+0x216>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e055      	b.n	8003082 <UART_SetConfig+0x216>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <UART_SetConfig+0x344>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d124      	bne.n	800302a <UART_SetConfig+0x1be>
 8002fe0:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <UART_SetConfig+0x338>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fec:	d011      	beq.n	8003012 <UART_SetConfig+0x1a6>
 8002fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x1b8>
 8002ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff8:	d011      	beq.n	800301e <UART_SetConfig+0x1b2>
 8002ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x1b8>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x1a0>
 8003004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x1ac>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x1b8>
 800300c:	2300      	movs	r3, #0
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e037      	b.n	8003082 <UART_SetConfig+0x216>
 8003012:	2302      	movs	r3, #2
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e034      	b.n	8003082 <UART_SetConfig+0x216>
 8003018:	2304      	movs	r3, #4
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e031      	b.n	8003082 <UART_SetConfig+0x216>
 800301e:	2308      	movs	r3, #8
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e02e      	b.n	8003082 <UART_SetConfig+0x216>
 8003024:	2310      	movs	r3, #16
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e02b      	b.n	8003082 <UART_SetConfig+0x216>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <UART_SetConfig+0x348>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d124      	bne.n	800307e <UART_SetConfig+0x212>
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <UART_SetConfig+0x338>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800303c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003040:	d011      	beq.n	8003066 <UART_SetConfig+0x1fa>
 8003042:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003046:	d817      	bhi.n	8003078 <UART_SetConfig+0x20c>
 8003048:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800304c:	d011      	beq.n	8003072 <UART_SetConfig+0x206>
 800304e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003052:	d811      	bhi.n	8003078 <UART_SetConfig+0x20c>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <UART_SetConfig+0x1f4>
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d006      	beq.n	800306c <UART_SetConfig+0x200>
 800305e:	e00b      	b.n	8003078 <UART_SetConfig+0x20c>
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e00d      	b.n	8003082 <UART_SetConfig+0x216>
 8003066:	2302      	movs	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e00a      	b.n	8003082 <UART_SetConfig+0x216>
 800306c:	2304      	movs	r3, #4
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e007      	b.n	8003082 <UART_SetConfig+0x216>
 8003072:	2308      	movs	r3, #8
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e004      	b.n	8003082 <UART_SetConfig+0x216>
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e001      	b.n	8003082 <UART_SetConfig+0x216>
 800307e:	2310      	movs	r3, #16
 8003080:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308a:	d15c      	bne.n	8003146 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800308c:	7ffb      	ldrb	r3, [r7, #31]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d827      	bhi.n	80030e2 <UART_SetConfig+0x276>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x22c>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030c5 	.word	0x080030c5
 80030a0:	080030cd 	.word	0x080030cd
 80030a4:	080030e3 	.word	0x080030e3
 80030a8:	080030d3 	.word	0x080030d3
 80030ac:	080030e3 	.word	0x080030e3
 80030b0:	080030e3 	.word	0x080030e3
 80030b4:	080030e3 	.word	0x080030e3
 80030b8:	080030db 	.word	0x080030db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030bc:	f7ff f89a 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 80030c0:	61b8      	str	r0, [r7, #24]
        break;
 80030c2:	e013      	b.n	80030ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c4:	f7ff f8b8 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 80030c8:	61b8      	str	r0, [r7, #24]
        break;
 80030ca:	e00f      	b.n	80030ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <UART_SetConfig+0x34c>)
 80030ce:	61bb      	str	r3, [r7, #24]
        break;
 80030d0:	e00c      	b.n	80030ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d2:	f7ff f819 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80030d6:	61b8      	str	r0, [r7, #24]
        break;
 80030d8:	e008      	b.n	80030ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030de:	61bb      	str	r3, [r7, #24]
        break;
 80030e0:	e004      	b.n	80030ec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	77bb      	strb	r3, [r7, #30]
        break;
 80030ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8085 	beq.w	80031fe <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	005a      	lsls	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	441a      	add	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	b29b      	uxth	r3, r3
 800310a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	d916      	bls.n	8003140 <UART_SetConfig+0x2d4>
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d212      	bcs.n	8003140 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f023 030f 	bic.w	r3, r3, #15
 8003122:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	b29b      	uxth	r3, r3
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	b29a      	uxth	r2, r3
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	4313      	orrs	r3, r2
 8003134:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	89fa      	ldrh	r2, [r7, #14]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	e05e      	b.n	80031fe <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	77bb      	strb	r3, [r7, #30]
 8003144:	e05b      	b.n	80031fe <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003146:	7ffb      	ldrb	r3, [r7, #31]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d837      	bhi.n	80031bc <UART_SetConfig+0x350>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <UART_SetConfig+0x2e8>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003179 	.word	0x08003179
 8003158:	08003181 	.word	0x08003181
 800315c:	08003189 	.word	0x08003189
 8003160:	080031bd 	.word	0x080031bd
 8003164:	0800318f 	.word	0x0800318f
 8003168:	080031bd 	.word	0x080031bd
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031bd 	.word	0x080031bd
 8003174:	08003197 	.word	0x08003197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003178:	f7ff f83c 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 800317c:	61b8      	str	r0, [r7, #24]
        break;
 800317e:	e022      	b.n	80031c6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003180:	f7ff f85a 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8003184:	61b8      	str	r0, [r7, #24]
        break;
 8003186:	e01e      	b.n	80031c6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <UART_SetConfig+0x34c>)
 800318a:	61bb      	str	r3, [r7, #24]
        break;
 800318c:	e01b      	b.n	80031c6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318e:	f7fe ffbb 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 8003192:	61b8      	str	r0, [r7, #24]
        break;
 8003194:	e017      	b.n	80031c6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319a:	61bb      	str	r3, [r7, #24]
        break;
 800319c:	e013      	b.n	80031c6 <UART_SetConfig+0x35a>
 800319e:	bf00      	nop
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	40004c00 	.word	0x40004c00
 80031b4:	40005000 	.word	0x40005000
 80031b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	77bb      	strb	r3, [r7, #30]
        break;
 80031c4:	bf00      	nop
    }

    if (pclk != 0U)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d018      	beq.n	80031fe <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	085a      	lsrs	r2, r3, #1
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	b29b      	uxth	r3, r3
 80031e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b0f      	cmp	r3, #15
 80031e6:	d908      	bls.n	80031fa <UART_SetConfig+0x38e>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d204      	bcs.n	80031fa <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	e001      	b.n	80031fe <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800320a:	7fbb      	ldrb	r3, [r7, #30]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01a      	beq.n	800332a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003312:	d10a      	bne.n	800332a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003368:	f7fd fb8e 	bl	8000a88 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d10e      	bne.n	800339a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f82d 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e023      	b.n	80033e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d10e      	bne.n	80033c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f817 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e00d      	b.n	80033e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4613      	mov	r3, r2
 80033f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	e05e      	b.n	80034ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d05a      	beq.n	80034ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fd fb40 	bl	8000a88 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <UART_WaitOnFlagUntilTimeout+0x30>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11b      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003428:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e043      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d02c      	beq.n	80034ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346e:	d124      	bne.n	80034ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e00f      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d091      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <load64>:
}

#define ARR_SIZE(a) (sizeof((a))/sizeof((a[0])))
#define LOTR64(x,n) (((x)<<(n))|((x)>>(64-(n))))

void load64(u64* x, u8* S) {
 80034e2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
	int i;
	*x = 0;
 80034ee:	687c      	ldr	r4, [r7, #4]
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	e9c4 0100 	strd	r0, r1, [r4]
	for (i = 0; i < 8; ++i)
 80034fc:	2100      	movs	r1, #0
 80034fe:	60f9      	str	r1, [r7, #12]
 8003500:	e023      	b.n	800354a <load64+0x68>
		*x |= ((u64)S[i]) << i * 8;
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	4401      	add	r1, r0
 800350e:	7809      	ldrb	r1, [r1, #0]
 8003510:	b2c8      	uxtb	r0, r1
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	68fc      	ldr	r4, [r7, #12]
 8003518:	00e4      	lsls	r4, r4, #3
 800351a:	f1a4 0620 	sub.w	r6, r4, #32
 800351e:	f1c4 0520 	rsb	r5, r4, #32
 8003522:	fa01 f304 	lsl.w	r3, r1, r4
 8003526:	fa00 f606 	lsl.w	r6, r0, r6
 800352a:	4333      	orrs	r3, r6
 800352c:	fa20 f505 	lsr.w	r5, r0, r5
 8003530:	432b      	orrs	r3, r5
 8003532:	fa00 f204 	lsl.w	r2, r0, r4
 8003536:	ea4a 0802 	orr.w	r8, sl, r2
 800353a:	ea4b 0903 	orr.w	r9, fp, r3
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	e9c1 8900 	strd	r8, r9, [r1]
	for (i = 0; i < 8; ++i)
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	3101      	adds	r1, #1
 8003548:	60f9      	str	r1, [r7, #12]
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	2907      	cmp	r1, #7
 800354e:	ddd8      	ble.n	8003502 <load64+0x20>
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800355c:	4770      	bx	lr

0800355e <store64>:

void store64(u8* S, u64 x) {
 800355e:	b4f0      	push	{r4, r5, r6, r7}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	e9c7 2300 	strd	r2, r3, [r7]
	int i;
	for (i = 0; i < 8; ++i)
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e019      	b.n	80035a4 <store64+0x46>
		S[i] = (u8)(x >> i * 8);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	00d9      	lsls	r1, r3, #3
 8003574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003578:	f1c1 0620 	rsb	r6, r1, #32
 800357c:	f1a1 0020 	sub.w	r0, r1, #32
 8003580:	fa22 f401 	lsr.w	r4, r2, r1
 8003584:	fa03 f606 	lsl.w	r6, r3, r6
 8003588:	4334      	orrs	r4, r6
 800358a:	fa23 f000 	lsr.w	r0, r3, r0
 800358e:	4304      	orrs	r4, r0
 8003590:	fa23 f501 	lsr.w	r5, r3, r1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	b2e2      	uxtb	r2, r4
 800359c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; ++i)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	dde2      	ble.n	8003570 <store64+0x12>
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bcf0      	pop	{r4, r5, r6, r7}
 80035b4:	4770      	bx	lr

080035b6 <permutation256>:

void permutation256(u8* S, int rounds, u8 *c) {
 80035b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ba:	b0c1      	sub	sp, #260	; 0x104
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6778      	str	r0, [r7, #116]	; 0x74
 80035c0:	6739      	str	r1, [r7, #112]	; 0x70
 80035c2:	66fa      	str	r2, [r7, #108]	; 0x6c

	int i;
	u64 x0, x1, x2, x3, x4, x5, x6, x7;
	u64 t1, t2, t3, t5, t6, t8, t9, t11;

	load64(&x0, S + 0);
 80035c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff89 	bl	80034e2 <load64>
	load64(&x1, S + 8);
 80035d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d2:	f103 0208 	add.w	r2, r3, #8
 80035d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff80 	bl	80034e2 <load64>
	load64(&x2, S + 16);
 80035e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e4:	f103 0210 	add.w	r2, r3, #16
 80035e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff77 	bl	80034e2 <load64>
	load64(&x3, S + 24);
 80035f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f6:	f103 0218 	add.w	r2, r3, #24
 80035fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff6e 	bl	80034e2 <load64>
	for (i = 0; i < rounds; ++i) {
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800360c:	e0ea      	b.n	80037e4 <permutation256+0x22e>
		// addition of round constant
		x0 ^= c[i];
 800360e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	4413      	add	r3, r2
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2d8      	uxtb	r0, r3
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003622:	ea80 0602 	eor.w	r6, r0, r2
 8003626:	663e      	str	r6, [r7, #96]	; 0x60
 8003628:	404b      	eors	r3, r1
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
 800362c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003630:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		// substitution layer
		sbox(x0, x1, x2, x3, x4, x5, x6, x7);
 8003634:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003638:	43d1      	mvns	r1, r2
 800363a:	65b9      	str	r1, [r7, #88]	; 0x58
 800363c:	43db      	mvns	r3, r3
 800363e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003644:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8003648:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800364c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003650:	ea02 0600 	and.w	r6, r2, r0
 8003654:	653e      	str	r6, [r7, #80]	; 0x50
 8003656:	400b      	ands	r3, r1
 8003658:	657b      	str	r3, [r7, #84]	; 0x54
 800365a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800365e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8003662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003666:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800366a:	ea82 0600 	eor.w	r6, r2, r0
 800366e:	64be      	str	r6, [r7, #72]	; 0x48
 8003670:	404b      	eors	r3, r1
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003678:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800367c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003680:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8003684:	ea82 0600 	eor.w	r6, r2, r0
 8003688:	643e      	str	r6, [r7, #64]	; 0x40
 800368a:	404b      	eors	r3, r1
 800368c:	647b      	str	r3, [r7, #68]	; 0x44
 800368e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003692:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8003696:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800369a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800369e:	ea40 0602 	orr.w	r6, r0, r2
 80036a2:	63be      	str	r6, [r7, #56]	; 0x38
 80036a4:	430b      	orrs	r3, r1
 80036a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036ac:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 80036b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036b4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80036b8:	ea82 0600 	eor.w	r6, r2, r0
 80036bc:	633e      	str	r6, [r7, #48]	; 0x30
 80036be:	404b      	eors	r3, r1
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036c6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
 80036ca:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80036ce:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80036d2:	ea80 0602 	eor.w	r6, r0, r2
 80036d6:	62be      	str	r6, [r7, #40]	; 0x28
 80036d8:	404b      	eors	r3, r1
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036e0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 80036e4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80036e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80036ec:	ea80 0602 	eor.w	r6, r0, r2
 80036f0:	623e      	str	r6, [r7, #32]
 80036f2:	404b      	eors	r3, r1
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fa:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 80036fe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003702:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003706:	ea00 0602 	and.w	r6, r0, r2
 800370a:	61be      	str	r6, [r7, #24]
 800370c:	400b      	ands	r3, r1
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003714:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 8003718:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800371c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003720:	ea80 0602 	eor.w	r6, r0, r2
 8003724:	613e      	str	r6, [r7, #16]
 8003726:	404b      	eors	r3, r1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800372e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8003732:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003736:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800373a:	ea00 0602 	and.w	r6, r0, r2
 800373e:	60be      	str	r6, [r7, #8]
 8003740:	400b      	ands	r3, r1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003748:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 800374c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003750:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003754:	ea80 0602 	eor.w	r6, r0, r2
 8003758:	603e      	str	r6, [r7, #0]
 800375a:	404b      	eors	r3, r1
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003762:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		// linear diffusion layer
		x0 = x4;
 8003766:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800376a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
		x1 = LOTR64(x5, 1);
 800376e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003772:	0fda      	lsrs	r2, r3, #31
 8003774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	ea42 0b03 	orr.w	fp, r2, r3
 800377e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003782:	0fda      	lsrs	r2, r3, #31
 8003784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	ea42 0a03 	orr.w	sl, r2, r3
 800378e:	e9c7 ab22 	strd	sl, fp, [r7, #136]	; 0x88
		x2 = LOTR64(x6, 8);
 8003792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003796:	0e1a      	lsrs	r2, r3, #24
 8003798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	ea42 0903 	orr.w	r9, r2, r3
 80037a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a6:	0e1a      	lsrs	r2, r3, #24
 80037a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	ea42 0803 	orr.w	r8, r2, r3
 80037b2:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
		x3 = LOTR64(x7, 25);
 80037b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ba:	09da      	lsrs	r2, r3, #7
 80037bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c0:	065b      	lsls	r3, r3, #25
 80037c2:	ea42 0503 	orr.w	r5, r2, r3
 80037c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ca:	09da      	lsrs	r2, r3, #7
 80037cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d0:	065b      	lsls	r3, r3, #25
 80037d2:	ea42 0403 	orr.w	r4, r2, r3
 80037d6:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
	for (i = 0; i < rounds; ++i) {
 80037da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037de:	3301      	adds	r3, #1
 80037e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037e4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80037e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ea:	429a      	cmp	r2, r3
 80037ec:	f6ff af0f 	blt.w	800360e <permutation256+0x58>
	}
	store64(S + 0, x0);
 80037f0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80037f4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80037f6:	f7ff feb2 	bl	800355e <store64>
	store64(S + 8, x1);
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	f103 0108 	add.w	r1, r3, #8
 8003800:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003804:	4608      	mov	r0, r1
 8003806:	f7ff feaa 	bl	800355e <store64>
	store64(S + 16, x2);
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	f103 0110 	add.w	r1, r3, #16
 8003810:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003814:	4608      	mov	r0, r1
 8003816:	f7ff fea2 	bl	800355e <store64>
	store64(S + 24, x3);
 800381a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381c:	f103 0118 	add.w	r1, r3, #24
 8003820:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003824:	4608      	mov	r0, r1
 8003826:	f7ff fe9a 	bl	800355e <store64>
}
 800382a:	bf00      	nop
 800382c:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003838 <crypto_hash>:
		0x69, 0x52, 0x25, 0x4b, 0x17, 0x2e, 0x5d, 0x3b, 0x77, 0x6e, 0x5c, 0x39,
		0x73, 0x66, 0x4c, 0x19, 0x32, 0x65, 0x4a, 0x15, 0x2a, 0x55, 0x2b, 0x57,
		0x2f, 0x5f, 0x3f, 0x7f, 0x7e, 0x7c, 0x78, 0x70, 0x60, 0x40 };

int crypto_hash(unsigned char *out, const unsigned char *in,
	unsigned long long inlen) {
 8003838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383a:	b097      	sub	sp, #92	; 0x5c
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	e9c7 2300 	strd	r2, r3, [r7]
 8003846:	466b      	mov	r3, sp
 8003848:	461e      	mov	r6, r3
	int nrh = 68;
 800384a:	2344      	movs	r3, #68	; 0x44
 800384c:	64fb      	str	r3, [r7, #76]	; 0x4c
	u32 i, j;
	int b = 256,
 800384e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
		r1 = 32, r2 = 128;
 8003854:	2320      	movs	r3, #32
 8003856:	647b      	str	r3, [r7, #68]	; 0x44
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	643b      	str	r3, [r7, #64]	; 0x40
	u32 size = b / 8; //32    256=4*64=4*u64
 800385c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385e:	2b00      	cmp	r3, #0
 8003860:	da00      	bge.n	8003864 <crypto_hash+0x2c>
 8003862:	3307      	adds	r3, #7
 8003864:	10db      	asrs	r3, r3, #3
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
	u32 rate1 = r1 / 8; //4
 8003868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386a:	2b00      	cmp	r3, #0
 800386c:	da00      	bge.n	8003870 <crypto_hash+0x38>
 800386e:	3307      	adds	r3, #7
 8003870:	10db      	asrs	r3, r3, #3
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
	u32 rate2 = r2 / 8; //128/8=16
 8003874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	da00      	bge.n	800387c <crypto_hash+0x44>
 800387a:	3307      	adds	r3, #7
 800387c:	10db      	asrs	r3, r3, #3
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
	u64 v = inlen / rate1 + 1;
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	461a      	mov	r2, r3
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800388c:	f7fc fcf8 	bl	8000280 <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	1c54      	adds	r4, r2, #1
 8003896:	f143 0500 	adc.w	r5, r3, #0
 800389a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	u32 u = CRYPTO_BYTES / rate2; //32/16=2
 800389e:	2220      	movs	r2, #32
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24

	u8 M[v * rate1];
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	461a      	mov	r2, r3
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b2:	fb03 f001 	mul.w	r0, r3, r1
 80038b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b8:	fb02 f101 	mul.w	r1, r2, r1
 80038bc:	4401      	add	r1, r0
 80038be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c0:	fba0 4502 	umull	r4, r5, r0, r2
 80038c4:	194b      	adds	r3, r1, r5
 80038c6:	461d      	mov	r5, r3
 80038c8:	4623      	mov	r3, r4
 80038ca:	3b01      	subs	r3, #1
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	4623      	mov	r3, r4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	00cb      	lsls	r3, r1, #3
 80038e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80038e4:	00c2      	lsls	r2, r0, #3
 80038e6:	4623      	mov	r3, r4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	00cb      	lsls	r3, r1, #3
 80038f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80038fc:	00c2      	lsls	r2, r0, #3
 80038fe:	4623      	mov	r3, r4
 8003900:	3307      	adds	r3, #7
 8003902:	08db      	lsrs	r3, r3, #3
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	ebad 0d03 	sub.w	sp, sp, r3
 800390a:	466b      	mov	r3, sp
 800390c:	3300      	adds	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
	u8 S[size];
 8003910:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003912:	4623      	mov	r3, r4
 8003914:	3b01      	subs	r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	4620      	mov	r0, r4
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	00cb      	lsls	r3, r1, #3
 8003928:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800392c:	00c2      	lsls	r2, r0, #3
 800392e:	4620      	mov	r0, r4
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	00cb      	lsls	r3, r1, #3
 800393e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003942:	00c2      	lsls	r2, r0, #3
 8003944:	1de3      	adds	r3, r4, #7
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	ebad 0d03 	sub.w	sp, sp, r3
 800394e:	466b      	mov	r3, sp
 8003950:	3300      	adds	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
	// pad in
	for (i = 0; i < inlen; ++i)
 8003954:	2300      	movs	r3, #0
 8003956:	653b      	str	r3, [r7, #80]	; 0x50
 8003958:	e00b      	b.n	8003972 <crypto_hash+0x13a>
		M[i] = in[i];
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395e:	4413      	add	r3, r2
 8003960:	7819      	ldrb	r1, [r3, #0]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003966:	4413      	add	r3, r2
 8003968:	460a      	mov	r2, r1
 800396a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < inlen; ++i)
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	3301      	adds	r3, #1
 8003970:	653b      	str	r3, [r7, #80]	; 0x50
 8003972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003974:	4618      	mov	r0, r3
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800397e:	4299      	cmp	r1, r3
 8003980:	bf08      	it	eq
 8003982:	4290      	cmpeq	r0, r2
 8003984:	d3e9      	bcc.n	800395a <crypto_hash+0x122>
	M[inlen] = 0x01;
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4413      	add	r3, r2
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
	for (i = inlen + 1; i < v * rate1; ++i)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	653b      	str	r3, [r7, #80]	; 0x50
 8003996:	e007      	b.n	80039a8 <crypto_hash+0x170>
		M[i] = 0;
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	4413      	add	r3, r2
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
	for (i = inlen + 1; i < v * rate1; ++i)
 80039a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a4:	3301      	adds	r3, #1
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
 80039a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039aa:	4618      	mov	r0, r3
 80039ac:	f04f 0100 	mov.w	r1, #0
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80039ba:	fb03 f504 	mul.w	r5, r3, r4
 80039be:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80039c0:	fb02 f404 	mul.w	r4, r2, r4
 80039c4:	442c      	add	r4, r5
 80039c6:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80039c8:	fba5 2302 	umull	r2, r3, r5, r2
 80039cc:	441c      	add	r4, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	4299      	cmp	r1, r3
 80039d2:	bf08      	it	eq
 80039d4:	4290      	cmpeq	r0, r2
 80039d6:	d3df      	bcc.n	8003998 <crypto_hash+0x160>
	// initialization
	for (i = 0; i < size; ++i)
 80039d8:	2300      	movs	r3, #0
 80039da:	653b      	str	r3, [r7, #80]	; 0x50
 80039dc:	e007      	b.n	80039ee <crypto_hash+0x1b6>
		S[i] = 0;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e2:	4413      	add	r3, r2
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; ++i)
 80039e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ea:	3301      	adds	r3, #1
 80039ec:	653b      	str	r3, [r7, #80]	; 0x50
 80039ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3f3      	bcc.n	80039de <crypto_hash+0x1a6>

	//absorb
	for (i = 0; i < v; ++i) {
 80039f6:	2300      	movs	r3, #0
 80039f8:	653b      	str	r3, [r7, #80]	; 0x50
 80039fa:	e025      	b.n	8003a48 <crypto_hash+0x210>

		for (j = 0; j < rate1; ++j)
 80039fc:	2300      	movs	r3, #0
 80039fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003a00:	e015      	b.n	8003a2e <crypto_hash+0x1f6>
			S[j] ^= M[i * rate1 + j];
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a06:	4413      	add	r3, r2
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a0e:	fb01 f103 	mul.w	r1, r1, r3
 8003a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a14:	440b      	add	r3, r1
 8003a16:	69f9      	ldr	r1, [r7, #28]
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	4053      	eors	r3, r2
 8003a1c:	b2d9      	uxtb	r1, r3
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a22:	4413      	add	r3, r2
 8003a24:	460a      	mov	r2, r1
 8003a26:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < rate1; ++j)
 8003a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3e5      	bcc.n	8003a02 <crypto_hash+0x1ca>

		permutation256(S, nrh, constant7);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <crypto_hash+0x2b0>)
 8003a3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fdba 	bl	80035b6 <permutation256>
	for (i = 0; i < v; ++i) {
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	3301      	adds	r3, #1
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a54:	4299      	cmp	r1, r3
 8003a56:	bf08      	it	eq
 8003a58:	4290      	cmpeq	r0, r2
 8003a5a:	d3cf      	bcc.n	80039fc <crypto_hash+0x1c4>
	}

	//sequeez
	for (i = 0; i < u - 1; ++i) {
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a60:	e01f      	b.n	8003aa2 <crypto_hash+0x26a>
		for (j = 0; j < rate2; ++j) {
 8003a62:	2300      	movs	r3, #0
 8003a64:	657b      	str	r3, [r7, #84]	; 0x54
 8003a66:	e00f      	b.n	8003a88 <crypto_hash+0x250>
			out[j + i * rate2] = S[j];
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a6c:	fb02 f203 	mul.w	r2, r2, r3
 8003a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a72:	4413      	add	r3, r2
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a7c:	440a      	add	r2, r1
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < rate2; ++j) {
 8003a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a84:	3301      	adds	r3, #1
 8003a86:	657b      	str	r3, [r7, #84]	; 0x54
 8003a88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3eb      	bcc.n	8003a68 <crypto_hash+0x230>
		}
		permutation256(S, nrh, constant7);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <crypto_hash+0x2b0>)
 8003a94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fd8d 	bl	80035b6 <permutation256>
	for (i = 0; i < u - 1; ++i) {
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d3da      	bcc.n	8003a62 <crypto_hash+0x22a>
	}
	for (j = 0; j < rate2; ++j) {
 8003aac:	2300      	movs	r3, #0
 8003aae:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab0:	e00f      	b.n	8003ad2 <crypto_hash+0x29a>
		out[j + i * rate2] = S[j];
 8003ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab6:	fb02 f203 	mul.w	r2, r2, r3
 8003aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003abc:	4413      	add	r3, r2
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ac6:	440a      	add	r2, r1
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < rate2; ++j) {
 8003acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ace:	3301      	adds	r3, #1
 8003ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3eb      	bcc.n	8003ab2 <crypto_hash+0x27a>
	}
	return 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	46b5      	mov	sp, r6
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	375c      	adds	r7, #92	; 0x5c
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2000000c 	.word	0x2000000c

08003aec <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0

	int ret = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 8003af6:	f000 f961 	bl	8003dbc <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8003afa:	f000 f901 	bl	8003d00 <tick_msr_start>
	tick_msr_end();
 8003afe:	f000 f919 	bl	8003d34 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <genkat_benchmark_hash_aead+0x70>)
 8003b04:	4916      	ldr	r1, [pc, #88]	; (8003b60 <genkat_benchmark_hash_aead+0x74>)
 8003b06:	4817      	ldr	r0, [pc, #92]	; (8003b64 <genkat_benchmark_hash_aead+0x78>)
 8003b08:	f000 f936 	bl	8003d78 <lwc_printf>
	lwc_printf("Memory usage: ");
 8003b0c:	4816      	ldr	r0, [pc, #88]	; (8003b68 <genkat_benchmark_hash_aead+0x7c>)
 8003b0e:	f000 f933 	bl	8003d78 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003b12:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <genkat_benchmark_hash_aead+0x80>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <genkat_benchmark_hash_aead+0x80>)
 8003b18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4814      	ldr	r0, [pc, #80]	; (8003b70 <genkat_benchmark_hash_aead+0x84>)
 8003b1e:	f000 f92b 	bl	8003d78 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <genkat_benchmark_hash_aead+0x80>)
 8003b24:	6a19      	ldr	r1, [r3, #32]
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <genkat_benchmark_hash_aead+0x80>)
 8003b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <genkat_benchmark_hash_aead+0x80>)
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	4811      	ldr	r0, [pc, #68]	; (8003b74 <genkat_benchmark_hash_aead+0x88>)
 8003b30:	f000 f922 	bl	8003d78 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b38:	2100      	movs	r1, #0
 8003b3a:	480f      	ldr	r0, [pc, #60]	; (8003b78 <genkat_benchmark_hash_aead+0x8c>)
 8003b3c:	f000 f9c0 	bl	8003ec0 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8003b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b44:	2100      	movs	r1, #0
 8003b46:	480d      	ldr	r0, [pc, #52]	; (8003b7c <genkat_benchmark_hash_aead+0x90>)
 8003b48:	f000 f9ba 	bl	8003ec0 <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 8003b4c:	f000 f818 	bl	8003b80 <hash_generate_test_vectors>
 8003b50:	6078      	str	r0, [r7, #4]
#endif

	return ret;
 8003b52:	687b      	ldr	r3, [r7, #4]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	08004854 	.word	0x08004854
 8003b60:	080048d4 	.word	0x080048d4
 8003b64:	08004744 	.word	0x08004744
 8003b68:	0800478c 	.word	0x0800478c
 8003b6c:	200005fc 	.word	0x200005fc
 8003b70:	0800479c 	.word	0x0800479c
 8003b74:	080047c4 	.word	0x080047c4
 8003b78:	20000118 	.word	0x20000118
 8003b7c:	20000218 	.word	0x20000218

08003b80 <hash_generate_test_vectors>:
#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024


int hash_generate_test_vectors(){
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8003b86:	af00      	add	r7, sp, #0


	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

	init_buffer(msg, sizeof(msg));
 8003b8e:	f107 0120 	add.w	r1, r7, #32
 8003b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	f000 f874 	bl	8003c88 <init_buffer>


	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8003bac:	e9c1 2300 	strd	r2, r3, [r1]
 8003bb0:	e04b      	b.n	8003c4a <hash_generate_test_vectors+0xca>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8003bb2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	482d      	ldr	r0, [pc, #180]	; (8003c70 <hash_generate_test_vectors+0xf0>)
 8003bba:	f000 f8dd 	bl	8003d78 <lwc_printf>

		tick_msr_start();
 8003bbe:	f000 f89f 	bl	8003d00 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 8003bc2:	f107 0120 	add.w	r1, r7, #32
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7ff fe32 	bl	8003838 <crypto_hash>
 8003bd4:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
#else
		ret_val = 0;
#endif
		tick_msr_end();
 8003bd8:	f000 f8ac 	bl	8003d34 <tick_msr_end>

		aead_enc_ticks_res[aead_enc_dec_pos++] = gb_tick_cnt;
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <hash_generate_test_vectors+0xf4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	4924      	ldr	r1, [pc, #144]	; (8003c74 <hash_generate_test_vectors+0xf4>)
 8003be4:	600a      	str	r2, [r1, #0]
 8003be6:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <hash_generate_test_vectors+0xf8>)
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	4924      	ldr	r1, [pc, #144]	; (8003c7c <hash_generate_test_vectors+0xfc>)
 8003bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(ret_val == 0) {
 8003bf0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d110      	bne.n	8003c1a <hash_generate_test_vectors+0x9a>
			lwc_printf( "hash:%8lu us:%8lu ms:%8lu \n", gb_tick_cnt, gb_tick_cnt/16, gb_ms_ticks);
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <hash_generate_test_vectors+0xf8>)
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <hash_generate_test_vectors+0xf8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	091a      	lsrs	r2, r3, #4
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <hash_generate_test_vectors+0x100>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	481f      	ldr	r0, [pc, #124]	; (8003c84 <hash_generate_test_vectors+0x104>)
 8003c08:	f000 f8b6 	bl	8003d78 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8003c0c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d10d      	bne.n	8003c34 <hash_generate_test_vectors+0xb4>
 8003c18:	e004      	b.n	8003c24 <hash_generate_test_vectors+0xa4>
			ret_val = KAT_CRYPTO_FAILURE;
 8003c1a:	f06f 0303 	mvn.w	r3, #3
 8003c1e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			break;
 8003c22:	e01e      	b.n	8003c62 <hash_generate_test_vectors+0xe2>
			mlen = 4;
 8003c24:	f04f 0204 	mov.w	r2, #4
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8003c30:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003c34:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	1894      	adds	r4, r2, r2
 8003c3e:	eb43 0503 	adc.w	r5, r3, r3
 8003c42:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c46:	e9c3 4500 	strd	r4, r5, [r3]
 8003c4a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	bf08      	it	eq
 8003c5e:	4290      	cmpeq	r0, r2
 8003c60:	d2a7      	bcs.n	8003bb2 <hash_generate_test_vectors+0x32>
		}
	}//end of for loop

	return ret_val;
 8003c62:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	080047f0 	.word	0x080047f0
 8003c74:	20000318 	.word	0x20000318
 8003c78:	20000110 	.word	0x20000110
 8003c7c:	20000118 	.word	0x20000118
 8003c80:	20000114 	.word	0x20000114
 8003c84:	08004800 	.word	0x08004800

08003c88 <init_buffer>:

#endif

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8003c88:	b4b0      	push	{r4, r5, r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003ca0:	e00d      	b.n	8003cbe <init_buffer+0x36>
		buffer[i] = (unsigned char) i + '0';
 8003ca2:	7c3a      	ldrb	r2, [r7, #16]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	440b      	add	r3, r1
 8003caa:	3230      	adds	r2, #48	; 0x30
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003cb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cb4:	1c54      	adds	r4, r2, #1
 8003cb6:	f143 0500 	adc.w	r5, r3, #0
 8003cba:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003cbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc6:	4299      	cmp	r1, r3
 8003cc8:	bf08      	it	eq
 8003cca:	4290      	cmpeq	r0, r2
 8003ccc:	d3e9      	bcc.n	8003ca2 <init_buffer+0x1a>
	}
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bcb0      	pop	{r4, r5, r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cec:	6013      	str	r3, [r2, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	2000031c 	.word	0x2000031c

08003d00 <tick_msr_start>:

void tick_msr_start(void) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <tick_msr_start+0x28>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <tick_msr_start+0x2c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8003d12:	f7fc feb9 	bl	8000a88 <HAL_GetTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <tick_msr_start+0x30>)
 8003d1a:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8003d1c:	4803      	ldr	r0, [pc, #12]	; (8003d2c <tick_msr_start+0x2c>)
 8003d1e:	f7fe fcb5 	bl	800268c <HAL_TIM_Base_Start_IT>
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000031c 	.word	0x2000031c
 8003d2c:	200005ac 	.word	0x200005ac
 8003d30:	20000114 	.word	0x20000114

08003d34 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 8003d38:	480b      	ldr	r0, [pc, #44]	; (8003d68 <tick_msr_end+0x34>)
 8003d3a:	f7fe fd11 	bl	8002760 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <tick_msr_end+0x38>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	041a      	lsls	r2, r3, #16
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <tick_msr_end+0x34>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <tick_msr_end+0x3c>)
 8003d4e:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8003d50:	f7fc fe9a 	bl	8000a88 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <tick_msr_end+0x40>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <tick_msr_end+0x40>)
 8003d5e:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <tick_msr_end+0x3c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200005ac 	.word	0x200005ac
 8003d6c:	2000031c 	.word	0x2000031c
 8003d70:	20000110 	.word	0x20000110
 8003d74:	20000114 	.word	0x20000114

08003d78 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003d78:	b40f      	push	{r0, r1, r2, r3}
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6939      	ldr	r1, [r7, #16]
 8003d8a:	480a      	ldr	r0, [pc, #40]	; (8003db4 <lwc_printf+0x3c>)
 8003d8c:	f000 f8b6 	bl	8003efc <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8003d90:	4808      	ldr	r0, [pc, #32]	; (8003db4 <lwc_printf+0x3c>)
 8003d92:	f7fc fa1d 	bl	80001d0 <strlen>
 8003d96:	4603      	mov	r3, r0
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	2364      	movs	r3, #100	; 0x64
 8003d9c:	4905      	ldr	r1, [pc, #20]	; (8003db4 <lwc_printf+0x3c>)
 8003d9e:	4806      	ldr	r0, [pc, #24]	; (8003db8 <lwc_printf+0x40>)
 8003da0:	f7fe ffd0 	bl	8002d44 <HAL_UART_Transmit>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dae:	b004      	add	sp, #16
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000320 	.word	0x20000320
 8003db8:	20000528 	.word	0x20000528

08003dbc <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8003dc0:	2234      	movs	r2, #52	; 0x34
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4822      	ldr	r0, [pc, #136]	; (8003e50 <get_memory_usage+0x94>)
 8003dc6:	f000 f87b 	bl	8003ec0 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <get_memory_usage+0x94>)
 8003dcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd0:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <get_memory_usage+0x94>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <get_memory_usage+0x94>)
 8003dd8:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8003dda:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <get_memory_usage+0x98>)
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <get_memory_usage+0x94>)
 8003dde:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <get_memory_usage+0x9c>)
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <get_memory_usage+0x94>)
 8003de4:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <get_memory_usage+0xa0>)
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <get_memory_usage+0x94>)
 8003dea:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <get_memory_usage+0xa4>)
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <get_memory_usage+0x94>)
 8003df0:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <get_memory_usage+0xa8>)
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <get_memory_usage+0x94>)
 8003df6:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <get_memory_usage+0xac>)
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <get_memory_usage+0x94>)
 8003dfc:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8003dfe:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <get_memory_usage+0x94>)
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <get_memory_usage+0x94>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <get_memory_usage+0x94>)
 8003e0a:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <get_memory_usage+0x94>)
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <get_memory_usage+0x94>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <get_memory_usage+0x94>)
 8003e18:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <get_memory_usage+0x94>)
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <get_memory_usage+0x94>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <get_memory_usage+0x94>)
 8003e26:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <get_memory_usage+0x94>)
 8003e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <get_memory_usage+0x94>)
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	4413      	add	r3, r2
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <get_memory_usage+0x94>)
 8003e34:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <get_memory_usage+0x94>)
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <get_memory_usage+0x94>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	441a      	add	r2, r3
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <get_memory_usage+0x94>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	4a02      	ldr	r2, [pc, #8]	; (8003e50 <get_memory_usage+0x94>)
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200005fc 	.word	0x200005fc
 8003e54:	08004744 	.word	0x08004744
 8003e58:	200000f0 	.word	0x200000f0
 8003e5c:	20000640 	.word	0x20000640
 8003e60:	20000000 	.word	0x20000000
 8003e64:	200000f0 	.word	0x200000f0
 8003e68:	08004998 	.word	0x08004998

08003e6c <__errno>:
 8003e6c:	4b01      	ldr	r3, [pc, #4]	; (8003e74 <__errno+0x8>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	2000008c 	.word	0x2000008c

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4d0d      	ldr	r5, [pc, #52]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7c:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	2600      	movs	r6, #0
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	4d0b      	ldr	r5, [pc, #44]	; (8003eb8 <__libc_init_array+0x40>)
 8003e8a:	4c0c      	ldr	r4, [pc, #48]	; (8003ebc <__libc_init_array+0x44>)
 8003e8c:	f000 fc4e 	bl	800472c <_init>
 8003e90:	1b64      	subs	r4, r4, r5
 8003e92:	10a4      	asrs	r4, r4, #2
 8003e94:	2600      	movs	r6, #0
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08004990 	.word	0x08004990
 8003eb4:	08004990 	.word	0x08004990
 8003eb8:	08004990 	.word	0x08004990
 8003ebc:	08004994 	.word	0x08004994

08003ec0 <memset>:
 8003ec0:	4402      	add	r2, r0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <_vsiprintf_r>:
 8003ed0:	b500      	push	{lr}
 8003ed2:	b09b      	sub	sp, #108	; 0x6c
 8003ed4:	9100      	str	r1, [sp, #0]
 8003ed6:	9104      	str	r1, [sp, #16]
 8003ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003edc:	9105      	str	r1, [sp, #20]
 8003ede:	9102      	str	r1, [sp, #8]
 8003ee0:	4905      	ldr	r1, [pc, #20]	; (8003ef8 <_vsiprintf_r+0x28>)
 8003ee2:	9103      	str	r1, [sp, #12]
 8003ee4:	4669      	mov	r1, sp
 8003ee6:	f000 f86f 	bl	8003fc8 <_svfiprintf_r>
 8003eea:	9b00      	ldr	r3, [sp, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	b01b      	add	sp, #108	; 0x6c
 8003ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ef6:	bf00      	nop
 8003ef8:	ffff0208 	.word	0xffff0208

08003efc <vsiprintf>:
 8003efc:	4613      	mov	r3, r2
 8003efe:	460a      	mov	r2, r1
 8003f00:	4601      	mov	r1, r0
 8003f02:	4802      	ldr	r0, [pc, #8]	; (8003f0c <vsiprintf+0x10>)
 8003f04:	6800      	ldr	r0, [r0, #0]
 8003f06:	f7ff bfe3 	b.w	8003ed0 <_vsiprintf_r>
 8003f0a:	bf00      	nop
 8003f0c:	2000008c 	.word	0x2000008c

08003f10 <__ssputs_r>:
 8003f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	688e      	ldr	r6, [r1, #8]
 8003f16:	429e      	cmp	r6, r3
 8003f18:	4682      	mov	sl, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4690      	mov	r8, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	d838      	bhi.n	8003f94 <__ssputs_r+0x84>
 8003f22:	898a      	ldrh	r2, [r1, #12]
 8003f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f28:	d032      	beq.n	8003f90 <__ssputs_r+0x80>
 8003f2a:	6825      	ldr	r5, [r4, #0]
 8003f2c:	6909      	ldr	r1, [r1, #16]
 8003f2e:	eba5 0901 	sub.w	r9, r5, r1
 8003f32:	6965      	ldr	r5, [r4, #20]
 8003f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	444b      	add	r3, r9
 8003f40:	106d      	asrs	r5, r5, #1
 8003f42:	429d      	cmp	r5, r3
 8003f44:	bf38      	it	cc
 8003f46:	461d      	movcc	r5, r3
 8003f48:	0553      	lsls	r3, r2, #21
 8003f4a:	d531      	bpl.n	8003fb0 <__ssputs_r+0xa0>
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	f000 fb47 	bl	80045e0 <_malloc_r>
 8003f52:	4606      	mov	r6, r0
 8003f54:	b950      	cbnz	r0, 8003f6c <__ssputs_r+0x5c>
 8003f56:	230c      	movs	r3, #12
 8003f58:	f8ca 3000 	str.w	r3, [sl]
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6c:	6921      	ldr	r1, [r4, #16]
 8003f6e:	464a      	mov	r2, r9
 8003f70:	f000 fabe 	bl	80044f0 <memcpy>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	6126      	str	r6, [r4, #16]
 8003f82:	6165      	str	r5, [r4, #20]
 8003f84:	444e      	add	r6, r9
 8003f86:	eba5 0509 	sub.w	r5, r5, r9
 8003f8a:	6026      	str	r6, [r4, #0]
 8003f8c:	60a5      	str	r5, [r4, #8]
 8003f8e:	463e      	mov	r6, r7
 8003f90:	42be      	cmp	r6, r7
 8003f92:	d900      	bls.n	8003f96 <__ssputs_r+0x86>
 8003f94:	463e      	mov	r6, r7
 8003f96:	4632      	mov	r2, r6
 8003f98:	6820      	ldr	r0, [r4, #0]
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	f000 fab6 	bl	800450c <memmove>
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	1b9b      	subs	r3, r3, r6
 8003fa6:	4432      	add	r2, r6
 8003fa8:	60a3      	str	r3, [r4, #8]
 8003faa:	6022      	str	r2, [r4, #0]
 8003fac:	2000      	movs	r0, #0
 8003fae:	e7db      	b.n	8003f68 <__ssputs_r+0x58>
 8003fb0:	462a      	mov	r2, r5
 8003fb2:	f000 fb6f 	bl	8004694 <_realloc_r>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d1e1      	bne.n	8003f80 <__ssputs_r+0x70>
 8003fbc:	6921      	ldr	r1, [r4, #16]
 8003fbe:	4650      	mov	r0, sl
 8003fc0:	f000 fabe 	bl	8004540 <_free_r>
 8003fc4:	e7c7      	b.n	8003f56 <__ssputs_r+0x46>
	...

08003fc8 <_svfiprintf_r>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	4698      	mov	r8, r3
 8003fce:	898b      	ldrh	r3, [r1, #12]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	b09d      	sub	sp, #116	; 0x74
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	460d      	mov	r5, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	d50e      	bpl.n	8003ffa <_svfiprintf_r+0x32>
 8003fdc:	690b      	ldr	r3, [r1, #16]
 8003fde:	b963      	cbnz	r3, 8003ffa <_svfiprintf_r+0x32>
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	f000 fafd 	bl	80045e0 <_malloc_r>
 8003fe6:	6028      	str	r0, [r5, #0]
 8003fe8:	6128      	str	r0, [r5, #16]
 8003fea:	b920      	cbnz	r0, 8003ff6 <_svfiprintf_r+0x2e>
 8003fec:	230c      	movs	r3, #12
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	e0d1      	b.n	800419a <_svfiprintf_r+0x1d2>
 8003ff6:	2340      	movs	r3, #64	; 0x40
 8003ff8:	616b      	str	r3, [r5, #20]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffe:	2320      	movs	r3, #32
 8004000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004004:	f8cd 800c 	str.w	r8, [sp, #12]
 8004008:	2330      	movs	r3, #48	; 0x30
 800400a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041b4 <_svfiprintf_r+0x1ec>
 800400e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004012:	f04f 0901 	mov.w	r9, #1
 8004016:	4623      	mov	r3, r4
 8004018:	469a      	mov	sl, r3
 800401a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800401e:	b10a      	cbz	r2, 8004024 <_svfiprintf_r+0x5c>
 8004020:	2a25      	cmp	r2, #37	; 0x25
 8004022:	d1f9      	bne.n	8004018 <_svfiprintf_r+0x50>
 8004024:	ebba 0b04 	subs.w	fp, sl, r4
 8004028:	d00b      	beq.n	8004042 <_svfiprintf_r+0x7a>
 800402a:	465b      	mov	r3, fp
 800402c:	4622      	mov	r2, r4
 800402e:	4629      	mov	r1, r5
 8004030:	4638      	mov	r0, r7
 8004032:	f7ff ff6d 	bl	8003f10 <__ssputs_r>
 8004036:	3001      	adds	r0, #1
 8004038:	f000 80aa 	beq.w	8004190 <_svfiprintf_r+0x1c8>
 800403c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800403e:	445a      	add	r2, fp
 8004040:	9209      	str	r2, [sp, #36]	; 0x24
 8004042:	f89a 3000 	ldrb.w	r3, [sl]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a2 	beq.w	8004190 <_svfiprintf_r+0x1c8>
 800404c:	2300      	movs	r3, #0
 800404e:	f04f 32ff 	mov.w	r2, #4294967295
 8004052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004056:	f10a 0a01 	add.w	sl, sl, #1
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	9307      	str	r3, [sp, #28]
 800405e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004062:	931a      	str	r3, [sp, #104]	; 0x68
 8004064:	4654      	mov	r4, sl
 8004066:	2205      	movs	r2, #5
 8004068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406c:	4851      	ldr	r0, [pc, #324]	; (80041b4 <_svfiprintf_r+0x1ec>)
 800406e:	f7fc f8b7 	bl	80001e0 <memchr>
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	b9d8      	cbnz	r0, 80040ae <_svfiprintf_r+0xe6>
 8004076:	06d0      	lsls	r0, r2, #27
 8004078:	bf44      	itt	mi
 800407a:	2320      	movmi	r3, #32
 800407c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004080:	0711      	lsls	r1, r2, #28
 8004082:	bf44      	itt	mi
 8004084:	232b      	movmi	r3, #43	; 0x2b
 8004086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800408a:	f89a 3000 	ldrb.w	r3, [sl]
 800408e:	2b2a      	cmp	r3, #42	; 0x2a
 8004090:	d015      	beq.n	80040be <_svfiprintf_r+0xf6>
 8004092:	9a07      	ldr	r2, [sp, #28]
 8004094:	4654      	mov	r4, sl
 8004096:	2000      	movs	r0, #0
 8004098:	f04f 0c0a 	mov.w	ip, #10
 800409c:	4621      	mov	r1, r4
 800409e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040a2:	3b30      	subs	r3, #48	; 0x30
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d94e      	bls.n	8004146 <_svfiprintf_r+0x17e>
 80040a8:	b1b0      	cbz	r0, 80040d8 <_svfiprintf_r+0x110>
 80040aa:	9207      	str	r2, [sp, #28]
 80040ac:	e014      	b.n	80040d8 <_svfiprintf_r+0x110>
 80040ae:	eba0 0308 	sub.w	r3, r0, r8
 80040b2:	fa09 f303 	lsl.w	r3, r9, r3
 80040b6:	4313      	orrs	r3, r2
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	46a2      	mov	sl, r4
 80040bc:	e7d2      	b.n	8004064 <_svfiprintf_r+0x9c>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	1d19      	adds	r1, r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	9103      	str	r1, [sp, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfbb      	ittet	lt
 80040ca:	425b      	neglt	r3, r3
 80040cc:	f042 0202 	orrlt.w	r2, r2, #2
 80040d0:	9307      	strge	r3, [sp, #28]
 80040d2:	9307      	strlt	r3, [sp, #28]
 80040d4:	bfb8      	it	lt
 80040d6:	9204      	strlt	r2, [sp, #16]
 80040d8:	7823      	ldrb	r3, [r4, #0]
 80040da:	2b2e      	cmp	r3, #46	; 0x2e
 80040dc:	d10c      	bne.n	80040f8 <_svfiprintf_r+0x130>
 80040de:	7863      	ldrb	r3, [r4, #1]
 80040e0:	2b2a      	cmp	r3, #42	; 0x2a
 80040e2:	d135      	bne.n	8004150 <_svfiprintf_r+0x188>
 80040e4:	9b03      	ldr	r3, [sp, #12]
 80040e6:	1d1a      	adds	r2, r3, #4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	9203      	str	r2, [sp, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bfb8      	it	lt
 80040f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80040f4:	3402      	adds	r4, #2
 80040f6:	9305      	str	r3, [sp, #20]
 80040f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041c4 <_svfiprintf_r+0x1fc>
 80040fc:	7821      	ldrb	r1, [r4, #0]
 80040fe:	2203      	movs	r2, #3
 8004100:	4650      	mov	r0, sl
 8004102:	f7fc f86d 	bl	80001e0 <memchr>
 8004106:	b140      	cbz	r0, 800411a <_svfiprintf_r+0x152>
 8004108:	2340      	movs	r3, #64	; 0x40
 800410a:	eba0 000a 	sub.w	r0, r0, sl
 800410e:	fa03 f000 	lsl.w	r0, r3, r0
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	4303      	orrs	r3, r0
 8004116:	3401      	adds	r4, #1
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411e:	4826      	ldr	r0, [pc, #152]	; (80041b8 <_svfiprintf_r+0x1f0>)
 8004120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004124:	2206      	movs	r2, #6
 8004126:	f7fc f85b 	bl	80001e0 <memchr>
 800412a:	2800      	cmp	r0, #0
 800412c:	d038      	beq.n	80041a0 <_svfiprintf_r+0x1d8>
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <_svfiprintf_r+0x1f4>)
 8004130:	bb1b      	cbnz	r3, 800417a <_svfiprintf_r+0x1b2>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	3307      	adds	r3, #7
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	3308      	adds	r3, #8
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	4433      	add	r3, r6
 8004142:	9309      	str	r3, [sp, #36]	; 0x24
 8004144:	e767      	b.n	8004016 <_svfiprintf_r+0x4e>
 8004146:	fb0c 3202 	mla	r2, ip, r2, r3
 800414a:	460c      	mov	r4, r1
 800414c:	2001      	movs	r0, #1
 800414e:	e7a5      	b.n	800409c <_svfiprintf_r+0xd4>
 8004150:	2300      	movs	r3, #0
 8004152:	3401      	adds	r4, #1
 8004154:	9305      	str	r3, [sp, #20]
 8004156:	4619      	mov	r1, r3
 8004158:	f04f 0c0a 	mov.w	ip, #10
 800415c:	4620      	mov	r0, r4
 800415e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004162:	3a30      	subs	r2, #48	; 0x30
 8004164:	2a09      	cmp	r2, #9
 8004166:	d903      	bls.n	8004170 <_svfiprintf_r+0x1a8>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0c5      	beq.n	80040f8 <_svfiprintf_r+0x130>
 800416c:	9105      	str	r1, [sp, #20]
 800416e:	e7c3      	b.n	80040f8 <_svfiprintf_r+0x130>
 8004170:	fb0c 2101 	mla	r1, ip, r1, r2
 8004174:	4604      	mov	r4, r0
 8004176:	2301      	movs	r3, #1
 8004178:	e7f0      	b.n	800415c <_svfiprintf_r+0x194>
 800417a:	ab03      	add	r3, sp, #12
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	462a      	mov	r2, r5
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <_svfiprintf_r+0x1f8>)
 8004182:	a904      	add	r1, sp, #16
 8004184:	4638      	mov	r0, r7
 8004186:	f3af 8000 	nop.w
 800418a:	1c42      	adds	r2, r0, #1
 800418c:	4606      	mov	r6, r0
 800418e:	d1d6      	bne.n	800413e <_svfiprintf_r+0x176>
 8004190:	89ab      	ldrh	r3, [r5, #12]
 8004192:	065b      	lsls	r3, r3, #25
 8004194:	f53f af2c 	bmi.w	8003ff0 <_svfiprintf_r+0x28>
 8004198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800419a:	b01d      	add	sp, #116	; 0x74
 800419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a0:	ab03      	add	r3, sp, #12
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	462a      	mov	r2, r5
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <_svfiprintf_r+0x1f8>)
 80041a8:	a904      	add	r1, sp, #16
 80041aa:	4638      	mov	r0, r7
 80041ac:	f000 f87a 	bl	80042a4 <_printf_i>
 80041b0:	e7eb      	b.n	800418a <_svfiprintf_r+0x1c2>
 80041b2:	bf00      	nop
 80041b4:	08004954 	.word	0x08004954
 80041b8:	0800495e 	.word	0x0800495e
 80041bc:	00000000 	.word	0x00000000
 80041c0:	08003f11 	.word	0x08003f11
 80041c4:	0800495a 	.word	0x0800495a

080041c8 <_printf_common>:
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	4616      	mov	r6, r2
 80041ce:	4699      	mov	r9, r3
 80041d0:	688a      	ldr	r2, [r1, #8]
 80041d2:	690b      	ldr	r3, [r1, #16]
 80041d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d8:	4293      	cmp	r3, r2
 80041da:	bfb8      	it	lt
 80041dc:	4613      	movlt	r3, r2
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041e4:	4607      	mov	r7, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	b10a      	cbz	r2, 80041ee <_printf_common+0x26>
 80041ea:	3301      	adds	r3, #1
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	0699      	lsls	r1, r3, #26
 80041f2:	bf42      	ittt	mi
 80041f4:	6833      	ldrmi	r3, [r6, #0]
 80041f6:	3302      	addmi	r3, #2
 80041f8:	6033      	strmi	r3, [r6, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f015 0506 	ands.w	r5, r5, #6
 8004200:	d106      	bne.n	8004210 <_printf_common+0x48>
 8004202:	f104 0a19 	add.w	sl, r4, #25
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	6832      	ldr	r2, [r6, #0]
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	42ab      	cmp	r3, r5
 800420e:	dc26      	bgt.n	800425e <_printf_common+0x96>
 8004210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004214:	1e13      	subs	r3, r2, #0
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	bf18      	it	ne
 800421a:	2301      	movne	r3, #1
 800421c:	0692      	lsls	r2, r2, #26
 800421e:	d42b      	bmi.n	8004278 <_printf_common+0xb0>
 8004220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004224:	4649      	mov	r1, r9
 8004226:	4638      	mov	r0, r7
 8004228:	47c0      	blx	r8
 800422a:	3001      	adds	r0, #1
 800422c:	d01e      	beq.n	800426c <_printf_common+0xa4>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	68e5      	ldr	r5, [r4, #12]
 8004232:	6832      	ldr	r2, [r6, #0]
 8004234:	f003 0306 	and.w	r3, r3, #6
 8004238:	2b04      	cmp	r3, #4
 800423a:	bf08      	it	eq
 800423c:	1aad      	subeq	r5, r5, r2
 800423e:	68a3      	ldr	r3, [r4, #8]
 8004240:	6922      	ldr	r2, [r4, #16]
 8004242:	bf0c      	ite	eq
 8004244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004248:	2500      	movne	r5, #0
 800424a:	4293      	cmp	r3, r2
 800424c:	bfc4      	itt	gt
 800424e:	1a9b      	subgt	r3, r3, r2
 8004250:	18ed      	addgt	r5, r5, r3
 8004252:	2600      	movs	r6, #0
 8004254:	341a      	adds	r4, #26
 8004256:	42b5      	cmp	r5, r6
 8004258:	d11a      	bne.n	8004290 <_printf_common+0xc8>
 800425a:	2000      	movs	r0, #0
 800425c:	e008      	b.n	8004270 <_printf_common+0xa8>
 800425e:	2301      	movs	r3, #1
 8004260:	4652      	mov	r2, sl
 8004262:	4649      	mov	r1, r9
 8004264:	4638      	mov	r0, r7
 8004266:	47c0      	blx	r8
 8004268:	3001      	adds	r0, #1
 800426a:	d103      	bne.n	8004274 <_printf_common+0xac>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	3501      	adds	r5, #1
 8004276:	e7c6      	b.n	8004206 <_printf_common+0x3e>
 8004278:	18e1      	adds	r1, r4, r3
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	2030      	movs	r0, #48	; 0x30
 800427e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004282:	4422      	add	r2, r4
 8004284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800428c:	3302      	adds	r3, #2
 800428e:	e7c7      	b.n	8004220 <_printf_common+0x58>
 8004290:	2301      	movs	r3, #1
 8004292:	4622      	mov	r2, r4
 8004294:	4649      	mov	r1, r9
 8004296:	4638      	mov	r0, r7
 8004298:	47c0      	blx	r8
 800429a:	3001      	adds	r0, #1
 800429c:	d0e6      	beq.n	800426c <_printf_common+0xa4>
 800429e:	3601      	adds	r6, #1
 80042a0:	e7d9      	b.n	8004256 <_printf_common+0x8e>
	...

080042a4 <_printf_i>:
 80042a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	460c      	mov	r4, r1
 80042aa:	4691      	mov	r9, r2
 80042ac:	7e27      	ldrb	r7, [r4, #24]
 80042ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042b0:	2f78      	cmp	r7, #120	; 0x78
 80042b2:	4680      	mov	r8, r0
 80042b4:	469a      	mov	sl, r3
 80042b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ba:	d807      	bhi.n	80042cc <_printf_i+0x28>
 80042bc:	2f62      	cmp	r7, #98	; 0x62
 80042be:	d80a      	bhi.n	80042d6 <_printf_i+0x32>
 80042c0:	2f00      	cmp	r7, #0
 80042c2:	f000 80d8 	beq.w	8004476 <_printf_i+0x1d2>
 80042c6:	2f58      	cmp	r7, #88	; 0x58
 80042c8:	f000 80a3 	beq.w	8004412 <_printf_i+0x16e>
 80042cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042d4:	e03a      	b.n	800434c <_printf_i+0xa8>
 80042d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042da:	2b15      	cmp	r3, #21
 80042dc:	d8f6      	bhi.n	80042cc <_printf_i+0x28>
 80042de:	a001      	add	r0, pc, #4	; (adr r0, 80042e4 <_printf_i+0x40>)
 80042e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	08004351 	.word	0x08004351
 80042ec:	080042cd 	.word	0x080042cd
 80042f0:	080042cd 	.word	0x080042cd
 80042f4:	080042cd 	.word	0x080042cd
 80042f8:	080042cd 	.word	0x080042cd
 80042fc:	08004351 	.word	0x08004351
 8004300:	080042cd 	.word	0x080042cd
 8004304:	080042cd 	.word	0x080042cd
 8004308:	080042cd 	.word	0x080042cd
 800430c:	080042cd 	.word	0x080042cd
 8004310:	0800445d 	.word	0x0800445d
 8004314:	08004381 	.word	0x08004381
 8004318:	0800443f 	.word	0x0800443f
 800431c:	080042cd 	.word	0x080042cd
 8004320:	080042cd 	.word	0x080042cd
 8004324:	0800447f 	.word	0x0800447f
 8004328:	080042cd 	.word	0x080042cd
 800432c:	08004381 	.word	0x08004381
 8004330:	080042cd 	.word	0x080042cd
 8004334:	080042cd 	.word	0x080042cd
 8004338:	08004447 	.word	0x08004447
 800433c:	680b      	ldr	r3, [r1, #0]
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	600a      	str	r2, [r1, #0]
 8004344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800434c:	2301      	movs	r3, #1
 800434e:	e0a3      	b.n	8004498 <_printf_i+0x1f4>
 8004350:	6825      	ldr	r5, [r4, #0]
 8004352:	6808      	ldr	r0, [r1, #0]
 8004354:	062e      	lsls	r6, r5, #24
 8004356:	f100 0304 	add.w	r3, r0, #4
 800435a:	d50a      	bpl.n	8004372 <_printf_i+0xce>
 800435c:	6805      	ldr	r5, [r0, #0]
 800435e:	600b      	str	r3, [r1, #0]
 8004360:	2d00      	cmp	r5, #0
 8004362:	da03      	bge.n	800436c <_printf_i+0xc8>
 8004364:	232d      	movs	r3, #45	; 0x2d
 8004366:	426d      	negs	r5, r5
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436c:	485e      	ldr	r0, [pc, #376]	; (80044e8 <_printf_i+0x244>)
 800436e:	230a      	movs	r3, #10
 8004370:	e019      	b.n	80043a6 <_printf_i+0x102>
 8004372:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004376:	6805      	ldr	r5, [r0, #0]
 8004378:	600b      	str	r3, [r1, #0]
 800437a:	bf18      	it	ne
 800437c:	b22d      	sxthne	r5, r5
 800437e:	e7ef      	b.n	8004360 <_printf_i+0xbc>
 8004380:	680b      	ldr	r3, [r1, #0]
 8004382:	6825      	ldr	r5, [r4, #0]
 8004384:	1d18      	adds	r0, r3, #4
 8004386:	6008      	str	r0, [r1, #0]
 8004388:	0628      	lsls	r0, r5, #24
 800438a:	d501      	bpl.n	8004390 <_printf_i+0xec>
 800438c:	681d      	ldr	r5, [r3, #0]
 800438e:	e002      	b.n	8004396 <_printf_i+0xf2>
 8004390:	0669      	lsls	r1, r5, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0xe8>
 8004394:	881d      	ldrh	r5, [r3, #0]
 8004396:	4854      	ldr	r0, [pc, #336]	; (80044e8 <_printf_i+0x244>)
 8004398:	2f6f      	cmp	r7, #111	; 0x6f
 800439a:	bf0c      	ite	eq
 800439c:	2308      	moveq	r3, #8
 800439e:	230a      	movne	r3, #10
 80043a0:	2100      	movs	r1, #0
 80043a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043a6:	6866      	ldr	r6, [r4, #4]
 80043a8:	60a6      	str	r6, [r4, #8]
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	bfa2      	ittt	ge
 80043ae:	6821      	ldrge	r1, [r4, #0]
 80043b0:	f021 0104 	bicge.w	r1, r1, #4
 80043b4:	6021      	strge	r1, [r4, #0]
 80043b6:	b90d      	cbnz	r5, 80043bc <_printf_i+0x118>
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	d04d      	beq.n	8004458 <_printf_i+0x1b4>
 80043bc:	4616      	mov	r6, r2
 80043be:	fbb5 f1f3 	udiv	r1, r5, r3
 80043c2:	fb03 5711 	mls	r7, r3, r1, r5
 80043c6:	5dc7      	ldrb	r7, [r0, r7]
 80043c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043cc:	462f      	mov	r7, r5
 80043ce:	42bb      	cmp	r3, r7
 80043d0:	460d      	mov	r5, r1
 80043d2:	d9f4      	bls.n	80043be <_printf_i+0x11a>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10b      	bne.n	80043f0 <_printf_i+0x14c>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	07df      	lsls	r7, r3, #31
 80043dc:	d508      	bpl.n	80043f0 <_printf_i+0x14c>
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	6861      	ldr	r1, [r4, #4]
 80043e2:	4299      	cmp	r1, r3
 80043e4:	bfde      	ittt	le
 80043e6:	2330      	movle	r3, #48	; 0x30
 80043e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043f0:	1b92      	subs	r2, r2, r6
 80043f2:	6122      	str	r2, [r4, #16]
 80043f4:	f8cd a000 	str.w	sl, [sp]
 80043f8:	464b      	mov	r3, r9
 80043fa:	aa03      	add	r2, sp, #12
 80043fc:	4621      	mov	r1, r4
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff fee2 	bl	80041c8 <_printf_common>
 8004404:	3001      	adds	r0, #1
 8004406:	d14c      	bne.n	80044a2 <_printf_i+0x1fe>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	b004      	add	sp, #16
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004412:	4835      	ldr	r0, [pc, #212]	; (80044e8 <_printf_i+0x244>)
 8004414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	680e      	ldr	r6, [r1, #0]
 800441c:	061f      	lsls	r7, r3, #24
 800441e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004422:	600e      	str	r6, [r1, #0]
 8004424:	d514      	bpl.n	8004450 <_printf_i+0x1ac>
 8004426:	07d9      	lsls	r1, r3, #31
 8004428:	bf44      	itt	mi
 800442a:	f043 0320 	orrmi.w	r3, r3, #32
 800442e:	6023      	strmi	r3, [r4, #0]
 8004430:	b91d      	cbnz	r5, 800443a <_printf_i+0x196>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	f023 0320 	bic.w	r3, r3, #32
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	2310      	movs	r3, #16
 800443c:	e7b0      	b.n	80043a0 <_printf_i+0xfc>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	f043 0320 	orr.w	r3, r3, #32
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	2378      	movs	r3, #120	; 0x78
 8004448:	4828      	ldr	r0, [pc, #160]	; (80044ec <_printf_i+0x248>)
 800444a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800444e:	e7e3      	b.n	8004418 <_printf_i+0x174>
 8004450:	065e      	lsls	r6, r3, #25
 8004452:	bf48      	it	mi
 8004454:	b2ad      	uxthmi	r5, r5
 8004456:	e7e6      	b.n	8004426 <_printf_i+0x182>
 8004458:	4616      	mov	r6, r2
 800445a:	e7bb      	b.n	80043d4 <_printf_i+0x130>
 800445c:	680b      	ldr	r3, [r1, #0]
 800445e:	6826      	ldr	r6, [r4, #0]
 8004460:	6960      	ldr	r0, [r4, #20]
 8004462:	1d1d      	adds	r5, r3, #4
 8004464:	600d      	str	r5, [r1, #0]
 8004466:	0635      	lsls	r5, r6, #24
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	d501      	bpl.n	8004470 <_printf_i+0x1cc>
 800446c:	6018      	str	r0, [r3, #0]
 800446e:	e002      	b.n	8004476 <_printf_i+0x1d2>
 8004470:	0671      	lsls	r1, r6, #25
 8004472:	d5fb      	bpl.n	800446c <_printf_i+0x1c8>
 8004474:	8018      	strh	r0, [r3, #0]
 8004476:	2300      	movs	r3, #0
 8004478:	6123      	str	r3, [r4, #16]
 800447a:	4616      	mov	r6, r2
 800447c:	e7ba      	b.n	80043f4 <_printf_i+0x150>
 800447e:	680b      	ldr	r3, [r1, #0]
 8004480:	1d1a      	adds	r2, r3, #4
 8004482:	600a      	str	r2, [r1, #0]
 8004484:	681e      	ldr	r6, [r3, #0]
 8004486:	6862      	ldr	r2, [r4, #4]
 8004488:	2100      	movs	r1, #0
 800448a:	4630      	mov	r0, r6
 800448c:	f7fb fea8 	bl	80001e0 <memchr>
 8004490:	b108      	cbz	r0, 8004496 <_printf_i+0x1f2>
 8004492:	1b80      	subs	r0, r0, r6
 8004494:	6060      	str	r0, [r4, #4]
 8004496:	6863      	ldr	r3, [r4, #4]
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	2300      	movs	r3, #0
 800449c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a0:	e7a8      	b.n	80043f4 <_printf_i+0x150>
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	4632      	mov	r2, r6
 80044a6:	4649      	mov	r1, r9
 80044a8:	4640      	mov	r0, r8
 80044aa:	47d0      	blx	sl
 80044ac:	3001      	adds	r0, #1
 80044ae:	d0ab      	beq.n	8004408 <_printf_i+0x164>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	079b      	lsls	r3, r3, #30
 80044b4:	d413      	bmi.n	80044de <_printf_i+0x23a>
 80044b6:	68e0      	ldr	r0, [r4, #12]
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	4298      	cmp	r0, r3
 80044bc:	bfb8      	it	lt
 80044be:	4618      	movlt	r0, r3
 80044c0:	e7a4      	b.n	800440c <_printf_i+0x168>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4632      	mov	r2, r6
 80044c6:	4649      	mov	r1, r9
 80044c8:	4640      	mov	r0, r8
 80044ca:	47d0      	blx	sl
 80044cc:	3001      	adds	r0, #1
 80044ce:	d09b      	beq.n	8004408 <_printf_i+0x164>
 80044d0:	3501      	adds	r5, #1
 80044d2:	68e3      	ldr	r3, [r4, #12]
 80044d4:	9903      	ldr	r1, [sp, #12]
 80044d6:	1a5b      	subs	r3, r3, r1
 80044d8:	42ab      	cmp	r3, r5
 80044da:	dcf2      	bgt.n	80044c2 <_printf_i+0x21e>
 80044dc:	e7eb      	b.n	80044b6 <_printf_i+0x212>
 80044de:	2500      	movs	r5, #0
 80044e0:	f104 0619 	add.w	r6, r4, #25
 80044e4:	e7f5      	b.n	80044d2 <_printf_i+0x22e>
 80044e6:	bf00      	nop
 80044e8:	08004965 	.word	0x08004965
 80044ec:	08004976 	.word	0x08004976

080044f0 <memcpy>:
 80044f0:	440a      	add	r2, r1
 80044f2:	4291      	cmp	r1, r2
 80044f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f8:	d100      	bne.n	80044fc <memcpy+0xc>
 80044fa:	4770      	bx	lr
 80044fc:	b510      	push	{r4, lr}
 80044fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004506:	4291      	cmp	r1, r2
 8004508:	d1f9      	bne.n	80044fe <memcpy+0xe>
 800450a:	bd10      	pop	{r4, pc}

0800450c <memmove>:
 800450c:	4288      	cmp	r0, r1
 800450e:	b510      	push	{r4, lr}
 8004510:	eb01 0402 	add.w	r4, r1, r2
 8004514:	d902      	bls.n	800451c <memmove+0x10>
 8004516:	4284      	cmp	r4, r0
 8004518:	4623      	mov	r3, r4
 800451a:	d807      	bhi.n	800452c <memmove+0x20>
 800451c:	1e43      	subs	r3, r0, #1
 800451e:	42a1      	cmp	r1, r4
 8004520:	d008      	beq.n	8004534 <memmove+0x28>
 8004522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800452a:	e7f8      	b.n	800451e <memmove+0x12>
 800452c:	4402      	add	r2, r0
 800452e:	4601      	mov	r1, r0
 8004530:	428a      	cmp	r2, r1
 8004532:	d100      	bne.n	8004536 <memmove+0x2a>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800453a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800453e:	e7f7      	b.n	8004530 <memmove+0x24>

08004540 <_free_r>:
 8004540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004542:	2900      	cmp	r1, #0
 8004544:	d048      	beq.n	80045d8 <_free_r+0x98>
 8004546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800454a:	9001      	str	r0, [sp, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f1a1 0404 	sub.w	r4, r1, #4
 8004552:	bfb8      	it	lt
 8004554:	18e4      	addlt	r4, r4, r3
 8004556:	f000 f8d3 	bl	8004700 <__malloc_lock>
 800455a:	4a20      	ldr	r2, [pc, #128]	; (80045dc <_free_r+0x9c>)
 800455c:	9801      	ldr	r0, [sp, #4]
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	4615      	mov	r5, r2
 8004562:	b933      	cbnz	r3, 8004572 <_free_r+0x32>
 8004564:	6063      	str	r3, [r4, #4]
 8004566:	6014      	str	r4, [r2, #0]
 8004568:	b003      	add	sp, #12
 800456a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800456e:	f000 b8cd 	b.w	800470c <__malloc_unlock>
 8004572:	42a3      	cmp	r3, r4
 8004574:	d90b      	bls.n	800458e <_free_r+0x4e>
 8004576:	6821      	ldr	r1, [r4, #0]
 8004578:	1862      	adds	r2, r4, r1
 800457a:	4293      	cmp	r3, r2
 800457c:	bf04      	itt	eq
 800457e:	681a      	ldreq	r2, [r3, #0]
 8004580:	685b      	ldreq	r3, [r3, #4]
 8004582:	6063      	str	r3, [r4, #4]
 8004584:	bf04      	itt	eq
 8004586:	1852      	addeq	r2, r2, r1
 8004588:	6022      	streq	r2, [r4, #0]
 800458a:	602c      	str	r4, [r5, #0]
 800458c:	e7ec      	b.n	8004568 <_free_r+0x28>
 800458e:	461a      	mov	r2, r3
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	b10b      	cbz	r3, 8004598 <_free_r+0x58>
 8004594:	42a3      	cmp	r3, r4
 8004596:	d9fa      	bls.n	800458e <_free_r+0x4e>
 8004598:	6811      	ldr	r1, [r2, #0]
 800459a:	1855      	adds	r5, r2, r1
 800459c:	42a5      	cmp	r5, r4
 800459e:	d10b      	bne.n	80045b8 <_free_r+0x78>
 80045a0:	6824      	ldr	r4, [r4, #0]
 80045a2:	4421      	add	r1, r4
 80045a4:	1854      	adds	r4, r2, r1
 80045a6:	42a3      	cmp	r3, r4
 80045a8:	6011      	str	r1, [r2, #0]
 80045aa:	d1dd      	bne.n	8004568 <_free_r+0x28>
 80045ac:	681c      	ldr	r4, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	6053      	str	r3, [r2, #4]
 80045b2:	4421      	add	r1, r4
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	e7d7      	b.n	8004568 <_free_r+0x28>
 80045b8:	d902      	bls.n	80045c0 <_free_r+0x80>
 80045ba:	230c      	movs	r3, #12
 80045bc:	6003      	str	r3, [r0, #0]
 80045be:	e7d3      	b.n	8004568 <_free_r+0x28>
 80045c0:	6825      	ldr	r5, [r4, #0]
 80045c2:	1961      	adds	r1, r4, r5
 80045c4:	428b      	cmp	r3, r1
 80045c6:	bf04      	itt	eq
 80045c8:	6819      	ldreq	r1, [r3, #0]
 80045ca:	685b      	ldreq	r3, [r3, #4]
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	bf04      	itt	eq
 80045d0:	1949      	addeq	r1, r1, r5
 80045d2:	6021      	streq	r1, [r4, #0]
 80045d4:	6054      	str	r4, [r2, #4]
 80045d6:	e7c7      	b.n	8004568 <_free_r+0x28>
 80045d8:	b003      	add	sp, #12
 80045da:	bd30      	pop	{r4, r5, pc}
 80045dc:	20000520 	.word	0x20000520

080045e0 <_malloc_r>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	1ccd      	adds	r5, r1, #3
 80045e4:	f025 0503 	bic.w	r5, r5, #3
 80045e8:	3508      	adds	r5, #8
 80045ea:	2d0c      	cmp	r5, #12
 80045ec:	bf38      	it	cc
 80045ee:	250c      	movcc	r5, #12
 80045f0:	2d00      	cmp	r5, #0
 80045f2:	4606      	mov	r6, r0
 80045f4:	db01      	blt.n	80045fa <_malloc_r+0x1a>
 80045f6:	42a9      	cmp	r1, r5
 80045f8:	d903      	bls.n	8004602 <_malloc_r+0x22>
 80045fa:	230c      	movs	r3, #12
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	2000      	movs	r0, #0
 8004600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004602:	f000 f87d 	bl	8004700 <__malloc_lock>
 8004606:	4921      	ldr	r1, [pc, #132]	; (800468c <_malloc_r+0xac>)
 8004608:	680a      	ldr	r2, [r1, #0]
 800460a:	4614      	mov	r4, r2
 800460c:	b99c      	cbnz	r4, 8004636 <_malloc_r+0x56>
 800460e:	4f20      	ldr	r7, [pc, #128]	; (8004690 <_malloc_r+0xb0>)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b923      	cbnz	r3, 800461e <_malloc_r+0x3e>
 8004614:	4621      	mov	r1, r4
 8004616:	4630      	mov	r0, r6
 8004618:	f000 f862 	bl	80046e0 <_sbrk_r>
 800461c:	6038      	str	r0, [r7, #0]
 800461e:	4629      	mov	r1, r5
 8004620:	4630      	mov	r0, r6
 8004622:	f000 f85d 	bl	80046e0 <_sbrk_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d123      	bne.n	8004672 <_malloc_r+0x92>
 800462a:	230c      	movs	r3, #12
 800462c:	6033      	str	r3, [r6, #0]
 800462e:	4630      	mov	r0, r6
 8004630:	f000 f86c 	bl	800470c <__malloc_unlock>
 8004634:	e7e3      	b.n	80045fe <_malloc_r+0x1e>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	1b5b      	subs	r3, r3, r5
 800463a:	d417      	bmi.n	800466c <_malloc_r+0x8c>
 800463c:	2b0b      	cmp	r3, #11
 800463e:	d903      	bls.n	8004648 <_malloc_r+0x68>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	441c      	add	r4, r3
 8004644:	6025      	str	r5, [r4, #0]
 8004646:	e004      	b.n	8004652 <_malloc_r+0x72>
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	42a2      	cmp	r2, r4
 800464c:	bf0c      	ite	eq
 800464e:	600b      	streq	r3, [r1, #0]
 8004650:	6053      	strne	r3, [r2, #4]
 8004652:	4630      	mov	r0, r6
 8004654:	f000 f85a 	bl	800470c <__malloc_unlock>
 8004658:	f104 000b 	add.w	r0, r4, #11
 800465c:	1d23      	adds	r3, r4, #4
 800465e:	f020 0007 	bic.w	r0, r0, #7
 8004662:	1ac2      	subs	r2, r0, r3
 8004664:	d0cc      	beq.n	8004600 <_malloc_r+0x20>
 8004666:	1a1b      	subs	r3, r3, r0
 8004668:	50a3      	str	r3, [r4, r2]
 800466a:	e7c9      	b.n	8004600 <_malloc_r+0x20>
 800466c:	4622      	mov	r2, r4
 800466e:	6864      	ldr	r4, [r4, #4]
 8004670:	e7cc      	b.n	800460c <_malloc_r+0x2c>
 8004672:	1cc4      	adds	r4, r0, #3
 8004674:	f024 0403 	bic.w	r4, r4, #3
 8004678:	42a0      	cmp	r0, r4
 800467a:	d0e3      	beq.n	8004644 <_malloc_r+0x64>
 800467c:	1a21      	subs	r1, r4, r0
 800467e:	4630      	mov	r0, r6
 8004680:	f000 f82e 	bl	80046e0 <_sbrk_r>
 8004684:	3001      	adds	r0, #1
 8004686:	d1dd      	bne.n	8004644 <_malloc_r+0x64>
 8004688:	e7cf      	b.n	800462a <_malloc_r+0x4a>
 800468a:	bf00      	nop
 800468c:	20000520 	.word	0x20000520
 8004690:	20000524 	.word	0x20000524

08004694 <_realloc_r>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	4607      	mov	r7, r0
 8004698:	4614      	mov	r4, r2
 800469a:	460e      	mov	r6, r1
 800469c:	b921      	cbnz	r1, 80046a8 <_realloc_r+0x14>
 800469e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046a2:	4611      	mov	r1, r2
 80046a4:	f7ff bf9c 	b.w	80045e0 <_malloc_r>
 80046a8:	b922      	cbnz	r2, 80046b4 <_realloc_r+0x20>
 80046aa:	f7ff ff49 	bl	8004540 <_free_r>
 80046ae:	4625      	mov	r5, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b4:	f000 f830 	bl	8004718 <_malloc_usable_size_r>
 80046b8:	42a0      	cmp	r0, r4
 80046ba:	d20f      	bcs.n	80046dc <_realloc_r+0x48>
 80046bc:	4621      	mov	r1, r4
 80046be:	4638      	mov	r0, r7
 80046c0:	f7ff ff8e 	bl	80045e0 <_malloc_r>
 80046c4:	4605      	mov	r5, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d0f2      	beq.n	80046b0 <_realloc_r+0x1c>
 80046ca:	4631      	mov	r1, r6
 80046cc:	4622      	mov	r2, r4
 80046ce:	f7ff ff0f 	bl	80044f0 <memcpy>
 80046d2:	4631      	mov	r1, r6
 80046d4:	4638      	mov	r0, r7
 80046d6:	f7ff ff33 	bl	8004540 <_free_r>
 80046da:	e7e9      	b.n	80046b0 <_realloc_r+0x1c>
 80046dc:	4635      	mov	r5, r6
 80046de:	e7e7      	b.n	80046b0 <_realloc_r+0x1c>

080046e0 <_sbrk_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d06      	ldr	r5, [pc, #24]	; (80046fc <_sbrk_r+0x1c>)
 80046e4:	2300      	movs	r3, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	f7fc f900 	bl	80008f0 <_sbrk>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_sbrk_r+0x1a>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_sbrk_r+0x1a>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000630 	.word	0x20000630

08004700 <__malloc_lock>:
 8004700:	4801      	ldr	r0, [pc, #4]	; (8004708 <__malloc_lock+0x8>)
 8004702:	f000 b811 	b.w	8004728 <__retarget_lock_acquire_recursive>
 8004706:	bf00      	nop
 8004708:	20000638 	.word	0x20000638

0800470c <__malloc_unlock>:
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__malloc_unlock+0x8>)
 800470e:	f000 b80c 	b.w	800472a <__retarget_lock_release_recursive>
 8004712:	bf00      	nop
 8004714:	20000638 	.word	0x20000638

08004718 <_malloc_usable_size_r>:
 8004718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471c:	1f18      	subs	r0, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	bfbc      	itt	lt
 8004722:	580b      	ldrlt	r3, [r1, r0]
 8004724:	18c0      	addlt	r0, r0, r3
 8004726:	4770      	bx	lr

08004728 <__retarget_lock_acquire_recursive>:
 8004728:	4770      	bx	lr

0800472a <__retarget_lock_release_recursive>:
 800472a:	4770      	bx	lr

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
