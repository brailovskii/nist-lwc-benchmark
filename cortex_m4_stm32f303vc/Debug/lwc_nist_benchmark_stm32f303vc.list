
lwc_nist_benchmark_stm32f303vc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005830  08005830  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005830  08005830  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005830  08005830  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000070  080058a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080058a8  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ffa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272c  00000000  00000000  0003109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000337c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00034600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207d1  00000000  00000000  00035330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cc8  00000000  00000000  00055b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c201e  00000000  00000000  000667c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001287e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  0012883c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052bc 	.word	0x080052bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052bc 	.word	0x080052bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4907      	ldr	r1, [pc, #28]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4013      	ands	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029e:	68fb      	ldr	r3, [r7, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 faa2 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f80e 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f8c8 	bl	8000450 <MX_GPIO_Init>
  MX_TIM6_Init();
 80002c0:	f000 f860 	bl	8000384 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80002c4:	f000 f894 	bl	80003f0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 80002c8:	f003 fc9a 	bl	8003c00 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80002cc:	4801      	ldr	r0, [pc, #4]	; (80002d4 <main+0x24>)
 80002ce:	f000 fafb 	bl	80008c8 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 80002d2:	e7f9      	b.n	80002c8 <main+0x18>
 80002d4:	000f4240 	.word	0x000f4240

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09e      	sub	sp, #120	; 0x78
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002e2:	2228      	movs	r2, #40	; 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f003 fe92 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	223c      	movs	r2, #60	; 0x3c
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fe84 	bl	8004010 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	2302      	movs	r3, #2
 800030a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000310:	2310      	movs	r3, #16
 8000312:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000318:	2300      	movs	r3, #0
 800031a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800031c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000320:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fd7e 	bl	8000e28 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000332:	f000 f899 	bl	8000468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2302      	movs	r3, #2
 800033c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f001 fc71 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800035c:	f000 f884 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000360:	2301      	movs	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fe9a 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000376:	f000 f877 	bl	8000468 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3778      	adds	r7, #120	; 0x78
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_TIM6_Init+0x64>)
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <MX_TIM6_Init+0x68>)
 8000398:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_TIM6_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003b6:	f002 f825 	bl	8002404 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80003c0:	f000 f852 	bl	8000468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_TIM6_Init+0x64>)
 80003d2:	f002 fadf 	bl	8002994 <HAL_TIMEx_MasterConfigSynchronization>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80003dc:	f000 f844 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000328 	.word	0x20000328
 80003ec:	40001000 	.word	0x40001000

080003f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003f6:	4a15      	ldr	r2, [pc, #84]	; (800044c <MX_USART1_UART_Init+0x5c>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_USART1_UART_Init+0x58>)
 80003fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_USART1_UART_Init+0x58>)
 8000434:	f002 fb4c 	bl	8002ad0 <HAL_UART_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043e:	f000 f813 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200002a4 	.word	0x200002a4
 800044c:	40013800 	.word	0x40013800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000454:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000458:	f7ff ff12 	bl	8000280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800045c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000460:	f7ff ff0e 	bl	8000280 <LL_AHB1_GRP1_EnableClock>

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x44>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_MspInit+0x44>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <HAL_MspInit+0x44>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_MspInit+0x44>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_TIM_Base_MspInit+0x44>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d113      	bne.n	80004f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <HAL_TIM_Base_MspInit+0x48>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_TIM_Base_MspInit+0x48>)
 80004d4:	f043 0310 	orr.w	r3, r3, #16
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_TIM_Base_MspInit+0x48>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 0310 	and.w	r3, r3, #16
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2036      	movs	r0, #54	; 0x36
 80004ec:	f000 faeb 	bl	8000ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004f0:	2036      	movs	r0, #54	; 0x36
 80004f2:	f000 fb04 	bl	8000afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40001000 	.word	0x40001000
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <HAL_UART_MspInit+0x7c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d127      	bne.n	800057a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <HAL_UART_MspInit+0x80>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a16      	ldr	r2, [pc, #88]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_UART_MspInit+0x80>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800055a:	2330      	movs	r3, #48	; 0x30
 800055c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000566:	2303      	movs	r3, #3
 8000568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800056a:	2307      	movs	r3, #7
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <HAL_UART_MspInit+0x84>)
 8000576:	f000 fadd 	bl	8000b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	; 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40013800 	.word	0x40013800
 8000588:	40021000 	.word	0x40021000
 800058c:	48000800 	.word	0x48000800

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <NMI_Handler+0x4>

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <MemManage_Handler+0x4>

080005a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <BusFault_Handler+0x4>

080005a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <UsageFault_Handler+0x4>

080005ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 f954 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <TIM6_DAC_IRQHandler+0x10>)
 80005ea:	f001 fffc 	bl	80025e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000328 	.word	0x20000328

080005f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	return 1;
 80005fc:	2301      	movs	r3, #1
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_kill>:

int _kill(int pid, int sig)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000612:	f003 fcb3 	bl	8003f7c <__errno>
 8000616:	4603      	mov	r3, r0
 8000618:	2216      	movs	r2, #22
 800061a:	601a      	str	r2, [r3, #0]
	return -1;
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <_exit>:

void _exit (int status)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000630:	f04f 31ff 	mov.w	r1, #4294967295
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ffe7 	bl	8000608 <_kill>
	while (1) {}		/* Make sure we hang here */
 800063a:	e7fe      	b.n	800063a <_exit+0x12>

0800063c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e00a      	b.n	8000664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800064e:	f3af 8000 	nop.w
 8000652:	4601      	mov	r1, r0
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	b2ca      	uxtb	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf0      	blt.n	800064e <_read+0x12>
	}

return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	e009      	b.n	800069c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60ba      	str	r2, [r7, #8]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbf1      	blt.n	8000688 <_write+0x12>
	}
	return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_close>:

int _close(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	return -1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d6:	605a      	str	r2, [r3, #4]
	return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <_isatty>:

int _isatty(int file)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <_sbrk+0x5c>)
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <_sbrk+0x60>)
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d102      	bne.n	800073a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <_sbrk+0x64>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <_sbrk+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	429a      	cmp	r2, r3
 8000746:	d207      	bcs.n	8000758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000748:	f003 fc18 	bl	8003f7c <__errno>
 800074c:	4603      	mov	r3, r0
 800074e:	220c      	movs	r2, #12
 8000750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	e009      	b.n	800076c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <_sbrk+0x64>)
 8000768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000a000 	.word	0x2000a000
 8000778:	00000400 	.word	0x00000400
 800077c:	2000008c 	.word	0x2000008c
 8000780:	200003c0 	.word	0x200003c0

08000784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <SystemInit+0x20>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <SystemInit+0x20>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490e      	ldr	r1, [pc, #56]	; (80007e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0b      	ldr	r4, [pc, #44]	; (80007f4 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f7ff ffd7 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f003 fbe9 	bl	8003fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007da:	f7ff fd69 	bl	80002b0 <main>

080007de <LoopForever>:

LoopForever:
    b LoopForever
 80007de:	e7fe      	b.n	80007de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007ec:	08005838 	.word	0x08005838
  ldr r2, =_sbss
 80007f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007f4:	200003bc 	.word	0x200003bc

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f94f 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe2c 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f967 	bl	8000b1a <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f92f 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000374 	.word	0x20000374

080008b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000374 	.word	0x20000374

080008c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff ffee 	bl	80008b0 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffde 	bl	80008b0 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <__NVIC_EnableIRQ+0x38>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff29 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff3e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff31 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffa2 	bl	8000a6c <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	e154      	b.n	8000dee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8146 	beq.w	8000de8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d00b      	beq.n	8000b7c <HAL_GPIO_Init+0x48>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b70:	2b11      	cmp	r3, #17
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b12      	cmp	r3, #18
 8000b7a:	d130      	bne.n	8000bde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	f003 0201 	and.w	r2, r3, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0xea>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d123      	bne.n	8000c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	6939      	ldr	r1, [r7, #16]
 8000c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0203 	and.w	r2, r3, #3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 80a0 	beq.w	8000de8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <HAL_GPIO_Init+0x2d8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <HAL_GPIO_Init+0x2d8>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b55      	ldr	r3, [pc, #340]	; (8000e0c <HAL_GPIO_Init+0x2d8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc0:	4a53      	ldr	r2, [pc, #332]	; (8000e10 <HAL_GPIO_Init+0x2dc>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cea:	d019      	beq.n	8000d20 <HAL_GPIO_Init+0x1ec>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <HAL_GPIO_Init+0x2e0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d013      	beq.n	8000d1c <HAL_GPIO_Init+0x1e8>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a48      	ldr	r2, [pc, #288]	; (8000e18 <HAL_GPIO_Init+0x2e4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d00d      	beq.n	8000d18 <HAL_GPIO_Init+0x1e4>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a47      	ldr	r2, [pc, #284]	; (8000e1c <HAL_GPIO_Init+0x2e8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0x1e0>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a46      	ldr	r2, [pc, #280]	; (8000e20 <HAL_GPIO_Init+0x2ec>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d101      	bne.n	8000d10 <HAL_GPIO_Init+0x1dc>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e008      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d10:	2305      	movs	r3, #5
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d14:	2303      	movs	r3, #3
 8000d16:	e004      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d20:	2300      	movs	r3, #0
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	f002 0203 	and.w	r2, r2, #3
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d32:	4937      	ldr	r1, [pc, #220]	; (8000e10 <HAL_GPIO_Init+0x2dc>)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d40:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d64:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d8e:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	3301      	adds	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f47f aea3 	bne.w	8000b44 <HAL_GPIO_Init+0x10>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	48000400 	.word	0x48000400
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000c00 	.word	0x48000c00
 8000e20:	48001000 	.word	0x48001000
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	f000 bef4 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 816a 	beq.w	8001126 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e52:	4bb3      	ldr	r3, [pc, #716]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d00c      	beq.n	8000e78 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e5e:	4bb0      	ldr	r3, [pc, #704]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d159      	bne.n	8000f1e <HAL_RCC_OscConfig+0xf6>
 8000e6a:	4bad      	ldr	r3, [pc, #692]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e76:	d152      	bne.n	8000f1e <HAL_RCC_OscConfig+0xf6>
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d102      	bne.n	8000eaa <HAL_RCC_OscConfig+0x82>
 8000ea4:	4b9e      	ldr	r3, [pc, #632]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0xae>
 8000eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ec6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ed2:	4b93      	ldr	r3, [pc, #588]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eda:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ede:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ee2:	fa92 f2a2 	rbit	r2, r2
 8000ee6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	f042 0220 	orr.w	r2, r2, #32
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	f002 021f 	and.w	r2, r2, #31
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 810c 	beq.w	8001124 <HAL_RCC_OscConfig+0x2fc>
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8106 	bne.w	8001124 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f000 be86 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f28:	d106      	bne.n	8000f38 <HAL_RCC_OscConfig+0x110>
 8000f2a:	4b7d      	ldr	r3, [pc, #500]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a7c      	ldr	r2, [pc, #496]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e030      	b.n	8000f9a <HAL_RCC_OscConfig+0x172>
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x134>
 8000f42:	4b77      	ldr	r3, [pc, #476]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a76      	ldr	r2, [pc, #472]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b74      	ldr	r3, [pc, #464]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a73      	ldr	r2, [pc, #460]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e01e      	b.n	8000f9a <HAL_RCC_OscConfig+0x172>
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x15a>
 8000f68:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a6c      	ldr	r2, [pc, #432]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b6a      	ldr	r3, [pc, #424]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a69      	ldr	r2, [pc, #420]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	e00b      	b.n	8000f9a <HAL_RCC_OscConfig+0x172>
 8000f82:	4b67      	ldr	r3, [pc, #412]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a66      	ldr	r2, [pc, #408]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b64      	ldr	r3, [pc, #400]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a63      	ldr	r2, [pc, #396]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f9a:	4b61      	ldr	r3, [pc, #388]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	f023 020f 	bic.w	r2, r3, #15
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	495d      	ldr	r1, [pc, #372]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d059      	beq.n	800106c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fc7a 	bl	80008b0 <HAL_GetTick>
 8000fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fc75 	bl	80008b0 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d902      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f000 be29 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fdc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <HAL_RCC_OscConfig+0x1e2>
 8001004:	4b46      	ldr	r3, [pc, #280]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x20e>
 800100a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800101e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001022:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001026:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800103a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800103e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001042:	fa92 f2a2 	rbit	r2, r2
 8001046:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800104a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	f042 0220 	orr.w	r2, r2, #32
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	f002 021f 	and.w	r2, r2, #31
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0ab      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x19a>
 800106a:	e05c      	b.n	8001126 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fc20 	bl	80008b0 <HAL_GetTick>
 8001070:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff fc1b 	bl	80008b0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d902      	bls.n	800108c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	f000 bdcf 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>
 800108c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001090:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d102      	bne.n	80010be <HAL_RCC_OscConfig+0x296>
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	e015      	b.n	80010ea <HAL_RCC_OscConfig+0x2c2>
 80010be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_RCC_OscConfig+0x2f8>)
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010f6:	fa92 f2a2 	rbit	r2, r2
 80010fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001102:	fab2 f282 	clz	r2, r2
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	f042 0220 	orr.w	r2, r2, #32
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	f002 021f 	and.w	r2, r2, #31
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f202 	lsl.w	r2, r1, r2
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ab      	bne.n	8001076 <HAL_RCC_OscConfig+0x24e>
 800111e:	e002      	b.n	8001126 <HAL_RCC_OscConfig+0x2fe>
 8001120:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 816f 	beq.w	8001414 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001136:	4bd0      	ldr	r3, [pc, #832]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001142:	4bcd      	ldr	r3, [pc, #820]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b08      	cmp	r3, #8
 800114c:	d16c      	bne.n	8001228 <HAL_RCC_OscConfig+0x400>
 800114e:	4bca      	ldr	r3, [pc, #808]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d166      	bne.n	8001228 <HAL_RCC_OscConfig+0x400>
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800116c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d102      	bne.n	800118a <HAL_RCC_OscConfig+0x362>
 8001184:	4bbc      	ldr	r3, [pc, #752]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	e013      	b.n	80011b2 <HAL_RCC_OscConfig+0x38a>
 800118a:	2302      	movs	r3, #2
 800118c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011ae:	4bb2      	ldr	r3, [pc, #712]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2202      	movs	r2, #2
 80011b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011bc:	fa92 f2a2 	rbit	r2, r2
 80011c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011c8:	fab2 f282 	clz	r2, r2
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	f042 0220 	orr.w	r2, r2, #32
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	f002 021f 	and.w	r2, r2, #31
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f202 	lsl.w	r2, r1, r2
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <HAL_RCC_OscConfig+0x3cc>
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d002      	beq.n	80011f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 bd1b 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f4:	4ba0      	ldr	r3, [pc, #640]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	21f8      	movs	r1, #248	; 0xf8
 8001204:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800120c:	fa91 f1a1 	rbit	r1, r1
 8001210:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001214:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001218:	fab1 f181 	clz	r1, r1
 800121c:	b2c9      	uxtb	r1, r1
 800121e:	408b      	lsls	r3, r1
 8001220:	4995      	ldr	r1, [pc, #596]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e0f5      	b.n	8001414 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8085 	beq.w	800133e <HAL_RCC_OscConfig+0x516>
 8001234:	2301      	movs	r3, #1
 8001236:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001246:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	461a      	mov	r2, r3
 800125c:	2301      	movs	r3, #1
 800125e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fb26 	bl	80008b0 <HAL_GetTick>
 8001264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fb21 	bl	80008b0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d902      	bls.n	8001280 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	f000 bcd5 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001292:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	095b      	lsrs	r3, r3, #5
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x488>
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	e013      	b.n	80012d8 <HAL_RCC_OscConfig+0x4b0>
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	2202      	movs	r2, #2
 80012da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012e2:	fa92 f2a2 	rbit	r2, r2
 80012e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012ee:	fab2 f282 	clz	r2, r2
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f002 021f 	and.w	r2, r2, #31
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0af      	beq.n	800126a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	21f8      	movs	r1, #248	; 0xf8
 800131a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001322:	fa91 f1a1 	rbit	r1, r1
 8001326:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800132a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800132e:	fab1 f181 	clz	r1, r1
 8001332:	b2c9      	uxtb	r1, r1
 8001334:	408b      	lsls	r3, r1
 8001336:	4950      	ldr	r1, [pc, #320]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e06a      	b.n	8001414 <HAL_RCC_OscConfig+0x5ec>
 800133e:	2301      	movs	r3, #1
 8001340:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001350:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800135e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2300      	movs	r3, #0
 8001368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff faa1 	bl	80008b0 <HAL_GetTick>
 800136e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fa9c 	bl	80008b0 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d902      	bls.n	800138a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	f000 bc50 	b.w	8001c2a <HAL_RCC_OscConfig+0xe02>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800139c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d102      	bne.n	80013ba <HAL_RCC_OscConfig+0x592>
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	e013      	b.n	80013e2 <HAL_RCC_OscConfig+0x5ba>
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_RCC_OscConfig+0x650>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	2202      	movs	r2, #2
 80013e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013ec:	fa92 f2a2 	rbit	r2, r2
 80013f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013f8:	fab2 f282 	clz	r2, r2
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	f002 021f 	and.w	r2, r2, #31
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1af      	bne.n	8001374 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 80da 	beq.w	80015d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d069      	beq.n	8001502 <HAL_RCC_OscConfig+0x6da>
 800142e:	2301      	movs	r3, #1
 8001430:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x654>)
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	461a      	mov	r2, r3
 8001454:	2301      	movs	r3, #1
 8001456:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fa2a 	bl	80008b0 <HAL_GetTick>
 800145c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fa25 	bl	80008b0 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d906      	bls.n	8001480 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e3d9      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	10908120 	.word	0x10908120
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001492:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001496:	2202      	movs	r2, #2
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014ae:	2202      	movs	r2, #2
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f2a3 	rbit	r2, r3
 80014bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80014c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	4ba5      	ldr	r3, [pc, #660]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80014c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014ca:	2102      	movs	r1, #2
 80014cc:	6019      	str	r1, [r3, #0]
 80014ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f1a3 	rbit	r1, r3
 80014d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014dc:	6019      	str	r1, [r3, #0]
  return result;
 80014de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0b0      	beq.n	8001462 <HAL_RCC_OscConfig+0x63a>
 8001500:	e06a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7b0>
 8001502:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001518:	601a      	str	r2, [r3, #0]
  return result;
 800151a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800151e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4b8c      	ldr	r3, [pc, #560]	; (800175c <HAL_RCC_OscConfig+0x934>)
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	461a      	mov	r2, r3
 8001530:	2300      	movs	r3, #0
 8001532:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff f9bc 	bl	80008b0 <HAL_GetTick>
 8001538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	e009      	b.n	8001552 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff f9b7 	bl	80008b0 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e36b      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001552:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	fa93 f2a3 	rbit	r2, r3
 8001594:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001598:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015a2:	2102      	movs	r1, #2
 80015a4:	6019      	str	r1, [r3, #0]
 80015a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f1a3 	rbit	r1, r3
 80015b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015b4:	6019      	str	r1, [r3, #0]
  return result;
 80015b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1b2      	bne.n	800153e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8158 	beq.w	8001898 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b57      	ldr	r3, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a56      	ldr	r2, [pc, #344]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b54      	ldr	r3, [pc, #336]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <HAL_RCC_OscConfig+0x938>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d11a      	bne.n	8001662 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x938>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a4b      	ldr	r2, [pc, #300]	; (8001760 <HAL_RCC_OscConfig+0x938>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001638:	f7ff f93a 	bl	80008b0 <HAL_GetTick>
 800163c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e009      	b.n	8001656 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff f935 	bl	80008b0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e2e9      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_RCC_OscConfig+0x938>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0ef      	beq.n	8001642 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x852>
 800166c:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a39      	ldr	r2, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e02f      	b.n	80016da <HAL_RCC_OscConfig+0x8b2>
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x876>
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a33      	ldr	r2, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a30      	ldr	r2, [pc, #192]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e01d      	b.n	80016da <HAL_RCC_OscConfig+0x8b2>
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x89a>
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x8b2>
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a24      	ldr	r2, [pc, #144]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a21      	ldr	r2, [pc, #132]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d06b      	beq.n	80017bc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff f8e4 	bl	80008b0 <HAL_GetTick>
 80016e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f8df 	bl	80008b0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e291      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001706:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001722:	2202      	movs	r2, #2
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	fa93 f2a3 	rbit	r2, r3
 8001730:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001734:	601a      	str	r2, [r3, #0]
  return result;
 8001736:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800173a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d109      	bne.n	8001764 <HAL_RCC_OscConfig+0x93c>
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <HAL_RCC_OscConfig+0x930>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x958>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	10908120 	.word	0x10908120
 8001760:	40007000 	.word	0x40007000
 8001764:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4bbb      	ldr	r3, [pc, #748]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001784:	2102      	movs	r1, #2
 8001786:	6011      	str	r1, [r2, #0]
 8001788:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	fa92 f1a2 	rbit	r1, r2
 8001792:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001796:	6011      	str	r1, [r2, #0]
  return result;
 8001798:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d099      	beq.n	80016ee <HAL_RCC_OscConfig+0x8c6>
 80017ba:	e063      	b.n	8001884 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f878 	bl	80008b0 <HAL_GetTick>
 80017c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff f873 	bl	80008b0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e225      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 80017de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017fa:	2202      	movs	r2, #2
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	fa93 f2a3 	rbit	r2, r3
 8001808:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800180c:	601a      	str	r2, [r3, #0]
  return result;
 800180e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001812:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d102      	bne.n	800182e <HAL_RCC_OscConfig+0xa06>
 8001828:	4b90      	ldr	r3, [pc, #576]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	e00d      	b.n	800184a <HAL_RCC_OscConfig+0xa22>
 800182e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800184e:	2102      	movs	r1, #2
 8001850:	6011      	str	r1, [r2, #0]
 8001852:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	fa92 f1a2 	rbit	r1, r2
 800185c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001860:	6011      	str	r1, [r2, #0]
  return result;
 8001862:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	fab2 f282 	clz	r2, r2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1a0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001884:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	4a76      	ldr	r2, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 81c2 	beq.w	8001c28 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a4:	4b71      	ldr	r3, [pc, #452]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	f000 819c 	beq.w	8001bea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 8114 	bne.w	8001ae6 <HAL_RCC_OscConfig+0xcbe>
 80018be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018d6:	601a      	str	r2, [r3, #0]
  return result;
 80018d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe ffdc 	bl	80008b0 <HAL_GetTick>
 80018f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe ffd7 	bl	80008b0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e18b      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001912:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800192a:	601a      	str	r2, [r3, #0]
  return result;
 800192c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0xb24>
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	e01b      	b.n	8001984 <HAL_RCC_OscConfig+0xb5c>
 800194c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fa93 f2a3 	rbit	r2, r3
 8001960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800196a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001988:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800198c:	6011      	str	r1, [r2, #0]
 800198e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	fa92 f1a2 	rbit	r1, r2
 8001998:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800199c:	6011      	str	r1, [r2, #0]
  return result;
 800199e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	fab2 f282 	clz	r2, r2
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f042 0220 	orr.w	r2, r2, #32
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f002 021f 	and.w	r2, r2, #31
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d19e      	bne.n	80018fe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	4925      	ldr	r1, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2301      	movs	r3, #1
 8001a10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7fe ff4d 	bl	80008b0 <HAL_GetTick>
 8001a16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1a:	e009      	b.n	8001a30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7fe ff48 	bl	80008b0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0fc      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001a30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a48:	601a      	str	r2, [r3, #0]
  return result;
 8001a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0xc48>
 8001a64:	4b01      	ldr	r3, [pc, #4]	; (8001a6c <HAL_RCC_OscConfig+0xc44>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	e01e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xc80>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_OscConfig+0xe0c>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab0:	6011      	str	r1, [r2, #0]
 8001ab2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	fa92 f1a2 	rbit	r1, r2
 8001abc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ac0:	6011      	str	r1, [r2, #0]
  return result;
 8001ac2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f002 021f 	and.w	r2, r2, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d09b      	beq.n	8001a1c <HAL_RCC_OscConfig+0xbf4>
 8001ae4:	e0a0      	b.n	8001c28 <HAL_RCC_OscConfig+0xe00>
 8001ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afe:	601a      	str	r2, [r3, #0]
  return result;
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	461a      	mov	r2, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe fec8 	bl	80008b0 <HAL_GetTick>
 8001b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe fec3 	bl	80008b0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e077      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	601a      	str	r2, [r3, #0]
  return result;
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_OscConfig+0xd4c>
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_OscConfig+0xe0c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	e01b      	b.n	8001bac <HAL_RCC_OscConfig+0xd84>
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f107 0318 	add.w	r3, r7, #24
 8001b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_OscConfig+0xe0c>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f107 0210 	add.w	r2, r7, #16
 8001bb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bb4:	6011      	str	r1, [r2, #0]
 8001bb6:	f107 0210 	add.w	r2, r7, #16
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	fa92 f1a2 	rbit	r1, r2
 8001bc0:	f107 020c 	add.w	r2, r7, #12
 8001bc4:	6011      	str	r1, [r2, #0]
  return result;
 8001bc6:	f107 020c 	add.w	r2, r7, #12
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	fab2 f282 	clz	r2, r2
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f002 021f 	and.w	r2, r2, #31
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d19e      	bne.n	8001b26 <HAL_RCC_OscConfig+0xcfe>
 8001be8:	e01e      	b.n	8001c28 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e018      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_RCC_OscConfig+0xe0c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09e      	sub	sp, #120	; 0x78
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e162      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d910      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b8d      	ldr	r3, [pc, #564]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	498b      	ldr	r1, [pc, #556]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e14a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	497f      	ldr	r1, [pc, #508]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80dc 	beq.w	8001e64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d13c      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xf6>
 8001cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_ClockConfig+0xa6>
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	e00f      	b.n	8001cfe <HAL_RCC_ClockConfig+0xc6>
 8001cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	667b      	str	r3, [r7, #100]	; 0x64
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8001cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d02:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d06:	fa92 f2a2 	rbit	r2, r2
 8001d0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f002 021f 	and.w	r2, r2, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d17b      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0f3      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d13c      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x178>
 8001d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x128>
 8001d5a:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_ClockConfig+0x148>
 8001d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
 8001d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7c:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d84:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d13a      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b2      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
 8001db0:	2302      	movs	r3, #2
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x1a0>
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e00d      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1bc>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	2202      	movs	r2, #2
 8001df6:	61ba      	str	r2, [r7, #24]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	fa92 f2a2 	rbit	r2, r2
 8001dfe:	617a      	str	r2, [r7, #20]
  return result;
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e079      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	491a      	ldr	r1, [pc, #104]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7fe fd3c 	bl	80008b0 <HAL_GetTick>
 8001e38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7fe fd38 	bl	80008b0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e061      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_RCC_ClockConfig+0x260>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d214      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4906      	ldr	r1, [pc, #24]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <HAL_RCC_ClockConfig+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e040      	b.n	8001f16 <HAL_RCC_ClockConfig+0x2de>
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_ClockConfig+0x2e8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	491a      	ldr	r1, [pc, #104]	; (8001f20 <HAL_RCC_ClockConfig+0x2e8>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x2e8>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4912      	ldr	r1, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x2e8>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eda:	f000 f829 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001ede:	4601      	mov	r1, r0
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_ClockConfig+0x2e8>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee8:	22f0      	movs	r2, #240	; 0xf0
 8001eea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	fa92 f2a2 	rbit	r2, r2
 8001ef2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	fab2 f282 	clz	r2, r2
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	40d3      	lsrs	r3, r2
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x2ec>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	fa21 f303 	lsr.w	r3, r1, r3
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_RCC_ClockConfig+0x2f0>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_RCC_ClockConfig+0x2f4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fc8a 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3778      	adds	r7, #120	; 0x78
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	080055ac 	.word	0x080055ac
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b08b      	sub	sp, #44	; 0x2c
 8001f34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f4a:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5e:	e03c      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f62:	623b      	str	r3, [r7, #32]
      break;
 8001f64:	e03c      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	fa92 f2a2 	rbit	r2, r2
 8001f78:	607a      	str	r2, [r7, #4]
  return result;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	40d3      	lsrs	r3, r2
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	220f      	movs	r2, #15
 8001f94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	fa92 f2a2 	rbit	r2, r2
 8001f9c:	60fa      	str	r2, [r7, #12]
  return result;
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	40d3      	lsrs	r3, r2
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	e004      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	623b      	str	r3, [r7, #32]
      break;
 8001fd8:	e002      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fdc:	623b      	str	r3, [r7, #32]
      break;
 8001fde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	372c      	adds	r7, #44	; 0x2c
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	007a1200 	.word	0x007a1200
 8001ff8:	080055c4 	.word	0x080055c4
 8001ffc:	080055d4 	.word	0x080055d4
 8002000:	003d0900 	.word	0x003d0900

08002004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_RCC_GetHCLKFreq+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000000 	.word	0x20000000

0800201c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002022:	f7ff ffef 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002026:	4601      	mov	r1, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002030:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	603a      	str	r2, [r7, #0]
  return result;
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	40d3      	lsrs	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_RCC_GetPCLK1Freq+0x40>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	080055bc 	.word	0x080055bc

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002066:	f7ff ffcd 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 800206a:	4601      	mov	r1, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002074:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002078:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	603a      	str	r2, [r7, #0]
  return result;
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	40d3      	lsrs	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	080055bc 	.word	0x080055bc

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b092      	sub	sp, #72	; 0x48
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80d4 	beq.w	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10e      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	61d3      	str	r3, [r2, #28]
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b45      	ldr	r3, [pc, #276]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a41      	ldr	r2, [pc, #260]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fbd1 	bl	80008b0 <HAL_GetTick>
 800210e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe fbcd 	bl	80008b0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e169      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8084 	beq.w	800224a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800214c:	429a      	cmp	r2, r3
 800214e:	d07c      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	461a      	mov	r2, r3
 800217a:	2301      	movs	r3, #1
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	461a      	mov	r2, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021a2:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04b      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fb7d 	bl	80008b0 <HAL_GetTick>
 80021b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe fb79 	bl	80008b0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e113      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80021d0:	2302      	movs	r3, #2
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	61fb      	str	r3, [r7, #28]
  return result;
 80021e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d108      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80021fe:	4b01      	ldr	r3, [pc, #4]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	e00d      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
 800220c:	10908100 	.word	0x10908100
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	4b78      	ldr	r3, [pc, #480]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2202      	movs	r2, #2
 8002222:	613a      	str	r2, [r7, #16]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	fa92 f2a2 	rbit	r2, r2
 800222a:	60fa      	str	r2, [r7, #12]
  return result;
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	fab2 f282 	clz	r2, r2
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f002 021f 	and.w	r2, r2, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0b7      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800224a:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	496a      	ldr	r1, [pc, #424]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002258:	4313      	orrs	r3, r2
 800225a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800225c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002260:	2b01      	cmp	r3, #1
 8002262:	d105      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4b66      	ldr	r3, [pc, #408]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a65      	ldr	r2, [pc, #404]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227c:	4b60      	ldr	r3, [pc, #384]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	495d      	ldr	r1, [pc, #372]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229a:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4956      	ldr	r1, [pc, #344]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	494e      	ldr	r1, [pc, #312]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f023 0210 	bic.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4947      	ldr	r1, [pc, #284]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80022f4:	4b42      	ldr	r3, [pc, #264]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	493f      	ldr	r1, [pc, #252]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f023 0220 	bic.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4938      	ldr	r1, [pc, #224]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4930      	ldr	r1, [pc, #192]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4929      	ldr	r1, [pc, #164]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	4921      	ldr	r1, [pc, #132]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	491a      	ldr	r1, [pc, #104]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	4912      	ldr	r1, [pc, #72]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	490b      	ldr	r1, [pc, #44]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	4903      	ldr	r1, [pc, #12]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3748      	adds	r7, #72	; 0x48
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e049      	b.n	80024aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe f846 	bl	80004bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 fa16 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e04a      	b.n	8002562 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_TIM_Base_Start_IT+0xbc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d013      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_TIM_Base_Start_IT+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_TIM_Base_Start_IT+0xc4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_TIM_Base_Start_IT+0xc8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x6c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_TIM_Base_Start_IT+0xcc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d115      	bne.n	800254c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_TIM_Base_Start_IT+0xd0>)
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d015      	beq.n	800255e <HAL_TIM_Base_Start_IT+0xaa>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d011      	beq.n	800255e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	e008      	b.n	800255e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e000      	b.n	8002560 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	40013400 	.word	0x40013400
 8002580:	40014000 	.word	0x40014000
 8002584:	00010007 	.word	0x00010007

08002588 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10f      	bne.n	80025d0 <HAL_TIM_Base_Stop_IT+0x48>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	f240 4344 	movw	r3, #1092	; 0x444
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_Base_Stop_IT+0x48>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d122      	bne.n	8002642 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d11b      	bne.n	8002642 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0202 	mvn.w	r2, #2
 8002612:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f905 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 800262e:	e005      	b.n	800263c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8f7 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f908 	bl	800284c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b04      	cmp	r3, #4
 800264e:	d122      	bne.n	8002696 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d11b      	bne.n	8002696 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f06f 0204 	mvn.w	r2, #4
 8002666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f8db 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 8002682:	e005      	b.n	8002690 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8cd 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8de 	bl	800284c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d122      	bne.n	80026ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11b      	bne.n	80026ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f06f 0208 	mvn.w	r2, #8
 80026ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2204      	movs	r2, #4
 80026c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f8b1 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 80026d6:	e005      	b.n	80026e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8a3 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8b4 	bl	800284c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d122      	bne.n	800273e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b10      	cmp	r3, #16
 8002704:	d11b      	bne.n	800273e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f06f 0210 	mvn.w	r2, #16
 800270e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2208      	movs	r2, #8
 8002714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f887 	bl	8002838 <HAL_TIM_IC_CaptureCallback>
 800272a:	e005      	b.n	8002738 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f879 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f88a 	bl	800284c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d10e      	bne.n	800276a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f06f 0201 	mvn.w	r2, #1
 8002762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f001 fb23 	bl	8003db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d10e      	bne.n	8002796 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	2b80      	cmp	r3, #128	; 0x80
 8002784:	d107      	bne.n	8002796 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800278e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f989 	bl	8002aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f97c 	bl	8002abc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d107      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f838 	bl	8002860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b20      	cmp	r3, #32
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0220 	mvn.w	r2, #32
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f93c 	bl	8002a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <TIM_Base_SetConfig+0x104>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00f      	beq.n	80028ac <TIM_Base_SetConfig+0x38>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002892:	d00b      	beq.n	80028ac <TIM_Base_SetConfig+0x38>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a39      	ldr	r2, [pc, #228]	; (800297c <TIM_Base_SetConfig+0x108>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <TIM_Base_SetConfig+0x38>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a38      	ldr	r2, [pc, #224]	; (8002980 <TIM_Base_SetConfig+0x10c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x38>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a37      	ldr	r2, [pc, #220]	; (8002984 <TIM_Base_SetConfig+0x110>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <TIM_Base_SetConfig+0x104>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01b      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d017      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a2a      	ldr	r2, [pc, #168]	; (800297c <TIM_Base_SetConfig+0x108>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <TIM_Base_SetConfig+0x10c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00f      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a28      	ldr	r2, [pc, #160]	; (8002984 <TIM_Base_SetConfig+0x110>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00b      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a27      	ldr	r2, [pc, #156]	; (8002988 <TIM_Base_SetConfig+0x114>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a26      	ldr	r2, [pc, #152]	; (800298c <TIM_Base_SetConfig+0x118>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d003      	beq.n	80028fe <TIM_Base_SetConfig+0x8a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <TIM_Base_SetConfig+0x11c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d108      	bne.n	8002910 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <TIM_Base_SetConfig+0x104>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00f      	beq.n	800295c <TIM_Base_SetConfig+0xe8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <TIM_Base_SetConfig+0x110>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0xe8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <TIM_Base_SetConfig+0x114>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0xe8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <TIM_Base_SetConfig+0x118>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0xe8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <TIM_Base_SetConfig+0x11c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800
 8002984:	40013400 	.word	0x40013400
 8002988:	40014000 	.word	0x40014000
 800298c:	40014400 	.word	0x40014400
 8002990:	40014800 	.word	0x40014800

08002994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e063      	b.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d108      	bne.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80029e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d013      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10c      	bne.n	8002a62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40013400 	.word	0x40013400
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40014000 	.word	0x40014000

08002a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fd fd08 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8c0 	bl	8002c94 <UART_SetConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa88 	bl	800303c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fb0f 	bl	8003180 <UART_CheckIdleState>
 8002b62:	4603      	mov	r3, r0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	f040 8082 	bne.w	8002c8a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_Transmit+0x26>
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07a      	b.n	8002c8c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Transmit+0x38>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e073      	b.n	8002c8c <HAL_UART_Transmit+0x120>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bba:	f7fd fe79 	bl	80008b0 <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d108      	bne.n	8002bec <HAL_UART_Transmit+0x80>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e003      	b.n	8002bf4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bfc:	e02d      	b.n	8002c5a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fb02 	bl	8003212 <UART_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e039      	b.n	8002c8c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e008      	b.n	8002c48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1cb      	bne.n	8002bfe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 face 	bl	8003212 <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e005      	b.n	8002c8c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
  }
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cc2:	f023 030c 	bic.w	r3, r3, #12
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	6979      	ldr	r1, [r7, #20]
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4aae      	ldr	r2, [pc, #696]	; (8002fc8 <UART_SetConfig+0x334>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d120      	bne.n	8002d56 <UART_SetConfig+0xc2>
 8002d14:	4bad      	ldr	r3, [pc, #692]	; (8002fcc <UART_SetConfig+0x338>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d817      	bhi.n	8002d50 <UART_SetConfig+0xbc>
 8002d20:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <UART_SetConfig+0x94>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d45 	.word	0x08002d45
 8002d30:	08002d4b 	.word	0x08002d4b
 8002d34:	08002d3f 	.word	0x08002d3f
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	e0b5      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	77fb      	strb	r3, [r7, #31]
 8002d42:	e0b2      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d44:	2304      	movs	r3, #4
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e0af      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	77fb      	strb	r3, [r7, #31]
 8002d4e:	e0ac      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d50:	2310      	movs	r3, #16
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e0a9      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a9d      	ldr	r2, [pc, #628]	; (8002fd0 <UART_SetConfig+0x33c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d124      	bne.n	8002daa <UART_SetConfig+0x116>
 8002d60:	4b9a      	ldr	r3, [pc, #616]	; (8002fcc <UART_SetConfig+0x338>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d6c:	d011      	beq.n	8002d92 <UART_SetConfig+0xfe>
 8002d6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d72:	d817      	bhi.n	8002da4 <UART_SetConfig+0x110>
 8002d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d78:	d011      	beq.n	8002d9e <UART_SetConfig+0x10a>
 8002d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d7e:	d811      	bhi.n	8002da4 <UART_SetConfig+0x110>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <UART_SetConfig+0xf8>
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d006      	beq.n	8002d98 <UART_SetConfig+0x104>
 8002d8a:	e00b      	b.n	8002da4 <UART_SetConfig+0x110>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e08b      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d92:	2302      	movs	r3, #2
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e088      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e085      	b.n	8002eaa <UART_SetConfig+0x216>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e082      	b.n	8002eaa <UART_SetConfig+0x216>
 8002da4:	2310      	movs	r3, #16
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e07f      	b.n	8002eaa <UART_SetConfig+0x216>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a89      	ldr	r2, [pc, #548]	; (8002fd4 <UART_SetConfig+0x340>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d124      	bne.n	8002dfe <UART_SetConfig+0x16a>
 8002db4:	4b85      	ldr	r3, [pc, #532]	; (8002fcc <UART_SetConfig+0x338>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002dbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dc0:	d011      	beq.n	8002de6 <UART_SetConfig+0x152>
 8002dc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dc6:	d817      	bhi.n	8002df8 <UART_SetConfig+0x164>
 8002dc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dcc:	d011      	beq.n	8002df2 <UART_SetConfig+0x15e>
 8002dce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd2:	d811      	bhi.n	8002df8 <UART_SetConfig+0x164>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <UART_SetConfig+0x14c>
 8002dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ddc:	d006      	beq.n	8002dec <UART_SetConfig+0x158>
 8002dde:	e00b      	b.n	8002df8 <UART_SetConfig+0x164>
 8002de0:	2300      	movs	r3, #0
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e061      	b.n	8002eaa <UART_SetConfig+0x216>
 8002de6:	2302      	movs	r3, #2
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e05e      	b.n	8002eaa <UART_SetConfig+0x216>
 8002dec:	2304      	movs	r3, #4
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e05b      	b.n	8002eaa <UART_SetConfig+0x216>
 8002df2:	2308      	movs	r3, #8
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e058      	b.n	8002eaa <UART_SetConfig+0x216>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e055      	b.n	8002eaa <UART_SetConfig+0x216>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a75      	ldr	r2, [pc, #468]	; (8002fd8 <UART_SetConfig+0x344>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d124      	bne.n	8002e52 <UART_SetConfig+0x1be>
 8002e08:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <UART_SetConfig+0x338>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e14:	d011      	beq.n	8002e3a <UART_SetConfig+0x1a6>
 8002e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e1a:	d817      	bhi.n	8002e4c <UART_SetConfig+0x1b8>
 8002e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e20:	d011      	beq.n	8002e46 <UART_SetConfig+0x1b2>
 8002e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e26:	d811      	bhi.n	8002e4c <UART_SetConfig+0x1b8>
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <UART_SetConfig+0x1a0>
 8002e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e30:	d006      	beq.n	8002e40 <UART_SetConfig+0x1ac>
 8002e32:	e00b      	b.n	8002e4c <UART_SetConfig+0x1b8>
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e037      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e034      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e40:	2304      	movs	r3, #4
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e031      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e46:	2308      	movs	r3, #8
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e02e      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e02b      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <UART_SetConfig+0x348>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d124      	bne.n	8002ea6 <UART_SetConfig+0x212>
 8002e5c:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <UART_SetConfig+0x338>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e68:	d011      	beq.n	8002e8e <UART_SetConfig+0x1fa>
 8002e6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6e:	d817      	bhi.n	8002ea0 <UART_SetConfig+0x20c>
 8002e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e74:	d011      	beq.n	8002e9a <UART_SetConfig+0x206>
 8002e76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e7a:	d811      	bhi.n	8002ea0 <UART_SetConfig+0x20c>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <UART_SetConfig+0x1f4>
 8002e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e84:	d006      	beq.n	8002e94 <UART_SetConfig+0x200>
 8002e86:	e00b      	b.n	8002ea0 <UART_SetConfig+0x20c>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	e00d      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e00a      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e94:	2304      	movs	r3, #4
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e007      	b.n	8002eaa <UART_SetConfig+0x216>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e004      	b.n	8002eaa <UART_SetConfig+0x216>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e001      	b.n	8002eaa <UART_SetConfig+0x216>
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb2:	d15c      	bne.n	8002f6e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d827      	bhi.n	8002f0a <UART_SetConfig+0x276>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <UART_SetConfig+0x22c>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ee5 	.word	0x08002ee5
 8002ec4:	08002eed 	.word	0x08002eed
 8002ec8:	08002ef5 	.word	0x08002ef5
 8002ecc:	08002f0b 	.word	0x08002f0b
 8002ed0:	08002efb 	.word	0x08002efb
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002f0b 	.word	0x08002f0b
 8002edc:	08002f0b 	.word	0x08002f0b
 8002ee0:	08002f03 	.word	0x08002f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee4:	f7ff f89a 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002ee8:	61b8      	str	r0, [r7, #24]
        break;
 8002eea:	e013      	b.n	8002f14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eec:	f7ff f8b8 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	61b8      	str	r0, [r7, #24]
        break;
 8002ef2:	e00f      	b.n	8002f14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <UART_SetConfig+0x34c>)
 8002ef6:	61bb      	str	r3, [r7, #24]
        break;
 8002ef8:	e00c      	b.n	8002f14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efa:	f7ff f819 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002efe:	61b8      	str	r0, [r7, #24]
        break;
 8002f00:	e008      	b.n	8002f14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f06:	61bb      	str	r3, [r7, #24]
        break;
 8002f08:	e004      	b.n	8002f14 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77bb      	strb	r3, [r7, #30]
        break;
 8002f12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8085 	beq.w	8003026 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	005a      	lsls	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	d916      	bls.n	8002f68 <UART_SetConfig+0x2d4>
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d212      	bcs.n	8002f68 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f023 030f 	bic.w	r3, r3, #15
 8002f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	89fa      	ldrh	r2, [r7, #14]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e05e      	b.n	8003026 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77bb      	strb	r3, [r7, #30]
 8002f6c:	e05b      	b.n	8003026 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d837      	bhi.n	8002fe4 <UART_SetConfig+0x350>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0x2e8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fe5 	.word	0x08002fe5
 8002f8c:	08002fb7 	.word	0x08002fb7
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fe5 	.word	0x08002fe5
 8002f9c:	08002fbf 	.word	0x08002fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7ff f83c 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002fa4:	61b8      	str	r0, [r7, #24]
        break;
 8002fa6:	e022      	b.n	8002fee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff f85a 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8002fac:	61b8      	str	r0, [r7, #24]
        break;
 8002fae:	e01e      	b.n	8002fee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <UART_SetConfig+0x34c>)
 8002fb2:	61bb      	str	r3, [r7, #24]
        break;
 8002fb4:	e01b      	b.n	8002fee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7fe ffbb 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002fba:	61b8      	str	r0, [r7, #24]
        break;
 8002fbc:	e017      	b.n	8002fee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	61bb      	str	r3, [r7, #24]
        break;
 8002fc4:	e013      	b.n	8002fee <UART_SetConfig+0x35a>
 8002fc6:	bf00      	nop
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40004400 	.word	0x40004400
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	40004c00 	.word	0x40004c00
 8002fdc:	40005000 	.word	0x40005000
 8002fe0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77bb      	strb	r3, [r7, #30]
        break;
 8002fec:	bf00      	nop
    }

    if (pclk != 0U)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d018      	beq.n	8003026 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085a      	lsrs	r2, r3, #1
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	b29b      	uxth	r3, r3
 8003008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d908      	bls.n	8003022 <UART_SetConfig+0x38e>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003016:	d204      	bcs.n	8003022 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e001      	b.n	8003026 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003032:	7fbb      	ldrb	r3, [r7, #30]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01a      	beq.n	8003152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313a:	d10a      	bne.n	8003152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003190:	f7fd fb8e 	bl	80008b0 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d10e      	bne.n	80031c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f82d 	bl	8003212 <UART_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e023      	b.n	800320a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d10e      	bne.n	80031ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f817 	bl	8003212 <UART_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e00d      	b.n	800320a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003222:	e05e      	b.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d05a      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322c:	f7fd fb40 	bl	80008b0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	429a      	cmp	r2, r3
 800323a:	d302      	bcc.n	8003242 <UART_WaitOnFlagUntilTimeout+0x30>
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11b      	bne.n	800327a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003250:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e043      	b.n	8003302 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02c      	beq.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d124      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e00f      	b.n	8003302 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d091      	beq.n	8003224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <Xoodoo_StaticInitialize>:
#include "Xoodoo.h"

/* ---------------------------------------------------------------- */

void Xoodoo_StaticInitialize( void )
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <Xoodoo_Initialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_Initialize(void *state)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    memset(state, 0, NLANES*sizeof(tXoodooLane));
 8003320:	2230      	movs	r2, #48	; 0x30
 8003322:	2100      	movs	r1, #0
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fe73 	bl	8004010 <memset>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <Xoodoo_AddByte>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddByte(void *state, unsigned char byte, unsigned int offset)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	460b      	mov	r3, r1
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	72fb      	strb	r3, [r7, #11]
    assert(offset < NLANES*sizeof(tXoodooLane));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b2f      	cmp	r3, #47	; 0x2f
 8003346:	d905      	bls.n	8003354 <Xoodoo_AddByte+0x20>
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <Xoodoo_AddByte+0x40>)
 800334a:	4a0b      	ldr	r2, [pc, #44]	; (8003378 <Xoodoo_AddByte+0x44>)
 800334c:	2127      	movs	r1, #39	; 0x27
 800334e:	480b      	ldr	r0, [pc, #44]	; (800337c <Xoodoo_AddByte+0x48>)
 8003350:	f000 fdf6 	bl	8003f40 <__assert_func>
    ((unsigned char *)state)[offset] ^= byte;
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	7819      	ldrb	r1, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	7afa      	ldrb	r2, [r7, #11]
 8003364:	404a      	eors	r2, r1
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	080052d4 	.word	0x080052d4
 8003378:	08005614 	.word	0x08005614
 800337c:	080052f8 	.word	0x080052f8

08003380 <Xoodoo_AddBytes>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
    unsigned int i;

    assert(offset < NLANES*sizeof(tXoodooLane));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b2f      	cmp	r3, #47	; 0x2f
 8003392:	d905      	bls.n	80033a0 <Xoodoo_AddBytes+0x20>
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <Xoodoo_AddBytes+0x78>)
 8003396:	4a19      	ldr	r2, [pc, #100]	; (80033fc <Xoodoo_AddBytes+0x7c>)
 8003398:	2131      	movs	r1, #49	; 0x31
 800339a:	4819      	ldr	r0, [pc, #100]	; (8003400 <Xoodoo_AddBytes+0x80>)
 800339c:	f000 fdd0 	bl	8003f40 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	4413      	add	r3, r2
 80033a6:	2b30      	cmp	r3, #48	; 0x30
 80033a8:	d905      	bls.n	80033b6 <Xoodoo_AddBytes+0x36>
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <Xoodoo_AddBytes+0x84>)
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <Xoodoo_AddBytes+0x7c>)
 80033ae:	2132      	movs	r1, #50	; 0x32
 80033b0:	4813      	ldr	r0, [pc, #76]	; (8003400 <Xoodoo_AddBytes+0x80>)
 80033b2:	f000 fdc5 	bl	8003f40 <__assert_func>
    for(i=0; i<length; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e014      	b.n	80033e6 <Xoodoo_AddBytes+0x66>
        ((unsigned char *)state)[offset+i] ^= data[i];
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4413      	add	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	7819      	ldrb	r1, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4413      	add	r3, r2
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4403      	add	r3, r0
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	4403      	add	r3, r0
 80033da:	404a      	eors	r2, r1
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
    for(i=0; i<length; i++)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d3e6      	bcc.n	80033bc <Xoodoo_AddBytes+0x3c>
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	080052d4 	.word	0x080052d4
 80033fc:	08005624 	.word	0x08005624
 8003400:	080052f8 	.word	0x080052f8
 8003404:	08005388 	.word	0x08005388

08003408 <Xoodoo_ExtractBytes>:
}

/* ---------------------------------------------------------------- */

void Xoodoo_ExtractBytes(const void *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
    assert(offset < NLANES*sizeof(tXoodooLane));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b2f      	cmp	r3, #47	; 0x2f
 800341a:	d905      	bls.n	8003428 <Xoodoo_ExtractBytes+0x20>
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <Xoodoo_ExtractBytes+0x50>)
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <Xoodoo_ExtractBytes+0x54>)
 8003420:	214c      	movs	r1, #76	; 0x4c
 8003422:	480f      	ldr	r0, [pc, #60]	; (8003460 <Xoodoo_ExtractBytes+0x58>)
 8003424:	f000 fd8c 	bl	8003f40 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	4413      	add	r3, r2
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d905      	bls.n	800343e <Xoodoo_ExtractBytes+0x36>
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <Xoodoo_ExtractBytes+0x5c>)
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <Xoodoo_ExtractBytes+0x54>)
 8003436:	214d      	movs	r1, #77	; 0x4d
 8003438:	4809      	ldr	r0, [pc, #36]	; (8003460 <Xoodoo_ExtractBytes+0x58>)
 800343a:	f000 fd81 	bl	8003f40 <__assert_func>
    memcpy(data, (unsigned char*)state+offset, length);
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	68b8      	ldr	r0, [r7, #8]
 800344a:	f000 fdd3 	bl	8003ff4 <memcpy>
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	080052d4 	.word	0x080052d4
 800345c:	08005634 	.word	0x08005634
 8003460:	080052f8 	.word	0x080052f8
 8003464:	08005388 	.word	0x08005388

08003468 <fromBytesToWords>:

#endif


static void fromBytesToWords(tXoodooLane *stateAsWords, const unsigned char *state)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    unsigned int i, j;

    for(i=0; i<NLANES; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	e027      	b.n	80034c8 <fromBytesToWords+0x60>
        stateAsWords[i] = 0;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	e018      	b.n	80034bc <fromBytesToWords+0x54>
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4413      	add	r3, r2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	409a      	lsls	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4403      	add	r3, r0
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3301      	adds	r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d9e3      	bls.n	800348a <fromBytesToWords+0x22>
    for(i=0; i<NLANES; i++) {
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b0b      	cmp	r3, #11
 80034cc:	d9d4      	bls.n	8003478 <fromBytesToWords+0x10>
    }
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <fromWordsToBytes>:

static void fromWordsToBytes(unsigned char *state, const tXoodooLane *stateAsWords)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
    unsigned int i, j;

    for(i=0; i<NLANES; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e01c      	b.n	8003526 <fromWordsToBytes+0x4a>
        for(j=0; j<sizeof(tXoodooLane); j++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	e013      	b.n	800351a <fromWordsToBytes+0x3e>
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	4413      	add	r3, r2
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	fa22 f103 	lsr.w	r1, r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	009a      	lsls	r2, r3, #2
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4413      	add	r3, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	b2ca      	uxtb	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d9e8      	bls.n	80034f2 <fromWordsToBytes+0x16>
    for(i=0; i<NLANES; i++)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b0b      	cmp	r3, #11
 800352a:	d9df      	bls.n	80034ec <fromWordsToBytes+0x10>
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <Xoodoo_Round>:

static void Xoodoo_Round( tXoodooLane * a, tXoodooLane rc )
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b099      	sub	sp, #100	; 0x64
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
    tXoodooLane    b[NLANES];
    tXoodooLane    p[NCOLUMS];
    tXoodooLane    e[NCOLUMS];

    /* Theta: Column Parity Mixer */
    for (x=0; x<NCOLUMS; ++x)
 8003546:	2300      	movs	r3, #0
 8003548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354a:	e022      	b.n	8003592 <Xoodoo_Round+0x56>
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 800354c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	3304      	adds	r3, #4
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	440b      	add	r3, r1
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	405a      	eors	r2, r3
 800356c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	3308      	adds	r3, #8
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	440b      	add	r3, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	405a      	eors	r2, r3
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003586:	440b      	add	r3, r1
 8003588:	f843 2c48 	str.w	r2, [r3, #-72]
    for (x=0; x<NCOLUMS; ++x)
 800358c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358e:	3301      	adds	r3, #1
 8003590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	2b03      	cmp	r3, #3
 8003596:	d9d9      	bls.n	800354c <Xoodoo_Round+0x10>
    for (x=0; x<NCOLUMS; ++x)
 8003598:	2300      	movs	r3, #0
 800359a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800359c:	e022      	b.n	80035e4 <Xoodoo_Round+0xa8>
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	3b01      	subs	r3, #1
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80035ac:	4413      	add	r3, r2
 80035ae:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80035b2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80035b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b8:	3b01      	subs	r3, #1
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80035c4:	440b      	add	r3, r1
 80035c6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80035ca:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80035ce:	405a      	eors	r2, r3
 80035d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80035d8:	440b      	add	r3, r1
 80035da:	f843 2c58 	str.w	r2, [r3, #-88]
    for (x=0; x<NCOLUMS; ++x)
 80035de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e0:	3301      	adds	r3, #1
 80035e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d9d9      	bls.n	800359e <Xoodoo_Round+0x62>
    for (x=0; x<NCOLUMS; ++x)
 80035ea:	2300      	movs	r3, #0
 80035ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ee:	e02e      	b.n	800364e <Xoodoo_Round+0x112>
        for (y=0; y<NROWS; ++y)
 80035f0:	2300      	movs	r3, #0
 80035f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f4:	e025      	b.n	8003642 <Xoodoo_Round+0x106>
            a[index(x,y)] ^= e[x];
 80035f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035f8:	4b98      	ldr	r3, [pc, #608]	; (800385c <Xoodoo_Round+0x320>)
 80035fa:	fba3 2301 	umull	r2, r3, r3, r1
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	461a      	mov	r2, r3
 8003602:	0052      	lsls	r2, r2, #1
 8003604:	441a      	add	r2, r3
 8003606:	1a8b      	subs	r3, r1, r2
 8003608:	0099      	lsls	r1, r3, #2
 800360a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800360c:	f002 0203 	and.w	r2, r2, #3
 8003610:	440a      	add	r2, r1
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	440a      	add	r2, r1
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800361c:	0092      	lsls	r2, r2, #2
 800361e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003622:	4402      	add	r2, r0
 8003624:	f852 2c58 	ldr.w	r2, [r2, #-88]
 8003628:	0098      	lsls	r0, r3, #2
 800362a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	4403      	add	r3, r0
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4403      	add	r3, r0
 8003638:	404a      	eors	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
        for (y=0; y<NROWS; ++y)
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	3301      	adds	r3, #1
 8003640:	65bb      	str	r3, [r7, #88]	; 0x58
 8003642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003644:	2b02      	cmp	r3, #2
 8003646:	d9d6      	bls.n	80035f6 <Xoodoo_Round+0xba>
    for (x=0; x<NCOLUMS; ++x)
 8003648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364a:	3301      	adds	r3, #1
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	2b03      	cmp	r3, #3
 8003652:	d9cd      	bls.n	80035f0 <Xoodoo_Round+0xb4>
    Dump("Theta", a, 2);

    /* Rho-west: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
 8003654:	2300      	movs	r3, #0
 8003656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003658:	e039      	b.n	80036ce <Xoodoo_Round+0x192>
        b[index(x,0)] = a[index(x,0)];
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	441a      	add	r2, r3
 8003666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003674:	440b      	add	r3, r1
 8003676:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,1)] = a[index(x-1,1)];
 800367a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367c:	3b01      	subs	r3, #1
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	3304      	adds	r3, #4
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	441a      	add	r2, r3
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	3304      	adds	r3, #4
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800369a:	440b      	add	r3, r1
 800369c:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 80036a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3308      	adds	r3, #8
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3308      	adds	r3, #8
 80036b8:	ea4f 5272 	mov.w	r2, r2, ror #21
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80036c2:	440b      	add	r3, r1
 80036c4:	f843 2c38 	str.w	r2, [r3, #-56]
    for (x=0; x<NCOLUMS; ++x) {
 80036c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ca:	3301      	adds	r3, #1
 80036cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d9c2      	bls.n	800365a <Xoodoo_Round+0x11e>
    }
    memcpy( a, b, sizeof(b) );
 80036d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d8:	2230      	movs	r2, #48	; 0x30
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fc89 	bl	8003ff4 <memcpy>
    Dump("Rho-west", a, 2);
        
    /* Iota: round constant */
    a[0] ^= rc;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	405a      	eors	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]
    Dump("Iota", a, 2);

    /* Chi: non linear layer */
    for (x=0; x<NCOLUMS; ++x)
 80036ee:	2300      	movs	r3, #0
 80036f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036f2:	e05b      	b.n	80037ac <Xoodoo_Round+0x270>
        for (y=0; y<NROWS; ++y)
 80036f4:	2300      	movs	r3, #0
 80036f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80036f8:	e052      	b.n	80037a0 <Xoodoo_Round+0x264>
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 80036fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036fc:	4b57      	ldr	r3, [pc, #348]	; (800385c <Xoodoo_Round+0x320>)
 80036fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003702:	085a      	lsrs	r2, r3, #1
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	1aca      	subs	r2, r1, r3
 800370c:	0092      	lsls	r2, r2, #2
 800370e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	681c      	ldr	r4, [r3, #0]
 800371e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	4b4e      	ldr	r3, [pc, #312]	; (800385c <Xoodoo_Round+0x320>)
 8003724:	fba3 2301 	umull	r2, r3, r3, r1
 8003728:	085a      	lsrs	r2, r3, #1
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	1aca      	subs	r2, r1, r3
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	43d8      	mvns	r0, r3
 8003746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003748:	1c99      	adds	r1, r3, #2
 800374a:	4b44      	ldr	r3, [pc, #272]	; (800385c <Xoodoo_Round+0x320>)
 800374c:	fba3 2301 	umull	r2, r3, r3, r1
 8003750:	085a      	lsrs	r2, r3, #1
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	1aca      	subs	r2, r1, r3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4018      	ands	r0, r3
 800376e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <Xoodoo_Round+0x320>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	085a      	lsrs	r2, r3, #1
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	1aca      	subs	r2, r1, r3
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	ea84 0200 	eor.w	r2, r4, r0
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003794:	440b      	add	r3, r1
 8003796:	f843 2c38 	str.w	r2, [r3, #-56]
        for (y=0; y<NROWS; ++y)
 800379a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800379c:	3301      	adds	r3, #1
 800379e:	65bb      	str	r3, [r7, #88]	; 0x58
 80037a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d9a9      	bls.n	80036fa <Xoodoo_Round+0x1be>
    for (x=0; x<NCOLUMS; ++x)
 80037a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a8:	3301      	adds	r3, #1
 80037aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d9a0      	bls.n	80036f4 <Xoodoo_Round+0x1b8>
    memcpy( a, b, sizeof(b) );
 80037b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b6:	2230      	movs	r2, #48	; 0x30
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fc1a 	bl	8003ff4 <memcpy>
    Dump("Chi", a, 2);

    /* Rho-east: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
 80037c0:	2300      	movs	r3, #0
 80037c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c4:	e03b      	b.n	800383e <Xoodoo_Round+0x302>
        b[index(x,0)] = a[index(x,0)];
 80037c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	441a      	add	r2, r3
 80037d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80037e0:	440b      	add	r3, r1
 80037e2:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80037e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	3304      	adds	r3, #4
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	3304      	adds	r3, #4
 80037fe:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003808:	440b      	add	r3, r1
 800380a:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 800380e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003810:	3302      	adds	r3, #2
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	3308      	adds	r3, #8
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	3308      	adds	r3, #8
 8003828:	ea4f 6232 	mov.w	r2, r2, ror #24
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003832:	440b      	add	r3, r1
 8003834:	f843 2c38 	str.w	r2, [r3, #-56]
    for (x=0; x<NCOLUMS; ++x) {
 8003838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383a:	3301      	adds	r3, #1
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800383e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003840:	2b03      	cmp	r3, #3
 8003842:	d9c0      	bls.n	80037c6 <Xoodoo_Round+0x28a>
    }
    memcpy( a, b, sizeof(b) );
 8003844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003848:	2230      	movs	r2, #48	; 0x30
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fbd1 	bl	8003ff4 <memcpy>
    Dump("Rho-east", a, 2);

}
 8003852:	bf00      	nop
 8003854:	3764      	adds	r7, #100	; 0x64
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop
 800385c:	aaaaaaab 	.word	0xaaaaaaab

08003860 <Xoodoo_Permute_Nrounds>:
    _rc2,
    _rc1
};

void Xoodoo_Permute_Nrounds( void * state, uint32_t nr )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b090      	sub	sp, #64	; 0x40
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    tXoodooLane        a[NLANES];
    unsigned int    i;

    fromBytesToWords(a, (const unsigned char *)state);
 800386a:	f107 030c 	add.w	r3, r7, #12
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fdf9 	bl	8003468 <fromBytesToWords>

    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	f1c3 030c 	rsb	r3, r3, #12
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387e:	e00c      	b.n	800389a <Xoodoo_Permute_Nrounds+0x3a>
        Xoodoo_Round( a, RC[i] );
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <Xoodoo_Permute_Nrounds+0x54>)
 8003882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003884:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003888:	f107 030c 	add.w	r3, r7, #12
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fe54 	bl	800353c <Xoodoo_Round>
    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8003894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003896:	3301      	adds	r3, #1
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389c:	2b0b      	cmp	r3, #11
 800389e:	d9ef      	bls.n	8003880 <Xoodoo_Permute_Nrounds+0x20>
        Dump("Round", a, 1);
    }
    Dump("Permutation", a, 0);

    fromWordsToBytes((unsigned char *)state, a);
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fe18 	bl	80034dc <fromWordsToBytes>

}
 80038ac:	bf00      	nop
 80038ae:	3740      	adds	r7, #64	; 0x40
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	080055e4 	.word	0x080055e4

080038b8 <Xoodoo_Permute_12rounds>:
{
    Xoodoo_Permute_Nrounds( state, 6 );
}

void Xoodoo_Permute_12rounds( uint32_t * state)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
    Xoodoo_Permute_Nrounds( state, 12 );
 80038c0:	210c      	movs	r1, #12
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffcc 	bl	8003860 <Xoodoo_Permute_Nrounds>
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <Xoodyak_Down>:
#define Cyclist_lRatchet                JOIN(prefix, _lRatchet)

/* ------- Cyclist internal interfaces ------- */

static void Cyclist_Down(Cyclist_Instance *instance, const uint8_t *Xi, unsigned int XiLen, uint8_t Cd)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	70fb      	strb	r3, [r7, #3]
    SnP_AddBytes(instance->state, Xi, 0, XiLen);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	f7ff fd4b 	bl	8003380 <Xoodoo_AddBytes>
    SnP_AddByte(instance->state, 0x01, XiLen);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fd1f 	bl	8003334 <Xoodoo_AddByte>
    SnP_AddByte(instance->state, (instance->mode == Cyclist_ModeHash) ? (Cd & 0x01) : Cd, Cyclist_f_bPrime - 1);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d104      	bne.n	800390a <Xoodyak_Down+0x3a>
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e000      	b.n	800390c <Xoodyak_Down+0x3c>
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	222f      	movs	r2, #47	; 0x2f
 800390e:	4619      	mov	r1, r3
 8003910:	f7ff fd10 	bl	8003334 <Xoodoo_AddByte>
    instance->phase = Cyclist_PhaseDown;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	631a      	str	r2, [r3, #48]	; 0x30

}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <Xoodyak_Up>:

static void Cyclist_Up(Cyclist_Instance *instance, uint8_t *Yi, unsigned int YiLen, uint8_t Cu)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	70fb      	strb	r3, [r7, #3]
    #if defined(OUTPUT)
    uint8_t   s[Cyclist_f_bPrime];
    #endif

    if (instance->mode != Cyclist_ModeHash) {
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003934:	2b01      	cmp	r3, #1
 8003936:	d005      	beq.n	8003944 <Xoodyak_Up+0x22>
        SnP_AddByte(instance->state, Cu, Cyclist_f_bPrime - 1);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	78f9      	ldrb	r1, [r7, #3]
 800393c:	222f      	movs	r2, #47	; 0x2f
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fcf8 	bl	8003334 <Xoodoo_AddByte>
    if (instance->file != NULL) {
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        SnP_ExtractAndAddBytes( instance->state, s, s, 0, Cyclist_f_bPrime );
    }
    #endif
    SnP_Permute( instance->state );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffb6 	bl	80038b8 <Xoodoo_Permute_12rounds>
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        fprintf( instance->file, "After f() ");
        displayByteString( instance->file, "", s, Cyclist_f_bPrime );
    }
    #endif
    instance->phase = Cyclist_PhaseUp;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2202      	movs	r2, #2
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	f7ff fd55 	bl	8003408 <Xoodoo_ExtractBytes>
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <Xoodyak_AbsorbAny>:

static void Cyclist_AbsorbAny(Cyclist_Instance *instance, const uint8_t *X, size_t XLen, unsigned int r, uint8_t Cd)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
    unsigned int splitLen;

    do {
        if (instance->phase != Cyclist_PhaseUp) {
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2b02      	cmp	r3, #2
 800397a:	d005      	beq.n	8003988 <Xoodyak_AbsorbAny+0x22>
            Cyclist_Up(instance, NULL, 0, 0);
 800397c:	2300      	movs	r3, #0
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7ff ffcd 	bl	8003922 <Xoodyak_Up>
        }
        splitLen = MyMin(XLen, r);
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4293      	cmp	r3, r2
 800398e:	bf28      	it	cs
 8003990:	4613      	movcs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
        Cyclist_Down(instance, X, splitLen, Cd);
 8003994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff97 	bl	80038d0 <Xoodyak_Down>
        Cd = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3020 	strb.w	r3, [r7, #32]
        X       += splitLen;
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	4413      	add	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
        XLen    -= splitLen;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	607b      	str	r3, [r7, #4]
    } while ( XLen != 0 );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1da      	bne.n	8003974 <Xoodyak_AbsorbAny+0xe>
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <Xoodyak_AbsorbKey>:

static void Cyclist_AbsorbKey(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b092      	sub	sp, #72	; 0x48
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
    uint8_t KID[Cyclist_Rkin];

    assert(instance->mode == Cyclist_ModeHash);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d005      	beq.n	80039ea <Xoodyak_AbsorbKey+0x22>
 80039de:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <Xoodyak_AbsorbKey+0xbc>)
 80039e0:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <Xoodyak_AbsorbKey+0xc0>)
 80039e2:	216a      	movs	r1, #106	; 0x6a
 80039e4:	4829      	ldr	r0, [pc, #164]	; (8003a8c <Xoodyak_AbsorbKey+0xc4>)
 80039e6:	f000 faab 	bl	8003f40 <__assert_func>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	4413      	add	r3, r2
 80039f0:	2b2b      	cmp	r3, #43	; 0x2b
 80039f2:	d905      	bls.n	8003a00 <Xoodyak_AbsorbKey+0x38>
 80039f4:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <Xoodyak_AbsorbKey+0xc8>)
 80039f6:	4a24      	ldr	r2, [pc, #144]	; (8003a88 <Xoodyak_AbsorbKey+0xc0>)
 80039f8:	216b      	movs	r1, #107	; 0x6b
 80039fa:	4824      	ldr	r0, [pc, #144]	; (8003a8c <Xoodyak_AbsorbKey+0xc4>)
 80039fc:	f000 faa0 	bl	8003f40 <__assert_func>

    instance->mode      = Cyclist_ModeKeyed;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2202      	movs	r2, #2
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
    instance->Rabsorb   = Cyclist_Rkin;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	222c      	movs	r2, #44	; 0x2c
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
    instance->Rsqueeze  = Cyclist_Rkout;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2218      	movs	r2, #24
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c
    if (KLen != 0) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <Xoodyak_AbsorbKey+0xb4>
        memcpy(KID, K, KLen);
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fae7 	bl	8003ff4 <memcpy>
        memcpy(KID + KLen, ID, IDLen);
 8003a26:	f107 0214 	add.w	r2, r7, #20
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fade 	bl	8003ff4 <memcpy>
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3c:	4413      	add	r3, r2
 8003a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003a46:	440b      	add	r3, r1
 8003a48:	f803 2c2c 	strb.w	r2, [r3, #-44]
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	4413      	add	r3, r2
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	f107 0114 	add.w	r1, r7, #20
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	9000      	str	r0, [sp, #0]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff ff80 	bl	8003966 <Xoodyak_AbsorbAny>
        if (counterLen != 0) {
 8003a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <Xoodyak_AbsorbKey+0xb4>
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2301      	movs	r3, #1
 8003a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff ff75 	bl	8003966 <Xoodyak_AbsorbAny>
        }
    }
}
 8003a7c:	bf00      	nop
 8003a7e:	3740      	adds	r7, #64	; 0x40
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	080053dc 	.word	0x080053dc
 8003a88:	08005648 	.word	0x08005648
 8003a8c:	08005400 	.word	0x08005400
 8003a90:	08005488 	.word	0x08005488

08003a94 <Xoodyak_SqueezeAny>:

static void Cyclist_SqueezeAny(Cyclist_Instance *instance, uint8_t *Y, size_t YLen, uint8_t Cu)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	70fb      	strb	r3, [r7, #3]
    unsigned int len;

    len = MyMin(YLen, instance->Rsqueeze );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf28      	it	cs
 8003aac:	4613      	movcs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    Cyclist_Up(instance, Y, len, Cu);
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff ff33 	bl	8003922 <Xoodyak_Up>
    Y += len;
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
    YLen -= len;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	607b      	str	r3, [r7, #4]
    while (YLen != 0) {
 8003acc:	e01a      	b.n	8003b04 <Xoodyak_SqueezeAny+0x70>
        Cyclist_Down(instance, NULL, 0, 0);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fefb 	bl	80038d0 <Xoodyak_Down>
        len = MyMin(YLen, instance->Rsqueeze );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf28      	it	cs
 8003ae4:	4613      	movcs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
        Cyclist_Up(instance, Y, len, 0);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff ff17 	bl	8003922 <Xoodyak_Up>
        Y += len;
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
        YLen -= len;
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	607b      	str	r3, [r7, #4]
    while (YLen != 0) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e1      	bne.n	8003ace <Xoodyak_SqueezeAny+0x3a>
    }
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <Xoodyak_Initialize>:
}

/* ------- Cyclist interfaces ------- */

void Cyclist_Initialize(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af04      	add	r7, sp, #16
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
    SnP_StaticInitialize();
 8003b22:	f7ff fbf2 	bl	800330a <Xoodoo_StaticInitialize>
    SnP_Initialize(instance->state);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fbf5 	bl	8003318 <Xoodoo_Initialize>
    instance->phase     = Cyclist_PhaseUp;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
    instance->mode      = Cyclist_ModeHash;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34
    instance->Rabsorb   = Cyclist_Rhash;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
    instance->Rsqueeze  = Cyclist_Rhash;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2210      	movs	r2, #16
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c
    #ifdef OUTPUT
    instance->file = 0;
    SnP_Initialize( instance->stateShadow );
    #endif
    if (KLen != 0) {
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <Xoodyak_Initialize+0x50>
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	9302      	str	r3, [sp, #8]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff ff32 	bl	80039c8 <Xoodyak_AbsorbKey>
    }
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <Xoodyak_Absorb>:

void Cyclist_Absorb(Cyclist_Instance *instance, const uint8_t *X, size_t XLen)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	9200      	str	r2, [sp, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff feee 	bl	8003966 <Xoodyak_AbsorbAny>
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <Xoodyak_Squeeze>:
    assert(instance->mode == Cyclist_ModeKeyed);
    Cyclist_Crypt(instance, C, P, CLen, 1);
}

void Cyclist_Squeeze(Cyclist_Instance *instance, uint8_t *Y, size_t YLen)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
    Cyclist_SqueezeAny(instance, Y, YLen, 0x40);
 8003b9e:	2340      	movs	r3, #64	; 0x40
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff ff75 	bl	8003a94 <Xoodyak_SqueezeAny>
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <crypto_hash>:
#endif

#include "Xoodyak.h"

int crypto_hash(unsigned char *out, const unsigned char *in, unsigned long long inlen)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b098      	sub	sp, #96	; 0x60
 8003bb6:	af04      	add	r7, sp, #16
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	e9c7 2300 	strd	r2, r3, [r7]
    Xoodyak_Instance    instance;

    Xoodyak_Initialize(&instance, NULL, 0, NULL, 0, NULL, 0);
 8003bc0:	f107 0010 	add.w	r0, r7, #16
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	f7ff ff9d 	bl	8003b14 <Xoodyak_Initialize>
    Xoodyak_Absorb(&instance, in, (size_t)inlen);
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ffc2 	bl	8003b6c <Xoodyak_Absorb>
    Xoodyak_Squeeze(&instance, out, crypto_hash_BYTES);
 8003be8:	f107 0310 	add.w	r3, r7, #16
 8003bec:	2220      	movs	r2, #32
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ffce 	bl	8003b92 <Xoodyak_Squeeze>
            printf("\\x%02x", out[i] );
        }
        printf("\n");
    }
    #endif
    return 0;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3750      	adds	r7, #80	; 0x50
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0

	get_memory_usage();
 8003c06:	f000 f943 	bl	8003e90 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8003c0a:	f000 f8e3 	bl	8003dd4 <tick_msr_start>
	tick_msr_end();
 8003c0e:	f000 f8fb 	bl	8003e08 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <genkat_benchmark_hash_aead+0x54>)
 8003c14:	4910      	ldr	r1, [pc, #64]	; (8003c58 <genkat_benchmark_hash_aead+0x58>)
 8003c16:	4811      	ldr	r0, [pc, #68]	; (8003c5c <genkat_benchmark_hash_aead+0x5c>)
 8003c18:	f000 f918 	bl	8003e4c <lwc_printf>
	lwc_printf("Memory usage: ");
 8003c1c:	4810      	ldr	r0, [pc, #64]	; (8003c60 <genkat_benchmark_hash_aead+0x60>)
 8003c1e:	f000 f915 	bl	8003e4c <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <genkat_benchmark_hash_aead+0x64>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <genkat_benchmark_hash_aead+0x64>)
 8003c28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	480e      	ldr	r0, [pc, #56]	; (8003c68 <genkat_benchmark_hash_aead+0x68>)
 8003c2e:	f000 f90d 	bl	8003e4c <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <genkat_benchmark_hash_aead+0x64>)
 8003c34:	6a19      	ldr	r1, [r3, #32]
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <genkat_benchmark_hash_aead+0x64>)
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <genkat_benchmark_hash_aead+0x64>)
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	480b      	ldr	r0, [pc, #44]	; (8003c6c <genkat_benchmark_hash_aead+0x6c>)
 8003c40:	f000 f904 	bl	8003e4c <lwc_printf>
#ifdef LWC_ALGO_AEAD
	int ret = aead_generate_test_vectors();
#endif

#ifdef LWC_ALGO_HASH
	int ret = hash_generate_test_vectors();
 8003c44:	f000 f814 	bl	8003c70 <hash_generate_test_vectors>
 8003c48:	6078      	str	r0, [r7, #4]
#endif

	return ret;
 8003c4a:	687b      	ldr	r3, [r7, #4]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	0800565c 	.word	0x0800565c
 8003c58:	080056dc 	.word	0x080056dc
 8003c5c:	080054d4 	.word	0x080054d4
 8003c60:	0800551c 	.word	0x0800551c
 8003c64:	20000378 	.word	0x20000378
 8003c68:	0800552c 	.word	0x0800552c
 8003c6c:	08005554 	.word	0x08005554

08003c70 <hash_generate_test_vectors>:
#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024


int hash_generate_test_vectors(){
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8003c76:	af00      	add	r7, sp, #0


	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

	init_buffer(msg, sizeof(msg));
 8003c7e:	f107 0120 	add.w	r1, r7, #32
 8003c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	f000 f866 	bl	8003d5c <init_buffer>


	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8003c9c:	e9c1 2300 	strd	r2, r3, [r1]
 8003ca0:	e041      	b.n	8003d26 <hash_generate_test_vectors+0xb6>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8003ca2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4828      	ldr	r0, [pc, #160]	; (8003d4c <hash_generate_test_vectors+0xdc>)
 8003caa:	f000 f8cf 	bl	8003e4c <lwc_printf>

		tick_msr_start();
 8003cae:	f000 f891 	bl	8003dd4 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 8003cb2:	f107 0120 	add.w	r1, r7, #32
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7ff ff77 	bl	8003bb2 <crypto_hash>
 8003cc4:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
#else
		ret_val = 0;
#endif

		tick_msr_end();
 8003cc8:	f000 f89e 	bl	8003e08 <tick_msr_end>

		if(ret_val == 0) {
 8003ccc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d110      	bne.n	8003cf6 <hash_generate_test_vectors+0x86>
			lwc_printf( "hash:%8lu us:%8lu ms:%8lu \n", gb_tick_cnt, gb_tick_cnt/16, gb_ms_ticks);
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <hash_generate_test_vectors+0xe0>)
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <hash_generate_test_vectors+0xe0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	091a      	lsrs	r2, r3, #4
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <hash_generate_test_vectors+0xe4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	481d      	ldr	r0, [pc, #116]	; (8003d58 <hash_generate_test_vectors+0xe8>)
 8003ce4:	f000 f8b2 	bl	8003e4c <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8003ce8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d10d      	bne.n	8003d10 <hash_generate_test_vectors+0xa0>
 8003cf4:	e004      	b.n	8003d00 <hash_generate_test_vectors+0x90>
			ret_val = KAT_CRYPTO_FAILURE;
 8003cf6:	f06f 0303 	mvn.w	r3, #3
 8003cfa:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			break;
 8003cfe:	e01e      	b.n	8003d3e <hash_generate_test_vectors+0xce>
			mlen = 4;
 8003d00:	f04f 0204 	mov.w	r2, #4
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003d10:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	1894      	adds	r4, r2, r2
 8003d1a:	eb43 0503 	adc.w	r5, r3, r3
 8003d1e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003d22:	e9c3 4500 	strd	r4, r5, [r3]
 8003d26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	4299      	cmp	r1, r3
 8003d38:	bf08      	it	eq
 8003d3a:	4290      	cmpeq	r0, r2
 8003d3c:	d2b1      	bcs.n	8003ca2 <hash_generate_test_vectors+0x32>
		}
	}

	return ret_val;
 8003d3e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4c:	08005580 	.word	0x08005580
 8003d50:	20000090 	.word	0x20000090
 8003d54:	20000094 	.word	0x20000094
 8003d58:	08005590 	.word	0x08005590

08003d5c <init_buffer>:

#endif

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8003d5c:	b4b0      	push	{r4, r5, r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003d74:	e00d      	b.n	8003d92 <init_buffer+0x36>
		buffer[i] = (unsigned char) i + '0';
 8003d76:	7c3a      	ldrb	r2, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3230      	adds	r2, #48	; 0x30
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003d84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d88:	1c54      	adds	r4, r2, #1
 8003d8a:	f143 0500 	adc.w	r5, r3, #0
 8003d8e:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003d92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	bf08      	it	eq
 8003d9e:	4290      	cmpeq	r0, r2
 8003da0:	d3e9      	bcc.n	8003d76 <init_buffer+0x1a>
	}
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bcb0      	pop	{r4, r5, r7}
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003dc0:	6013      	str	r3, [r2, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000098 	.word	0x20000098

08003dd4 <tick_msr_start>:

void tick_msr_start(void) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <tick_msr_start+0x28>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <tick_msr_start+0x2c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8003de6:	f7fc fd63 	bl	80008b0 <HAL_GetTick>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <tick_msr_start+0x30>)
 8003dee:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8003df0:	4803      	ldr	r0, [pc, #12]	; (8003e00 <tick_msr_start+0x2c>)
 8003df2:	f7fe fb5f 	bl	80024b4 <HAL_TIM_Base_Start_IT>
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000098 	.word	0x20000098
 8003e00:	20000328 	.word	0x20000328
 8003e04:	20000094 	.word	0x20000094

08003e08 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 8003e0c:	480b      	ldr	r0, [pc, #44]	; (8003e3c <tick_msr_end+0x34>)
 8003e0e:	f7fe fbbb 	bl	8002588 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <tick_msr_end+0x38>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	041a      	lsls	r2, r3, #16
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <tick_msr_end+0x34>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <tick_msr_end+0x3c>)
 8003e22:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8003e24:	f7fc fd44 	bl	80008b0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <tick_msr_end+0x40>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <tick_msr_end+0x40>)
 8003e32:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <tick_msr_end+0x3c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000328 	.word	0x20000328
 8003e40:	20000098 	.word	0x20000098
 8003e44:	20000090 	.word	0x20000090
 8003e48:	20000094 	.word	0x20000094

08003e4c <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003e4c:	b40f      	push	{r0, r1, r2, r3}
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6939      	ldr	r1, [r7, #16]
 8003e5e:	480a      	ldr	r0, [pc, #40]	; (8003e88 <lwc_printf+0x3c>)
 8003e60:	f000 fbe2 	bl	8004628 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8003e64:	4808      	ldr	r0, [pc, #32]	; (8003e88 <lwc_printf+0x3c>)
 8003e66:	f7fc f9b3 	bl	80001d0 <strlen>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	2364      	movs	r3, #100	; 0x64
 8003e70:	4905      	ldr	r1, [pc, #20]	; (8003e88 <lwc_printf+0x3c>)
 8003e72:	4806      	ldr	r0, [pc, #24]	; (8003e8c <lwc_printf+0x40>)
 8003e74:	f7fe fe7a 	bl	8002b6c <HAL_UART_Transmit>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e82:	b004      	add	sp, #16
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000009c 	.word	0x2000009c
 8003e8c:	200002a4 	.word	0x200002a4

08003e90 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8003e94:	2234      	movs	r2, #52	; 0x34
 8003e96:	2100      	movs	r1, #0
 8003e98:	4822      	ldr	r0, [pc, #136]	; (8003f24 <get_memory_usage+0x94>)
 8003e9a:	f000 f8b9 	bl	8004010 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8003e9e:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <get_memory_usage+0x94>)
 8003ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ea4:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <get_memory_usage+0x94>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <get_memory_usage+0x94>)
 8003eac:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8003eae:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <get_memory_usage+0x98>)
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <get_memory_usage+0x94>)
 8003eb2:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <get_memory_usage+0x9c>)
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <get_memory_usage+0x94>)
 8003eb8:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <get_memory_usage+0xa0>)
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <get_memory_usage+0x94>)
 8003ebe:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <get_memory_usage+0xa4>)
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <get_memory_usage+0x94>)
 8003ec4:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <get_memory_usage+0xa8>)
 8003ec8:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <get_memory_usage+0x94>)
 8003eca:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <get_memory_usage+0xac>)
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <get_memory_usage+0x94>)
 8003ed0:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <get_memory_usage+0x94>)
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <get_memory_usage+0x94>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <get_memory_usage+0x94>)
 8003ede:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <get_memory_usage+0x94>)
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <get_memory_usage+0x94>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <get_memory_usage+0x94>)
 8003eec:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <get_memory_usage+0x94>)
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <get_memory_usage+0x94>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <get_memory_usage+0x94>)
 8003efa:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <get_memory_usage+0x94>)
 8003efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <get_memory_usage+0x94>)
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	4413      	add	r3, r2
 8003f06:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <get_memory_usage+0x94>)
 8003f08:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <get_memory_usage+0x94>)
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <get_memory_usage+0x94>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	441a      	add	r2, r3
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <get_memory_usage+0x94>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	4a02      	ldr	r2, [pc, #8]	; (8003f24 <get_memory_usage+0x94>)
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000378 	.word	0x20000378
 8003f28:	080052d4 	.word	0x080052d4
 8003f2c:	20000070 	.word	0x20000070
 8003f30:	200003bc 	.word	0x200003bc
 8003f34:	20000000 	.word	0x20000000
 8003f38:	20000070 	.word	0x20000070
 8003f3c:	08005838 	.word	0x08005838

08003f40 <__assert_func>:
 8003f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f42:	4614      	mov	r4, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <__assert_func+0x2c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	68d8      	ldr	r0, [r3, #12]
 8003f4e:	b14c      	cbz	r4, 8003f64 <__assert_func+0x24>
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <__assert_func+0x30>)
 8003f52:	9100      	str	r1, [sp, #0]
 8003f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f58:	4906      	ldr	r1, [pc, #24]	; (8003f74 <__assert_func+0x34>)
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	f000 f814 	bl	8003f88 <fiprintf>
 8003f60:	f000 fc2c 	bl	80047bc <abort>
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <__assert_func+0x38>)
 8003f66:	461c      	mov	r4, r3
 8003f68:	e7f3      	b.n	8003f52 <__assert_func+0x12>
 8003f6a:	bf00      	nop
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	0800575c 	.word	0x0800575c
 8003f74:	08005769 	.word	0x08005769
 8003f78:	08005797 	.word	0x08005797

08003f7c <__errno>:
 8003f7c:	4b01      	ldr	r3, [pc, #4]	; (8003f84 <__errno+0x8>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <fiprintf>:
 8003f88:	b40e      	push	{r1, r2, r3}
 8003f8a:	b503      	push	{r0, r1, lr}
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	ab03      	add	r3, sp, #12
 8003f90:	4805      	ldr	r0, [pc, #20]	; (8003fa8 <fiprintf+0x20>)
 8003f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f96:	6800      	ldr	r0, [r0, #0]
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	f000 f86b 	bl	8004074 <_vfiprintf_r>
 8003f9e:	b002      	add	sp, #8
 8003fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa4:	b003      	add	sp, #12
 8003fa6:	4770      	bx	lr
 8003fa8:	2000000c 	.word	0x2000000c

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4d0d      	ldr	r5, [pc, #52]	; (8003fe4 <__libc_init_array+0x38>)
 8003fb0:	4c0d      	ldr	r4, [pc, #52]	; (8003fe8 <__libc_init_array+0x3c>)
 8003fb2:	1b64      	subs	r4, r4, r5
 8003fb4:	10a4      	asrs	r4, r4, #2
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	4d0b      	ldr	r5, [pc, #44]	; (8003fec <__libc_init_array+0x40>)
 8003fbe:	4c0c      	ldr	r4, [pc, #48]	; (8003ff0 <__libc_init_array+0x44>)
 8003fc0:	f001 f97c 	bl	80052bc <_init>
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	10a4      	asrs	r4, r4, #2
 8003fc8:	2600      	movs	r6, #0
 8003fca:	42a6      	cmp	r6, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd4:	4798      	blx	r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fde:	4798      	blx	r3
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	08005830 	.word	0x08005830
 8003fe8:	08005830 	.word	0x08005830
 8003fec:	08005830 	.word	0x08005830
 8003ff0:	08005834 	.word	0x08005834

08003ff4 <memcpy>:
 8003ff4:	440a      	add	r2, r1
 8003ff6:	4291      	cmp	r1, r2
 8003ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ffc:	d100      	bne.n	8004000 <memcpy+0xc>
 8003ffe:	4770      	bx	lr
 8004000:	b510      	push	{r4, lr}
 8004002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800400a:	4291      	cmp	r1, r2
 800400c:	d1f9      	bne.n	8004002 <memcpy+0xe>
 800400e:	bd10      	pop	{r4, pc}

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <__sfputc_r>:
 8004020:	6893      	ldr	r3, [r2, #8]
 8004022:	3b01      	subs	r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	b410      	push	{r4}
 8004028:	6093      	str	r3, [r2, #8]
 800402a:	da08      	bge.n	800403e <__sfputc_r+0x1e>
 800402c:	6994      	ldr	r4, [r2, #24]
 800402e:	42a3      	cmp	r3, r4
 8004030:	db01      	blt.n	8004036 <__sfputc_r+0x16>
 8004032:	290a      	cmp	r1, #10
 8004034:	d103      	bne.n	800403e <__sfputc_r+0x1e>
 8004036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403a:	f000 baff 	b.w	800463c <__swbuf_r>
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	1c58      	adds	r0, r3, #1
 8004042:	6010      	str	r0, [r2, #0]
 8004044:	7019      	strb	r1, [r3, #0]
 8004046:	4608      	mov	r0, r1
 8004048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800404c:	4770      	bx	lr

0800404e <__sfputs_r>:
 800404e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004050:	4606      	mov	r6, r0
 8004052:	460f      	mov	r7, r1
 8004054:	4614      	mov	r4, r2
 8004056:	18d5      	adds	r5, r2, r3
 8004058:	42ac      	cmp	r4, r5
 800405a:	d101      	bne.n	8004060 <__sfputs_r+0x12>
 800405c:	2000      	movs	r0, #0
 800405e:	e007      	b.n	8004070 <__sfputs_r+0x22>
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	463a      	mov	r2, r7
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff ffda 	bl	8004020 <__sfputc_r>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d1f3      	bne.n	8004058 <__sfputs_r+0xa>
 8004070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004074 <_vfiprintf_r>:
 8004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	460d      	mov	r5, r1
 800407a:	b09d      	sub	sp, #116	; 0x74
 800407c:	4614      	mov	r4, r2
 800407e:	4698      	mov	r8, r3
 8004080:	4606      	mov	r6, r0
 8004082:	b118      	cbz	r0, 800408c <_vfiprintf_r+0x18>
 8004084:	6983      	ldr	r3, [r0, #24]
 8004086:	b90b      	cbnz	r3, 800408c <_vfiprintf_r+0x18>
 8004088:	f000 fcba 	bl	8004a00 <__sinit>
 800408c:	4b89      	ldr	r3, [pc, #548]	; (80042b4 <_vfiprintf_r+0x240>)
 800408e:	429d      	cmp	r5, r3
 8004090:	d11b      	bne.n	80040ca <_vfiprintf_r+0x56>
 8004092:	6875      	ldr	r5, [r6, #4]
 8004094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004096:	07d9      	lsls	r1, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_vfiprintf_r+0x32>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	059a      	lsls	r2, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_vfiprintf_r+0x32>
 80040a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a2:	f000 fd4b 	bl	8004b3c <__retarget_lock_acquire_recursive>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	d501      	bpl.n	80040b0 <_vfiprintf_r+0x3c>
 80040ac:	692b      	ldr	r3, [r5, #16]
 80040ae:	b9eb      	cbnz	r3, 80040ec <_vfiprintf_r+0x78>
 80040b0:	4629      	mov	r1, r5
 80040b2:	4630      	mov	r0, r6
 80040b4:	f000 fb14 	bl	80046e0 <__swsetup_r>
 80040b8:	b1c0      	cbz	r0, 80040ec <_vfiprintf_r+0x78>
 80040ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040bc:	07dc      	lsls	r4, r3, #31
 80040be:	d50e      	bpl.n	80040de <_vfiprintf_r+0x6a>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	b01d      	add	sp, #116	; 0x74
 80040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ca:	4b7b      	ldr	r3, [pc, #492]	; (80042b8 <_vfiprintf_r+0x244>)
 80040cc:	429d      	cmp	r5, r3
 80040ce:	d101      	bne.n	80040d4 <_vfiprintf_r+0x60>
 80040d0:	68b5      	ldr	r5, [r6, #8]
 80040d2:	e7df      	b.n	8004094 <_vfiprintf_r+0x20>
 80040d4:	4b79      	ldr	r3, [pc, #484]	; (80042bc <_vfiprintf_r+0x248>)
 80040d6:	429d      	cmp	r5, r3
 80040d8:	bf08      	it	eq
 80040da:	68f5      	ldreq	r5, [r6, #12]
 80040dc:	e7da      	b.n	8004094 <_vfiprintf_r+0x20>
 80040de:	89ab      	ldrh	r3, [r5, #12]
 80040e0:	0598      	lsls	r0, r3, #22
 80040e2:	d4ed      	bmi.n	80040c0 <_vfiprintf_r+0x4c>
 80040e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040e6:	f000 fd2a 	bl	8004b3e <__retarget_lock_release_recursive>
 80040ea:	e7e9      	b.n	80040c0 <_vfiprintf_r+0x4c>
 80040ec:	2300      	movs	r3, #0
 80040ee:	9309      	str	r3, [sp, #36]	; 0x24
 80040f0:	2320      	movs	r3, #32
 80040f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040fa:	2330      	movs	r3, #48	; 0x30
 80040fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042c0 <_vfiprintf_r+0x24c>
 8004100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004104:	f04f 0901 	mov.w	r9, #1
 8004108:	4623      	mov	r3, r4
 800410a:	469a      	mov	sl, r3
 800410c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004110:	b10a      	cbz	r2, 8004116 <_vfiprintf_r+0xa2>
 8004112:	2a25      	cmp	r2, #37	; 0x25
 8004114:	d1f9      	bne.n	800410a <_vfiprintf_r+0x96>
 8004116:	ebba 0b04 	subs.w	fp, sl, r4
 800411a:	d00b      	beq.n	8004134 <_vfiprintf_r+0xc0>
 800411c:	465b      	mov	r3, fp
 800411e:	4622      	mov	r2, r4
 8004120:	4629      	mov	r1, r5
 8004122:	4630      	mov	r0, r6
 8004124:	f7ff ff93 	bl	800404e <__sfputs_r>
 8004128:	3001      	adds	r0, #1
 800412a:	f000 80aa 	beq.w	8004282 <_vfiprintf_r+0x20e>
 800412e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004130:	445a      	add	r2, fp
 8004132:	9209      	str	r2, [sp, #36]	; 0x24
 8004134:	f89a 3000 	ldrb.w	r3, [sl]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a2 	beq.w	8004282 <_vfiprintf_r+0x20e>
 800413e:	2300      	movs	r3, #0
 8004140:	f04f 32ff 	mov.w	r2, #4294967295
 8004144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004148:	f10a 0a01 	add.w	sl, sl, #1
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	9307      	str	r3, [sp, #28]
 8004150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004154:	931a      	str	r3, [sp, #104]	; 0x68
 8004156:	4654      	mov	r4, sl
 8004158:	2205      	movs	r2, #5
 800415a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415e:	4858      	ldr	r0, [pc, #352]	; (80042c0 <_vfiprintf_r+0x24c>)
 8004160:	f7fc f83e 	bl	80001e0 <memchr>
 8004164:	9a04      	ldr	r2, [sp, #16]
 8004166:	b9d8      	cbnz	r0, 80041a0 <_vfiprintf_r+0x12c>
 8004168:	06d1      	lsls	r1, r2, #27
 800416a:	bf44      	itt	mi
 800416c:	2320      	movmi	r3, #32
 800416e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004172:	0713      	lsls	r3, r2, #28
 8004174:	bf44      	itt	mi
 8004176:	232b      	movmi	r3, #43	; 0x2b
 8004178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800417c:	f89a 3000 	ldrb.w	r3, [sl]
 8004180:	2b2a      	cmp	r3, #42	; 0x2a
 8004182:	d015      	beq.n	80041b0 <_vfiprintf_r+0x13c>
 8004184:	9a07      	ldr	r2, [sp, #28]
 8004186:	4654      	mov	r4, sl
 8004188:	2000      	movs	r0, #0
 800418a:	f04f 0c0a 	mov.w	ip, #10
 800418e:	4621      	mov	r1, r4
 8004190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004194:	3b30      	subs	r3, #48	; 0x30
 8004196:	2b09      	cmp	r3, #9
 8004198:	d94e      	bls.n	8004238 <_vfiprintf_r+0x1c4>
 800419a:	b1b0      	cbz	r0, 80041ca <_vfiprintf_r+0x156>
 800419c:	9207      	str	r2, [sp, #28]
 800419e:	e014      	b.n	80041ca <_vfiprintf_r+0x156>
 80041a0:	eba0 0308 	sub.w	r3, r0, r8
 80041a4:	fa09 f303 	lsl.w	r3, r9, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	9304      	str	r3, [sp, #16]
 80041ac:	46a2      	mov	sl, r4
 80041ae:	e7d2      	b.n	8004156 <_vfiprintf_r+0xe2>
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	1d19      	adds	r1, r3, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	9103      	str	r1, [sp, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bfbb      	ittet	lt
 80041bc:	425b      	neglt	r3, r3
 80041be:	f042 0202 	orrlt.w	r2, r2, #2
 80041c2:	9307      	strge	r3, [sp, #28]
 80041c4:	9307      	strlt	r3, [sp, #28]
 80041c6:	bfb8      	it	lt
 80041c8:	9204      	strlt	r2, [sp, #16]
 80041ca:	7823      	ldrb	r3, [r4, #0]
 80041cc:	2b2e      	cmp	r3, #46	; 0x2e
 80041ce:	d10c      	bne.n	80041ea <_vfiprintf_r+0x176>
 80041d0:	7863      	ldrb	r3, [r4, #1]
 80041d2:	2b2a      	cmp	r3, #42	; 0x2a
 80041d4:	d135      	bne.n	8004242 <_vfiprintf_r+0x1ce>
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	9203      	str	r2, [sp, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfb8      	it	lt
 80041e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80041e6:	3402      	adds	r4, #2
 80041e8:	9305      	str	r3, [sp, #20]
 80041ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042d0 <_vfiprintf_r+0x25c>
 80041ee:	7821      	ldrb	r1, [r4, #0]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4650      	mov	r0, sl
 80041f4:	f7fb fff4 	bl	80001e0 <memchr>
 80041f8:	b140      	cbz	r0, 800420c <_vfiprintf_r+0x198>
 80041fa:	2340      	movs	r3, #64	; 0x40
 80041fc:	eba0 000a 	sub.w	r0, r0, sl
 8004200:	fa03 f000 	lsl.w	r0, r3, r0
 8004204:	9b04      	ldr	r3, [sp, #16]
 8004206:	4303      	orrs	r3, r0
 8004208:	3401      	adds	r4, #1
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004210:	482c      	ldr	r0, [pc, #176]	; (80042c4 <_vfiprintf_r+0x250>)
 8004212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004216:	2206      	movs	r2, #6
 8004218:	f7fb ffe2 	bl	80001e0 <memchr>
 800421c:	2800      	cmp	r0, #0
 800421e:	d03f      	beq.n	80042a0 <_vfiprintf_r+0x22c>
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <_vfiprintf_r+0x254>)
 8004222:	bb1b      	cbnz	r3, 800426c <_vfiprintf_r+0x1f8>
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	3307      	adds	r3, #7
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	3308      	adds	r3, #8
 800422e:	9303      	str	r3, [sp, #12]
 8004230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004232:	443b      	add	r3, r7
 8004234:	9309      	str	r3, [sp, #36]	; 0x24
 8004236:	e767      	b.n	8004108 <_vfiprintf_r+0x94>
 8004238:	fb0c 3202 	mla	r2, ip, r2, r3
 800423c:	460c      	mov	r4, r1
 800423e:	2001      	movs	r0, #1
 8004240:	e7a5      	b.n	800418e <_vfiprintf_r+0x11a>
 8004242:	2300      	movs	r3, #0
 8004244:	3401      	adds	r4, #1
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	4619      	mov	r1, r3
 800424a:	f04f 0c0a 	mov.w	ip, #10
 800424e:	4620      	mov	r0, r4
 8004250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004254:	3a30      	subs	r2, #48	; 0x30
 8004256:	2a09      	cmp	r2, #9
 8004258:	d903      	bls.n	8004262 <_vfiprintf_r+0x1ee>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0c5      	beq.n	80041ea <_vfiprintf_r+0x176>
 800425e:	9105      	str	r1, [sp, #20]
 8004260:	e7c3      	b.n	80041ea <_vfiprintf_r+0x176>
 8004262:	fb0c 2101 	mla	r1, ip, r1, r2
 8004266:	4604      	mov	r4, r0
 8004268:	2301      	movs	r3, #1
 800426a:	e7f0      	b.n	800424e <_vfiprintf_r+0x1da>
 800426c:	ab03      	add	r3, sp, #12
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	462a      	mov	r2, r5
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <_vfiprintf_r+0x258>)
 8004274:	a904      	add	r1, sp, #16
 8004276:	4630      	mov	r0, r6
 8004278:	f3af 8000 	nop.w
 800427c:	4607      	mov	r7, r0
 800427e:	1c78      	adds	r0, r7, #1
 8004280:	d1d6      	bne.n	8004230 <_vfiprintf_r+0x1bc>
 8004282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004284:	07d9      	lsls	r1, r3, #31
 8004286:	d405      	bmi.n	8004294 <_vfiprintf_r+0x220>
 8004288:	89ab      	ldrh	r3, [r5, #12]
 800428a:	059a      	lsls	r2, r3, #22
 800428c:	d402      	bmi.n	8004294 <_vfiprintf_r+0x220>
 800428e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004290:	f000 fc55 	bl	8004b3e <__retarget_lock_release_recursive>
 8004294:	89ab      	ldrh	r3, [r5, #12]
 8004296:	065b      	lsls	r3, r3, #25
 8004298:	f53f af12 	bmi.w	80040c0 <_vfiprintf_r+0x4c>
 800429c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800429e:	e711      	b.n	80040c4 <_vfiprintf_r+0x50>
 80042a0:	ab03      	add	r3, sp, #12
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	462a      	mov	r2, r5
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <_vfiprintf_r+0x258>)
 80042a8:	a904      	add	r1, sp, #16
 80042aa:	4630      	mov	r0, r6
 80042ac:	f000 f880 	bl	80043b0 <_printf_i>
 80042b0:	e7e4      	b.n	800427c <_vfiprintf_r+0x208>
 80042b2:	bf00      	nop
 80042b4:	080057f0 	.word	0x080057f0
 80042b8:	08005810 	.word	0x08005810
 80042bc:	080057d0 	.word	0x080057d0
 80042c0:	0800579c 	.word	0x0800579c
 80042c4:	080057a6 	.word	0x080057a6
 80042c8:	00000000 	.word	0x00000000
 80042cc:	0800404f 	.word	0x0800404f
 80042d0:	080057a2 	.word	0x080057a2

080042d4 <_printf_common>:
 80042d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	4616      	mov	r6, r2
 80042da:	4699      	mov	r9, r3
 80042dc:	688a      	ldr	r2, [r1, #8]
 80042de:	690b      	ldr	r3, [r1, #16]
 80042e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bfb8      	it	lt
 80042e8:	4613      	movlt	r3, r2
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042f0:	4607      	mov	r7, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	b10a      	cbz	r2, 80042fa <_printf_common+0x26>
 80042f6:	3301      	adds	r3, #1
 80042f8:	6033      	str	r3, [r6, #0]
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	0699      	lsls	r1, r3, #26
 80042fe:	bf42      	ittt	mi
 8004300:	6833      	ldrmi	r3, [r6, #0]
 8004302:	3302      	addmi	r3, #2
 8004304:	6033      	strmi	r3, [r6, #0]
 8004306:	6825      	ldr	r5, [r4, #0]
 8004308:	f015 0506 	ands.w	r5, r5, #6
 800430c:	d106      	bne.n	800431c <_printf_common+0x48>
 800430e:	f104 0a19 	add.w	sl, r4, #25
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	6832      	ldr	r2, [r6, #0]
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	42ab      	cmp	r3, r5
 800431a:	dc26      	bgt.n	800436a <_printf_common+0x96>
 800431c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004320:	1e13      	subs	r3, r2, #0
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	bf18      	it	ne
 8004326:	2301      	movne	r3, #1
 8004328:	0692      	lsls	r2, r2, #26
 800432a:	d42b      	bmi.n	8004384 <_printf_common+0xb0>
 800432c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004330:	4649      	mov	r1, r9
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d01e      	beq.n	8004378 <_printf_common+0xa4>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	68e5      	ldr	r5, [r4, #12]
 800433e:	6832      	ldr	r2, [r6, #0]
 8004340:	f003 0306 	and.w	r3, r3, #6
 8004344:	2b04      	cmp	r3, #4
 8004346:	bf08      	it	eq
 8004348:	1aad      	subeq	r5, r5, r2
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	6922      	ldr	r2, [r4, #16]
 800434e:	bf0c      	ite	eq
 8004350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004354:	2500      	movne	r5, #0
 8004356:	4293      	cmp	r3, r2
 8004358:	bfc4      	itt	gt
 800435a:	1a9b      	subgt	r3, r3, r2
 800435c:	18ed      	addgt	r5, r5, r3
 800435e:	2600      	movs	r6, #0
 8004360:	341a      	adds	r4, #26
 8004362:	42b5      	cmp	r5, r6
 8004364:	d11a      	bne.n	800439c <_printf_common+0xc8>
 8004366:	2000      	movs	r0, #0
 8004368:	e008      	b.n	800437c <_printf_common+0xa8>
 800436a:	2301      	movs	r3, #1
 800436c:	4652      	mov	r2, sl
 800436e:	4649      	mov	r1, r9
 8004370:	4638      	mov	r0, r7
 8004372:	47c0      	blx	r8
 8004374:	3001      	adds	r0, #1
 8004376:	d103      	bne.n	8004380 <_printf_common+0xac>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	3501      	adds	r5, #1
 8004382:	e7c6      	b.n	8004312 <_printf_common+0x3e>
 8004384:	18e1      	adds	r1, r4, r3
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	2030      	movs	r0, #48	; 0x30
 800438a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800438e:	4422      	add	r2, r4
 8004390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004398:	3302      	adds	r3, #2
 800439a:	e7c7      	b.n	800432c <_printf_common+0x58>
 800439c:	2301      	movs	r3, #1
 800439e:	4622      	mov	r2, r4
 80043a0:	4649      	mov	r1, r9
 80043a2:	4638      	mov	r0, r7
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d0e6      	beq.n	8004378 <_printf_common+0xa4>
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7d9      	b.n	8004362 <_printf_common+0x8e>
	...

080043b0 <_printf_i>:
 80043b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	460c      	mov	r4, r1
 80043b6:	4691      	mov	r9, r2
 80043b8:	7e27      	ldrb	r7, [r4, #24]
 80043ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043bc:	2f78      	cmp	r7, #120	; 0x78
 80043be:	4680      	mov	r8, r0
 80043c0:	469a      	mov	sl, r3
 80043c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c6:	d807      	bhi.n	80043d8 <_printf_i+0x28>
 80043c8:	2f62      	cmp	r7, #98	; 0x62
 80043ca:	d80a      	bhi.n	80043e2 <_printf_i+0x32>
 80043cc:	2f00      	cmp	r7, #0
 80043ce:	f000 80d8 	beq.w	8004582 <_printf_i+0x1d2>
 80043d2:	2f58      	cmp	r7, #88	; 0x58
 80043d4:	f000 80a3 	beq.w	800451e <_printf_i+0x16e>
 80043d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043e0:	e03a      	b.n	8004458 <_printf_i+0xa8>
 80043e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043e6:	2b15      	cmp	r3, #21
 80043e8:	d8f6      	bhi.n	80043d8 <_printf_i+0x28>
 80043ea:	a001      	add	r0, pc, #4	; (adr r0, 80043f0 <_printf_i+0x40>)
 80043ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043f0:	08004449 	.word	0x08004449
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	080043d9 	.word	0x080043d9
 80043fc:	080043d9 	.word	0x080043d9
 8004400:	080043d9 	.word	0x080043d9
 8004404:	080043d9 	.word	0x080043d9
 8004408:	0800445d 	.word	0x0800445d
 800440c:	080043d9 	.word	0x080043d9
 8004410:	080043d9 	.word	0x080043d9
 8004414:	080043d9 	.word	0x080043d9
 8004418:	080043d9 	.word	0x080043d9
 800441c:	08004569 	.word	0x08004569
 8004420:	0800448d 	.word	0x0800448d
 8004424:	0800454b 	.word	0x0800454b
 8004428:	080043d9 	.word	0x080043d9
 800442c:	080043d9 	.word	0x080043d9
 8004430:	0800458b 	.word	0x0800458b
 8004434:	080043d9 	.word	0x080043d9
 8004438:	0800448d 	.word	0x0800448d
 800443c:	080043d9 	.word	0x080043d9
 8004440:	080043d9 	.word	0x080043d9
 8004444:	08004553 	.word	0x08004553
 8004448:	680b      	ldr	r3, [r1, #0]
 800444a:	1d1a      	adds	r2, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	600a      	str	r2, [r1, #0]
 8004450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004458:	2301      	movs	r3, #1
 800445a:	e0a3      	b.n	80045a4 <_printf_i+0x1f4>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	6808      	ldr	r0, [r1, #0]
 8004460:	062e      	lsls	r6, r5, #24
 8004462:	f100 0304 	add.w	r3, r0, #4
 8004466:	d50a      	bpl.n	800447e <_printf_i+0xce>
 8004468:	6805      	ldr	r5, [r0, #0]
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	2d00      	cmp	r5, #0
 800446e:	da03      	bge.n	8004478 <_printf_i+0xc8>
 8004470:	232d      	movs	r3, #45	; 0x2d
 8004472:	426d      	negs	r5, r5
 8004474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004478:	485e      	ldr	r0, [pc, #376]	; (80045f4 <_printf_i+0x244>)
 800447a:	230a      	movs	r3, #10
 800447c:	e019      	b.n	80044b2 <_printf_i+0x102>
 800447e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004482:	6805      	ldr	r5, [r0, #0]
 8004484:	600b      	str	r3, [r1, #0]
 8004486:	bf18      	it	ne
 8004488:	b22d      	sxthne	r5, r5
 800448a:	e7ef      	b.n	800446c <_printf_i+0xbc>
 800448c:	680b      	ldr	r3, [r1, #0]
 800448e:	6825      	ldr	r5, [r4, #0]
 8004490:	1d18      	adds	r0, r3, #4
 8004492:	6008      	str	r0, [r1, #0]
 8004494:	0628      	lsls	r0, r5, #24
 8004496:	d501      	bpl.n	800449c <_printf_i+0xec>
 8004498:	681d      	ldr	r5, [r3, #0]
 800449a:	e002      	b.n	80044a2 <_printf_i+0xf2>
 800449c:	0669      	lsls	r1, r5, #25
 800449e:	d5fb      	bpl.n	8004498 <_printf_i+0xe8>
 80044a0:	881d      	ldrh	r5, [r3, #0]
 80044a2:	4854      	ldr	r0, [pc, #336]	; (80045f4 <_printf_i+0x244>)
 80044a4:	2f6f      	cmp	r7, #111	; 0x6f
 80044a6:	bf0c      	ite	eq
 80044a8:	2308      	moveq	r3, #8
 80044aa:	230a      	movne	r3, #10
 80044ac:	2100      	movs	r1, #0
 80044ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b2:	6866      	ldr	r6, [r4, #4]
 80044b4:	60a6      	str	r6, [r4, #8]
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	bfa2      	ittt	ge
 80044ba:	6821      	ldrge	r1, [r4, #0]
 80044bc:	f021 0104 	bicge.w	r1, r1, #4
 80044c0:	6021      	strge	r1, [r4, #0]
 80044c2:	b90d      	cbnz	r5, 80044c8 <_printf_i+0x118>
 80044c4:	2e00      	cmp	r6, #0
 80044c6:	d04d      	beq.n	8004564 <_printf_i+0x1b4>
 80044c8:	4616      	mov	r6, r2
 80044ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80044ce:	fb03 5711 	mls	r7, r3, r1, r5
 80044d2:	5dc7      	ldrb	r7, [r0, r7]
 80044d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044d8:	462f      	mov	r7, r5
 80044da:	42bb      	cmp	r3, r7
 80044dc:	460d      	mov	r5, r1
 80044de:	d9f4      	bls.n	80044ca <_printf_i+0x11a>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d10b      	bne.n	80044fc <_printf_i+0x14c>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	07df      	lsls	r7, r3, #31
 80044e8:	d508      	bpl.n	80044fc <_printf_i+0x14c>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	6861      	ldr	r1, [r4, #4]
 80044ee:	4299      	cmp	r1, r3
 80044f0:	bfde      	ittt	le
 80044f2:	2330      	movle	r3, #48	; 0x30
 80044f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044fc:	1b92      	subs	r2, r2, r6
 80044fe:	6122      	str	r2, [r4, #16]
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	464b      	mov	r3, r9
 8004506:	aa03      	add	r2, sp, #12
 8004508:	4621      	mov	r1, r4
 800450a:	4640      	mov	r0, r8
 800450c:	f7ff fee2 	bl	80042d4 <_printf_common>
 8004510:	3001      	adds	r0, #1
 8004512:	d14c      	bne.n	80045ae <_printf_i+0x1fe>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	b004      	add	sp, #16
 800451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451e:	4835      	ldr	r0, [pc, #212]	; (80045f4 <_printf_i+0x244>)
 8004520:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	680e      	ldr	r6, [r1, #0]
 8004528:	061f      	lsls	r7, r3, #24
 800452a:	f856 5b04 	ldr.w	r5, [r6], #4
 800452e:	600e      	str	r6, [r1, #0]
 8004530:	d514      	bpl.n	800455c <_printf_i+0x1ac>
 8004532:	07d9      	lsls	r1, r3, #31
 8004534:	bf44      	itt	mi
 8004536:	f043 0320 	orrmi.w	r3, r3, #32
 800453a:	6023      	strmi	r3, [r4, #0]
 800453c:	b91d      	cbnz	r5, 8004546 <_printf_i+0x196>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	f023 0320 	bic.w	r3, r3, #32
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	2310      	movs	r3, #16
 8004548:	e7b0      	b.n	80044ac <_printf_i+0xfc>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f043 0320 	orr.w	r3, r3, #32
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	2378      	movs	r3, #120	; 0x78
 8004554:	4828      	ldr	r0, [pc, #160]	; (80045f8 <_printf_i+0x248>)
 8004556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800455a:	e7e3      	b.n	8004524 <_printf_i+0x174>
 800455c:	065e      	lsls	r6, r3, #25
 800455e:	bf48      	it	mi
 8004560:	b2ad      	uxthmi	r5, r5
 8004562:	e7e6      	b.n	8004532 <_printf_i+0x182>
 8004564:	4616      	mov	r6, r2
 8004566:	e7bb      	b.n	80044e0 <_printf_i+0x130>
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	6826      	ldr	r6, [r4, #0]
 800456c:	6960      	ldr	r0, [r4, #20]
 800456e:	1d1d      	adds	r5, r3, #4
 8004570:	600d      	str	r5, [r1, #0]
 8004572:	0635      	lsls	r5, r6, #24
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	d501      	bpl.n	800457c <_printf_i+0x1cc>
 8004578:	6018      	str	r0, [r3, #0]
 800457a:	e002      	b.n	8004582 <_printf_i+0x1d2>
 800457c:	0671      	lsls	r1, r6, #25
 800457e:	d5fb      	bpl.n	8004578 <_printf_i+0x1c8>
 8004580:	8018      	strh	r0, [r3, #0]
 8004582:	2300      	movs	r3, #0
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	4616      	mov	r6, r2
 8004588:	e7ba      	b.n	8004500 <_printf_i+0x150>
 800458a:	680b      	ldr	r3, [r1, #0]
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	600a      	str	r2, [r1, #0]
 8004590:	681e      	ldr	r6, [r3, #0]
 8004592:	6862      	ldr	r2, [r4, #4]
 8004594:	2100      	movs	r1, #0
 8004596:	4630      	mov	r0, r6
 8004598:	f7fb fe22 	bl	80001e0 <memchr>
 800459c:	b108      	cbz	r0, 80045a2 <_printf_i+0x1f2>
 800459e:	1b80      	subs	r0, r0, r6
 80045a0:	6060      	str	r0, [r4, #4]
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	2300      	movs	r3, #0
 80045a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ac:	e7a8      	b.n	8004500 <_printf_i+0x150>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	4632      	mov	r2, r6
 80045b2:	4649      	mov	r1, r9
 80045b4:	4640      	mov	r0, r8
 80045b6:	47d0      	blx	sl
 80045b8:	3001      	adds	r0, #1
 80045ba:	d0ab      	beq.n	8004514 <_printf_i+0x164>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	079b      	lsls	r3, r3, #30
 80045c0:	d413      	bmi.n	80045ea <_printf_i+0x23a>
 80045c2:	68e0      	ldr	r0, [r4, #12]
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	4298      	cmp	r0, r3
 80045c8:	bfb8      	it	lt
 80045ca:	4618      	movlt	r0, r3
 80045cc:	e7a4      	b.n	8004518 <_printf_i+0x168>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4632      	mov	r2, r6
 80045d2:	4649      	mov	r1, r9
 80045d4:	4640      	mov	r0, r8
 80045d6:	47d0      	blx	sl
 80045d8:	3001      	adds	r0, #1
 80045da:	d09b      	beq.n	8004514 <_printf_i+0x164>
 80045dc:	3501      	adds	r5, #1
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	9903      	ldr	r1, [sp, #12]
 80045e2:	1a5b      	subs	r3, r3, r1
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dcf2      	bgt.n	80045ce <_printf_i+0x21e>
 80045e8:	e7eb      	b.n	80045c2 <_printf_i+0x212>
 80045ea:	2500      	movs	r5, #0
 80045ec:	f104 0619 	add.w	r6, r4, #25
 80045f0:	e7f5      	b.n	80045de <_printf_i+0x22e>
 80045f2:	bf00      	nop
 80045f4:	080057ad 	.word	0x080057ad
 80045f8:	080057be 	.word	0x080057be

080045fc <_vsiprintf_r>:
 80045fc:	b500      	push	{lr}
 80045fe:	b09b      	sub	sp, #108	; 0x6c
 8004600:	9100      	str	r1, [sp, #0]
 8004602:	9104      	str	r1, [sp, #16]
 8004604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004608:	9105      	str	r1, [sp, #20]
 800460a:	9102      	str	r1, [sp, #8]
 800460c:	4905      	ldr	r1, [pc, #20]	; (8004624 <_vsiprintf_r+0x28>)
 800460e:	9103      	str	r1, [sp, #12]
 8004610:	4669      	mov	r1, sp
 8004612:	f000 fc3f 	bl	8004e94 <_svfiprintf_r>
 8004616:	9b00      	ldr	r3, [sp, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	b01b      	add	sp, #108	; 0x6c
 800461e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004622:	bf00      	nop
 8004624:	ffff0208 	.word	0xffff0208

08004628 <vsiprintf>:
 8004628:	4613      	mov	r3, r2
 800462a:	460a      	mov	r2, r1
 800462c:	4601      	mov	r1, r0
 800462e:	4802      	ldr	r0, [pc, #8]	; (8004638 <vsiprintf+0x10>)
 8004630:	6800      	ldr	r0, [r0, #0]
 8004632:	f7ff bfe3 	b.w	80045fc <_vsiprintf_r>
 8004636:	bf00      	nop
 8004638:	2000000c 	.word	0x2000000c

0800463c <__swbuf_r>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	460e      	mov	r6, r1
 8004640:	4614      	mov	r4, r2
 8004642:	4605      	mov	r5, r0
 8004644:	b118      	cbz	r0, 800464e <__swbuf_r+0x12>
 8004646:	6983      	ldr	r3, [r0, #24]
 8004648:	b90b      	cbnz	r3, 800464e <__swbuf_r+0x12>
 800464a:	f000 f9d9 	bl	8004a00 <__sinit>
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <__swbuf_r+0x98>)
 8004650:	429c      	cmp	r4, r3
 8004652:	d12b      	bne.n	80046ac <__swbuf_r+0x70>
 8004654:	686c      	ldr	r4, [r5, #4]
 8004656:	69a3      	ldr	r3, [r4, #24]
 8004658:	60a3      	str	r3, [r4, #8]
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	071a      	lsls	r2, r3, #28
 800465e:	d52f      	bpl.n	80046c0 <__swbuf_r+0x84>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	b36b      	cbz	r3, 80046c0 <__swbuf_r+0x84>
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	1ac0      	subs	r0, r0, r3
 800466a:	6963      	ldr	r3, [r4, #20]
 800466c:	b2f6      	uxtb	r6, r6
 800466e:	4283      	cmp	r3, r0
 8004670:	4637      	mov	r7, r6
 8004672:	dc04      	bgt.n	800467e <__swbuf_r+0x42>
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	f000 f92e 	bl	80048d8 <_fflush_r>
 800467c:	bb30      	cbnz	r0, 80046cc <__swbuf_r+0x90>
 800467e:	68a3      	ldr	r3, [r4, #8]
 8004680:	3b01      	subs	r3, #1
 8004682:	60a3      	str	r3, [r4, #8]
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	6022      	str	r2, [r4, #0]
 800468a:	701e      	strb	r6, [r3, #0]
 800468c:	6963      	ldr	r3, [r4, #20]
 800468e:	3001      	adds	r0, #1
 8004690:	4283      	cmp	r3, r0
 8004692:	d004      	beq.n	800469e <__swbuf_r+0x62>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	07db      	lsls	r3, r3, #31
 8004698:	d506      	bpl.n	80046a8 <__swbuf_r+0x6c>
 800469a:	2e0a      	cmp	r6, #10
 800469c:	d104      	bne.n	80046a8 <__swbuf_r+0x6c>
 800469e:	4621      	mov	r1, r4
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 f919 	bl	80048d8 <_fflush_r>
 80046a6:	b988      	cbnz	r0, 80046cc <__swbuf_r+0x90>
 80046a8:	4638      	mov	r0, r7
 80046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <__swbuf_r+0x9c>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d101      	bne.n	80046b6 <__swbuf_r+0x7a>
 80046b2:	68ac      	ldr	r4, [r5, #8]
 80046b4:	e7cf      	b.n	8004656 <__swbuf_r+0x1a>
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <__swbuf_r+0xa0>)
 80046b8:	429c      	cmp	r4, r3
 80046ba:	bf08      	it	eq
 80046bc:	68ec      	ldreq	r4, [r5, #12]
 80046be:	e7ca      	b.n	8004656 <__swbuf_r+0x1a>
 80046c0:	4621      	mov	r1, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 f80c 	bl	80046e0 <__swsetup_r>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d0cb      	beq.n	8004664 <__swbuf_r+0x28>
 80046cc:	f04f 37ff 	mov.w	r7, #4294967295
 80046d0:	e7ea      	b.n	80046a8 <__swbuf_r+0x6c>
 80046d2:	bf00      	nop
 80046d4:	080057f0 	.word	0x080057f0
 80046d8:	08005810 	.word	0x08005810
 80046dc:	080057d0 	.word	0x080057d0

080046e0 <__swsetup_r>:
 80046e0:	4b32      	ldr	r3, [pc, #200]	; (80047ac <__swsetup_r+0xcc>)
 80046e2:	b570      	push	{r4, r5, r6, lr}
 80046e4:	681d      	ldr	r5, [r3, #0]
 80046e6:	4606      	mov	r6, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	b125      	cbz	r5, 80046f6 <__swsetup_r+0x16>
 80046ec:	69ab      	ldr	r3, [r5, #24]
 80046ee:	b913      	cbnz	r3, 80046f6 <__swsetup_r+0x16>
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f985 	bl	8004a00 <__sinit>
 80046f6:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <__swsetup_r+0xd0>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	d10f      	bne.n	800471c <__swsetup_r+0x3c>
 80046fc:	686c      	ldr	r4, [r5, #4]
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004704:	0719      	lsls	r1, r3, #28
 8004706:	d42c      	bmi.n	8004762 <__swsetup_r+0x82>
 8004708:	06dd      	lsls	r5, r3, #27
 800470a:	d411      	bmi.n	8004730 <__swsetup_r+0x50>
 800470c:	2309      	movs	r3, #9
 800470e:	6033      	str	r3, [r6, #0]
 8004710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	f04f 30ff 	mov.w	r0, #4294967295
 800471a:	e03e      	b.n	800479a <__swsetup_r+0xba>
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <__swsetup_r+0xd4>)
 800471e:	429c      	cmp	r4, r3
 8004720:	d101      	bne.n	8004726 <__swsetup_r+0x46>
 8004722:	68ac      	ldr	r4, [r5, #8]
 8004724:	e7eb      	b.n	80046fe <__swsetup_r+0x1e>
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <__swsetup_r+0xd8>)
 8004728:	429c      	cmp	r4, r3
 800472a:	bf08      	it	eq
 800472c:	68ec      	ldreq	r4, [r5, #12]
 800472e:	e7e6      	b.n	80046fe <__swsetup_r+0x1e>
 8004730:	0758      	lsls	r0, r3, #29
 8004732:	d512      	bpl.n	800475a <__swsetup_r+0x7a>
 8004734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004736:	b141      	cbz	r1, 800474a <__swsetup_r+0x6a>
 8004738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800473c:	4299      	cmp	r1, r3
 800473e:	d002      	beq.n	8004746 <__swsetup_r+0x66>
 8004740:	4630      	mov	r0, r6
 8004742:	f000 fa7b 	bl	8004c3c <_free_r>
 8004746:	2300      	movs	r3, #0
 8004748:	6363      	str	r3, [r4, #52]	; 0x34
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	2300      	movs	r3, #0
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	b94b      	cbnz	r3, 800477a <__swsetup_r+0x9a>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d003      	beq.n	800477a <__swsetup_r+0x9a>
 8004772:	4621      	mov	r1, r4
 8004774:	4630      	mov	r0, r6
 8004776:	f000 fa07 	bl	8004b88 <__smakebuf_r>
 800477a:	89a0      	ldrh	r0, [r4, #12]
 800477c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004780:	f010 0301 	ands.w	r3, r0, #1
 8004784:	d00a      	beq.n	800479c <__swsetup_r+0xbc>
 8004786:	2300      	movs	r3, #0
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	6963      	ldr	r3, [r4, #20]
 800478c:	425b      	negs	r3, r3
 800478e:	61a3      	str	r3, [r4, #24]
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	b943      	cbnz	r3, 80047a6 <__swsetup_r+0xc6>
 8004794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004798:	d1ba      	bne.n	8004710 <__swsetup_r+0x30>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	0781      	lsls	r1, r0, #30
 800479e:	bf58      	it	pl
 80047a0:	6963      	ldrpl	r3, [r4, #20]
 80047a2:	60a3      	str	r3, [r4, #8]
 80047a4:	e7f4      	b.n	8004790 <__swsetup_r+0xb0>
 80047a6:	2000      	movs	r0, #0
 80047a8:	e7f7      	b.n	800479a <__swsetup_r+0xba>
 80047aa:	bf00      	nop
 80047ac:	2000000c 	.word	0x2000000c
 80047b0:	080057f0 	.word	0x080057f0
 80047b4:	08005810 	.word	0x08005810
 80047b8:	080057d0 	.word	0x080057d0

080047bc <abort>:
 80047bc:	b508      	push	{r3, lr}
 80047be:	2006      	movs	r0, #6
 80047c0:	f000 fca0 	bl	8005104 <raise>
 80047c4:	2001      	movs	r0, #1
 80047c6:	f7fb ff2f 	bl	8000628 <_exit>
	...

080047cc <__sflush_r>:
 80047cc:	898a      	ldrh	r2, [r1, #12]
 80047ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	0710      	lsls	r0, r2, #28
 80047d6:	460c      	mov	r4, r1
 80047d8:	d458      	bmi.n	800488c <__sflush_r+0xc0>
 80047da:	684b      	ldr	r3, [r1, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dc05      	bgt.n	80047ec <__sflush_r+0x20>
 80047e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dc02      	bgt.n	80047ec <__sflush_r+0x20>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ee:	2e00      	cmp	r6, #0
 80047f0:	d0f9      	beq.n	80047e6 <__sflush_r+0x1a>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047f8:	682f      	ldr	r7, [r5, #0]
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	d032      	beq.n	8004864 <__sflush_r+0x98>
 80047fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	075a      	lsls	r2, r3, #29
 8004804:	d505      	bpl.n	8004812 <__sflush_r+0x46>
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	1ac0      	subs	r0, r0, r3
 800480a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800480c:	b10b      	cbz	r3, 8004812 <__sflush_r+0x46>
 800480e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004810:	1ac0      	subs	r0, r0, r3
 8004812:	2300      	movs	r3, #0
 8004814:	4602      	mov	r2, r0
 8004816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004818:	6a21      	ldr	r1, [r4, #32]
 800481a:	4628      	mov	r0, r5
 800481c:	47b0      	blx	r6
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	d106      	bne.n	8004832 <__sflush_r+0x66>
 8004824:	6829      	ldr	r1, [r5, #0]
 8004826:	291d      	cmp	r1, #29
 8004828:	d82c      	bhi.n	8004884 <__sflush_r+0xb8>
 800482a:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <__sflush_r+0x108>)
 800482c:	40ca      	lsrs	r2, r1
 800482e:	07d6      	lsls	r6, r2, #31
 8004830:	d528      	bpl.n	8004884 <__sflush_r+0xb8>
 8004832:	2200      	movs	r2, #0
 8004834:	6062      	str	r2, [r4, #4]
 8004836:	04d9      	lsls	r1, r3, #19
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	6022      	str	r2, [r4, #0]
 800483c:	d504      	bpl.n	8004848 <__sflush_r+0x7c>
 800483e:	1c42      	adds	r2, r0, #1
 8004840:	d101      	bne.n	8004846 <__sflush_r+0x7a>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	b903      	cbnz	r3, 8004848 <__sflush_r+0x7c>
 8004846:	6560      	str	r0, [r4, #84]	; 0x54
 8004848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484a:	602f      	str	r7, [r5, #0]
 800484c:	2900      	cmp	r1, #0
 800484e:	d0ca      	beq.n	80047e6 <__sflush_r+0x1a>
 8004850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004854:	4299      	cmp	r1, r3
 8004856:	d002      	beq.n	800485e <__sflush_r+0x92>
 8004858:	4628      	mov	r0, r5
 800485a:	f000 f9ef 	bl	8004c3c <_free_r>
 800485e:	2000      	movs	r0, #0
 8004860:	6360      	str	r0, [r4, #52]	; 0x34
 8004862:	e7c1      	b.n	80047e8 <__sflush_r+0x1c>
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	2301      	movs	r3, #1
 8004868:	4628      	mov	r0, r5
 800486a:	47b0      	blx	r6
 800486c:	1c41      	adds	r1, r0, #1
 800486e:	d1c7      	bne.n	8004800 <__sflush_r+0x34>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0c4      	beq.n	8004800 <__sflush_r+0x34>
 8004876:	2b1d      	cmp	r3, #29
 8004878:	d001      	beq.n	800487e <__sflush_r+0xb2>
 800487a:	2b16      	cmp	r3, #22
 800487c:	d101      	bne.n	8004882 <__sflush_r+0xb6>
 800487e:	602f      	str	r7, [r5, #0]
 8004880:	e7b1      	b.n	80047e6 <__sflush_r+0x1a>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	e7ad      	b.n	80047e8 <__sflush_r+0x1c>
 800488c:	690f      	ldr	r7, [r1, #16]
 800488e:	2f00      	cmp	r7, #0
 8004890:	d0a9      	beq.n	80047e6 <__sflush_r+0x1a>
 8004892:	0793      	lsls	r3, r2, #30
 8004894:	680e      	ldr	r6, [r1, #0]
 8004896:	bf08      	it	eq
 8004898:	694b      	ldreq	r3, [r1, #20]
 800489a:	600f      	str	r7, [r1, #0]
 800489c:	bf18      	it	ne
 800489e:	2300      	movne	r3, #0
 80048a0:	eba6 0807 	sub.w	r8, r6, r7
 80048a4:	608b      	str	r3, [r1, #8]
 80048a6:	f1b8 0f00 	cmp.w	r8, #0
 80048aa:	dd9c      	ble.n	80047e6 <__sflush_r+0x1a>
 80048ac:	6a21      	ldr	r1, [r4, #32]
 80048ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048b0:	4643      	mov	r3, r8
 80048b2:	463a      	mov	r2, r7
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	2800      	cmp	r0, #0
 80048ba:	dc06      	bgt.n	80048ca <__sflush_r+0xfe>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	e78e      	b.n	80047e8 <__sflush_r+0x1c>
 80048ca:	4407      	add	r7, r0
 80048cc:	eba8 0800 	sub.w	r8, r8, r0
 80048d0:	e7e9      	b.n	80048a6 <__sflush_r+0xda>
 80048d2:	bf00      	nop
 80048d4:	20400001 	.word	0x20400001

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b913      	cbnz	r3, 80048e8 <_fflush_r+0x10>
 80048e2:	2500      	movs	r5, #0
 80048e4:	4628      	mov	r0, r5
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	b118      	cbz	r0, 80048f2 <_fflush_r+0x1a>
 80048ea:	6983      	ldr	r3, [r0, #24]
 80048ec:	b90b      	cbnz	r3, 80048f2 <_fflush_r+0x1a>
 80048ee:	f000 f887 	bl	8004a00 <__sinit>
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <_fflush_r+0x6c>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	d11b      	bne.n	8004930 <_fflush_r+0x58>
 80048f8:	686c      	ldr	r4, [r5, #4]
 80048fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0ef      	beq.n	80048e2 <_fflush_r+0xa>
 8004902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004904:	07d0      	lsls	r0, r2, #31
 8004906:	d404      	bmi.n	8004912 <_fflush_r+0x3a>
 8004908:	0599      	lsls	r1, r3, #22
 800490a:	d402      	bmi.n	8004912 <_fflush_r+0x3a>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f000 f915 	bl	8004b3c <__retarget_lock_acquire_recursive>
 8004912:	4628      	mov	r0, r5
 8004914:	4621      	mov	r1, r4
 8004916:	f7ff ff59 	bl	80047cc <__sflush_r>
 800491a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800491c:	07da      	lsls	r2, r3, #31
 800491e:	4605      	mov	r5, r0
 8004920:	d4e0      	bmi.n	80048e4 <_fflush_r+0xc>
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	059b      	lsls	r3, r3, #22
 8004926:	d4dd      	bmi.n	80048e4 <_fflush_r+0xc>
 8004928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800492a:	f000 f908 	bl	8004b3e <__retarget_lock_release_recursive>
 800492e:	e7d9      	b.n	80048e4 <_fflush_r+0xc>
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_fflush_r+0x70>)
 8004932:	429c      	cmp	r4, r3
 8004934:	d101      	bne.n	800493a <_fflush_r+0x62>
 8004936:	68ac      	ldr	r4, [r5, #8]
 8004938:	e7df      	b.n	80048fa <_fflush_r+0x22>
 800493a:	4b04      	ldr	r3, [pc, #16]	; (800494c <_fflush_r+0x74>)
 800493c:	429c      	cmp	r4, r3
 800493e:	bf08      	it	eq
 8004940:	68ec      	ldreq	r4, [r5, #12]
 8004942:	e7da      	b.n	80048fa <_fflush_r+0x22>
 8004944:	080057f0 	.word	0x080057f0
 8004948:	08005810 	.word	0x08005810
 800494c:	080057d0 	.word	0x080057d0

08004950 <std>:
 8004950:	2300      	movs	r3, #0
 8004952:	b510      	push	{r4, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	e9c0 3300 	strd	r3, r3, [r0]
 800495a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495e:	6083      	str	r3, [r0, #8]
 8004960:	8181      	strh	r1, [r0, #12]
 8004962:	6643      	str	r3, [r0, #100]	; 0x64
 8004964:	81c2      	strh	r2, [r0, #14]
 8004966:	6183      	str	r3, [r0, #24]
 8004968:	4619      	mov	r1, r3
 800496a:	2208      	movs	r2, #8
 800496c:	305c      	adds	r0, #92	; 0x5c
 800496e:	f7ff fb4f 	bl	8004010 <memset>
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <std+0x38>)
 8004974:	6263      	str	r3, [r4, #36]	; 0x24
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <std+0x3c>)
 8004978:	62a3      	str	r3, [r4, #40]	; 0x28
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <std+0x40>)
 800497c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <std+0x44>)
 8004980:	6224      	str	r4, [r4, #32]
 8004982:	6323      	str	r3, [r4, #48]	; 0x30
 8004984:	bd10      	pop	{r4, pc}
 8004986:	bf00      	nop
 8004988:	0800513d 	.word	0x0800513d
 800498c:	0800515f 	.word	0x0800515f
 8004990:	08005197 	.word	0x08005197
 8004994:	080051bb 	.word	0x080051bb

08004998 <_cleanup_r>:
 8004998:	4901      	ldr	r1, [pc, #4]	; (80049a0 <_cleanup_r+0x8>)
 800499a:	f000 b8af 	b.w	8004afc <_fwalk_reent>
 800499e:	bf00      	nop
 80049a0:	080048d9 	.word	0x080048d9

080049a4 <__sfmoreglue>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	1e4a      	subs	r2, r1, #1
 80049a8:	2568      	movs	r5, #104	; 0x68
 80049aa:	4355      	muls	r5, r2
 80049ac:	460e      	mov	r6, r1
 80049ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049b2:	f000 f993 	bl	8004cdc <_malloc_r>
 80049b6:	4604      	mov	r4, r0
 80049b8:	b140      	cbz	r0, 80049cc <__sfmoreglue+0x28>
 80049ba:	2100      	movs	r1, #0
 80049bc:	e9c0 1600 	strd	r1, r6, [r0]
 80049c0:	300c      	adds	r0, #12
 80049c2:	60a0      	str	r0, [r4, #8]
 80049c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049c8:	f7ff fb22 	bl	8004010 <memset>
 80049cc:	4620      	mov	r0, r4
 80049ce:	bd70      	pop	{r4, r5, r6, pc}

080049d0 <__sfp_lock_acquire>:
 80049d0:	4801      	ldr	r0, [pc, #4]	; (80049d8 <__sfp_lock_acquire+0x8>)
 80049d2:	f000 b8b3 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 80049d6:	bf00      	nop
 80049d8:	200003b4 	.word	0x200003b4

080049dc <__sfp_lock_release>:
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <__sfp_lock_release+0x8>)
 80049de:	f000 b8ae 	b.w	8004b3e <__retarget_lock_release_recursive>
 80049e2:	bf00      	nop
 80049e4:	200003b4 	.word	0x200003b4

080049e8 <__sinit_lock_acquire>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__sinit_lock_acquire+0x8>)
 80049ea:	f000 b8a7 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	200003af 	.word	0x200003af

080049f4 <__sinit_lock_release>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__sinit_lock_release+0x8>)
 80049f6:	f000 b8a2 	b.w	8004b3e <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	200003af 	.word	0x200003af

08004a00 <__sinit>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4604      	mov	r4, r0
 8004a04:	f7ff fff0 	bl	80049e8 <__sinit_lock_acquire>
 8004a08:	69a3      	ldr	r3, [r4, #24]
 8004a0a:	b11b      	cbz	r3, 8004a14 <__sinit+0x14>
 8004a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a10:	f7ff bff0 	b.w	80049f4 <__sinit_lock_release>
 8004a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a18:	6523      	str	r3, [r4, #80]	; 0x50
 8004a1a:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <__sinit+0x68>)
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <__sinit+0x6c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	bf04      	itt	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	61a3      	streq	r3, [r4, #24]
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 f820 	bl	8004a70 <__sfp>
 8004a30:	6060      	str	r0, [r4, #4]
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f81c 	bl	8004a70 <__sfp>
 8004a38:	60a0      	str	r0, [r4, #8]
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f000 f818 	bl	8004a70 <__sfp>
 8004a40:	2200      	movs	r2, #0
 8004a42:	60e0      	str	r0, [r4, #12]
 8004a44:	2104      	movs	r1, #4
 8004a46:	6860      	ldr	r0, [r4, #4]
 8004a48:	f7ff ff82 	bl	8004950 <std>
 8004a4c:	68a0      	ldr	r0, [r4, #8]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	2109      	movs	r1, #9
 8004a52:	f7ff ff7d 	bl	8004950 <std>
 8004a56:	68e0      	ldr	r0, [r4, #12]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	2112      	movs	r1, #18
 8004a5c:	f7ff ff78 	bl	8004950 <std>
 8004a60:	2301      	movs	r3, #1
 8004a62:	61a3      	str	r3, [r4, #24]
 8004a64:	e7d2      	b.n	8004a0c <__sinit+0xc>
 8004a66:	bf00      	nop
 8004a68:	08005798 	.word	0x08005798
 8004a6c:	08004999 	.word	0x08004999

08004a70 <__sfp>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	4607      	mov	r7, r0
 8004a74:	f7ff ffac 	bl	80049d0 <__sfp_lock_acquire>
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <__sfp+0x84>)
 8004a7a:	681e      	ldr	r6, [r3, #0]
 8004a7c:	69b3      	ldr	r3, [r6, #24]
 8004a7e:	b913      	cbnz	r3, 8004a86 <__sfp+0x16>
 8004a80:	4630      	mov	r0, r6
 8004a82:	f7ff ffbd 	bl	8004a00 <__sinit>
 8004a86:	3648      	adds	r6, #72	; 0x48
 8004a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	d503      	bpl.n	8004a98 <__sfp+0x28>
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	b30b      	cbz	r3, 8004ad8 <__sfp+0x68>
 8004a94:	6836      	ldr	r6, [r6, #0]
 8004a96:	e7f7      	b.n	8004a88 <__sfp+0x18>
 8004a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a9c:	b9d5      	cbnz	r5, 8004ad4 <__sfp+0x64>
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <__sfp+0x88>)
 8004aa0:	60e3      	str	r3, [r4, #12]
 8004aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8004aa8:	f000 f847 	bl	8004b3a <__retarget_lock_init_recursive>
 8004aac:	f7ff ff96 	bl	80049dc <__sfp_lock_release>
 8004ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ab8:	6025      	str	r5, [r4, #0]
 8004aba:	61a5      	str	r5, [r4, #24]
 8004abc:	2208      	movs	r2, #8
 8004abe:	4629      	mov	r1, r5
 8004ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ac4:	f7ff faa4 	bl	8004010 <memset>
 8004ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad4:	3468      	adds	r4, #104	; 0x68
 8004ad6:	e7d9      	b.n	8004a8c <__sfp+0x1c>
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4638      	mov	r0, r7
 8004adc:	f7ff ff62 	bl	80049a4 <__sfmoreglue>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d1d5      	bne.n	8004a94 <__sfp+0x24>
 8004ae8:	f7ff ff78 	bl	80049dc <__sfp_lock_release>
 8004aec:	230c      	movs	r3, #12
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	e7ee      	b.n	8004ad0 <__sfp+0x60>
 8004af2:	bf00      	nop
 8004af4:	08005798 	.word	0x08005798
 8004af8:	ffff0001 	.word	0xffff0001

08004afc <_fwalk_reent>:
 8004afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b00:	4606      	mov	r6, r0
 8004b02:	4688      	mov	r8, r1
 8004b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b08:	2700      	movs	r7, #0
 8004b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b12:	d505      	bpl.n	8004b20 <_fwalk_reent+0x24>
 8004b14:	6824      	ldr	r4, [r4, #0]
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	d1f7      	bne.n	8004b0a <_fwalk_reent+0xe>
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b20:	89ab      	ldrh	r3, [r5, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d907      	bls.n	8004b36 <_fwalk_reent+0x3a>
 8004b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	d003      	beq.n	8004b36 <_fwalk_reent+0x3a>
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4630      	mov	r0, r6
 8004b32:	47c0      	blx	r8
 8004b34:	4307      	orrs	r7, r0
 8004b36:	3568      	adds	r5, #104	; 0x68
 8004b38:	e7e9      	b.n	8004b0e <_fwalk_reent+0x12>

08004b3a <__retarget_lock_init_recursive>:
 8004b3a:	4770      	bx	lr

08004b3c <__retarget_lock_acquire_recursive>:
 8004b3c:	4770      	bx	lr

08004b3e <__retarget_lock_release_recursive>:
 8004b3e:	4770      	bx	lr

08004b40 <__swhatbuf_r>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	460e      	mov	r6, r1
 8004b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	b096      	sub	sp, #88	; 0x58
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	da07      	bge.n	8004b62 <__swhatbuf_r+0x22>
 8004b52:	2300      	movs	r3, #0
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	89b3      	ldrh	r3, [r6, #12]
 8004b58:	061a      	lsls	r2, r3, #24
 8004b5a:	d410      	bmi.n	8004b7e <__swhatbuf_r+0x3e>
 8004b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b60:	e00e      	b.n	8004b80 <__swhatbuf_r+0x40>
 8004b62:	466a      	mov	r2, sp
 8004b64:	f000 fb50 	bl	8005208 <_fstat_r>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	dbf2      	blt.n	8004b52 <__swhatbuf_r+0x12>
 8004b6c:	9a01      	ldr	r2, [sp, #4]
 8004b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b76:	425a      	negs	r2, r3
 8004b78:	415a      	adcs	r2, r3
 8004b7a:	602a      	str	r2, [r5, #0]
 8004b7c:	e7ee      	b.n	8004b5c <__swhatbuf_r+0x1c>
 8004b7e:	2340      	movs	r3, #64	; 0x40
 8004b80:	2000      	movs	r0, #0
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	b016      	add	sp, #88	; 0x58
 8004b86:	bd70      	pop	{r4, r5, r6, pc}

08004b88 <__smakebuf_r>:
 8004b88:	898b      	ldrh	r3, [r1, #12]
 8004b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b8c:	079d      	lsls	r5, r3, #30
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	d507      	bpl.n	8004ba4 <__smakebuf_r+0x1c>
 8004b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	ab01      	add	r3, sp, #4
 8004ba6:	466a      	mov	r2, sp
 8004ba8:	f7ff ffca 	bl	8004b40 <__swhatbuf_r>
 8004bac:	9900      	ldr	r1, [sp, #0]
 8004bae:	4605      	mov	r5, r0
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f000 f893 	bl	8004cdc <_malloc_r>
 8004bb6:	b948      	cbnz	r0, 8004bcc <__smakebuf_r+0x44>
 8004bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbc:	059a      	lsls	r2, r3, #22
 8004bbe:	d4ef      	bmi.n	8004ba0 <__smakebuf_r+0x18>
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	e7e3      	b.n	8004b94 <__smakebuf_r+0xc>
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <__smakebuf_r+0x7c>)
 8004bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	9b00      	ldr	r3, [sp, #0]
 8004bdc:	6163      	str	r3, [r4, #20]
 8004bde:	9b01      	ldr	r3, [sp, #4]
 8004be0:	6120      	str	r0, [r4, #16]
 8004be2:	b15b      	cbz	r3, 8004bfc <__smakebuf_r+0x74>
 8004be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be8:	4630      	mov	r0, r6
 8004bea:	f000 fb1f 	bl	800522c <_isatty_r>
 8004bee:	b128      	cbz	r0, 8004bfc <__smakebuf_r+0x74>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	89a0      	ldrh	r0, [r4, #12]
 8004bfe:	4305      	orrs	r5, r0
 8004c00:	81a5      	strh	r5, [r4, #12]
 8004c02:	e7cd      	b.n	8004ba0 <__smakebuf_r+0x18>
 8004c04:	08004999 	.word	0x08004999

08004c08 <memmove>:
 8004c08:	4288      	cmp	r0, r1
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	eb01 0402 	add.w	r4, r1, r2
 8004c10:	d902      	bls.n	8004c18 <memmove+0x10>
 8004c12:	4284      	cmp	r4, r0
 8004c14:	4623      	mov	r3, r4
 8004c16:	d807      	bhi.n	8004c28 <memmove+0x20>
 8004c18:	1e43      	subs	r3, r0, #1
 8004c1a:	42a1      	cmp	r1, r4
 8004c1c:	d008      	beq.n	8004c30 <memmove+0x28>
 8004c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c26:	e7f8      	b.n	8004c1a <memmove+0x12>
 8004c28:	4402      	add	r2, r0
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	428a      	cmp	r2, r1
 8004c2e:	d100      	bne.n	8004c32 <memmove+0x2a>
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c3a:	e7f7      	b.n	8004c2c <memmove+0x24>

08004c3c <_free_r>:
 8004c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c3e:	2900      	cmp	r1, #0
 8004c40:	d048      	beq.n	8004cd4 <_free_r+0x98>
 8004c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c46:	9001      	str	r0, [sp, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c4e:	bfb8      	it	lt
 8004c50:	18e4      	addlt	r4, r4, r3
 8004c52:	f000 fb0d 	bl	8005270 <__malloc_lock>
 8004c56:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <_free_r+0x9c>)
 8004c58:	9801      	ldr	r0, [sp, #4]
 8004c5a:	6813      	ldr	r3, [r2, #0]
 8004c5c:	4615      	mov	r5, r2
 8004c5e:	b933      	cbnz	r3, 8004c6e <_free_r+0x32>
 8004c60:	6063      	str	r3, [r4, #4]
 8004c62:	6014      	str	r4, [r2, #0]
 8004c64:	b003      	add	sp, #12
 8004c66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c6a:	f000 bb07 	b.w	800527c <__malloc_unlock>
 8004c6e:	42a3      	cmp	r3, r4
 8004c70:	d90b      	bls.n	8004c8a <_free_r+0x4e>
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	1862      	adds	r2, r4, r1
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bf04      	itt	eq
 8004c7a:	681a      	ldreq	r2, [r3, #0]
 8004c7c:	685b      	ldreq	r3, [r3, #4]
 8004c7e:	6063      	str	r3, [r4, #4]
 8004c80:	bf04      	itt	eq
 8004c82:	1852      	addeq	r2, r2, r1
 8004c84:	6022      	streq	r2, [r4, #0]
 8004c86:	602c      	str	r4, [r5, #0]
 8004c88:	e7ec      	b.n	8004c64 <_free_r+0x28>
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b10b      	cbz	r3, 8004c94 <_free_r+0x58>
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d9fa      	bls.n	8004c8a <_free_r+0x4e>
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	1855      	adds	r5, r2, r1
 8004c98:	42a5      	cmp	r5, r4
 8004c9a:	d10b      	bne.n	8004cb4 <_free_r+0x78>
 8004c9c:	6824      	ldr	r4, [r4, #0]
 8004c9e:	4421      	add	r1, r4
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	d1dd      	bne.n	8004c64 <_free_r+0x28>
 8004ca8:	681c      	ldr	r4, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	4421      	add	r1, r4
 8004cb0:	6011      	str	r1, [r2, #0]
 8004cb2:	e7d7      	b.n	8004c64 <_free_r+0x28>
 8004cb4:	d902      	bls.n	8004cbc <_free_r+0x80>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	e7d3      	b.n	8004c64 <_free_r+0x28>
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	1961      	adds	r1, r4, r5
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf04      	itt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	bf04      	itt	eq
 8004ccc:	1949      	addeq	r1, r1, r5
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	6054      	str	r4, [r2, #4]
 8004cd2:	e7c7      	b.n	8004c64 <_free_r+0x28>
 8004cd4:	b003      	add	sp, #12
 8004cd6:	bd30      	pop	{r4, r5, pc}
 8004cd8:	2000029c 	.word	0x2000029c

08004cdc <_malloc_r>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	1ccd      	adds	r5, r1, #3
 8004ce0:	f025 0503 	bic.w	r5, r5, #3
 8004ce4:	3508      	adds	r5, #8
 8004ce6:	2d0c      	cmp	r5, #12
 8004ce8:	bf38      	it	cc
 8004cea:	250c      	movcc	r5, #12
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	4606      	mov	r6, r0
 8004cf0:	db01      	blt.n	8004cf6 <_malloc_r+0x1a>
 8004cf2:	42a9      	cmp	r1, r5
 8004cf4:	d903      	bls.n	8004cfe <_malloc_r+0x22>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	6033      	str	r3, [r6, #0]
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cfe:	f000 fab7 	bl	8005270 <__malloc_lock>
 8004d02:	4921      	ldr	r1, [pc, #132]	; (8004d88 <_malloc_r+0xac>)
 8004d04:	680a      	ldr	r2, [r1, #0]
 8004d06:	4614      	mov	r4, r2
 8004d08:	b99c      	cbnz	r4, 8004d32 <_malloc_r+0x56>
 8004d0a:	4f20      	ldr	r7, [pc, #128]	; (8004d8c <_malloc_r+0xb0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	b923      	cbnz	r3, 8004d1a <_malloc_r+0x3e>
 8004d10:	4621      	mov	r1, r4
 8004d12:	4630      	mov	r0, r6
 8004d14:	f000 f9be 	bl	8005094 <_sbrk_r>
 8004d18:	6038      	str	r0, [r7, #0]
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f000 f9b9 	bl	8005094 <_sbrk_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d123      	bne.n	8004d6e <_malloc_r+0x92>
 8004d26:	230c      	movs	r3, #12
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 faa6 	bl	800527c <__malloc_unlock>
 8004d30:	e7e3      	b.n	8004cfa <_malloc_r+0x1e>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	1b5b      	subs	r3, r3, r5
 8004d36:	d417      	bmi.n	8004d68 <_malloc_r+0x8c>
 8004d38:	2b0b      	cmp	r3, #11
 8004d3a:	d903      	bls.n	8004d44 <_malloc_r+0x68>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	441c      	add	r4, r3
 8004d40:	6025      	str	r5, [r4, #0]
 8004d42:	e004      	b.n	8004d4e <_malloc_r+0x72>
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	42a2      	cmp	r2, r4
 8004d48:	bf0c      	ite	eq
 8004d4a:	600b      	streq	r3, [r1, #0]
 8004d4c:	6053      	strne	r3, [r2, #4]
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f000 fa94 	bl	800527c <__malloc_unlock>
 8004d54:	f104 000b 	add.w	r0, r4, #11
 8004d58:	1d23      	adds	r3, r4, #4
 8004d5a:	f020 0007 	bic.w	r0, r0, #7
 8004d5e:	1ac2      	subs	r2, r0, r3
 8004d60:	d0cc      	beq.n	8004cfc <_malloc_r+0x20>
 8004d62:	1a1b      	subs	r3, r3, r0
 8004d64:	50a3      	str	r3, [r4, r2]
 8004d66:	e7c9      	b.n	8004cfc <_malloc_r+0x20>
 8004d68:	4622      	mov	r2, r4
 8004d6a:	6864      	ldr	r4, [r4, #4]
 8004d6c:	e7cc      	b.n	8004d08 <_malloc_r+0x2c>
 8004d6e:	1cc4      	adds	r4, r0, #3
 8004d70:	f024 0403 	bic.w	r4, r4, #3
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d0e3      	beq.n	8004d40 <_malloc_r+0x64>
 8004d78:	1a21      	subs	r1, r4, r0
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f000 f98a 	bl	8005094 <_sbrk_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d1dd      	bne.n	8004d40 <_malloc_r+0x64>
 8004d84:	e7cf      	b.n	8004d26 <_malloc_r+0x4a>
 8004d86:	bf00      	nop
 8004d88:	2000029c 	.word	0x2000029c
 8004d8c:	200002a0 	.word	0x200002a0

08004d90 <_realloc_r>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	4607      	mov	r7, r0
 8004d94:	4614      	mov	r4, r2
 8004d96:	460e      	mov	r6, r1
 8004d98:	b921      	cbnz	r1, 8004da4 <_realloc_r+0x14>
 8004d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d9e:	4611      	mov	r1, r2
 8004da0:	f7ff bf9c 	b.w	8004cdc <_malloc_r>
 8004da4:	b922      	cbnz	r2, 8004db0 <_realloc_r+0x20>
 8004da6:	f7ff ff49 	bl	8004c3c <_free_r>
 8004daa:	4625      	mov	r5, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db0:	f000 fa6a 	bl	8005288 <_malloc_usable_size_r>
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d20f      	bcs.n	8004dd8 <_realloc_r+0x48>
 8004db8:	4621      	mov	r1, r4
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f7ff ff8e 	bl	8004cdc <_malloc_r>
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0f2      	beq.n	8004dac <_realloc_r+0x1c>
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4622      	mov	r2, r4
 8004dca:	f7ff f913 	bl	8003ff4 <memcpy>
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f7ff ff33 	bl	8004c3c <_free_r>
 8004dd6:	e7e9      	b.n	8004dac <_realloc_r+0x1c>
 8004dd8:	4635      	mov	r5, r6
 8004dda:	e7e7      	b.n	8004dac <_realloc_r+0x1c>

08004ddc <__ssputs_r>:
 8004ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de0:	688e      	ldr	r6, [r1, #8]
 8004de2:	429e      	cmp	r6, r3
 8004de4:	4682      	mov	sl, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	4690      	mov	r8, r2
 8004dea:	461f      	mov	r7, r3
 8004dec:	d838      	bhi.n	8004e60 <__ssputs_r+0x84>
 8004dee:	898a      	ldrh	r2, [r1, #12]
 8004df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004df4:	d032      	beq.n	8004e5c <__ssputs_r+0x80>
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	6909      	ldr	r1, [r1, #16]
 8004dfa:	eba5 0901 	sub.w	r9, r5, r1
 8004dfe:	6965      	ldr	r5, [r4, #20]
 8004e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e08:	3301      	adds	r3, #1
 8004e0a:	444b      	add	r3, r9
 8004e0c:	106d      	asrs	r5, r5, #1
 8004e0e:	429d      	cmp	r5, r3
 8004e10:	bf38      	it	cc
 8004e12:	461d      	movcc	r5, r3
 8004e14:	0553      	lsls	r3, r2, #21
 8004e16:	d531      	bpl.n	8004e7c <__ssputs_r+0xa0>
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f7ff ff5f 	bl	8004cdc <_malloc_r>
 8004e1e:	4606      	mov	r6, r0
 8004e20:	b950      	cbnz	r0, 8004e38 <__ssputs_r+0x5c>
 8004e22:	230c      	movs	r3, #12
 8004e24:	f8ca 3000 	str.w	r3, [sl]
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e38:	6921      	ldr	r1, [r4, #16]
 8004e3a:	464a      	mov	r2, r9
 8004e3c:	f7ff f8da 	bl	8003ff4 <memcpy>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	6126      	str	r6, [r4, #16]
 8004e4e:	6165      	str	r5, [r4, #20]
 8004e50:	444e      	add	r6, r9
 8004e52:	eba5 0509 	sub.w	r5, r5, r9
 8004e56:	6026      	str	r6, [r4, #0]
 8004e58:	60a5      	str	r5, [r4, #8]
 8004e5a:	463e      	mov	r6, r7
 8004e5c:	42be      	cmp	r6, r7
 8004e5e:	d900      	bls.n	8004e62 <__ssputs_r+0x86>
 8004e60:	463e      	mov	r6, r7
 8004e62:	4632      	mov	r2, r6
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	4641      	mov	r1, r8
 8004e68:	f7ff fece 	bl	8004c08 <memmove>
 8004e6c:	68a3      	ldr	r3, [r4, #8]
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	4432      	add	r2, r6
 8004e74:	60a3      	str	r3, [r4, #8]
 8004e76:	6022      	str	r2, [r4, #0]
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e7db      	b.n	8004e34 <__ssputs_r+0x58>
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	f7ff ff87 	bl	8004d90 <_realloc_r>
 8004e82:	4606      	mov	r6, r0
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d1e1      	bne.n	8004e4c <__ssputs_r+0x70>
 8004e88:	6921      	ldr	r1, [r4, #16]
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	f7ff fed6 	bl	8004c3c <_free_r>
 8004e90:	e7c7      	b.n	8004e22 <__ssputs_r+0x46>
	...

08004e94 <_svfiprintf_r>:
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	4698      	mov	r8, r3
 8004e9a:	898b      	ldrh	r3, [r1, #12]
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	b09d      	sub	sp, #116	; 0x74
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	d50e      	bpl.n	8004ec6 <_svfiprintf_r+0x32>
 8004ea8:	690b      	ldr	r3, [r1, #16]
 8004eaa:	b963      	cbnz	r3, 8004ec6 <_svfiprintf_r+0x32>
 8004eac:	2140      	movs	r1, #64	; 0x40
 8004eae:	f7ff ff15 	bl	8004cdc <_malloc_r>
 8004eb2:	6028      	str	r0, [r5, #0]
 8004eb4:	6128      	str	r0, [r5, #16]
 8004eb6:	b920      	cbnz	r0, 8004ec2 <_svfiprintf_r+0x2e>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e0d1      	b.n	8005066 <_svfiprintf_r+0x1d2>
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	616b      	str	r3, [r5, #20]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eca:	2320      	movs	r3, #32
 8004ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed4:	2330      	movs	r3, #48	; 0x30
 8004ed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005080 <_svfiprintf_r+0x1ec>
 8004eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ede:	f04f 0901 	mov.w	r9, #1
 8004ee2:	4623      	mov	r3, r4
 8004ee4:	469a      	mov	sl, r3
 8004ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eea:	b10a      	cbz	r2, 8004ef0 <_svfiprintf_r+0x5c>
 8004eec:	2a25      	cmp	r2, #37	; 0x25
 8004eee:	d1f9      	bne.n	8004ee4 <_svfiprintf_r+0x50>
 8004ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef4:	d00b      	beq.n	8004f0e <_svfiprintf_r+0x7a>
 8004ef6:	465b      	mov	r3, fp
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	4638      	mov	r0, r7
 8004efe:	f7ff ff6d 	bl	8004ddc <__ssputs_r>
 8004f02:	3001      	adds	r0, #1
 8004f04:	f000 80aa 	beq.w	800505c <_svfiprintf_r+0x1c8>
 8004f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f0a:	445a      	add	r2, fp
 8004f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80a2 	beq.w	800505c <_svfiprintf_r+0x1c8>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f22:	f10a 0a01 	add.w	sl, sl, #1
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	9307      	str	r3, [sp, #28]
 8004f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f30:	4654      	mov	r4, sl
 8004f32:	2205      	movs	r2, #5
 8004f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f38:	4851      	ldr	r0, [pc, #324]	; (8005080 <_svfiprintf_r+0x1ec>)
 8004f3a:	f7fb f951 	bl	80001e0 <memchr>
 8004f3e:	9a04      	ldr	r2, [sp, #16]
 8004f40:	b9d8      	cbnz	r0, 8004f7a <_svfiprintf_r+0xe6>
 8004f42:	06d0      	lsls	r0, r2, #27
 8004f44:	bf44      	itt	mi
 8004f46:	2320      	movmi	r3, #32
 8004f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f4c:	0711      	lsls	r1, r2, #28
 8004f4e:	bf44      	itt	mi
 8004f50:	232b      	movmi	r3, #43	; 0x2b
 8004f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f56:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5c:	d015      	beq.n	8004f8a <_svfiprintf_r+0xf6>
 8004f5e:	9a07      	ldr	r2, [sp, #28]
 8004f60:	4654      	mov	r4, sl
 8004f62:	2000      	movs	r0, #0
 8004f64:	f04f 0c0a 	mov.w	ip, #10
 8004f68:	4621      	mov	r1, r4
 8004f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6e:	3b30      	subs	r3, #48	; 0x30
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d94e      	bls.n	8005012 <_svfiprintf_r+0x17e>
 8004f74:	b1b0      	cbz	r0, 8004fa4 <_svfiprintf_r+0x110>
 8004f76:	9207      	str	r2, [sp, #28]
 8004f78:	e014      	b.n	8004fa4 <_svfiprintf_r+0x110>
 8004f7a:	eba0 0308 	sub.w	r3, r0, r8
 8004f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	46a2      	mov	sl, r4
 8004f88:	e7d2      	b.n	8004f30 <_svfiprintf_r+0x9c>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	1d19      	adds	r1, r3, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	9103      	str	r1, [sp, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfbb      	ittet	lt
 8004f96:	425b      	neglt	r3, r3
 8004f98:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9c:	9307      	strge	r3, [sp, #28]
 8004f9e:	9307      	strlt	r3, [sp, #28]
 8004fa0:	bfb8      	it	lt
 8004fa2:	9204      	strlt	r2, [sp, #16]
 8004fa4:	7823      	ldrb	r3, [r4, #0]
 8004fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa8:	d10c      	bne.n	8004fc4 <_svfiprintf_r+0x130>
 8004faa:	7863      	ldrb	r3, [r4, #1]
 8004fac:	2b2a      	cmp	r3, #42	; 0x2a
 8004fae:	d135      	bne.n	800501c <_svfiprintf_r+0x188>
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	9203      	str	r2, [sp, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bfb8      	it	lt
 8004fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fc0:	3402      	adds	r4, #2
 8004fc2:	9305      	str	r3, [sp, #20]
 8004fc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005090 <_svfiprintf_r+0x1fc>
 8004fc8:	7821      	ldrb	r1, [r4, #0]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	4650      	mov	r0, sl
 8004fce:	f7fb f907 	bl	80001e0 <memchr>
 8004fd2:	b140      	cbz	r0, 8004fe6 <_svfiprintf_r+0x152>
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	eba0 000a 	sub.w	r0, r0, sl
 8004fda:	fa03 f000 	lsl.w	r0, r3, r0
 8004fde:	9b04      	ldr	r3, [sp, #16]
 8004fe0:	4303      	orrs	r3, r0
 8004fe2:	3401      	adds	r4, #1
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fea:	4826      	ldr	r0, [pc, #152]	; (8005084 <_svfiprintf_r+0x1f0>)
 8004fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ff0:	2206      	movs	r2, #6
 8004ff2:	f7fb f8f5 	bl	80001e0 <memchr>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d038      	beq.n	800506c <_svfiprintf_r+0x1d8>
 8004ffa:	4b23      	ldr	r3, [pc, #140]	; (8005088 <_svfiprintf_r+0x1f4>)
 8004ffc:	bb1b      	cbnz	r3, 8005046 <_svfiprintf_r+0x1b2>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	3307      	adds	r3, #7
 8005002:	f023 0307 	bic.w	r3, r3, #7
 8005006:	3308      	adds	r3, #8
 8005008:	9303      	str	r3, [sp, #12]
 800500a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500c:	4433      	add	r3, r6
 800500e:	9309      	str	r3, [sp, #36]	; 0x24
 8005010:	e767      	b.n	8004ee2 <_svfiprintf_r+0x4e>
 8005012:	fb0c 3202 	mla	r2, ip, r2, r3
 8005016:	460c      	mov	r4, r1
 8005018:	2001      	movs	r0, #1
 800501a:	e7a5      	b.n	8004f68 <_svfiprintf_r+0xd4>
 800501c:	2300      	movs	r3, #0
 800501e:	3401      	adds	r4, #1
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4619      	mov	r1, r3
 8005024:	f04f 0c0a 	mov.w	ip, #10
 8005028:	4620      	mov	r0, r4
 800502a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800502e:	3a30      	subs	r2, #48	; 0x30
 8005030:	2a09      	cmp	r2, #9
 8005032:	d903      	bls.n	800503c <_svfiprintf_r+0x1a8>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0c5      	beq.n	8004fc4 <_svfiprintf_r+0x130>
 8005038:	9105      	str	r1, [sp, #20]
 800503a:	e7c3      	b.n	8004fc4 <_svfiprintf_r+0x130>
 800503c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005040:	4604      	mov	r4, r0
 8005042:	2301      	movs	r3, #1
 8005044:	e7f0      	b.n	8005028 <_svfiprintf_r+0x194>
 8005046:	ab03      	add	r3, sp, #12
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	462a      	mov	r2, r5
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <_svfiprintf_r+0x1f8>)
 800504e:	a904      	add	r1, sp, #16
 8005050:	4638      	mov	r0, r7
 8005052:	f3af 8000 	nop.w
 8005056:	1c42      	adds	r2, r0, #1
 8005058:	4606      	mov	r6, r0
 800505a:	d1d6      	bne.n	800500a <_svfiprintf_r+0x176>
 800505c:	89ab      	ldrh	r3, [r5, #12]
 800505e:	065b      	lsls	r3, r3, #25
 8005060:	f53f af2c 	bmi.w	8004ebc <_svfiprintf_r+0x28>
 8005064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005066:	b01d      	add	sp, #116	; 0x74
 8005068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506c:	ab03      	add	r3, sp, #12
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	462a      	mov	r2, r5
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <_svfiprintf_r+0x1f8>)
 8005074:	a904      	add	r1, sp, #16
 8005076:	4638      	mov	r0, r7
 8005078:	f7ff f99a 	bl	80043b0 <_printf_i>
 800507c:	e7eb      	b.n	8005056 <_svfiprintf_r+0x1c2>
 800507e:	bf00      	nop
 8005080:	0800579c 	.word	0x0800579c
 8005084:	080057a6 	.word	0x080057a6
 8005088:	00000000 	.word	0x00000000
 800508c:	08004ddd 	.word	0x08004ddd
 8005090:	080057a2 	.word	0x080057a2

08005094 <_sbrk_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d06      	ldr	r5, [pc, #24]	; (80050b0 <_sbrk_r+0x1c>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fb fb3a 	bl	8000718 <_sbrk>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_sbrk_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_sbrk_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	200003b8 	.word	0x200003b8

080050b4 <_raise_r>:
 80050b4:	291f      	cmp	r1, #31
 80050b6:	b538      	push	{r3, r4, r5, lr}
 80050b8:	4604      	mov	r4, r0
 80050ba:	460d      	mov	r5, r1
 80050bc:	d904      	bls.n	80050c8 <_raise_r+0x14>
 80050be:	2316      	movs	r3, #22
 80050c0:	6003      	str	r3, [r0, #0]
 80050c2:	f04f 30ff 	mov.w	r0, #4294967295
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80050ca:	b112      	cbz	r2, 80050d2 <_raise_r+0x1e>
 80050cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050d0:	b94b      	cbnz	r3, 80050e6 <_raise_r+0x32>
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 f830 	bl	8005138 <_getpid_r>
 80050d8:	462a      	mov	r2, r5
 80050da:	4601      	mov	r1, r0
 80050dc:	4620      	mov	r0, r4
 80050de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050e2:	f000 b817 	b.w	8005114 <_kill_r>
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d00a      	beq.n	8005100 <_raise_r+0x4c>
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	d103      	bne.n	80050f6 <_raise_r+0x42>
 80050ee:	2316      	movs	r3, #22
 80050f0:	6003      	str	r3, [r0, #0]
 80050f2:	2001      	movs	r0, #1
 80050f4:	e7e7      	b.n	80050c6 <_raise_r+0x12>
 80050f6:	2400      	movs	r4, #0
 80050f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050fc:	4628      	mov	r0, r5
 80050fe:	4798      	blx	r3
 8005100:	2000      	movs	r0, #0
 8005102:	e7e0      	b.n	80050c6 <_raise_r+0x12>

08005104 <raise>:
 8005104:	4b02      	ldr	r3, [pc, #8]	; (8005110 <raise+0xc>)
 8005106:	4601      	mov	r1, r0
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	f7ff bfd3 	b.w	80050b4 <_raise_r>
 800510e:	bf00      	nop
 8005110:	2000000c 	.word	0x2000000c

08005114 <_kill_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d07      	ldr	r5, [pc, #28]	; (8005134 <_kill_r+0x20>)
 8005118:	2300      	movs	r3, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	f7fb fa71 	bl	8000608 <_kill>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d102      	bne.n	8005130 <_kill_r+0x1c>
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	b103      	cbz	r3, 8005130 <_kill_r+0x1c>
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	bf00      	nop
 8005134:	200003b8 	.word	0x200003b8

08005138 <_getpid_r>:
 8005138:	f7fb ba5e 	b.w	80005f8 <_getpid>

0800513c <__sread>:
 800513c:	b510      	push	{r4, lr}
 800513e:	460c      	mov	r4, r1
 8005140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005144:	f000 f8a8 	bl	8005298 <_read_r>
 8005148:	2800      	cmp	r0, #0
 800514a:	bfab      	itete	ge
 800514c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800514e:	89a3      	ldrhlt	r3, [r4, #12]
 8005150:	181b      	addge	r3, r3, r0
 8005152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005156:	bfac      	ite	ge
 8005158:	6563      	strge	r3, [r4, #84]	; 0x54
 800515a:	81a3      	strhlt	r3, [r4, #12]
 800515c:	bd10      	pop	{r4, pc}

0800515e <__swrite>:
 800515e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	461f      	mov	r7, r3
 8005164:	898b      	ldrh	r3, [r1, #12]
 8005166:	05db      	lsls	r3, r3, #23
 8005168:	4605      	mov	r5, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4616      	mov	r6, r2
 800516e:	d505      	bpl.n	800517c <__swrite+0x1e>
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	2302      	movs	r3, #2
 8005176:	2200      	movs	r2, #0
 8005178:	f000 f868 	bl	800524c <_lseek_r>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	4628      	mov	r0, r5
 800518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	f000 b817 	b.w	80051c4 <_write_r>

08005196 <__sseek>:
 8005196:	b510      	push	{r4, lr}
 8005198:	460c      	mov	r4, r1
 800519a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519e:	f000 f855 	bl	800524c <_lseek_r>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	bf15      	itete	ne
 80051a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80051aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051b2:	81a3      	strheq	r3, [r4, #12]
 80051b4:	bf18      	it	ne
 80051b6:	81a3      	strhne	r3, [r4, #12]
 80051b8:	bd10      	pop	{r4, pc}

080051ba <__sclose>:
 80051ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051be:	f000 b813 	b.w	80051e8 <_close_r>
	...

080051c4 <_write_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	; (80051e4 <_write_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fb fa4f 	bl	8000676 <_write>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_write_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_write_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200003b8 	.word	0x200003b8

080051e8 <_close_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d06      	ldr	r5, [pc, #24]	; (8005204 <_close_r+0x1c>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f7fb fa5b 	bl	80006ae <_close>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_close_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_close_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	200003b8 	.word	0x200003b8

08005208 <_fstat_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	; (8005228 <_fstat_r+0x20>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f7fb fa56 	bl	80006c6 <_fstat>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d102      	bne.n	8005224 <_fstat_r+0x1c>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	b103      	cbz	r3, 8005224 <_fstat_r+0x1c>
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	200003b8 	.word	0x200003b8

0800522c <_isatty_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d06      	ldr	r5, [pc, #24]	; (8005248 <_isatty_r+0x1c>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fb fa55 	bl	80006e6 <_isatty>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_isatty_r+0x1a>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_isatty_r+0x1a>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	200003b8 	.word	0x200003b8

0800524c <_lseek_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	; (800526c <_lseek_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fb fa4e 	bl	80006fc <_lseek>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_lseek_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_lseek_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	200003b8 	.word	0x200003b8

08005270 <__malloc_lock>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__malloc_lock+0x8>)
 8005272:	f7ff bc63 	b.w	8004b3c <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	200003b0 	.word	0x200003b0

0800527c <__malloc_unlock>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__malloc_unlock+0x8>)
 800527e:	f7ff bc5e 	b.w	8004b3e <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	200003b0 	.word	0x200003b0

08005288 <_malloc_usable_size_r>:
 8005288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528c:	1f18      	subs	r0, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfbc      	itt	lt
 8005292:	580b      	ldrlt	r3, [r1, r0]
 8005294:	18c0      	addlt	r0, r0, r3
 8005296:	4770      	bx	lr

08005298 <_read_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d07      	ldr	r5, [pc, #28]	; (80052b8 <_read_r+0x20>)
 800529c:	4604      	mov	r4, r0
 800529e:	4608      	mov	r0, r1
 80052a0:	4611      	mov	r1, r2
 80052a2:	2200      	movs	r2, #0
 80052a4:	602a      	str	r2, [r5, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f7fb f9c8 	bl	800063c <_read>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_read_r+0x1e>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_read_r+0x1e>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	200003b8 	.word	0x200003b8

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
