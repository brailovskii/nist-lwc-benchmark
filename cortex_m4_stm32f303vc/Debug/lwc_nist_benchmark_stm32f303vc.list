
lwc_nist_benchmark_stm32f303vc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e54  08005e54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e54  08005e54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e54  08005e54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000070  08005ecc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08005ecc  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001235b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ef  00000000  00000000  000323fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00034df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00035c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a11  00000000  00000000  00036a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011289  00000000  00000000  00057411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2185  00000000  00000000  0006869a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a81f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  0012a874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057cc 	.word	0x080057cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080057cc 	.word	0x080057cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4907      	ldr	r1, [pc, #28]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4013      	ands	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029e:	68fb      	ldr	r3, [r7, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fa61 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f80f 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f88b 	bl	80003d4 <MX_GPIO_Init>
  MX_TIM6_Init();
 80002be:	f000 f849 	bl	8000354 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80002c2:	f000 f86b 	bl	800039c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
	  HAL_Delay(1000000);
 80002c6:	4c03      	ldr	r4, [pc, #12]	; (80002d4 <main+0x24>)
	  genkat_benchmark_hash_aead();
 80002c8:	f003 fe74 	bl	8003fb4 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80002cc:	4620      	mov	r0, r4
 80002ce:	f000 fab9 	bl	8000844 <HAL_Delay>
 80002d2:	e7f9      	b.n	80002c8 <main+0x18>
 80002d4:	000f4240 	.word	0x000f4240

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	e92d 4330 	stmdb	sp!, {r4, r5, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002dc:	2400      	movs	r4, #0
{
 80002de:	b0a1      	sub	sp, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	223c      	movs	r2, #60	; 0x3c
 80002e2:	4621      	mov	r1, r4
 80002e4:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ea:	e9cd 4400 	strd	r4, r4, [sp]
 80002ee:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	9409      	str	r4, [sp, #36]	; 0x24
 80002f4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	9404      	str	r4, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	f04f 0801 	mov.w	r8, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	f004 f910 	bl	8004520 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	f04f 0910 	mov.w	r9, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000306:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000310:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000312:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000316:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f000 fd44 	bl	8000da4 <HAL_RCC_OscConfig>
 800031c:	b9c0      	cbnz	r0, 8000350 <SystemClock_Config+0x78>
 800031e:	4601      	mov	r1, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	2300      	movs	r3, #0
 8000322:	2200      	movs	r2, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	240f      	movs	r4, #15
 8000328:	2502      	movs	r5, #2
 800032a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800032e:	e9cd 4500 	strd	r4, r5, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000332:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000334:	f001 fc3e 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	b948      	cbnz	r0, 8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033c:	2201      	movs	r2, #1
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000340:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000342:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	f001 fe6c 	bl	8002020 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	b910      	cbnz	r0, 8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
}
 800034a:	b021      	add	sp, #132	; 0x84
 800034c:	e8bd 8330 	ldmia.w	sp!, {r4, r5, r8, r9, pc}
    Error_Handler();
 8000350:	f000 f84c 	bl	80003ec <Error_Handler>

08000354 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000354:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000356:	4c0f      	ldr	r4, [pc, #60]	; (8000394 <MX_TIM6_Init+0x40>)
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_TIM6_Init+0x44>)
 800035a:	6023      	str	r3, [r4, #0]
{
 800035c:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8000360:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000364:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim6.Init.Period = 65535;
 800036a:	60e2      	str	r2, [r4, #12]
  htim6.Init.Prescaler = 0;
 800036c:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036e:	9301      	str	r3, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	60a3      	str	r3, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000374:	f002 f804 	bl	8002380 <HAL_TIM_Base_Init>
 8000378:	b948      	cbnz	r0, 800038e <MX_TIM6_Init+0x3a>
 800037a:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800037c:	a901      	add	r1, sp, #4
 800037e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000382:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000384:	f002 fac4 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8000388:	b908      	cbnz	r0, 800038e <MX_TIM6_Init+0x3a>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800038a:	b004      	add	sp, #16
 800038c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800038e:	f000 f82d 	bl	80003ec <Error_Handler>
 8000392:	bf00      	nop
 8000394:	2000062c 	.word	0x2000062c
 8000398:	40001000 	.word	0x40001000

0800039c <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <MX_USART1_UART_Init+0x30>)
{
 800039e:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART1_UART_Init+0x34>)
 80003a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80003a4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a8:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003aa:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 80003b8:	6041      	str	r1, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ba:	6142      	str	r2, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003bc:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003be:	f002 fb45 	bl	8002a4c <HAL_UART_Init>
 80003c2:	b900      	cbnz	r0, 80003c6 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80003c6:	f000 f811 	bl	80003ec <Error_Handler>
 80003ca:	bf00      	nop
 80003cc:	200005a8 	.word	0x200005a8
 80003d0:	40013800 	.word	0x40013800

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b508      	push	{r3, lr}

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80003d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80003da:	f7ff ff51 	bl	8000280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);

}
 80003de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003e6:	f7ff bf4b 	b.w	8000280 <LL_AHB1_GRP1_EnableClock>
 80003ea:	bf00      	nop

080003ec <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
 80003ee:	e7fe      	b.n	80003ee <Error_Handler+0x2>

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x44>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x44>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_MspInit+0x44>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <HAL_MspInit+0x44>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <HAL_TIM_Base_MspInit+0x44>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d113      	bne.n	8000472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 8000450:	f043 0310 	orr.w	r3, r3, #16
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 0310 	and.w	r3, r3, #16
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	2036      	movs	r0, #54	; 0x36
 8000468:	f000 faeb 	bl	8000a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800046c:	2036      	movs	r0, #54	; 0x36
 800046e:	f000 fb04 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40001000 	.word	0x40001000
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a17      	ldr	r2, [pc, #92]	; (8000500 <HAL_UART_MspInit+0x7c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d127      	bne.n	80004f6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a16      	ldr	r2, [pc, #88]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004d6:	2330      	movs	r3, #48	; 0x30
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004e6:	2307      	movs	r3, #7
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004f2:	f000 fadd 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f954 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <TIM6_DAC_IRQHandler+0x10>)
 8000566:	f001 fffc 	bl	8002562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000062c 	.word	0x2000062c

08000574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	return 1;
 8000578:	2301      	movs	r3, #1
}
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_kill>:

int _kill(int pid, int sig)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800058e:	f003 ff6f 	bl	8004470 <__errno>
 8000592:	4603      	mov	r3, r0
 8000594:	2216      	movs	r2, #22
 8000596:	601a      	str	r2, [r3, #0]
	return -1;
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <_exit>:

void _exit (int status)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005ac:	f04f 31ff 	mov.w	r1, #4294967295
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ffe7 	bl	8000584 <_kill>
	while (1) {}		/* Make sure we hang here */
 80005b6:	e7fe      	b.n	80005b6 <_exit+0x12>

080005b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ca:	f3af 8000 	nop.w
 80005ce:	4601      	mov	r1, r0
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf0      	blt.n	80005ca <_read+0x12>
	}

return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x12>
	}
	return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000652:	605a      	str	r2, [r3, #4]
	return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_isatty>:

int _isatty(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <_sbrk+0x5c>)
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <_sbrk+0x60>)
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <_sbrk+0x64>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <_sbrk+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d207      	bcs.n	80006d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c4:	f003 fed4 	bl	8004470 <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e009      	b.n	80006e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <_sbrk+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000a000 	.word	0x2000a000
 80006f4:	00000400 	.word	0x00000400
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	200006c0 	.word	0x200006c0

08000700 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490e      	ldr	r1, [pc, #56]	; (8000764 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0b      	ldr	r4, [pc, #44]	; (8000770 <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800074e:	f7ff ffd7 	bl	8000700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f003 fea5 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000756:	f7ff fdab 	bl	80002b0 <main>

0800075a <LoopForever>:

LoopForever:
    b LoopForever
 800075a:	e7fe      	b.n	800075a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800075c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000768:	08005e5c 	.word	0x08005e5c
  ldr r2, =_sbss
 800076c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000770:	200006c0 	.word	0x200006c0

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f94f 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fe2c 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f967 	bl	8000a96 <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f92f 	bl	8000a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_IncTick+0x20>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x24>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_IncTick+0x24>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008
 8000828:	20000678 	.word	0x20000678

0800082c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HAL_GetTick+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000678 	.word	0x20000678

08000844 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800084c:	f7ff ffee 	bl	800082c <HAL_GetTick>
 8000850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085c:	d005      	beq.n	800086a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_Delay+0x44>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800086a:	bf00      	nop
 800086c:	f7ff ffde 	bl	800082c <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8f7      	bhi.n	800086c <HAL_Delay+0x28>
  {
  }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff29 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff3e 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff8e 	bl	8000980 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff31 	bl	80008f0 <__NVIC_EnableIRQ>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e154      	b.n	8000d6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 8146 	beq.w	8000d64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d00b      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d007      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aec:	2b11      	cmp	r3, #17
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b12      	cmp	r3, #18
 8000af6:	d130      	bne.n	8000b5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	f003 0201 	and.w	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0xea>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d123      	bne.n	8000be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	08da      	lsrs	r2, r3, #3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0203 	and.w	r2, r3, #3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80a0 	beq.w	8000d64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3c:	4a53      	ldr	r2, [pc, #332]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c66:	d019      	beq.n	8000c9c <HAL_GPIO_Init+0x1ec>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d013      	beq.n	8000c98 <HAL_GPIO_Init+0x1e8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_GPIO_Init+0x2e4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x2e8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x1e0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2ec>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <HAL_GPIO_Init+0x1dc>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	e008      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	e006      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e004      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <HAL_GPIO_Init+0x1ee>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	f002 0203 	and.w	r2, r2, #3
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cae:	4937      	ldr	r1, [pc, #220]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cbc:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce0:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_GPIO_Init+0x2f0>)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f47f aea3 	bne.w	8000ac0 <HAL_GPIO_Init+0x10>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	48000400 	.word	0x48000400
 8000d94:	48000800 	.word	0x48000800
 8000d98:	48000c00 	.word	0x48000c00
 8000d9c:	48001000 	.word	0x48001000
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f000 bef4 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 816a 	beq.w	80010a2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dce:	4bb3      	ldr	r3, [pc, #716]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d00c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dda:	4bb0      	ldr	r3, [pc, #704]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d159      	bne.n	8000e9a <HAL_RCC_OscConfig+0xf6>
 8000de6:	4bad      	ldr	r3, [pc, #692]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d152      	bne.n	8000e9a <HAL_RCC_OscConfig+0xf6>
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d102      	bne.n	8000e26 <HAL_RCC_OscConfig+0x82>
 8000e20:	4b9e      	ldr	r3, [pc, #632]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	e015      	b.n	8000e52 <HAL_RCC_OscConfig+0xae>
 8000e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e42:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e4e:	4b93      	ldr	r3, [pc, #588]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e56:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e5e:	fa92 f2a2 	rbit	r2, r2
 8000e62:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e66:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e6a:	fab2 f282 	clz	r2, r2
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	f042 0220 	orr.w	r2, r2, #32
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	f002 021f 	and.w	r2, r2, #31
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 810c 	beq.w	80010a0 <HAL_RCC_OscConfig+0x2fc>
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 8106 	bne.w	80010a0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f000 be86 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea4:	d106      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x110>
 8000ea6:	4b7d      	ldr	r3, [pc, #500]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a7c      	ldr	r2, [pc, #496]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e030      	b.n	8000f16 <HAL_RCC_OscConfig+0x172>
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x134>
 8000ebe:	4b77      	ldr	r3, [pc, #476]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a76      	ldr	r2, [pc, #472]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b74      	ldr	r3, [pc, #464]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a73      	ldr	r2, [pc, #460]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e01e      	b.n	8000f16 <HAL_RCC_OscConfig+0x172>
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x15a>
 8000ee4:	4b6d      	ldr	r3, [pc, #436]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a6c      	ldr	r2, [pc, #432]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a69      	ldr	r2, [pc, #420]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e00b      	b.n	8000f16 <HAL_RCC_OscConfig+0x172>
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a63      	ldr	r2, [pc, #396]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f16:	4b61      	ldr	r3, [pc, #388]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	f023 020f 	bic.w	r2, r3, #15
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	495d      	ldr	r1, [pc, #372]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d059      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc7a 	bl	800082c <HAL_GetTick>
 8000f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fc75 	bl	800082c <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d902      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f000 be29 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f68:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1e2>
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e015      	b.n	8000fb2 <HAL_RCC_OscConfig+0x20e>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fa2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fc6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0ab      	beq.n	8000f3e <HAL_RCC_OscConfig+0x19a>
 8000fe6:	e05c      	b.n	80010a2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc20 	bl	800082c <HAL_GetTick>
 8000fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fc1b 	bl	800082c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d902      	bls.n	8001008 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	f000 bdcf 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800101c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d102      	bne.n	800103a <HAL_RCC_OscConfig+0x296>
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	e015      	b.n	8001066 <HAL_RCC_OscConfig+0x2c2>
 800103a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800104e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001052:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001056:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_RCC_OscConfig+0x2f8>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800106e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800107a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800107e:	fab2 f282 	clz	r2, r2
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ab      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x24e>
 800109a:	e002      	b.n	80010a2 <HAL_RCC_OscConfig+0x2fe>
 800109c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 816f 	beq.w	8001390 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b2:	4bd0      	ldr	r3, [pc, #832]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010be:	4bcd      	ldr	r3, [pc, #820]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d16c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x400>
 80010ca:	4bca      	ldr	r3, [pc, #808]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d166      	bne.n	80011a4 <HAL_RCC_OscConfig+0x400>
 80010d6:	2302      	movs	r3, #2
 80010d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d102      	bne.n	8001106 <HAL_RCC_OscConfig+0x362>
 8001100:	4bbc      	ldr	r3, [pc, #752]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	e013      	b.n	800112e <HAL_RCC_OscConfig+0x38a>
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800111e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800112a:	4bb2      	ldr	r3, [pc, #712]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	2202      	movs	r2, #2
 8001130:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001134:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001138:	fa92 f2a2 	rbit	r2, r2
 800113c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001140:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	f002 021f 	and.w	r2, r2, #31
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <HAL_RCC_OscConfig+0x3cc>
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 bd1b 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4ba0      	ldr	r3, [pc, #640]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	21f8      	movs	r1, #248	; 0xf8
 8001180:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001188:	fa91 f1a1 	rbit	r1, r1
 800118c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001190:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001194:	fab1 f181 	clz	r1, r1
 8001198:	b2c9      	uxtb	r1, r1
 800119a:	408b      	lsls	r3, r1
 800119c:	4995      	ldr	r1, [pc, #596]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	e0f5      	b.n	8001390 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8085 	beq.w	80012ba <HAL_RCC_OscConfig+0x516>
 80011b0:	2301      	movs	r3, #1
 80011b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	461a      	mov	r2, r3
 80011d8:	2301      	movs	r3, #1
 80011da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fb26 	bl	800082c <HAL_GetTick>
 80011e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fb21 	bl	800082c <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d902      	bls.n	80011fc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f000 bcd5 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800120e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	095b      	lsrs	r3, r3, #5
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0x488>
 8001226:	4b73      	ldr	r3, [pc, #460]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	e013      	b.n	8001254 <HAL_RCC_OscConfig+0x4b0>
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001244:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001250:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	2202      	movs	r2, #2
 8001256:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800125a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800125e:	fa92 f2a2 	rbit	r2, r2
 8001262:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001266:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800126a:	fab2 f282 	clz	r2, r2
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f042 0220 	orr.w	r2, r2, #32
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f002 021f 	and.w	r2, r2, #31
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0af      	beq.n	80011e6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	21f8      	movs	r1, #248	; 0xf8
 8001296:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800129e:	fa91 f1a1 	rbit	r1, r1
 80012a2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012a6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012aa:	fab1 f181 	clz	r1, r1
 80012ae:	b2c9      	uxtb	r1, r1
 80012b0:	408b      	lsls	r3, r1
 80012b2:	4950      	ldr	r1, [pc, #320]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e06a      	b.n	8001390 <HAL_RCC_OscConfig+0x5ec>
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	461a      	mov	r2, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff faa1 	bl	800082c <HAL_GetTick>
 80012ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fa9c 	bl	800082c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bc50 	b.w	8001ba6 <HAL_RCC_OscConfig+0xe02>
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0x592>
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	e013      	b.n	800135e <HAL_RCC_OscConfig+0x5ba>
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800134e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_RCC_OscConfig+0x650>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2202      	movs	r2, #2
 8001360:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001364:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001368:	fa92 f2a2 	rbit	r2, r2
 800136c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001370:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001374:	fab2 f282 	clz	r2, r2
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f042 0220 	orr.w	r2, r2, #32
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f002 021f 	and.w	r2, r2, #31
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1af      	bne.n	80012f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80da 	beq.w	8001554 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d069      	beq.n	800147e <HAL_RCC_OscConfig+0x6da>
 80013aa:	2301      	movs	r3, #1
 80013ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x654>)
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fa2a 	bl	800082c <HAL_GetTick>
 80013d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013dc:	e00e      	b.n	80013fc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fa25 	bl	800082c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d906      	bls.n	80013fc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e3d9      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	10908120 	.word	0x10908120
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800140e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001412:	2202      	movs	r2, #2
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800142a:	2202      	movs	r2, #2
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fa93 f2a3 	rbit	r2, r3
 8001438:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800143c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4ba5      	ldr	r3, [pc, #660]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001442:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001446:	2102      	movs	r1, #2
 8001448:	6019      	str	r1, [r3, #0]
 800144a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fa93 f1a3 	rbit	r1, r3
 8001454:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001458:	6019      	str	r1, [r3, #0]
  return result;
 800145a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0b0      	beq.n	80013de <HAL_RCC_OscConfig+0x63a>
 800147c:	e06a      	b.n	8001554 <HAL_RCC_OscConfig+0x7b0>
 800147e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fa93 f2a3 	rbit	r2, r3
 8001490:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001494:	601a      	str	r2, [r3, #0]
  return result;
 8001496:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800149a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <HAL_RCC_OscConfig+0x934>)
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	461a      	mov	r2, r3
 80014ac:	2300      	movs	r3, #0
 80014ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff f9bc 	bl	800082c <HAL_GetTick>
 80014b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e009      	b.n	80014ce <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff f9b7 	bl	800082c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e36b      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 80014ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fa93 f2a3 	rbit	r2, r3
 80014f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001514:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800151e:	2102      	movs	r1, #2
 8001520:	6019      	str	r1, [r3, #0]
 8001522:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fa93 f1a3 	rbit	r1, r3
 800152c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001530:	6019      	str	r1, [r3, #0]
  return result;
 8001532:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1b2      	bne.n	80014ba <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8158 	beq.w	8001814 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <HAL_RCC_OscConfig+0x938>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11a      	bne.n	80015de <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a8:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <HAL_RCC_OscConfig+0x938>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_RCC_OscConfig+0x938>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f93a 	bl	800082c <HAL_GetTick>
 80015b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e009      	b.n	80015d2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff f935 	bl	800082c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e2e9      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b42      	ldr	r3, [pc, #264]	; (80016dc <HAL_RCC_OscConfig+0x938>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ef      	beq.n	80015be <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d106      	bne.n	80015f6 <HAL_RCC_OscConfig+0x852>
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a39      	ldr	r2, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e02f      	b.n	8001656 <HAL_RCC_OscConfig+0x8b2>
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x876>
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a33      	ldr	r2, [pc, #204]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e01d      	b.n	8001656 <HAL_RCC_OscConfig+0x8b2>
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x89a>
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a2a      	ldr	r2, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	e00b      	b.n	8001656 <HAL_RCC_OscConfig+0x8b2>
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06b      	beq.n	8001738 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff f8e4 	bl	800082c <HAL_GetTick>
 8001664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00b      	b.n	8001682 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff f8df 	bl	800082c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	; 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e291      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 8001682:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d109      	bne.n	80016e0 <HAL_RCC_OscConfig+0x93c>
 80016cc:	4b01      	ldr	r3, [pc, #4]	; (80016d4 <HAL_RCC_OscConfig+0x930>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x958>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	10908120 	.word	0x10908120
 80016dc:	40007000 	.word	0x40007000
 80016e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f2a3 	rbit	r2, r3
 80016f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	4bbb      	ldr	r3, [pc, #748]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001700:	2102      	movs	r1, #2
 8001702:	6011      	str	r1, [r2, #0]
 8001704:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	fa92 f1a2 	rbit	r1, r2
 800170e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001712:	6011      	str	r1, [r2, #0]
  return result;
 8001714:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d099      	beq.n	800166a <HAL_RCC_OscConfig+0x8c6>
 8001736:	e063      	b.n	8001800 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff f878 	bl	800082c <HAL_GetTick>
 800173c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff f873 	bl	800082c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e225      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 800175a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001788:	601a      	str	r2, [r3, #0]
  return result;
 800178a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800178e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d102      	bne.n	80017aa <HAL_RCC_OscConfig+0xa06>
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	e00d      	b.n	80017c6 <HAL_RCC_OscConfig+0xa22>
 80017aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017ca:	2102      	movs	r1, #2
 80017cc:	6011      	str	r1, [r2, #0]
 80017ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fa92 f1a2 	rbit	r1, r2
 80017d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80017dc:	6011      	str	r1, [r2, #0]
  return result;
 80017de:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	fab2 f282 	clz	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f002 021f 	and.w	r2, r2, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1a0      	bne.n	8001742 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001800:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001808:	4b77      	ldr	r3, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a76      	ldr	r2, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 81c2 	beq.w	8001ba4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001820:	4b71      	ldr	r3, [pc, #452]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	f000 819c 	beq.w	8001b66 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 8114 	bne.w	8001a62 <HAL_RCC_OscConfig+0xcbe>
 800183a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800183e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001852:	601a      	str	r2, [r3, #0]
  return result;
 8001854:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001858:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7fe ffdc 	bl	800082c <HAL_GetTick>
 8001874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e009      	b.n	800188e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187a:	f7fe ffd7 	bl	800082c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e18b      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 800188e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018a6:	601a      	str	r2, [r3, #0]
  return result;
 80018a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0xb24>
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0xb5c>
 80018c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001908:	6011      	str	r1, [r2, #0]
 800190a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fa92 f1a2 	rbit	r1, r2
 8001914:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001918:	6011      	str	r1, [r2, #0]
  return result;
 800191a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d19e      	bne.n	800187a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	430b      	orrs	r3, r1
 8001952:	4925      	ldr	r1, [pc, #148]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800195c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001960:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001970:	601a      	str	r2, [r3, #0]
  return result;
 8001972:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001976:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	461a      	mov	r2, r3
 800198a:	2301      	movs	r3, #1
 800198c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7fe ff4d 	bl	800082c <HAL_GetTick>
 8001992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001996:	e009      	b.n	80019ac <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001998:	f7fe ff48 	bl	800082c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0fc      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 80019ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c4:	601a      	str	r2, [r3, #0]
  return result;
 80019c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0xc48>
 80019e0:	4b01      	ldr	r3, [pc, #4]	; (80019e8 <HAL_RCC_OscConfig+0xc44>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e01e      	b.n	8001a24 <HAL_RCC_OscConfig+0xc80>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_OscConfig+0xe0c>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a2c:	6011      	str	r1, [r2, #0]
 8001a2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fa92 f1a2 	rbit	r1, r2
 8001a38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a3c:	6011      	str	r1, [r2, #0]
  return result;
 8001a3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	fab2 f282 	clz	r2, r2
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f002 021f 	and.w	r2, r2, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d09b      	beq.n	8001998 <HAL_RCC_OscConfig+0xbf4>
 8001a60:	e0a0      	b.n	8001ba4 <HAL_RCC_OscConfig+0xe00>
 8001a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	601a      	str	r2, [r3, #0]
  return result;
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fec8 	bl	800082c <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe fec3 	bl	800082c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e077      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
 8001ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	601a      	str	r2, [r3, #0]
  return result;
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_OscConfig+0xd4c>
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_OscConfig+0xe0c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e01b      	b.n	8001b28 <HAL_RCC_OscConfig+0xd84>
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f2a3 	rbit	r2, r3
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_OscConfig+0xe0c>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f107 0210 	add.w	r2, r7, #16
 8001b2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	f107 0210 	add.w	r2, r7, #16
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fa92 f1a2 	rbit	r1, r2
 8001b3c:	f107 020c 	add.w	r2, r7, #12
 8001b40:	6011      	str	r1, [r2, #0]
  return result;
 8001b42:	f107 020c 	add.w	r2, r7, #12
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	fab2 f282 	clz	r2, r2
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f042 0220 	orr.w	r2, r2, #32
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d19e      	bne.n	8001aa2 <HAL_RCC_OscConfig+0xcfe>
 8001b64:	e01e      	b.n	8001ba4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_RCC_OscConfig+0xe0c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d108      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b09e      	sub	sp, #120	; 0x78
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e162      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b90      	ldr	r3, [pc, #576]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b8d      	ldr	r3, [pc, #564]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	498b      	ldr	r1, [pc, #556]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e14a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	497f      	ldr	r1, [pc, #508]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80dc 	beq.w	8001de0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d13c      	bne.n	8001caa <HAL_RCC_ClockConfig+0xf6>
 8001c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xa6>
 8001c54:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	e00f      	b.n	8001c7a <HAL_RCC_ClockConfig+0xc6>
 8001c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	667b      	str	r3, [r7, #100]	; 0x64
 8001c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c82:	fa92 f2a2 	rbit	r2, r2
 8001c86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d17b      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0f3      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d13c      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x178>
 8001cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x128>
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e00f      	b.n	8001cfc <HAL_RCC_ClockConfig+0x148>
 8001cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8001cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
 8001cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf8:	4b46      	ldr	r3, [pc, #280]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d00:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d04:	fa92 f2a2 	rbit	r2, r2
 8001d08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f042 0220 	orr.w	r2, r2, #32
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f002 021f 	and.w	r2, r2, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13a      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0b2      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x1a0>
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	e00d      	b.n	8001d70 <HAL_RCC_ClockConfig+0x1bc>
 8001d54:	2302      	movs	r3, #2
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2202      	movs	r2, #2
 8001d72:	61ba      	str	r2, [r7, #24]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	fa92 f2a2 	rbit	r2, r2
 8001d7a:	617a      	str	r2, [r7, #20]
  return result;
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e079      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f023 0203 	bic.w	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	491a      	ldr	r1, [pc, #104]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7fe fd3c 	bl	800082c <HAL_GetTick>
 8001db4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7fe fd38 	bl	800082c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e061      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 020c 	and.w	r2, r3, #12
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1eb      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d214      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4906      	ldr	r1, [pc, #24]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RCC_ClockConfig+0x25c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e040      	b.n	8001e92 <HAL_RCC_ClockConfig+0x2de>
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_ClockConfig+0x2e8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	491a      	ldr	r1, [pc, #104]	; (8001e9c <HAL_RCC_ClockConfig+0x2e8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x2e8>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4912      	ldr	r1, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x2e8>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e56:	f000 f829 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e5a:	4601      	mov	r1, r0
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_RCC_ClockConfig+0x2e8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e64:	22f0      	movs	r2, #240	; 0xf0
 8001e66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	40d3      	lsrs	r3, r2
 8001e7a:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <HAL_RCC_ClockConfig+0x2ec>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_RCC_ClockConfig+0x2f0>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_RCC_ClockConfig+0x2f4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fc8a 	bl	80007a4 <HAL_InitTick>
  
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3778      	adds	r7, #120	; 0x78
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080057e4 	.word	0x080057e4
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b08b      	sub	sp, #44	; 0x2c
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x30>
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eda:	e03c      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ede:	623b      	str	r3, [r7, #32]
      break;
 8001ee0:	e03c      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ee8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001eec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	607a      	str	r2, [r7, #4]
  return result;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	40d3      	lsrs	r3, r2
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	220f      	movs	r2, #15
 8001f10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	fa92 f2a2 	rbit	r2, r2
 8001f18:	60fa      	str	r2, [r7, #12]
  return result;
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	40d3      	lsrs	r3, r2
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e004      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	623b      	str	r3, [r7, #32]
      break;
 8001f54:	e002      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f58:	623b      	str	r3, [r7, #32]
      break;
 8001f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	372c      	adds	r7, #44	; 0x2c
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	007a1200 	.word	0x007a1200
 8001f74:	080057fc 	.word	0x080057fc
 8001f78:	0800580c 	.word	0x0800580c
 8001f7c:	003d0900 	.word	0x003d0900

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f9e:	f7ff ffef 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	603a      	str	r2, [r7, #0]
  return result;
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	40d3      	lsrs	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	080057f4 	.word	0x080057f4

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fe2:	f7ff ffcd 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ff0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	603a      	str	r2, [r7, #0]
  return result;
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	40d3      	lsrs	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_RCC_GetPCLK2Freq+0x40>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	080057f4 	.word	0x080057f4

08002020 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b092      	sub	sp, #72	; 0x48
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80d4 	beq.w	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10e      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b45      	ldr	r3, [pc, #276]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7fe fbd1 	bl	800082c <HAL_GetTick>
 800208a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7fe fbcd 	bl	800082c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e169      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8084 	beq.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d07c      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	461a      	mov	r2, r3
 800211a:	2300      	movs	r3, #0
 800211c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002122:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d04b      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fb7d 	bl	800082c <HAL_GetTick>
 8002132:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fb79 	bl	800082c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e113      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800214c:	2302      	movs	r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	61fb      	str	r3, [r7, #28]
  return result;
 8002164:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d108      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800217a:	4b01      	ldr	r3, [pc, #4]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	e00d      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
 8002188:	10908100 	.word	0x10908100
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	4b78      	ldr	r3, [pc, #480]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2202      	movs	r2, #2
 800219e:	613a      	str	r2, [r7, #16]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	60fa      	str	r2, [r7, #12]
  return result;
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0b7      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021c6:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	496a      	ldr	r1, [pc, #424]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f8:	4b60      	ldr	r3, [pc, #384]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	f023 0203 	bic.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	495d      	ldr	r1, [pc, #372]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002216:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4956      	ldr	r1, [pc, #344]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002234:	4b51      	ldr	r3, [pc, #324]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	494e      	ldr	r1, [pc, #312]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002242:	4313      	orrs	r3, r2
 8002244:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002252:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f023 0210 	bic.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4947      	ldr	r1, [pc, #284]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	493f      	ldr	r1, [pc, #252]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f023 0220 	bic.w	r2, r3, #32
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4938      	ldr	r1, [pc, #224]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4930      	ldr	r1, [pc, #192]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	4929      	ldr	r1, [pc, #164]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	4921      	ldr	r1, [pc, #132]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	491a      	ldr	r1, [pc, #104]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002314:	4313      	orrs	r3, r2
 8002316:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	490b      	ldr	r1, [pc, #44]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002350:	4313      	orrs	r3, r2
 8002352:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800236e:	4313      	orrs	r3, r2
 8002370:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3748      	adds	r7, #72	; 0x48
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000

08002380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e049      	b.n	8002426 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe f846 	bl	8000438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f000 fa16 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d001      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e04a      	b.n	80024de <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_TIM_Base_Start_IT+0xbc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d018      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x6c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d013      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x6c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_TIM_Base_Start_IT+0xc0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x6c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x6c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_TIM_Base_Start_IT+0x6c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_TIM_Base_Start_IT+0xcc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d115      	bne.n	80024c8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_TIM_Base_Start_IT+0xd0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d015      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xaa>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d011      	beq.n	80024da <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	e008      	b.n	80024da <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e000      	b.n	80024dc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40000800 	.word	0x40000800
 80024f8:	40013400 	.word	0x40013400
 80024fc:	40014000 	.word	0x40014000
 8002500:	00010007 	.word	0x00010007

08002504 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	f241 1311 	movw	r3, #4369	; 0x1111
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_TIM_Base_Stop_IT+0x48>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	f240 4344 	movw	r3, #1092	; 0x444
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_TIM_Base_Stop_IT+0x48>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d122      	bne.n	80025be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d11b      	bne.n	80025be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f06f 0202 	mvn.w	r2, #2
 800258e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f905 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80025aa:	e005      	b.n	80025b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f8f7 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f908 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d122      	bne.n	8002612 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d11b      	bne.n	8002612 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0204 	mvn.w	r2, #4
 80025e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8db 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80025fe:	e005      	b.n	800260c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8cd 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8de 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b08      	cmp	r3, #8
 800261e:	d122      	bne.n	8002666 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11b      	bne.n	8002666 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f06f 0208 	mvn.w	r2, #8
 8002636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2204      	movs	r2, #4
 800263c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8b1 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 8002652:	e005      	b.n	8002660 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8a3 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f8b4 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d122      	bne.n	80026ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b10      	cmp	r3, #16
 8002680:	d11b      	bne.n	80026ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0210 	mvn.w	r2, #16
 800268a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2208      	movs	r2, #8
 8002690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f887 	bl	80027b4 <HAL_TIM_IC_CaptureCallback>
 80026a6:	e005      	b.n	80026b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f879 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f88a 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10e      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f06f 0201 	mvn.w	r2, #1
 80026de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f001 fde1 	bl	80042a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d10e      	bne.n	8002712 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b80      	cmp	r3, #128	; 0x80
 8002700:	d107      	bne.n	8002712 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800270a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f989 	bl	8002a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f97c 	bl	8002a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f838 	bl	80027dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b20      	cmp	r3, #32
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b20      	cmp	r3, #32
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0220 	mvn.w	r2, #32
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f93c 	bl	8002a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <TIM_Base_SetConfig+0x104>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00f      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <TIM_Base_SetConfig+0x108>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a38      	ldr	r2, [pc, #224]	; (80028fc <TIM_Base_SetConfig+0x10c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x38>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a37      	ldr	r2, [pc, #220]	; (8002900 <TIM_Base_SetConfig+0x110>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <TIM_Base_SetConfig+0x104>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01b      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d017      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <TIM_Base_SetConfig+0x108>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <TIM_Base_SetConfig+0x10c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00f      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <TIM_Base_SetConfig+0x110>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <TIM_Base_SetConfig+0x114>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <TIM_Base_SetConfig+0x118>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x8a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <TIM_Base_SetConfig+0x11c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <TIM_Base_SetConfig+0x104>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0xe8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a11      	ldr	r2, [pc, #68]	; (8002900 <TIM_Base_SetConfig+0x110>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0xe8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <TIM_Base_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0xe8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <TIM_Base_SetConfig+0x118>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0xe8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <TIM_Base_SetConfig+0x11c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d103      	bne.n	80028e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	615a      	str	r2, [r3, #20]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40013400 	.word	0x40013400
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800

08002910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002924:	2302      	movs	r3, #2
 8002926:	e063      	b.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002962:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d018      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299a:	d013      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00e      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10c      	bne.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40013400 	.word	0x40013400
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40014000 	.word	0x40014000

08002a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e040      	b.n	8002ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fd08 	bl	8000484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8c0 	bl	8002c10 <UART_SetConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa88 	bl	8002fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fb0f 	bl	80030fc <UART_CheckIdleState>
 8002ade:	4603      	mov	r3, r0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	f040 8082 	bne.w	8002c06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_Transmit+0x26>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07a      	b.n	8002c08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x38>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e073      	b.n	8002c08 <HAL_UART_Transmit+0x120>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2221      	movs	r2, #33	; 0x21
 8002b34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fd fe79 	bl	800082c <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d108      	bne.n	8002b68 <HAL_UART_Transmit+0x80>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e003      	b.n	8002b70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b78:	e02d      	b.n	8002bd6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fb02 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e039      	b.n	8002c08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10b      	bne.n	8002bb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	3302      	adds	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	e008      	b.n	8002bc4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1cb      	bne.n	8002b7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2140      	movs	r1, #64	; 0x40
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 face 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e005      	b.n	8002c08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e000      	b.n	8002c08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c3e:	f023 030c 	bic.w	r3, r3, #12
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	6979      	ldr	r1, [r7, #20]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4aae      	ldr	r2, [pc, #696]	; (8002f44 <UART_SetConfig+0x334>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d120      	bne.n	8002cd2 <UART_SetConfig+0xc2>
 8002c90:	4bad      	ldr	r3, [pc, #692]	; (8002f48 <UART_SetConfig+0x338>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d817      	bhi.n	8002ccc <UART_SetConfig+0xbc>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <UART_SetConfig+0x94>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc1 	.word	0x08002cc1
 8002cac:	08002cc7 	.word	0x08002cc7
 8002cb0:	08002cbb 	.word	0x08002cbb
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e0b5      	b.n	8002e26 <UART_SetConfig+0x216>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e0b2      	b.n	8002e26 <UART_SetConfig+0x216>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e0af      	b.n	8002e26 <UART_SetConfig+0x216>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e0ac      	b.n	8002e26 <UART_SetConfig+0x216>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e0a9      	b.n	8002e26 <UART_SetConfig+0x216>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a9d      	ldr	r2, [pc, #628]	; (8002f4c <UART_SetConfig+0x33c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d124      	bne.n	8002d26 <UART_SetConfig+0x116>
 8002cdc:	4b9a      	ldr	r3, [pc, #616]	; (8002f48 <UART_SetConfig+0x338>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ce8:	d011      	beq.n	8002d0e <UART_SetConfig+0xfe>
 8002cea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cee:	d817      	bhi.n	8002d20 <UART_SetConfig+0x110>
 8002cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf4:	d011      	beq.n	8002d1a <UART_SetConfig+0x10a>
 8002cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cfa:	d811      	bhi.n	8002d20 <UART_SetConfig+0x110>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <UART_SetConfig+0xf8>
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d006      	beq.n	8002d14 <UART_SetConfig+0x104>
 8002d06:	e00b      	b.n	8002d20 <UART_SetConfig+0x110>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e08b      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e088      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d14:	2304      	movs	r3, #4
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e085      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e082      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d20:	2310      	movs	r3, #16
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e07f      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a89      	ldr	r2, [pc, #548]	; (8002f50 <UART_SetConfig+0x340>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d124      	bne.n	8002d7a <UART_SetConfig+0x16a>
 8002d30:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <UART_SetConfig+0x338>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d3c:	d011      	beq.n	8002d62 <UART_SetConfig+0x152>
 8002d3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d42:	d817      	bhi.n	8002d74 <UART_SetConfig+0x164>
 8002d44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d48:	d011      	beq.n	8002d6e <UART_SetConfig+0x15e>
 8002d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d4e:	d811      	bhi.n	8002d74 <UART_SetConfig+0x164>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <UART_SetConfig+0x14c>
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d58:	d006      	beq.n	8002d68 <UART_SetConfig+0x158>
 8002d5a:	e00b      	b.n	8002d74 <UART_SetConfig+0x164>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	77fb      	strb	r3, [r7, #31]
 8002d60:	e061      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d62:	2302      	movs	r3, #2
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e05e      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e05b      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e058      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d74:	2310      	movs	r3, #16
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e055      	b.n	8002e26 <UART_SetConfig+0x216>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a75      	ldr	r2, [pc, #468]	; (8002f54 <UART_SetConfig+0x344>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d124      	bne.n	8002dce <UART_SetConfig+0x1be>
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <UART_SetConfig+0x338>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d90:	d011      	beq.n	8002db6 <UART_SetConfig+0x1a6>
 8002d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d96:	d817      	bhi.n	8002dc8 <UART_SetConfig+0x1b8>
 8002d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9c:	d011      	beq.n	8002dc2 <UART_SetConfig+0x1b2>
 8002d9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da2:	d811      	bhi.n	8002dc8 <UART_SetConfig+0x1b8>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <UART_SetConfig+0x1a0>
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dac:	d006      	beq.n	8002dbc <UART_SetConfig+0x1ac>
 8002dae:	e00b      	b.n	8002dc8 <UART_SetConfig+0x1b8>
 8002db0:	2300      	movs	r3, #0
 8002db2:	77fb      	strb	r3, [r7, #31]
 8002db4:	e037      	b.n	8002e26 <UART_SetConfig+0x216>
 8002db6:	2302      	movs	r3, #2
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e034      	b.n	8002e26 <UART_SetConfig+0x216>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e031      	b.n	8002e26 <UART_SetConfig+0x216>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e02e      	b.n	8002e26 <UART_SetConfig+0x216>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e02b      	b.n	8002e26 <UART_SetConfig+0x216>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <UART_SetConfig+0x348>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d124      	bne.n	8002e22 <UART_SetConfig+0x212>
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <UART_SetConfig+0x338>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002de0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de4:	d011      	beq.n	8002e0a <UART_SetConfig+0x1fa>
 8002de6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dea:	d817      	bhi.n	8002e1c <UART_SetConfig+0x20c>
 8002dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002df0:	d011      	beq.n	8002e16 <UART_SetConfig+0x206>
 8002df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002df6:	d811      	bhi.n	8002e1c <UART_SetConfig+0x20c>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <UART_SetConfig+0x1f4>
 8002dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e00:	d006      	beq.n	8002e10 <UART_SetConfig+0x200>
 8002e02:	e00b      	b.n	8002e1c <UART_SetConfig+0x20c>
 8002e04:	2300      	movs	r3, #0
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e00d      	b.n	8002e26 <UART_SetConfig+0x216>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e00a      	b.n	8002e26 <UART_SetConfig+0x216>
 8002e10:	2304      	movs	r3, #4
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e007      	b.n	8002e26 <UART_SetConfig+0x216>
 8002e16:	2308      	movs	r3, #8
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e004      	b.n	8002e26 <UART_SetConfig+0x216>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e001      	b.n	8002e26 <UART_SetConfig+0x216>
 8002e22:	2310      	movs	r3, #16
 8002e24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	d15c      	bne.n	8002eea <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002e30:	7ffb      	ldrb	r3, [r7, #31]
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d827      	bhi.n	8002e86 <UART_SetConfig+0x276>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <UART_SetConfig+0x22c>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e61 	.word	0x08002e61
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e71 	.word	0x08002e71
 8002e48:	08002e87 	.word	0x08002e87
 8002e4c:	08002e77 	.word	0x08002e77
 8002e50:	08002e87 	.word	0x08002e87
 8002e54:	08002e87 	.word	0x08002e87
 8002e58:	08002e87 	.word	0x08002e87
 8002e5c:	08002e7f 	.word	0x08002e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e60:	f7ff f89a 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002e64:	61b8      	str	r0, [r7, #24]
        break;
 8002e66:	e013      	b.n	8002e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7ff f8b8 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002e6c:	61b8      	str	r0, [r7, #24]
        break;
 8002e6e:	e00f      	b.n	8002e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <UART_SetConfig+0x34c>)
 8002e72:	61bb      	str	r3, [r7, #24]
        break;
 8002e74:	e00c      	b.n	8002e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff f819 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8002e7a:	61b8      	str	r0, [r7, #24]
        break;
 8002e7c:	e008      	b.n	8002e90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e82:	61bb      	str	r3, [r7, #24]
        break;
 8002e84:	e004      	b.n	8002e90 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	77bb      	strb	r3, [r7, #30]
        break;
 8002e8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8085 	beq.w	8002fa2 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	005a      	lsls	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	441a      	add	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d916      	bls.n	8002ee4 <UART_SetConfig+0x2d4>
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d212      	bcs.n	8002ee4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f023 030f 	bic.w	r3, r3, #15
 8002ec6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	89fa      	ldrh	r2, [r7, #14]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e05e      	b.n	8002fa2 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77bb      	strb	r3, [r7, #30]
 8002ee8:	e05b      	b.n	8002fa2 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eea:	7ffb      	ldrb	r3, [r7, #31]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d837      	bhi.n	8002f60 <UART_SetConfig+0x350>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <UART_SetConfig+0x2e8>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	08002f2d 	.word	0x08002f2d
 8002f04:	08002f61 	.word	0x08002f61
 8002f08:	08002f33 	.word	0x08002f33
 8002f0c:	08002f61 	.word	0x08002f61
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002f61 	.word	0x08002f61
 8002f18:	08002f3b 	.word	0x08002f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7ff f83c 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002f20:	61b8      	str	r0, [r7, #24]
        break;
 8002f22:	e022      	b.n	8002f6a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7ff f85a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002f28:	61b8      	str	r0, [r7, #24]
        break;
 8002f2a:	e01e      	b.n	8002f6a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <UART_SetConfig+0x34c>)
 8002f2e:	61bb      	str	r3, [r7, #24]
        break;
 8002f30:	e01b      	b.n	8002f6a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f32:	f7fe ffbb 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8002f36:	61b8      	str	r0, [r7, #24]
        break;
 8002f38:	e017      	b.n	8002f6a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	61bb      	str	r3, [r7, #24]
        break;
 8002f40:	e013      	b.n	8002f6a <UART_SetConfig+0x35a>
 8002f42:	bf00      	nop
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40004400 	.word	0x40004400
 8002f50:	40004800 	.word	0x40004800
 8002f54:	40004c00 	.word	0x40004c00
 8002f58:	40005000 	.word	0x40005000
 8002f5c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77bb      	strb	r3, [r7, #30]
        break;
 8002f68:	bf00      	nop
    }

    if (pclk != 0U)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d018      	beq.n	8002fa2 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	085a      	lsrs	r2, r3, #1
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d908      	bls.n	8002f9e <UART_SetConfig+0x38e>
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d204      	bcs.n	8002f9e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e001      	b.n	8002fa2 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fae:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01a      	beq.n	80030ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d10a      	bne.n	80030ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800310c:	f7fd fb8e 	bl	800082c <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d10e      	bne.n	800313e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f82d 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e023      	b.n	8003186 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d10e      	bne.n	800316a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f817 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e00d      	b.n	8003186 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319e:	e05e      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d05a      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7fd fb40 	bl	800082c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <UART_WaitOnFlagUntilTimeout+0x30>
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11b      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e043      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d02c      	beq.n	800325e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d124      	bne.n	800325e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800321c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800322c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d091      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <Xoodoo_StaticInitialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_StaticInitialize( void )
{
}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <Xoodoo_Initialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_Initialize(void *state)
{
    memset(state, 0, NLANES*sizeof(tXoodooLane));
 800328c:	2230      	movs	r2, #48	; 0x30
 800328e:	2100      	movs	r1, #0
 8003290:	f001 b946 	b.w	8004520 <memset>

08003294 <Xoodoo_AddByte>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddByte(void *state, unsigned char byte, unsigned int offset)
{
    assert(offset < NLANES*sizeof(tXoodooLane));
 8003294:	2a2f      	cmp	r2, #47	; 0x2f
{
 8003296:	b508      	push	{r3, lr}
    assert(offset < NLANES*sizeof(tXoodooLane));
 8003298:	d803      	bhi.n	80032a2 <Xoodoo_AddByte+0xe>
    ((unsigned char *)state)[offset] ^= byte;
 800329a:	5c83      	ldrb	r3, [r0, r2]
 800329c:	4059      	eors	r1, r3
 800329e:	5481      	strb	r1, [r0, r2]
}
 80032a0:	bd08      	pop	{r3, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 80032a2:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <Xoodoo_AddByte+0x1c>)
 80032a4:	4a03      	ldr	r2, [pc, #12]	; (80032b4 <Xoodoo_AddByte+0x20>)
 80032a6:	4804      	ldr	r0, [pc, #16]	; (80032b8 <Xoodoo_AddByte+0x24>)
 80032a8:	2127      	movs	r1, #39	; 0x27
 80032aa:	f001 f8c3 	bl	8004434 <__assert_func>
 80032ae:	bf00      	nop
 80032b0:	0800581c 	.word	0x0800581c
 80032b4:	0800592c 	.word	0x0800592c
 80032b8:	08005840 	.word	0x08005840

080032bc <Xoodoo_AddBytes>:

void Xoodoo_AddBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
    unsigned int i;

    assert(offset < NLANES*sizeof(tXoodooLane));
 80032bc:	2a2f      	cmp	r2, #47	; 0x2f
{
 80032be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(offset < NLANES*sizeof(tXoodooLane));
 80032c0:	d84d      	bhi.n	800335e <Xoodoo_AddBytes+0xa2>
 80032c2:	4694      	mov	ip, r2
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80032c4:	441a      	add	r2, r3
 80032c6:	2a30      	cmp	r2, #48	; 0x30
 80032c8:	d84f      	bhi.n	800336a <Xoodoo_AddBytes+0xae>
    for(i=0; i<length; i++)
 80032ca:	b3c3      	cbz	r3, 800333e <Xoodoo_AddBytes+0x82>
 80032cc:	f10c 0204 	add.w	r2, ip, #4
 80032d0:	4402      	add	r2, r0
 80032d2:	eb00 040c 	add.w	r4, r0, ip
 80032d6:	1d0d      	adds	r5, r1, #4
 80032d8:	42ac      	cmp	r4, r5
 80032da:	bf38      	it	cc
 80032dc:	4291      	cmpcc	r1, r2
 80032de:	d32f      	bcc.n	8003340 <Xoodoo_AddBytes+0x84>
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	2a04      	cmp	r2, #4
 80032e4:	d92c      	bls.n	8003340 <Xoodoo_AddBytes+0x84>
 80032e6:	f023 0e03 	bic.w	lr, r3, #3
 80032ea:	44a6      	add	lr, r4
 80032ec:	4626      	mov	r6, r4
 80032ee:	460f      	mov	r7, r1
        ((unsigned char *)state)[offset+i] ^= data[i];
 80032f0:	f854 5b04 	ldr.w	r5, [r4], #4
 80032f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80032f8:	4574      	cmp	r4, lr
 80032fa:	ea85 0502 	eor.w	r5, r5, r2
 80032fe:	f846 5b04 	str.w	r5, [r6], #4
 8003302:	d1f5      	bne.n	80032f0 <Xoodoo_AddBytes+0x34>
 8003304:	079c      	lsls	r4, r3, #30
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	d018      	beq.n	800333e <Xoodoo_AddBytes+0x82>
 800330c:	eb0c 0402 	add.w	r4, ip, r2
 8003310:	5c8d      	ldrb	r5, [r1, r2]
 8003312:	5d06      	ldrb	r6, [r0, r4]
 8003314:	4075      	eors	r5, r6
    for(i=0; i<length; i++)
 8003316:	1c56      	adds	r6, r2, #1
 8003318:	42b3      	cmp	r3, r6
        ((unsigned char *)state)[offset+i] ^= data[i];
 800331a:	5505      	strb	r5, [r0, r4]
    for(i=0; i<length; i++)
 800331c:	d90f      	bls.n	800333e <Xoodoo_AddBytes+0x82>
        ((unsigned char *)state)[offset+i] ^= data[i];
 800331e:	eb0c 0506 	add.w	r5, ip, r6
 8003322:	5d8c      	ldrb	r4, [r1, r6]
 8003324:	5d46      	ldrb	r6, [r0, r5]
    for(i=0; i<length; i++)
 8003326:	3202      	adds	r2, #2
        ((unsigned char *)state)[offset+i] ^= data[i];
 8003328:	4074      	eors	r4, r6
    for(i=0; i<length; i++)
 800332a:	4293      	cmp	r3, r2
        ((unsigned char *)state)[offset+i] ^= data[i];
 800332c:	5544      	strb	r4, [r0, r5]
    for(i=0; i<length; i++)
 800332e:	d906      	bls.n	800333e <Xoodoo_AddBytes+0x82>
        ((unsigned char *)state)[offset+i] ^= data[i];
 8003330:	4494      	add	ip, r2
 8003332:	5c8b      	ldrb	r3, [r1, r2]
 8003334:	f810 200c 	ldrb.w	r2, [r0, ip]
 8003338:	4053      	eors	r3, r2
 800333a:	f800 300c 	strb.w	r3, [r0, ip]
}
 800333e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003340:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003344:	1e4a      	subs	r2, r1, #1
 8003346:	4460      	add	r0, ip
 8003348:	4413      	add	r3, r2
        ((unsigned char *)state)[offset+i] ^= data[i];
 800334a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800334e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    for(i=0; i<length; i++)
 8003352:	429a      	cmp	r2, r3
        ((unsigned char *)state)[offset+i] ^= data[i];
 8003354:	ea81 0104 	eor.w	r1, r1, r4
 8003358:	7001      	strb	r1, [r0, #0]
    for(i=0; i<length; i++)
 800335a:	d1f6      	bne.n	800334a <Xoodoo_AddBytes+0x8e>
}
 800335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <Xoodoo_AddBytes+0xbc>)
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <Xoodoo_AddBytes+0xc0>)
 8003362:	4807      	ldr	r0, [pc, #28]	; (8003380 <Xoodoo_AddBytes+0xc4>)
 8003364:	2131      	movs	r1, #49	; 0x31
 8003366:	f001 f865 	bl	8004434 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <Xoodoo_AddBytes+0xc8>)
 800336c:	4a03      	ldr	r2, [pc, #12]	; (800337c <Xoodoo_AddBytes+0xc0>)
 800336e:	4804      	ldr	r0, [pc, #16]	; (8003380 <Xoodoo_AddBytes+0xc4>)
 8003370:	2132      	movs	r1, #50	; 0x32
 8003372:	f001 f85f 	bl	8004434 <__assert_func>
 8003376:	bf00      	nop
 8003378:	0800581c 	.word	0x0800581c
 800337c:	0800593c 	.word	0x0800593c
 8003380:	08005840 	.word	0x08005840
 8003384:	080058d0 	.word	0x080058d0

08003388 <Xoodoo_ExtractBytes>:

/* ---------------------------------------------------------------- */

void Xoodoo_ExtractBytes(const void *state, unsigned char *data, unsigned int offset, unsigned int length)
{
    assert(offset < NLANES*sizeof(tXoodooLane));
 8003388:	2a2f      	cmp	r2, #47	; 0x2f
{
 800338a:	b538      	push	{r3, r4, r5, lr}
    assert(offset < NLANES*sizeof(tXoodooLane));
 800338c:	d80b      	bhi.n	80033a6 <Xoodoo_ExtractBytes+0x1e>
 800338e:	4614      	mov	r4, r2
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8003390:	441a      	add	r2, r3
 8003392:	2a30      	cmp	r2, #48	; 0x30
 8003394:	d80d      	bhi.n	80033b2 <Xoodoo_ExtractBytes+0x2a>
 8003396:	4605      	mov	r5, r0
    memcpy(data, (unsigned char*)state+offset, length);
 8003398:	461a      	mov	r2, r3
 800339a:	4608      	mov	r0, r1
 800339c:	1929      	adds	r1, r5, r4
}
 800339e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memcpy(data, (unsigned char*)state+offset, length);
 80033a2:	f001 b8af 	b.w	8004504 <memcpy>
    assert(offset < NLANES*sizeof(tXoodooLane));
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <Xoodoo_ExtractBytes+0x38>)
 80033a8:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <Xoodoo_ExtractBytes+0x3c>)
 80033aa:	4807      	ldr	r0, [pc, #28]	; (80033c8 <Xoodoo_ExtractBytes+0x40>)
 80033ac:	214c      	movs	r1, #76	; 0x4c
 80033ae:	f001 f841 	bl	8004434 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <Xoodoo_ExtractBytes+0x44>)
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <Xoodoo_ExtractBytes+0x3c>)
 80033b6:	4804      	ldr	r0, [pc, #16]	; (80033c8 <Xoodoo_ExtractBytes+0x40>)
 80033b8:	214d      	movs	r1, #77	; 0x4d
 80033ba:	f001 f83b 	bl	8004434 <__assert_func>
 80033be:	bf00      	nop
 80033c0:	0800581c 	.word	0x0800581c
 80033c4:	0800594c 	.word	0x0800594c
 80033c8:	08005840 	.word	0x08005840
 80033cc:	080058d0 	.word	0x080058d0

080033d0 <Xoodoo_ExtractAndAddBytes>:

/* ---------------------------------------------------------------- */

void Xoodoo_ExtractAndAddBytes(const void *state, const unsigned char *input, unsigned char *output, unsigned int offset, unsigned int length)
{
 80033d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned int i;

    assert(offset < NLANES*sizeof(tXoodooLane));
 80033d4:	2b2f      	cmp	r3, #47	; 0x2f
{
 80033d6:	f8dd c018 	ldr.w	ip, [sp, #24]
    assert(offset < NLANES*sizeof(tXoodooLane));
 80033da:	d852      	bhi.n	8003482 <Xoodoo_ExtractAndAddBytes+0xb2>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 80033dc:	eb03 040c 	add.w	r4, r3, ip
 80033e0:	2c30      	cmp	r4, #48	; 0x30
 80033e2:	d854      	bhi.n	800348e <Xoodoo_ExtractAndAddBytes+0xbe>
    for(i=0; i<length; i++)
 80033e4:	f1bc 0f00 	cmp.w	ip, #0
 80033e8:	d038      	beq.n	800345c <Xoodoo_ExtractAndAddBytes+0x8c>
 80033ea:	1d1c      	adds	r4, r3, #4
 80033ec:	4404      	add	r4, r0
 80033ee:	18c6      	adds	r6, r0, r3
 80033f0:	1d15      	adds	r5, r2, #4
 80033f2:	42ae      	cmp	r6, r5
 80033f4:	bf38      	it	cc
 80033f6:	42a2      	cmpcc	r2, r4
 80033f8:	d332      	bcc.n	8003460 <Xoodoo_ExtractAndAddBytes+0x90>
 80033fa:	1ccc      	adds	r4, r1, #3
 80033fc:	1aa4      	subs	r4, r4, r2
 80033fe:	f10c 35ff 	add.w	r5, ip, #4294967295
 8003402:	2c06      	cmp	r4, #6
 8003404:	bf88      	it	hi
 8003406:	2d04      	cmphi	r5, #4
 8003408:	d92a      	bls.n	8003460 <Xoodoo_ExtractAndAddBytes+0x90>
 800340a:	f02c 0803 	bic.w	r8, ip, #3
 800340e:	4488      	add	r8, r1
 8003410:	460d      	mov	r5, r1
 8003412:	4617      	mov	r7, r2
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 8003414:	f855 4b04 	ldr.w	r4, [r5], #4
 8003418:	f856 eb04 	ldr.w	lr, [r6], #4
 800341c:	4545      	cmp	r5, r8
 800341e:	ea84 040e 	eor.w	r4, r4, lr
 8003422:	f847 4b04 	str.w	r4, [r7], #4
 8003426:	d1f5      	bne.n	8003414 <Xoodoo_ExtractAndAddBytes+0x44>
 8003428:	f01c 0f03 	tst.w	ip, #3
 800342c:	f02c 0403 	bic.w	r4, ip, #3
 8003430:	d014      	beq.n	800345c <Xoodoo_ExtractAndAddBytes+0x8c>
 8003432:	1905      	adds	r5, r0, r4
 8003434:	5d0f      	ldrb	r7, [r1, r4]
 8003436:	5cee      	ldrb	r6, [r5, r3]
    for(i=0; i<length; i++)
 8003438:	1c65      	adds	r5, r4, #1
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 800343a:	407e      	eors	r6, r7
    for(i=0; i<length; i++)
 800343c:	45ac      	cmp	ip, r5
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 800343e:	5516      	strb	r6, [r2, r4]
    for(i=0; i<length; i++)
 8003440:	d90c      	bls.n	800345c <Xoodoo_ExtractAndAddBytes+0x8c>
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 8003442:	1946      	adds	r6, r0, r5
 8003444:	5d4f      	ldrb	r7, [r1, r5]
 8003446:	5cf6      	ldrb	r6, [r6, r3]
    for(i=0; i<length; i++)
 8003448:	3402      	adds	r4, #2
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 800344a:	407e      	eors	r6, r7
    for(i=0; i<length; i++)
 800344c:	45a4      	cmp	ip, r4
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 800344e:	5556      	strb	r6, [r2, r5]
    for(i=0; i<length; i++)
 8003450:	d904      	bls.n	800345c <Xoodoo_ExtractAndAddBytes+0x8c>
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 8003452:	4420      	add	r0, r4
 8003454:	5d09      	ldrb	r1, [r1, r4]
 8003456:	5cc3      	ldrb	r3, [r0, r3]
 8003458:	404b      	eors	r3, r1
 800345a:	5513      	strb	r3, [r2, r4]
}
 800345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003460:	3901      	subs	r1, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	448c      	add	ip, r1
 8003466:	4418      	add	r0, r3
 8003468:	3a01      	subs	r2, #1
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 800346a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800346e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    for(i=0; i<length; i++)
 8003472:	4561      	cmp	r1, ip
        output[i] = input[i] ^ ((unsigned char *)state)[offset+i];
 8003474:	ea83 0304 	eor.w	r3, r3, r4
 8003478:	f802 3f01 	strb.w	r3, [r2, #1]!
    for(i=0; i<length; i++)
 800347c:	d1f5      	bne.n	800346a <Xoodoo_ExtractAndAddBytes+0x9a>
}
 800347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <Xoodoo_ExtractAndAddBytes+0xcc>)
 8003484:	4a06      	ldr	r2, [pc, #24]	; (80034a0 <Xoodoo_ExtractAndAddBytes+0xd0>)
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <Xoodoo_ExtractAndAddBytes+0xd4>)
 8003488:	2157      	movs	r1, #87	; 0x57
 800348a:	f000 ffd3 	bl	8004434 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <Xoodoo_ExtractAndAddBytes+0xd8>)
 8003490:	4a03      	ldr	r2, [pc, #12]	; (80034a0 <Xoodoo_ExtractAndAddBytes+0xd0>)
 8003492:	4804      	ldr	r0, [pc, #16]	; (80034a4 <Xoodoo_ExtractAndAddBytes+0xd4>)
 8003494:	2158      	movs	r1, #88	; 0x58
 8003496:	f000 ffcd 	bl	8004434 <__assert_func>
 800349a:	bf00      	nop
 800349c:	0800581c 	.word	0x0800581c
 80034a0:	08005960 	.word	0x08005960
 80034a4:	08005840 	.word	0x08005840
 80034a8:	080058d0 	.word	0x080058d0

080034ac <fromBytesToWords>:
static void fromBytesToWords(tXoodooLane *stateAsWords, const unsigned char *state)
{
    unsigned int i, j;

    for(i=0; i<NLANES; i++) {
        stateAsWords[i] = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	6003      	str	r3, [r0, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80034b0:	780a      	ldrb	r2, [r1, #0]
 80034b2:	6002      	str	r2, [r0, #0]
{
 80034b4:	b410      	push	{r4}
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80034b6:	784c      	ldrb	r4, [r1, #1]
 80034b8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80034bc:	6002      	str	r2, [r0, #0]
 80034be:	788c      	ldrb	r4, [r1, #2]
 80034c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80034c4:	6002      	str	r2, [r0, #0]
 80034c6:	78cc      	ldrb	r4, [r1, #3]
        stateAsWords[i] = 0;
 80034c8:	6043      	str	r3, [r0, #4]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80034ca:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80034ce:	6002      	str	r2, [r0, #0]
 80034d0:	790a      	ldrb	r2, [r1, #4]
 80034d2:	6042      	str	r2, [r0, #4]
 80034d4:	794c      	ldrb	r4, [r1, #5]
 80034d6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80034da:	6042      	str	r2, [r0, #4]
 80034dc:	798c      	ldrb	r4, [r1, #6]
 80034de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80034e2:	6042      	str	r2, [r0, #4]
 80034e4:	79cc      	ldrb	r4, [r1, #7]
        stateAsWords[i] = 0;
 80034e6:	6083      	str	r3, [r0, #8]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80034e8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80034ec:	6042      	str	r2, [r0, #4]
 80034ee:	7a0a      	ldrb	r2, [r1, #8]
 80034f0:	6082      	str	r2, [r0, #8]
 80034f2:	7a4c      	ldrb	r4, [r1, #9]
 80034f4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80034f8:	6082      	str	r2, [r0, #8]
 80034fa:	7a8c      	ldrb	r4, [r1, #10]
 80034fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003500:	6082      	str	r2, [r0, #8]
 8003502:	7acc      	ldrb	r4, [r1, #11]
        stateAsWords[i] = 0;
 8003504:	60c3      	str	r3, [r0, #12]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8003506:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800350a:	6082      	str	r2, [r0, #8]
 800350c:	7b0a      	ldrb	r2, [r1, #12]
 800350e:	60c2      	str	r2, [r0, #12]
 8003510:	7b4c      	ldrb	r4, [r1, #13]
 8003512:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003516:	60c2      	str	r2, [r0, #12]
 8003518:	7b8c      	ldrb	r4, [r1, #14]
 800351a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800351e:	60c2      	str	r2, [r0, #12]
 8003520:	7bcc      	ldrb	r4, [r1, #15]
        stateAsWords[i] = 0;
 8003522:	6103      	str	r3, [r0, #16]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8003524:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8003528:	60c2      	str	r2, [r0, #12]
 800352a:	7c0a      	ldrb	r2, [r1, #16]
 800352c:	6102      	str	r2, [r0, #16]
 800352e:	7c4c      	ldrb	r4, [r1, #17]
 8003530:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003534:	6102      	str	r2, [r0, #16]
 8003536:	7c8c      	ldrb	r4, [r1, #18]
 8003538:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800353c:	6102      	str	r2, [r0, #16]
 800353e:	7ccc      	ldrb	r4, [r1, #19]
        stateAsWords[i] = 0;
 8003540:	6143      	str	r3, [r0, #20]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8003542:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8003546:	6102      	str	r2, [r0, #16]
 8003548:	7d0a      	ldrb	r2, [r1, #20]
 800354a:	6142      	str	r2, [r0, #20]
 800354c:	7d4c      	ldrb	r4, [r1, #21]
 800354e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003552:	6142      	str	r2, [r0, #20]
 8003554:	7d8c      	ldrb	r4, [r1, #22]
 8003556:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800355a:	6142      	str	r2, [r0, #20]
 800355c:	7dcc      	ldrb	r4, [r1, #23]
        stateAsWords[i] = 0;
 800355e:	6183      	str	r3, [r0, #24]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8003560:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8003564:	6142      	str	r2, [r0, #20]
 8003566:	7e0a      	ldrb	r2, [r1, #24]
 8003568:	6182      	str	r2, [r0, #24]
 800356a:	7e4c      	ldrb	r4, [r1, #25]
 800356c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003570:	6182      	str	r2, [r0, #24]
 8003572:	7e8c      	ldrb	r4, [r1, #26]
 8003574:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003578:	6182      	str	r2, [r0, #24]
 800357a:	7ecc      	ldrb	r4, [r1, #27]
        stateAsWords[i] = 0;
 800357c:	61c3      	str	r3, [r0, #28]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800357e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8003582:	6182      	str	r2, [r0, #24]
 8003584:	7f0a      	ldrb	r2, [r1, #28]
 8003586:	61c2      	str	r2, [r0, #28]
 8003588:	7f4c      	ldrb	r4, [r1, #29]
 800358a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800358e:	61c2      	str	r2, [r0, #28]
 8003590:	7f8c      	ldrb	r4, [r1, #30]
 8003592:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003596:	61c2      	str	r2, [r0, #28]
 8003598:	7fcc      	ldrb	r4, [r1, #31]
        stateAsWords[i] = 0;
 800359a:	6203      	str	r3, [r0, #32]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800359c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80035a0:	61c2      	str	r2, [r0, #28]
 80035a2:	f891 2020 	ldrb.w	r2, [r1, #32]
 80035a6:	6202      	str	r2, [r0, #32]
 80035a8:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 80035ac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80035b0:	6202      	str	r2, [r0, #32]
 80035b2:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 80035b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80035ba:	6202      	str	r2, [r0, #32]
 80035bc:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
        stateAsWords[i] = 0;
 80035c0:	6243      	str	r3, [r0, #36]	; 0x24
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80035c2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80035c6:	6202      	str	r2, [r0, #32]
 80035c8:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
 80035cc:	6242      	str	r2, [r0, #36]	; 0x24
 80035ce:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80035d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80035d6:	6242      	str	r2, [r0, #36]	; 0x24
 80035d8:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 80035dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80035e0:	6242      	str	r2, [r0, #36]	; 0x24
 80035e2:	f891 4027 	ldrb.w	r4, [r1, #39]	; 0x27
        stateAsWords[i] = 0;
 80035e6:	6283      	str	r3, [r0, #40]	; 0x28
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80035e8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80035ec:	6242      	str	r2, [r0, #36]	; 0x24
 80035ee:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80035f2:	6282      	str	r2, [r0, #40]	; 0x28
 80035f4:	f891 4029 	ldrb.w	r4, [r1, #41]	; 0x29
 80035f8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80035fc:	6282      	str	r2, [r0, #40]	; 0x28
 80035fe:	f891 402a 	ldrb.w	r4, [r1, #42]	; 0x2a
 8003602:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003606:	6282      	str	r2, [r0, #40]	; 0x28
 8003608:	f891 402b 	ldrb.w	r4, [r1, #43]	; 0x2b
        stateAsWords[i] = 0;
 800360c:	62c3      	str	r3, [r0, #44]	; 0x2c
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800360e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8003612:	6282      	str	r2, [r0, #40]	; 0x28
 8003614:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8003618:	62c3      	str	r3, [r0, #44]	; 0x2c
 800361a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    }
}
 800361e:	f85d 4b04 	ldr.w	r4, [sp], #4
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8003622:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003626:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003628:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 800362c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003630:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003632:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
 8003636:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800363a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop

08003640 <fromWordsToBytes>:
{
    unsigned int i, j;

    for(i=0; i<NLANES; i++)
        for(j=0; j<sizeof(tXoodooLane); j++)
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 8003640:	680b      	ldr	r3, [r1, #0]
 8003642:	7003      	strb	r3, [r0, #0]
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	7043      	strb	r3, [r0, #1]
 800364a:	884b      	ldrh	r3, [r1, #2]
 800364c:	7083      	strb	r3, [r0, #2]
 800364e:	78cb      	ldrb	r3, [r1, #3]
 8003650:	70c3      	strb	r3, [r0, #3]
 8003652:	684b      	ldr	r3, [r1, #4]
 8003654:	7103      	strb	r3, [r0, #4]
 8003656:	684b      	ldr	r3, [r1, #4]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	7143      	strb	r3, [r0, #5]
 800365c:	88cb      	ldrh	r3, [r1, #6]
 800365e:	7183      	strb	r3, [r0, #6]
 8003660:	79cb      	ldrb	r3, [r1, #7]
 8003662:	71c3      	strb	r3, [r0, #7]
 8003664:	688b      	ldr	r3, [r1, #8]
 8003666:	7203      	strb	r3, [r0, #8]
 8003668:	688b      	ldr	r3, [r1, #8]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	7243      	strb	r3, [r0, #9]
 800366e:	894b      	ldrh	r3, [r1, #10]
 8003670:	7283      	strb	r3, [r0, #10]
 8003672:	7acb      	ldrb	r3, [r1, #11]
 8003674:	72c3      	strb	r3, [r0, #11]
 8003676:	68cb      	ldr	r3, [r1, #12]
 8003678:	7303      	strb	r3, [r0, #12]
 800367a:	68cb      	ldr	r3, [r1, #12]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	7343      	strb	r3, [r0, #13]
 8003680:	89cb      	ldrh	r3, [r1, #14]
 8003682:	7383      	strb	r3, [r0, #14]
 8003684:	7bcb      	ldrb	r3, [r1, #15]
 8003686:	73c3      	strb	r3, [r0, #15]
 8003688:	690b      	ldr	r3, [r1, #16]
 800368a:	7403      	strb	r3, [r0, #16]
 800368c:	690b      	ldr	r3, [r1, #16]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	7443      	strb	r3, [r0, #17]
 8003692:	8a4b      	ldrh	r3, [r1, #18]
 8003694:	7483      	strb	r3, [r0, #18]
 8003696:	7ccb      	ldrb	r3, [r1, #19]
 8003698:	74c3      	strb	r3, [r0, #19]
 800369a:	694b      	ldr	r3, [r1, #20]
 800369c:	7503      	strb	r3, [r0, #20]
 800369e:	694b      	ldr	r3, [r1, #20]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	7543      	strb	r3, [r0, #21]
 80036a4:	8acb      	ldrh	r3, [r1, #22]
 80036a6:	7583      	strb	r3, [r0, #22]
 80036a8:	7dcb      	ldrb	r3, [r1, #23]
 80036aa:	75c3      	strb	r3, [r0, #23]
 80036ac:	698b      	ldr	r3, [r1, #24]
 80036ae:	7603      	strb	r3, [r0, #24]
 80036b0:	698b      	ldr	r3, [r1, #24]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	7643      	strb	r3, [r0, #25]
 80036b6:	8b4b      	ldrh	r3, [r1, #26]
 80036b8:	7683      	strb	r3, [r0, #26]
 80036ba:	7ecb      	ldrb	r3, [r1, #27]
 80036bc:	76c3      	strb	r3, [r0, #27]
 80036be:	69cb      	ldr	r3, [r1, #28]
 80036c0:	7703      	strb	r3, [r0, #28]
 80036c2:	69cb      	ldr	r3, [r1, #28]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	7743      	strb	r3, [r0, #29]
 80036c8:	8bcb      	ldrh	r3, [r1, #30]
 80036ca:	7783      	strb	r3, [r0, #30]
 80036cc:	7fcb      	ldrb	r3, [r1, #31]
 80036ce:	77c3      	strb	r3, [r0, #31]
 80036d0:	6a0b      	ldr	r3, [r1, #32]
 80036d2:	f880 3020 	strb.w	r3, [r0, #32]
 80036d6:	6a0b      	ldr	r3, [r1, #32]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80036de:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 80036e0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80036e4:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
 80036e8:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80036ec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80036ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80036f2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80036fa:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
 80036fc:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 8003700:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
 8003704:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8003708:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800370a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800370e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8003716:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
 8003718:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 800371c:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8003720:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 8003724:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003726:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800372a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
 8003732:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
 8003734:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8003738:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800373c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <Xoodoo_Round>:

static void Xoodoo_Round( tXoodooLane * a, tXoodooLane rc )
{
 8003744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003748:	f100 0510 	add.w	r5, r0, #16
 800374c:	f100 0720 	add.w	r7, r0, #32
 8003750:	ea45 0307 	orr.w	r3, r5, r7
 8003754:	b099      	sub	sp, #100	; 0x64
 8003756:	4303      	orrs	r3, r0
 8003758:	f013 0307 	ands.w	r3, r3, #7
 800375c:	4684      	mov	ip, r0
 800375e:	9102      	str	r1, [sp, #8]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	f040 81d8 	bne.w	8003b16 <Xoodoo_Round+0x3d2>
    tXoodooLane    p[NCOLUMS];
    tXoodooLane    e[NCOLUMS];

    /* Theta: Column Parity Mixer */
    for (x=0; x<NCOLUMS; ++x)
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8003766:	6a04      	ldr	r4, [r0, #32]
 8003768:	6901      	ldr	r1, [r0, #16]
 800376a:	f8dc 6000 	ldr.w	r6, [ip]
 800376e:	6940      	ldr	r0, [r0, #20]
 8003770:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 8003774:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8003778:	4061      	eors	r1, r4
 800377a:	404e      	eors	r6, r1
 800377c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003780:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8003784:	9604      	str	r6, [sp, #16]
 8003786:	4042      	eors	r2, r0
 8003788:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
 800378c:	f8dc 602c 	ldr.w	r6, [ip, #44]	; 0x2c
 8003790:	4051      	eors	r1, r2
 8003792:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8003796:	9105      	str	r1, [sp, #20]
 8003798:	4043      	eors	r3, r0
 800379a:	4053      	eors	r3, r2
 800379c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80037a0:	9306      	str	r3, [sp, #24]
 80037a2:	4074      	eors	r4, r6
 80037a4:	4054      	eors	r4, r2
 80037a6:	9407      	str	r4, [sp, #28]
    for (x=0; x<NCOLUMS; ++x)
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 80037a8:	a804      	add	r0, sp, #16
 80037aa:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80037ac:	ea4c 0505 	orr.w	r5, ip, r5
 80037b0:	ea4f 4ab3 	mov.w	sl, r3, ror #18
 80037b4:	432f      	orrs	r7, r5
 80037b6:	ea4f 4eb0 	mov.w	lr, r0, ror #18
 80037ba:	ea4f 49b1 	mov.w	r9, r1, ror #18
 80037be:	ea4f 48b2 	mov.w	r8, r2, ror #18
 80037c2:	ea8a 6af3 	eor.w	sl, sl, r3, ror #27
 80037c6:	ea8e 60f0 	eor.w	r0, lr, r0, ror #27
 80037ca:	ea89 69f1 	eor.w	r9, r9, r1, ror #27
 80037ce:	ea88 68f2 	eor.w	r8, r8, r2, ror #27
 80037d2:	077b      	lsls	r3, r7, #29
 80037d4:	e9cd a008 	strd	sl, r0, [sp, #32]
 80037d8:	e9cd 980a 	strd	r9, r8, [sp, #40]	; 0x28
 80037dc:	f040 8150 	bne.w	8003a80 <Xoodoo_Round+0x33c>
    for (x=0; x<NCOLUMS; ++x)
        for (y=0; y<NROWS; ++y)
            a[index(x,y)] ^= e[x];
 80037e0:	e9dc 4500 	ldrd	r4, r5, [ip]
 80037e4:	e9dc 1204 	ldrd	r1, r2, [ip, #16]
 80037e8:	e9dc 7608 	ldrd	r7, r6, [ip, #32]
 80037ec:	ea8a 0404 	eor.w	r4, sl, r4
 80037f0:	4045      	eors	r5, r0
 80037f2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80037f6:	f8cc 4000 	str.w	r4, [ip]
 80037fa:	f8cc 5004 	str.w	r5, [ip, #4]
 80037fe:	f8dc 401c 	ldr.w	r4, [ip, #28]
 8003802:	f8dc 5028 	ldr.w	r5, [ip, #40]	; 0x28
 8003806:	ea8a 0101 	eor.w	r1, sl, r1
 800380a:	ea8a 0707 	eor.w	r7, sl, r7
 800380e:	ea89 0303 	eor.w	r3, r9, r3
 8003812:	ea88 0a04 	eor.w	sl, r8, r4
 8003816:	ea89 0405 	eor.w	r4, r9, r5
 800381a:	f8dc 502c 	ldr.w	r5, [ip, #44]	; 0x2c
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8003824:	9100      	str	r1, [sp, #0]
 8003826:	4042      	eors	r2, r0
 8003828:	4046      	eors	r6, r0
 800382a:	ea88 0505 	eor.w	r5, r8, r5
 800382e:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8003832:	f8cc 1010 	str.w	r1, [ip, #16]
 8003836:	ea89 0e03 	eor.w	lr, r9, r3
 800383a:	e9cc 7608 	strd	r7, r6, [ip, #32]
 800383e:	9b03      	ldr	r3, [sp, #12]
 8003840:	f8cc 2014 	str.w	r2, [ip, #20]
 8003844:	e9cc 450a 	strd	r4, r5, [ip, #40]	; 0x28
 8003848:	ea88 0000 	eor.w	r0, r8, r0
 800384c:	e9cc 3002 	strd	r3, r0, [ip, #8]
 8003850:	4693      	mov	fp, r2
 8003852:	f8cc e018 	str.w	lr, [ip, #24]
 8003856:	4673      	mov	r3, lr
 8003858:	f8cc a01c 	str.w	sl, [ip, #28]

    /* Rho-west: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
        b[index(x,0)] = a[index(x,0)];
        b[index(x,1)] = a[index(x-1,1)];
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 800385c:	ea4f 5474 	mov.w	r4, r4, ror #21
 8003860:	f8dc 0000 	ldr.w	r0, [ip]
 8003864:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003868:	f8dc 2008 	ldr.w	r2, [ip, #8]
        b[index(x,1)] = a[index(x-1,1)];
 800386c:	9313      	str	r3, [sp, #76]	; 0x4c
 800386e:	f8dc 300c 	ldr.w	r3, [ip, #12]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8003872:	9416      	str	r4, [sp, #88]	; 0x58
 8003874:	ac0c      	add	r4, sp, #48	; 0x30
 8003876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        b[index(x,1)] = a[index(x-1,1)];
 8003878:	9b00      	ldr	r3, [sp, #0]
 800387a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800387e:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8003882:	ea4f 5777 	mov.w	r7, r7, ror #21
 8003886:	ea4f 5676 	mov.w	r6, r6, ror #21
 800388a:	ea4f 5575 	mov.w	r5, r5, ror #21
 800388e:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
 8003892:	9517      	str	r5, [sp, #92]	; 0x5c
    }
    memcpy( a, b, sizeof(b) );
 8003894:	ae0c      	add	r6, sp, #48	; 0x30
 8003896:	4665      	mov	r5, ip
 8003898:	af18      	add	r7, sp, #96	; 0x60
 800389a:	4634      	mov	r4, r6
 800389c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389e:	42bc      	cmp	r4, r7
 80038a0:	6028      	str	r0, [r5, #0]
 80038a2:	6069      	str	r1, [r5, #4]
 80038a4:	60aa      	str	r2, [r5, #8]
 80038a6:	60eb      	str	r3, [r5, #12]
 80038a8:	4626      	mov	r6, r4
 80038aa:	f105 0510 	add.w	r5, r5, #16
 80038ae:	d1f4      	bne.n	800389a <Xoodoo_Round+0x156>
    Dump("Rho-west", a, 2);
        
    /* Iota: round constant */
    a[0] ^= rc;
 80038b0:	f8dc 1000 	ldr.w	r1, [ip]
 80038b4:	9b02      	ldr	r3, [sp, #8]
 80038b6:	404b      	eors	r3, r1
 80038b8:	4619      	mov	r1, r3
 80038ba:	f8cc 3000 	str.w	r3, [ip]
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f040 8095 	bne.w	80039f0 <Xoodoo_Round+0x2ac>
    Dump("Iota", a, 2);

    /* Chi: non linear layer */
    for (x=0; x<NCOLUMS; ++x)
        for (y=0; y<NROWS; ++y)
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 80038c6:	e9dc e304 	ldrd	lr, r3, [ip, #16]
 80038ca:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80038ce:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 80038d2:	f8dc 4020 	ldr.w	r4, [ip, #32]
 80038d6:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
 80038da:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80038de:	ea27 0502 	bic.w	r5, r7, r2
 80038e2:	405d      	eors	r5, r3
 80038e4:	9511      	str	r5, [sp, #68]	; 0x44
 80038e6:	ea22 0503 	bic.w	r5, r2, r3
 80038ea:	ea23 0307 	bic.w	r3, r3, r7
 80038ee:	4053      	eors	r3, r2
 80038f0:	9315      	str	r3, [sp, #84]	; 0x54
 80038f2:	ea24 030e 	bic.w	r3, r4, lr
 80038f6:	407d      	eors	r5, r7
 80038f8:	404b      	eors	r3, r1
 80038fa:	ea21 0704 	bic.w	r7, r1, r4
 80038fe:	ea2e 0101 	bic.w	r1, lr, r1
 8003902:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8003906:	950d      	str	r5, [sp, #52]	; 0x34
 8003908:	4061      	eors	r1, r4
 800390a:	9114      	str	r1, [sp, #80]	; 0x50
 800390c:	ea26 0100 	bic.w	r1, r6, r0
 8003910:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8003914:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 8003918:	930c      	str	r3, [sp, #48]	; 0x30
 800391a:	4051      	eors	r1, r2
 800391c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8003920:	9112      	str	r1, [sp, #72]	; 0x48
 8003922:	ea20 0102 	bic.w	r1, r0, r2
 8003926:	ea22 0206 	bic.w	r2, r2, r6
 800392a:	4071      	eors	r1, r6
 800392c:	4042      	eors	r2, r0
 800392e:	ea25 0004 	bic.w	r0, r5, r4
 8003932:	4058      	eors	r0, r3
 8003934:	910e      	str	r1, [sp, #56]	; 0x38
 8003936:	ea24 0103 	bic.w	r1, r4, r3
 800393a:	ea23 0305 	bic.w	r3, r3, r5
 800393e:	ea87 070e 	eor.w	r7, r7, lr
 8003942:	4069      	eors	r1, r5
 8003944:	4063      	eors	r3, r4
 8003946:	9710      	str	r7, [sp, #64]	; 0x40
 8003948:	9216      	str	r2, [sp, #88]	; 0x58
 800394a:	9013      	str	r0, [sp, #76]	; 0x4c
 800394c:	910f      	str	r1, [sp, #60]	; 0x3c
 800394e:	9317      	str	r3, [sp, #92]	; 0x5c
    memcpy( a, b, sizeof(b) );
 8003950:	ae0c      	add	r6, sp, #48	; 0x30
 8003952:	4665      	mov	r5, ip
 8003954:	af18      	add	r7, sp, #96	; 0x60
 8003956:	4634      	mov	r4, r6
 8003958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800395a:	42bc      	cmp	r4, r7
 800395c:	6028      	str	r0, [r5, #0]
 800395e:	6069      	str	r1, [r5, #4]
 8003960:	60aa      	str	r2, [r5, #8]
 8003962:	60eb      	str	r3, [r5, #12]
 8003964:	4626      	mov	r6, r4
 8003966:	f105 0510 	add.w	r5, r5, #16
 800396a:	d1f4      	bne.n	8003956 <Xoodoo_Round+0x212>
    Dump("Chi", a, 2);

    /* Rho-east: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
        b[index(x,0)] = a[index(x,0)];
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 800396c:	e9dc 5406 	ldrd	r5, r4, [ip, #24]
 8003970:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003974:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8003978:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800397c:	f8dc 0000 	ldr.w	r0, [ip]
 8003980:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8003984:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8003988:	e9dc 2308 	ldrd	r2, r3, [ip, #32]
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 800398c:	ea4f 79f4 	mov.w	r9, r4, ror #31
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8003990:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 8003994:	f8dc 4028 	ldr.w	r4, [ip, #40]	; 0x28
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 8003998:	e9dc 7604 	ldrd	r7, r6, [ip, #16]
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 800399c:	ea4f 6834 	mov.w	r8, r4, ror #24
 80039a0:	ea4f 6131 	mov.w	r1, r1, ror #24
 80039a4:	ea4f 6232 	mov.w	r2, r2, ror #24
 80039a8:	e9cd 9813 	strd	r9, r8, [sp, #76]	; 0x4c
 80039ac:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80039b0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80039b4:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80039b8:	ea4f 76f6 	mov.w	r6, r6, ror #31
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 80039bc:	ea4f 6333 	mov.w	r3, r3, ror #24
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80039c0:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
 80039c4:	9710      	str	r7, [sp, #64]	; 0x40
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 80039c6:	9317      	str	r3, [sp, #92]	; 0x5c
    }
    memcpy( a, b, sizeof(b) );
 80039c8:	af0c      	add	r7, sp, #48	; 0x30
 80039ca:	ad18      	add	r5, sp, #96	; 0x60
 80039cc:	463c      	mov	r4, r7
 80039ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d0:	42ac      	cmp	r4, r5
 80039d2:	f8cc 0000 	str.w	r0, [ip]
 80039d6:	f8cc 1004 	str.w	r1, [ip, #4]
 80039da:	f8cc 2008 	str.w	r2, [ip, #8]
 80039de:	f8cc 300c 	str.w	r3, [ip, #12]
 80039e2:	4627      	mov	r7, r4
 80039e4:	f10c 0c10 	add.w	ip, ip, #16
 80039e8:	d1f0      	bne.n	80039cc <Xoodoo_Round+0x288>
    Dump("Rho-east", a, 2);

}
 80039ea:	b019      	add	sp, #100	; 0x64
 80039ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 80039f0:	f8dc 6020 	ldr.w	r6, [ip, #32]
 80039f4:	f8dc e010 	ldr.w	lr, [ip, #16]
 80039f8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80039fc:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8003a00:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
 8003a04:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8003a08:	ea26 030e 	bic.w	r3, r6, lr
 8003a0c:	404b      	eors	r3, r1
 8003a0e:	ea21 0206 	bic.w	r2, r1, r6
 8003a12:	930c      	str	r3, [sp, #48]	; 0x30
 8003a14:	ea2e 0301 	bic.w	r3, lr, r1
 8003a18:	4073      	eors	r3, r6
 8003a1a:	ea82 020e 	eor.w	r2, r2, lr
 8003a1e:	f8dc 6028 	ldr.w	r6, [ip, #40]	; 0x28
 8003a22:	9210      	str	r2, [sp, #64]	; 0x40
 8003a24:	ea20 0107 	bic.w	r1, r0, r7
 8003a28:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8003a2c:	9314      	str	r3, [sp, #80]	; 0x50
 8003a2e:	4061      	eors	r1, r4
 8003a30:	ea27 0304 	bic.w	r3, r7, r4
 8003a34:	4043      	eors	r3, r0
 8003a36:	9115      	str	r1, [sp, #84]	; 0x54
 8003a38:	ea25 0106 	bic.w	r1, r5, r6
 8003a3c:	4051      	eors	r1, r2
 8003a3e:	9311      	str	r3, [sp, #68]	; 0x44
 8003a40:	ea24 0300 	bic.w	r3, r4, r0
 8003a44:	407b      	eors	r3, r7
 8003a46:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8003a4a:	f8dc 002c 	ldr.w	r0, [ip, #44]	; 0x2c
 8003a4e:	9112      	str	r1, [sp, #72]	; 0x48
 8003a50:	ea26 0102 	bic.w	r1, r6, r2
 8003a54:	4069      	eors	r1, r5
 8003a56:	930d      	str	r3, [sp, #52]	; 0x34
 8003a58:	ea22 0205 	bic.w	r2, r2, r5
 8003a5c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8003a60:	910e      	str	r1, [sp, #56]	; 0x38
 8003a62:	4072      	eors	r2, r6
 8003a64:	ea24 0100 	bic.w	r1, r4, r0
 8003a68:	4059      	eors	r1, r3
 8003a6a:	9216      	str	r2, [sp, #88]	; 0x58
 8003a6c:	ea20 0203 	bic.w	r2, r0, r3
 8003a70:	ea23 0304 	bic.w	r3, r3, r4
 8003a74:	4062      	eors	r2, r4
 8003a76:	4043      	eors	r3, r0
 8003a78:	9113      	str	r1, [sp, #76]	; 0x4c
 8003a7a:	920f      	str	r2, [sp, #60]	; 0x3c
 8003a7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8003a7e:	e767      	b.n	8003950 <Xoodoo_Round+0x20c>
            a[index(x,y)] ^= e[x];
 8003a80:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8003a84:	f8dc 5000 	ldr.w	r5, [ip]
 8003a88:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003a8c:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8003a90:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003a94:	f8dc b014 	ldr.w	fp, [ip, #20]
 8003a98:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
 8003a9c:	9303      	str	r3, [sp, #12]
 8003a9e:	ea82 020a 	eor.w	r2, r2, sl
 8003aa2:	ea85 050a 	eor.w	r5, r5, sl
 8003aa6:	9200      	str	r2, [sp, #0]
 8003aa8:	f8cc 5000 	str.w	r5, [ip]
 8003aac:	9d00      	ldr	r5, [sp, #0]
 8003aae:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8003ab2:	f8dc 4028 	ldr.w	r4, [ip, #40]	; 0x28
 8003ab6:	9a03      	ldr	r2, [sp, #12]
 8003ab8:	f8cc 5010 	str.w	r5, [ip, #16]
 8003abc:	ea87 070a 	eor.w	r7, r7, sl
 8003ac0:	f8dc 502c 	ldr.w	r5, [ip, #44]	; 0x2c
 8003ac4:	f8dc a01c 	ldr.w	sl, [ip, #28]
 8003ac8:	f8cc 7020 	str.w	r7, [ip, #32]
 8003acc:	4041      	eors	r1, r0
 8003ace:	ea8b 0b00 	eor.w	fp, fp, r0
 8003ad2:	4046      	eors	r6, r0
 8003ad4:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8003ad8:	f8cc 1004 	str.w	r1, [ip, #4]
 8003adc:	ea82 0209 	eor.w	r2, r2, r9
 8003ae0:	ea83 0309 	eor.w	r3, r3, r9
 8003ae4:	ea84 0409 	eor.w	r4, r4, r9
 8003ae8:	ea80 0008 	eor.w	r0, r0, r8
 8003aec:	ea8a 0a08 	eor.w	sl, sl, r8
 8003af0:	ea85 0508 	eor.w	r5, r5, r8
 8003af4:	f8cc b014 	str.w	fp, [ip, #20]
 8003af8:	f8cc 6024 	str.w	r6, [ip, #36]	; 0x24
 8003afc:	f8cc 2008 	str.w	r2, [ip, #8]
 8003b00:	f8cc 3018 	str.w	r3, [ip, #24]
 8003b04:	f8cc 4028 	str.w	r4, [ip, #40]	; 0x28
 8003b08:	f8cc 000c 	str.w	r0, [ip, #12]
 8003b0c:	f8cc a01c 	str.w	sl, [ip, #28]
 8003b10:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 8003b14:	e6a2      	b.n	800385c <Xoodoo_Round+0x118>
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8003b16:	6a01      	ldr	r1, [r0, #32]
 8003b18:	6902      	ldr	r2, [r0, #16]
 8003b1a:	6943      	ldr	r3, [r0, #20]
 8003b1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003b1e:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003b22:	404a      	eors	r2, r1
 8003b24:	f8dc 1000 	ldr.w	r1, [ip]
 8003b28:	404a      	eors	r2, r1
 8003b2a:	9204      	str	r2, [sp, #16]
 8003b2c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8003b30:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8003b34:	4043      	eors	r3, r0
 8003b36:	405a      	eors	r2, r3
 8003b38:	9205      	str	r2, [sp, #20]
 8003b3a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8003b3e:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8003b42:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8003b46:	4061      	eors	r1, r4
 8003b48:	404a      	eors	r2, r1
 8003b4a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8003b4e:	9206      	str	r2, [sp, #24]
 8003b50:	4043      	eors	r3, r0
 8003b52:	404b      	eors	r3, r1
 8003b54:	9307      	str	r3, [sp, #28]
 8003b56:	e627      	b.n	80037a8 <Xoodoo_Round+0x64>

08003b58 <Xoodoo_Permute_Nrounds>:
    _rc2,
    _rc1
};

void Xoodoo_Permute_Nrounds( void * state, uint32_t nr )
{
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	4606      	mov	r6, r0
    tXoodooLane        a[NLANES];
    unsigned int    i;

    fromBytesToWords(a, (const unsigned char *)state);
 8003b60:	4601      	mov	r1, r0
 8003b62:	4668      	mov	r0, sp
 8003b64:	f7ff fca2 	bl	80034ac <fromBytesToWords>

    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8003b68:	f1c4 010c 	rsb	r1, r4, #12
 8003b6c:	290b      	cmp	r1, #11
 8003b6e:	d80b      	bhi.n	8003b88 <Xoodoo_Permute_Nrounds+0x30>
 8003b70:	4d08      	ldr	r5, [pc, #32]	; (8003b94 <Xoodoo_Permute_Nrounds+0x3c>)
 8003b72:	008c      	lsls	r4, r1, #2
 8003b74:	3c04      	subs	r4, #4
 8003b76:	442c      	add	r4, r5
 8003b78:	352c      	adds	r5, #44	; 0x2c
        Xoodoo_Round( a, RC[i] );
 8003b7a:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8003b7e:	4668      	mov	r0, sp
 8003b80:	f7ff fde0 	bl	8003744 <Xoodoo_Round>
    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8003b84:	42ac      	cmp	r4, r5
 8003b86:	d1f8      	bne.n	8003b7a <Xoodoo_Permute_Nrounds+0x22>
        Dump("Round", a, 1);
    }
    Dump("Permutation", a, 0);

    fromWordsToBytes((unsigned char *)state, a);
 8003b88:	4669      	mov	r1, sp
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7ff fd58 	bl	8003640 <fromWordsToBytes>

}
 8003b90:	b00c      	add	sp, #48	; 0x30
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	080058fc 	.word	0x080058fc

08003b98 <Xoodoo_Permute_12rounds>:
    Xoodoo_Permute_Nrounds( state, 6 );
}

void Xoodoo_Permute_12rounds( uint32_t * state)
{
    Xoodoo_Permute_Nrounds( state, 12 );
 8003b98:	210c      	movs	r1, #12
 8003b9a:	f7ff bfdd 	b.w	8003b58 <Xoodoo_Permute_Nrounds>
 8003b9e:	bf00      	nop

08003ba0 <Xoodyak_Down>:
#define Cyclist_lRatchet                JOIN(prefix, _lRatchet)

/* ------- Cyclist internal interfaces ------- */

static void Cyclist_Down(Cyclist_Instance *instance, const uint8_t *Xi, unsigned int XiLen, uint8_t Cd)
{
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	461e      	mov	r6, r3
 8003ba6:	4615      	mov	r5, r2
    SnP_AddBytes(instance->state, Xi, 0, XiLen);
 8003ba8:	4613      	mov	r3, r2
 8003baa:	2200      	movs	r2, #0
 8003bac:	f7ff fb86 	bl	80032bc <Xoodoo_AddBytes>
    SnP_AddByte(instance->state, 0x01, XiLen);
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	f7ff fb6d 	bl	8003294 <Xoodoo_AddByte>
    SnP_AddByte(instance->state, (instance->mode == Cyclist_ModeHash) ? (Cd & 0x01) : Cd, Cyclist_f_bPrime - 1);
 8003bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	bf08      	it	eq
 8003bc0:	f006 0601 	andeq.w	r6, r6, #1
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	222f      	movs	r2, #47	; 0x2f
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff fb63 	bl	8003294 <Xoodoo_AddByte>
    instance->phase = Cyclist_PhaseDown;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	6323      	str	r3, [r4, #48]	; 0x30

}
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}

08003bd4 <Xoodyak_Up>:

static void Cyclist_Up(Cyclist_Instance *instance, uint8_t *Yi, unsigned int YiLen, uint8_t Cu)
{
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    #if defined(OUTPUT)
    uint8_t   s[Cyclist_f_bPrime];
    #endif

    if (instance->mode != Cyclist_ModeHash) {
 8003bd8:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8003bda:	2f01      	cmp	r7, #1
{
 8003bdc:	4604      	mov	r4, r0
 8003bde:	460d      	mov	r5, r1
 8003be0:	4616      	mov	r6, r2
    if (instance->mode != Cyclist_ModeHash) {
 8003be2:	d003      	beq.n	8003bec <Xoodyak_Up+0x18>
        SnP_AddByte(instance->state, Cu, Cyclist_f_bPrime - 1);
 8003be4:	4619      	mov	r1, r3
 8003be6:	222f      	movs	r2, #47	; 0x2f
 8003be8:	f7ff fb54 	bl	8003294 <Xoodoo_AddByte>
    if (instance->file != NULL) {
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        SnP_ExtractAndAddBytes( instance->state, s, s, 0, Cyclist_f_bPrime );
    }
    #endif
    SnP_Permute( instance->state );
 8003bec:	4620      	mov	r0, r4
 8003bee:	f7ff ffd3 	bl	8003b98 <Xoodoo_Permute_12rounds>
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        fprintf( instance->file, "After f() ");
        displayByteString( instance->file, "", s, Cyclist_f_bPrime );
    }
    #endif
    instance->phase = Cyclist_PhaseUp;
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	6322      	str	r2, [r4, #48]	; 0x30
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 8003bf6:	4633      	mov	r3, r6
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	2200      	movs	r2, #0
}
 8003bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 8003c02:	f7ff bbc1 	b.w	8003388 <Xoodoo_ExtractBytes>
 8003c06:	bf00      	nop

08003c08 <Xoodyak_AbsorbAny>:

static void Cyclist_AbsorbAny(Cyclist_Instance *instance, const uint8_t *X, size_t XLen, unsigned int r, uint8_t Cd)
{
 8003c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8003c12:	460e      	mov	r6, r1
 8003c14:	4614      	mov	r4, r2
 8003c16:	4699      	mov	r9, r3
 8003c18:	e00f      	b.n	8003c3a <Xoodyak_AbsorbAny+0x32>

    do {
        if (instance->phase != Cyclist_PhaseUp) {
            Cyclist_Up(instance, NULL, 0, 0);
        }
        splitLen = MyMin(XLen, r);
 8003c1a:	454c      	cmp	r4, r9
 8003c1c:	bf28      	it	cs
 8003c1e:	464f      	movcs	r7, r9
            Cyclist_Up(instance, NULL, 0, 0);
 8003c20:	f7ff ffd8 	bl	8003bd4 <Xoodyak_Up>
        Cyclist_Down(instance, X, splitLen, Cd);
 8003c24:	4631      	mov	r1, r6
 8003c26:	4643      	mov	r3, r8
 8003c28:	463a      	mov	r2, r7
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f7ff ffb8 	bl	8003ba0 <Xoodyak_Down>
        Cd = 0;
        X       += splitLen;
        XLen    -= splitLen;
    } while ( XLen != 0 );
 8003c30:	1be4      	subs	r4, r4, r7
        X       += splitLen;
 8003c32:	443e      	add	r6, r7
    } while ( XLen != 0 );
 8003c34:	d00d      	beq.n	8003c52 <Xoodyak_AbsorbAny+0x4a>
        Cd = 0;
 8003c36:	f04f 0800 	mov.w	r8, #0
        if (instance->phase != Cyclist_PhaseUp) {
 8003c3a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
            Cyclist_Up(instance, NULL, 0, 0);
 8003c3c:	2300      	movs	r3, #0
        if (instance->phase != Cyclist_PhaseUp) {
 8003c3e:	2f02      	cmp	r7, #2
            Cyclist_Up(instance, NULL, 0, 0);
 8003c40:	461a      	mov	r2, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	4628      	mov	r0, r5
        splitLen = MyMin(XLen, r);
 8003c46:	4627      	mov	r7, r4
        if (instance->phase != Cyclist_PhaseUp) {
 8003c48:	d1e7      	bne.n	8003c1a <Xoodyak_AbsorbAny+0x12>
        splitLen = MyMin(XLen, r);
 8003c4a:	454c      	cmp	r4, r9
 8003c4c:	bf28      	it	cs
 8003c4e:	464f      	movcs	r7, r9
 8003c50:	e7e8      	b.n	8003c24 <Xoodyak_AbsorbAny+0x1c>
}
 8003c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c56:	bf00      	nop

08003c58 <Xoodyak_AbsorbKey>:

static void Cyclist_AbsorbKey(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t KID[Cyclist_Rkin];

    assert(instance->mode == Cyclist_ModeHash);
 8003c5c:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
{
 8003c60:	b08f      	sub	sp, #60	; 0x3c
    assert(instance->mode == Cyclist_ModeHash);
 8003c62:	f1ba 0f01 	cmp.w	sl, #1
{
 8003c66:	9e18      	ldr	r6, [sp, #96]	; 0x60
    assert(instance->mode == Cyclist_ModeHash);
 8003c68:	d134      	bne.n	8003cd4 <Xoodyak_AbsorbKey+0x7c>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 8003c6a:	1997      	adds	r7, r2, r6
 8003c6c:	2f2b      	cmp	r7, #43	; 0x2b
 8003c6e:	4615      	mov	r5, r2
 8003c70:	d836      	bhi.n	8003ce0 <Xoodyak_AbsorbKey+0x88>
 8003c72:	469b      	mov	fp, r3

    instance->mode      = Cyclist_ModeKeyed;
 8003c74:	f04f 0902 	mov.w	r9, #2
    instance->Rabsorb   = Cyclist_Rkin;
 8003c78:	f04f 082c 	mov.w	r8, #44	; 0x2c
    instance->Rsqueeze  = Cyclist_Rkout;
 8003c7c:	2318      	movs	r3, #24
    instance->Rabsorb   = Cyclist_Rkin;
 8003c7e:	e9c0 980d 	strd	r9, r8, [r0, #52]	; 0x34
 8003c82:	4604      	mov	r4, r0
    instance->Rsqueeze  = Cyclist_Rkout;
 8003c84:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (KLen != 0) {
 8003c86:	b912      	cbnz	r2, 8003c8e <Xoodyak_AbsorbKey+0x36>
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
        if (counterLen != 0) {
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
        }
    }
}
 8003c88:	b00f      	add	sp, #60	; 0x3c
 8003c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(KID, K, KLen);
 8003c8e:	a803      	add	r0, sp, #12
 8003c90:	f000 fc38 	bl	8004504 <memcpy>
        memcpy(KID + KLen, ID, IDLen);
 8003c94:	ab03      	add	r3, sp, #12
 8003c96:	1958      	adds	r0, r3, r5
 8003c98:	4632      	mov	r2, r6
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	f000 fc32 	bl	8004504 <memcpy>
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8003ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8003ca2:	19dd      	adds	r5, r3, r7
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 8003ca4:	f8cd 9000 	str.w	r9, [sp]
 8003ca8:	4643      	mov	r3, r8
 8003caa:	a903      	add	r1, sp, #12
 8003cac:	1c7a      	adds	r2, r7, #1
 8003cae:	4620      	mov	r0, r4
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8003cb0:	f805 6c2c 	strb.w	r6, [r5, #-44]
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 8003cb4:	f7ff ffa8 	bl	8003c08 <Xoodyak_AbsorbAny>
        if (counterLen != 0) {
 8003cb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0e4      	beq.n	8003c88 <Xoodyak_AbsorbKey+0x30>
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	9200      	str	r2, [sp, #0]
 8003cc2:	4653      	mov	r3, sl
 8003cc4:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff ff9d 	bl	8003c08 <Xoodyak_AbsorbAny>
}
 8003cce:	b00f      	add	sp, #60	; 0x3c
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(instance->mode == Cyclist_ModeHash);
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <Xoodyak_AbsorbKey+0x94>)
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <Xoodyak_AbsorbKey+0x98>)
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <Xoodyak_AbsorbKey+0x9c>)
 8003cda:	216a      	movs	r1, #106	; 0x6a
 8003cdc:	f000 fbaa 	bl	8004434 <__assert_func>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <Xoodyak_AbsorbKey+0xa0>)
 8003ce2:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <Xoodyak_AbsorbKey+0x98>)
 8003ce4:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <Xoodyak_AbsorbKey+0x9c>)
 8003ce6:	216b      	movs	r1, #107	; 0x6b
 8003ce8:	f000 fba4 	bl	8004434 <__assert_func>
 8003cec:	0800597c 	.word	0x0800597c
 8003cf0:	08005a74 	.word	0x08005a74
 8003cf4:	080059a0 	.word	0x080059a0
 8003cf8:	08005a28 	.word	0x08005a28

08003cfc <Xoodyak_SqueezeAny>:

static void Cyclist_SqueezeAny(Cyclist_Instance *instance, uint8_t *Y, size_t YLen, uint8_t Cu)
{
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int len;

    len = MyMin(YLen, instance->Rsqueeze );
 8003cfe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d00:	4294      	cmp	r4, r2
 8003d02:	bf28      	it	cs
 8003d04:	4614      	movcs	r4, r2
{
 8003d06:	4615      	mov	r5, r2
    Cyclist_Up(instance, Y, len, Cu);
 8003d08:	4622      	mov	r2, r4
{
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	4607      	mov	r7, r0
    Cyclist_Up(instance, Y, len, Cu);
 8003d0e:	f7ff ff61 	bl	8003bd4 <Xoodyak_Up>
    Y += len;
    YLen -= len;
    while (YLen != 0) {
 8003d12:	1b2d      	subs	r5, r5, r4
    Y += len;
 8003d14:	4426      	add	r6, r4
    while (YLen != 0) {
 8003d16:	d012      	beq.n	8003d3e <Xoodyak_SqueezeAny+0x42>
        Cyclist_Down(instance, NULL, 0, 0);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7ff ff3e 	bl	8003ba0 <Xoodyak_Down>
        len = MyMin(YLen, instance->Rsqueeze );
 8003d24:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003d26:	42ac      	cmp	r4, r5
 8003d28:	bf28      	it	cs
 8003d2a:	462c      	movcs	r4, r5
        Cyclist_Up(instance, Y, len, 0);
 8003d2c:	4631      	mov	r1, r6
 8003d2e:	4622      	mov	r2, r4
 8003d30:	2300      	movs	r3, #0
 8003d32:	4638      	mov	r0, r7
 8003d34:	f7ff ff4e 	bl	8003bd4 <Xoodyak_Up>
    while (YLen != 0) {
 8003d38:	1b2d      	subs	r5, r5, r4
        Y += len;
 8003d3a:	4426      	add	r6, r4
    while (YLen != 0) {
 8003d3c:	d1ec      	bne.n	8003d18 <Xoodyak_SqueezeAny+0x1c>
        YLen -= len;
    }
}
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d40 <Xoodyak_Crypt>:

static void Cyclist_Crypt(Cyclist_Instance *instance, const uint8_t *I, uint8_t *O, size_t IOLen, int decrypt)
{
 8003d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d44:	b089      	sub	sp, #36	; 0x24
 8003d46:	4680      	mov	r8, r0
 8003d48:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003d4a:	460f      	mov	r7, r1
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	461c      	mov	r4, r3
 8003d50:	bb35      	cbnz	r5, 8003da0 <Xoodyak_Crypt+0x60>
    unsigned int splitLen;
    uint8_t      P[Cyclist_Rkout];
    uint8_t      Cu = 0x80;
 8003d52:	f04f 0980 	mov.w	r9, #128	; 0x80

    do {
        splitLen = MyMin(IOLen, Cyclist_Rkout); /* use Rkout instead of Rsqueeze, this function is only called in keyed mode */
 8003d56:	2c18      	cmp	r4, #24
 8003d58:	4625      	mov	r5, r4
 8003d5a:	bf28      	it	cs
 8003d5c:	2518      	movcs	r5, #24
            Cyclist_Up(instance, NULL, 0, Cu); /* Up without extract */
            Xoodoo_ExtractAndAddBytes(instance->state, I, O, 0, splitLen); /* Extract from Up and Add */
            Cyclist_Down(instance, O, splitLen, 0x00);
        }
        else {
            memcpy(P, I, splitLen);
 8003d5e:	4639      	mov	r1, r7
 8003d60:	462a      	mov	r2, r5
 8003d62:	a802      	add	r0, sp, #8
 8003d64:	f000 fbce 	bl	8004504 <memcpy>
            Cyclist_Up(instance, NULL, 0, Cu); /* Up without extract */
 8003d68:	2200      	movs	r2, #0
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f7ff ff30 	bl	8003bd4 <Xoodyak_Up>
            Xoodoo_ExtractAndAddBytes(instance->state, I, O, 0, splitLen); /* Extract from Up and Add */
 8003d74:	4632      	mov	r2, r6
 8003d76:	4639      	mov	r1, r7
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	9500      	str	r5, [sp, #0]
 8003d7e:	f7ff fb27 	bl	80033d0 <Xoodoo_ExtractAndAddBytes>
            Cyclist_Down(instance, P, splitLen, 0x00);
 8003d82:	462a      	mov	r2, r5
 8003d84:	2300      	movs	r3, #0
 8003d86:	a902      	add	r1, sp, #8
 8003d88:	4640      	mov	r0, r8
 8003d8a:	f7ff ff09 	bl	8003ba0 <Xoodyak_Down>
        }
        Cu = 0x00;
        I       += splitLen;
        O       += splitLen;
        IOLen   -= splitLen;
    } while ( IOLen != 0 );
 8003d8e:	1b64      	subs	r4, r4, r5
        O       += splitLen;
 8003d90:	442e      	add	r6, r5
        I       += splitLen;
 8003d92:	442f      	add	r7, r5
        Cu = 0x00;
 8003d94:	f04f 0900 	mov.w	r9, #0
    } while ( IOLen != 0 );
 8003d98:	d1dd      	bne.n	8003d56 <Xoodyak_Crypt+0x16>
}
 8003d9a:	b009      	add	sp, #36	; 0x24
 8003d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t      Cu = 0x80;
 8003da0:	2380      	movs	r3, #128	; 0x80
        splitLen = MyMin(IOLen, Cyclist_Rkout); /* use Rkout instead of Rsqueeze, this function is only called in keyed mode */
 8003da2:	2c18      	cmp	r4, #24
            Cyclist_Up(instance, NULL, 0, Cu); /* Up without extract */
 8003da4:	f04f 0200 	mov.w	r2, #0
        splitLen = MyMin(IOLen, Cyclist_Rkout); /* use Rkout instead of Rsqueeze, this function is only called in keyed mode */
 8003da8:	4625      	mov	r5, r4
            Cyclist_Up(instance, NULL, 0, Cu); /* Up without extract */
 8003daa:	4611      	mov	r1, r2
        splitLen = MyMin(IOLen, Cyclist_Rkout); /* use Rkout instead of Rsqueeze, this function is only called in keyed mode */
 8003dac:	bf28      	it	cs
 8003dae:	2518      	movcs	r5, #24
            Cyclist_Up(instance, NULL, 0, Cu); /* Up without extract */
 8003db0:	4640      	mov	r0, r8
 8003db2:	f7ff ff0f 	bl	8003bd4 <Xoodyak_Up>
            Xoodoo_ExtractAndAddBytes(instance->state, I, O, 0, splitLen); /* Extract from Up and Add */
 8003db6:	4632      	mov	r2, r6
 8003db8:	4639      	mov	r1, r7
 8003dba:	2300      	movs	r3, #0
 8003dbc:	4640      	mov	r0, r8
 8003dbe:	9500      	str	r5, [sp, #0]
 8003dc0:	f7ff fb06 	bl	80033d0 <Xoodoo_ExtractAndAddBytes>
            Cyclist_Down(instance, O, splitLen, 0x00);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	462a      	mov	r2, r5
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f7ff fee8 	bl	8003ba0 <Xoodyak_Down>
    } while ( IOLen != 0 );
 8003dd0:	1b64      	subs	r4, r4, r5
        I       += splitLen;
 8003dd2:	442f      	add	r7, r5
        O       += splitLen;
 8003dd4:	442e      	add	r6, r5
        Cu = 0x00;
 8003dd6:	f04f 0300 	mov.w	r3, #0
    } while ( IOLen != 0 );
 8003dda:	d1e2      	bne.n	8003da2 <Xoodyak_Crypt+0x62>
}
 8003ddc:	b009      	add	sp, #36	; 0x24
 8003dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003de2:	bf00      	nop

08003de4 <Xoodyak_Initialize>:

/* ------- Cyclist interfaces ------- */

void Cyclist_Initialize(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8003de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	4604      	mov	r4, r0
 8003dea:	4615      	mov	r5, r2
 8003dec:	461f      	mov	r7, r3
 8003dee:	460e      	mov	r6, r1
 8003df0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8003df4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    SnP_StaticInitialize();
 8003df8:	f7ff fa46 	bl	8003288 <Xoodoo_StaticInitialize>
    SnP_Initialize(instance->state);
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fa45 	bl	800328c <Xoodoo_Initialize>
    instance->phase     = Cyclist_PhaseUp;
 8003e02:	2302      	movs	r3, #2
    instance->mode      = Cyclist_ModeHash;
 8003e04:	2201      	movs	r2, #1
    instance->phase     = Cyclist_PhaseUp;
 8003e06:	6323      	str	r3, [r4, #48]	; 0x30
    instance->Rabsorb   = Cyclist_Rhash;
 8003e08:	2310      	movs	r3, #16
 8003e0a:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
    instance->Rsqueeze  = Cyclist_Rhash;
 8003e0e:	63e3      	str	r3, [r4, #60]	; 0x3c
    #ifdef OUTPUT
    instance->file = 0;
    SnP_Initialize( instance->stateShadow );
    #endif
    if (KLen != 0) {
 8003e10:	b90d      	cbnz	r5, 8003e16 <Xoodyak_Initialize+0x32>
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
    }
}
 8003e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 8003e16:	e9cd 9a09 	strd	r9, sl, [sp, #36]	; 0x24
 8003e1a:	f8cd 8020 	str.w	r8, [sp, #32]
 8003e1e:	463b      	mov	r3, r7
 8003e20:	462a      	mov	r2, r5
 8003e22:	4631      	mov	r1, r6
 8003e24:	4620      	mov	r0, r4
}
 8003e26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 8003e2a:	f7ff bf15 	b.w	8003c58 <Xoodyak_AbsorbKey>
 8003e2e:	bf00      	nop

08003e30 <Xoodyak_Absorb>:

void Cyclist_Absorb(Cyclist_Instance *instance, const uint8_t *X, size_t XLen)
{
 8003e30:	b510      	push	{r4, lr}
 8003e32:	b082      	sub	sp, #8
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 8003e34:	2403      	movs	r4, #3
 8003e36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e38:	9400      	str	r4, [sp, #0]
 8003e3a:	f7ff fee5 	bl	8003c08 <Xoodyak_AbsorbAny>
}
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	bf00      	nop

08003e44 <Xoodyak_Encrypt>:

void Cyclist_Encrypt(Cyclist_Instance *instance, const uint8_t *P, uint8_t *C, size_t PLen)
{
 8003e44:	b510      	push	{r4, lr}
    assert(instance->mode == Cyclist_ModeKeyed);
 8003e46:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003e48:	2c02      	cmp	r4, #2
{
 8003e4a:	b082      	sub	sp, #8
    assert(instance->mode == Cyclist_ModeKeyed);
 8003e4c:	d105      	bne.n	8003e5a <Xoodyak_Encrypt+0x16>
    Cyclist_Crypt(instance, P, C, PLen, 0);
 8003e4e:	2400      	movs	r4, #0
 8003e50:	9400      	str	r4, [sp, #0]
 8003e52:	f7ff ff75 	bl	8003d40 <Xoodyak_Crypt>
}
 8003e56:	b002      	add	sp, #8
 8003e58:	bd10      	pop	{r4, pc}
    assert(instance->mode == Cyclist_ModeKeyed);
 8003e5a:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <Xoodyak_Encrypt+0x24>)
 8003e5c:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <Xoodyak_Encrypt+0x28>)
 8003e5e:	4804      	ldr	r0, [pc, #16]	; (8003e70 <Xoodyak_Encrypt+0x2c>)
 8003e60:	21c0      	movs	r1, #192	; 0xc0
 8003e62:	f000 fae7 	bl	8004434 <__assert_func>
 8003e66:	bf00      	nop
 8003e68:	08005a50 	.word	0x08005a50
 8003e6c:	08005a88 	.word	0x08005a88
 8003e70:	080059a0 	.word	0x080059a0

08003e74 <Xoodyak_Decrypt>:

void Cyclist_Decrypt(Cyclist_Instance *instance, const uint8_t *C, uint8_t *P, size_t CLen)
{
 8003e74:	b510      	push	{r4, lr}
    assert(instance->mode == Cyclist_ModeKeyed);
 8003e76:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003e78:	2c02      	cmp	r4, #2
{
 8003e7a:	b082      	sub	sp, #8
    assert(instance->mode == Cyclist_ModeKeyed);
 8003e7c:	d105      	bne.n	8003e8a <Xoodyak_Decrypt+0x16>
    Cyclist_Crypt(instance, C, P, CLen, 1);
 8003e7e:	2401      	movs	r4, #1
 8003e80:	9400      	str	r4, [sp, #0]
 8003e82:	f7ff ff5d 	bl	8003d40 <Xoodyak_Crypt>
}
 8003e86:	b002      	add	sp, #8
 8003e88:	bd10      	pop	{r4, pc}
    assert(instance->mode == Cyclist_ModeKeyed);
 8003e8a:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <Xoodyak_Decrypt+0x24>)
 8003e8c:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <Xoodyak_Decrypt+0x28>)
 8003e8e:	4804      	ldr	r0, [pc, #16]	; (8003ea0 <Xoodyak_Decrypt+0x2c>)
 8003e90:	21c6      	movs	r1, #198	; 0xc6
 8003e92:	f000 facf 	bl	8004434 <__assert_func>
 8003e96:	bf00      	nop
 8003e98:	08005a50 	.word	0x08005a50
 8003e9c:	08005a98 	.word	0x08005a98
 8003ea0:	080059a0 	.word	0x080059a0

08003ea4 <Xoodyak_Squeeze>:

void Cyclist_Squeeze(Cyclist_Instance *instance, uint8_t *Y, size_t YLen)
{
    Cyclist_SqueezeAny(instance, Y, YLen, 0x40);
 8003ea4:	2340      	movs	r3, #64	; 0x40
 8003ea6:	f7ff bf29 	b.w	8003cfc <Xoodyak_SqueezeAny>
 8003eaa:	bf00      	nop

08003eac <crypto_aead_encrypt>:
    const unsigned char *m, unsigned long long mlen,
    const unsigned char *ad, unsigned long long adlen,
    const unsigned char *nsec,
    const unsigned char *npub,
    const unsigned char *k)
{
 8003eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	b094      	sub	sp, #80	; 0x50
    Xoodyak_Instance    instance;

    (void)nsec;

    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003eb2:	2500      	movs	r5, #0
{
 8003eb4:	e9dd 481c 	ldrd	r4, r8, [sp, #112]	; 0x70
    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003eb8:	462b      	mov	r3, r5
{
 8003eba:	4607      	mov	r7, r0
 8003ebc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003ec0:	9500      	str	r5, [sp, #0]
{
 8003ec2:	460e      	mov	r6, r1
 8003ec4:	4691      	mov	r9, r2
    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003ec6:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003ec8:	a804      	add	r0, sp, #16
 8003eca:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	f7ff ff88 	bl	8003de4 <Xoodyak_Initialize>
    Xoodyak_Absorb(&instance, npub, CRYPTO_NPUBBYTES);
 8003ed4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8003ed6:	a804      	add	r0, sp, #16
 8003ed8:	2210      	movs	r2, #16
 8003eda:	f7ff ffa9 	bl	8003e30 <Xoodyak_Absorb>
    Xoodyak_Absorb(&instance, ad, (size_t)adlen);
 8003ede:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	a804      	add	r0, sp, #16
 8003ee4:	f7ff ffa4 	bl	8003e30 <Xoodyak_Absorb>
    Xoodyak_Encrypt(&instance, m, c, (size_t)mlen);
 8003ee8:	4623      	mov	r3, r4
 8003eea:	463a      	mov	r2, r7
 8003eec:	4649      	mov	r1, r9
 8003eee:	a804      	add	r0, sp, #16
 8003ef0:	f7ff ffa8 	bl	8003e44 <Xoodyak_Encrypt>
    Xoodyak_Squeeze(&instance, c + mlen, TAGLEN);
 8003ef4:	1939      	adds	r1, r7, r4
 8003ef6:	a804      	add	r0, sp, #16
 8003ef8:	2210      	movs	r2, #16
 8003efa:	f7ff ffd3 	bl	8003ea4 <Xoodyak_Squeeze>
    *clen = mlen + TAGLEN;
 8003efe:	3410      	adds	r4, #16
 8003f00:	eb48 0305 	adc.w	r3, r8, r5
        }
        printf("\n");
    }
    #endif
    return 0;
}
 8003f04:	4628      	mov	r0, r5
    *clen = mlen + TAGLEN;
 8003f06:	e9c6 4300 	strd	r4, r3, [r6]
}
 8003f0a:	b014      	add	sp, #80	; 0x50
 8003f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f10 <crypto_aead_decrypt>:
    unsigned char *nsec,
    const unsigned char *c, unsigned long long clen,
    const unsigned char *ad, unsigned long long adlen,
    const unsigned char *npub,
    const unsigned char *k)
{
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	b099      	sub	sp, #100	; 0x64
 8003f16:	461d      	mov	r5, r3
    unsigned long long    mlen_;

    (void)nsec;

    *mlen = 0;
    if (clen < TAGLEN) {
 8003f18:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8003f1c:	2b00      	cmp	r3, #0
    *mlen = 0;
 8003f1e:	f04f 0a00 	mov.w	sl, #0
 8003f22:	f04f 0b00 	mov.w	fp, #0
    if (clen < TAGLEN) {
 8003f26:	bf08      	it	eq
 8003f28:	2a10      	cmpeq	r2, #16
    *mlen = 0;
 8003f2a:	e9c1 ab00 	strd	sl, fp, [r1]
{
 8003f2e:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    if (clen < TAGLEN) {
 8003f32:	d334      	bcc.n	8003f9e <crypto_aead_decrypt+0x8e>
        return -1;
    }
    mlen_ = clen - TAGLEN;
 8003f34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003f36:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003f38:	f04f 0800 	mov.w	r8, #0
    mlen_ = clen - TAGLEN;
 8003f3c:	f1b2 0610 	subs.w	r6, r2, #16
    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003f40:	4643      	mov	r3, r8
 8003f42:	4681      	mov	r9, r0
 8003f44:	f04f 0210 	mov.w	r2, #16
 8003f48:	a808      	add	r0, sp, #32
 8003f4a:	e9cd 8801 	strd	r8, r8, [sp, #4]
 8003f4e:	460c      	mov	r4, r1
 8003f50:	f8cd 8000 	str.w	r8, [sp]
 8003f54:	9929      	ldr	r1, [sp, #164]	; 0xa4
    mlen_ = clen - TAGLEN;
 8003f56:	f147 37ff 	adc.w	r7, r7, #4294967295
    Xoodyak_Initialize(&instance, k, CRYPTO_KEYBYTES, NULL, 0, NULL, 0);
 8003f5a:	f7ff ff43 	bl	8003de4 <Xoodyak_Initialize>
    Xoodyak_Absorb(&instance, npub, CRYPTO_NPUBBYTES);
 8003f5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8003f60:	a808      	add	r0, sp, #32
 8003f62:	2210      	movs	r2, #16
 8003f64:	f7ff ff64 	bl	8003e30 <Xoodyak_Absorb>
    Xoodyak_Absorb(&instance, ad, (size_t)adlen);
 8003f68:	9924      	ldr	r1, [sp, #144]	; 0x90
 8003f6a:	4652      	mov	r2, sl
 8003f6c:	a808      	add	r0, sp, #32
 8003f6e:	f7ff ff5f 	bl	8003e30 <Xoodyak_Absorb>
    Xoodyak_Decrypt(&instance, c, m, (size_t)mlen_);
 8003f72:	4633      	mov	r3, r6
 8003f74:	464a      	mov	r2, r9
 8003f76:	4629      	mov	r1, r5
 8003f78:	a808      	add	r0, sp, #32
 8003f7a:	f7ff ff7b 	bl	8003e74 <Xoodyak_Decrypt>
    Xoodyak_Squeeze(&instance, tag, TAGLEN);
 8003f7e:	a808      	add	r0, sp, #32
 8003f80:	a904      	add	r1, sp, #16
 8003f82:	2210      	movs	r2, #16
 8003f84:	f7ff ff8e 	bl	8003ea4 <Xoodyak_Squeeze>
    if (memcmp(tag, c + mlen_, TAGLEN) != 0) {
 8003f88:	19a9      	adds	r1, r5, r6
 8003f8a:	a804      	add	r0, sp, #16
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	f000 faab 	bl	80044e8 <memcmp>
 8003f92:	b938      	cbnz	r0, 8003fa4 <crypto_aead_decrypt+0x94>
        memset(m, 0, (size_t)mlen_);
        return -1;
    }
    *mlen = mlen_;
 8003f94:	e9c4 6700 	strd	r6, r7, [r4]
    return 0;
}
 8003f98:	b019      	add	sp, #100	; 0x64
 8003f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8003f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa2:	e7f9      	b.n	8003f98 <crypto_aead_decrypt+0x88>
        memset(m, 0, (size_t)mlen_);
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	4648      	mov	r0, r9
 8003faa:	f000 fab9 	bl	8004520 <memset>
        return -1;
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	e7f1      	b.n	8003f98 <crypto_aead_decrypt+0x88>

08003fb4 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003fb4:	b510      	push	{r4, lr}

	int ret = 0;

	get_memory_usage();
 8003fb6:	f000 f9e5 	bl	8004384 <get_memory_usage>
	tick_msr_start();
	tick_msr_end();

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
	lwc_printf("Memory usage: ");
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003fba:	4c1b      	ldr	r4, [pc, #108]	; (8004028 <genkat_benchmark_hash_aead+0x74>)
	tick_msr_start();
 8003fbc:	f000 f97c 	bl	80042b8 <tick_msr_start>
	tick_msr_end();
 8003fc0:	f000 f992 	bl	80042e8 <tick_msr_end>
	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <genkat_benchmark_hash_aead+0x78>)
 8003fc6:	491a      	ldr	r1, [pc, #104]	; (8004030 <genkat_benchmark_hash_aead+0x7c>)
 8003fc8:	481a      	ldr	r0, [pc, #104]	; (8004034 <genkat_benchmark_hash_aead+0x80>)
 8003fca:	f000 f9ab 	bl	8004324 <lwc_printf>
	lwc_printf("Memory usage: ");
 8003fce:	481a      	ldr	r0, [pc, #104]	; (8004038 <genkat_benchmark_hash_aead+0x84>)
 8003fd0:	f000 f9a8 	bl	8004324 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003fd4:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 8003fd8:	4818      	ldr	r0, [pc, #96]	; (800403c <genkat_benchmark_hash_aead+0x88>)
 8003fda:	f000 f9a3 	bl	8004324 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003fde:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
 8003fe2:	6a21      	ldr	r1, [r4, #32]
 8003fe4:	4816      	ldr	r0, [pc, #88]	; (8004040 <genkat_benchmark_hash_aead+0x8c>)
 8003fe6:	f000 f99d 	bl	8004324 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4814      	ldr	r0, [pc, #80]	; (8004044 <genkat_benchmark_hash_aead+0x90>)
 8003ff2:	f000 fa95 	bl	8004520 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8003ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4812      	ldr	r0, [pc, #72]	; (8004048 <genkat_benchmark_hash_aead+0x94>)
 8003ffe:	f000 fa8f 	bl	8004520 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8004002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004006:	2100      	movs	r1, #0
 8004008:	4810      	ldr	r0, [pc, #64]	; (800404c <genkat_benchmark_hash_aead+0x98>)
 800400a:	f000 fa89 	bl	8004520 <memset>



#ifdef LWC_ALGO_AEAD
	ret = aead_generate_test_vectors();
 800400e:	f000 f821 	bl	8004054 <aead_generate_test_vectors>

	if(ret != KAT_SUCCESS){
 8004012:	4604      	mov	r4, r0
 8004014:	b908      	cbnz	r0, 800401a <genkat_benchmark_hash_aead+0x66>
#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
}
 8004016:	4620      	mov	r0, r4
 8004018:	bd10      	pop	{r4, pc}
		lwc_printf("TotRes: Error %d", ret);
 800401a:	4601      	mov	r1, r0
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <genkat_benchmark_hash_aead+0x9c>)
 800401e:	f000 f981 	bl	8004324 <lwc_printf>
}
 8004022:	4620      	mov	r0, r4
 8004024:	bd10      	pop	{r4, pc}
 8004026:	bf00      	nop
 8004028:	2000067c 	.word	0x2000067c
 800402c:	08005aa8 	.word	0x08005aa8
 8004030:	08005b28 	.word	0x08005b28
 8004034:	08005ba8 	.word	0x08005ba8
 8004038:	08005bf4 	.word	0x08005bf4
 800403c:	08005c04 	.word	0x08005c04
 8004040:	08005c2c 	.word	0x08005c2c
 8004044:	20000098 	.word	0x20000098
 8004048:	20000198 	.word	0x20000198
 800404c:	20000298 	.word	0x20000298
 8004050:	08005c58 	.word	0x08005c58

08004054 <aead_generate_test_vectors>:
#ifdef LWC_ALGO_AEAD

#define MAX_MESSAGE_LENGTH			32
#define MAX_ASSOCIATED_DATA_LENGTH	32

int aead_generate_test_vectors() {
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	b0bf      	sub	sp, #252	; 0xfc
	unsigned char nonce[CRYPTO_NPUBBYTES];
	unsigned char msg[MAX_MESSAGE_LENGTH];
	unsigned char msg2[MAX_MESSAGE_LENGTH];
	unsigned char ad[MAX_ASSOCIATED_DATA_LENGTH];
	unsigned char ct[MAX_MESSAGE_LENGTH + CRYPTO_ABYTES];
	unsigned long long clen = 0, mlen2 = 0;
 800405a:	f04f 0a00 	mov.w	sl, #0
	int func_ret = 0, ret_val = KAT_SUCCESS;

	init_buffer(key, sizeof(key));
 800405e:	a812      	add	r0, sp, #72	; 0x48
 8004060:	2210      	movs	r2, #16
 8004062:	2300      	movs	r3, #0
	unsigned long long clen = 0, mlen2 = 0;
 8004064:	e9cd aa0f 	strd	sl, sl, [sp, #60]	; 0x3c
 8004068:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800406c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	init_buffer(key, sizeof(key));
 8004070:	f000 f908 	bl	8004284 <init_buffer>
	init_buffer(nonce, sizeof(nonce));
 8004074:	a816      	add	r0, sp, #88	; 0x58
 8004076:	2210      	movs	r2, #16
 8004078:	2300      	movs	r3, #0
 800407a:	f000 f903 	bl	8004284 <init_buffer>
	init_buffer(msg, sizeof(msg));
 800407e:	a81a      	add	r0, sp, #104	; 0x68
 8004080:	2220      	movs	r2, #32
 8004082:	2300      	movs	r3, #0
 8004084:	f000 f8fe 	bl	8004284 <init_buffer>
	init_buffer(ad, sizeof(ad));
 8004088:	a82a      	add	r0, sp, #168	; 0xa8
 800408a:	2220      	movs	r2, #32
 800408c:	2300      	movs	r3, #0
 800408e:	f000 f8f9 	bl	8004284 <init_buffer>

	ticks_res_pos = 0;

	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8004092:	e9cd aa0a 	strd	sl, sl, [sp, #40]	; 0x28
	unsigned long long clen = 0, mlen2 = 0;
 8004096:	4656      	mov	r6, sl
	ticks_res_pos = 0;
 8004098:	4c5f      	ldr	r4, [pc, #380]	; (8004218 <aead_generate_test_vectors+0x1c4>)
 800409a:	4d60      	ldr	r5, [pc, #384]	; (800421c <aead_generate_test_vectors+0x1c8>)
 800409c:	6026      	str	r6, [r4, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 800409e:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28

			lwc_printf("msg_len:%4d ad_len:%4d  ", (int) mlen, (int) adlen);
 80040a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80040a6:	485e      	ldr	r0, [pc, #376]	; (8004220 <aead_generate_test_vectors+0x1cc>)
 80040a8:	4631      	mov	r1, r6
 80040aa:	4652      	mov	r2, sl
 80040ac:	f000 f93a 	bl	8004324 <lwc_printf>

			tick_msr_start();
 80040b0:	f000 f902 	bl	80042b8 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_encrypt(ct, &clen, msg, mlen, ad, adlen,	NULL, nonce, key);
 80040b4:	aa12      	add	r2, sp, #72	; 0x48
 80040b6:	9208      	str	r2, [sp, #32]
 80040b8:	aa16      	add	r2, sp, #88	; 0x58
 80040ba:	9207      	str	r2, [sp, #28]
 80040bc:	aa2a      	add	r2, sp, #168	; 0xa8
 80040be:	2300      	movs	r3, #0
 80040c0:	4631      	mov	r1, r6
 80040c2:	9202      	str	r2, [sp, #8]
 80040c4:	463a      	mov	r2, r7
 80040c6:	e9cd 1200 	strd	r1, r2, [sp]
 80040ca:	9306      	str	r3, [sp, #24]
 80040cc:	aa1a      	add	r2, sp, #104	; 0x68
 80040ce:	a90e      	add	r1, sp, #56	; 0x38
 80040d0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80040d4:	a832      	add	r0, sp, #200	; 0xc8
 80040d6:	f7ff fee9 	bl	8003eac <crypto_aead_encrypt>
 80040da:	4606      	mov	r6, r0
#else
			func_ret = 0;
#endif
			tick_msr_end();
 80040dc:	f000 f904 	bl	80042e8 <tick_msr_end>

			lwc_printf("enc:%8lu us:%8lu ms:%8lu   ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 80040e0:	6829      	ldr	r1, [r5, #0]
 80040e2:	4b50      	ldr	r3, [pc, #320]	; (8004224 <aead_generate_test_vectors+0x1d0>)
 80040e4:	4850      	ldr	r0, [pc, #320]	; (8004228 <aead_generate_test_vectors+0x1d4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	090a      	lsrs	r2, r1, #4
 80040ea:	f000 f91b 	bl	8004324 <lwc_printf>
			aead_enc_ticks_res[ticks_res_pos] = gb_tick_cnt;
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	494e      	ldr	r1, [pc, #312]	; (800422c <aead_generate_test_vectors+0x1d8>)
 80040f2:	682a      	ldr	r2, [r5, #0]
 80040f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if (func_ret != 0) {
 80040f8:	2e00      	cmp	r6, #0
 80040fa:	d159      	bne.n	80041b0 <aead_generate_test_vectors+0x15c>
			}




			tick_msr_start();
 80040fc:	f000 f8dc 	bl	80042b8 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_decrypt(msg2, &mlen2, NULL, ct, clen, ad, adlen, nonce, key);
 8004100:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004104:	ab12      	add	r3, sp, #72	; 0x48
 8004106:	9307      	str	r3, [sp, #28]
 8004108:	ab16      	add	r3, sp, #88	; 0x58
 800410a:	9306      	str	r3, [sp, #24]
 800410c:	ab2a      	add	r3, sp, #168	; 0xa8
 800410e:	4632      	mov	r2, r6
 8004110:	e9cd 0100 	strd	r0, r1, [sp]
 8004114:	9302      	str	r3, [sp, #8]
 8004116:	a910      	add	r1, sp, #64	; 0x40
 8004118:	ab32      	add	r3, sp, #200	; 0xc8
 800411a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800411e:	a822      	add	r0, sp, #136	; 0x88
 8004120:	f7ff fef6 	bl	8003f10 <crypto_aead_decrypt>
 8004124:	4606      	mov	r6, r0
#else
			func_ret = 0;
#endif
			tick_msr_end();
 8004126:	f000 f8df 	bl	80042e8 <tick_msr_end>

			lwc_printf("dec:%8lu us:%8lu ms:%8lu ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 800412a:	6829      	ldr	r1, [r5, #0]
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <aead_generate_test_vectors+0x1d0>)
 800412e:	4840      	ldr	r0, [pc, #256]	; (8004230 <aead_generate_test_vectors+0x1dc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	090a      	lsrs	r2, r1, #4
 8004134:	f000 f8f6 	bl	8004324 <lwc_printf>
			lwc_print_hex_str(ct, clen);
 8004138:	990e      	ldr	r1, [sp, #56]	; 0x38
 800413a:	a832      	add	r0, sp, #200	; 0xc8
 800413c:	f000 f910 	bl	8004360 <lwc_print_hex_str>
			lwc_printf("\n");
 8004140:	483c      	ldr	r0, [pc, #240]	; (8004234 <aead_generate_test_vectors+0x1e0>)
 8004142:	f000 f8ef 	bl	8004324 <lwc_printf>
			aead_dec_ticks_res[ticks_res_pos] = gb_tick_cnt;
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	493b      	ldr	r1, [pc, #236]	; (8004238 <aead_generate_test_vectors+0x1e4>)
 800414a:	682a      	ldr	r2, [r5, #0]
 800414c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004150:	930d      	str	r3, [sp, #52]	; 0x34


#ifdef ENABLE_ALGO_TEST
			if ((func_ret != 0) || (mlen != mlen2)	|| (memcmp(msg, msg2, mlen) != 0)) {
 8004152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004154:	a922      	add	r1, sp, #136	; 0x88
 8004156:	a81a      	add	r0, sp, #104	; 0x68
 8004158:	bb56      	cbnz	r6, 80041b0 <aead_generate_test_vectors+0x15c>
 800415a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800415e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004162:	45b9      	cmp	r9, r7
 8004164:	bf08      	it	eq
 8004166:	45b0      	cmpeq	r8, r6
 8004168:	d122      	bne.n	80041b0 <aead_generate_test_vectors+0x15c>
 800416a:	f000 f9bd 	bl	80044e8 <memcmp>
				break;
			}
#endif


			ticks_res_pos++;
 800416e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if ((func_ret != 0) || (mlen != mlen2)	|| (memcmp(msg, msg2, mlen) != 0)) {
 8004170:	4606      	mov	r6, r0
			ticks_res_pos++;
 8004172:	3301      	adds	r3, #1
			if ((func_ret != 0) || (mlen != mlen2)	|| (memcmp(msg, msg2, mlen) != 0)) {
 8004174:	b9e0      	cbnz	r0, 80041b0 <aead_generate_test_vectors+0x15c>
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8004176:	f11a 0a08 	adds.w	sl, sl, #8
 800417a:	f14b 0b00 	adc.w	fp, fp, #0
 800417e:	f1bb 0f00 	cmp.w	fp, #0
 8004182:	bf08      	it	eq
 8004184:	f1ba 0f21 	cmpeq.w	sl, #33	; 0x21
			ticks_res_pos++;
 8004188:	6023      	str	r3, [r4, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 800418a:	d38a      	bcc.n	80040a2 <aead_generate_test_vectors+0x4e>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 800418c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800418e:	3308      	adds	r3, #8
 8004190:	930a      	str	r3, [sp, #40]	; 0x28
 8004192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004194:	f143 0300 	adc.w	r3, r3, #0
 8004198:	930b      	str	r3, [sp, #44]	; 0x2c
 800419a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf08      	it	eq
 80041a2:	2a21      	cmpeq	r2, #33	; 0x21
 80041a4:	d209      	bcs.n	80041ba <aead_generate_test_vectors+0x166>
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 80041a6:	f04f 0a00 	mov.w	sl, #0
 80041aa:	f04f 0b00 	mov.w	fp, #0
 80041ae:	e778      	b.n	80040a2 <aead_generate_test_vectors+0x4e>

		}//end of foe loop
	}//end of for loop

	if (ret_val != 0) {
		lwc_printf("Error occurred\n");
 80041b0:	4822      	ldr	r0, [pc, #136]	; (800423c <aead_generate_test_vectors+0x1e8>)
 80041b2:	f000 f8b7 	bl	8004324 <lwc_printf>
 80041b6:	f06f 0603 	mvn.w	r6, #3
	}

	/* Now print Results in one single line for easier file processing*/
	ticks_res_pos = 0;
	aead_hash_print_res("AEAD");
 80041ba:	4821      	ldr	r0, [pc, #132]	; (8004240 <aead_generate_test_vectors+0x1ec>)
	lwc_printf("AEADTotRes: ");
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
			lwc_printf("enc(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_enc_ticks_res[ticks_res_pos]);
 80041bc:	4f21      	ldr	r7, [pc, #132]	; (8004244 <aead_generate_test_vectors+0x1f0>)
			lwc_printf("dec(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_dec_ticks_res[ticks_res_pos]);
 80041be:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800424c <aead_generate_test_vectors+0x1f8>
	ticks_res_pos = 0;
 80041c2:	2500      	movs	r5, #0
 80041c4:	6025      	str	r5, [r4, #0]
	aead_hash_print_res("AEAD");
 80041c6:	f000 f843 	bl	8004250 <aead_hash_print_res>
	lwc_printf("AEADTotRes: ");
 80041ca:	481f      	ldr	r0, [pc, #124]	; (8004248 <aead_generate_test_vectors+0x1f4>)
 80041cc:	f000 f8aa 	bl	8004324 <lwc_printf>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	46ab      	mov	fp, r5
		lwc_printf("Error occurred\n");
 80041d4:	2500      	movs	r5, #0
			lwc_printf("enc(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_enc_ticks_res[ticks_res_pos]);
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <aead_generate_test_vectors+0x1d8>)
 80041d8:	4659      	mov	r1, fp
 80041da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041de:	4638      	mov	r0, r7
 80041e0:	462a      	mov	r2, r5
 80041e2:	f000 f89f 	bl	8004324 <lwc_printf>
			lwc_printf("dec(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_dec_ticks_res[ticks_res_pos]);
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	4913      	ldr	r1, [pc, #76]	; (8004238 <aead_generate_test_vectors+0x1e4>)
 80041ea:	462a      	mov	r2, r5
 80041ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041f0:	4650      	mov	r0, sl
 80041f2:	4659      	mov	r1, fp
 80041f4:	f000 f896 	bl	8004324 <lwc_printf>
			ticks_res_pos++;
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	3508      	adds	r5, #8
 80041fc:	3301      	adds	r3, #1
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 80041fe:	2d28      	cmp	r5, #40	; 0x28
			ticks_res_pos++;
 8004200:	6023      	str	r3, [r4, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8004202:	d1e8      	bne.n	80041d6 <aead_generate_test_vectors+0x182>
 8004204:	f10b 0b08 	add.w	fp, fp, #8
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
 8004208:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800420c:	d1e2      	bne.n	80041d4 <aead_generate_test_vectors+0x180>
		}
	}

	return ret_val;
}
 800420e:	4630      	mov	r0, r6
 8004210:	b03f      	add	sp, #252	; 0xfc
 8004212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004216:	bf00      	nop
 8004218:	20000398 	.word	0x20000398
 800421c:	20000090 	.word	0x20000090
 8004220:	08005c6c 	.word	0x08005c6c
 8004224:	20000094 	.word	0x20000094
 8004228:	08005c88 	.word	0x08005c88
 800422c:	20000098 	.word	0x20000098
 8004230:	08005cb4 	.word	0x08005cb4
 8004234:	08005c28 	.word	0x08005c28
 8004238:	20000198 	.word	0x20000198
 800423c:	08005ca4 	.word	0x08005ca4
 8004240:	08005cd0 	.word	0x08005cd0
 8004244:	08005ce8 	.word	0x08005ce8
 8004248:	08005cd8 	.word	0x08005cd8
 800424c:	08005cfc 	.word	0x08005cfc

08004250 <aead_hash_print_res>:
	return ret_val;
}

#endif

void aead_hash_print_res(char *algo_type){
 8004250:	b510      	push	{r4, lr}
 8004252:	4601      	mov	r1, r0
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <aead_hash_print_res+0x20>)
 8004256:	4a07      	ldr	r2, [pc, #28]	; (8004274 <aead_hash_print_res+0x24>)
 8004258:	4807      	ldr	r0, [pc, #28]	; (8004278 <aead_hash_print_res+0x28>)
 800425a:	f000 f863 	bl	8004324 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800425e:	4907      	ldr	r1, [pc, #28]	; (800427c <aead_hash_print_res+0x2c>)
 8004260:	4807      	ldr	r0, [pc, #28]	; (8004280 <aead_hash_print_res+0x30>)
 8004262:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
}
 8004266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800426a:	6a09      	ldr	r1, [r1, #32]
 800426c:	f000 b85a 	b.w	8004324 <lwc_printf>
 8004270:	08005aa8 	.word	0x08005aa8
 8004274:	08005b28 	.word	0x08005b28
 8004278:	08005d10 	.word	0x08005d10
 800427c:	2000067c 	.word	0x2000067c
 8004280:	08005d50 	.word	0x08005d50

08004284 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8004284:	b430      	push	{r4, r5}
 8004286:	4614      	mov	r4, r2
 8004288:	461d      	mov	r5, r3
	for (unsigned long long i = 0; i < numbytes; i++) {
 800428a:	ea54 0305 	orrs.w	r3, r4, r5
 800428e:	d009      	beq.n	80042a4 <init_buffer+0x20>
 8004290:	1e41      	subs	r1, r0, #1
 8004292:	460b      	mov	r3, r1
 8004294:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
 8004298:	4411      	add	r1, r2
 800429a:	18c2      	adds	r2, r0, r3
		buffer[i] = (unsigned char) i + '0';
 800429c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (unsigned long long i = 0; i < numbytes; i++) {
 80042a0:	428b      	cmp	r3, r1
 80042a2:	d1fa      	bne.n	800429a <init_buffer+0x16>
	}
}
 80042a4:	bc30      	pop	{r4, r5}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 80042a8:	4a02      	ldr	r2, [pc, #8]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000039c 	.word	0x2000039c

080042b8 <tick_msr_start>:

void tick_msr_start(void) {
 80042b8:	b510      	push	{r4, lr}

	tim_per_elp_cnt = 0;
	htim6.Instance->CNT = 0;
 80042ba:	4c08      	ldr	r4, [pc, #32]	; (80042dc <tick_msr_start+0x24>)
	tim_per_elp_cnt = 0;
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <tick_msr_start+0x28>)
	htim6.Instance->CNT = 0;
 80042be:	6821      	ldr	r1, [r4, #0]
	tim_per_elp_cnt = 0;
 80042c0:	2300      	movs	r3, #0
	htim6.Instance->CNT = 0;
 80042c2:	624b      	str	r3, [r1, #36]	; 0x24
	tim_per_elp_cnt = 0;
 80042c4:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick();
 80042c6:	f7fc fab1 	bl	800082c <HAL_GetTick>
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <tick_msr_start+0x2c>)
 80042cc:	4602      	mov	r2, r0
	HAL_TIM_Base_Start_IT(&htim6);
 80042ce:	4620      	mov	r0, r4
}
 80042d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gb_ms_ticks = HAL_GetTick();
 80042d4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80042d6:	f7fe b8ab 	b.w	8002430 <HAL_TIM_Base_Start_IT>
 80042da:	bf00      	nop
 80042dc:	2000062c 	.word	0x2000062c
 80042e0:	2000039c 	.word	0x2000039c
 80042e4:	20000094 	.word	0x20000094

080042e8 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 80042e8:	b538      	push	{r3, r4, r5, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 80042ea:	4d0a      	ldr	r5, [pc, #40]	; (8004314 <tick_msr_end+0x2c>)
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <tick_msr_end+0x30>)
	HAL_TIM_Base_Stop_IT(&htim6);
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7fe f908 	bl	8002504 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <tick_msr_end+0x34>)
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004300:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8004302:	f7fc fa93 	bl	800082c <HAL_GetTick>
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <tick_msr_end+0x38>)
 8004308:	6811      	ldr	r1, [r2, #0]
 800430a:	4603      	mov	r3, r0
 800430c:	1a5b      	subs	r3, r3, r1
	return gb_tick_cnt;
}
 800430e:	6820      	ldr	r0, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8004310:	6013      	str	r3, [r2, #0]
}
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	2000062c 	.word	0x2000062c
 8004318:	20000090 	.word	0x20000090
 800431c:	2000039c 	.word	0x2000039c
 8004320:	20000094 	.word	0x20000094

08004324 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8004324:	b40f      	push	{r0, r1, r2, r3}
 8004326:	b510      	push	{r4, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	aa04      	add	r2, sp, #16

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
	vsprintf(dbg_out_buf, format, args);
 800432c:	4c0a      	ldr	r4, [pc, #40]	; (8004358 <lwc_printf+0x34>)
void lwc_printf(const char *format, ...) {
 800432e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, format);
 8004332:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 8004334:	4620      	mov	r0, r4
 8004336:	f000 fbff 	bl	8004b38 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 800433a:	4620      	mov	r0, r4
 800433c:	f7fb ff48 	bl	80001d0 <strlen>
 8004340:	4621      	mov	r1, r4
 8004342:	b282      	uxth	r2, r0
 8004344:	2364      	movs	r3, #100	; 0x64
 8004346:	4805      	ldr	r0, [pc, #20]	; (800435c <lwc_printf+0x38>)
 8004348:	f7fe fbce 	bl	8002ae8 <HAL_UART_Transmit>
}
 800434c:	b002      	add	sp, #8
 800434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004352:	b004      	add	sp, #16
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	200003a0 	.word	0x200003a0
 800435c:	200005a8 	.word	0x200005a8

08004360 <lwc_print_hex_str>:

void lwc_print_hex_str(const void *data, uint32_t len){

	uint8_t *buf = (uint8_t *)data;

	for(uint32_t i = 0; i <len; i++){
 8004360:	b161      	cbz	r1, 800437c <lwc_print_hex_str+0x1c>
void lwc_print_hex_str(const void *data, uint32_t len){
 8004362:	b570      	push	{r4, r5, r6, lr}
 8004364:	3901      	subs	r1, #1
		lwc_printf("%02X", buf[i]);
 8004366:	4e06      	ldr	r6, [pc, #24]	; (8004380 <lwc_print_hex_str+0x20>)
 8004368:	1845      	adds	r5, r0, r1
 800436a:	1e44      	subs	r4, r0, #1
 800436c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004370:	4630      	mov	r0, r6
 8004372:	f7ff ffd7 	bl	8004324 <lwc_printf>
	for(uint32_t i = 0; i <len; i++){
 8004376:	42ac      	cmp	r4, r5
 8004378:	d1f8      	bne.n	800436c <lwc_print_hex_str+0xc>
	}

}
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	08005d78 	.word	0x08005d78

08004384 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8004388:	2234      	movs	r2, #52	; 0x34
 800438a:	2100      	movs	r1, #0
 800438c:	4822      	ldr	r0, [pc, #136]	; (8004418 <get_memory_usage+0x94>)
 800438e:	f000 f8c7 	bl	8004520 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <get_memory_usage+0x94>)
 8004394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004398:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <get_memory_usage+0x94>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <get_memory_usage+0x94>)
 80043a0:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 80043a2:	4a1e      	ldr	r2, [pc, #120]	; (800441c <get_memory_usage+0x98>)
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <get_memory_usage+0x94>)
 80043a6:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <get_memory_usage+0x9c>)
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <get_memory_usage+0x94>)
 80043ac:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <get_memory_usage+0xa0>)
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <get_memory_usage+0x94>)
 80043b2:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <get_memory_usage+0xa4>)
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <get_memory_usage+0x94>)
 80043b8:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 80043ba:	4a1c      	ldr	r2, [pc, #112]	; (800442c <get_memory_usage+0xa8>)
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <get_memory_usage+0x94>)
 80043be:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <get_memory_usage+0xac>)
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <get_memory_usage+0x94>)
 80043c4:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <get_memory_usage+0x94>)
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <get_memory_usage+0x94>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	4a11      	ldr	r2, [pc, #68]	; (8004418 <get_memory_usage+0x94>)
 80043d2:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <get_memory_usage+0x94>)
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <get_memory_usage+0x94>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <get_memory_usage+0x94>)
 80043e0:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <get_memory_usage+0x94>)
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <get_memory_usage+0x94>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <get_memory_usage+0x94>)
 80043ee:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <get_memory_usage+0x94>)
 80043f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <get_memory_usage+0x94>)
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	4413      	add	r3, r2
 80043fa:	4a07      	ldr	r2, [pc, #28]	; (8004418 <get_memory_usage+0x94>)
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <get_memory_usage+0x94>)
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <get_memory_usage+0x94>)
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	441a      	add	r2, r3
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <get_memory_usage+0x94>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	4a02      	ldr	r2, [pc, #8]	; (8004418 <get_memory_usage+0x94>)
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	2000067c 	.word	0x2000067c
 800441c:	080057e4 	.word	0x080057e4
 8004420:	20000070 	.word	0x20000070
 8004424:	200006c0 	.word	0x200006c0
 8004428:	20000000 	.word	0x20000000
 800442c:	20000070 	.word	0x20000070
 8004430:	08005e5c 	.word	0x08005e5c

08004434 <__assert_func>:
 8004434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004436:	4614      	mov	r4, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <__assert_func+0x2c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4605      	mov	r5, r0
 8004440:	68d8      	ldr	r0, [r3, #12]
 8004442:	b14c      	cbz	r4, 8004458 <__assert_func+0x24>
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <__assert_func+0x30>)
 8004446:	9100      	str	r1, [sp, #0]
 8004448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800444c:	4906      	ldr	r1, [pc, #24]	; (8004468 <__assert_func+0x34>)
 800444e:	462b      	mov	r3, r5
 8004450:	f000 f814 	bl	800447c <fiprintf>
 8004454:	f000 fc3a 	bl	8004ccc <abort>
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <__assert_func+0x38>)
 800445a:	461c      	mov	r4, r3
 800445c:	e7f3      	b.n	8004446 <__assert_func+0x12>
 800445e:	bf00      	nop
 8004460:	2000000c 	.word	0x2000000c
 8004464:	08005d7d 	.word	0x08005d7d
 8004468:	08005d8a 	.word	0x08005d8a
 800446c:	08005db8 	.word	0x08005db8

08004470 <__errno>:
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <__errno+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c

0800447c <fiprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	b503      	push	{r0, r1, lr}
 8004480:	4601      	mov	r1, r0
 8004482:	ab03      	add	r3, sp, #12
 8004484:	4805      	ldr	r0, [pc, #20]	; (800449c <fiprintf+0x20>)
 8004486:	f853 2b04 	ldr.w	r2, [r3], #4
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	f000 f879 	bl	8004584 <_vfiprintf_r>
 8004492:	b002      	add	sp, #8
 8004494:	f85d eb04 	ldr.w	lr, [sp], #4
 8004498:	b003      	add	sp, #12
 800449a:	4770      	bx	lr
 800449c:	2000000c 	.word	0x2000000c

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4d0d      	ldr	r5, [pc, #52]	; (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2600      	movs	r6, #0
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4d0b      	ldr	r5, [pc, #44]	; (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	; (80044e4 <__libc_init_array+0x44>)
 80044b4:	f001 f98a 	bl	80057cc <_init>
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2600      	movs	r6, #0
 80044be:	42a6      	cmp	r6, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c8:	4798      	blx	r3
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d2:	4798      	blx	r3
 80044d4:	3601      	adds	r6, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	08005e54 	.word	0x08005e54
 80044dc:	08005e54 	.word	0x08005e54
 80044e0:	08005e54 	.word	0x08005e54
 80044e4:	08005e58 	.word	0x08005e58

080044e8 <memcmp>:
 80044e8:	b530      	push	{r4, r5, lr}
 80044ea:	3901      	subs	r1, #1
 80044ec:	2400      	movs	r4, #0
 80044ee:	42a2      	cmp	r2, r4
 80044f0:	d101      	bne.n	80044f6 <memcmp+0xe>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e005      	b.n	8004502 <memcmp+0x1a>
 80044f6:	5d03      	ldrb	r3, [r0, r4]
 80044f8:	3401      	adds	r4, #1
 80044fa:	5d0d      	ldrb	r5, [r1, r4]
 80044fc:	42ab      	cmp	r3, r5
 80044fe:	d0f6      	beq.n	80044ee <memcmp+0x6>
 8004500:	1b58      	subs	r0, r3, r5
 8004502:	bd30      	pop	{r4, r5, pc}

08004504 <memcpy>:
 8004504:	440a      	add	r2, r1
 8004506:	4291      	cmp	r1, r2
 8004508:	f100 33ff 	add.w	r3, r0, #4294967295
 800450c:	d100      	bne.n	8004510 <memcpy+0xc>
 800450e:	4770      	bx	lr
 8004510:	b510      	push	{r4, lr}
 8004512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800451a:	4291      	cmp	r1, r2
 800451c:	d1f9      	bne.n	8004512 <memcpy+0xe>
 800451e:	bd10      	pop	{r4, pc}

08004520 <memset>:
 8004520:	4402      	add	r2, r0
 8004522:	4603      	mov	r3, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <__sfputc_r>:
 8004530:	6893      	ldr	r3, [r2, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	b410      	push	{r4}
 8004538:	6093      	str	r3, [r2, #8]
 800453a:	da08      	bge.n	800454e <__sfputc_r+0x1e>
 800453c:	6994      	ldr	r4, [r2, #24]
 800453e:	42a3      	cmp	r3, r4
 8004540:	db01      	blt.n	8004546 <__sfputc_r+0x16>
 8004542:	290a      	cmp	r1, #10
 8004544:	d103      	bne.n	800454e <__sfputc_r+0x1e>
 8004546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800454a:	f000 baff 	b.w	8004b4c <__swbuf_r>
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	1c58      	adds	r0, r3, #1
 8004552:	6010      	str	r0, [r2, #0]
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	4608      	mov	r0, r1
 8004558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455c:	4770      	bx	lr

0800455e <__sfputs_r>:
 800455e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004560:	4606      	mov	r6, r0
 8004562:	460f      	mov	r7, r1
 8004564:	4614      	mov	r4, r2
 8004566:	18d5      	adds	r5, r2, r3
 8004568:	42ac      	cmp	r4, r5
 800456a:	d101      	bne.n	8004570 <__sfputs_r+0x12>
 800456c:	2000      	movs	r0, #0
 800456e:	e007      	b.n	8004580 <__sfputs_r+0x22>
 8004570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004574:	463a      	mov	r2, r7
 8004576:	4630      	mov	r0, r6
 8004578:	f7ff ffda 	bl	8004530 <__sfputc_r>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d1f3      	bne.n	8004568 <__sfputs_r+0xa>
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004584 <_vfiprintf_r>:
 8004584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004588:	460d      	mov	r5, r1
 800458a:	b09d      	sub	sp, #116	; 0x74
 800458c:	4614      	mov	r4, r2
 800458e:	4698      	mov	r8, r3
 8004590:	4606      	mov	r6, r0
 8004592:	b118      	cbz	r0, 800459c <_vfiprintf_r+0x18>
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b90b      	cbnz	r3, 800459c <_vfiprintf_r+0x18>
 8004598:	f000 fcba 	bl	8004f10 <__sinit>
 800459c:	4b89      	ldr	r3, [pc, #548]	; (80047c4 <_vfiprintf_r+0x240>)
 800459e:	429d      	cmp	r5, r3
 80045a0:	d11b      	bne.n	80045da <_vfiprintf_r+0x56>
 80045a2:	6875      	ldr	r5, [r6, #4]
 80045a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045a6:	07d9      	lsls	r1, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_vfiprintf_r+0x32>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_vfiprintf_r+0x32>
 80045b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045b2:	f000 fd4b 	bl	800504c <__retarget_lock_acquire_recursive>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	071b      	lsls	r3, r3, #28
 80045ba:	d501      	bpl.n	80045c0 <_vfiprintf_r+0x3c>
 80045bc:	692b      	ldr	r3, [r5, #16]
 80045be:	b9eb      	cbnz	r3, 80045fc <_vfiprintf_r+0x78>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4630      	mov	r0, r6
 80045c4:	f000 fb14 	bl	8004bf0 <__swsetup_r>
 80045c8:	b1c0      	cbz	r0, 80045fc <_vfiprintf_r+0x78>
 80045ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045cc:	07dc      	lsls	r4, r3, #31
 80045ce:	d50e      	bpl.n	80045ee <_vfiprintf_r+0x6a>
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	b01d      	add	sp, #116	; 0x74
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	4b7b      	ldr	r3, [pc, #492]	; (80047c8 <_vfiprintf_r+0x244>)
 80045dc:	429d      	cmp	r5, r3
 80045de:	d101      	bne.n	80045e4 <_vfiprintf_r+0x60>
 80045e0:	68b5      	ldr	r5, [r6, #8]
 80045e2:	e7df      	b.n	80045a4 <_vfiprintf_r+0x20>
 80045e4:	4b79      	ldr	r3, [pc, #484]	; (80047cc <_vfiprintf_r+0x248>)
 80045e6:	429d      	cmp	r5, r3
 80045e8:	bf08      	it	eq
 80045ea:	68f5      	ldreq	r5, [r6, #12]
 80045ec:	e7da      	b.n	80045a4 <_vfiprintf_r+0x20>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	0598      	lsls	r0, r3, #22
 80045f2:	d4ed      	bmi.n	80045d0 <_vfiprintf_r+0x4c>
 80045f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f6:	f000 fd2a 	bl	800504e <__retarget_lock_release_recursive>
 80045fa:	e7e9      	b.n	80045d0 <_vfiprintf_r+0x4c>
 80045fc:	2300      	movs	r3, #0
 80045fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004600:	2320      	movs	r3, #32
 8004602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004606:	f8cd 800c 	str.w	r8, [sp, #12]
 800460a:	2330      	movs	r3, #48	; 0x30
 800460c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047d0 <_vfiprintf_r+0x24c>
 8004610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004614:	f04f 0901 	mov.w	r9, #1
 8004618:	4623      	mov	r3, r4
 800461a:	469a      	mov	sl, r3
 800461c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004620:	b10a      	cbz	r2, 8004626 <_vfiprintf_r+0xa2>
 8004622:	2a25      	cmp	r2, #37	; 0x25
 8004624:	d1f9      	bne.n	800461a <_vfiprintf_r+0x96>
 8004626:	ebba 0b04 	subs.w	fp, sl, r4
 800462a:	d00b      	beq.n	8004644 <_vfiprintf_r+0xc0>
 800462c:	465b      	mov	r3, fp
 800462e:	4622      	mov	r2, r4
 8004630:	4629      	mov	r1, r5
 8004632:	4630      	mov	r0, r6
 8004634:	f7ff ff93 	bl	800455e <__sfputs_r>
 8004638:	3001      	adds	r0, #1
 800463a:	f000 80aa 	beq.w	8004792 <_vfiprintf_r+0x20e>
 800463e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004640:	445a      	add	r2, fp
 8004642:	9209      	str	r2, [sp, #36]	; 0x24
 8004644:	f89a 3000 	ldrb.w	r3, [sl]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a2 	beq.w	8004792 <_vfiprintf_r+0x20e>
 800464e:	2300      	movs	r3, #0
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004658:	f10a 0a01 	add.w	sl, sl, #1
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	9307      	str	r3, [sp, #28]
 8004660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004664:	931a      	str	r3, [sp, #104]	; 0x68
 8004666:	4654      	mov	r4, sl
 8004668:	2205      	movs	r2, #5
 800466a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466e:	4858      	ldr	r0, [pc, #352]	; (80047d0 <_vfiprintf_r+0x24c>)
 8004670:	f7fb fdb6 	bl	80001e0 <memchr>
 8004674:	9a04      	ldr	r2, [sp, #16]
 8004676:	b9d8      	cbnz	r0, 80046b0 <_vfiprintf_r+0x12c>
 8004678:	06d1      	lsls	r1, r2, #27
 800467a:	bf44      	itt	mi
 800467c:	2320      	movmi	r3, #32
 800467e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004682:	0713      	lsls	r3, r2, #28
 8004684:	bf44      	itt	mi
 8004686:	232b      	movmi	r3, #43	; 0x2b
 8004688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468c:	f89a 3000 	ldrb.w	r3, [sl]
 8004690:	2b2a      	cmp	r3, #42	; 0x2a
 8004692:	d015      	beq.n	80046c0 <_vfiprintf_r+0x13c>
 8004694:	9a07      	ldr	r2, [sp, #28]
 8004696:	4654      	mov	r4, sl
 8004698:	2000      	movs	r0, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a4:	3b30      	subs	r3, #48	; 0x30
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d94e      	bls.n	8004748 <_vfiprintf_r+0x1c4>
 80046aa:	b1b0      	cbz	r0, 80046da <_vfiprintf_r+0x156>
 80046ac:	9207      	str	r2, [sp, #28]
 80046ae:	e014      	b.n	80046da <_vfiprintf_r+0x156>
 80046b0:	eba0 0308 	sub.w	r3, r0, r8
 80046b4:	fa09 f303 	lsl.w	r3, r9, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	46a2      	mov	sl, r4
 80046be:	e7d2      	b.n	8004666 <_vfiprintf_r+0xe2>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	1d19      	adds	r1, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	9103      	str	r1, [sp, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfbb      	ittet	lt
 80046cc:	425b      	neglt	r3, r3
 80046ce:	f042 0202 	orrlt.w	r2, r2, #2
 80046d2:	9307      	strge	r3, [sp, #28]
 80046d4:	9307      	strlt	r3, [sp, #28]
 80046d6:	bfb8      	it	lt
 80046d8:	9204      	strlt	r2, [sp, #16]
 80046da:	7823      	ldrb	r3, [r4, #0]
 80046dc:	2b2e      	cmp	r3, #46	; 0x2e
 80046de:	d10c      	bne.n	80046fa <_vfiprintf_r+0x176>
 80046e0:	7863      	ldrb	r3, [r4, #1]
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d135      	bne.n	8004752 <_vfiprintf_r+0x1ce>
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9203      	str	r2, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046f6:	3402      	adds	r4, #2
 80046f8:	9305      	str	r3, [sp, #20]
 80046fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047e0 <_vfiprintf_r+0x25c>
 80046fe:	7821      	ldrb	r1, [r4, #0]
 8004700:	2203      	movs	r2, #3
 8004702:	4650      	mov	r0, sl
 8004704:	f7fb fd6c 	bl	80001e0 <memchr>
 8004708:	b140      	cbz	r0, 800471c <_vfiprintf_r+0x198>
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	eba0 000a 	sub.w	r0, r0, sl
 8004710:	fa03 f000 	lsl.w	r0, r3, r0
 8004714:	9b04      	ldr	r3, [sp, #16]
 8004716:	4303      	orrs	r3, r0
 8004718:	3401      	adds	r4, #1
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	482c      	ldr	r0, [pc, #176]	; (80047d4 <_vfiprintf_r+0x250>)
 8004722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004726:	2206      	movs	r2, #6
 8004728:	f7fb fd5a 	bl	80001e0 <memchr>
 800472c:	2800      	cmp	r0, #0
 800472e:	d03f      	beq.n	80047b0 <_vfiprintf_r+0x22c>
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <_vfiprintf_r+0x254>)
 8004732:	bb1b      	cbnz	r3, 800477c <_vfiprintf_r+0x1f8>
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	3307      	adds	r3, #7
 8004738:	f023 0307 	bic.w	r3, r3, #7
 800473c:	3308      	adds	r3, #8
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	443b      	add	r3, r7
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	e767      	b.n	8004618 <_vfiprintf_r+0x94>
 8004748:	fb0c 3202 	mla	r2, ip, r2, r3
 800474c:	460c      	mov	r4, r1
 800474e:	2001      	movs	r0, #1
 8004750:	e7a5      	b.n	800469e <_vfiprintf_r+0x11a>
 8004752:	2300      	movs	r3, #0
 8004754:	3401      	adds	r4, #1
 8004756:	9305      	str	r3, [sp, #20]
 8004758:	4619      	mov	r1, r3
 800475a:	f04f 0c0a 	mov.w	ip, #10
 800475e:	4620      	mov	r0, r4
 8004760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004764:	3a30      	subs	r2, #48	; 0x30
 8004766:	2a09      	cmp	r2, #9
 8004768:	d903      	bls.n	8004772 <_vfiprintf_r+0x1ee>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0c5      	beq.n	80046fa <_vfiprintf_r+0x176>
 800476e:	9105      	str	r1, [sp, #20]
 8004770:	e7c3      	b.n	80046fa <_vfiprintf_r+0x176>
 8004772:	fb0c 2101 	mla	r1, ip, r1, r2
 8004776:	4604      	mov	r4, r0
 8004778:	2301      	movs	r3, #1
 800477a:	e7f0      	b.n	800475e <_vfiprintf_r+0x1da>
 800477c:	ab03      	add	r3, sp, #12
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	462a      	mov	r2, r5
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <_vfiprintf_r+0x258>)
 8004784:	a904      	add	r1, sp, #16
 8004786:	4630      	mov	r0, r6
 8004788:	f3af 8000 	nop.w
 800478c:	4607      	mov	r7, r0
 800478e:	1c78      	adds	r0, r7, #1
 8004790:	d1d6      	bne.n	8004740 <_vfiprintf_r+0x1bc>
 8004792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	d405      	bmi.n	80047a4 <_vfiprintf_r+0x220>
 8004798:	89ab      	ldrh	r3, [r5, #12]
 800479a:	059a      	lsls	r2, r3, #22
 800479c:	d402      	bmi.n	80047a4 <_vfiprintf_r+0x220>
 800479e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047a0:	f000 fc55 	bl	800504e <__retarget_lock_release_recursive>
 80047a4:	89ab      	ldrh	r3, [r5, #12]
 80047a6:	065b      	lsls	r3, r3, #25
 80047a8:	f53f af12 	bmi.w	80045d0 <_vfiprintf_r+0x4c>
 80047ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ae:	e711      	b.n	80045d4 <_vfiprintf_r+0x50>
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <_vfiprintf_r+0x258>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f880 	bl	80048c0 <_printf_i>
 80047c0:	e7e4      	b.n	800478c <_vfiprintf_r+0x208>
 80047c2:	bf00      	nop
 80047c4:	08005e14 	.word	0x08005e14
 80047c8:	08005e34 	.word	0x08005e34
 80047cc:	08005df4 	.word	0x08005df4
 80047d0:	08005dc0 	.word	0x08005dc0
 80047d4:	08005dca 	.word	0x08005dca
 80047d8:	00000000 	.word	0x00000000
 80047dc:	0800455f 	.word	0x0800455f
 80047e0:	08005dc6 	.word	0x08005dc6

080047e4 <_printf_common>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	4616      	mov	r6, r2
 80047ea:	4699      	mov	r9, r3
 80047ec:	688a      	ldr	r2, [r1, #8]
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bfb8      	it	lt
 80047f8:	4613      	movlt	r3, r2
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004800:	4607      	mov	r7, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b10a      	cbz	r2, 800480a <_printf_common+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	6833      	ldrmi	r3, [r6, #0]
 8004812:	3302      	addmi	r3, #2
 8004814:	6033      	strmi	r3, [r6, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	f015 0506 	ands.w	r5, r5, #6
 800481c:	d106      	bne.n	800482c <_printf_common+0x48>
 800481e:	f104 0a19 	add.w	sl, r4, #25
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	6832      	ldr	r2, [r6, #0]
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	42ab      	cmp	r3, r5
 800482a:	dc26      	bgt.n	800487a <_printf_common+0x96>
 800482c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004830:	1e13      	subs	r3, r2, #0
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	bf18      	it	ne
 8004836:	2301      	movne	r3, #1
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d42b      	bmi.n	8004894 <_printf_common+0xb0>
 800483c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d01e      	beq.n	8004888 <_printf_common+0xa4>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	68e5      	ldr	r5, [r4, #12]
 800484e:	6832      	ldr	r2, [r6, #0]
 8004850:	f003 0306 	and.w	r3, r3, #6
 8004854:	2b04      	cmp	r3, #4
 8004856:	bf08      	it	eq
 8004858:	1aad      	subeq	r5, r5, r2
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	6922      	ldr	r2, [r4, #16]
 800485e:	bf0c      	ite	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	2500      	movne	r5, #0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfc4      	itt	gt
 800486a:	1a9b      	subgt	r3, r3, r2
 800486c:	18ed      	addgt	r5, r5, r3
 800486e:	2600      	movs	r6, #0
 8004870:	341a      	adds	r4, #26
 8004872:	42b5      	cmp	r5, r6
 8004874:	d11a      	bne.n	80048ac <_printf_common+0xc8>
 8004876:	2000      	movs	r0, #0
 8004878:	e008      	b.n	800488c <_printf_common+0xa8>
 800487a:	2301      	movs	r3, #1
 800487c:	4652      	mov	r2, sl
 800487e:	4649      	mov	r1, r9
 8004880:	4638      	mov	r0, r7
 8004882:	47c0      	blx	r8
 8004884:	3001      	adds	r0, #1
 8004886:	d103      	bne.n	8004890 <_printf_common+0xac>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	3501      	adds	r5, #1
 8004892:	e7c6      	b.n	8004822 <_printf_common+0x3e>
 8004894:	18e1      	adds	r1, r4, r3
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	2030      	movs	r0, #48	; 0x30
 800489a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800489e:	4422      	add	r2, r4
 80048a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a8:	3302      	adds	r3, #2
 80048aa:	e7c7      	b.n	800483c <_printf_common+0x58>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4622      	mov	r2, r4
 80048b0:	4649      	mov	r1, r9
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c0      	blx	r8
 80048b6:	3001      	adds	r0, #1
 80048b8:	d0e6      	beq.n	8004888 <_printf_common+0xa4>
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7d9      	b.n	8004872 <_printf_common+0x8e>
	...

080048c0 <_printf_i>:
 80048c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	4691      	mov	r9, r2
 80048c8:	7e27      	ldrb	r7, [r4, #24]
 80048ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048cc:	2f78      	cmp	r7, #120	; 0x78
 80048ce:	4680      	mov	r8, r0
 80048d0:	469a      	mov	sl, r3
 80048d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d6:	d807      	bhi.n	80048e8 <_printf_i+0x28>
 80048d8:	2f62      	cmp	r7, #98	; 0x62
 80048da:	d80a      	bhi.n	80048f2 <_printf_i+0x32>
 80048dc:	2f00      	cmp	r7, #0
 80048de:	f000 80d8 	beq.w	8004a92 <_printf_i+0x1d2>
 80048e2:	2f58      	cmp	r7, #88	; 0x58
 80048e4:	f000 80a3 	beq.w	8004a2e <_printf_i+0x16e>
 80048e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f0:	e03a      	b.n	8004968 <_printf_i+0xa8>
 80048f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048f6:	2b15      	cmp	r3, #21
 80048f8:	d8f6      	bhi.n	80048e8 <_printf_i+0x28>
 80048fa:	a001      	add	r0, pc, #4	; (adr r0, 8004900 <_printf_i+0x40>)
 80048fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004900:	08004959 	.word	0x08004959
 8004904:	0800496d 	.word	0x0800496d
 8004908:	080048e9 	.word	0x080048e9
 800490c:	080048e9 	.word	0x080048e9
 8004910:	080048e9 	.word	0x080048e9
 8004914:	080048e9 	.word	0x080048e9
 8004918:	0800496d 	.word	0x0800496d
 800491c:	080048e9 	.word	0x080048e9
 8004920:	080048e9 	.word	0x080048e9
 8004924:	080048e9 	.word	0x080048e9
 8004928:	080048e9 	.word	0x080048e9
 800492c:	08004a79 	.word	0x08004a79
 8004930:	0800499d 	.word	0x0800499d
 8004934:	08004a5b 	.word	0x08004a5b
 8004938:	080048e9 	.word	0x080048e9
 800493c:	080048e9 	.word	0x080048e9
 8004940:	08004a9b 	.word	0x08004a9b
 8004944:	080048e9 	.word	0x080048e9
 8004948:	0800499d 	.word	0x0800499d
 800494c:	080048e9 	.word	0x080048e9
 8004950:	080048e9 	.word	0x080048e9
 8004954:	08004a63 	.word	0x08004a63
 8004958:	680b      	ldr	r3, [r1, #0]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	600a      	str	r2, [r1, #0]
 8004960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004968:	2301      	movs	r3, #1
 800496a:	e0a3      	b.n	8004ab4 <_printf_i+0x1f4>
 800496c:	6825      	ldr	r5, [r4, #0]
 800496e:	6808      	ldr	r0, [r1, #0]
 8004970:	062e      	lsls	r6, r5, #24
 8004972:	f100 0304 	add.w	r3, r0, #4
 8004976:	d50a      	bpl.n	800498e <_printf_i+0xce>
 8004978:	6805      	ldr	r5, [r0, #0]
 800497a:	600b      	str	r3, [r1, #0]
 800497c:	2d00      	cmp	r5, #0
 800497e:	da03      	bge.n	8004988 <_printf_i+0xc8>
 8004980:	232d      	movs	r3, #45	; 0x2d
 8004982:	426d      	negs	r5, r5
 8004984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004988:	485e      	ldr	r0, [pc, #376]	; (8004b04 <_printf_i+0x244>)
 800498a:	230a      	movs	r3, #10
 800498c:	e019      	b.n	80049c2 <_printf_i+0x102>
 800498e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004992:	6805      	ldr	r5, [r0, #0]
 8004994:	600b      	str	r3, [r1, #0]
 8004996:	bf18      	it	ne
 8004998:	b22d      	sxthne	r5, r5
 800499a:	e7ef      	b.n	800497c <_printf_i+0xbc>
 800499c:	680b      	ldr	r3, [r1, #0]
 800499e:	6825      	ldr	r5, [r4, #0]
 80049a0:	1d18      	adds	r0, r3, #4
 80049a2:	6008      	str	r0, [r1, #0]
 80049a4:	0628      	lsls	r0, r5, #24
 80049a6:	d501      	bpl.n	80049ac <_printf_i+0xec>
 80049a8:	681d      	ldr	r5, [r3, #0]
 80049aa:	e002      	b.n	80049b2 <_printf_i+0xf2>
 80049ac:	0669      	lsls	r1, r5, #25
 80049ae:	d5fb      	bpl.n	80049a8 <_printf_i+0xe8>
 80049b0:	881d      	ldrh	r5, [r3, #0]
 80049b2:	4854      	ldr	r0, [pc, #336]	; (8004b04 <_printf_i+0x244>)
 80049b4:	2f6f      	cmp	r7, #111	; 0x6f
 80049b6:	bf0c      	ite	eq
 80049b8:	2308      	moveq	r3, #8
 80049ba:	230a      	movne	r3, #10
 80049bc:	2100      	movs	r1, #0
 80049be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049c2:	6866      	ldr	r6, [r4, #4]
 80049c4:	60a6      	str	r6, [r4, #8]
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	bfa2      	ittt	ge
 80049ca:	6821      	ldrge	r1, [r4, #0]
 80049cc:	f021 0104 	bicge.w	r1, r1, #4
 80049d0:	6021      	strge	r1, [r4, #0]
 80049d2:	b90d      	cbnz	r5, 80049d8 <_printf_i+0x118>
 80049d4:	2e00      	cmp	r6, #0
 80049d6:	d04d      	beq.n	8004a74 <_printf_i+0x1b4>
 80049d8:	4616      	mov	r6, r2
 80049da:	fbb5 f1f3 	udiv	r1, r5, r3
 80049de:	fb03 5711 	mls	r7, r3, r1, r5
 80049e2:	5dc7      	ldrb	r7, [r0, r7]
 80049e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049e8:	462f      	mov	r7, r5
 80049ea:	42bb      	cmp	r3, r7
 80049ec:	460d      	mov	r5, r1
 80049ee:	d9f4      	bls.n	80049da <_printf_i+0x11a>
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d10b      	bne.n	8004a0c <_printf_i+0x14c>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	07df      	lsls	r7, r3, #31
 80049f8:	d508      	bpl.n	8004a0c <_printf_i+0x14c>
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	6861      	ldr	r1, [r4, #4]
 80049fe:	4299      	cmp	r1, r3
 8004a00:	bfde      	ittt	le
 8004a02:	2330      	movle	r3, #48	; 0x30
 8004a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a0c:	1b92      	subs	r2, r2, r6
 8004a0e:	6122      	str	r2, [r4, #16]
 8004a10:	f8cd a000 	str.w	sl, [sp]
 8004a14:	464b      	mov	r3, r9
 8004a16:	aa03      	add	r2, sp, #12
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	f7ff fee2 	bl	80047e4 <_printf_common>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d14c      	bne.n	8004abe <_printf_i+0x1fe>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	b004      	add	sp, #16
 8004a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2e:	4835      	ldr	r0, [pc, #212]	; (8004b04 <_printf_i+0x244>)
 8004a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	680e      	ldr	r6, [r1, #0]
 8004a38:	061f      	lsls	r7, r3, #24
 8004a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a3e:	600e      	str	r6, [r1, #0]
 8004a40:	d514      	bpl.n	8004a6c <_printf_i+0x1ac>
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	bf44      	itt	mi
 8004a46:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4a:	6023      	strmi	r3, [r4, #0]
 8004a4c:	b91d      	cbnz	r5, 8004a56 <_printf_i+0x196>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f023 0320 	bic.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	2310      	movs	r3, #16
 8004a58:	e7b0      	b.n	80049bc <_printf_i+0xfc>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f043 0320 	orr.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2378      	movs	r3, #120	; 0x78
 8004a64:	4828      	ldr	r0, [pc, #160]	; (8004b08 <_printf_i+0x248>)
 8004a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a6a:	e7e3      	b.n	8004a34 <_printf_i+0x174>
 8004a6c:	065e      	lsls	r6, r3, #25
 8004a6e:	bf48      	it	mi
 8004a70:	b2ad      	uxthmi	r5, r5
 8004a72:	e7e6      	b.n	8004a42 <_printf_i+0x182>
 8004a74:	4616      	mov	r6, r2
 8004a76:	e7bb      	b.n	80049f0 <_printf_i+0x130>
 8004a78:	680b      	ldr	r3, [r1, #0]
 8004a7a:	6826      	ldr	r6, [r4, #0]
 8004a7c:	6960      	ldr	r0, [r4, #20]
 8004a7e:	1d1d      	adds	r5, r3, #4
 8004a80:	600d      	str	r5, [r1, #0]
 8004a82:	0635      	lsls	r5, r6, #24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0x1cc>
 8004a88:	6018      	str	r0, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <_printf_i+0x1d2>
 8004a8c:	0671      	lsls	r1, r6, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0x1c8>
 8004a90:	8018      	strh	r0, [r3, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	4616      	mov	r6, r2
 8004a98:	e7ba      	b.n	8004a10 <_printf_i+0x150>
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	1d1a      	adds	r2, r3, #4
 8004a9e:	600a      	str	r2, [r1, #0]
 8004aa0:	681e      	ldr	r6, [r3, #0]
 8004aa2:	6862      	ldr	r2, [r4, #4]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7fb fb9a 	bl	80001e0 <memchr>
 8004aac:	b108      	cbz	r0, 8004ab2 <_printf_i+0x1f2>
 8004aae:	1b80      	subs	r0, r0, r6
 8004ab0:	6060      	str	r0, [r4, #4]
 8004ab2:	6863      	ldr	r3, [r4, #4]
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004abc:	e7a8      	b.n	8004a10 <_printf_i+0x150>
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	47d0      	blx	sl
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d0ab      	beq.n	8004a24 <_printf_i+0x164>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	079b      	lsls	r3, r3, #30
 8004ad0:	d413      	bmi.n	8004afa <_printf_i+0x23a>
 8004ad2:	68e0      	ldr	r0, [r4, #12]
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	4298      	cmp	r0, r3
 8004ad8:	bfb8      	it	lt
 8004ada:	4618      	movlt	r0, r3
 8004adc:	e7a4      	b.n	8004a28 <_printf_i+0x168>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	47d0      	blx	sl
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d09b      	beq.n	8004a24 <_printf_i+0x164>
 8004aec:	3501      	adds	r5, #1
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	9903      	ldr	r1, [sp, #12]
 8004af2:	1a5b      	subs	r3, r3, r1
 8004af4:	42ab      	cmp	r3, r5
 8004af6:	dcf2      	bgt.n	8004ade <_printf_i+0x21e>
 8004af8:	e7eb      	b.n	8004ad2 <_printf_i+0x212>
 8004afa:	2500      	movs	r5, #0
 8004afc:	f104 0619 	add.w	r6, r4, #25
 8004b00:	e7f5      	b.n	8004aee <_printf_i+0x22e>
 8004b02:	bf00      	nop
 8004b04:	08005dd1 	.word	0x08005dd1
 8004b08:	08005de2 	.word	0x08005de2

08004b0c <_vsiprintf_r>:
 8004b0c:	b500      	push	{lr}
 8004b0e:	b09b      	sub	sp, #108	; 0x6c
 8004b10:	9100      	str	r1, [sp, #0]
 8004b12:	9104      	str	r1, [sp, #16]
 8004b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b18:	9105      	str	r1, [sp, #20]
 8004b1a:	9102      	str	r1, [sp, #8]
 8004b1c:	4905      	ldr	r1, [pc, #20]	; (8004b34 <_vsiprintf_r+0x28>)
 8004b1e:	9103      	str	r1, [sp, #12]
 8004b20:	4669      	mov	r1, sp
 8004b22:	f000 fc3f 	bl	80053a4 <_svfiprintf_r>
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	b01b      	add	sp, #108	; 0x6c
 8004b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b32:	bf00      	nop
 8004b34:	ffff0208 	.word	0xffff0208

08004b38 <vsiprintf>:
 8004b38:	4613      	mov	r3, r2
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	4802      	ldr	r0, [pc, #8]	; (8004b48 <vsiprintf+0x10>)
 8004b40:	6800      	ldr	r0, [r0, #0]
 8004b42:	f7ff bfe3 	b.w	8004b0c <_vsiprintf_r>
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <__swbuf_r>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	460e      	mov	r6, r1
 8004b50:	4614      	mov	r4, r2
 8004b52:	4605      	mov	r5, r0
 8004b54:	b118      	cbz	r0, 8004b5e <__swbuf_r+0x12>
 8004b56:	6983      	ldr	r3, [r0, #24]
 8004b58:	b90b      	cbnz	r3, 8004b5e <__swbuf_r+0x12>
 8004b5a:	f000 f9d9 	bl	8004f10 <__sinit>
 8004b5e:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <__swbuf_r+0x98>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d12b      	bne.n	8004bbc <__swbuf_r+0x70>
 8004b64:	686c      	ldr	r4, [r5, #4]
 8004b66:	69a3      	ldr	r3, [r4, #24]
 8004b68:	60a3      	str	r3, [r4, #8]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	071a      	lsls	r2, r3, #28
 8004b6e:	d52f      	bpl.n	8004bd0 <__swbuf_r+0x84>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	b36b      	cbz	r3, 8004bd0 <__swbuf_r+0x84>
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	1ac0      	subs	r0, r0, r3
 8004b7a:	6963      	ldr	r3, [r4, #20]
 8004b7c:	b2f6      	uxtb	r6, r6
 8004b7e:	4283      	cmp	r3, r0
 8004b80:	4637      	mov	r7, r6
 8004b82:	dc04      	bgt.n	8004b8e <__swbuf_r+0x42>
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f92e 	bl	8004de8 <_fflush_r>
 8004b8c:	bb30      	cbnz	r0, 8004bdc <__swbuf_r+0x90>
 8004b8e:	68a3      	ldr	r3, [r4, #8]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	701e      	strb	r6, [r3, #0]
 8004b9c:	6963      	ldr	r3, [r4, #20]
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d004      	beq.n	8004bae <__swbuf_r+0x62>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	07db      	lsls	r3, r3, #31
 8004ba8:	d506      	bpl.n	8004bb8 <__swbuf_r+0x6c>
 8004baa:	2e0a      	cmp	r6, #10
 8004bac:	d104      	bne.n	8004bb8 <__swbuf_r+0x6c>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 f919 	bl	8004de8 <_fflush_r>
 8004bb6:	b988      	cbnz	r0, 8004bdc <__swbuf_r+0x90>
 8004bb8:	4638      	mov	r0, r7
 8004bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <__swbuf_r+0x9c>)
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	d101      	bne.n	8004bc6 <__swbuf_r+0x7a>
 8004bc2:	68ac      	ldr	r4, [r5, #8]
 8004bc4:	e7cf      	b.n	8004b66 <__swbuf_r+0x1a>
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <__swbuf_r+0xa0>)
 8004bc8:	429c      	cmp	r4, r3
 8004bca:	bf08      	it	eq
 8004bcc:	68ec      	ldreq	r4, [r5, #12]
 8004bce:	e7ca      	b.n	8004b66 <__swbuf_r+0x1a>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f000 f80c 	bl	8004bf0 <__swsetup_r>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d0cb      	beq.n	8004b74 <__swbuf_r+0x28>
 8004bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8004be0:	e7ea      	b.n	8004bb8 <__swbuf_r+0x6c>
 8004be2:	bf00      	nop
 8004be4:	08005e14 	.word	0x08005e14
 8004be8:	08005e34 	.word	0x08005e34
 8004bec:	08005df4 	.word	0x08005df4

08004bf0 <__swsetup_r>:
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <__swsetup_r+0xcc>)
 8004bf2:	b570      	push	{r4, r5, r6, lr}
 8004bf4:	681d      	ldr	r5, [r3, #0]
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	b125      	cbz	r5, 8004c06 <__swsetup_r+0x16>
 8004bfc:	69ab      	ldr	r3, [r5, #24]
 8004bfe:	b913      	cbnz	r3, 8004c06 <__swsetup_r+0x16>
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 f985 	bl	8004f10 <__sinit>
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <__swsetup_r+0xd0>)
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	d10f      	bne.n	8004c2c <__swsetup_r+0x3c>
 8004c0c:	686c      	ldr	r4, [r5, #4]
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c14:	0719      	lsls	r1, r3, #28
 8004c16:	d42c      	bmi.n	8004c72 <__swsetup_r+0x82>
 8004c18:	06dd      	lsls	r5, r3, #27
 8004c1a:	d411      	bmi.n	8004c40 <__swsetup_r+0x50>
 8004c1c:	2309      	movs	r3, #9
 8004c1e:	6033      	str	r3, [r6, #0]
 8004c20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	e03e      	b.n	8004caa <__swsetup_r+0xba>
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <__swsetup_r+0xd4>)
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d101      	bne.n	8004c36 <__swsetup_r+0x46>
 8004c32:	68ac      	ldr	r4, [r5, #8]
 8004c34:	e7eb      	b.n	8004c0e <__swsetup_r+0x1e>
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <__swsetup_r+0xd8>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	bf08      	it	eq
 8004c3c:	68ec      	ldreq	r4, [r5, #12]
 8004c3e:	e7e6      	b.n	8004c0e <__swsetup_r+0x1e>
 8004c40:	0758      	lsls	r0, r3, #29
 8004c42:	d512      	bpl.n	8004c6a <__swsetup_r+0x7a>
 8004c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c46:	b141      	cbz	r1, 8004c5a <__swsetup_r+0x6a>
 8004c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	d002      	beq.n	8004c56 <__swsetup_r+0x66>
 8004c50:	4630      	mov	r0, r6
 8004c52:	f000 fa7b 	bl	800514c <_free_r>
 8004c56:	2300      	movs	r3, #0
 8004c58:	6363      	str	r3, [r4, #52]	; 0x34
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c60:	81a3      	strh	r3, [r4, #12]
 8004c62:	2300      	movs	r3, #0
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0308 	orr.w	r3, r3, #8
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	b94b      	cbnz	r3, 8004c8a <__swsetup_r+0x9a>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c80:	d003      	beq.n	8004c8a <__swsetup_r+0x9a>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 fa07 	bl	8005098 <__smakebuf_r>
 8004c8a:	89a0      	ldrh	r0, [r4, #12]
 8004c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c90:	f010 0301 	ands.w	r3, r0, #1
 8004c94:	d00a      	beq.n	8004cac <__swsetup_r+0xbc>
 8004c96:	2300      	movs	r3, #0
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	6963      	ldr	r3, [r4, #20]
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	61a3      	str	r3, [r4, #24]
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	b943      	cbnz	r3, 8004cb6 <__swsetup_r+0xc6>
 8004ca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ca8:	d1ba      	bne.n	8004c20 <__swsetup_r+0x30>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	0781      	lsls	r1, r0, #30
 8004cae:	bf58      	it	pl
 8004cb0:	6963      	ldrpl	r3, [r4, #20]
 8004cb2:	60a3      	str	r3, [r4, #8]
 8004cb4:	e7f4      	b.n	8004ca0 <__swsetup_r+0xb0>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e7f7      	b.n	8004caa <__swsetup_r+0xba>
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	08005e14 	.word	0x08005e14
 8004cc4:	08005e34 	.word	0x08005e34
 8004cc8:	08005df4 	.word	0x08005df4

08004ccc <abort>:
 8004ccc:	b508      	push	{r3, lr}
 8004cce:	2006      	movs	r0, #6
 8004cd0:	f000 fca0 	bl	8005614 <raise>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fb fc65 	bl	80005a4 <_exit>
	...

08004cdc <__sflush_r>:
 8004cdc:	898a      	ldrh	r2, [r1, #12]
 8004cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	0710      	lsls	r0, r2, #28
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	d458      	bmi.n	8004d9c <__sflush_r+0xc0>
 8004cea:	684b      	ldr	r3, [r1, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dc05      	bgt.n	8004cfc <__sflush_r+0x20>
 8004cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dc02      	bgt.n	8004cfc <__sflush_r+0x20>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d0f9      	beq.n	8004cf6 <__sflush_r+0x1a>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d08:	682f      	ldr	r7, [r5, #0]
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	d032      	beq.n	8004d74 <__sflush_r+0x98>
 8004d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	075a      	lsls	r2, r3, #29
 8004d14:	d505      	bpl.n	8004d22 <__sflush_r+0x46>
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	1ac0      	subs	r0, r0, r3
 8004d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d1c:	b10b      	cbz	r3, 8004d22 <__sflush_r+0x46>
 8004d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d20:	1ac0      	subs	r0, r0, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	4602      	mov	r2, r0
 8004d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d28:	6a21      	ldr	r1, [r4, #32]
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	47b0      	blx	r6
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	d106      	bne.n	8004d42 <__sflush_r+0x66>
 8004d34:	6829      	ldr	r1, [r5, #0]
 8004d36:	291d      	cmp	r1, #29
 8004d38:	d82c      	bhi.n	8004d94 <__sflush_r+0xb8>
 8004d3a:	4a2a      	ldr	r2, [pc, #168]	; (8004de4 <__sflush_r+0x108>)
 8004d3c:	40ca      	lsrs	r2, r1
 8004d3e:	07d6      	lsls	r6, r2, #31
 8004d40:	d528      	bpl.n	8004d94 <__sflush_r+0xb8>
 8004d42:	2200      	movs	r2, #0
 8004d44:	6062      	str	r2, [r4, #4]
 8004d46:	04d9      	lsls	r1, r3, #19
 8004d48:	6922      	ldr	r2, [r4, #16]
 8004d4a:	6022      	str	r2, [r4, #0]
 8004d4c:	d504      	bpl.n	8004d58 <__sflush_r+0x7c>
 8004d4e:	1c42      	adds	r2, r0, #1
 8004d50:	d101      	bne.n	8004d56 <__sflush_r+0x7a>
 8004d52:	682b      	ldr	r3, [r5, #0]
 8004d54:	b903      	cbnz	r3, 8004d58 <__sflush_r+0x7c>
 8004d56:	6560      	str	r0, [r4, #84]	; 0x54
 8004d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d5a:	602f      	str	r7, [r5, #0]
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	d0ca      	beq.n	8004cf6 <__sflush_r+0x1a>
 8004d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d64:	4299      	cmp	r1, r3
 8004d66:	d002      	beq.n	8004d6e <__sflush_r+0x92>
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f000 f9ef 	bl	800514c <_free_r>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	6360      	str	r0, [r4, #52]	; 0x34
 8004d72:	e7c1      	b.n	8004cf8 <__sflush_r+0x1c>
 8004d74:	6a21      	ldr	r1, [r4, #32]
 8004d76:	2301      	movs	r3, #1
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b0      	blx	r6
 8004d7c:	1c41      	adds	r1, r0, #1
 8004d7e:	d1c7      	bne.n	8004d10 <__sflush_r+0x34>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0c4      	beq.n	8004d10 <__sflush_r+0x34>
 8004d86:	2b1d      	cmp	r3, #29
 8004d88:	d001      	beq.n	8004d8e <__sflush_r+0xb2>
 8004d8a:	2b16      	cmp	r3, #22
 8004d8c:	d101      	bne.n	8004d92 <__sflush_r+0xb6>
 8004d8e:	602f      	str	r7, [r5, #0]
 8004d90:	e7b1      	b.n	8004cf6 <__sflush_r+0x1a>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e7ad      	b.n	8004cf8 <__sflush_r+0x1c>
 8004d9c:	690f      	ldr	r7, [r1, #16]
 8004d9e:	2f00      	cmp	r7, #0
 8004da0:	d0a9      	beq.n	8004cf6 <__sflush_r+0x1a>
 8004da2:	0793      	lsls	r3, r2, #30
 8004da4:	680e      	ldr	r6, [r1, #0]
 8004da6:	bf08      	it	eq
 8004da8:	694b      	ldreq	r3, [r1, #20]
 8004daa:	600f      	str	r7, [r1, #0]
 8004dac:	bf18      	it	ne
 8004dae:	2300      	movne	r3, #0
 8004db0:	eba6 0807 	sub.w	r8, r6, r7
 8004db4:	608b      	str	r3, [r1, #8]
 8004db6:	f1b8 0f00 	cmp.w	r8, #0
 8004dba:	dd9c      	ble.n	8004cf6 <__sflush_r+0x1a>
 8004dbc:	6a21      	ldr	r1, [r4, #32]
 8004dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	463a      	mov	r2, r7
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b0      	blx	r6
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	dc06      	bgt.n	8004dda <__sflush_r+0xfe>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	e78e      	b.n	8004cf8 <__sflush_r+0x1c>
 8004dda:	4407      	add	r7, r0
 8004ddc:	eba8 0800 	sub.w	r8, r8, r0
 8004de0:	e7e9      	b.n	8004db6 <__sflush_r+0xda>
 8004de2:	bf00      	nop
 8004de4:	20400001 	.word	0x20400001

08004de8 <_fflush_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	4605      	mov	r5, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	b913      	cbnz	r3, 8004df8 <_fflush_r+0x10>
 8004df2:	2500      	movs	r5, #0
 8004df4:	4628      	mov	r0, r5
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	b118      	cbz	r0, 8004e02 <_fflush_r+0x1a>
 8004dfa:	6983      	ldr	r3, [r0, #24]
 8004dfc:	b90b      	cbnz	r3, 8004e02 <_fflush_r+0x1a>
 8004dfe:	f000 f887 	bl	8004f10 <__sinit>
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <_fflush_r+0x6c>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	d11b      	bne.n	8004e40 <_fflush_r+0x58>
 8004e08:	686c      	ldr	r4, [r5, #4]
 8004e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ef      	beq.n	8004df2 <_fflush_r+0xa>
 8004e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e14:	07d0      	lsls	r0, r2, #31
 8004e16:	d404      	bmi.n	8004e22 <_fflush_r+0x3a>
 8004e18:	0599      	lsls	r1, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_fflush_r+0x3a>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1e:	f000 f915 	bl	800504c <__retarget_lock_acquire_recursive>
 8004e22:	4628      	mov	r0, r5
 8004e24:	4621      	mov	r1, r4
 8004e26:	f7ff ff59 	bl	8004cdc <__sflush_r>
 8004e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e2c:	07da      	lsls	r2, r3, #31
 8004e2e:	4605      	mov	r5, r0
 8004e30:	d4e0      	bmi.n	8004df4 <_fflush_r+0xc>
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	059b      	lsls	r3, r3, #22
 8004e36:	d4dd      	bmi.n	8004df4 <_fflush_r+0xc>
 8004e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3a:	f000 f908 	bl	800504e <__retarget_lock_release_recursive>
 8004e3e:	e7d9      	b.n	8004df4 <_fflush_r+0xc>
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <_fflush_r+0x70>)
 8004e42:	429c      	cmp	r4, r3
 8004e44:	d101      	bne.n	8004e4a <_fflush_r+0x62>
 8004e46:	68ac      	ldr	r4, [r5, #8]
 8004e48:	e7df      	b.n	8004e0a <_fflush_r+0x22>
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <_fflush_r+0x74>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	bf08      	it	eq
 8004e50:	68ec      	ldreq	r4, [r5, #12]
 8004e52:	e7da      	b.n	8004e0a <_fflush_r+0x22>
 8004e54:	08005e14 	.word	0x08005e14
 8004e58:	08005e34 	.word	0x08005e34
 8004e5c:	08005df4 	.word	0x08005df4

08004e60 <std>:
 8004e60:	2300      	movs	r3, #0
 8004e62:	b510      	push	{r4, lr}
 8004e64:	4604      	mov	r4, r0
 8004e66:	e9c0 3300 	strd	r3, r3, [r0]
 8004e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e6e:	6083      	str	r3, [r0, #8]
 8004e70:	8181      	strh	r1, [r0, #12]
 8004e72:	6643      	str	r3, [r0, #100]	; 0x64
 8004e74:	81c2      	strh	r2, [r0, #14]
 8004e76:	6183      	str	r3, [r0, #24]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	305c      	adds	r0, #92	; 0x5c
 8004e7e:	f7ff fb4f 	bl	8004520 <memset>
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <std+0x38>)
 8004e84:	6263      	str	r3, [r4, #36]	; 0x24
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x3c>)
 8004e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <std+0x40>)
 8004e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x44>)
 8004e90:	6224      	str	r4, [r4, #32]
 8004e92:	6323      	str	r3, [r4, #48]	; 0x30
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	bf00      	nop
 8004e98:	0800564d 	.word	0x0800564d
 8004e9c:	0800566f 	.word	0x0800566f
 8004ea0:	080056a7 	.word	0x080056a7
 8004ea4:	080056cb 	.word	0x080056cb

08004ea8 <_cleanup_r>:
 8004ea8:	4901      	ldr	r1, [pc, #4]	; (8004eb0 <_cleanup_r+0x8>)
 8004eaa:	f000 b8af 	b.w	800500c <_fwalk_reent>
 8004eae:	bf00      	nop
 8004eb0:	08004de9 	.word	0x08004de9

08004eb4 <__sfmoreglue>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	1e4a      	subs	r2, r1, #1
 8004eb8:	2568      	movs	r5, #104	; 0x68
 8004eba:	4355      	muls	r5, r2
 8004ebc:	460e      	mov	r6, r1
 8004ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ec2:	f000 f993 	bl	80051ec <_malloc_r>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	b140      	cbz	r0, 8004edc <__sfmoreglue+0x28>
 8004eca:	2100      	movs	r1, #0
 8004ecc:	e9c0 1600 	strd	r1, r6, [r0]
 8004ed0:	300c      	adds	r0, #12
 8004ed2:	60a0      	str	r0, [r4, #8]
 8004ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ed8:	f7ff fb22 	bl	8004520 <memset>
 8004edc:	4620      	mov	r0, r4
 8004ede:	bd70      	pop	{r4, r5, r6, pc}

08004ee0 <__sfp_lock_acquire>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	; (8004ee8 <__sfp_lock_acquire+0x8>)
 8004ee2:	f000 b8b3 	b.w	800504c <__retarget_lock_acquire_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	200006b8 	.word	0x200006b8

08004eec <__sfp_lock_release>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__sfp_lock_release+0x8>)
 8004eee:	f000 b8ae 	b.w	800504e <__retarget_lock_release_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	200006b8 	.word	0x200006b8

08004ef8 <__sinit_lock_acquire>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__sinit_lock_acquire+0x8>)
 8004efa:	f000 b8a7 	b.w	800504c <__retarget_lock_acquire_recursive>
 8004efe:	bf00      	nop
 8004f00:	200006b3 	.word	0x200006b3

08004f04 <__sinit_lock_release>:
 8004f04:	4801      	ldr	r0, [pc, #4]	; (8004f0c <__sinit_lock_release+0x8>)
 8004f06:	f000 b8a2 	b.w	800504e <__retarget_lock_release_recursive>
 8004f0a:	bf00      	nop
 8004f0c:	200006b3 	.word	0x200006b3

08004f10 <__sinit>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	4604      	mov	r4, r0
 8004f14:	f7ff fff0 	bl	8004ef8 <__sinit_lock_acquire>
 8004f18:	69a3      	ldr	r3, [r4, #24]
 8004f1a:	b11b      	cbz	r3, 8004f24 <__sinit+0x14>
 8004f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f20:	f7ff bff0 	b.w	8004f04 <__sinit_lock_release>
 8004f24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f28:	6523      	str	r3, [r4, #80]	; 0x50
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <__sinit+0x68>)
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <__sinit+0x6c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	bf04      	itt	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	61a3      	streq	r3, [r4, #24]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f000 f820 	bl	8004f80 <__sfp>
 8004f40:	6060      	str	r0, [r4, #4]
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 f81c 	bl	8004f80 <__sfp>
 8004f48:	60a0      	str	r0, [r4, #8]
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f818 	bl	8004f80 <__sfp>
 8004f50:	2200      	movs	r2, #0
 8004f52:	60e0      	str	r0, [r4, #12]
 8004f54:	2104      	movs	r1, #4
 8004f56:	6860      	ldr	r0, [r4, #4]
 8004f58:	f7ff ff82 	bl	8004e60 <std>
 8004f5c:	68a0      	ldr	r0, [r4, #8]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	2109      	movs	r1, #9
 8004f62:	f7ff ff7d 	bl	8004e60 <std>
 8004f66:	68e0      	ldr	r0, [r4, #12]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	2112      	movs	r1, #18
 8004f6c:	f7ff ff78 	bl	8004e60 <std>
 8004f70:	2301      	movs	r3, #1
 8004f72:	61a3      	str	r3, [r4, #24]
 8004f74:	e7d2      	b.n	8004f1c <__sinit+0xc>
 8004f76:	bf00      	nop
 8004f78:	08005dbc 	.word	0x08005dbc
 8004f7c:	08004ea9 	.word	0x08004ea9

08004f80 <__sfp>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	4607      	mov	r7, r0
 8004f84:	f7ff ffac 	bl	8004ee0 <__sfp_lock_acquire>
 8004f88:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <__sfp+0x84>)
 8004f8a:	681e      	ldr	r6, [r3, #0]
 8004f8c:	69b3      	ldr	r3, [r6, #24]
 8004f8e:	b913      	cbnz	r3, 8004f96 <__sfp+0x16>
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7ff ffbd 	bl	8004f10 <__sinit>
 8004f96:	3648      	adds	r6, #72	; 0x48
 8004f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	d503      	bpl.n	8004fa8 <__sfp+0x28>
 8004fa0:	6833      	ldr	r3, [r6, #0]
 8004fa2:	b30b      	cbz	r3, 8004fe8 <__sfp+0x68>
 8004fa4:	6836      	ldr	r6, [r6, #0]
 8004fa6:	e7f7      	b.n	8004f98 <__sfp+0x18>
 8004fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fac:	b9d5      	cbnz	r5, 8004fe4 <__sfp+0x64>
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <__sfp+0x88>)
 8004fb0:	60e3      	str	r3, [r4, #12]
 8004fb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fb6:	6665      	str	r5, [r4, #100]	; 0x64
 8004fb8:	f000 f847 	bl	800504a <__retarget_lock_init_recursive>
 8004fbc:	f7ff ff96 	bl	8004eec <__sfp_lock_release>
 8004fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fc8:	6025      	str	r5, [r4, #0]
 8004fca:	61a5      	str	r5, [r4, #24]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fd4:	f7ff faa4 	bl	8004520 <memset>
 8004fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe4:	3468      	adds	r4, #104	; 0x68
 8004fe6:	e7d9      	b.n	8004f9c <__sfp+0x1c>
 8004fe8:	2104      	movs	r1, #4
 8004fea:	4638      	mov	r0, r7
 8004fec:	f7ff ff62 	bl	8004eb4 <__sfmoreglue>
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	6030      	str	r0, [r6, #0]
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d1d5      	bne.n	8004fa4 <__sfp+0x24>
 8004ff8:	f7ff ff78 	bl	8004eec <__sfp_lock_release>
 8004ffc:	230c      	movs	r3, #12
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	e7ee      	b.n	8004fe0 <__sfp+0x60>
 8005002:	bf00      	nop
 8005004:	08005dbc 	.word	0x08005dbc
 8005008:	ffff0001 	.word	0xffff0001

0800500c <_fwalk_reent>:
 800500c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005010:	4606      	mov	r6, r0
 8005012:	4688      	mov	r8, r1
 8005014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005018:	2700      	movs	r7, #0
 800501a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800501e:	f1b9 0901 	subs.w	r9, r9, #1
 8005022:	d505      	bpl.n	8005030 <_fwalk_reent+0x24>
 8005024:	6824      	ldr	r4, [r4, #0]
 8005026:	2c00      	cmp	r4, #0
 8005028:	d1f7      	bne.n	800501a <_fwalk_reent+0xe>
 800502a:	4638      	mov	r0, r7
 800502c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005030:	89ab      	ldrh	r3, [r5, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d907      	bls.n	8005046 <_fwalk_reent+0x3a>
 8005036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800503a:	3301      	adds	r3, #1
 800503c:	d003      	beq.n	8005046 <_fwalk_reent+0x3a>
 800503e:	4629      	mov	r1, r5
 8005040:	4630      	mov	r0, r6
 8005042:	47c0      	blx	r8
 8005044:	4307      	orrs	r7, r0
 8005046:	3568      	adds	r5, #104	; 0x68
 8005048:	e7e9      	b.n	800501e <_fwalk_reent+0x12>

0800504a <__retarget_lock_init_recursive>:
 800504a:	4770      	bx	lr

0800504c <__retarget_lock_acquire_recursive>:
 800504c:	4770      	bx	lr

0800504e <__retarget_lock_release_recursive>:
 800504e:	4770      	bx	lr

08005050 <__swhatbuf_r>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	460e      	mov	r6, r1
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	2900      	cmp	r1, #0
 800505a:	b096      	sub	sp, #88	; 0x58
 800505c:	4614      	mov	r4, r2
 800505e:	461d      	mov	r5, r3
 8005060:	da07      	bge.n	8005072 <__swhatbuf_r+0x22>
 8005062:	2300      	movs	r3, #0
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	89b3      	ldrh	r3, [r6, #12]
 8005068:	061a      	lsls	r2, r3, #24
 800506a:	d410      	bmi.n	800508e <__swhatbuf_r+0x3e>
 800506c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005070:	e00e      	b.n	8005090 <__swhatbuf_r+0x40>
 8005072:	466a      	mov	r2, sp
 8005074:	f000 fb50 	bl	8005718 <_fstat_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	dbf2      	blt.n	8005062 <__swhatbuf_r+0x12>
 800507c:	9a01      	ldr	r2, [sp, #4]
 800507e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005082:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005086:	425a      	negs	r2, r3
 8005088:	415a      	adcs	r2, r3
 800508a:	602a      	str	r2, [r5, #0]
 800508c:	e7ee      	b.n	800506c <__swhatbuf_r+0x1c>
 800508e:	2340      	movs	r3, #64	; 0x40
 8005090:	2000      	movs	r0, #0
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	b016      	add	sp, #88	; 0x58
 8005096:	bd70      	pop	{r4, r5, r6, pc}

08005098 <__smakebuf_r>:
 8005098:	898b      	ldrh	r3, [r1, #12]
 800509a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800509c:	079d      	lsls	r5, r3, #30
 800509e:	4606      	mov	r6, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	d507      	bpl.n	80050b4 <__smakebuf_r+0x1c>
 80050a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	2301      	movs	r3, #1
 80050ae:	6163      	str	r3, [r4, #20]
 80050b0:	b002      	add	sp, #8
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	ab01      	add	r3, sp, #4
 80050b6:	466a      	mov	r2, sp
 80050b8:	f7ff ffca 	bl	8005050 <__swhatbuf_r>
 80050bc:	9900      	ldr	r1, [sp, #0]
 80050be:	4605      	mov	r5, r0
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f893 	bl	80051ec <_malloc_r>
 80050c6:	b948      	cbnz	r0, 80050dc <__smakebuf_r+0x44>
 80050c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050cc:	059a      	lsls	r2, r3, #22
 80050ce:	d4ef      	bmi.n	80050b0 <__smakebuf_r+0x18>
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	f043 0302 	orr.w	r3, r3, #2
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	e7e3      	b.n	80050a4 <__smakebuf_r+0xc>
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <__smakebuf_r+0x7c>)
 80050de:	62b3      	str	r3, [r6, #40]	; 0x28
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	6020      	str	r0, [r4, #0]
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	9b00      	ldr	r3, [sp, #0]
 80050ec:	6163      	str	r3, [r4, #20]
 80050ee:	9b01      	ldr	r3, [sp, #4]
 80050f0:	6120      	str	r0, [r4, #16]
 80050f2:	b15b      	cbz	r3, 800510c <__smakebuf_r+0x74>
 80050f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 fb1f 	bl	800573c <_isatty_r>
 80050fe:	b128      	cbz	r0, 800510c <__smakebuf_r+0x74>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	89a0      	ldrh	r0, [r4, #12]
 800510e:	4305      	orrs	r5, r0
 8005110:	81a5      	strh	r5, [r4, #12]
 8005112:	e7cd      	b.n	80050b0 <__smakebuf_r+0x18>
 8005114:	08004ea9 	.word	0x08004ea9

08005118 <memmove>:
 8005118:	4288      	cmp	r0, r1
 800511a:	b510      	push	{r4, lr}
 800511c:	eb01 0402 	add.w	r4, r1, r2
 8005120:	d902      	bls.n	8005128 <memmove+0x10>
 8005122:	4284      	cmp	r4, r0
 8005124:	4623      	mov	r3, r4
 8005126:	d807      	bhi.n	8005138 <memmove+0x20>
 8005128:	1e43      	subs	r3, r0, #1
 800512a:	42a1      	cmp	r1, r4
 800512c:	d008      	beq.n	8005140 <memmove+0x28>
 800512e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005136:	e7f8      	b.n	800512a <memmove+0x12>
 8005138:	4402      	add	r2, r0
 800513a:	4601      	mov	r1, r0
 800513c:	428a      	cmp	r2, r1
 800513e:	d100      	bne.n	8005142 <memmove+0x2a>
 8005140:	bd10      	pop	{r4, pc}
 8005142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800514a:	e7f7      	b.n	800513c <memmove+0x24>

0800514c <_free_r>:
 800514c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800514e:	2900      	cmp	r1, #0
 8005150:	d048      	beq.n	80051e4 <_free_r+0x98>
 8005152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005156:	9001      	str	r0, [sp, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f1a1 0404 	sub.w	r4, r1, #4
 800515e:	bfb8      	it	lt
 8005160:	18e4      	addlt	r4, r4, r3
 8005162:	f000 fb0d 	bl	8005780 <__malloc_lock>
 8005166:	4a20      	ldr	r2, [pc, #128]	; (80051e8 <_free_r+0x9c>)
 8005168:	9801      	ldr	r0, [sp, #4]
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	4615      	mov	r5, r2
 800516e:	b933      	cbnz	r3, 800517e <_free_r+0x32>
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	6014      	str	r4, [r2, #0]
 8005174:	b003      	add	sp, #12
 8005176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800517a:	f000 bb07 	b.w	800578c <__malloc_unlock>
 800517e:	42a3      	cmp	r3, r4
 8005180:	d90b      	bls.n	800519a <_free_r+0x4e>
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	1862      	adds	r2, r4, r1
 8005186:	4293      	cmp	r3, r2
 8005188:	bf04      	itt	eq
 800518a:	681a      	ldreq	r2, [r3, #0]
 800518c:	685b      	ldreq	r3, [r3, #4]
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	bf04      	itt	eq
 8005192:	1852      	addeq	r2, r2, r1
 8005194:	6022      	streq	r2, [r4, #0]
 8005196:	602c      	str	r4, [r5, #0]
 8005198:	e7ec      	b.n	8005174 <_free_r+0x28>
 800519a:	461a      	mov	r2, r3
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	b10b      	cbz	r3, 80051a4 <_free_r+0x58>
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	d9fa      	bls.n	800519a <_free_r+0x4e>
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	1855      	adds	r5, r2, r1
 80051a8:	42a5      	cmp	r5, r4
 80051aa:	d10b      	bne.n	80051c4 <_free_r+0x78>
 80051ac:	6824      	ldr	r4, [r4, #0]
 80051ae:	4421      	add	r1, r4
 80051b0:	1854      	adds	r4, r2, r1
 80051b2:	42a3      	cmp	r3, r4
 80051b4:	6011      	str	r1, [r2, #0]
 80051b6:	d1dd      	bne.n	8005174 <_free_r+0x28>
 80051b8:	681c      	ldr	r4, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	6053      	str	r3, [r2, #4]
 80051be:	4421      	add	r1, r4
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	e7d7      	b.n	8005174 <_free_r+0x28>
 80051c4:	d902      	bls.n	80051cc <_free_r+0x80>
 80051c6:	230c      	movs	r3, #12
 80051c8:	6003      	str	r3, [r0, #0]
 80051ca:	e7d3      	b.n	8005174 <_free_r+0x28>
 80051cc:	6825      	ldr	r5, [r4, #0]
 80051ce:	1961      	adds	r1, r4, r5
 80051d0:	428b      	cmp	r3, r1
 80051d2:	bf04      	itt	eq
 80051d4:	6819      	ldreq	r1, [r3, #0]
 80051d6:	685b      	ldreq	r3, [r3, #4]
 80051d8:	6063      	str	r3, [r4, #4]
 80051da:	bf04      	itt	eq
 80051dc:	1949      	addeq	r1, r1, r5
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	6054      	str	r4, [r2, #4]
 80051e2:	e7c7      	b.n	8005174 <_free_r+0x28>
 80051e4:	b003      	add	sp, #12
 80051e6:	bd30      	pop	{r4, r5, pc}
 80051e8:	200005a0 	.word	0x200005a0

080051ec <_malloc_r>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	1ccd      	adds	r5, r1, #3
 80051f0:	f025 0503 	bic.w	r5, r5, #3
 80051f4:	3508      	adds	r5, #8
 80051f6:	2d0c      	cmp	r5, #12
 80051f8:	bf38      	it	cc
 80051fa:	250c      	movcc	r5, #12
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	4606      	mov	r6, r0
 8005200:	db01      	blt.n	8005206 <_malloc_r+0x1a>
 8005202:	42a9      	cmp	r1, r5
 8005204:	d903      	bls.n	800520e <_malloc_r+0x22>
 8005206:	230c      	movs	r3, #12
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	2000      	movs	r0, #0
 800520c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520e:	f000 fab7 	bl	8005780 <__malloc_lock>
 8005212:	4921      	ldr	r1, [pc, #132]	; (8005298 <_malloc_r+0xac>)
 8005214:	680a      	ldr	r2, [r1, #0]
 8005216:	4614      	mov	r4, r2
 8005218:	b99c      	cbnz	r4, 8005242 <_malloc_r+0x56>
 800521a:	4f20      	ldr	r7, [pc, #128]	; (800529c <_malloc_r+0xb0>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	b923      	cbnz	r3, 800522a <_malloc_r+0x3e>
 8005220:	4621      	mov	r1, r4
 8005222:	4630      	mov	r0, r6
 8005224:	f000 f9be 	bl	80055a4 <_sbrk_r>
 8005228:	6038      	str	r0, [r7, #0]
 800522a:	4629      	mov	r1, r5
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f9b9 	bl	80055a4 <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d123      	bne.n	800527e <_malloc_r+0x92>
 8005236:	230c      	movs	r3, #12
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	4630      	mov	r0, r6
 800523c:	f000 faa6 	bl	800578c <__malloc_unlock>
 8005240:	e7e3      	b.n	800520a <_malloc_r+0x1e>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	1b5b      	subs	r3, r3, r5
 8005246:	d417      	bmi.n	8005278 <_malloc_r+0x8c>
 8005248:	2b0b      	cmp	r3, #11
 800524a:	d903      	bls.n	8005254 <_malloc_r+0x68>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	441c      	add	r4, r3
 8005250:	6025      	str	r5, [r4, #0]
 8005252:	e004      	b.n	800525e <_malloc_r+0x72>
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	42a2      	cmp	r2, r4
 8005258:	bf0c      	ite	eq
 800525a:	600b      	streq	r3, [r1, #0]
 800525c:	6053      	strne	r3, [r2, #4]
 800525e:	4630      	mov	r0, r6
 8005260:	f000 fa94 	bl	800578c <__malloc_unlock>
 8005264:	f104 000b 	add.w	r0, r4, #11
 8005268:	1d23      	adds	r3, r4, #4
 800526a:	f020 0007 	bic.w	r0, r0, #7
 800526e:	1ac2      	subs	r2, r0, r3
 8005270:	d0cc      	beq.n	800520c <_malloc_r+0x20>
 8005272:	1a1b      	subs	r3, r3, r0
 8005274:	50a3      	str	r3, [r4, r2]
 8005276:	e7c9      	b.n	800520c <_malloc_r+0x20>
 8005278:	4622      	mov	r2, r4
 800527a:	6864      	ldr	r4, [r4, #4]
 800527c:	e7cc      	b.n	8005218 <_malloc_r+0x2c>
 800527e:	1cc4      	adds	r4, r0, #3
 8005280:	f024 0403 	bic.w	r4, r4, #3
 8005284:	42a0      	cmp	r0, r4
 8005286:	d0e3      	beq.n	8005250 <_malloc_r+0x64>
 8005288:	1a21      	subs	r1, r4, r0
 800528a:	4630      	mov	r0, r6
 800528c:	f000 f98a 	bl	80055a4 <_sbrk_r>
 8005290:	3001      	adds	r0, #1
 8005292:	d1dd      	bne.n	8005250 <_malloc_r+0x64>
 8005294:	e7cf      	b.n	8005236 <_malloc_r+0x4a>
 8005296:	bf00      	nop
 8005298:	200005a0 	.word	0x200005a0
 800529c:	200005a4 	.word	0x200005a4

080052a0 <_realloc_r>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	4607      	mov	r7, r0
 80052a4:	4614      	mov	r4, r2
 80052a6:	460e      	mov	r6, r1
 80052a8:	b921      	cbnz	r1, 80052b4 <_realloc_r+0x14>
 80052aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052ae:	4611      	mov	r1, r2
 80052b0:	f7ff bf9c 	b.w	80051ec <_malloc_r>
 80052b4:	b922      	cbnz	r2, 80052c0 <_realloc_r+0x20>
 80052b6:	f7ff ff49 	bl	800514c <_free_r>
 80052ba:	4625      	mov	r5, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c0:	f000 fa6a 	bl	8005798 <_malloc_usable_size_r>
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d20f      	bcs.n	80052e8 <_realloc_r+0x48>
 80052c8:	4621      	mov	r1, r4
 80052ca:	4638      	mov	r0, r7
 80052cc:	f7ff ff8e 	bl	80051ec <_malloc_r>
 80052d0:	4605      	mov	r5, r0
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d0f2      	beq.n	80052bc <_realloc_r+0x1c>
 80052d6:	4631      	mov	r1, r6
 80052d8:	4622      	mov	r2, r4
 80052da:	f7ff f913 	bl	8004504 <memcpy>
 80052de:	4631      	mov	r1, r6
 80052e0:	4638      	mov	r0, r7
 80052e2:	f7ff ff33 	bl	800514c <_free_r>
 80052e6:	e7e9      	b.n	80052bc <_realloc_r+0x1c>
 80052e8:	4635      	mov	r5, r6
 80052ea:	e7e7      	b.n	80052bc <_realloc_r+0x1c>

080052ec <__ssputs_r>:
 80052ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	688e      	ldr	r6, [r1, #8]
 80052f2:	429e      	cmp	r6, r3
 80052f4:	4682      	mov	sl, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4690      	mov	r8, r2
 80052fa:	461f      	mov	r7, r3
 80052fc:	d838      	bhi.n	8005370 <__ssputs_r+0x84>
 80052fe:	898a      	ldrh	r2, [r1, #12]
 8005300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005304:	d032      	beq.n	800536c <__ssputs_r+0x80>
 8005306:	6825      	ldr	r5, [r4, #0]
 8005308:	6909      	ldr	r1, [r1, #16]
 800530a:	eba5 0901 	sub.w	r9, r5, r1
 800530e:	6965      	ldr	r5, [r4, #20]
 8005310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005318:	3301      	adds	r3, #1
 800531a:	444b      	add	r3, r9
 800531c:	106d      	asrs	r5, r5, #1
 800531e:	429d      	cmp	r5, r3
 8005320:	bf38      	it	cc
 8005322:	461d      	movcc	r5, r3
 8005324:	0553      	lsls	r3, r2, #21
 8005326:	d531      	bpl.n	800538c <__ssputs_r+0xa0>
 8005328:	4629      	mov	r1, r5
 800532a:	f7ff ff5f 	bl	80051ec <_malloc_r>
 800532e:	4606      	mov	r6, r0
 8005330:	b950      	cbnz	r0, 8005348 <__ssputs_r+0x5c>
 8005332:	230c      	movs	r3, #12
 8005334:	f8ca 3000 	str.w	r3, [sl]
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533e:	81a3      	strh	r3, [r4, #12]
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005348:	6921      	ldr	r1, [r4, #16]
 800534a:	464a      	mov	r2, r9
 800534c:	f7ff f8da 	bl	8004504 <memcpy>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	6126      	str	r6, [r4, #16]
 800535e:	6165      	str	r5, [r4, #20]
 8005360:	444e      	add	r6, r9
 8005362:	eba5 0509 	sub.w	r5, r5, r9
 8005366:	6026      	str	r6, [r4, #0]
 8005368:	60a5      	str	r5, [r4, #8]
 800536a:	463e      	mov	r6, r7
 800536c:	42be      	cmp	r6, r7
 800536e:	d900      	bls.n	8005372 <__ssputs_r+0x86>
 8005370:	463e      	mov	r6, r7
 8005372:	4632      	mov	r2, r6
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	4641      	mov	r1, r8
 8005378:	f7ff fece 	bl	8005118 <memmove>
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	1b9b      	subs	r3, r3, r6
 8005382:	4432      	add	r2, r6
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	6022      	str	r2, [r4, #0]
 8005388:	2000      	movs	r0, #0
 800538a:	e7db      	b.n	8005344 <__ssputs_r+0x58>
 800538c:	462a      	mov	r2, r5
 800538e:	f7ff ff87 	bl	80052a0 <_realloc_r>
 8005392:	4606      	mov	r6, r0
 8005394:	2800      	cmp	r0, #0
 8005396:	d1e1      	bne.n	800535c <__ssputs_r+0x70>
 8005398:	6921      	ldr	r1, [r4, #16]
 800539a:	4650      	mov	r0, sl
 800539c:	f7ff fed6 	bl	800514c <_free_r>
 80053a0:	e7c7      	b.n	8005332 <__ssputs_r+0x46>
	...

080053a4 <_svfiprintf_r>:
 80053a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a8:	4698      	mov	r8, r3
 80053aa:	898b      	ldrh	r3, [r1, #12]
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	b09d      	sub	sp, #116	; 0x74
 80053b0:	4607      	mov	r7, r0
 80053b2:	460d      	mov	r5, r1
 80053b4:	4614      	mov	r4, r2
 80053b6:	d50e      	bpl.n	80053d6 <_svfiprintf_r+0x32>
 80053b8:	690b      	ldr	r3, [r1, #16]
 80053ba:	b963      	cbnz	r3, 80053d6 <_svfiprintf_r+0x32>
 80053bc:	2140      	movs	r1, #64	; 0x40
 80053be:	f7ff ff15 	bl	80051ec <_malloc_r>
 80053c2:	6028      	str	r0, [r5, #0]
 80053c4:	6128      	str	r0, [r5, #16]
 80053c6:	b920      	cbnz	r0, 80053d2 <_svfiprintf_r+0x2e>
 80053c8:	230c      	movs	r3, #12
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	e0d1      	b.n	8005576 <_svfiprintf_r+0x1d2>
 80053d2:	2340      	movs	r3, #64	; 0x40
 80053d4:	616b      	str	r3, [r5, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9309      	str	r3, [sp, #36]	; 0x24
 80053da:	2320      	movs	r3, #32
 80053dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053e4:	2330      	movs	r3, #48	; 0x30
 80053e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005590 <_svfiprintf_r+0x1ec>
 80053ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ee:	f04f 0901 	mov.w	r9, #1
 80053f2:	4623      	mov	r3, r4
 80053f4:	469a      	mov	sl, r3
 80053f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053fa:	b10a      	cbz	r2, 8005400 <_svfiprintf_r+0x5c>
 80053fc:	2a25      	cmp	r2, #37	; 0x25
 80053fe:	d1f9      	bne.n	80053f4 <_svfiprintf_r+0x50>
 8005400:	ebba 0b04 	subs.w	fp, sl, r4
 8005404:	d00b      	beq.n	800541e <_svfiprintf_r+0x7a>
 8005406:	465b      	mov	r3, fp
 8005408:	4622      	mov	r2, r4
 800540a:	4629      	mov	r1, r5
 800540c:	4638      	mov	r0, r7
 800540e:	f7ff ff6d 	bl	80052ec <__ssputs_r>
 8005412:	3001      	adds	r0, #1
 8005414:	f000 80aa 	beq.w	800556c <_svfiprintf_r+0x1c8>
 8005418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800541a:	445a      	add	r2, fp
 800541c:	9209      	str	r2, [sp, #36]	; 0x24
 800541e:	f89a 3000 	ldrb.w	r3, [sl]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80a2 	beq.w	800556c <_svfiprintf_r+0x1c8>
 8005428:	2300      	movs	r3, #0
 800542a:	f04f 32ff 	mov.w	r2, #4294967295
 800542e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005432:	f10a 0a01 	add.w	sl, sl, #1
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	9307      	str	r3, [sp, #28]
 800543a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800543e:	931a      	str	r3, [sp, #104]	; 0x68
 8005440:	4654      	mov	r4, sl
 8005442:	2205      	movs	r2, #5
 8005444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005448:	4851      	ldr	r0, [pc, #324]	; (8005590 <_svfiprintf_r+0x1ec>)
 800544a:	f7fa fec9 	bl	80001e0 <memchr>
 800544e:	9a04      	ldr	r2, [sp, #16]
 8005450:	b9d8      	cbnz	r0, 800548a <_svfiprintf_r+0xe6>
 8005452:	06d0      	lsls	r0, r2, #27
 8005454:	bf44      	itt	mi
 8005456:	2320      	movmi	r3, #32
 8005458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800545c:	0711      	lsls	r1, r2, #28
 800545e:	bf44      	itt	mi
 8005460:	232b      	movmi	r3, #43	; 0x2b
 8005462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005466:	f89a 3000 	ldrb.w	r3, [sl]
 800546a:	2b2a      	cmp	r3, #42	; 0x2a
 800546c:	d015      	beq.n	800549a <_svfiprintf_r+0xf6>
 800546e:	9a07      	ldr	r2, [sp, #28]
 8005470:	4654      	mov	r4, sl
 8005472:	2000      	movs	r0, #0
 8005474:	f04f 0c0a 	mov.w	ip, #10
 8005478:	4621      	mov	r1, r4
 800547a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800547e:	3b30      	subs	r3, #48	; 0x30
 8005480:	2b09      	cmp	r3, #9
 8005482:	d94e      	bls.n	8005522 <_svfiprintf_r+0x17e>
 8005484:	b1b0      	cbz	r0, 80054b4 <_svfiprintf_r+0x110>
 8005486:	9207      	str	r2, [sp, #28]
 8005488:	e014      	b.n	80054b4 <_svfiprintf_r+0x110>
 800548a:	eba0 0308 	sub.w	r3, r0, r8
 800548e:	fa09 f303 	lsl.w	r3, r9, r3
 8005492:	4313      	orrs	r3, r2
 8005494:	9304      	str	r3, [sp, #16]
 8005496:	46a2      	mov	sl, r4
 8005498:	e7d2      	b.n	8005440 <_svfiprintf_r+0x9c>
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	1d19      	adds	r1, r3, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	9103      	str	r1, [sp, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bfbb      	ittet	lt
 80054a6:	425b      	neglt	r3, r3
 80054a8:	f042 0202 	orrlt.w	r2, r2, #2
 80054ac:	9307      	strge	r3, [sp, #28]
 80054ae:	9307      	strlt	r3, [sp, #28]
 80054b0:	bfb8      	it	lt
 80054b2:	9204      	strlt	r2, [sp, #16]
 80054b4:	7823      	ldrb	r3, [r4, #0]
 80054b6:	2b2e      	cmp	r3, #46	; 0x2e
 80054b8:	d10c      	bne.n	80054d4 <_svfiprintf_r+0x130>
 80054ba:	7863      	ldrb	r3, [r4, #1]
 80054bc:	2b2a      	cmp	r3, #42	; 0x2a
 80054be:	d135      	bne.n	800552c <_svfiprintf_r+0x188>
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	1d1a      	adds	r2, r3, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	9203      	str	r2, [sp, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bfb8      	it	lt
 80054cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80054d0:	3402      	adds	r4, #2
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055a0 <_svfiprintf_r+0x1fc>
 80054d8:	7821      	ldrb	r1, [r4, #0]
 80054da:	2203      	movs	r2, #3
 80054dc:	4650      	mov	r0, sl
 80054de:	f7fa fe7f 	bl	80001e0 <memchr>
 80054e2:	b140      	cbz	r0, 80054f6 <_svfiprintf_r+0x152>
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	eba0 000a 	sub.w	r0, r0, sl
 80054ea:	fa03 f000 	lsl.w	r0, r3, r0
 80054ee:	9b04      	ldr	r3, [sp, #16]
 80054f0:	4303      	orrs	r3, r0
 80054f2:	3401      	adds	r4, #1
 80054f4:	9304      	str	r3, [sp, #16]
 80054f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fa:	4826      	ldr	r0, [pc, #152]	; (8005594 <_svfiprintf_r+0x1f0>)
 80054fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005500:	2206      	movs	r2, #6
 8005502:	f7fa fe6d 	bl	80001e0 <memchr>
 8005506:	2800      	cmp	r0, #0
 8005508:	d038      	beq.n	800557c <_svfiprintf_r+0x1d8>
 800550a:	4b23      	ldr	r3, [pc, #140]	; (8005598 <_svfiprintf_r+0x1f4>)
 800550c:	bb1b      	cbnz	r3, 8005556 <_svfiprintf_r+0x1b2>
 800550e:	9b03      	ldr	r3, [sp, #12]
 8005510:	3307      	adds	r3, #7
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	3308      	adds	r3, #8
 8005518:	9303      	str	r3, [sp, #12]
 800551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551c:	4433      	add	r3, r6
 800551e:	9309      	str	r3, [sp, #36]	; 0x24
 8005520:	e767      	b.n	80053f2 <_svfiprintf_r+0x4e>
 8005522:	fb0c 3202 	mla	r2, ip, r2, r3
 8005526:	460c      	mov	r4, r1
 8005528:	2001      	movs	r0, #1
 800552a:	e7a5      	b.n	8005478 <_svfiprintf_r+0xd4>
 800552c:	2300      	movs	r3, #0
 800552e:	3401      	adds	r4, #1
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	4619      	mov	r1, r3
 8005534:	f04f 0c0a 	mov.w	ip, #10
 8005538:	4620      	mov	r0, r4
 800553a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800553e:	3a30      	subs	r2, #48	; 0x30
 8005540:	2a09      	cmp	r2, #9
 8005542:	d903      	bls.n	800554c <_svfiprintf_r+0x1a8>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0c5      	beq.n	80054d4 <_svfiprintf_r+0x130>
 8005548:	9105      	str	r1, [sp, #20]
 800554a:	e7c3      	b.n	80054d4 <_svfiprintf_r+0x130>
 800554c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005550:	4604      	mov	r4, r0
 8005552:	2301      	movs	r3, #1
 8005554:	e7f0      	b.n	8005538 <_svfiprintf_r+0x194>
 8005556:	ab03      	add	r3, sp, #12
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	462a      	mov	r2, r5
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <_svfiprintf_r+0x1f8>)
 800555e:	a904      	add	r1, sp, #16
 8005560:	4638      	mov	r0, r7
 8005562:	f3af 8000 	nop.w
 8005566:	1c42      	adds	r2, r0, #1
 8005568:	4606      	mov	r6, r0
 800556a:	d1d6      	bne.n	800551a <_svfiprintf_r+0x176>
 800556c:	89ab      	ldrh	r3, [r5, #12]
 800556e:	065b      	lsls	r3, r3, #25
 8005570:	f53f af2c 	bmi.w	80053cc <_svfiprintf_r+0x28>
 8005574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005576:	b01d      	add	sp, #116	; 0x74
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	ab03      	add	r3, sp, #12
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	462a      	mov	r2, r5
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <_svfiprintf_r+0x1f8>)
 8005584:	a904      	add	r1, sp, #16
 8005586:	4638      	mov	r0, r7
 8005588:	f7ff f99a 	bl	80048c0 <_printf_i>
 800558c:	e7eb      	b.n	8005566 <_svfiprintf_r+0x1c2>
 800558e:	bf00      	nop
 8005590:	08005dc0 	.word	0x08005dc0
 8005594:	08005dca 	.word	0x08005dca
 8005598:	00000000 	.word	0x00000000
 800559c:	080052ed 	.word	0x080052ed
 80055a0:	08005dc6 	.word	0x08005dc6

080055a4 <_sbrk_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d06      	ldr	r5, [pc, #24]	; (80055c0 <_sbrk_r+0x1c>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	f7fb f870 	bl	8000694 <_sbrk>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_sbrk_r+0x1a>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_sbrk_r+0x1a>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	200006bc 	.word	0x200006bc

080055c4 <_raise_r>:
 80055c4:	291f      	cmp	r1, #31
 80055c6:	b538      	push	{r3, r4, r5, lr}
 80055c8:	4604      	mov	r4, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	d904      	bls.n	80055d8 <_raise_r+0x14>
 80055ce:	2316      	movs	r3, #22
 80055d0:	6003      	str	r3, [r0, #0]
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055da:	b112      	cbz	r2, 80055e2 <_raise_r+0x1e>
 80055dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055e0:	b94b      	cbnz	r3, 80055f6 <_raise_r+0x32>
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f830 	bl	8005648 <_getpid_r>
 80055e8:	462a      	mov	r2, r5
 80055ea:	4601      	mov	r1, r0
 80055ec:	4620      	mov	r0, r4
 80055ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055f2:	f000 b817 	b.w	8005624 <_kill_r>
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d00a      	beq.n	8005610 <_raise_r+0x4c>
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	d103      	bne.n	8005606 <_raise_r+0x42>
 80055fe:	2316      	movs	r3, #22
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	2001      	movs	r0, #1
 8005604:	e7e7      	b.n	80055d6 <_raise_r+0x12>
 8005606:	2400      	movs	r4, #0
 8005608:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800560c:	4628      	mov	r0, r5
 800560e:	4798      	blx	r3
 8005610:	2000      	movs	r0, #0
 8005612:	e7e0      	b.n	80055d6 <_raise_r+0x12>

08005614 <raise>:
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <raise+0xc>)
 8005616:	4601      	mov	r1, r0
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f7ff bfd3 	b.w	80055c4 <_raise_r>
 800561e:	bf00      	nop
 8005620:	2000000c 	.word	0x2000000c

08005624 <_kill_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d07      	ldr	r5, [pc, #28]	; (8005644 <_kill_r+0x20>)
 8005628:	2300      	movs	r3, #0
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	f7fa ffa7 	bl	8000584 <_kill>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	d102      	bne.n	8005640 <_kill_r+0x1c>
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	b103      	cbz	r3, 8005640 <_kill_r+0x1c>
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	bd38      	pop	{r3, r4, r5, pc}
 8005642:	bf00      	nop
 8005644:	200006bc 	.word	0x200006bc

08005648 <_getpid_r>:
 8005648:	f7fa bf94 	b.w	8000574 <_getpid>

0800564c <__sread>:
 800564c:	b510      	push	{r4, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	f000 f8a8 	bl	80057a8 <_read_r>
 8005658:	2800      	cmp	r0, #0
 800565a:	bfab      	itete	ge
 800565c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800565e:	89a3      	ldrhlt	r3, [r4, #12]
 8005660:	181b      	addge	r3, r3, r0
 8005662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005666:	bfac      	ite	ge
 8005668:	6563      	strge	r3, [r4, #84]	; 0x54
 800566a:	81a3      	strhlt	r3, [r4, #12]
 800566c:	bd10      	pop	{r4, pc}

0800566e <__swrite>:
 800566e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005672:	461f      	mov	r7, r3
 8005674:	898b      	ldrh	r3, [r1, #12]
 8005676:	05db      	lsls	r3, r3, #23
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	4616      	mov	r6, r2
 800567e:	d505      	bpl.n	800568c <__swrite+0x1e>
 8005680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005684:	2302      	movs	r3, #2
 8005686:	2200      	movs	r2, #0
 8005688:	f000 f868 	bl	800575c <_lseek_r>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	4628      	mov	r0, r5
 800569e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a2:	f000 b817 	b.w	80056d4 <_write_r>

080056a6 <__sseek>:
 80056a6:	b510      	push	{r4, lr}
 80056a8:	460c      	mov	r4, r1
 80056aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ae:	f000 f855 	bl	800575c <_lseek_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	bf15      	itete	ne
 80056b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056c2:	81a3      	strheq	r3, [r4, #12]
 80056c4:	bf18      	it	ne
 80056c6:	81a3      	strhne	r3, [r4, #12]
 80056c8:	bd10      	pop	{r4, pc}

080056ca <__sclose>:
 80056ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ce:	f000 b813 	b.w	80056f8 <_close_r>
	...

080056d4 <_write_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_write_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fa ff85 	bl	80005f2 <_write>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_write_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_write_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	200006bc 	.word	0x200006bc

080056f8 <_close_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d06      	ldr	r5, [pc, #24]	; (8005714 <_close_r+0x1c>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fa ff91 	bl	800062a <_close>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_close_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_close_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	200006bc 	.word	0x200006bc

08005718 <_fstat_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4d07      	ldr	r5, [pc, #28]	; (8005738 <_fstat_r+0x20>)
 800571c:	2300      	movs	r3, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	f7fa ff8c 	bl	8000642 <_fstat>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d102      	bne.n	8005734 <_fstat_r+0x1c>
 800572e:	682b      	ldr	r3, [r5, #0]
 8005730:	b103      	cbz	r3, 8005734 <_fstat_r+0x1c>
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	bd38      	pop	{r3, r4, r5, pc}
 8005736:	bf00      	nop
 8005738:	200006bc 	.word	0x200006bc

0800573c <_isatty_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_isatty_r+0x1c>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fa ff8b 	bl	8000662 <_isatty>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_isatty_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_isatty_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	200006bc 	.word	0x200006bc

0800575c <_lseek_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d07      	ldr	r5, [pc, #28]	; (800577c <_lseek_r+0x20>)
 8005760:	4604      	mov	r4, r0
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	2200      	movs	r2, #0
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fa ff84 	bl	8000678 <_lseek>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_lseek_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_lseek_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	200006bc 	.word	0x200006bc

08005780 <__malloc_lock>:
 8005780:	4801      	ldr	r0, [pc, #4]	; (8005788 <__malloc_lock+0x8>)
 8005782:	f7ff bc63 	b.w	800504c <__retarget_lock_acquire_recursive>
 8005786:	bf00      	nop
 8005788:	200006b4 	.word	0x200006b4

0800578c <__malloc_unlock>:
 800578c:	4801      	ldr	r0, [pc, #4]	; (8005794 <__malloc_unlock+0x8>)
 800578e:	f7ff bc5e 	b.w	800504e <__retarget_lock_release_recursive>
 8005792:	bf00      	nop
 8005794:	200006b4 	.word	0x200006b4

08005798 <_malloc_usable_size_r>:
 8005798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800579c:	1f18      	subs	r0, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfbc      	itt	lt
 80057a2:	580b      	ldrlt	r3, [r1, r0]
 80057a4:	18c0      	addlt	r0, r0, r3
 80057a6:	4770      	bx	lr

080057a8 <_read_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d07      	ldr	r5, [pc, #28]	; (80057c8 <_read_r+0x20>)
 80057ac:	4604      	mov	r4, r0
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	602a      	str	r2, [r5, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f7fa fefe 	bl	80005b8 <_read>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_read_r+0x1e>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_read_r+0x1e>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	200006bc 	.word	0x200006bc

080057cc <_init>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	bf00      	nop
 80057d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d2:	bc08      	pop	{r3}
 80057d4:	469e      	mov	lr, r3
 80057d6:	4770      	bx	lr

080057d8 <_fini>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr
