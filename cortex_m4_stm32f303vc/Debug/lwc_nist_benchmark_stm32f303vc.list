
lwc_nist_benchmark_stm32f303vc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005428  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b34  08005b34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b3c  08005b3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000070  08005bb4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08005bb4  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013457  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf3  00000000  00000000  000334f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  000361f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00037058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c6f  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bdf  00000000  00000000  00058af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c16e2  00000000  00000000  0006a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012bdb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000447c  00000000  00000000  0012be0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055a0 	.word	0x080055a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080055a0 	.word	0x080055a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058e:	695a      	ldr	r2, [r3, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fa5f 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f80f 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f88b 	bl	80006cc <MX_GPIO_Init>
  MX_TIM6_Init();
 80005b6:	f000 f847 	bl	8000648 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f86b 	bl	8000694 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
	  HAL_Delay(1000000);
 80005be:	4c03      	ldr	r4, [pc, #12]	; (80005cc <main+0x24>)
	  genkat_benchmark_hash_aead();
 80005c0:	f003 fbdc 	bl	8003d7c <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80005c4:	4620      	mov	r0, r4
 80005c6:	f000 fab7 	bl	8000b38 <HAL_Delay>
 80005ca:	e7f9      	b.n	80005c0 <main+0x18>
 80005cc:	000f4240 	.word	0x000f4240

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b510      	push	{r4, lr}
 80005d2:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d4:	2400      	movs	r4, #0
 80005d6:	9415      	str	r4, [sp, #84]	; 0x54
 80005d8:	9416      	str	r4, [sp, #88]	; 0x58
 80005da:	9417      	str	r4, [sp, #92]	; 0x5c
 80005dc:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005de:	940f      	str	r4, [sp, #60]	; 0x3c
 80005e0:	9410      	str	r4, [sp, #64]	; 0x40
 80005e2:	9411      	str	r4, [sp, #68]	; 0x44
 80005e4:	9412      	str	r4, [sp, #72]	; 0x48
 80005e6:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e8:	223c      	movs	r2, #60	; 0x3c
 80005ea:	4621      	mov	r1, r4
 80005ec:	4668      	mov	r0, sp
 80005ee:	f003 fe81 	bl	80042f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	2201      	movs	r2, #1
 80005f8:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2210      	movs	r2, #16
 80005fc:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000602:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000606:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	a814      	add	r0, sp, #80	; 0x50
 800060a:	f000 fd45 	bl	8001098 <HAL_RCC_OscConfig>
 800060e:	b9a8      	cbnz	r0, 800063c <SystemClock_Config+0x6c>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	930f      	str	r3, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2100      	movs	r1, #0
 800061a:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	9113      	str	r1, [sp, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	a80f      	add	r0, sp, #60	; 0x3c
 8000622:	f001 fc41 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000626:	b958      	cbnz	r0, 8000640 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000628:	2301      	movs	r3, #1
 800062a:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800062c:	2300      	movs	r3, #0
 800062e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000630:	4668      	mov	r0, sp
 8000632:	f001 fe6f 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	b928      	cbnz	r0, 8000644 <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
}
 8000638:	b01e      	add	sp, #120	; 0x78
 800063a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800063c:	f000 f850 	bl	80006e0 <Error_Handler>
    Error_Handler();
 8000640:	f000 f84e 	bl	80006e0 <Error_Handler>
    Error_Handler();
 8000644:	f000 f84c 	bl	80006e0 <Error_Handler>

08000648 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000648:	b500      	push	{lr}
 800064a:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	2300      	movs	r3, #0
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_TIM6_Init+0x44>)
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <MX_TIM6_Init+0x48>)
 8000658:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 0;
 800065a:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 65535;
 800065e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000662:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000664:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000666:	f002 f805 	bl	8002674 <HAL_TIM_Base_Init>
 800066a:	b950      	cbnz	r0, 8000682 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000670:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000672:	a901      	add	r1, sp, #4
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_TIM6_Init+0x44>)
 8000676:	f002 fac5 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	b920      	cbnz	r0, 8000686 <MX_TIM6_Init+0x3e>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800067c:	b005      	add	sp, #20
 800067e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000682:	f000 f82d 	bl	80006e0 <Error_Handler>
    Error_Handler();
 8000686:	f000 f82b 	bl	80006e0 <Error_Handler>
 800068a:	bf00      	nop
 800068c:	2000062c 	.word	0x2000062c
 8000690:	40001000 	.word	0x40001000

08000694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000694:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_USART1_UART_Init+0x30>)
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x34>)
 800069a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800069c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80006a0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	2300      	movs	r3, #0
 80006a4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006aa:	220c      	movs	r2, #12
 80006ac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	f002 fb43 	bl	8002d40 <HAL_UART_Init>
 80006ba:	b900      	cbnz	r0, 80006be <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006bc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006be:	f000 f80f 	bl	80006e0 <Error_Handler>
 80006c2:	bf00      	nop
 80006c4:	200005a8 	.word	0x200005a8
 80006c8:	40013800 	.word	0x40013800

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b508      	push	{r3, lr}

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80006ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80006d2:	f7ff ff51 	bl	8000578 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006da:	f7ff ff4d 	bl	8000578 <LL_AHB1_GRP1_EnableClock>

}
 80006de:	bd08      	pop	{r3, pc}

080006e0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
 80006e2:	e7fe      	b.n	80006e2 <Error_Handler+0x2>

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <HAL_TIM_Base_MspInit+0x44>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d113      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_TIM_Base_MspInit+0x48>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2036      	movs	r0, #54	; 0x36
 800075c:	f000 faeb 	bl	8000d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000760:	2036      	movs	r0, #54	; 0x36
 8000762:	f000 fb04 	bl	8000d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40001000 	.word	0x40001000
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_UART_MspInit+0x7c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d127      	bne.n	80007ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_UART_MspInit+0x80>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ca:	2330      	movs	r3, #48	; 0x30
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007da:	2307      	movs	r3, #7
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <HAL_UART_MspInit+0x84>)
 80007e6:	f000 fadd 	bl	8000da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f954 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <TIM6_DAC_IRQHandler+0x10>)
 800085a:	f001 fffc 	bl	8002856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000062c 	.word	0x2000062c

08000868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_kill>:

int _kill(int pid, int sig)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000882:	f003 fcdf 	bl	8004244 <__errno>
 8000886:	4603      	mov	r3, r0
 8000888:	2216      	movs	r2, #22
 800088a:	601a      	str	r2, [r3, #0]
	return -1;
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <_exit>:

void _exit (int status)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ffe7 	bl	8000878 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008aa:	e7fe      	b.n	80008aa <_exit+0x12>

080008ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00a      	b.n	80008d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008be:	f3af 8000 	nop.w
 80008c2:	4601      	mov	r1, r0
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf0      	blt.n	80008be <_read+0x12>
	}

return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e009      	b.n	800090c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf1      	blt.n	80008f8 <_write+0x12>
	}
	return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:

int _close(int file)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	605a      	str	r2, [r3, #4]
	return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_isatty>:

int _isatty(int file)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	return 1;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f003 fc44 	bl	8004244 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000a000 	.word	0x2000a000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	200006c0 	.word	0x200006c0

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fc15 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fdad 	bl	80005a8 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a5c:	08005b44 	.word	0x08005b44
  ldr r2, =_sbss
 8000a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a64:	200006c0 	.word	0x200006c0

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f94f 	bl	8000d20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fe2c 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f967 	bl	8000d8a <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f92f 	bl	8000d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000678 	.word	0x20000678

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000678 	.word	0x20000678

08000b38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <__NVIC_EnableIRQ+0x38>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cec:	d301      	bcc.n	8000cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00f      	b.n	8000d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SysTick_Config+0x40>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f7ff ff8e 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <SysTick_Config+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SysTick_Config+0x40>)
 8000d0c:	2207      	movs	r2, #7
 8000d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff29 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d48:	f7ff ff3e 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6978      	ldr	r0, [r7, #20]
 8000d54:	f7ff ff8e 	bl	8000c74 <NVIC_EncodePriority>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5d 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff31 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffa2 	bl	8000cdc <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	e154      	b.n	800105e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8146 	beq.w	8001058 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d00b      	beq.n	8000dec <HAL_GPIO_Init+0x48>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de0:	2b11      	cmp	r3, #17
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b12      	cmp	r3, #18
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0xea>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0203 	and.w	r2, r3, #3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80a0 	beq.w	8001058 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_GPIO_Init+0x2d8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a57      	ldr	r2, [pc, #348]	; (800107c <HAL_GPIO_Init+0x2d8>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b55      	ldr	r3, [pc, #340]	; (800107c <HAL_GPIO_Init+0x2d8>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f30:	4a53      	ldr	r2, [pc, #332]	; (8001080 <HAL_GPIO_Init+0x2dc>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f5a:	d019      	beq.n	8000f90 <HAL_GPIO_Init+0x1ec>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_GPIO_Init+0x2e0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <HAL_GPIO_Init+0x1e8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a48      	ldr	r2, [pc, #288]	; (8001088 <HAL_GPIO_Init+0x2e4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d00d      	beq.n	8000f88 <HAL_GPIO_Init+0x1e4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a47      	ldr	r2, [pc, #284]	; (800108c <HAL_GPIO_Init+0x2e8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x1e0>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_GPIO_Init+0x2ec>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d101      	bne.n	8000f80 <HAL_GPIO_Init+0x1dc>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	e008      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f80:	2305      	movs	r3, #5
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa2:	4937      	ldr	r1, [pc, #220]	; (8001080 <HAL_GPIO_Init+0x2dc>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd4:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001028:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f aea3 	bne.w	8000db4 <HAL_GPIO_Init+0x10>
  }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48001000 	.word	0x48001000
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800109e:	af00      	add	r7, sp, #0
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f000 bef4 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 816a 	beq.w	8001396 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010c2:	4bb3      	ldr	r3, [pc, #716]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ce:	4bb0      	ldr	r3, [pc, #704]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d159      	bne.n	800118e <HAL_RCC_OscConfig+0xf6>
 80010da:	4bad      	ldr	r3, [pc, #692]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e6:	d152      	bne.n	800118e <HAL_RCC_OscConfig+0xf6>
 80010e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <HAL_RCC_OscConfig+0x82>
 8001114:	4b9e      	ldr	r3, [pc, #632]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0xae>
 800111a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800112e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001132:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001136:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001142:	4b93      	ldr	r3, [pc, #588]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800114a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800114e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001152:	fa92 f2a2 	rbit	r2, r2
 8001156:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800115a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800115e:	fab2 f282 	clz	r2, r2
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	f042 0220 	orr.w	r2, r2, #32
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	f002 021f 	and.w	r2, r2, #31
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 810c 	beq.w	8001394 <HAL_RCC_OscConfig+0x2fc>
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 8106 	bne.w	8001394 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	f000 be86 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d106      	bne.n	80011a8 <HAL_RCC_OscConfig+0x110>
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e030      	b.n	800120a <HAL_RCC_OscConfig+0x172>
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x134>
 80011b2:	4b77      	ldr	r3, [pc, #476]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a76      	ldr	r2, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b74      	ldr	r3, [pc, #464]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a73      	ldr	r2, [pc, #460]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01e      	b.n	800120a <HAL_RCC_OscConfig+0x172>
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d6:	d10c      	bne.n	80011f2 <HAL_RCC_OscConfig+0x15a>
 80011d8:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a6c      	ldr	r2, [pc, #432]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a69      	ldr	r2, [pc, #420]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e00b      	b.n	800120a <HAL_RCC_OscConfig+0x172>
 80011f2:	4b67      	ldr	r3, [pc, #412]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a66      	ldr	r2, [pc, #408]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b64      	ldr	r3, [pc, #400]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a63      	ldr	r2, [pc, #396]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120a:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	f023 020f 	bic.w	r2, r3, #15
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	495d      	ldr	r1, [pc, #372]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 800121a:	4313      	orrs	r3, r2
 800121c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d059      	beq.n	80012dc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc7a 	bl	8000b20 <HAL_GetTick>
 800122c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fc75 	bl	8000b20 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d902      	bls.n	8001248 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	f000 be29 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>
 8001248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800124c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800125c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <HAL_RCC_OscConfig+0x1e2>
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x20e>
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800128e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001292:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001296:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012b2:	fa92 f2a2 	rbit	r2, r2
 80012b6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012ba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	f042 0220 	orr.w	r2, r2, #32
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	f002 021f 	and.w	r2, r2, #31
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0ab      	beq.n	8001232 <HAL_RCC_OscConfig+0x19a>
 80012da:	e05c      	b.n	8001396 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fc20 	bl	8000b20 <HAL_GetTick>
 80012e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff fc1b 	bl	8000b20 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d902      	bls.n	80012fc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f000 bdcf 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>
 80012fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001300:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001310:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <HAL_RCC_OscConfig+0x296>
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x2c2>
 800132e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001332:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001346:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800134a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_RCC_OscConfig+0x2f8>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800135e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001362:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001366:	fa92 f2a2 	rbit	r2, r2
 800136a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800136e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001372:	fab2 f282 	clz	r2, r2
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	f042 0220 	orr.w	r2, r2, #32
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f002 021f 	and.w	r2, r2, #31
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ab      	bne.n	80012e6 <HAL_RCC_OscConfig+0x24e>
 800138e:	e002      	b.n	8001396 <HAL_RCC_OscConfig+0x2fe>
 8001390:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 816f 	beq.w	8001684 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013a6:	4bd0      	ldr	r3, [pc, #832]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013b2:	4bcd      	ldr	r3, [pc, #820]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d16c      	bne.n	8001498 <HAL_RCC_OscConfig+0x400>
 80013be:	4bca      	ldr	r3, [pc, #808]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d166      	bne.n	8001498 <HAL_RCC_OscConfig+0x400>
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80013dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x362>
 80013f4:	4bbc      	ldr	r3, [pc, #752]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e013      	b.n	8001422 <HAL_RCC_OscConfig+0x38a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001412:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800141e:	4bb2      	ldr	r3, [pc, #712]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	2202      	movs	r2, #2
 8001424:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001428:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800142c:	fa92 f2a2 	rbit	r2, r2
 8001430:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001434:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001438:	fab2 f282 	clz	r2, r2
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	f042 0220 	orr.w	r2, r2, #32
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f002 021f 	and.w	r2, r2, #31
 8001448:	2101      	movs	r1, #1
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_RCC_OscConfig+0x3cc>
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d002      	beq.n	8001464 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f000 bd1b 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4ba0      	ldr	r3, [pc, #640]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	21f8      	movs	r1, #248	; 0xf8
 8001474:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800147c:	fa91 f1a1 	rbit	r1, r1
 8001480:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001484:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001488:	fab1 f181 	clz	r1, r1
 800148c:	b2c9      	uxtb	r1, r1
 800148e:	408b      	lsls	r3, r1
 8001490:	4995      	ldr	r1, [pc, #596]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e0f5      	b.n	8001684 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8085 	beq.w	80015ae <HAL_RCC_OscConfig+0x516>
 80014a4:	2301      	movs	r3, #1
 80014a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014ae:	fa93 f3a3 	rbit	r3, r3
 80014b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	461a      	mov	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb26 	bl	8000b20 <HAL_GetTick>
 80014d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fb21 	bl	8000b20 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d902      	bls.n	80014f0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f000 bcd5 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001502:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <HAL_RCC_OscConfig+0x488>
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	e013      	b.n	8001548 <HAL_RCC_OscConfig+0x4b0>
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001538:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2202      	movs	r2, #2
 800154a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800154e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001552:	fa92 f2a2 	rbit	r2, r2
 8001556:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800155a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f042 0220 	orr.w	r2, r2, #32
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0af      	beq.n	80014da <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	21f8      	movs	r1, #248	; 0xf8
 800158a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001592:	fa91 f1a1 	rbit	r1, r1
 8001596:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800159a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800159e:	fab1 f181 	clz	r1, r1
 80015a2:	b2c9      	uxtb	r1, r1
 80015a4:	408b      	lsls	r3, r1
 80015a6:	4950      	ldr	r1, [pc, #320]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
 80015ac:	e06a      	b.n	8001684 <HAL_RCC_OscConfig+0x5ec>
 80015ae:	2301      	movs	r3, #1
 80015b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	461a      	mov	r2, r3
 80015d6:	2300      	movs	r3, #0
 80015d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff faa1 	bl	8000b20 <HAL_GetTick>
 80015de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa9c 	bl	8000b20 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d902      	bls.n	80015fa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f000 bc50 	b.w	8001e9a <HAL_RCC_OscConfig+0xe02>
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800160c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <HAL_RCC_OscConfig+0x592>
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e013      	b.n	8001652 <HAL_RCC_OscConfig+0x5ba>
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_OscConfig+0x650>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2202      	movs	r2, #2
 8001654:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001658:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800165c:	fa92 f2a2 	rbit	r2, r2
 8001660:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001664:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1af      	bne.n	80015e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80da 	beq.w	8001848 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d069      	beq.n	8001772 <HAL_RCC_OscConfig+0x6da>
 800169e:	2301      	movs	r3, #1
 80016a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x654>)
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	461a      	mov	r2, r3
 80016c4:	2301      	movs	r3, #1
 80016c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa2a 	bl	8000b20 <HAL_GetTick>
 80016cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d0:	e00e      	b.n	80016f0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fa25 	bl	8000b20 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d906      	bls.n	80016f0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e3d9      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	10908120 	.word	0x10908120
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001702:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800171e:	2202      	movs	r2, #2
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	fa93 f2a3 	rbit	r2, r3
 800172c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001730:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4ba5      	ldr	r3, [pc, #660]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001736:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800173a:	2102      	movs	r1, #2
 800173c:	6019      	str	r1, [r3, #0]
 800173e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f1a3 	rbit	r1, r3
 8001748:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800174c:	6019      	str	r1, [r3, #0]
  return result;
 800174e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0b0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x63a>
 8001770:	e06a      	b.n	8001848 <HAL_RCC_OscConfig+0x7b0>
 8001772:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001788:	601a      	str	r2, [r3, #0]
  return result;
 800178a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800178e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x934>)
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	461a      	mov	r2, r3
 80017a0:	2300      	movs	r3, #0
 80017a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f9bc 	bl	8000b20 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff f9b7 	bl	8000b20 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e36b      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 80017c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f2a3 	rbit	r2, r3
 80017ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001808:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180a:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 800180c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800180e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001812:	2102      	movs	r1, #2
 8001814:	6019      	str	r1, [r3, #0]
 8001816:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f1a3 	rbit	r1, r3
 8001820:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001824:	6019      	str	r1, [r3, #0]
  return result;
 8001826:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1b2      	bne.n	80017ae <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8158 	beq.w	8001b08 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <HAL_RCC_OscConfig+0x938>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11a      	bne.n	80018d2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCC_OscConfig+0x938>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4b      	ldr	r2, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x938>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a8:	f7ff f93a 	bl	8000b20 <HAL_GetTick>
 80018ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff f935 	bl	8000b20 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2e9      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x938>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0ef      	beq.n	80018b2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x852>
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a39      	ldr	r2, [pc, #228]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e02f      	b.n	800194a <HAL_RCC_OscConfig+0x8b2>
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x876>
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e01d      	b.n	800194a <HAL_RCC_OscConfig+0x8b2>
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x89a>
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0x8b2>
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d06b      	beq.n	8001a2c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001954:	f7ff f8e4 	bl	8000b20 <HAL_GetTick>
 8001958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff f8df 	bl	8000b20 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e291      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 8001976:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001992:	2202      	movs	r2, #2
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d109      	bne.n	80019d4 <HAL_RCC_OscConfig+0x93c>
 80019c0:	4b01      	ldr	r3, [pc, #4]	; (80019c8 <HAL_RCC_OscConfig+0x930>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x958>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	10908120 	.word	0x10908120
 80019d0:	40007000 	.word	0x40007000
 80019d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4bbb      	ldr	r3, [pc, #748]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019f4:	2102      	movs	r1, #2
 80019f6:	6011      	str	r1, [r2, #0]
 80019f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fa92 f1a2 	rbit	r1, r2
 8001a02:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a06:	6011      	str	r1, [r2, #0]
  return result;
 8001a08:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	fab2 f282 	clz	r2, r2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f002 021f 	and.w	r2, r2, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d099      	beq.n	800195e <HAL_RCC_OscConfig+0x8c6>
 8001a2a:	e063      	b.n	8001af4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f878 	bl	8000b20 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e00b      	b.n	8001a4e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff f873 	bl	8000b20 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e225      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 8001a4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a7c:	601a      	str	r2, [r3, #0]
  return result;
 8001a7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0xa06>
 8001a98:	4b90      	ldr	r3, [pc, #576]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	e00d      	b.n	8001aba <HAL_RCC_OscConfig+0xa22>
 8001a9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4b89      	ldr	r3, [pc, #548]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001abe:	2102      	movs	r1, #2
 8001ac0:	6011      	str	r1, [r2, #0]
 8001ac2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	fa92 f1a2 	rbit	r1, r2
 8001acc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ad0:	6011      	str	r1, [r2, #0]
  return result;
 8001ad2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1a0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001af4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 81c2 	beq.w	8001e98 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	f000 819c 	beq.w	8001e5a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	f040 8114 	bne.w	8001d56 <HAL_RCC_OscConfig+0xcbe>
 8001b2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b46:	601a      	str	r2, [r3, #0]
  return result;
 8001b48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe ffdc 	bl	8000b20 <HAL_GetTick>
 8001b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe ffd7 	bl	8000b20 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e18b      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 8001b82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b9a:	601a      	str	r2, [r3, #0]
  return result;
 8001b9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_OscConfig+0xb24>
 8001bb6:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e01b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb5c>
 8001bbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bf8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bfc:	6011      	str	r1, [r2, #0]
 8001bfe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c0c:	6011      	str	r1, [r2, #0]
  return result;
 8001c0e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d19e      	bne.n	8001b6e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	4925      	ldr	r1, [pc, #148]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 8001c4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c64:	601a      	str	r2, [r3, #0]
  return result;
 8001c66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c6a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2301      	movs	r3, #1
 8001c80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe ff4d 	bl	8000b20 <HAL_GetTick>
 8001c86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8a:	e009      	b.n	8001ca0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ff48 	bl	8000b20 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0fc      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 8001ca0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cb8:	601a      	str	r2, [r3, #0]
  return result;
 8001cba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xc48>
 8001cd4:	4b01      	ldr	r3, [pc, #4]	; (8001cdc <HAL_RCC_OscConfig+0xc44>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e01e      	b.n	8001d18 <HAL_RCC_OscConfig+0xc80>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <HAL_RCC_OscConfig+0xe0c>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d20:	6011      	str	r1, [r2, #0]
 8001d22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fa92 f1a2 	rbit	r1, r2
 8001d2c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d09b      	beq.n	8001c8c <HAL_RCC_OscConfig+0xbf4>
 8001d54:	e0a0      	b.n	8001e98 <HAL_RCC_OscConfig+0xe00>
 8001d56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6e:	601a      	str	r2, [r3, #0]
  return result;
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	461a      	mov	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fec8 	bl	8000b20 <HAL_GetTick>
 8001d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	e009      	b.n	8001daa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe fec3 	bl	8000b20 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e077      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
 8001daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	601a      	str	r2, [r3, #0]
  return result;
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0xd4c>
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0xe0c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e01b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd84>
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f2a3 	rbit	r2, r3
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_OscConfig+0xe0c>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f107 0210 	add.w	r2, r7, #16
 8001e20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e24:	6011      	str	r1, [r2, #0]
 8001e26:	f107 0210 	add.w	r2, r7, #16
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	fa92 f1a2 	rbit	r1, r2
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	6011      	str	r1, [r2, #0]
  return result;
 8001e36:	f107 020c 	add.w	r2, r7, #12
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d19e      	bne.n	8001d96 <HAL_RCC_OscConfig+0xcfe>
 8001e58:	e01e      	b.n	8001e98 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_RCC_OscConfig+0xe0c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e70:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d108      	bne.n	8001e94 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b09e      	sub	sp, #120	; 0x78
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e162      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b90      	ldr	r3, [pc, #576]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	498b      	ldr	r1, [pc, #556]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e14a      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b82      	ldr	r3, [pc, #520]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	497f      	ldr	r1, [pc, #508]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80dc 	beq.w	80020d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d13c      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xf6>
 8001f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xa6>
 8001f48:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e00f      	b.n	8001f6e <HAL_RCC_ClockConfig+0xc6>
 8001f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f60:	663b      	str	r3, [r7, #96]	; 0x60
 8001f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f72:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d17b      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0f3      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d13c      	bne.n	8002020 <HAL_RCC_ClockConfig+0x178>
 8001fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001faa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x128>
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
 8001fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8001fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f002 021f 	and.w	r2, r2, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13a      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b2      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
 8002020:	2302      	movs	r3, #2
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_RCC_ClockConfig+0x1a0>
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e00d      	b.n	8002064 <HAL_RCC_ClockConfig+0x1bc>
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2202      	movs	r2, #2
 8002066:	61ba      	str	r2, [r7, #24]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	fa92 f2a2 	rbit	r2, r2
 800206e:	617a      	str	r2, [r7, #20]
  return result;
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e079      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	491a      	ldr	r1, [pc, #104]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fd3c 	bl	8000b20 <HAL_GetTick>
 80020a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7fe fd38 	bl	8000b20 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e061      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_ClockConfig+0x260>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d214      	bcs.n	800210c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4906      	ldr	r1, [pc, #24]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e040      	b.n	8002186 <HAL_RCC_ClockConfig+0x2de>
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	491a      	ldr	r1, [pc, #104]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4912      	ldr	r1, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800214a:	f000 f829 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_RCC_ClockConfig+0x2e8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002158:	22f0      	movs	r2, #240	; 0xf0
 800215a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	fa92 f2a2 	rbit	r2, r2
 8002162:	60fa      	str	r2, [r7, #12]
  return result;
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	40d3      	lsrs	r3, r2
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x2ec>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	fa21 f303 	lsr.w	r3, r1, r3
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_RCC_ClockConfig+0x2f0>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCC_ClockConfig+0x2f4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fc8a 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3778      	adds	r7, #120	; 0x78
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	080055b8 	.word	0x080055b8
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b08b      	sub	sp, #44	; 0x2c
 80021a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ba:	4b29      	ldr	r3, [pc, #164]	; (8002260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ce:	e03c      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d2:	623b      	str	r3, [r7, #32]
      break;
 80021d4:	e03c      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	fa92 f2a2 	rbit	r2, r2
 80021e8:	607a      	str	r2, [r7, #4]
  return result;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	40d3      	lsrs	r3, r2
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	220f      	movs	r2, #15
 8002204:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	60fa      	str	r2, [r7, #12]
  return result;
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_RCC_GetSysClockFreq+0xcc>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc4>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	e004      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_RCC_GetSysClockFreq+0xd0>)
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	623b      	str	r3, [r7, #32]
      break;
 8002248:	e002      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_GetSysClockFreq+0xc4>)
 800224c:	623b      	str	r3, [r7, #32]
      break;
 800224e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002250:	6a3b      	ldr	r3, [r7, #32]
}
 8002252:	4618      	mov	r0, r3
 8002254:	372c      	adds	r7, #44	; 0x2c
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	007a1200 	.word	0x007a1200
 8002268:	080055d0 	.word	0x080055d0
 800226c:	080055e0 	.word	0x080055e0
 8002270:	003d0900 	.word	0x003d0900

08002274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_RCC_GetHCLKFreq+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002292:	f7ff ffef 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 8002296:	4601      	mov	r1, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	603a      	str	r2, [r7, #0]
  return result;
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	40d3      	lsrs	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	080055c8 	.word	0x080055c8

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022d6:	f7ff ffcd 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022da:	4601      	mov	r1, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	603a      	str	r2, [r7, #0]
  return result;
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	40d3      	lsrs	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	080055c8 	.word	0x080055c8

08002314 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b092      	sub	sp, #72	; 0x48
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80d4 	beq.w	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	61d3      	str	r3, [r2, #28]
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b45      	ldr	r3, [pc, #276]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a41      	ldr	r2, [pc, #260]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fbd1 	bl	8000b20 <HAL_GetTick>
 800237e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fbcd 	bl	8000b20 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e169      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8084 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d07c      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d04b      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe fb7d 	bl	8000b20 <HAL_GetTick>
 8002426:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fb79 	bl	8000b20 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e113      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	61fb      	str	r3, [r7, #28]
  return result;
 8002458:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d108      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800246e:	4b01      	ldr	r3, [pc, #4]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	e00d      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	10908100 	.word	0x10908100
 8002480:	2302      	movs	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	4b78      	ldr	r3, [pc, #480]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2202      	movs	r2, #2
 8002492:	613a      	str	r2, [r7, #16]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	60fa      	str	r2, [r7, #12]
  return result;
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0b7      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024ba:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	496a      	ldr	r1, [pc, #424]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ec:	4b60      	ldr	r3, [pc, #384]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f023 0203 	bic.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	495d      	ldr	r1, [pc, #372]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250a:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4956      	ldr	r1, [pc, #344]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002528:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	494e      	ldr	r1, [pc, #312]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f023 0210 	bic.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4947      	ldr	r1, [pc, #284]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	493f      	ldr	r1, [pc, #252]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f023 0220 	bic.w	r2, r3, #32
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4938      	ldr	r1, [pc, #224]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	4930      	ldr	r1, [pc, #192]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	4929      	ldr	r1, [pc, #164]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	4921      	ldr	r1, [pc, #132]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3748      	adds	r7, #72	; 0x48
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e049      	b.n	800271a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe f846 	bl	800072c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 fa16 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d001      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e04a      	b.n	80027d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d018      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002766:	d013      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_TIM_Base_Start_IT+0xc8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x6c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d115      	bne.n	80027bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d015      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0xaa>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a8:	d011      	beq.n	80027ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e008      	b.n	80027ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e000      	b.n	80027d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40013400 	.word	0x40013400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	00010007 	.word	0x00010007

080027f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a1a      	ldr	r2, [r3, #32]
 8002816:	f241 1311 	movw	r3, #4369	; 0x1111
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10f      	bne.n	8002840 <HAL_TIM_Base_Stop_IT+0x48>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	f240 4344 	movw	r3, #1092	; 0x444
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_TIM_Base_Stop_IT+0x48>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d122      	bne.n	80028b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d11b      	bne.n	80028b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0202 	mvn.w	r2, #2
 8002882:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f905 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 800289e:	e005      	b.n	80028ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f8f7 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f908 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d122      	bne.n	8002906 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d11b      	bne.n	8002906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f06f 0204 	mvn.w	r2, #4
 80028d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f8db 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 80028f2:	e005      	b.n	8002900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f8cd 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8de 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d122      	bne.n	800295a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b08      	cmp	r3, #8
 8002920:	d11b      	bne.n	800295a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0208 	mvn.w	r2, #8
 800292a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2204      	movs	r2, #4
 8002930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8b1 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 8002946:	e005      	b.n	8002954 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8a3 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8b4 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b10      	cmp	r3, #16
 8002966:	d122      	bne.n	80029ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b10      	cmp	r3, #16
 8002974:	d11b      	bne.n	80029ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0210 	mvn.w	r2, #16
 800297e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2208      	movs	r2, #8
 8002984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f887 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
 800299a:	e005      	b.n	80029a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f879 	bl	8002a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f88a 	bl	8002abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10e      	bne.n	80029da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 0201 	mvn.w	r2, #1
 80029d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f001 fb53 	bl	8004080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d10e      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b80      	cmp	r3, #128	; 0x80
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f989 	bl	8002d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a14:	d10e      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d107      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f97c 	bl	8002d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f838 	bl	8002ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0220 	mvn.w	r2, #32
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f93c 	bl	8002d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <TIM_Base_SetConfig+0x104>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00f      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d00b      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <TIM_Base_SetConfig+0x108>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <TIM_Base_SetConfig+0x10c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <TIM_Base_SetConfig+0x110>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <TIM_Base_SetConfig+0x104>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01b      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d017      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <TIM_Base_SetConfig+0x108>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <TIM_Base_SetConfig+0x10c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <TIM_Base_SetConfig+0x110>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <TIM_Base_SetConfig+0x118>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_Base_SetConfig+0x11c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <TIM_Base_SetConfig+0x104>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0xe8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <TIM_Base_SetConfig+0x110>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0xe8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <TIM_Base_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0xe8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <TIM_Base_SetConfig+0x118>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0xe8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <TIM_Base_SetConfig+0x11c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40013400 	.word	0x40013400
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800

08002c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e063      	b.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d018      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8e:	d013      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	40013400 	.word	0x40013400
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40014000 	.word	0x40014000

08002d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e040      	b.n	8002dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fd08 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8c0 	bl	8002f04 <UART_SetConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa88 	bl	80032ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fb0f 	bl	80033f0 <UART_CheckIdleState>
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	f040 8082 	bne.w	8002efa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_UART_Transmit+0x26>
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07a      	b.n	8002efc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Transmit+0x38>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e073      	b.n	8002efc <HAL_UART_Transmit+0x120>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2221      	movs	r2, #33	; 0x21
 8002e28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7fd fe79 	bl	8000b20 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d108      	bne.n	8002e5c <HAL_UART_Transmit+0x80>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e003      	b.n	8002e64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e6c:	e02d      	b.n	8002eca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb02 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e039      	b.n	8002efc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	e008      	b.n	8002eb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1cb      	bne.n	8002e6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 face 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e005      	b.n	8002efc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f32:	f023 030c 	bic.w	r3, r3, #12
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	6979      	ldr	r1, [r7, #20]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4aae      	ldr	r2, [pc, #696]	; (8003238 <UART_SetConfig+0x334>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d120      	bne.n	8002fc6 <UART_SetConfig+0xc2>
 8002f84:	4bad      	ldr	r3, [pc, #692]	; (800323c <UART_SetConfig+0x338>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d817      	bhi.n	8002fc0 <UART_SetConfig+0xbc>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <UART_SetConfig+0x94>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002fb5 	.word	0x08002fb5
 8002fa0:	08002fbb 	.word	0x08002fbb
 8002fa4:	08002faf 	.word	0x08002faf
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e0b5      	b.n	800311a <UART_SetConfig+0x216>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e0b2      	b.n	800311a <UART_SetConfig+0x216>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e0af      	b.n	800311a <UART_SetConfig+0x216>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e0ac      	b.n	800311a <UART_SetConfig+0x216>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e0a9      	b.n	800311a <UART_SetConfig+0x216>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a9d      	ldr	r2, [pc, #628]	; (8003240 <UART_SetConfig+0x33c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d124      	bne.n	800301a <UART_SetConfig+0x116>
 8002fd0:	4b9a      	ldr	r3, [pc, #616]	; (800323c <UART_SetConfig+0x338>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fdc:	d011      	beq.n	8003002 <UART_SetConfig+0xfe>
 8002fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe2:	d817      	bhi.n	8003014 <UART_SetConfig+0x110>
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d011      	beq.n	800300e <UART_SetConfig+0x10a>
 8002fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fee:	d811      	bhi.n	8003014 <UART_SetConfig+0x110>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <UART_SetConfig+0xf8>
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d006      	beq.n	8003008 <UART_SetConfig+0x104>
 8002ffa:	e00b      	b.n	8003014 <UART_SetConfig+0x110>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e08b      	b.n	800311a <UART_SetConfig+0x216>
 8003002:	2302      	movs	r3, #2
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e088      	b.n	800311a <UART_SetConfig+0x216>
 8003008:	2304      	movs	r3, #4
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e085      	b.n	800311a <UART_SetConfig+0x216>
 800300e:	2308      	movs	r3, #8
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e082      	b.n	800311a <UART_SetConfig+0x216>
 8003014:	2310      	movs	r3, #16
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e07f      	b.n	800311a <UART_SetConfig+0x216>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a89      	ldr	r2, [pc, #548]	; (8003244 <UART_SetConfig+0x340>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d124      	bne.n	800306e <UART_SetConfig+0x16a>
 8003024:	4b85      	ldr	r3, [pc, #532]	; (800323c <UART_SetConfig+0x338>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800302c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003030:	d011      	beq.n	8003056 <UART_SetConfig+0x152>
 8003032:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003036:	d817      	bhi.n	8003068 <UART_SetConfig+0x164>
 8003038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800303c:	d011      	beq.n	8003062 <UART_SetConfig+0x15e>
 800303e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003042:	d811      	bhi.n	8003068 <UART_SetConfig+0x164>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <UART_SetConfig+0x14c>
 8003048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304c:	d006      	beq.n	800305c <UART_SetConfig+0x158>
 800304e:	e00b      	b.n	8003068 <UART_SetConfig+0x164>
 8003050:	2300      	movs	r3, #0
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e061      	b.n	800311a <UART_SetConfig+0x216>
 8003056:	2302      	movs	r3, #2
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e05e      	b.n	800311a <UART_SetConfig+0x216>
 800305c:	2304      	movs	r3, #4
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e05b      	b.n	800311a <UART_SetConfig+0x216>
 8003062:	2308      	movs	r3, #8
 8003064:	77fb      	strb	r3, [r7, #31]
 8003066:	e058      	b.n	800311a <UART_SetConfig+0x216>
 8003068:	2310      	movs	r3, #16
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e055      	b.n	800311a <UART_SetConfig+0x216>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <UART_SetConfig+0x344>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d124      	bne.n	80030c2 <UART_SetConfig+0x1be>
 8003078:	4b70      	ldr	r3, [pc, #448]	; (800323c <UART_SetConfig+0x338>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003084:	d011      	beq.n	80030aa <UART_SetConfig+0x1a6>
 8003086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800308a:	d817      	bhi.n	80030bc <UART_SetConfig+0x1b8>
 800308c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003090:	d011      	beq.n	80030b6 <UART_SetConfig+0x1b2>
 8003092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003096:	d811      	bhi.n	80030bc <UART_SetConfig+0x1b8>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <UART_SetConfig+0x1a0>
 800309c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a0:	d006      	beq.n	80030b0 <UART_SetConfig+0x1ac>
 80030a2:	e00b      	b.n	80030bc <UART_SetConfig+0x1b8>
 80030a4:	2300      	movs	r3, #0
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e037      	b.n	800311a <UART_SetConfig+0x216>
 80030aa:	2302      	movs	r3, #2
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e034      	b.n	800311a <UART_SetConfig+0x216>
 80030b0:	2304      	movs	r3, #4
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e031      	b.n	800311a <UART_SetConfig+0x216>
 80030b6:	2308      	movs	r3, #8
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e02e      	b.n	800311a <UART_SetConfig+0x216>
 80030bc:	2310      	movs	r3, #16
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e02b      	b.n	800311a <UART_SetConfig+0x216>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <UART_SetConfig+0x348>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d124      	bne.n	8003116 <UART_SetConfig+0x212>
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <UART_SetConfig+0x338>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d8:	d011      	beq.n	80030fe <UART_SetConfig+0x1fa>
 80030da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030de:	d817      	bhi.n	8003110 <UART_SetConfig+0x20c>
 80030e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e4:	d011      	beq.n	800310a <UART_SetConfig+0x206>
 80030e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ea:	d811      	bhi.n	8003110 <UART_SetConfig+0x20c>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <UART_SetConfig+0x1f4>
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f4:	d006      	beq.n	8003104 <UART_SetConfig+0x200>
 80030f6:	e00b      	b.n	8003110 <UART_SetConfig+0x20c>
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e00d      	b.n	800311a <UART_SetConfig+0x216>
 80030fe:	2302      	movs	r3, #2
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e00a      	b.n	800311a <UART_SetConfig+0x216>
 8003104:	2304      	movs	r3, #4
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e007      	b.n	800311a <UART_SetConfig+0x216>
 800310a:	2308      	movs	r3, #8
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e004      	b.n	800311a <UART_SetConfig+0x216>
 8003110:	2310      	movs	r3, #16
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e001      	b.n	800311a <UART_SetConfig+0x216>
 8003116:	2310      	movs	r3, #16
 8003118:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d15c      	bne.n	80031de <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d827      	bhi.n	800317a <UART_SetConfig+0x276>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x22c>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003155 	.word	0x08003155
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800317b 	.word	0x0800317b
 8003140:	0800316b 	.word	0x0800316b
 8003144:	0800317b 	.word	0x0800317b
 8003148:	0800317b 	.word	0x0800317b
 800314c:	0800317b 	.word	0x0800317b
 8003150:	08003173 	.word	0x08003173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7ff f89a 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003158:	61b8      	str	r0, [r7, #24]
        break;
 800315a:	e013      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff f8b8 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8003160:	61b8      	str	r0, [r7, #24]
        break;
 8003162:	e00f      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <UART_SetConfig+0x34c>)
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7ff f819 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800316e:	61b8      	str	r0, [r7, #24]
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77bb      	strb	r3, [r7, #30]
        break;
 8003182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8085 	beq.w	8003296 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	005a      	lsls	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d916      	bls.n	80031d8 <UART_SetConfig+0x2d4>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b0:	d212      	bcs.n	80031d8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	89fa      	ldrh	r2, [r7, #14]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	e05e      	b.n	8003296 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	77bb      	strb	r3, [r7, #30]
 80031dc:	e05b      	b.n	8003296 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d837      	bhi.n	8003254 <UART_SetConfig+0x350>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x2e8>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003255 	.word	0x08003255
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003255 	.word	0x08003255
 8003204:	08003255 	.word	0x08003255
 8003208:	08003255 	.word	0x08003255
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff f83c 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e022      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff f85a 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e01e      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <UART_SetConfig+0x34c>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e01b      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe ffbb 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e017      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e013      	b.n	800325e <UART_SetConfig+0x35a>
 8003236:	bf00      	nop
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40004400 	.word	0x40004400
 8003244:	40004800 	.word	0x40004800
 8003248:	40004c00 	.word	0x40004c00
 800324c:	40005000 	.word	0x40005000
 8003250:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	77bb      	strb	r3, [r7, #30]
        break;
 800325c:	bf00      	nop
    }

    if (pclk != 0U)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	085a      	lsrs	r2, r3, #1
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d908      	bls.n	8003292 <UART_SetConfig+0x38e>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d204      	bcs.n	8003292 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e001      	b.n	8003296 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033aa:	d10a      	bne.n	80033c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003400:	f7fd fb8e 	bl	8000b20 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d10e      	bne.n	8003432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f82d 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e023      	b.n	800347a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d10e      	bne.n	800345e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f817 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e00d      	b.n	800347a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003492:	e05e      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	d05a      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349c:	f7fd fb40 	bl	8000b20 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d302      	bcc.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11b      	bne.n	80034ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e043      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02c      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003506:	d124      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003510:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003520:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d091      	beq.n	8003494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <KeccakP400_Initialize>:
};

/* ---------------------------------------------------------------- */

void KeccakP400_Initialize(void *state)
{
 800357a:	b508      	push	{r3, lr}
    memset(state, 0, nrLanes * sizeof(tKeccakLane));
 800357c:	2232      	movs	r2, #50	; 0x32
 800357e:	2100      	movs	r1, #0
 8003580:	f000 feb8 	bl	80042f4 <memset>
}
 8003584:	bd08      	pop	{r3, pc}
	...

08003588 <KeccakP400_AddBytes>:
}

/* ---------------------------------------------------------------- */

void KeccakP400_AddBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 8003588:	b510      	push	{r4, lr}
    unsigned int i;

    assert(offset < 50);
 800358a:	2a31      	cmp	r2, #49	; 0x31
 800358c:	d810      	bhi.n	80035b0 <KeccakP400_AddBytes+0x28>
    assert(offset+length <= 50);
 800358e:	18d4      	adds	r4, r2, r3
 8003590:	2c32      	cmp	r4, #50	; 0x32
 8003592:	d813      	bhi.n	80035bc <KeccakP400_AddBytes+0x34>
    for(i=0; i<length; i++)
 8003594:	b15b      	cbz	r3, 80035ae <KeccakP400_AddBytes+0x26>
 8003596:	3a01      	subs	r2, #1
 8003598:	4410      	add	r0, r2
 800359a:	3901      	subs	r1, #1
 800359c:	18cc      	adds	r4, r1, r3
        ((unsigned char *)state)[offset+i] ^= data[i];
 800359e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80035a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80035a6:	4053      	eors	r3, r2
 80035a8:	7003      	strb	r3, [r0, #0]
    for(i=0; i<length; i++)
 80035aa:	42a1      	cmp	r1, r4
 80035ac:	d1f7      	bne.n	800359e <KeccakP400_AddBytes+0x16>
}
 80035ae:	bd10      	pop	{r4, pc}
    assert(offset < 50);
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <KeccakP400_AddBytes+0x40>)
 80035b2:	4a06      	ldr	r2, [pc, #24]	; (80035cc <KeccakP400_AddBytes+0x44>)
 80035b4:	2155      	movs	r1, #85	; 0x55
 80035b6:	4806      	ldr	r0, [pc, #24]	; (80035d0 <KeccakP400_AddBytes+0x48>)
 80035b8:	f000 fe26 	bl	8004208 <__assert_func>
    assert(offset+length <= 50);
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <KeccakP400_AddBytes+0x4c>)
 80035be:	4a03      	ldr	r2, [pc, #12]	; (80035cc <KeccakP400_AddBytes+0x44>)
 80035c0:	2156      	movs	r1, #86	; 0x56
 80035c2:	4803      	ldr	r0, [pc, #12]	; (80035d0 <KeccakP400_AddBytes+0x48>)
 80035c4:	f000 fe20 	bl	8004208 <__assert_func>
 80035c8:	0800567c 	.word	0x0800567c
 80035cc:	08005730 	.word	0x08005730
 80035d0:	08005688 	.word	0x08005688
 80035d4:	0800571c 	.word	0x0800571c

080035d8 <KeccakP400_OverwriteBytes>:

/* ---------------------------------------------------------------- */

void KeccakP400_OverwriteBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 80035d8:	b510      	push	{r4, lr}
 80035da:	4614      	mov	r4, r2
    assert(offset < 50);
 80035dc:	2a31      	cmp	r2, #49	; 0x31
 80035de:	d807      	bhi.n	80035f0 <KeccakP400_OverwriteBytes+0x18>
 80035e0:	461a      	mov	r2, r3
    assert(offset+length <= 50);
 80035e2:	18e3      	adds	r3, r4, r3
 80035e4:	2b32      	cmp	r3, #50	; 0x32
 80035e6:	d809      	bhi.n	80035fc <KeccakP400_OverwriteBytes+0x24>
    memcpy((unsigned char*)state+offset, data, length);
 80035e8:	4420      	add	r0, r4
 80035ea:	f000 fe75 	bl	80042d8 <memcpy>
}
 80035ee:	bd10      	pop	{r4, pc}
    assert(offset < 50);
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <KeccakP400_OverwriteBytes+0x30>)
 80035f2:	4a06      	ldr	r2, [pc, #24]	; (800360c <KeccakP400_OverwriteBytes+0x34>)
 80035f4:	215f      	movs	r1, #95	; 0x5f
 80035f6:	4806      	ldr	r0, [pc, #24]	; (8003610 <KeccakP400_OverwriteBytes+0x38>)
 80035f8:	f000 fe06 	bl	8004208 <__assert_func>
    assert(offset+length <= 50);
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <KeccakP400_OverwriteBytes+0x3c>)
 80035fe:	4a03      	ldr	r2, [pc, #12]	; (800360c <KeccakP400_OverwriteBytes+0x34>)
 8003600:	2160      	movs	r1, #96	; 0x60
 8003602:	4803      	ldr	r0, [pc, #12]	; (8003610 <KeccakP400_OverwriteBytes+0x38>)
 8003604:	f000 fe00 	bl	8004208 <__assert_func>
 8003608:	0800567c 	.word	0x0800567c
 800360c:	08005744 	.word	0x08005744
 8003610:	08005688 	.word	0x08005688
 8003614:	0800571c 	.word	0x0800571c

08003618 <KeccakP400_Permute_Nrounds>:
static void pi(tKeccakLane *A);
static void chi(tKeccakLane *A);
static void iota(tKeccakLane *A, unsigned int indexRound);

void KeccakP400_Permute_Nrounds(void *state, unsigned int nrounds)
{
 8003618:	b508      	push	{r3, lr}
#if (PLATFORM_BYTE_ORDER != IS_LITTLE_ENDIAN)
    tKeccakLane stateAsWords[nrLanes];
#endif

#if (PLATFORM_BYTE_ORDER == IS_LITTLE_ENDIAN)
    KeccakP400OnWords((tKeccakLane*)state, nrounds);
 800361a:	f000 f801 	bl	8003620 <KeccakP400OnWords>
#else
    fromBytesToWords(stateAsWords, (const unsigned char *)state);
    KeccakP400OnWords(stateAsWords, nrounds);
    fromWordsToBytes((unsigned char *)state, stateAsWords);
#endif
}
 800361e:	bd08      	pop	{r3, pc}

08003620 <KeccakP400OnWords>:
    fromWordsToBytes((unsigned char *)state, stateAsWords);
#endif
}

void KeccakP400OnWords(tKeccakLane *state, unsigned int nrRounds)
{
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4605      	mov	r5, r0
    unsigned int i;
    for(i=(maxNrRounds-nrRounds); i<maxNrRounds; i++)
 8003624:	f1c1 0414 	rsb	r4, r1, #20
 8003628:	2c13      	cmp	r4, #19
 800362a:	d806      	bhi.n	800363a <KeccakP400OnWords+0x1a>
        KeccakP400Round(state, i);
 800362c:	4621      	mov	r1, r4
 800362e:	4628      	mov	r0, r5
 8003630:	f000 f804 	bl	800363c <KeccakP400Round>
    for(i=(maxNrRounds-nrRounds); i<maxNrRounds; i++)
 8003634:	3401      	adds	r4, #1
 8003636:	2c14      	cmp	r4, #20
 8003638:	d1f8      	bne.n	800362c <KeccakP400OnWords+0xc>
}
 800363a:	bd38      	pop	{r3, r4, r5, pc}

0800363c <KeccakP400Round>:

void KeccakP400Round(tKeccakLane *state, unsigned int indexRound)
{
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	460d      	mov	r5, r1
    theta(state);
 8003642:	f000 f80f 	bl	8003664 <theta>
    rho(state);
 8003646:	4620      	mov	r0, r4
 8003648:	f000 f886 	bl	8003758 <rho>
    pi(state);
 800364c:	4620      	mov	r0, r4
 800364e:	f000 f8bd 	bl	80037cc <pi>
    chi(state);
 8003652:	4620      	mov	r0, r4
 8003654:	f000 f914 	bl	8003880 <chi>
    iota(state, indexRound);
 8003658:	4629      	mov	r1, r5
 800365a:	4620      	mov	r0, r4
 800365c:	f000 f966 	bl	800392c <iota>
}
 8003660:	bd38      	pop	{r3, r4, r5, pc}
	...

08003664 <theta>:

#define ROL16(a, offset) ((offset != 0) ? ((((tKeccakLane)a) << offset) ^ (((tKeccakLane)a) >> (sizeof(tKeccakLane)*8-offset))) : a)

static void theta(tKeccakLane *A)
{
 8003664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af03      	add	r7, sp, #12
    unsigned int x, y;
    tKeccakLane C[5], D[5];

    for(x=0; x<5; x++) {
 800366c:	2600      	movs	r6, #0
        C[x] = 0;
 800366e:	46b4      	mov	ip, r6
        for(y=0; y<5; y++)
            C[x] ^= A[index(x, y)];
 8003670:	4d38      	ldr	r5, [pc, #224]	; (8003754 <theta+0xf0>)
 8003672:	e004      	b.n	800367e <theta+0x1a>
 8003674:	f82e 1c02 	strh.w	r1, [lr, #-2]
    for(x=0; x<5; x++) {
 8003678:	3601      	adds	r6, #1
 800367a:	2e05      	cmp	r6, #5
 800367c:	d01d      	beq.n	80036ba <theta+0x56>
        C[x] = 0;
 800367e:	f827 cb02 	strh.w	ip, [r7], #2
 8003682:	46be      	mov	lr, r7
 8003684:	f837 1c02 	ldrh.w	r1, [r7, #-2]
            C[x] ^= A[index(x, y)];
 8003688:	fba5 2306 	umull	r2, r3, r5, r6
 800368c:	f023 0403 	bic.w	r4, r3, #3
 8003690:	eb04 0493 	add.w	r4, r4, r3, lsr #2
 8003694:	1b34      	subs	r4, r6, r4
        for(y=0; y<5; y++)
 8003696:	4662      	mov	r2, ip
            C[x] ^= A[index(x, y)];
 8003698:	fba5 3802 	umull	r3, r8, r5, r2
 800369c:	f028 0303 	bic.w	r3, r8, #3
 80036a0:	eb03 0398 	add.w	r3, r3, r8, lsr #2
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036aa:	4423      	add	r3, r4
 80036ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80036b0:	4059      	eors	r1, r3
        for(y=0; y<5; y++)
 80036b2:	3201      	adds	r2, #1
 80036b4:	2a05      	cmp	r2, #5
 80036b6:	d1ef      	bne.n	8003698 <theta+0x34>
 80036b8:	e7dc      	b.n	8003674 <theta+0x10>
 80036ba:	46ec      	mov	ip, sp
    for(x=0; x<5; x++) {
 80036bc:	4664      	mov	r4, ip
    }
    for(x=0; x<5; x++)
 80036be:	2100      	movs	r1, #0
        D[x] = ROL16(C[(x+1)%5], 1) ^ C[(x+4)%5];
 80036c0:	4d24      	ldr	r5, [pc, #144]	; (8003754 <theta+0xf0>)
 80036c2:	460b      	mov	r3, r1
 80036c4:	3101      	adds	r1, #1
 80036c6:	fba5 2601 	umull	r2, r6, r5, r1
 80036ca:	f026 0203 	bic.w	r2, r6, #3
 80036ce:	eb02 0296 	add.w	r2, r2, r6, lsr #2
 80036d2:	1a8a      	subs	r2, r1, r2
 80036d4:	ae06      	add	r6, sp, #24
 80036d6:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80036da:	f832 6c0c 	ldrh.w	r6, [r2, #-12]
 80036de:	3304      	adds	r3, #4
 80036e0:	fba5 2703 	umull	r2, r7, r5, r3
 80036e4:	f027 0203 	bic.w	r2, r7, #3
 80036e8:	eb02 0297 	add.w	r2, r2, r7, lsr #2
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	aa06      	add	r2, sp, #24
 80036f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80036f4:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80036f8:	ea83 33d6 	eor.w	r3, r3, r6, lsr #15
 80036fc:	ea83 0346 	eor.w	r3, r3, r6, lsl #1
 8003700:	f824 3b02 	strh.w	r3, [r4], #2
    for(x=0; x<5; x++)
 8003704:	2905      	cmp	r1, #5
 8003706:	d1dc      	bne.n	80036c2 <theta+0x5e>
    for(x=0; x<5; x++)
 8003708:	2700      	movs	r7, #0
        for(y=0; y<5; y++)
            A[index(x, y)] ^= D[x];
 800370a:	4d12      	ldr	r5, [pc, #72]	; (8003754 <theta+0xf0>)
 800370c:	e002      	b.n	8003714 <theta+0xb0>
    for(x=0; x<5; x++)
 800370e:	3701      	adds	r7, #1
 8003710:	2f05      	cmp	r7, #5
 8003712:	d01c      	beq.n	800374e <theta+0xea>
            A[index(x, y)] ^= D[x];
 8003714:	fba5 2307 	umull	r2, r3, r5, r7
 8003718:	f023 0403 	bic.w	r4, r3, #3
 800371c:	eb04 0493 	add.w	r4, r4, r3, lsr #2
 8003720:	1b3c      	subs	r4, r7, r4
 8003722:	f83c 6b02 	ldrh.w	r6, [ip], #2
        for(y=0; y<5; y++)
 8003726:	2200      	movs	r2, #0
            A[index(x, y)] ^= D[x];
 8003728:	fba5 3102 	umull	r3, r1, r5, r2
 800372c:	f021 0303 	bic.w	r3, r1, #3
 8003730:	eb03 0391 	add.w	r3, r3, r1, lsr #2
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800373a:	4423      	add	r3, r4
 800373c:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8003740:	4071      	eors	r1, r6
 8003742:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
        for(y=0; y<5; y++)
 8003746:	3201      	adds	r2, #1
 8003748:	2a05      	cmp	r2, #5
 800374a:	d1ed      	bne.n	8003728 <theta+0xc4>
 800374c:	e7df      	b.n	800370e <theta+0xaa>
}
 800374e:	b006      	add	sp, #24
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003754:	cccccccd 	.word	0xcccccccd

08003758 <rho>:

static void rho(tKeccakLane *A)
{
 8003758:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned int x, y;

    for(x=0; x<5; x++) for(y=0; y<5; y++)
 800375a:	2700      	movs	r7, #0
        A[index(x, y)] = ROL16(A[index(x, y)], KeccakRhoOffsets[index(x, y)]);
 800375c:	4d19      	ldr	r5, [pc, #100]	; (80037c4 <rho+0x6c>)
 800375e:	4e1a      	ldr	r6, [pc, #104]	; (80037c8 <rho+0x70>)
 8003760:	e026      	b.n	80037b0 <rho+0x58>
 8003762:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8003766:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 800376a:	3201      	adds	r2, #1
 800376c:	2a05      	cmp	r2, #5
 800376e:	d01c      	beq.n	80037aa <rho+0x52>
        A[index(x, y)] = ROL16(A[index(x, y)], KeccakRhoOffsets[index(x, y)]);
 8003770:	fba5 3102 	umull	r3, r1, r5, r2
 8003774:	f021 0303 	bic.w	r3, r1, #3
 8003778:	eb03 0391 	add.w	r3, r3, r1, lsr #2
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003782:	4423      	add	r3, r4
 8003784:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003788:	2900      	cmp	r1, #0
 800378a:	d0ea      	beq.n	8003762 <rho+0xa>
 800378c:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
 8003790:	fa0e fc01 	lsl.w	ip, lr, r1
 8003794:	fa1f fe8e 	uxth.w	lr, lr
 8003798:	4249      	negs	r1, r1
 800379a:	f001 010f 	and.w	r1, r1, #15
 800379e:	fa2e f101 	lsr.w	r1, lr, r1
 80037a2:	ea4c 0101 	orr.w	r1, ip, r1
 80037a6:	b289      	uxth	r1, r1
 80037a8:	e7dd      	b.n	8003766 <rho+0xe>
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 80037aa:	3701      	adds	r7, #1
 80037ac:	2f05      	cmp	r7, #5
 80037ae:	d008      	beq.n	80037c2 <rho+0x6a>
        A[index(x, y)] = ROL16(A[index(x, y)], KeccakRhoOffsets[index(x, y)]);
 80037b0:	fba5 2307 	umull	r2, r3, r5, r7
 80037b4:	f023 0403 	bic.w	r4, r3, #3
 80037b8:	eb04 0493 	add.w	r4, r4, r3, lsr #2
 80037bc:	1b3c      	subs	r4, r7, r4
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 80037be:	2200      	movs	r2, #0
 80037c0:	e7d6      	b.n	8003770 <rho+0x18>
}
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c4:	cccccccd 	.word	0xcccccccd
 80037c8:	08005618 	.word	0x08005618

080037cc <pi>:

static void pi(tKeccakLane *A)
{
 80037cc:	b4f0      	push	{r4, r5, r6, r7}
 80037ce:	b08e      	sub	sp, #56	; 0x38
    unsigned int x, y;
    tKeccakLane tempA[25];

    for(x=0; x<5; x++) for(y=0; y<5; y++)
 80037d0:	2600      	movs	r6, #0
        tempA[index(x, y)] = A[index(x, y)];
 80037d2:	4d2a      	ldr	r5, [pc, #168]	; (800387c <pi+0xb0>)
 80037d4:	e002      	b.n	80037dc <pi+0x10>
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 80037d6:	3601      	adds	r6, #1
 80037d8:	2e05      	cmp	r6, #5
 80037da:	d049      	beq.n	8003870 <pi+0xa4>
        tempA[index(x, y)] = A[index(x, y)];
 80037dc:	fba5 2306 	umull	r2, r3, r5, r6
 80037e0:	f023 0403 	bic.w	r4, r3, #3
 80037e4:	eb04 0493 	add.w	r4, r4, r3, lsr #2
 80037e8:	1b34      	subs	r4, r6, r4
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 80037ea:	2200      	movs	r2, #0
        tempA[index(x, y)] = A[index(x, y)];
 80037ec:	fba5 3102 	umull	r3, r1, r5, r2
 80037f0:	f021 0303 	bic.w	r3, r1, #3
 80037f4:	eb03 0391 	add.w	r3, r3, r1, lsr #2
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037fe:	4423      	add	r3, r4
 8003800:	a90e      	add	r1, sp, #56	; 0x38
 8003802:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003806:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800380a:	f821 3c34 	strh.w	r3, [r1, #-52]
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 800380e:	3201      	adds	r2, #1
 8003810:	2a05      	cmp	r2, #5
 8003812:	d1eb      	bne.n	80037ec <pi+0x20>
 8003814:	e7df      	b.n	80037d6 <pi+0xa>
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 8003816:	3701      	adds	r7, #1
 8003818:	2f05      	cmp	r7, #5
 800381a:	d02c      	beq.n	8003876 <pi+0xaa>
        A[index(0*x+1*y, 2*x+3*y)] = tempA[index(x, y)];
 800381c:	fba5 2307 	umull	r2, r3, r5, r7
 8003820:	f023 0603 	bic.w	r6, r3, #3
 8003824:	eb06 0693 	add.w	r6, r6, r3, lsr #2
 8003828:	1bbe      	subs	r6, r7, r6
 800382a:	007c      	lsls	r4, r7, #1
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 800382c:	2100      	movs	r1, #0
        A[index(0*x+1*y, 2*x+3*y)] = tempA[index(x, y)];
 800382e:	fba5 3201 	umull	r3, r2, r5, r1
 8003832:	f022 0303 	bic.w	r3, r2, #3
 8003836:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 800383a:	1acb      	subs	r3, r1, r3
 800383c:	fba5 2c04 	umull	r2, ip, r5, r4
 8003840:	f02c 0203 	bic.w	r2, ip, #3
 8003844:	eb02 029c 	add.w	r2, r2, ip, lsr #2
 8003848:	1aa2      	subs	r2, r4, r2
 800384a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800384e:	441a      	add	r2, r3
 8003850:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003854:	4433      	add	r3, r6
 8003856:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800385a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800385e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8003862:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
    for(x=0; x<5; x++) for(y=0; y<5; y++)
 8003866:	3101      	adds	r1, #1
 8003868:	3403      	adds	r4, #3
 800386a:	2905      	cmp	r1, #5
 800386c:	d1df      	bne.n	800382e <pi+0x62>
 800386e:	e7d2      	b.n	8003816 <pi+0x4a>
 8003870:	2700      	movs	r7, #0
        A[index(0*x+1*y, 2*x+3*y)] = tempA[index(x, y)];
 8003872:	4d02      	ldr	r5, [pc, #8]	; (800387c <pi+0xb0>)
 8003874:	e7d2      	b.n	800381c <pi+0x50>
}
 8003876:	b00e      	add	sp, #56	; 0x38
 8003878:	bcf0      	pop	{r4, r5, r6, r7}
 800387a:	4770      	bx	lr
 800387c:	cccccccd 	.word	0xcccccccd

08003880 <chi>:

static void chi(tKeccakLane *A)
{
 8003880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003884:	b085      	sub	sp, #20
    unsigned int x, y;
    tKeccakLane C[5];

    for(y=0; y<5; y++) {
 8003886:	2600      	movs	r6, #0
        for(x=0; x<5; x++)
            C[x] = A[index(x, y)] ^ ((~A[index(x+1, y)]) & A[index(x+2, y)]);
 8003888:	4c27      	ldr	r4, [pc, #156]	; (8003928 <chi+0xa8>)
 800388a:	e002      	b.n	8003892 <chi+0x12>
    for(y=0; y<5; y++) {
 800388c:	3601      	adds	r6, #1
 800388e:	2e05      	cmp	r6, #5
 8003890:	d046      	beq.n	8003920 <chi+0xa0>
            C[x] = A[index(x, y)] ^ ((~A[index(x+1, y)]) & A[index(x+2, y)]);
 8003892:	fba4 2306 	umull	r2, r3, r4, r6
 8003896:	f023 0103 	bic.w	r1, r3, #3
 800389a:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 800389e:	1a71      	subs	r1, r6, r1
 80038a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80038a4:	ad01      	add	r5, sp, #4
 80038a6:	46ae      	mov	lr, r5
        for(x=0; x<5; x++)
 80038a8:	2200      	movs	r2, #0
            C[x] = A[index(x, y)] ^ ((~A[index(x+1, y)]) & A[index(x+2, y)]);
 80038aa:	fba4 3702 	umull	r3, r7, r4, r2
 80038ae:	f027 0303 	bic.w	r3, r7, #3
 80038b2:	eb03 0397 	add.w	r3, r3, r7, lsr #2
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	440b      	add	r3, r1
 80038ba:	f930 c013 	ldrsh.w	ip, [r0, r3, lsl #1]
 80038be:	4613      	mov	r3, r2
 80038c0:	3201      	adds	r2, #1
 80038c2:	fba4 7802 	umull	r7, r8, r4, r2
 80038c6:	f028 0703 	bic.w	r7, r8, #3
 80038ca:	eb07 0798 	add.w	r7, r7, r8, lsr #2
 80038ce:	1bd7      	subs	r7, r2, r7
 80038d0:	440f      	add	r7, r1
 80038d2:	f830 7017 	ldrh.w	r7, [r0, r7, lsl #1]
 80038d6:	3302      	adds	r3, #2
 80038d8:	fba4 8903 	umull	r8, r9, r4, r3
 80038dc:	f029 0803 	bic.w	r8, r9, #3
 80038e0:	eb08 0899 	add.w	r8, r8, r9, lsr #2
 80038e4:	eba3 0308 	sub.w	r3, r3, r8
 80038e8:	440b      	add	r3, r1
 80038ea:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80038ee:	ea23 0307 	bic.w	r3, r3, r7
 80038f2:	ea8c 0c03 	eor.w	ip, ip, r3
 80038f6:	f82e cb02 	strh.w	ip, [lr], #2
        for(x=0; x<5; x++)
 80038fa:	2a05      	cmp	r2, #5
 80038fc:	d1d5      	bne.n	80038aa <chi+0x2a>
        for(x=0; x<5; x++)
 80038fe:	2200      	movs	r2, #0
            A[index(x, y)] = C[x];
 8003900:	f835 cb02 	ldrh.w	ip, [r5], #2
 8003904:	fba4 3702 	umull	r3, r7, r4, r2
 8003908:	f027 0303 	bic.w	r3, r7, #3
 800390c:	eb03 0397 	add.w	r3, r3, r7, lsr #2
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	440b      	add	r3, r1
 8003914:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
        for(x=0; x<5; x++)
 8003918:	3201      	adds	r2, #1
 800391a:	2a05      	cmp	r2, #5
 800391c:	d1f0      	bne.n	8003900 <chi+0x80>
 800391e:	e7b5      	b.n	800388c <chi+0xc>
    }
}
 8003920:	b005      	add	sp, #20
 8003922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003926:	bf00      	nop
 8003928:	cccccccd 	.word	0xcccccccd

0800392c <iota>:

static void iota(tKeccakLane *A, unsigned int indexRound)
{
    A[index(0, 0)] ^= KeccakRoundConstants[indexRound];
 800392c:	8803      	ldrh	r3, [r0, #0]
 800392e:	4a03      	ldr	r2, [pc, #12]	; (800393c <iota+0x10>)
 8003930:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003934:	4053      	eors	r3, r2
 8003936:	8003      	strh	r3, [r0, #0]
}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	080055f0 	.word	0x080055f0

08003940 <KeccakP400_ExtractBytes>:

/* ---------------------------------------------------------------- */

void KeccakP400_ExtractBytes(const void *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 8003940:	b520      	push	{r5, lr}
 8003942:	4605      	mov	r5, r0
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
    assert(offset < 50);
 8003948:	2a31      	cmp	r2, #49	; 0x31
 800394a:	d807      	bhi.n	800395c <KeccakP400_ExtractBytes+0x1c>
 800394c:	461a      	mov	r2, r3
    assert(offset+length <= 50);
 800394e:	18cb      	adds	r3, r1, r3
 8003950:	2b32      	cmp	r3, #50	; 0x32
 8003952:	d809      	bhi.n	8003968 <KeccakP400_ExtractBytes+0x28>
    memcpy(data, (unsigned char*)state+offset, length);
 8003954:	4429      	add	r1, r5
 8003956:	f000 fcbf 	bl	80042d8 <memcpy>
}
 800395a:	bd20      	pop	{r5, pc}
    assert(offset < 50);
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <KeccakP400_ExtractBytes+0x34>)
 800395e:	4a06      	ldr	r2, [pc, #24]	; (8003978 <KeccakP400_ExtractBytes+0x38>)
 8003960:	21e0      	movs	r1, #224	; 0xe0
 8003962:	4806      	ldr	r0, [pc, #24]	; (800397c <KeccakP400_ExtractBytes+0x3c>)
 8003964:	f000 fc50 	bl	8004208 <__assert_func>
    assert(offset+length <= 50);
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <KeccakP400_ExtractBytes+0x40>)
 800396a:	4a03      	ldr	r2, [pc, #12]	; (8003978 <KeccakP400_ExtractBytes+0x38>)
 800396c:	21e1      	movs	r1, #225	; 0xe1
 800396e:	4803      	ldr	r0, [pc, #12]	; (800397c <KeccakP400_ExtractBytes+0x3c>)
 8003970:	f000 fc4a 	bl	8004208 <__assert_func>
 8003974:	0800567c 	.word	0x0800567c
 8003978:	08005760 	.word	0x08005760
 800397c:	08005688 	.word	0x08005688
 8003980:	0800571c 	.word	0x0800571c

08003984 <crypto_aead_decrypt>:
	unsigned char *nsec,
	const unsigned char *c,unsigned long long clen,
	const unsigned char *ad,unsigned long long adlen,
	const unsigned char *npub,
	const unsigned char *k
){
 8003984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003988:	b08d      	sub	sp, #52	; 0x34
 800398a:	4606      	mov	r6, r0
 800398c:	460c      	mov	r4, r1
 800398e:	461d      	mov	r5, r3
 8003990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003992:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003996:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
	// Plaintext length is clen - tag length
	*mlen = clen-ISAP_TAG_SZ;
 8003998:	3b10      	subs	r3, #16
 800399a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800399c:	f142 32ff 	adc.w	r2, r2, #4294967295
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	604a      	str	r2, [r1, #4]

	// Generate tag
	unsigned char tag[ISAP_TAG_SZ];
	isap_mac(k,npub,ad,adlen,c,*mlen,tag);
 80039a4:	a908      	add	r1, sp, #32
 80039a6:	9106      	str	r1, [sp, #24]
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	9205      	str	r2, [sp, #20]
 80039ac:	9502      	str	r5, [sp, #8]
 80039ae:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80039b2:	e9cd 2300 	strd	r2, r3, [sp]
 80039b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80039b8:	4641      	mov	r1, r8
 80039ba:	4638      	mov	r0, r7
 80039bc:	f000 f8ae 	bl	8003b1c <isap_mac>

	// Compare tag
	unsigned long eq_cnt = 0;
	for(size_t i = 0; i < ISAP_TAG_SZ; i++) {
		eq_cnt += (tag[i] == c[(*mlen)+i]);
 80039c0:	f8d4 e000 	ldr.w	lr, [r4]
 80039c4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80039c8:	f10d 021f 	add.w	r2, sp, #31
 80039cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80039d0:	4429      	add	r1, r5
 80039d2:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
	unsigned long eq_cnt = 0;
 80039d6:	2400      	movs	r4, #0
		eq_cnt += (tag[i] == c[(*mlen)+i]);
 80039d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80039dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80039e0:	4298      	cmp	r0, r3
 80039e2:	bf08      	it	eq
 80039e4:	3401      	addeq	r4, #1
	for(size_t i = 0; i < ISAP_TAG_SZ; i++) {
 80039e6:	4562      	cmp	r2, ip
 80039e8:	d1f6      	bne.n	80039d8 <crypto_aead_decrypt+0x54>
	}

	// Perform decryption if tag is correct
	if(eq_cnt == (unsigned long)ISAP_TAG_SZ){
 80039ea:	2c10      	cmp	r4, #16
 80039ec:	d10d      	bne.n	8003a0a <crypto_aead_decrypt+0x86>
		isap_enc(k,npub,c,*mlen,m);
 80039ee:	9602      	str	r6, [sp, #8]
 80039f0:	f8cd e000 	str.w	lr, [sp]
 80039f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80039f8:	462a      	mov	r2, r5
 80039fa:	4641      	mov	r1, r8
 80039fc:	4638      	mov	r0, r7
 80039fe:	f000 f955 	bl	8003cac <isap_enc>
		return 0;
 8003a02:	2000      	movs	r0, #0
	} else {
		return -1;
	}
}
 8003a04:	b00d      	add	sp, #52	; 0x34
 8003a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -1;
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0e:	e7f9      	b.n	8003a04 <crypto_aead_decrypt+0x80>

08003a10 <crypto_aead_encrypt>:
	const unsigned char *m,unsigned long long mlen,
	const unsigned char *ad,unsigned long long adlen,
	const unsigned char *nsec,
	const unsigned char *npub,
	const unsigned char *k
){
 8003a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	4605      	mov	r5, r0
 8003a18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003a1a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8003a1c:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8003a20:	9f16      	ldr	r7, [sp, #88]	; 0x58
    // Ciphertext length is mlen + tag length
    *clen = mlen+ISAP_TAG_SZ;
 8003a22:	f114 0010 	adds.w	r0, r4, #16
 8003a26:	f146 0300 	adc.w	r3, r6, #0
 8003a2a:	6008      	str	r0, [r1, #0]
 8003a2c:	604b      	str	r3, [r1, #4]

    // Encrypt plaintext
    isap_enc(k,npub,m,mlen,c);
 8003a2e:	9502      	str	r5, [sp, #8]
 8003a30:	9400      	str	r4, [sp, #0]
 8003a32:	9601      	str	r6, [sp, #4]
 8003a34:	4641      	mov	r1, r8
 8003a36:	4638      	mov	r0, r7
 8003a38:	f000 f938 	bl	8003cac <isap_enc>

    // Generate tag
    unsigned char *tag = c+mlen;
 8003a3c:	192b      	adds	r3, r5, r4
    isap_mac(k,npub,ad,adlen,c,mlen,tag);
 8003a3e:	9306      	str	r3, [sp, #24]
 8003a40:	9404      	str	r4, [sp, #16]
 8003a42:	9605      	str	r6, [sp, #20]
 8003a44:	9502      	str	r5, [sp, #8]
 8003a46:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a50:	4641      	mov	r1, r8
 8003a52:	4638      	mov	r0, r7
 8003a54:	f000 f862 	bl	8003b1c <isap_mac>
    return 0;
}
 8003a58:	2000      	movs	r0, #0
 8003a5a:	b008      	add	sp, #32
 8003a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a60 <isap_rk>:
	const unsigned char *iv,
	const unsigned char *in,
	const unsigned long long inlen,
	unsigned char *out,
	const unsigned long long outlen
){
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	b08f      	sub	sp, #60	; 0x3c
 8003a66:	4683      	mov	fp, r0
 8003a68:	4688      	mov	r8, r1
 8003a6a:	4615      	mov	r5, r2
 8003a6c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8003a70:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8003a72:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
	// Init State
	unsigned char state[ISAP_STATE_SZ];
	Permutation_Initialize(state);
 8003a76:	a801      	add	r0, sp, #4
 8003a78:	f000 f96c 	bl	8003d54 <Permutation_Initialize>
	Permutation_AddBytes(state,k,0,CRYPTO_KEYBYTES);
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4659      	mov	r1, fp
 8003a82:	a801      	add	r0, sp, #4
 8003a84:	f000 f96a 	bl	8003d5c <Permutation_AddBytes>
	Permutation_AddBytes(state,iv,CRYPTO_KEYBYTES,ISAP_IV_SZ);
 8003a88:	2308      	movs	r3, #8
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	a801      	add	r0, sp, #4
 8003a90:	f000 f964 	bl	8003d5c <Permutation_AddBytes>
	Permutation_Permute_Nrounds(state,ISAP_sK);
 8003a94:	210c      	movs	r1, #12
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f000 f968 	bl	8003d6c <Permutation_Permute_Nrounds>

	// Absorb
	for (size_t i = 0; i < inlen*8-1; i++){
 8003a9c:	00e3      	lsls	r3, r4, #3
 8003a9e:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
 8003aa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003aa6:	f112 36ff 	adds.w	r6, r2, #4294967295
 8003aaa:	f143 37ff 	adc.w	r7, r3, #4294967295
 8003aae:	2400      	movs	r4, #0
		size_t cur_byte_pos = i/8;
		size_t cur_bit_pos = 7-(i%8);
		unsigned char cur_bit = ((in[cur_byte_pos] >> (cur_bit_pos)) & 0x01) << 7;
		Permutation_AddBytes(state,(const unsigned char*)&cur_bit,0,1);
 8003ab0:	f04f 0801 	mov.w	r8, #1
		size_t cur_byte_pos = i/8;
 8003ab4:	08e3      	lsrs	r3, r4, #3
		unsigned char cur_bit = ((in[cur_byte_pos] >> (cur_bit_pos)) & 0x01) << 7;
 8003ab6:	5ceb      	ldrb	r3, [r5, r3]
		size_t cur_bit_pos = 7-(i%8);
 8003ab8:	43e2      	mvns	r2, r4
 8003aba:	f002 0207 	and.w	r2, r2, #7
		unsigned char cur_bit = ((in[cur_byte_pos] >> (cur_bit_pos)) & 0x01) << 7;
 8003abe:	4113      	asrs	r3, r2
 8003ac0:	01db      	lsls	r3, r3, #7
 8003ac2:	f88d 3002 	strb.w	r3, [sp, #2]
		Permutation_AddBytes(state,(const unsigned char*)&cur_bit,0,1);
 8003ac6:	4643      	mov	r3, r8
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f10d 0102 	add.w	r1, sp, #2
 8003ace:	a801      	add	r0, sp, #4
 8003ad0:	f000 f944 	bl	8003d5c <Permutation_AddBytes>
		Permutation_Permute_Nrounds(state,ISAP_sB);
 8003ad4:	210c      	movs	r1, #12
 8003ad6:	a801      	add	r0, sp, #4
 8003ad8:	f000 f948 	bl	8003d6c <Permutation_Permute_Nrounds>
	for (size_t i = 0; i < inlen*8-1; i++){
 8003adc:	3401      	adds	r4, #1
 8003ade:	2300      	movs	r3, #0
 8003ae0:	42bb      	cmp	r3, r7
 8003ae2:	bf08      	it	eq
 8003ae4:	42b4      	cmpeq	r4, r6
 8003ae6:	d3e5      	bcc.n	8003ab4 <isap_rk+0x54>
	}
	unsigned char cur_bit = ((in[inlen-1]) & 0x01) << 7;
 8003ae8:	444d      	add	r5, r9
 8003aea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003aee:	01db      	lsls	r3, r3, #7
 8003af0:	f88d 3003 	strb.w	r3, [sp, #3]
	Permutation_AddBytes(state,(const unsigned char*)&cur_bit,0,1);
 8003af4:	2301      	movs	r3, #1
 8003af6:	2200      	movs	r2, #0
 8003af8:	f10d 0103 	add.w	r1, sp, #3
 8003afc:	a801      	add	r0, sp, #4
 8003afe:	f000 f92d 	bl	8003d5c <Permutation_AddBytes>
	Permutation_Permute_Nrounds(state,ISAP_sK);
 8003b02:	210c      	movs	r1, #12
 8003b04:	a801      	add	r0, sp, #4
 8003b06:	f000 f931 	bl	8003d6c <Permutation_Permute_Nrounds>

	// Squeeze K*
	Permutation_ExtractBytes(state,out,0,outlen);
 8003b0a:	4653      	mov	r3, sl
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003b10:	a801      	add	r0, sp, #4
 8003b12:	f000 f92f 	bl	8003d74 <Permutation_ExtractBytes>
}
 8003b16:	b00f      	add	sp, #60	; 0x3c
 8003b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b1c <isap_mac>:
	const unsigned char *k,
	const unsigned char *npub,
	const unsigned char *ad, const unsigned long long adlen,
	const unsigned char *c, const unsigned long long clen,
	unsigned char *tag
){
 8003b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	b09f      	sub	sp, #124	; 0x7c
 8003b22:	4680      	mov	r8, r0
 8003b24:	468a      	mov	sl, r1
 8003b26:	4693      	mov	fp, r2
 8003b28:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
 8003b2c:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
 8003b30:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
	// Init State
	unsigned char state[ISAP_STATE_SZ];
	Permutation_Initialize(state);
 8003b34:	a811      	add	r0, sp, #68	; 0x44
 8003b36:	f000 f90d 	bl	8003d54 <Permutation_Initialize>
	Permutation_AddBytes(state,npub,0,CRYPTO_NPUBBYTES);
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4651      	mov	r1, sl
 8003b40:	a811      	add	r0, sp, #68	; 0x44
 8003b42:	f000 f90b 	bl	8003d5c <Permutation_AddBytes>
	Permutation_AddBytes(state,ISAP_IV_A,CRYPTO_NPUBBYTES,ISAP_IV_SZ);
 8003b46:	2308      	movs	r3, #8
 8003b48:	2210      	movs	r2, #16
 8003b4a:	4956      	ldr	r1, [pc, #344]	; (8003ca4 <isap_mac+0x188>)
 8003b4c:	a811      	add	r0, sp, #68	; 0x44
 8003b4e:	f000 f905 	bl	8003d5c <Permutation_AddBytes>
	Permutation_Permute_Nrounds(state,ISAP_sH);
 8003b52:	2114      	movs	r1, #20
 8003b54:	a811      	add	r0, sp, #68	; 0x44
 8003b56:	f000 f909 	bl	8003d6c <Permutation_Permute_Nrounds>

	// Absorb AD
	size_t rate_bytes_avail = ISAP_rH_SZ;
	unsigned char cur_ad;
	for (unsigned long long i = 0; i < adlen; i++){
 8003b5a:	ea54 0305 	orrs.w	r3, r4, r5
 8003b5e:	d06a      	beq.n	8003c36 <isap_mac+0x11a>
 8003b60:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003b64:	9307      	str	r3, [sp, #28]
 8003b66:	eb03 0a04 	add.w	sl, r3, r4
	size_t rate_bytes_avail = ISAP_rH_SZ;
 8003b6a:	2412      	movs	r4, #18
		if(rate_bytes_avail == 0){
			Permutation_Permute_Nrounds(state,ISAP_sH);
			rate_bytes_avail = ISAP_rH_SZ;
		}
		cur_ad = ad[i];
		Permutation_AddBytes(state,&cur_ad,ISAP_rH_SZ-rate_bytes_avail,1);
 8003b6c:	f04f 0b01 	mov.w	fp, #1
		cur_ad = ad[i];
 8003b70:	9d07      	ldr	r5, [sp, #28]
 8003b72:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003b76:	9507      	str	r5, [sp, #28]
 8003b78:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		Permutation_AddBytes(state,&cur_ad,ISAP_rH_SZ-rate_bytes_avail,1);
 8003b7c:	465b      	mov	r3, fp
 8003b7e:	f1c4 0212 	rsb	r2, r4, #18
 8003b82:	f10d 0143 	add.w	r1, sp, #67	; 0x43
 8003b86:	a811      	add	r0, sp, #68	; 0x44
 8003b88:	f000 f8e8 	bl	8003d5c <Permutation_AddBytes>
		rate_bytes_avail--;
 8003b8c:	3c01      	subs	r4, #1
	for (unsigned long long i = 0; i < adlen; i++){
 8003b8e:	45aa      	cmp	sl, r5
 8003b90:	d007      	beq.n	8003ba2 <isap_mac+0x86>
		if(rate_bytes_avail == 0){
 8003b92:	2c00      	cmp	r4, #0
 8003b94:	d1ec      	bne.n	8003b70 <isap_mac+0x54>
			Permutation_Permute_Nrounds(state,ISAP_sH);
 8003b96:	2114      	movs	r1, #20
 8003b98:	a811      	add	r0, sp, #68	; 0x44
 8003b9a:	f000 f8e7 	bl	8003d6c <Permutation_Permute_Nrounds>
			rate_bytes_avail = ISAP_rH_SZ;
 8003b9e:	2412      	movs	r4, #18
 8003ba0:	e7e6      	b.n	8003b70 <isap_mac+0x54>
	}

	// Absorb Padding: 0x80
	if(rate_bytes_avail == 0){
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d041      	beq.n	8003c2a <isap_mac+0x10e>
		Permutation_Permute_Nrounds(state,ISAP_sH);
		rate_bytes_avail = ISAP_rH_SZ;
	}
	unsigned char pad = 0x80;
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
	Permutation_AddBytes(state,&pad,ISAP_rH_SZ-rate_bytes_avail,1);
 8003bac:	2301      	movs	r3, #1
 8003bae:	f1c4 0212 	rsb	r2, r4, #18
 8003bb2:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8003bb6:	a811      	add	r0, sp, #68	; 0x44
 8003bb8:	f000 f8d0 	bl	8003d5c <Permutation_AddBytes>
	Permutation_Permute_Nrounds(state,ISAP_sH);
 8003bbc:	2114      	movs	r1, #20
 8003bbe:	a811      	add	r0, sp, #68	; 0x44
 8003bc0:	f000 f8d4 	bl	8003d6c <Permutation_Permute_Nrounds>

	// Domain Seperation ##\n");
	unsigned char dom_sep = 0x01;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
	Permutation_AddBytes(state,&dom_sep,ISAP_STATE_SZ-1,1);
 8003bca:	2231      	movs	r2, #49	; 0x31
 8003bcc:	f10d 0141 	add.w	r1, sp, #65	; 0x41
 8003bd0:	a811      	add	r0, sp, #68	; 0x44
 8003bd2:	f000 f8c3 	bl	8003d5c <Permutation_AddBytes>

	// Absorb C
	rate_bytes_avail = ISAP_rH_SZ;
	unsigned char cur_c;
	for (unsigned long long i = 0; i < clen; i++){
 8003bd6:	ea56 0307 	orrs.w	r3, r6, r7
	rate_bytes_avail = ISAP_rH_SZ;
 8003bda:	bf08      	it	eq
 8003bdc:	2412      	moveq	r4, #18
	for (unsigned long long i = 0; i < clen; i++){
 8003bde:	d02c      	beq.n	8003c3a <isap_mac+0x11e>
		cur_c = c[i];
 8003be0:	f899 3000 	ldrb.w	r3, [r9]
 8003be4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		Permutation_AddBytes(state,&cur_c,ISAP_rH_SZ-rate_bytes_avail,1);
 8003be8:	2301      	movs	r3, #1
 8003bea:	2200      	movs	r2, #0
 8003bec:	a910      	add	r1, sp, #64	; 0x40
 8003bee:	a811      	add	r0, sp, #68	; 0x44
 8003bf0:	f000 f8b4 	bl	8003d5c <Permutation_AddBytes>
 8003bf4:	464d      	mov	r5, r9
 8003bf6:	f109 39ff 	add.w	r9, r9, #4294967295
 8003bfa:	444e      	add	r6, r9
		rate_bytes_avail--;
 8003bfc:	2411      	movs	r4, #17
		Permutation_AddBytes(state,&cur_c,ISAP_rH_SZ-rate_bytes_avail,1);
 8003bfe:	2701      	movs	r7, #1
	for (unsigned long long i = 0; i < clen; i++){
 8003c00:	42b5      	cmp	r5, r6
 8003c02:	d01a      	beq.n	8003c3a <isap_mac+0x11e>
		cur_c = c[i];
 8003c04:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003c08:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		Permutation_AddBytes(state,&cur_c,ISAP_rH_SZ-rate_bytes_avail,1);
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	f1c4 0212 	rsb	r2, r4, #18
 8003c12:	a910      	add	r1, sp, #64	; 0x40
 8003c14:	a811      	add	r0, sp, #68	; 0x44
 8003c16:	f000 f8a1 	bl	8003d5c <Permutation_AddBytes>
		if(rate_bytes_avail == 0){
 8003c1a:	3c01      	subs	r4, #1
 8003c1c:	d1f0      	bne.n	8003c00 <isap_mac+0xe4>
			Permutation_Permute_Nrounds(state,ISAP_sH);
 8003c1e:	2114      	movs	r1, #20
 8003c20:	a811      	add	r0, sp, #68	; 0x44
 8003c22:	f000 f8a3 	bl	8003d6c <Permutation_Permute_Nrounds>
			rate_bytes_avail = ISAP_rH_SZ;
 8003c26:	2412      	movs	r4, #18
 8003c28:	e7ea      	b.n	8003c00 <isap_mac+0xe4>
		Permutation_Permute_Nrounds(state,ISAP_sH);
 8003c2a:	2114      	movs	r1, #20
 8003c2c:	a811      	add	r0, sp, #68	; 0x44
 8003c2e:	f000 f89d 	bl	8003d6c <Permutation_Permute_Nrounds>
		rate_bytes_avail = ISAP_rH_SZ;
 8003c32:	2412      	movs	r4, #18
 8003c34:	e7b7      	b.n	8003ba6 <isap_mac+0x8a>
	size_t rate_bytes_avail = ISAP_rH_SZ;
 8003c36:	2412      	movs	r4, #18
 8003c38:	e7b5      	b.n	8003ba6 <isap_mac+0x8a>
		}
	}

	// Absorb Padding: 0x80
	pad = 0x80;
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
	Permutation_AddBytes(state,&pad,ISAP_rH_SZ-rate_bytes_avail,1);
 8003c40:	2301      	movs	r3, #1
 8003c42:	f1c4 0212 	rsb	r2, r4, #18
 8003c46:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8003c4a:	a811      	add	r0, sp, #68	; 0x44
 8003c4c:	f000 f886 	bl	8003d5c <Permutation_AddBytes>
	Permutation_Permute_Nrounds(state,ISAP_sH);
 8003c50:	2114      	movs	r1, #20
 8003c52:	a811      	add	r0, sp, #68	; 0x44
 8003c54:	f000 f88a 	bl	8003d6c <Permutation_Permute_Nrounds>

	// Derive Ka*
	unsigned char y[CRYPTO_KEYBYTES];
	unsigned char ka_star[CRYPTO_KEYBYTES];
	Permutation_ExtractBytes(state,y,0,CRYPTO_KEYBYTES);
 8003c58:	2310      	movs	r3, #16
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	a90c      	add	r1, sp, #48	; 0x30
 8003c5e:	a811      	add	r0, sp, #68	; 0x44
 8003c60:	f000 f888 	bl	8003d74 <Permutation_ExtractBytes>
	isap_rk(k,ISAP_IV_KA,y,CRYPTO_KEYBYTES,ka_star,CRYPTO_KEYBYTES);
 8003c64:	2210      	movs	r2, #16
 8003c66:	2300      	movs	r3, #0
 8003c68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c6c:	ac08      	add	r4, sp, #32
 8003c6e:	9402      	str	r4, [sp, #8]
 8003c70:	e9cd 2300 	strd	r2, r3, [sp]
 8003c74:	aa0c      	add	r2, sp, #48	; 0x30
 8003c76:	490c      	ldr	r1, [pc, #48]	; (8003ca8 <isap_mac+0x18c>)
 8003c78:	4640      	mov	r0, r8
 8003c7a:	f7ff fef1 	bl	8003a60 <isap_rk>

	// Squeezing Tag
	Permutation_OverwriteBytes(state,ka_star,0,CRYPTO_KEYBYTES);
 8003c7e:	2310      	movs	r3, #16
 8003c80:	2200      	movs	r2, #0
 8003c82:	4621      	mov	r1, r4
 8003c84:	a811      	add	r0, sp, #68	; 0x44
 8003c86:	f000 f86d 	bl	8003d64 <Permutation_OverwriteBytes>
	Permutation_Permute_Nrounds(state,ISAP_sH);
 8003c8a:	2114      	movs	r1, #20
 8003c8c:	a811      	add	r0, sp, #68	; 0x44
 8003c8e:	f000 f86d 	bl	8003d6c <Permutation_Permute_Nrounds>
	Permutation_ExtractBytes(state,tag,0,CRYPTO_KEYBYTES);
 8003c92:	2310      	movs	r3, #16
 8003c94:	2200      	movs	r2, #0
 8003c96:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8003c98:	a811      	add	r0, sp, #68	; 0x44
 8003c9a:	f000 f86b 	bl	8003d74 <Permutation_ExtractBytes>
}
 8003c9e:	b01f      	add	sp, #124	; 0x7c
 8003ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca4:	08005778 	.word	0x08005778
 8003ca8:	08005780 	.word	0x08005780

08003cac <isap_enc>:
void isap_enc(
	const unsigned char *k,
	const unsigned char *npub,
	const unsigned char *m, const unsigned long long mlen,
	unsigned char *c
){
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	b095      	sub	sp, #84	; 0x54
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4615      	mov	r5, r2
 8003cb6:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
	// Derive Ke*
	unsigned char state[ISAP_STATE_SZ];
	isap_rk(k,ISAP_IV_KE,npub,CRYPTO_NPUBBYTES,state,ISAP_STATE_SZ-CRYPTO_NPUBBYTES);
 8003cba:	2222      	movs	r2, #34	; 0x22
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cc2:	f10d 081c 	add.w	r8, sp, #28
 8003cc6:	f8cd 8008 	str.w	r8, [sp, #8]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e9cd 2300 	strd	r2, r3, [sp]
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	491e      	ldr	r1, [pc, #120]	; (8003d50 <isap_enc+0xa4>)
 8003cd6:	f7ff fec3 	bl	8003a60 <isap_rk>
	Permutation_OverwriteBytes(state,npub,ISAP_STATE_SZ-CRYPTO_NPUBBYTES,CRYPTO_NPUBBYTES);
 8003cda:	2310      	movs	r3, #16
 8003cdc:	2222      	movs	r2, #34	; 0x22
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	f000 f83f 	bl	8003d64 <Permutation_OverwriteBytes>

	// Squeeze Keystream
	size_t key_bytes_avail = 0;
	for (unsigned long long i = 0; i < mlen; i++) {
 8003ce6:	ea56 0307 	orrs.w	r3, r6, r7
 8003cea:	d02e      	beq.n	8003d4a <isap_enc+0x9e>
 8003cec:	3d01      	subs	r5, #1
 8003cee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cf0:	f103 38ff 	add.w	r8, r3, #4294967295
 8003cf4:	eb05 0906 	add.w	r9, r5, r6
 8003cf8:	2400      	movs	r4, #0
 8003cfa:	4627      	mov	r7, r4
	size_t key_bytes_avail = 0;
 8003cfc:	4626      	mov	r6, r4
		if(key_bytes_avail == 0){
			Permutation_Permute_Nrounds(state,ISAP_sE);
			key_bytes_avail = ISAP_rH_SZ;
		}
		unsigned char keybyte;
		Permutation_ExtractBytes(state,&keybyte,i%ISAP_rH_SZ,1);
 8003cfe:	f04f 0a12 	mov.w	sl, #18
 8003d02:	f04f 0b00 	mov.w	fp, #0
 8003d06:	e01d      	b.n	8003d44 <isap_enc+0x98>
			Permutation_Permute_Nrounds(state,ISAP_sE);
 8003d08:	210c      	movs	r1, #12
 8003d0a:	a807      	add	r0, sp, #28
 8003d0c:	f000 f82e 	bl	8003d6c <Permutation_Permute_Nrounds>
			key_bytes_avail = ISAP_rH_SZ;
 8003d10:	2612      	movs	r6, #18
		Permutation_ExtractBytes(state,&keybyte,i%ISAP_rH_SZ,1);
 8003d12:	4652      	mov	r2, sl
 8003d14:	465b      	mov	r3, fp
 8003d16:	4620      	mov	r0, r4
 8003d18:	4639      	mov	r1, r7
 8003d1a:	f7fc fab1 	bl	8000280 <__aeabi_uldivmod>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f10d 011b 	add.w	r1, sp, #27
 8003d24:	a807      	add	r0, sp, #28
 8003d26:	f000 f825 	bl	8003d74 <Permutation_ExtractBytes>
		c[i] = m[i] ^ keybyte;
 8003d2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003d2e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003d32:	4053      	eors	r3, r2
 8003d34:	f808 3f01 	strb.w	r3, [r8, #1]!
		key_bytes_avail--;
 8003d38:	3e01      	subs	r6, #1
	for (unsigned long long i = 0; i < mlen; i++) {
 8003d3a:	3401      	adds	r4, #1
 8003d3c:	f147 0700 	adc.w	r7, r7, #0
 8003d40:	454d      	cmp	r5, r9
 8003d42:	d002      	beq.n	8003d4a <isap_enc+0x9e>
		if(key_bytes_avail == 0){
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	d1e4      	bne.n	8003d12 <isap_enc+0x66>
 8003d48:	e7de      	b.n	8003d08 <isap_enc+0x5c>
	}
}
 8003d4a:	b015      	add	sp, #84	; 0x54
 8003d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d50:	08005788 	.word	0x08005788

08003d54 <Permutation_Initialize>:
#include "isap.h"
#include "KeccakP-400-SnP.h"

void Permutation_Initialize(
	void *state
){
 8003d54:	b508      	push	{r3, lr}
	KeccakP400_Initialize(state);
 8003d56:	f7ff fc10 	bl	800357a <KeccakP400_Initialize>
}
 8003d5a:	bd08      	pop	{r3, pc}

08003d5c <Permutation_AddBytes>:
void Permutation_AddBytes(
	void *state,
	const unsigned char *data,
	unsigned int offset,
	unsigned int length
){
 8003d5c:	b508      	push	{r3, lr}
	KeccakP400_AddBytes(state,data,offset,length);
 8003d5e:	f7ff fc13 	bl	8003588 <KeccakP400_AddBytes>
}
 8003d62:	bd08      	pop	{r3, pc}

08003d64 <Permutation_OverwriteBytes>:
void Permutation_OverwriteBytes(
	void *state,
	const unsigned char *data,
	unsigned int offset,
	unsigned int length
){
 8003d64:	b508      	push	{r3, lr}
	KeccakP400_OverwriteBytes(state,data,offset,length);
 8003d66:	f7ff fc37 	bl	80035d8 <KeccakP400_OverwriteBytes>
}
 8003d6a:	bd08      	pop	{r3, pc}

08003d6c <Permutation_Permute_Nrounds>:

void Permutation_Permute_Nrounds(
	void *state,
	unsigned int nrounds
){
 8003d6c:	b508      	push	{r3, lr}
	KeccakP400_Permute_Nrounds(state,nrounds);
 8003d6e:	f7ff fc53 	bl	8003618 <KeccakP400_Permute_Nrounds>
}
 8003d72:	bd08      	pop	{r3, pc}

08003d74 <Permutation_ExtractBytes>:
void Permutation_ExtractBytes(
	const void *state,
	unsigned char *data,
	unsigned int offset,
	unsigned int length
){
 8003d74:	b508      	push	{r3, lr}
	KeccakP400_ExtractBytes(state,data,offset,length);
 8003d76:	f7ff fde3 	bl	8003940 <KeccakP400_ExtractBytes>
}
 8003d7a:	bd08      	pop	{r3, pc}

08003d7c <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003d7c:	b510      	push	{r4, lr}

	int ret = 0;

	get_memory_usage();
 8003d7e:	f000 f9eb 	bl	8004158 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8003d82:	f000 f985 	bl	8004090 <tick_msr_start>
	tick_msr_end();
 8003d86:	f000 f999 	bl	80040bc <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003d8a:	4a18      	ldr	r2, [pc, #96]	; (8003dec <genkat_benchmark_hash_aead+0x70>)
 8003d8c:	4918      	ldr	r1, [pc, #96]	; (8003df0 <genkat_benchmark_hash_aead+0x74>)
 8003d8e:	4819      	ldr	r0, [pc, #100]	; (8003df4 <genkat_benchmark_hash_aead+0x78>)
 8003d90:	f000 f9b2 	bl	80040f8 <lwc_printf>
	lwc_printf("Memory usage: ");
 8003d94:	4818      	ldr	r0, [pc, #96]	; (8003df8 <genkat_benchmark_hash_aead+0x7c>)
 8003d96:	f000 f9af 	bl	80040f8 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003d9a:	4c18      	ldr	r4, [pc, #96]	; (8003dfc <genkat_benchmark_hash_aead+0x80>)
 8003d9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003da0:	4817      	ldr	r0, [pc, #92]	; (8003e00 <genkat_benchmark_hash_aead+0x84>)
 8003da2:	f000 f9a9 	bl	80040f8 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003daa:	6a21      	ldr	r1, [r4, #32]
 8003dac:	4815      	ldr	r0, [pc, #84]	; (8003e04 <genkat_benchmark_hash_aead+0x88>)
 8003dae:	f000 f9a3 	bl	80040f8 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003db2:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003db6:	4622      	mov	r2, r4
 8003db8:	2100      	movs	r1, #0
 8003dba:	4813      	ldr	r0, [pc, #76]	; (8003e08 <genkat_benchmark_hash_aead+0x8c>)
 8003dbc:	f000 fa9a 	bl	80042f4 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4811      	ldr	r0, [pc, #68]	; (8003e0c <genkat_benchmark_hash_aead+0x90>)
 8003dc6:	f000 fa95 	bl	80042f4 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8003dca:	4622      	mov	r2, r4
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4810      	ldr	r0, [pc, #64]	; (8003e10 <genkat_benchmark_hash_aead+0x94>)
 8003dd0:	f000 fa90 	bl	80042f4 <memset>



#ifdef LWC_ALGO_AEAD
	ret = aead_generate_test_vectors();
 8003dd4:	f000 f820 	bl	8003e18 <aead_generate_test_vectors>

	if(ret != KAT_SUCCESS){
 8003dd8:	4604      	mov	r4, r0
 8003dda:	b908      	cbnz	r0, 8003de0 <genkat_benchmark_hash_aead+0x64>
#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
}
 8003ddc:	4620      	mov	r0, r4
 8003dde:	bd10      	pop	{r4, pc}
		lwc_printf("TotRes: Error %d", ret);
 8003de0:	4601      	mov	r1, r0
 8003de2:	480c      	ldr	r0, [pc, #48]	; (8003e14 <genkat_benchmark_hash_aead+0x98>)
 8003de4:	f000 f988 	bl	80040f8 <lwc_printf>
	return ret;
 8003de8:	e7f8      	b.n	8003ddc <genkat_benchmark_hash_aead+0x60>
 8003dea:	bf00      	nop
 8003dec:	08005790 	.word	0x08005790
 8003df0:	08005810 	.word	0x08005810
 8003df4:	08005890 	.word	0x08005890
 8003df8:	080058d8 	.word	0x080058d8
 8003dfc:	2000067c 	.word	0x2000067c
 8003e00:	080058e8 	.word	0x080058e8
 8003e04:	08005910 	.word	0x08005910
 8003e08:	20000098 	.word	0x20000098
 8003e0c:	20000198 	.word	0x20000198
 8003e10:	20000298 	.word	0x20000298
 8003e14:	0800593c 	.word	0x0800593c

08003e18 <aead_generate_test_vectors>:
#ifdef LWC_ALGO_AEAD

#define MAX_MESSAGE_LENGTH			32
#define MAX_ASSOCIATED_DATA_LENGTH	32

int aead_generate_test_vectors() {
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	b0bd      	sub	sp, #244	; 0xf4
	unsigned char nonce[CRYPTO_NPUBBYTES];
	unsigned char msg[MAX_MESSAGE_LENGTH];
	unsigned char msg2[MAX_MESSAGE_LENGTH];
	unsigned char ad[MAX_ASSOCIATED_DATA_LENGTH];
	unsigned char ct[MAX_MESSAGE_LENGTH + CRYPTO_ABYTES];
	unsigned long long clen = 0, mlen2 = 0;
 8003e1e:	2500      	movs	r5, #0
 8003e20:	950e      	str	r5, [sp, #56]	; 0x38
 8003e22:	950f      	str	r5, [sp, #60]	; 0x3c
 8003e24:	950c      	str	r5, [sp, #48]	; 0x30
 8003e26:	950d      	str	r5, [sp, #52]	; 0x34
	int func_ret = 0, ret_val = KAT_SUCCESS;

	init_buffer(key, sizeof(key));
 8003e28:	2210      	movs	r2, #16
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	a838      	add	r0, sp, #224	; 0xe0
 8003e2e:	f000 f915 	bl	800405c <init_buffer>
	init_buffer(nonce, sizeof(nonce));
 8003e32:	2210      	movs	r2, #16
 8003e34:	2300      	movs	r3, #0
 8003e36:	a834      	add	r0, sp, #208	; 0xd0
 8003e38:	f000 f910 	bl	800405c <init_buffer>
	init_buffer(msg, sizeof(msg));
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	2300      	movs	r3, #0
 8003e40:	a82c      	add	r0, sp, #176	; 0xb0
 8003e42:	f000 f90b 	bl	800405c <init_buffer>
	init_buffer(ad, sizeof(ad));
 8003e46:	2220      	movs	r2, #32
 8003e48:	2300      	movs	r3, #0
 8003e4a:	a81c      	add	r0, sp, #112	; 0x70
 8003e4c:	f000 f906 	bl	800405c <init_buffer>

	ticks_res_pos = 0;
 8003e50:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <aead_generate_test_vectors+0x1d8>)
 8003e52:	601d      	str	r5, [r3, #0]

	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8003e54:	46aa      	mov	sl, r5
 8003e56:	46ab      	mov	fp, r5
#else
			func_ret = 0;
#endif
			tick_msr_end();

			lwc_printf("enc:%8lu us:%8lu ms:%8lu   ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 8003e58:	4f66      	ldr	r7, [pc, #408]	; (8003ff4 <aead_generate_test_vectors+0x1dc>)
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8003e5a:	2400      	movs	r4, #0
 8003e5c:	2500      	movs	r5, #0
			lwc_printf("enc:%8lu us:%8lu ms:%8lu   ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 8003e5e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8004020 <aead_generate_test_vectors+0x208>
 8003e62:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
			lwc_printf("msg_len:%4d ad_len:%4d  ", (int) mlen, (int) adlen);
 8003e66:	4622      	mov	r2, r4
 8003e68:	4651      	mov	r1, sl
 8003e6a:	4863      	ldr	r0, [pc, #396]	; (8003ff8 <aead_generate_test_vectors+0x1e0>)
 8003e6c:	f000 f944 	bl	80040f8 <lwc_printf>
			tick_msr_start();
 8003e70:	f000 f90e 	bl	8004090 <tick_msr_start>
			func_ret = crypto_aead_encrypt(ct, &clen, msg, mlen, ad, adlen,	NULL, nonce, key);
 8003e74:	ab38      	add	r3, sp, #224	; 0xe0
 8003e76:	9308      	str	r3, [sp, #32]
 8003e78:	ab34      	add	r3, sp, #208	; 0xd0
 8003e7a:	9307      	str	r3, [sp, #28]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9306      	str	r3, [sp, #24]
 8003e80:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003e84:	ab1c      	add	r3, sp, #112	; 0x70
 8003e86:	9302      	str	r3, [sp, #8]
 8003e88:	e9cd ab00 	strd	sl, fp, [sp]
 8003e8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8003e8e:	a90e      	add	r1, sp, #56	; 0x38
 8003e90:	a810      	add	r0, sp, #64	; 0x40
 8003e92:	f7ff fdbd 	bl	8003a10 <crypto_aead_encrypt>
 8003e96:	4606      	mov	r6, r0
			tick_msr_end();
 8003e98:	f000 f910 	bl	80040bc <tick_msr_end>
			lwc_printf("enc:%8lu us:%8lu ms:%8lu   ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8003ea2:	090a      	lsrs	r2, r1, #4
 8003ea4:	4855      	ldr	r0, [pc, #340]	; (8003ffc <aead_generate_test_vectors+0x1e4>)
 8003ea6:	f000 f927 	bl	80040f8 <lwc_printf>
			aead_enc_ticks_res[ticks_res_pos] = gb_tick_cnt;
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <aead_generate_test_vectors+0x1d8>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <aead_generate_test_vectors+0x1e8>)
 8003eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			if (func_ret != 0) {
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	d151      	bne.n	8003f5e <aead_generate_test_vectors+0x146>
			}




			tick_msr_start();
 8003eba:	f000 f8e9 	bl	8004090 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_decrypt(msg2, &mlen2, NULL, ct, clen, ad, adlen, nonce, key);
 8003ebe:	ab38      	add	r3, sp, #224	; 0xe0
 8003ec0:	9307      	str	r3, [sp, #28]
 8003ec2:	ab34      	add	r3, sp, #208	; 0xd0
 8003ec4:	9306      	str	r3, [sp, #24]
 8003ec6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003eca:	ab1c      	add	r3, sp, #112	; 0x70
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003ed2:	e9cd 2300 	strd	r2, r3, [sp]
 8003ed6:	ab10      	add	r3, sp, #64	; 0x40
 8003ed8:	2200      	movs	r2, #0
 8003eda:	a90c      	add	r1, sp, #48	; 0x30
 8003edc:	a824      	add	r0, sp, #144	; 0x90
 8003ede:	f7ff fd51 	bl	8003984 <crypto_aead_decrypt>
 8003ee2:	4680      	mov	r8, r0
#else
			func_ret = 0;
#endif
			tick_msr_end();
 8003ee4:	f000 f8ea 	bl	80040bc <tick_msr_end>

			lwc_printf("dec:%8lu us:%8lu ms:%8lu ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	f8d9 3000 	ldr.w	r3, [r9]
 8003eee:	090a      	lsrs	r2, r1, #4
 8003ef0:	4844      	ldr	r0, [pc, #272]	; (8004004 <aead_generate_test_vectors+0x1ec>)
 8003ef2:	f000 f901 	bl	80040f8 <lwc_printf>
			lwc_print_hex_str(ct, clen);
 8003ef6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003ef8:	a810      	add	r0, sp, #64	; 0x40
 8003efa:	f000 f91b 	bl	8004134 <lwc_print_hex_str>
			lwc_printf("\n");
 8003efe:	4842      	ldr	r0, [pc, #264]	; (8004008 <aead_generate_test_vectors+0x1f0>)
 8003f00:	f000 f8fa 	bl	80040f8 <lwc_printf>
			aead_dec_ticks_res[ticks_res_pos] = gb_tick_cnt;
 8003f04:	4b3a      	ldr	r3, [pc, #232]	; (8003ff0 <aead_generate_test_vectors+0x1d8>)
 8003f06:	681e      	ldr	r6, [r3, #0]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <aead_generate_test_vectors+0x1f4>)
 8003f0c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]


#ifdef ENABLE_ALGO_TEST
			if ((func_ret != 0) || (mlen != mlen2)	|| (memcmp(msg, msg2, mlen) != 0)) {
 8003f10:	f1b8 0f00 	cmp.w	r8, #0
 8003f14:	d14e      	bne.n	8003fb4 <aead_generate_test_vectors+0x19c>
 8003f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f1a:	455b      	cmp	r3, fp
 8003f1c:	bf08      	it	eq
 8003f1e:	4552      	cmpeq	r2, sl
 8003f20:	d148      	bne.n	8003fb4 <aead_generate_test_vectors+0x19c>
 8003f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f24:	a924      	add	r1, sp, #144	; 0x90
 8003f26:	a82c      	add	r0, sp, #176	; 0xb0
 8003f28:	f000 f9c8 	bl	80042bc <memcmp>
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d140      	bne.n	8003fb4 <aead_generate_test_vectors+0x19c>
				break;
			}
#endif


			ticks_res_pos++;
 8003f32:	3601      	adds	r6, #1
 8003f34:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <aead_generate_test_vectors+0x1d8>)
 8003f36:	601e      	str	r6, [r3, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8003f38:	3408      	adds	r4, #8
 8003f3a:	f145 0500 	adc.w	r5, r5, #0
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	bf08      	it	eq
 8003f42:	2c28      	cmpeq	r4, #40	; 0x28
 8003f44:	d18d      	bne.n	8003e62 <aead_generate_test_vectors+0x4a>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8003f46:	f11a 0a08 	adds.w	sl, sl, #8
 8003f4a:	f14b 0b00 	adc.w	fp, fp, #0
 8003f4e:	f1bb 0f00 	cmp.w	fp, #0
 8003f52:	bf08      	it	eq
 8003f54:	f1ba 0f28 	cmpeq.w	sl, #40	; 0x28
 8003f58:	f47f af7f 	bne.w	8003e5a <aead_generate_test_vectors+0x42>
 8003f5c:	e032      	b.n	8003fc4 <aead_generate_test_vectors+0x1ac>
 8003f5e:	f1bb 0f00 	cmp.w	fp, #0
 8003f62:	bf08      	it	eq
 8003f64:	f1ba 0f20 	cmpeq.w	sl, #32
 8003f68:	d005      	beq.n	8003f76 <aead_generate_test_vectors+0x15e>
 8003f6a:	f06f 0803 	mvn.w	r8, #3

		}//end of foe loop
	}//end of for loop

	if (ret_val != 0) {
		lwc_printf("Error occurred\n");
 8003f6e:	4828      	ldr	r0, [pc, #160]	; (8004010 <aead_generate_test_vectors+0x1f8>)
 8003f70:	f000 f8c2 	bl	80040f8 <lwc_printf>
 8003f74:	e029      	b.n	8003fca <aead_generate_test_vectors+0x1b2>
				ret_val = KAT_CRYPTO_FAILURE;
 8003f76:	f06f 0803 	mvn.w	r8, #3
 8003f7a:	e023      	b.n	8003fc4 <aead_generate_test_vectors+0x1ac>
 8003f7c:	3608      	adds	r6, #8

	/* Now print Results in one single line for easier file processing*/
	ticks_res_pos = 0;
	aead_hash_print_res("AEAD");
	lwc_printf("AEADTotRes: ");
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
 8003f7e:	2e28      	cmp	r6, #40	; 0x28
 8003f80:	d031      	beq.n	8003fe6 <aead_generate_test_vectors+0x1ce>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8003f82:	2400      	movs	r4, #0
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
			lwc_printf("enc(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_enc_ticks_res[ticks_res_pos]);
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4648      	mov	r0, r9
 8003f90:	f000 f8b2 	bl	80040f8 <lwc_printf>
			lwc_printf("dec(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_dec_ticks_res[ticks_res_pos]);
 8003f94:	682a      	ldr	r2, [r5, #0]
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <aead_generate_test_vectors+0x1f4>)
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	481c      	ldr	r0, [pc, #112]	; (8004014 <aead_generate_test_vectors+0x1fc>)
 8003fa2:	f000 f8a9 	bl	80040f8 <lwc_printf>
			ticks_res_pos++;
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	3408      	adds	r4, #8
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8003fae:	2c28      	cmp	r4, #40	; 0x28
 8003fb0:	d1e8      	bne.n	8003f84 <aead_generate_test_vectors+0x16c>
 8003fb2:	e7e3      	b.n	8003f7c <aead_generate_test_vectors+0x164>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8003fb4:	f1bb 0f00 	cmp.w	fp, #0
 8003fb8:	bf08      	it	eq
 8003fba:	f1ba 0f20 	cmpeq.w	sl, #32
 8003fbe:	d1d4      	bne.n	8003f6a <aead_generate_test_vectors+0x152>
 8003fc0:	f06f 0803 	mvn.w	r8, #3
	if (ret_val != 0) {
 8003fc4:	f1b8 0f00 	cmp.w	r8, #0
 8003fc8:	d1d1      	bne.n	8003f6e <aead_generate_test_vectors+0x156>
	ticks_res_pos = 0;
 8003fca:	2600      	movs	r6, #0
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <aead_generate_test_vectors+0x1d8>)
 8003fce:	601e      	str	r6, [r3, #0]
	aead_hash_print_res("AEAD");
 8003fd0:	4811      	ldr	r0, [pc, #68]	; (8004018 <aead_generate_test_vectors+0x200>)
 8003fd2:	f000 f829 	bl	8004028 <aead_hash_print_res>
	lwc_printf("AEADTotRes: ");
 8003fd6:	4811      	ldr	r0, [pc, #68]	; (800401c <aead_generate_test_vectors+0x204>)
 8003fd8:	f000 f88e 	bl	80040f8 <lwc_printf>
			lwc_printf("enc(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_enc_ticks_res[ticks_res_pos]);
 8003fdc:	4f08      	ldr	r7, [pc, #32]	; (8004000 <aead_generate_test_vectors+0x1e8>)
 8003fde:	4d04      	ldr	r5, [pc, #16]	; (8003ff0 <aead_generate_test_vectors+0x1d8>)
 8003fe0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8004024 <aead_generate_test_vectors+0x20c>
 8003fe4:	e7cd      	b.n	8003f82 <aead_generate_test_vectors+0x16a>
		}
	}

	return ret_val;
}
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	b03d      	add	sp, #244	; 0xf4
 8003fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000398 	.word	0x20000398
 8003ff4:	20000090 	.word	0x20000090
 8003ff8:	08005950 	.word	0x08005950
 8003ffc:	0800596c 	.word	0x0800596c
 8004000:	20000098 	.word	0x20000098
 8004004:	08005988 	.word	0x08005988
 8004008:	0800590c 	.word	0x0800590c
 800400c:	20000198 	.word	0x20000198
 8004010:	080059a4 	.word	0x080059a4
 8004014:	080059e0 	.word	0x080059e0
 8004018:	080059b4 	.word	0x080059b4
 800401c:	080059bc 	.word	0x080059bc
 8004020:	20000094 	.word	0x20000094
 8004024:	080059cc 	.word	0x080059cc

08004028 <aead_hash_print_res>:
	return ret_val;
}

#endif

void aead_hash_print_res(char *algo_type){
 8004028:	b508      	push	{r3, lr}
 800402a:	4601      	mov	r1, r0
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <aead_hash_print_res+0x20>)
 800402e:	4a07      	ldr	r2, [pc, #28]	; (800404c <aead_hash_print_res+0x24>)
 8004030:	4807      	ldr	r0, [pc, #28]	; (8004050 <aead_hash_print_res+0x28>)
 8004032:	f000 f861 	bl	80040f8 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8004036:	4907      	ldr	r1, [pc, #28]	; (8004054 <aead_hash_print_res+0x2c>)
 8004038:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800403a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800403c:	6a09      	ldr	r1, [r1, #32]
 800403e:	4806      	ldr	r0, [pc, #24]	; (8004058 <aead_hash_print_res+0x30>)
 8004040:	f000 f85a 	bl	80040f8 <lwc_printf>
}
 8004044:	bd08      	pop	{r3, pc}
 8004046:	bf00      	nop
 8004048:	08005790 	.word	0x08005790
 800404c:	08005810 	.word	0x08005810
 8004050:	080059f4 	.word	0x080059f4
 8004054:	2000067c 	.word	0x2000067c
 8004058:	08005a30 	.word	0x08005a30

0800405c <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 800405c:	b430      	push	{r4, r5}
 800405e:	4614      	mov	r4, r2
 8004060:	461d      	mov	r5, r3
	for (unsigned long long i = 0; i < numbytes; i++) {
 8004062:	ea54 0305 	orrs.w	r3, r4, r5
 8004066:	d009      	beq.n	800407c <init_buffer+0x20>
 8004068:	1e42      	subs	r2, r0, #1
 800406a:	4414      	add	r4, r2
 800406c:	4613      	mov	r3, r2
 800406e:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
 8004072:	18d1      	adds	r1, r2, r3
		buffer[i] = (unsigned char) i + '0';
 8004074:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (unsigned long long i = 0; i < numbytes; i++) {
 8004078:	42a3      	cmp	r3, r4
 800407a:	d1fa      	bne.n	8004072 <init_buffer+0x16>
	}
}
 800407c:	bc30      	pop	{r4, r5}
 800407e:	4770      	bx	lr

08004080 <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 8004080:	4a02      	ldr	r2, [pc, #8]	; (800408c <HAL_TIM_PeriodElapsedCallback+0xc>)
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	2000039c 	.word	0x2000039c

08004090 <tick_msr_start>:

void tick_msr_start(void) {
 8004090:	b510      	push	{r4, lr}

	tim_per_elp_cnt = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	4a06      	ldr	r2, [pc, #24]	; (80040b0 <tick_msr_start+0x20>)
 8004096:	6013      	str	r3, [r2, #0]
	htim6.Instance->CNT = 0;
 8004098:	4c06      	ldr	r4, [pc, #24]	; (80040b4 <tick_msr_start+0x24>)
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	6253      	str	r3, [r2, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 800409e:	f7fc fd3f 	bl	8000b20 <HAL_GetTick>
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <tick_msr_start+0x28>)
 80040a4:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fe fb3c 	bl	8002724 <HAL_TIM_Base_Start_IT>
}
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	2000039c 	.word	0x2000039c
 80040b4:	2000062c 	.word	0x2000062c
 80040b8:	20000094 	.word	0x20000094

080040bc <tick_msr_end>:

uint32_t tick_msr_end(void) {
 80040bc:	b510      	push	{r4, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 80040be:	4c0a      	ldr	r4, [pc, #40]	; (80040e8 <tick_msr_end+0x2c>)
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7fe fb99 	bl	80027f8 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	4c08      	ldr	r4, [pc, #32]	; (80040ec <tick_msr_end+0x30>)
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <tick_msr_end+0x34>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040d4:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 80040d6:	f7fc fd23 	bl	8000b20 <HAL_GetTick>
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <tick_msr_end+0x38>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	1a80      	subs	r0, r0, r2
 80040e0:	6018      	str	r0, [r3, #0]
	return gb_tick_cnt;
}
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop
 80040e8:	2000062c 	.word	0x2000062c
 80040ec:	20000090 	.word	0x20000090
 80040f0:	2000039c 	.word	0x2000039c
 80040f4:	20000094 	.word	0x20000094

080040f8 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 80040f8:	b40f      	push	{r0, r1, r2, r3}
 80040fa:	b510      	push	{r4, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	aa04      	add	r2, sp, #16
 8004100:	f852 1b04 	ldr.w	r1, [r2], #4

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8004104:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 8004106:	4c09      	ldr	r4, [pc, #36]	; (800412c <lwc_printf+0x34>)
 8004108:	4620      	mov	r0, r4
 800410a:	f000 fbff 	bl	800490c <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 800410e:	4620      	mov	r0, r4
 8004110:	f7fc f85e 	bl	80001d0 <strlen>
 8004114:	2364      	movs	r3, #100	; 0x64
 8004116:	b282      	uxth	r2, r0
 8004118:	4621      	mov	r1, r4
 800411a:	4805      	ldr	r0, [pc, #20]	; (8004130 <lwc_printf+0x38>)
 800411c:	f7fe fe5e 	bl	8002ddc <HAL_UART_Transmit>
}
 8004120:	b002      	add	sp, #8
 8004122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004126:	b004      	add	sp, #16
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	200003a0 	.word	0x200003a0
 8004130:	200005a8 	.word	0x200005a8

08004134 <lwc_print_hex_str>:

void lwc_print_hex_str(const void *data, uint32_t len){

	uint8_t *buf = (uint8_t *)data;

	for(uint32_t i = 0; i <len; i++){
 8004134:	b161      	cbz	r1, 8004150 <lwc_print_hex_str+0x1c>
void lwc_print_hex_str(const void *data, uint32_t len){
 8004136:	b570      	push	{r4, r5, r6, lr}
 8004138:	1e44      	subs	r4, r0, #1
 800413a:	1e4d      	subs	r5, r1, #1
 800413c:	4405      	add	r5, r0
		lwc_printf("%02X", buf[i]);
 800413e:	4e05      	ldr	r6, [pc, #20]	; (8004154 <lwc_print_hex_str+0x20>)
 8004140:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004144:	4630      	mov	r0, r6
 8004146:	f7ff ffd7 	bl	80040f8 <lwc_printf>
	for(uint32_t i = 0; i <len; i++){
 800414a:	42ac      	cmp	r4, r5
 800414c:	d1f8      	bne.n	8004140 <lwc_print_hex_str+0xc>
	}

}
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	08005a58 	.word	0x08005a58

08004158 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 800415c:	2234      	movs	r2, #52	; 0x34
 800415e:	2100      	movs	r1, #0
 8004160:	4822      	ldr	r0, [pc, #136]	; (80041ec <get_memory_usage+0x94>)
 8004162:	f000 f8c7 	bl	80042f4 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <get_memory_usage+0x94>)
 8004168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800416c:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <get_memory_usage+0x94>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <get_memory_usage+0x94>)
 8004174:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8004176:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <get_memory_usage+0x98>)
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <get_memory_usage+0x94>)
 800417a:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <get_memory_usage+0x9c>)
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <get_memory_usage+0x94>)
 8004180:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <get_memory_usage+0xa0>)
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <get_memory_usage+0x94>)
 8004186:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <get_memory_usage+0xa4>)
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <get_memory_usage+0x94>)
 800418c:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 800418e:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <get_memory_usage+0xa8>)
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <get_memory_usage+0x94>)
 8004192:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <get_memory_usage+0xac>)
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <get_memory_usage+0x94>)
 8004198:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <get_memory_usage+0x94>)
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <get_memory_usage+0x94>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <get_memory_usage+0x94>)
 80041a6:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <get_memory_usage+0x94>)
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <get_memory_usage+0x94>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <get_memory_usage+0x94>)
 80041b4:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <get_memory_usage+0x94>)
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <get_memory_usage+0x94>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <get_memory_usage+0x94>)
 80041c2:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <get_memory_usage+0x94>)
 80041c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c8:	4b08      	ldr	r3, [pc, #32]	; (80041ec <get_memory_usage+0x94>)
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	4413      	add	r3, r2
 80041ce:	4a07      	ldr	r2, [pc, #28]	; (80041ec <get_memory_usage+0x94>)
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <get_memory_usage+0x94>)
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <get_memory_usage+0x94>)
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	441a      	add	r2, r3
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <get_memory_usage+0x94>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	4a02      	ldr	r2, [pc, #8]	; (80041ec <get_memory_usage+0x94>)
 80041e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	2000067c 	.word	0x2000067c
 80041f0:	080055b8 	.word	0x080055b8
 80041f4:	20000070 	.word	0x20000070
 80041f8:	200006c0 	.word	0x200006c0
 80041fc:	20000000 	.word	0x20000000
 8004200:	20000070 	.word	0x20000070
 8004204:	08005b44 	.word	0x08005b44

08004208 <__assert_func>:
 8004208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800420a:	4614      	mov	r4, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <__assert_func+0x2c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4605      	mov	r5, r0
 8004214:	68d8      	ldr	r0, [r3, #12]
 8004216:	b14c      	cbz	r4, 800422c <__assert_func+0x24>
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <__assert_func+0x30>)
 800421a:	9100      	str	r1, [sp, #0]
 800421c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004220:	4906      	ldr	r1, [pc, #24]	; (800423c <__assert_func+0x34>)
 8004222:	462b      	mov	r3, r5
 8004224:	f000 f814 	bl	8004250 <fiprintf>
 8004228:	f000 fc3a 	bl	8004aa0 <abort>
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <__assert_func+0x38>)
 800422e:	461c      	mov	r4, r3
 8004230:	e7f3      	b.n	800421a <__assert_func+0x12>
 8004232:	bf00      	nop
 8004234:	2000000c 	.word	0x2000000c
 8004238:	08005a5d 	.word	0x08005a5d
 800423c:	08005a6a 	.word	0x08005a6a
 8004240:	08005a98 	.word	0x08005a98

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	; (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000000c 	.word	0x2000000c

08004250 <fiprintf>:
 8004250:	b40e      	push	{r1, r2, r3}
 8004252:	b503      	push	{r0, r1, lr}
 8004254:	4601      	mov	r1, r0
 8004256:	ab03      	add	r3, sp, #12
 8004258:	4805      	ldr	r0, [pc, #20]	; (8004270 <fiprintf+0x20>)
 800425a:	f853 2b04 	ldr.w	r2, [r3], #4
 800425e:	6800      	ldr	r0, [r0, #0]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f000 f879 	bl	8004358 <_vfiprintf_r>
 8004266:	b002      	add	sp, #8
 8004268:	f85d eb04 	ldr.w	lr, [sp], #4
 800426c:	b003      	add	sp, #12
 800426e:	4770      	bx	lr
 8004270:	2000000c 	.word	0x2000000c

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4d0d      	ldr	r5, [pc, #52]	; (80042ac <__libc_init_array+0x38>)
 8004278:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	2600      	movs	r6, #0
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	4d0b      	ldr	r5, [pc, #44]	; (80042b4 <__libc_init_array+0x40>)
 8004286:	4c0c      	ldr	r4, [pc, #48]	; (80042b8 <__libc_init_array+0x44>)
 8004288:	f001 f98a 	bl	80055a0 <_init>
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	2600      	movs	r6, #0
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	f855 3b04 	ldr.w	r3, [r5], #4
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08005b3c 	.word	0x08005b3c
 80042b0:	08005b3c 	.word	0x08005b3c
 80042b4:	08005b3c 	.word	0x08005b3c
 80042b8:	08005b40 	.word	0x08005b40

080042bc <memcmp>:
 80042bc:	b530      	push	{r4, r5, lr}
 80042be:	3901      	subs	r1, #1
 80042c0:	2400      	movs	r4, #0
 80042c2:	42a2      	cmp	r2, r4
 80042c4:	d101      	bne.n	80042ca <memcmp+0xe>
 80042c6:	2000      	movs	r0, #0
 80042c8:	e005      	b.n	80042d6 <memcmp+0x1a>
 80042ca:	5d03      	ldrb	r3, [r0, r4]
 80042cc:	3401      	adds	r4, #1
 80042ce:	5d0d      	ldrb	r5, [r1, r4]
 80042d0:	42ab      	cmp	r3, r5
 80042d2:	d0f6      	beq.n	80042c2 <memcmp+0x6>
 80042d4:	1b58      	subs	r0, r3, r5
 80042d6:	bd30      	pop	{r4, r5, pc}

080042d8 <memcpy>:
 80042d8:	440a      	add	r2, r1
 80042da:	4291      	cmp	r1, r2
 80042dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80042e0:	d100      	bne.n	80042e4 <memcpy+0xc>
 80042e2:	4770      	bx	lr
 80042e4:	b510      	push	{r4, lr}
 80042e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d1f9      	bne.n	80042e6 <memcpy+0xe>
 80042f2:	bd10      	pop	{r4, pc}

080042f4 <memset>:
 80042f4:	4402      	add	r2, r0
 80042f6:	4603      	mov	r3, r0
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <__sfputc_r>:
 8004304:	6893      	ldr	r3, [r2, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	b410      	push	{r4}
 800430c:	6093      	str	r3, [r2, #8]
 800430e:	da08      	bge.n	8004322 <__sfputc_r+0x1e>
 8004310:	6994      	ldr	r4, [r2, #24]
 8004312:	42a3      	cmp	r3, r4
 8004314:	db01      	blt.n	800431a <__sfputc_r+0x16>
 8004316:	290a      	cmp	r1, #10
 8004318:	d103      	bne.n	8004322 <__sfputc_r+0x1e>
 800431a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800431e:	f000 baff 	b.w	8004920 <__swbuf_r>
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	1c58      	adds	r0, r3, #1
 8004326:	6010      	str	r0, [r2, #0]
 8004328:	7019      	strb	r1, [r3, #0]
 800432a:	4608      	mov	r0, r1
 800432c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004330:	4770      	bx	lr

08004332 <__sfputs_r>:
 8004332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004334:	4606      	mov	r6, r0
 8004336:	460f      	mov	r7, r1
 8004338:	4614      	mov	r4, r2
 800433a:	18d5      	adds	r5, r2, r3
 800433c:	42ac      	cmp	r4, r5
 800433e:	d101      	bne.n	8004344 <__sfputs_r+0x12>
 8004340:	2000      	movs	r0, #0
 8004342:	e007      	b.n	8004354 <__sfputs_r+0x22>
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	463a      	mov	r2, r7
 800434a:	4630      	mov	r0, r6
 800434c:	f7ff ffda 	bl	8004304 <__sfputc_r>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d1f3      	bne.n	800433c <__sfputs_r+0xa>
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004358 <_vfiprintf_r>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	460d      	mov	r5, r1
 800435e:	b09d      	sub	sp, #116	; 0x74
 8004360:	4614      	mov	r4, r2
 8004362:	4698      	mov	r8, r3
 8004364:	4606      	mov	r6, r0
 8004366:	b118      	cbz	r0, 8004370 <_vfiprintf_r+0x18>
 8004368:	6983      	ldr	r3, [r0, #24]
 800436a:	b90b      	cbnz	r3, 8004370 <_vfiprintf_r+0x18>
 800436c:	f000 fcba 	bl	8004ce4 <__sinit>
 8004370:	4b89      	ldr	r3, [pc, #548]	; (8004598 <_vfiprintf_r+0x240>)
 8004372:	429d      	cmp	r5, r3
 8004374:	d11b      	bne.n	80043ae <_vfiprintf_r+0x56>
 8004376:	6875      	ldr	r5, [r6, #4]
 8004378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800437a:	07d9      	lsls	r1, r3, #31
 800437c:	d405      	bmi.n	800438a <_vfiprintf_r+0x32>
 800437e:	89ab      	ldrh	r3, [r5, #12]
 8004380:	059a      	lsls	r2, r3, #22
 8004382:	d402      	bmi.n	800438a <_vfiprintf_r+0x32>
 8004384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004386:	f000 fd4b 	bl	8004e20 <__retarget_lock_acquire_recursive>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	d501      	bpl.n	8004394 <_vfiprintf_r+0x3c>
 8004390:	692b      	ldr	r3, [r5, #16]
 8004392:	b9eb      	cbnz	r3, 80043d0 <_vfiprintf_r+0x78>
 8004394:	4629      	mov	r1, r5
 8004396:	4630      	mov	r0, r6
 8004398:	f000 fb14 	bl	80049c4 <__swsetup_r>
 800439c:	b1c0      	cbz	r0, 80043d0 <_vfiprintf_r+0x78>
 800439e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043a0:	07dc      	lsls	r4, r3, #31
 80043a2:	d50e      	bpl.n	80043c2 <_vfiprintf_r+0x6a>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	b01d      	add	sp, #116	; 0x74
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ae:	4b7b      	ldr	r3, [pc, #492]	; (800459c <_vfiprintf_r+0x244>)
 80043b0:	429d      	cmp	r5, r3
 80043b2:	d101      	bne.n	80043b8 <_vfiprintf_r+0x60>
 80043b4:	68b5      	ldr	r5, [r6, #8]
 80043b6:	e7df      	b.n	8004378 <_vfiprintf_r+0x20>
 80043b8:	4b79      	ldr	r3, [pc, #484]	; (80045a0 <_vfiprintf_r+0x248>)
 80043ba:	429d      	cmp	r5, r3
 80043bc:	bf08      	it	eq
 80043be:	68f5      	ldreq	r5, [r6, #12]
 80043c0:	e7da      	b.n	8004378 <_vfiprintf_r+0x20>
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	0598      	lsls	r0, r3, #22
 80043c6:	d4ed      	bmi.n	80043a4 <_vfiprintf_r+0x4c>
 80043c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ca:	f000 fd2a 	bl	8004e22 <__retarget_lock_release_recursive>
 80043ce:	e7e9      	b.n	80043a4 <_vfiprintf_r+0x4c>
 80043d0:	2300      	movs	r3, #0
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	2320      	movs	r3, #32
 80043d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043da:	f8cd 800c 	str.w	r8, [sp, #12]
 80043de:	2330      	movs	r3, #48	; 0x30
 80043e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045a4 <_vfiprintf_r+0x24c>
 80043e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e8:	f04f 0901 	mov.w	r9, #1
 80043ec:	4623      	mov	r3, r4
 80043ee:	469a      	mov	sl, r3
 80043f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f4:	b10a      	cbz	r2, 80043fa <_vfiprintf_r+0xa2>
 80043f6:	2a25      	cmp	r2, #37	; 0x25
 80043f8:	d1f9      	bne.n	80043ee <_vfiprintf_r+0x96>
 80043fa:	ebba 0b04 	subs.w	fp, sl, r4
 80043fe:	d00b      	beq.n	8004418 <_vfiprintf_r+0xc0>
 8004400:	465b      	mov	r3, fp
 8004402:	4622      	mov	r2, r4
 8004404:	4629      	mov	r1, r5
 8004406:	4630      	mov	r0, r6
 8004408:	f7ff ff93 	bl	8004332 <__sfputs_r>
 800440c:	3001      	adds	r0, #1
 800440e:	f000 80aa 	beq.w	8004566 <_vfiprintf_r+0x20e>
 8004412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004414:	445a      	add	r2, fp
 8004416:	9209      	str	r2, [sp, #36]	; 0x24
 8004418:	f89a 3000 	ldrb.w	r3, [sl]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a2 	beq.w	8004566 <_vfiprintf_r+0x20e>
 8004422:	2300      	movs	r3, #0
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442c:	f10a 0a01 	add.w	sl, sl, #1
 8004430:	9304      	str	r3, [sp, #16]
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004438:	931a      	str	r3, [sp, #104]	; 0x68
 800443a:	4654      	mov	r4, sl
 800443c:	2205      	movs	r2, #5
 800443e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004442:	4858      	ldr	r0, [pc, #352]	; (80045a4 <_vfiprintf_r+0x24c>)
 8004444:	f7fb fecc 	bl	80001e0 <memchr>
 8004448:	9a04      	ldr	r2, [sp, #16]
 800444a:	b9d8      	cbnz	r0, 8004484 <_vfiprintf_r+0x12c>
 800444c:	06d1      	lsls	r1, r2, #27
 800444e:	bf44      	itt	mi
 8004450:	2320      	movmi	r3, #32
 8004452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004456:	0713      	lsls	r3, r2, #28
 8004458:	bf44      	itt	mi
 800445a:	232b      	movmi	r3, #43	; 0x2b
 800445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004460:	f89a 3000 	ldrb.w	r3, [sl]
 8004464:	2b2a      	cmp	r3, #42	; 0x2a
 8004466:	d015      	beq.n	8004494 <_vfiprintf_r+0x13c>
 8004468:	9a07      	ldr	r2, [sp, #28]
 800446a:	4654      	mov	r4, sl
 800446c:	2000      	movs	r0, #0
 800446e:	f04f 0c0a 	mov.w	ip, #10
 8004472:	4621      	mov	r1, r4
 8004474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004478:	3b30      	subs	r3, #48	; 0x30
 800447a:	2b09      	cmp	r3, #9
 800447c:	d94e      	bls.n	800451c <_vfiprintf_r+0x1c4>
 800447e:	b1b0      	cbz	r0, 80044ae <_vfiprintf_r+0x156>
 8004480:	9207      	str	r2, [sp, #28]
 8004482:	e014      	b.n	80044ae <_vfiprintf_r+0x156>
 8004484:	eba0 0308 	sub.w	r3, r0, r8
 8004488:	fa09 f303 	lsl.w	r3, r9, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	46a2      	mov	sl, r4
 8004492:	e7d2      	b.n	800443a <_vfiprintf_r+0xe2>
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	1d19      	adds	r1, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	9103      	str	r1, [sp, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	bfbb      	ittet	lt
 80044a0:	425b      	neglt	r3, r3
 80044a2:	f042 0202 	orrlt.w	r2, r2, #2
 80044a6:	9307      	strge	r3, [sp, #28]
 80044a8:	9307      	strlt	r3, [sp, #28]
 80044aa:	bfb8      	it	lt
 80044ac:	9204      	strlt	r2, [sp, #16]
 80044ae:	7823      	ldrb	r3, [r4, #0]
 80044b0:	2b2e      	cmp	r3, #46	; 0x2e
 80044b2:	d10c      	bne.n	80044ce <_vfiprintf_r+0x176>
 80044b4:	7863      	ldrb	r3, [r4, #1]
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d135      	bne.n	8004526 <_vfiprintf_r+0x1ce>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	9203      	str	r2, [sp, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfb8      	it	lt
 80044c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ca:	3402      	adds	r4, #2
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80045b4 <_vfiprintf_r+0x25c>
 80044d2:	7821      	ldrb	r1, [r4, #0]
 80044d4:	2203      	movs	r2, #3
 80044d6:	4650      	mov	r0, sl
 80044d8:	f7fb fe82 	bl	80001e0 <memchr>
 80044dc:	b140      	cbz	r0, 80044f0 <_vfiprintf_r+0x198>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	eba0 000a 	sub.w	r0, r0, sl
 80044e4:	fa03 f000 	lsl.w	r0, r3, r0
 80044e8:	9b04      	ldr	r3, [sp, #16]
 80044ea:	4303      	orrs	r3, r0
 80044ec:	3401      	adds	r4, #1
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	482c      	ldr	r0, [pc, #176]	; (80045a8 <_vfiprintf_r+0x250>)
 80044f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044fa:	2206      	movs	r2, #6
 80044fc:	f7fb fe70 	bl	80001e0 <memchr>
 8004500:	2800      	cmp	r0, #0
 8004502:	d03f      	beq.n	8004584 <_vfiprintf_r+0x22c>
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <_vfiprintf_r+0x254>)
 8004506:	bb1b      	cbnz	r3, 8004550 <_vfiprintf_r+0x1f8>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	3307      	adds	r3, #7
 800450c:	f023 0307 	bic.w	r3, r3, #7
 8004510:	3308      	adds	r3, #8
 8004512:	9303      	str	r3, [sp, #12]
 8004514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004516:	443b      	add	r3, r7
 8004518:	9309      	str	r3, [sp, #36]	; 0x24
 800451a:	e767      	b.n	80043ec <_vfiprintf_r+0x94>
 800451c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004520:	460c      	mov	r4, r1
 8004522:	2001      	movs	r0, #1
 8004524:	e7a5      	b.n	8004472 <_vfiprintf_r+0x11a>
 8004526:	2300      	movs	r3, #0
 8004528:	3401      	adds	r4, #1
 800452a:	9305      	str	r3, [sp, #20]
 800452c:	4619      	mov	r1, r3
 800452e:	f04f 0c0a 	mov.w	ip, #10
 8004532:	4620      	mov	r0, r4
 8004534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004538:	3a30      	subs	r2, #48	; 0x30
 800453a:	2a09      	cmp	r2, #9
 800453c:	d903      	bls.n	8004546 <_vfiprintf_r+0x1ee>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0c5      	beq.n	80044ce <_vfiprintf_r+0x176>
 8004542:	9105      	str	r1, [sp, #20]
 8004544:	e7c3      	b.n	80044ce <_vfiprintf_r+0x176>
 8004546:	fb0c 2101 	mla	r1, ip, r1, r2
 800454a:	4604      	mov	r4, r0
 800454c:	2301      	movs	r3, #1
 800454e:	e7f0      	b.n	8004532 <_vfiprintf_r+0x1da>
 8004550:	ab03      	add	r3, sp, #12
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	462a      	mov	r2, r5
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <_vfiprintf_r+0x258>)
 8004558:	a904      	add	r1, sp, #16
 800455a:	4630      	mov	r0, r6
 800455c:	f3af 8000 	nop.w
 8004560:	4607      	mov	r7, r0
 8004562:	1c78      	adds	r0, r7, #1
 8004564:	d1d6      	bne.n	8004514 <_vfiprintf_r+0x1bc>
 8004566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004568:	07d9      	lsls	r1, r3, #31
 800456a:	d405      	bmi.n	8004578 <_vfiprintf_r+0x220>
 800456c:	89ab      	ldrh	r3, [r5, #12]
 800456e:	059a      	lsls	r2, r3, #22
 8004570:	d402      	bmi.n	8004578 <_vfiprintf_r+0x220>
 8004572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004574:	f000 fc55 	bl	8004e22 <__retarget_lock_release_recursive>
 8004578:	89ab      	ldrh	r3, [r5, #12]
 800457a:	065b      	lsls	r3, r3, #25
 800457c:	f53f af12 	bmi.w	80043a4 <_vfiprintf_r+0x4c>
 8004580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004582:	e711      	b.n	80043a8 <_vfiprintf_r+0x50>
 8004584:	ab03      	add	r3, sp, #12
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	462a      	mov	r2, r5
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <_vfiprintf_r+0x258>)
 800458c:	a904      	add	r1, sp, #16
 800458e:	4630      	mov	r0, r6
 8004590:	f000 f880 	bl	8004694 <_printf_i>
 8004594:	e7e4      	b.n	8004560 <_vfiprintf_r+0x208>
 8004596:	bf00      	nop
 8004598:	08005af4 	.word	0x08005af4
 800459c:	08005b14 	.word	0x08005b14
 80045a0:	08005ad4 	.word	0x08005ad4
 80045a4:	08005aa0 	.word	0x08005aa0
 80045a8:	08005aaa 	.word	0x08005aaa
 80045ac:	00000000 	.word	0x00000000
 80045b0:	08004333 	.word	0x08004333
 80045b4:	08005aa6 	.word	0x08005aa6

080045b8 <_printf_common>:
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4616      	mov	r6, r2
 80045be:	4699      	mov	r9, r3
 80045c0:	688a      	ldr	r2, [r1, #8]
 80045c2:	690b      	ldr	r3, [r1, #16]
 80045c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bfb8      	it	lt
 80045cc:	4613      	movlt	r3, r2
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d4:	4607      	mov	r7, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	b10a      	cbz	r2, 80045de <_printf_common+0x26>
 80045da:	3301      	adds	r3, #1
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	6833      	ldrmi	r3, [r6, #0]
 80045e6:	3302      	addmi	r3, #2
 80045e8:	6033      	strmi	r3, [r6, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	f015 0506 	ands.w	r5, r5, #6
 80045f0:	d106      	bne.n	8004600 <_printf_common+0x48>
 80045f2:	f104 0a19 	add.w	sl, r4, #25
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc26      	bgt.n	800464e <_printf_common+0x96>
 8004600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004604:	1e13      	subs	r3, r2, #0
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	bf18      	it	ne
 800460a:	2301      	movne	r3, #1
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d42b      	bmi.n	8004668 <_printf_common+0xb0>
 8004610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004614:	4649      	mov	r1, r9
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	3001      	adds	r0, #1
 800461c:	d01e      	beq.n	800465c <_printf_common+0xa4>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	68e5      	ldr	r5, [r4, #12]
 8004622:	6832      	ldr	r2, [r6, #0]
 8004624:	f003 0306 	and.w	r3, r3, #6
 8004628:	2b04      	cmp	r3, #4
 800462a:	bf08      	it	eq
 800462c:	1aad      	subeq	r5, r5, r2
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	bf0c      	ite	eq
 8004634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004638:	2500      	movne	r5, #0
 800463a:	4293      	cmp	r3, r2
 800463c:	bfc4      	itt	gt
 800463e:	1a9b      	subgt	r3, r3, r2
 8004640:	18ed      	addgt	r5, r5, r3
 8004642:	2600      	movs	r6, #0
 8004644:	341a      	adds	r4, #26
 8004646:	42b5      	cmp	r5, r6
 8004648:	d11a      	bne.n	8004680 <_printf_common+0xc8>
 800464a:	2000      	movs	r0, #0
 800464c:	e008      	b.n	8004660 <_printf_common+0xa8>
 800464e:	2301      	movs	r3, #1
 8004650:	4652      	mov	r2, sl
 8004652:	4649      	mov	r1, r9
 8004654:	4638      	mov	r0, r7
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d103      	bne.n	8004664 <_printf_common+0xac>
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	3501      	adds	r5, #1
 8004666:	e7c6      	b.n	80045f6 <_printf_common+0x3e>
 8004668:	18e1      	adds	r1, r4, r3
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	2030      	movs	r0, #48	; 0x30
 800466e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004672:	4422      	add	r2, r4
 8004674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467c:	3302      	adds	r3, #2
 800467e:	e7c7      	b.n	8004610 <_printf_common+0x58>
 8004680:	2301      	movs	r3, #1
 8004682:	4622      	mov	r2, r4
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d0e6      	beq.n	800465c <_printf_common+0xa4>
 800468e:	3601      	adds	r6, #1
 8004690:	e7d9      	b.n	8004646 <_printf_common+0x8e>
	...

08004694 <_printf_i>:
 8004694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	460c      	mov	r4, r1
 800469a:	4691      	mov	r9, r2
 800469c:	7e27      	ldrb	r7, [r4, #24]
 800469e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046a0:	2f78      	cmp	r7, #120	; 0x78
 80046a2:	4680      	mov	r8, r0
 80046a4:	469a      	mov	sl, r3
 80046a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046aa:	d807      	bhi.n	80046bc <_printf_i+0x28>
 80046ac:	2f62      	cmp	r7, #98	; 0x62
 80046ae:	d80a      	bhi.n	80046c6 <_printf_i+0x32>
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f000 80d8 	beq.w	8004866 <_printf_i+0x1d2>
 80046b6:	2f58      	cmp	r7, #88	; 0x58
 80046b8:	f000 80a3 	beq.w	8004802 <_printf_i+0x16e>
 80046bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c4:	e03a      	b.n	800473c <_printf_i+0xa8>
 80046c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ca:	2b15      	cmp	r3, #21
 80046cc:	d8f6      	bhi.n	80046bc <_printf_i+0x28>
 80046ce:	a001      	add	r0, pc, #4	; (adr r0, 80046d4 <_printf_i+0x40>)
 80046d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	08004741 	.word	0x08004741
 80046dc:	080046bd 	.word	0x080046bd
 80046e0:	080046bd 	.word	0x080046bd
 80046e4:	080046bd 	.word	0x080046bd
 80046e8:	080046bd 	.word	0x080046bd
 80046ec:	08004741 	.word	0x08004741
 80046f0:	080046bd 	.word	0x080046bd
 80046f4:	080046bd 	.word	0x080046bd
 80046f8:	080046bd 	.word	0x080046bd
 80046fc:	080046bd 	.word	0x080046bd
 8004700:	0800484d 	.word	0x0800484d
 8004704:	08004771 	.word	0x08004771
 8004708:	0800482f 	.word	0x0800482f
 800470c:	080046bd 	.word	0x080046bd
 8004710:	080046bd 	.word	0x080046bd
 8004714:	0800486f 	.word	0x0800486f
 8004718:	080046bd 	.word	0x080046bd
 800471c:	08004771 	.word	0x08004771
 8004720:	080046bd 	.word	0x080046bd
 8004724:	080046bd 	.word	0x080046bd
 8004728:	08004837 	.word	0x08004837
 800472c:	680b      	ldr	r3, [r1, #0]
 800472e:	1d1a      	adds	r2, r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	600a      	str	r2, [r1, #0]
 8004734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800473c:	2301      	movs	r3, #1
 800473e:	e0a3      	b.n	8004888 <_printf_i+0x1f4>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	6808      	ldr	r0, [r1, #0]
 8004744:	062e      	lsls	r6, r5, #24
 8004746:	f100 0304 	add.w	r3, r0, #4
 800474a:	d50a      	bpl.n	8004762 <_printf_i+0xce>
 800474c:	6805      	ldr	r5, [r0, #0]
 800474e:	600b      	str	r3, [r1, #0]
 8004750:	2d00      	cmp	r5, #0
 8004752:	da03      	bge.n	800475c <_printf_i+0xc8>
 8004754:	232d      	movs	r3, #45	; 0x2d
 8004756:	426d      	negs	r5, r5
 8004758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475c:	485e      	ldr	r0, [pc, #376]	; (80048d8 <_printf_i+0x244>)
 800475e:	230a      	movs	r3, #10
 8004760:	e019      	b.n	8004796 <_printf_i+0x102>
 8004762:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004766:	6805      	ldr	r5, [r0, #0]
 8004768:	600b      	str	r3, [r1, #0]
 800476a:	bf18      	it	ne
 800476c:	b22d      	sxthne	r5, r5
 800476e:	e7ef      	b.n	8004750 <_printf_i+0xbc>
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	1d18      	adds	r0, r3, #4
 8004776:	6008      	str	r0, [r1, #0]
 8004778:	0628      	lsls	r0, r5, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xec>
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	e002      	b.n	8004786 <_printf_i+0xf2>
 8004780:	0669      	lsls	r1, r5, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xe8>
 8004784:	881d      	ldrh	r5, [r3, #0]
 8004786:	4854      	ldr	r0, [pc, #336]	; (80048d8 <_printf_i+0x244>)
 8004788:	2f6f      	cmp	r7, #111	; 0x6f
 800478a:	bf0c      	ite	eq
 800478c:	2308      	moveq	r3, #8
 800478e:	230a      	movne	r3, #10
 8004790:	2100      	movs	r1, #0
 8004792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004796:	6866      	ldr	r6, [r4, #4]
 8004798:	60a6      	str	r6, [r4, #8]
 800479a:	2e00      	cmp	r6, #0
 800479c:	bfa2      	ittt	ge
 800479e:	6821      	ldrge	r1, [r4, #0]
 80047a0:	f021 0104 	bicge.w	r1, r1, #4
 80047a4:	6021      	strge	r1, [r4, #0]
 80047a6:	b90d      	cbnz	r5, 80047ac <_printf_i+0x118>
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	d04d      	beq.n	8004848 <_printf_i+0x1b4>
 80047ac:	4616      	mov	r6, r2
 80047ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b2:	fb03 5711 	mls	r7, r3, r1, r5
 80047b6:	5dc7      	ldrb	r7, [r0, r7]
 80047b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047bc:	462f      	mov	r7, r5
 80047be:	42bb      	cmp	r3, r7
 80047c0:	460d      	mov	r5, r1
 80047c2:	d9f4      	bls.n	80047ae <_printf_i+0x11a>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10b      	bne.n	80047e0 <_printf_i+0x14c>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	07df      	lsls	r7, r3, #31
 80047cc:	d508      	bpl.n	80047e0 <_printf_i+0x14c>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4299      	cmp	r1, r3
 80047d4:	bfde      	ittt	le
 80047d6:	2330      	movle	r3, #48	; 0x30
 80047d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e0:	1b92      	subs	r2, r2, r6
 80047e2:	6122      	str	r2, [r4, #16]
 80047e4:	f8cd a000 	str.w	sl, [sp]
 80047e8:	464b      	mov	r3, r9
 80047ea:	aa03      	add	r2, sp, #12
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f7ff fee2 	bl	80045b8 <_printf_common>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d14c      	bne.n	8004892 <_printf_i+0x1fe>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	b004      	add	sp, #16
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004802:	4835      	ldr	r0, [pc, #212]	; (80048d8 <_printf_i+0x244>)
 8004804:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	680e      	ldr	r6, [r1, #0]
 800480c:	061f      	lsls	r7, r3, #24
 800480e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004812:	600e      	str	r6, [r1, #0]
 8004814:	d514      	bpl.n	8004840 <_printf_i+0x1ac>
 8004816:	07d9      	lsls	r1, r3, #31
 8004818:	bf44      	itt	mi
 800481a:	f043 0320 	orrmi.w	r3, r3, #32
 800481e:	6023      	strmi	r3, [r4, #0]
 8004820:	b91d      	cbnz	r5, 800482a <_printf_i+0x196>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f023 0320 	bic.w	r3, r3, #32
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	2310      	movs	r3, #16
 800482c:	e7b0      	b.n	8004790 <_printf_i+0xfc>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f043 0320 	orr.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	2378      	movs	r3, #120	; 0x78
 8004838:	4828      	ldr	r0, [pc, #160]	; (80048dc <_printf_i+0x248>)
 800483a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800483e:	e7e3      	b.n	8004808 <_printf_i+0x174>
 8004840:	065e      	lsls	r6, r3, #25
 8004842:	bf48      	it	mi
 8004844:	b2ad      	uxthmi	r5, r5
 8004846:	e7e6      	b.n	8004816 <_printf_i+0x182>
 8004848:	4616      	mov	r6, r2
 800484a:	e7bb      	b.n	80047c4 <_printf_i+0x130>
 800484c:	680b      	ldr	r3, [r1, #0]
 800484e:	6826      	ldr	r6, [r4, #0]
 8004850:	6960      	ldr	r0, [r4, #20]
 8004852:	1d1d      	adds	r5, r3, #4
 8004854:	600d      	str	r5, [r1, #0]
 8004856:	0635      	lsls	r5, r6, #24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	d501      	bpl.n	8004860 <_printf_i+0x1cc>
 800485c:	6018      	str	r0, [r3, #0]
 800485e:	e002      	b.n	8004866 <_printf_i+0x1d2>
 8004860:	0671      	lsls	r1, r6, #25
 8004862:	d5fb      	bpl.n	800485c <_printf_i+0x1c8>
 8004864:	8018      	strh	r0, [r3, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	4616      	mov	r6, r2
 800486c:	e7ba      	b.n	80047e4 <_printf_i+0x150>
 800486e:	680b      	ldr	r3, [r1, #0]
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	600a      	str	r2, [r1, #0]
 8004874:	681e      	ldr	r6, [r3, #0]
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	2100      	movs	r1, #0
 800487a:	4630      	mov	r0, r6
 800487c:	f7fb fcb0 	bl	80001e0 <memchr>
 8004880:	b108      	cbz	r0, 8004886 <_printf_i+0x1f2>
 8004882:	1b80      	subs	r0, r0, r6
 8004884:	6060      	str	r0, [r4, #4]
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	2300      	movs	r3, #0
 800488c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004890:	e7a8      	b.n	80047e4 <_printf_i+0x150>
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	4632      	mov	r2, r6
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	47d0      	blx	sl
 800489c:	3001      	adds	r0, #1
 800489e:	d0ab      	beq.n	80047f8 <_printf_i+0x164>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	079b      	lsls	r3, r3, #30
 80048a4:	d413      	bmi.n	80048ce <_printf_i+0x23a>
 80048a6:	68e0      	ldr	r0, [r4, #12]
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	4298      	cmp	r0, r3
 80048ac:	bfb8      	it	lt
 80048ae:	4618      	movlt	r0, r3
 80048b0:	e7a4      	b.n	80047fc <_printf_i+0x168>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4632      	mov	r2, r6
 80048b6:	4649      	mov	r1, r9
 80048b8:	4640      	mov	r0, r8
 80048ba:	47d0      	blx	sl
 80048bc:	3001      	adds	r0, #1
 80048be:	d09b      	beq.n	80047f8 <_printf_i+0x164>
 80048c0:	3501      	adds	r5, #1
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	9903      	ldr	r1, [sp, #12]
 80048c6:	1a5b      	subs	r3, r3, r1
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dcf2      	bgt.n	80048b2 <_printf_i+0x21e>
 80048cc:	e7eb      	b.n	80048a6 <_printf_i+0x212>
 80048ce:	2500      	movs	r5, #0
 80048d0:	f104 0619 	add.w	r6, r4, #25
 80048d4:	e7f5      	b.n	80048c2 <_printf_i+0x22e>
 80048d6:	bf00      	nop
 80048d8:	08005ab1 	.word	0x08005ab1
 80048dc:	08005ac2 	.word	0x08005ac2

080048e0 <_vsiprintf_r>:
 80048e0:	b500      	push	{lr}
 80048e2:	b09b      	sub	sp, #108	; 0x6c
 80048e4:	9100      	str	r1, [sp, #0]
 80048e6:	9104      	str	r1, [sp, #16]
 80048e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	9102      	str	r1, [sp, #8]
 80048f0:	4905      	ldr	r1, [pc, #20]	; (8004908 <_vsiprintf_r+0x28>)
 80048f2:	9103      	str	r1, [sp, #12]
 80048f4:	4669      	mov	r1, sp
 80048f6:	f000 fc3f 	bl	8005178 <_svfiprintf_r>
 80048fa:	9b00      	ldr	r3, [sp, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	b01b      	add	sp, #108	; 0x6c
 8004902:	f85d fb04 	ldr.w	pc, [sp], #4
 8004906:	bf00      	nop
 8004908:	ffff0208 	.word	0xffff0208

0800490c <vsiprintf>:
 800490c:	4613      	mov	r3, r2
 800490e:	460a      	mov	r2, r1
 8004910:	4601      	mov	r1, r0
 8004912:	4802      	ldr	r0, [pc, #8]	; (800491c <vsiprintf+0x10>)
 8004914:	6800      	ldr	r0, [r0, #0]
 8004916:	f7ff bfe3 	b.w	80048e0 <_vsiprintf_r>
 800491a:	bf00      	nop
 800491c:	2000000c 	.word	0x2000000c

08004920 <__swbuf_r>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	460e      	mov	r6, r1
 8004924:	4614      	mov	r4, r2
 8004926:	4605      	mov	r5, r0
 8004928:	b118      	cbz	r0, 8004932 <__swbuf_r+0x12>
 800492a:	6983      	ldr	r3, [r0, #24]
 800492c:	b90b      	cbnz	r3, 8004932 <__swbuf_r+0x12>
 800492e:	f000 f9d9 	bl	8004ce4 <__sinit>
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <__swbuf_r+0x98>)
 8004934:	429c      	cmp	r4, r3
 8004936:	d12b      	bne.n	8004990 <__swbuf_r+0x70>
 8004938:	686c      	ldr	r4, [r5, #4]
 800493a:	69a3      	ldr	r3, [r4, #24]
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	071a      	lsls	r2, r3, #28
 8004942:	d52f      	bpl.n	80049a4 <__swbuf_r+0x84>
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	b36b      	cbz	r3, 80049a4 <__swbuf_r+0x84>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	1ac0      	subs	r0, r0, r3
 800494e:	6963      	ldr	r3, [r4, #20]
 8004950:	b2f6      	uxtb	r6, r6
 8004952:	4283      	cmp	r3, r0
 8004954:	4637      	mov	r7, r6
 8004956:	dc04      	bgt.n	8004962 <__swbuf_r+0x42>
 8004958:	4621      	mov	r1, r4
 800495a:	4628      	mov	r0, r5
 800495c:	f000 f92e 	bl	8004bbc <_fflush_r>
 8004960:	bb30      	cbnz	r0, 80049b0 <__swbuf_r+0x90>
 8004962:	68a3      	ldr	r3, [r4, #8]
 8004964:	3b01      	subs	r3, #1
 8004966:	60a3      	str	r3, [r4, #8]
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	701e      	strb	r6, [r3, #0]
 8004970:	6963      	ldr	r3, [r4, #20]
 8004972:	3001      	adds	r0, #1
 8004974:	4283      	cmp	r3, r0
 8004976:	d004      	beq.n	8004982 <__swbuf_r+0x62>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	07db      	lsls	r3, r3, #31
 800497c:	d506      	bpl.n	800498c <__swbuf_r+0x6c>
 800497e:	2e0a      	cmp	r6, #10
 8004980:	d104      	bne.n	800498c <__swbuf_r+0x6c>
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	f000 f919 	bl	8004bbc <_fflush_r>
 800498a:	b988      	cbnz	r0, 80049b0 <__swbuf_r+0x90>
 800498c:	4638      	mov	r0, r7
 800498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <__swbuf_r+0x9c>)
 8004992:	429c      	cmp	r4, r3
 8004994:	d101      	bne.n	800499a <__swbuf_r+0x7a>
 8004996:	68ac      	ldr	r4, [r5, #8]
 8004998:	e7cf      	b.n	800493a <__swbuf_r+0x1a>
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <__swbuf_r+0xa0>)
 800499c:	429c      	cmp	r4, r3
 800499e:	bf08      	it	eq
 80049a0:	68ec      	ldreq	r4, [r5, #12]
 80049a2:	e7ca      	b.n	800493a <__swbuf_r+0x1a>
 80049a4:	4621      	mov	r1, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	f000 f80c 	bl	80049c4 <__swsetup_r>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d0cb      	beq.n	8004948 <__swbuf_r+0x28>
 80049b0:	f04f 37ff 	mov.w	r7, #4294967295
 80049b4:	e7ea      	b.n	800498c <__swbuf_r+0x6c>
 80049b6:	bf00      	nop
 80049b8:	08005af4 	.word	0x08005af4
 80049bc:	08005b14 	.word	0x08005b14
 80049c0:	08005ad4 	.word	0x08005ad4

080049c4 <__swsetup_r>:
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <__swsetup_r+0xcc>)
 80049c6:	b570      	push	{r4, r5, r6, lr}
 80049c8:	681d      	ldr	r5, [r3, #0]
 80049ca:	4606      	mov	r6, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	b125      	cbz	r5, 80049da <__swsetup_r+0x16>
 80049d0:	69ab      	ldr	r3, [r5, #24]
 80049d2:	b913      	cbnz	r3, 80049da <__swsetup_r+0x16>
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 f985 	bl	8004ce4 <__sinit>
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <__swsetup_r+0xd0>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d10f      	bne.n	8004a00 <__swsetup_r+0x3c>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049e8:	0719      	lsls	r1, r3, #28
 80049ea:	d42c      	bmi.n	8004a46 <__swsetup_r+0x82>
 80049ec:	06dd      	lsls	r5, r3, #27
 80049ee:	d411      	bmi.n	8004a14 <__swsetup_r+0x50>
 80049f0:	2309      	movs	r3, #9
 80049f2:	6033      	str	r3, [r6, #0]
 80049f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	e03e      	b.n	8004a7e <__swsetup_r+0xba>
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <__swsetup_r+0xd4>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d101      	bne.n	8004a0a <__swsetup_r+0x46>
 8004a06:	68ac      	ldr	r4, [r5, #8]
 8004a08:	e7eb      	b.n	80049e2 <__swsetup_r+0x1e>
 8004a0a:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <__swsetup_r+0xd8>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	bf08      	it	eq
 8004a10:	68ec      	ldreq	r4, [r5, #12]
 8004a12:	e7e6      	b.n	80049e2 <__swsetup_r+0x1e>
 8004a14:	0758      	lsls	r0, r3, #29
 8004a16:	d512      	bpl.n	8004a3e <__swsetup_r+0x7a>
 8004a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a1a:	b141      	cbz	r1, 8004a2e <__swsetup_r+0x6a>
 8004a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a20:	4299      	cmp	r1, r3
 8004a22:	d002      	beq.n	8004a2a <__swsetup_r+0x66>
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 fa7b 	bl	8004f20 <_free_r>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	2300      	movs	r3, #0
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	b94b      	cbnz	r3, 8004a5e <__swsetup_r+0x9a>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d003      	beq.n	8004a5e <__swsetup_r+0x9a>
 8004a56:	4621      	mov	r1, r4
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 fa07 	bl	8004e6c <__smakebuf_r>
 8004a5e:	89a0      	ldrh	r0, [r4, #12]
 8004a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a64:	f010 0301 	ands.w	r3, r0, #1
 8004a68:	d00a      	beq.n	8004a80 <__swsetup_r+0xbc>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60a3      	str	r3, [r4, #8]
 8004a6e:	6963      	ldr	r3, [r4, #20]
 8004a70:	425b      	negs	r3, r3
 8004a72:	61a3      	str	r3, [r4, #24]
 8004a74:	6923      	ldr	r3, [r4, #16]
 8004a76:	b943      	cbnz	r3, 8004a8a <__swsetup_r+0xc6>
 8004a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a7c:	d1ba      	bne.n	80049f4 <__swsetup_r+0x30>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	0781      	lsls	r1, r0, #30
 8004a82:	bf58      	it	pl
 8004a84:	6963      	ldrpl	r3, [r4, #20]
 8004a86:	60a3      	str	r3, [r4, #8]
 8004a88:	e7f4      	b.n	8004a74 <__swsetup_r+0xb0>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7f7      	b.n	8004a7e <__swsetup_r+0xba>
 8004a8e:	bf00      	nop
 8004a90:	2000000c 	.word	0x2000000c
 8004a94:	08005af4 	.word	0x08005af4
 8004a98:	08005b14 	.word	0x08005b14
 8004a9c:	08005ad4 	.word	0x08005ad4

08004aa0 <abort>:
 8004aa0:	b508      	push	{r3, lr}
 8004aa2:	2006      	movs	r0, #6
 8004aa4:	f000 fca0 	bl	80053e8 <raise>
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fb fef5 	bl	8000898 <_exit>
	...

08004ab0 <__sflush_r>:
 8004ab0:	898a      	ldrh	r2, [r1, #12]
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	0710      	lsls	r0, r2, #28
 8004aba:	460c      	mov	r4, r1
 8004abc:	d458      	bmi.n	8004b70 <__sflush_r+0xc0>
 8004abe:	684b      	ldr	r3, [r1, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dc05      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dc02      	bgt.n	8004ad0 <__sflush_r+0x20>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d0f9      	beq.n	8004aca <__sflush_r+0x1a>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004adc:	682f      	ldr	r7, [r5, #0]
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	d032      	beq.n	8004b48 <__sflush_r+0x98>
 8004ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	075a      	lsls	r2, r3, #29
 8004ae8:	d505      	bpl.n	8004af6 <__sflush_r+0x46>
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	1ac0      	subs	r0, r0, r3
 8004aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af0:	b10b      	cbz	r3, 8004af6 <__sflush_r+0x46>
 8004af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af4:	1ac0      	subs	r0, r0, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	4602      	mov	r2, r0
 8004afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004afc:	6a21      	ldr	r1, [r4, #32]
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b0      	blx	r6
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	d106      	bne.n	8004b16 <__sflush_r+0x66>
 8004b08:	6829      	ldr	r1, [r5, #0]
 8004b0a:	291d      	cmp	r1, #29
 8004b0c:	d82c      	bhi.n	8004b68 <__sflush_r+0xb8>
 8004b0e:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <__sflush_r+0x108>)
 8004b10:	40ca      	lsrs	r2, r1
 8004b12:	07d6      	lsls	r6, r2, #31
 8004b14:	d528      	bpl.n	8004b68 <__sflush_r+0xb8>
 8004b16:	2200      	movs	r2, #0
 8004b18:	6062      	str	r2, [r4, #4]
 8004b1a:	04d9      	lsls	r1, r3, #19
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	6022      	str	r2, [r4, #0]
 8004b20:	d504      	bpl.n	8004b2c <__sflush_r+0x7c>
 8004b22:	1c42      	adds	r2, r0, #1
 8004b24:	d101      	bne.n	8004b2a <__sflush_r+0x7a>
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	b903      	cbnz	r3, 8004b2c <__sflush_r+0x7c>
 8004b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8004b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b2e:	602f      	str	r7, [r5, #0]
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d0ca      	beq.n	8004aca <__sflush_r+0x1a>
 8004b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <__sflush_r+0x92>
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f9ef 	bl	8004f20 <_free_r>
 8004b42:	2000      	movs	r0, #0
 8004b44:	6360      	str	r0, [r4, #52]	; 0x34
 8004b46:	e7c1      	b.n	8004acc <__sflush_r+0x1c>
 8004b48:	6a21      	ldr	r1, [r4, #32]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	1c41      	adds	r1, r0, #1
 8004b52:	d1c7      	bne.n	8004ae4 <__sflush_r+0x34>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c4      	beq.n	8004ae4 <__sflush_r+0x34>
 8004b5a:	2b1d      	cmp	r3, #29
 8004b5c:	d001      	beq.n	8004b62 <__sflush_r+0xb2>
 8004b5e:	2b16      	cmp	r3, #22
 8004b60:	d101      	bne.n	8004b66 <__sflush_r+0xb6>
 8004b62:	602f      	str	r7, [r5, #0]
 8004b64:	e7b1      	b.n	8004aca <__sflush_r+0x1a>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b6c:	81a3      	strh	r3, [r4, #12]
 8004b6e:	e7ad      	b.n	8004acc <__sflush_r+0x1c>
 8004b70:	690f      	ldr	r7, [r1, #16]
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	d0a9      	beq.n	8004aca <__sflush_r+0x1a>
 8004b76:	0793      	lsls	r3, r2, #30
 8004b78:	680e      	ldr	r6, [r1, #0]
 8004b7a:	bf08      	it	eq
 8004b7c:	694b      	ldreq	r3, [r1, #20]
 8004b7e:	600f      	str	r7, [r1, #0]
 8004b80:	bf18      	it	ne
 8004b82:	2300      	movne	r3, #0
 8004b84:	eba6 0807 	sub.w	r8, r6, r7
 8004b88:	608b      	str	r3, [r1, #8]
 8004b8a:	f1b8 0f00 	cmp.w	r8, #0
 8004b8e:	dd9c      	ble.n	8004aca <__sflush_r+0x1a>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b94:	4643      	mov	r3, r8
 8004b96:	463a      	mov	r2, r7
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b0      	blx	r6
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	dc06      	bgt.n	8004bae <__sflush_r+0xfe>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e78e      	b.n	8004acc <__sflush_r+0x1c>
 8004bae:	4407      	add	r7, r0
 8004bb0:	eba8 0800 	sub.w	r8, r8, r0
 8004bb4:	e7e9      	b.n	8004b8a <__sflush_r+0xda>
 8004bb6:	bf00      	nop
 8004bb8:	20400001 	.word	0x20400001

08004bbc <_fflush_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	690b      	ldr	r3, [r1, #16]
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	b913      	cbnz	r3, 8004bcc <_fflush_r+0x10>
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	4628      	mov	r0, r5
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
 8004bcc:	b118      	cbz	r0, 8004bd6 <_fflush_r+0x1a>
 8004bce:	6983      	ldr	r3, [r0, #24]
 8004bd0:	b90b      	cbnz	r3, 8004bd6 <_fflush_r+0x1a>
 8004bd2:	f000 f887 	bl	8004ce4 <__sinit>
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <_fflush_r+0x6c>)
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	d11b      	bne.n	8004c14 <_fflush_r+0x58>
 8004bdc:	686c      	ldr	r4, [r5, #4]
 8004bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ef      	beq.n	8004bc6 <_fflush_r+0xa>
 8004be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004be8:	07d0      	lsls	r0, r2, #31
 8004bea:	d404      	bmi.n	8004bf6 <_fflush_r+0x3a>
 8004bec:	0599      	lsls	r1, r3, #22
 8004bee:	d402      	bmi.n	8004bf6 <_fflush_r+0x3a>
 8004bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf2:	f000 f915 	bl	8004e20 <__retarget_lock_acquire_recursive>
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	f7ff ff59 	bl	8004ab0 <__sflush_r>
 8004bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c00:	07da      	lsls	r2, r3, #31
 8004c02:	4605      	mov	r5, r0
 8004c04:	d4e0      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	059b      	lsls	r3, r3, #22
 8004c0a:	d4dd      	bmi.n	8004bc8 <_fflush_r+0xc>
 8004c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0e:	f000 f908 	bl	8004e22 <__retarget_lock_release_recursive>
 8004c12:	e7d9      	b.n	8004bc8 <_fflush_r+0xc>
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_fflush_r+0x70>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d101      	bne.n	8004c1e <_fflush_r+0x62>
 8004c1a:	68ac      	ldr	r4, [r5, #8]
 8004c1c:	e7df      	b.n	8004bde <_fflush_r+0x22>
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <_fflush_r+0x74>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	bf08      	it	eq
 8004c24:	68ec      	ldreq	r4, [r5, #12]
 8004c26:	e7da      	b.n	8004bde <_fflush_r+0x22>
 8004c28:	08005af4 	.word	0x08005af4
 8004c2c:	08005b14 	.word	0x08005b14
 8004c30:	08005ad4 	.word	0x08005ad4

08004c34 <std>:
 8004c34:	2300      	movs	r3, #0
 8004c36:	b510      	push	{r4, lr}
 8004c38:	4604      	mov	r4, r0
 8004c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c42:	6083      	str	r3, [r0, #8]
 8004c44:	8181      	strh	r1, [r0, #12]
 8004c46:	6643      	str	r3, [r0, #100]	; 0x64
 8004c48:	81c2      	strh	r2, [r0, #14]
 8004c4a:	6183      	str	r3, [r0, #24]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	2208      	movs	r2, #8
 8004c50:	305c      	adds	r0, #92	; 0x5c
 8004c52:	f7ff fb4f 	bl	80042f4 <memset>
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <std+0x38>)
 8004c58:	6263      	str	r3, [r4, #36]	; 0x24
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <std+0x3c>)
 8004c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <std+0x40>)
 8004c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x44>)
 8004c64:	6224      	str	r4, [r4, #32]
 8004c66:	6323      	str	r3, [r4, #48]	; 0x30
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08005421 	.word	0x08005421
 8004c70:	08005443 	.word	0x08005443
 8004c74:	0800547b 	.word	0x0800547b
 8004c78:	0800549f 	.word	0x0800549f

08004c7c <_cleanup_r>:
 8004c7c:	4901      	ldr	r1, [pc, #4]	; (8004c84 <_cleanup_r+0x8>)
 8004c7e:	f000 b8af 	b.w	8004de0 <_fwalk_reent>
 8004c82:	bf00      	nop
 8004c84:	08004bbd 	.word	0x08004bbd

08004c88 <__sfmoreglue>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	1e4a      	subs	r2, r1, #1
 8004c8c:	2568      	movs	r5, #104	; 0x68
 8004c8e:	4355      	muls	r5, r2
 8004c90:	460e      	mov	r6, r1
 8004c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c96:	f000 f993 	bl	8004fc0 <_malloc_r>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	b140      	cbz	r0, 8004cb0 <__sfmoreglue+0x28>
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ca4:	300c      	adds	r0, #12
 8004ca6:	60a0      	str	r0, [r4, #8]
 8004ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cac:	f7ff fb22 	bl	80042f4 <memset>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}

08004cb4 <__sfp_lock_acquire>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__sfp_lock_acquire+0x8>)
 8004cb6:	f000 b8b3 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	200006b8 	.word	0x200006b8

08004cc0 <__sfp_lock_release>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__sfp_lock_release+0x8>)
 8004cc2:	f000 b8ae 	b.w	8004e22 <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	200006b8 	.word	0x200006b8

08004ccc <__sinit_lock_acquire>:
 8004ccc:	4801      	ldr	r0, [pc, #4]	; (8004cd4 <__sinit_lock_acquire+0x8>)
 8004cce:	f000 b8a7 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 8004cd2:	bf00      	nop
 8004cd4:	200006b3 	.word	0x200006b3

08004cd8 <__sinit_lock_release>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	; (8004ce0 <__sinit_lock_release+0x8>)
 8004cda:	f000 b8a2 	b.w	8004e22 <__retarget_lock_release_recursive>
 8004cde:	bf00      	nop
 8004ce0:	200006b3 	.word	0x200006b3

08004ce4 <__sinit>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	f7ff fff0 	bl	8004ccc <__sinit_lock_acquire>
 8004cec:	69a3      	ldr	r3, [r4, #24]
 8004cee:	b11b      	cbz	r3, 8004cf8 <__sinit+0x14>
 8004cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf4:	f7ff bff0 	b.w	8004cd8 <__sinit_lock_release>
 8004cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8004cfe:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <__sinit+0x68>)
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <__sinit+0x6c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	bf04      	itt	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	61a3      	streq	r3, [r4, #24]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 f820 	bl	8004d54 <__sfp>
 8004d14:	6060      	str	r0, [r4, #4]
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 f81c 	bl	8004d54 <__sfp>
 8004d1c:	60a0      	str	r0, [r4, #8]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f000 f818 	bl	8004d54 <__sfp>
 8004d24:	2200      	movs	r2, #0
 8004d26:	60e0      	str	r0, [r4, #12]
 8004d28:	2104      	movs	r1, #4
 8004d2a:	6860      	ldr	r0, [r4, #4]
 8004d2c:	f7ff ff82 	bl	8004c34 <std>
 8004d30:	68a0      	ldr	r0, [r4, #8]
 8004d32:	2201      	movs	r2, #1
 8004d34:	2109      	movs	r1, #9
 8004d36:	f7ff ff7d 	bl	8004c34 <std>
 8004d3a:	68e0      	ldr	r0, [r4, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	2112      	movs	r1, #18
 8004d40:	f7ff ff78 	bl	8004c34 <std>
 8004d44:	2301      	movs	r3, #1
 8004d46:	61a3      	str	r3, [r4, #24]
 8004d48:	e7d2      	b.n	8004cf0 <__sinit+0xc>
 8004d4a:	bf00      	nop
 8004d4c:	08005a9c 	.word	0x08005a9c
 8004d50:	08004c7d 	.word	0x08004c7d

08004d54 <__sfp>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	4607      	mov	r7, r0
 8004d58:	f7ff ffac 	bl	8004cb4 <__sfp_lock_acquire>
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <__sfp+0x84>)
 8004d5e:	681e      	ldr	r6, [r3, #0]
 8004d60:	69b3      	ldr	r3, [r6, #24]
 8004d62:	b913      	cbnz	r3, 8004d6a <__sfp+0x16>
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7ff ffbd 	bl	8004ce4 <__sinit>
 8004d6a:	3648      	adds	r6, #72	; 0x48
 8004d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	d503      	bpl.n	8004d7c <__sfp+0x28>
 8004d74:	6833      	ldr	r3, [r6, #0]
 8004d76:	b30b      	cbz	r3, 8004dbc <__sfp+0x68>
 8004d78:	6836      	ldr	r6, [r6, #0]
 8004d7a:	e7f7      	b.n	8004d6c <__sfp+0x18>
 8004d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d80:	b9d5      	cbnz	r5, 8004db8 <__sfp+0x64>
 8004d82:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <__sfp+0x88>)
 8004d84:	60e3      	str	r3, [r4, #12]
 8004d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004d8c:	f000 f847 	bl	8004e1e <__retarget_lock_init_recursive>
 8004d90:	f7ff ff96 	bl	8004cc0 <__sfp_lock_release>
 8004d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d9c:	6025      	str	r5, [r4, #0]
 8004d9e:	61a5      	str	r5, [r4, #24]
 8004da0:	2208      	movs	r2, #8
 8004da2:	4629      	mov	r1, r5
 8004da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004da8:	f7ff faa4 	bl	80042f4 <memset>
 8004dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004db4:	4620      	mov	r0, r4
 8004db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db8:	3468      	adds	r4, #104	; 0x68
 8004dba:	e7d9      	b.n	8004d70 <__sfp+0x1c>
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	f7ff ff62 	bl	8004c88 <__sfmoreglue>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	6030      	str	r0, [r6, #0]
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d1d5      	bne.n	8004d78 <__sfp+0x24>
 8004dcc:	f7ff ff78 	bl	8004cc0 <__sfp_lock_release>
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	e7ee      	b.n	8004db4 <__sfp+0x60>
 8004dd6:	bf00      	nop
 8004dd8:	08005a9c 	.word	0x08005a9c
 8004ddc:	ffff0001 	.word	0xffff0001

08004de0 <_fwalk_reent>:
 8004de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de4:	4606      	mov	r6, r0
 8004de6:	4688      	mov	r8, r1
 8004de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dec:	2700      	movs	r7, #0
 8004dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004df2:	f1b9 0901 	subs.w	r9, r9, #1
 8004df6:	d505      	bpl.n	8004e04 <_fwalk_reent+0x24>
 8004df8:	6824      	ldr	r4, [r4, #0]
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d1f7      	bne.n	8004dee <_fwalk_reent+0xe>
 8004dfe:	4638      	mov	r0, r7
 8004e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e04:	89ab      	ldrh	r3, [r5, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d907      	bls.n	8004e1a <_fwalk_reent+0x3a>
 8004e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	d003      	beq.n	8004e1a <_fwalk_reent+0x3a>
 8004e12:	4629      	mov	r1, r5
 8004e14:	4630      	mov	r0, r6
 8004e16:	47c0      	blx	r8
 8004e18:	4307      	orrs	r7, r0
 8004e1a:	3568      	adds	r5, #104	; 0x68
 8004e1c:	e7e9      	b.n	8004df2 <_fwalk_reent+0x12>

08004e1e <__retarget_lock_init_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <__retarget_lock_acquire_recursive>:
 8004e20:	4770      	bx	lr

08004e22 <__retarget_lock_release_recursive>:
 8004e22:	4770      	bx	lr

08004e24 <__swhatbuf_r>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	460e      	mov	r6, r1
 8004e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	b096      	sub	sp, #88	; 0x58
 8004e30:	4614      	mov	r4, r2
 8004e32:	461d      	mov	r5, r3
 8004e34:	da07      	bge.n	8004e46 <__swhatbuf_r+0x22>
 8004e36:	2300      	movs	r3, #0
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	89b3      	ldrh	r3, [r6, #12]
 8004e3c:	061a      	lsls	r2, r3, #24
 8004e3e:	d410      	bmi.n	8004e62 <__swhatbuf_r+0x3e>
 8004e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e44:	e00e      	b.n	8004e64 <__swhatbuf_r+0x40>
 8004e46:	466a      	mov	r2, sp
 8004e48:	f000 fb50 	bl	80054ec <_fstat_r>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	dbf2      	blt.n	8004e36 <__swhatbuf_r+0x12>
 8004e50:	9a01      	ldr	r2, [sp, #4]
 8004e52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e5a:	425a      	negs	r2, r3
 8004e5c:	415a      	adcs	r2, r3
 8004e5e:	602a      	str	r2, [r5, #0]
 8004e60:	e7ee      	b.n	8004e40 <__swhatbuf_r+0x1c>
 8004e62:	2340      	movs	r3, #64	; 0x40
 8004e64:	2000      	movs	r0, #0
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	b016      	add	sp, #88	; 0x58
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}

08004e6c <__smakebuf_r>:
 8004e6c:	898b      	ldrh	r3, [r1, #12]
 8004e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e70:	079d      	lsls	r5, r3, #30
 8004e72:	4606      	mov	r6, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	d507      	bpl.n	8004e88 <__smakebuf_r+0x1c>
 8004e78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	2301      	movs	r3, #1
 8004e82:	6163      	str	r3, [r4, #20]
 8004e84:	b002      	add	sp, #8
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	ab01      	add	r3, sp, #4
 8004e8a:	466a      	mov	r2, sp
 8004e8c:	f7ff ffca 	bl	8004e24 <__swhatbuf_r>
 8004e90:	9900      	ldr	r1, [sp, #0]
 8004e92:	4605      	mov	r5, r0
 8004e94:	4630      	mov	r0, r6
 8004e96:	f000 f893 	bl	8004fc0 <_malloc_r>
 8004e9a:	b948      	cbnz	r0, 8004eb0 <__smakebuf_r+0x44>
 8004e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea0:	059a      	lsls	r2, r3, #22
 8004ea2:	d4ef      	bmi.n	8004e84 <__smakebuf_r+0x18>
 8004ea4:	f023 0303 	bic.w	r3, r3, #3
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	e7e3      	b.n	8004e78 <__smakebuf_r+0xc>
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <__smakebuf_r+0x7c>)
 8004eb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	6020      	str	r0, [r4, #0]
 8004eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	9b00      	ldr	r3, [sp, #0]
 8004ec0:	6163      	str	r3, [r4, #20]
 8004ec2:	9b01      	ldr	r3, [sp, #4]
 8004ec4:	6120      	str	r0, [r4, #16]
 8004ec6:	b15b      	cbz	r3, 8004ee0 <__smakebuf_r+0x74>
 8004ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f000 fb1f 	bl	8005510 <_isatty_r>
 8004ed2:	b128      	cbz	r0, 8004ee0 <__smakebuf_r+0x74>
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	89a0      	ldrh	r0, [r4, #12]
 8004ee2:	4305      	orrs	r5, r0
 8004ee4:	81a5      	strh	r5, [r4, #12]
 8004ee6:	e7cd      	b.n	8004e84 <__smakebuf_r+0x18>
 8004ee8:	08004c7d 	.word	0x08004c7d

08004eec <memmove>:
 8004eec:	4288      	cmp	r0, r1
 8004eee:	b510      	push	{r4, lr}
 8004ef0:	eb01 0402 	add.w	r4, r1, r2
 8004ef4:	d902      	bls.n	8004efc <memmove+0x10>
 8004ef6:	4284      	cmp	r4, r0
 8004ef8:	4623      	mov	r3, r4
 8004efa:	d807      	bhi.n	8004f0c <memmove+0x20>
 8004efc:	1e43      	subs	r3, r0, #1
 8004efe:	42a1      	cmp	r1, r4
 8004f00:	d008      	beq.n	8004f14 <memmove+0x28>
 8004f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f0a:	e7f8      	b.n	8004efe <memmove+0x12>
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4601      	mov	r1, r0
 8004f10:	428a      	cmp	r2, r1
 8004f12:	d100      	bne.n	8004f16 <memmove+0x2a>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f1e:	e7f7      	b.n	8004f10 <memmove+0x24>

08004f20 <_free_r>:
 8004f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f22:	2900      	cmp	r1, #0
 8004f24:	d048      	beq.n	8004fb8 <_free_r+0x98>
 8004f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f2a:	9001      	str	r0, [sp, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f32:	bfb8      	it	lt
 8004f34:	18e4      	addlt	r4, r4, r3
 8004f36:	f000 fb0d 	bl	8005554 <__malloc_lock>
 8004f3a:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <_free_r+0x9c>)
 8004f3c:	9801      	ldr	r0, [sp, #4]
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	4615      	mov	r5, r2
 8004f42:	b933      	cbnz	r3, 8004f52 <_free_r+0x32>
 8004f44:	6063      	str	r3, [r4, #4]
 8004f46:	6014      	str	r4, [r2, #0]
 8004f48:	b003      	add	sp, #12
 8004f4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f4e:	f000 bb07 	b.w	8005560 <__malloc_unlock>
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	d90b      	bls.n	8004f6e <_free_r+0x4e>
 8004f56:	6821      	ldr	r1, [r4, #0]
 8004f58:	1862      	adds	r2, r4, r1
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	bf04      	itt	eq
 8004f5e:	681a      	ldreq	r2, [r3, #0]
 8004f60:	685b      	ldreq	r3, [r3, #4]
 8004f62:	6063      	str	r3, [r4, #4]
 8004f64:	bf04      	itt	eq
 8004f66:	1852      	addeq	r2, r2, r1
 8004f68:	6022      	streq	r2, [r4, #0]
 8004f6a:	602c      	str	r4, [r5, #0]
 8004f6c:	e7ec      	b.n	8004f48 <_free_r+0x28>
 8004f6e:	461a      	mov	r2, r3
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	b10b      	cbz	r3, 8004f78 <_free_r+0x58>
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d9fa      	bls.n	8004f6e <_free_r+0x4e>
 8004f78:	6811      	ldr	r1, [r2, #0]
 8004f7a:	1855      	adds	r5, r2, r1
 8004f7c:	42a5      	cmp	r5, r4
 8004f7e:	d10b      	bne.n	8004f98 <_free_r+0x78>
 8004f80:	6824      	ldr	r4, [r4, #0]
 8004f82:	4421      	add	r1, r4
 8004f84:	1854      	adds	r4, r2, r1
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	6011      	str	r1, [r2, #0]
 8004f8a:	d1dd      	bne.n	8004f48 <_free_r+0x28>
 8004f8c:	681c      	ldr	r4, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6053      	str	r3, [r2, #4]
 8004f92:	4421      	add	r1, r4
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	e7d7      	b.n	8004f48 <_free_r+0x28>
 8004f98:	d902      	bls.n	8004fa0 <_free_r+0x80>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	e7d3      	b.n	8004f48 <_free_r+0x28>
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf04      	itt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	6063      	str	r3, [r4, #4]
 8004fae:	bf04      	itt	eq
 8004fb0:	1949      	addeq	r1, r1, r5
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6054      	str	r4, [r2, #4]
 8004fb6:	e7c7      	b.n	8004f48 <_free_r+0x28>
 8004fb8:	b003      	add	sp, #12
 8004fba:	bd30      	pop	{r4, r5, pc}
 8004fbc:	200005a0 	.word	0x200005a0

08004fc0 <_malloc_r>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	1ccd      	adds	r5, r1, #3
 8004fc4:	f025 0503 	bic.w	r5, r5, #3
 8004fc8:	3508      	adds	r5, #8
 8004fca:	2d0c      	cmp	r5, #12
 8004fcc:	bf38      	it	cc
 8004fce:	250c      	movcc	r5, #12
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	db01      	blt.n	8004fda <_malloc_r+0x1a>
 8004fd6:	42a9      	cmp	r1, r5
 8004fd8:	d903      	bls.n	8004fe2 <_malloc_r+0x22>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	6033      	str	r3, [r6, #0]
 8004fde:	2000      	movs	r0, #0
 8004fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe2:	f000 fab7 	bl	8005554 <__malloc_lock>
 8004fe6:	4921      	ldr	r1, [pc, #132]	; (800506c <_malloc_r+0xac>)
 8004fe8:	680a      	ldr	r2, [r1, #0]
 8004fea:	4614      	mov	r4, r2
 8004fec:	b99c      	cbnz	r4, 8005016 <_malloc_r+0x56>
 8004fee:	4f20      	ldr	r7, [pc, #128]	; (8005070 <_malloc_r+0xb0>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	b923      	cbnz	r3, 8004ffe <_malloc_r+0x3e>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f000 f9be 	bl	8005378 <_sbrk_r>
 8004ffc:	6038      	str	r0, [r7, #0]
 8004ffe:	4629      	mov	r1, r5
 8005000:	4630      	mov	r0, r6
 8005002:	f000 f9b9 	bl	8005378 <_sbrk_r>
 8005006:	1c43      	adds	r3, r0, #1
 8005008:	d123      	bne.n	8005052 <_malloc_r+0x92>
 800500a:	230c      	movs	r3, #12
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	4630      	mov	r0, r6
 8005010:	f000 faa6 	bl	8005560 <__malloc_unlock>
 8005014:	e7e3      	b.n	8004fde <_malloc_r+0x1e>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	1b5b      	subs	r3, r3, r5
 800501a:	d417      	bmi.n	800504c <_malloc_r+0x8c>
 800501c:	2b0b      	cmp	r3, #11
 800501e:	d903      	bls.n	8005028 <_malloc_r+0x68>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	441c      	add	r4, r3
 8005024:	6025      	str	r5, [r4, #0]
 8005026:	e004      	b.n	8005032 <_malloc_r+0x72>
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	42a2      	cmp	r2, r4
 800502c:	bf0c      	ite	eq
 800502e:	600b      	streq	r3, [r1, #0]
 8005030:	6053      	strne	r3, [r2, #4]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 fa94 	bl	8005560 <__malloc_unlock>
 8005038:	f104 000b 	add.w	r0, r4, #11
 800503c:	1d23      	adds	r3, r4, #4
 800503e:	f020 0007 	bic.w	r0, r0, #7
 8005042:	1ac2      	subs	r2, r0, r3
 8005044:	d0cc      	beq.n	8004fe0 <_malloc_r+0x20>
 8005046:	1a1b      	subs	r3, r3, r0
 8005048:	50a3      	str	r3, [r4, r2]
 800504a:	e7c9      	b.n	8004fe0 <_malloc_r+0x20>
 800504c:	4622      	mov	r2, r4
 800504e:	6864      	ldr	r4, [r4, #4]
 8005050:	e7cc      	b.n	8004fec <_malloc_r+0x2c>
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d0e3      	beq.n	8005024 <_malloc_r+0x64>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4630      	mov	r0, r6
 8005060:	f000 f98a 	bl	8005378 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d1dd      	bne.n	8005024 <_malloc_r+0x64>
 8005068:	e7cf      	b.n	800500a <_malloc_r+0x4a>
 800506a:	bf00      	nop
 800506c:	200005a0 	.word	0x200005a0
 8005070:	200005a4 	.word	0x200005a4

08005074 <_realloc_r>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	4607      	mov	r7, r0
 8005078:	4614      	mov	r4, r2
 800507a:	460e      	mov	r6, r1
 800507c:	b921      	cbnz	r1, 8005088 <_realloc_r+0x14>
 800507e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005082:	4611      	mov	r1, r2
 8005084:	f7ff bf9c 	b.w	8004fc0 <_malloc_r>
 8005088:	b922      	cbnz	r2, 8005094 <_realloc_r+0x20>
 800508a:	f7ff ff49 	bl	8004f20 <_free_r>
 800508e:	4625      	mov	r5, r4
 8005090:	4628      	mov	r0, r5
 8005092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005094:	f000 fa6a 	bl	800556c <_malloc_usable_size_r>
 8005098:	42a0      	cmp	r0, r4
 800509a:	d20f      	bcs.n	80050bc <_realloc_r+0x48>
 800509c:	4621      	mov	r1, r4
 800509e:	4638      	mov	r0, r7
 80050a0:	f7ff ff8e 	bl	8004fc0 <_malloc_r>
 80050a4:	4605      	mov	r5, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0f2      	beq.n	8005090 <_realloc_r+0x1c>
 80050aa:	4631      	mov	r1, r6
 80050ac:	4622      	mov	r2, r4
 80050ae:	f7ff f913 	bl	80042d8 <memcpy>
 80050b2:	4631      	mov	r1, r6
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ff33 	bl	8004f20 <_free_r>
 80050ba:	e7e9      	b.n	8005090 <_realloc_r+0x1c>
 80050bc:	4635      	mov	r5, r6
 80050be:	e7e7      	b.n	8005090 <_realloc_r+0x1c>

080050c0 <__ssputs_r>:
 80050c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c4:	688e      	ldr	r6, [r1, #8]
 80050c6:	429e      	cmp	r6, r3
 80050c8:	4682      	mov	sl, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	4690      	mov	r8, r2
 80050ce:	461f      	mov	r7, r3
 80050d0:	d838      	bhi.n	8005144 <__ssputs_r+0x84>
 80050d2:	898a      	ldrh	r2, [r1, #12]
 80050d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050d8:	d032      	beq.n	8005140 <__ssputs_r+0x80>
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	6909      	ldr	r1, [r1, #16]
 80050de:	eba5 0901 	sub.w	r9, r5, r1
 80050e2:	6965      	ldr	r5, [r4, #20]
 80050e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050ec:	3301      	adds	r3, #1
 80050ee:	444b      	add	r3, r9
 80050f0:	106d      	asrs	r5, r5, #1
 80050f2:	429d      	cmp	r5, r3
 80050f4:	bf38      	it	cc
 80050f6:	461d      	movcc	r5, r3
 80050f8:	0553      	lsls	r3, r2, #21
 80050fa:	d531      	bpl.n	8005160 <__ssputs_r+0xa0>
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7ff ff5f 	bl	8004fc0 <_malloc_r>
 8005102:	4606      	mov	r6, r0
 8005104:	b950      	cbnz	r0, 800511c <__ssputs_r+0x5c>
 8005106:	230c      	movs	r3, #12
 8005108:	f8ca 3000 	str.w	r3, [sl]
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	6921      	ldr	r1, [r4, #16]
 800511e:	464a      	mov	r2, r9
 8005120:	f7ff f8da 	bl	80042d8 <memcpy>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	6126      	str	r6, [r4, #16]
 8005132:	6165      	str	r5, [r4, #20]
 8005134:	444e      	add	r6, r9
 8005136:	eba5 0509 	sub.w	r5, r5, r9
 800513a:	6026      	str	r6, [r4, #0]
 800513c:	60a5      	str	r5, [r4, #8]
 800513e:	463e      	mov	r6, r7
 8005140:	42be      	cmp	r6, r7
 8005142:	d900      	bls.n	8005146 <__ssputs_r+0x86>
 8005144:	463e      	mov	r6, r7
 8005146:	4632      	mov	r2, r6
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	4641      	mov	r1, r8
 800514c:	f7ff fece 	bl	8004eec <memmove>
 8005150:	68a3      	ldr	r3, [r4, #8]
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	1b9b      	subs	r3, r3, r6
 8005156:	4432      	add	r2, r6
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	2000      	movs	r0, #0
 800515e:	e7db      	b.n	8005118 <__ssputs_r+0x58>
 8005160:	462a      	mov	r2, r5
 8005162:	f7ff ff87 	bl	8005074 <_realloc_r>
 8005166:	4606      	mov	r6, r0
 8005168:	2800      	cmp	r0, #0
 800516a:	d1e1      	bne.n	8005130 <__ssputs_r+0x70>
 800516c:	6921      	ldr	r1, [r4, #16]
 800516e:	4650      	mov	r0, sl
 8005170:	f7ff fed6 	bl	8004f20 <_free_r>
 8005174:	e7c7      	b.n	8005106 <__ssputs_r+0x46>
	...

08005178 <_svfiprintf_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	4698      	mov	r8, r3
 800517e:	898b      	ldrh	r3, [r1, #12]
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	b09d      	sub	sp, #116	; 0x74
 8005184:	4607      	mov	r7, r0
 8005186:	460d      	mov	r5, r1
 8005188:	4614      	mov	r4, r2
 800518a:	d50e      	bpl.n	80051aa <_svfiprintf_r+0x32>
 800518c:	690b      	ldr	r3, [r1, #16]
 800518e:	b963      	cbnz	r3, 80051aa <_svfiprintf_r+0x32>
 8005190:	2140      	movs	r1, #64	; 0x40
 8005192:	f7ff ff15 	bl	8004fc0 <_malloc_r>
 8005196:	6028      	str	r0, [r5, #0]
 8005198:	6128      	str	r0, [r5, #16]
 800519a:	b920      	cbnz	r0, 80051a6 <_svfiprintf_r+0x2e>
 800519c:	230c      	movs	r3, #12
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e0d1      	b.n	800534a <_svfiprintf_r+0x1d2>
 80051a6:	2340      	movs	r3, #64	; 0x40
 80051a8:	616b      	str	r3, [r5, #20]
 80051aa:	2300      	movs	r3, #0
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	2320      	movs	r3, #32
 80051b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b8:	2330      	movs	r3, #48	; 0x30
 80051ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005364 <_svfiprintf_r+0x1ec>
 80051be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051c2:	f04f 0901 	mov.w	r9, #1
 80051c6:	4623      	mov	r3, r4
 80051c8:	469a      	mov	sl, r3
 80051ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ce:	b10a      	cbz	r2, 80051d4 <_svfiprintf_r+0x5c>
 80051d0:	2a25      	cmp	r2, #37	; 0x25
 80051d2:	d1f9      	bne.n	80051c8 <_svfiprintf_r+0x50>
 80051d4:	ebba 0b04 	subs.w	fp, sl, r4
 80051d8:	d00b      	beq.n	80051f2 <_svfiprintf_r+0x7a>
 80051da:	465b      	mov	r3, fp
 80051dc:	4622      	mov	r2, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff ff6d 	bl	80050c0 <__ssputs_r>
 80051e6:	3001      	adds	r0, #1
 80051e8:	f000 80aa 	beq.w	8005340 <_svfiprintf_r+0x1c8>
 80051ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ee:	445a      	add	r2, fp
 80051f0:	9209      	str	r2, [sp, #36]	; 0x24
 80051f2:	f89a 3000 	ldrb.w	r3, [sl]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80a2 	beq.w	8005340 <_svfiprintf_r+0x1c8>
 80051fc:	2300      	movs	r3, #0
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005206:	f10a 0a01 	add.w	sl, sl, #1
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	9307      	str	r3, [sp, #28]
 800520e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005212:	931a      	str	r3, [sp, #104]	; 0x68
 8005214:	4654      	mov	r4, sl
 8005216:	2205      	movs	r2, #5
 8005218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521c:	4851      	ldr	r0, [pc, #324]	; (8005364 <_svfiprintf_r+0x1ec>)
 800521e:	f7fa ffdf 	bl	80001e0 <memchr>
 8005222:	9a04      	ldr	r2, [sp, #16]
 8005224:	b9d8      	cbnz	r0, 800525e <_svfiprintf_r+0xe6>
 8005226:	06d0      	lsls	r0, r2, #27
 8005228:	bf44      	itt	mi
 800522a:	2320      	movmi	r3, #32
 800522c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005230:	0711      	lsls	r1, r2, #28
 8005232:	bf44      	itt	mi
 8005234:	232b      	movmi	r3, #43	; 0x2b
 8005236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800523a:	f89a 3000 	ldrb.w	r3, [sl]
 800523e:	2b2a      	cmp	r3, #42	; 0x2a
 8005240:	d015      	beq.n	800526e <_svfiprintf_r+0xf6>
 8005242:	9a07      	ldr	r2, [sp, #28]
 8005244:	4654      	mov	r4, sl
 8005246:	2000      	movs	r0, #0
 8005248:	f04f 0c0a 	mov.w	ip, #10
 800524c:	4621      	mov	r1, r4
 800524e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005252:	3b30      	subs	r3, #48	; 0x30
 8005254:	2b09      	cmp	r3, #9
 8005256:	d94e      	bls.n	80052f6 <_svfiprintf_r+0x17e>
 8005258:	b1b0      	cbz	r0, 8005288 <_svfiprintf_r+0x110>
 800525a:	9207      	str	r2, [sp, #28]
 800525c:	e014      	b.n	8005288 <_svfiprintf_r+0x110>
 800525e:	eba0 0308 	sub.w	r3, r0, r8
 8005262:	fa09 f303 	lsl.w	r3, r9, r3
 8005266:	4313      	orrs	r3, r2
 8005268:	9304      	str	r3, [sp, #16]
 800526a:	46a2      	mov	sl, r4
 800526c:	e7d2      	b.n	8005214 <_svfiprintf_r+0x9c>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	1d19      	adds	r1, r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9103      	str	r1, [sp, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfbb      	ittet	lt
 800527a:	425b      	neglt	r3, r3
 800527c:	f042 0202 	orrlt.w	r2, r2, #2
 8005280:	9307      	strge	r3, [sp, #28]
 8005282:	9307      	strlt	r3, [sp, #28]
 8005284:	bfb8      	it	lt
 8005286:	9204      	strlt	r2, [sp, #16]
 8005288:	7823      	ldrb	r3, [r4, #0]
 800528a:	2b2e      	cmp	r3, #46	; 0x2e
 800528c:	d10c      	bne.n	80052a8 <_svfiprintf_r+0x130>
 800528e:	7863      	ldrb	r3, [r4, #1]
 8005290:	2b2a      	cmp	r3, #42	; 0x2a
 8005292:	d135      	bne.n	8005300 <_svfiprintf_r+0x188>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	9203      	str	r2, [sp, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	bfb8      	it	lt
 80052a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a4:	3402      	adds	r4, #2
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005374 <_svfiprintf_r+0x1fc>
 80052ac:	7821      	ldrb	r1, [r4, #0]
 80052ae:	2203      	movs	r2, #3
 80052b0:	4650      	mov	r0, sl
 80052b2:	f7fa ff95 	bl	80001e0 <memchr>
 80052b6:	b140      	cbz	r0, 80052ca <_svfiprintf_r+0x152>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	eba0 000a 	sub.w	r0, r0, sl
 80052be:	fa03 f000 	lsl.w	r0, r3, r0
 80052c2:	9b04      	ldr	r3, [sp, #16]
 80052c4:	4303      	orrs	r3, r0
 80052c6:	3401      	adds	r4, #1
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ce:	4826      	ldr	r0, [pc, #152]	; (8005368 <_svfiprintf_r+0x1f0>)
 80052d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052d4:	2206      	movs	r2, #6
 80052d6:	f7fa ff83 	bl	80001e0 <memchr>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d038      	beq.n	8005350 <_svfiprintf_r+0x1d8>
 80052de:	4b23      	ldr	r3, [pc, #140]	; (800536c <_svfiprintf_r+0x1f4>)
 80052e0:	bb1b      	cbnz	r3, 800532a <_svfiprintf_r+0x1b2>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	3307      	adds	r3, #7
 80052e6:	f023 0307 	bic.w	r3, r3, #7
 80052ea:	3308      	adds	r3, #8
 80052ec:	9303      	str	r3, [sp, #12]
 80052ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f0:	4433      	add	r3, r6
 80052f2:	9309      	str	r3, [sp, #36]	; 0x24
 80052f4:	e767      	b.n	80051c6 <_svfiprintf_r+0x4e>
 80052f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80052fa:	460c      	mov	r4, r1
 80052fc:	2001      	movs	r0, #1
 80052fe:	e7a5      	b.n	800524c <_svfiprintf_r+0xd4>
 8005300:	2300      	movs	r3, #0
 8005302:	3401      	adds	r4, #1
 8005304:	9305      	str	r3, [sp, #20]
 8005306:	4619      	mov	r1, r3
 8005308:	f04f 0c0a 	mov.w	ip, #10
 800530c:	4620      	mov	r0, r4
 800530e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005312:	3a30      	subs	r2, #48	; 0x30
 8005314:	2a09      	cmp	r2, #9
 8005316:	d903      	bls.n	8005320 <_svfiprintf_r+0x1a8>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0c5      	beq.n	80052a8 <_svfiprintf_r+0x130>
 800531c:	9105      	str	r1, [sp, #20]
 800531e:	e7c3      	b.n	80052a8 <_svfiprintf_r+0x130>
 8005320:	fb0c 2101 	mla	r1, ip, r1, r2
 8005324:	4604      	mov	r4, r0
 8005326:	2301      	movs	r3, #1
 8005328:	e7f0      	b.n	800530c <_svfiprintf_r+0x194>
 800532a:	ab03      	add	r3, sp, #12
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	462a      	mov	r2, r5
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <_svfiprintf_r+0x1f8>)
 8005332:	a904      	add	r1, sp, #16
 8005334:	4638      	mov	r0, r7
 8005336:	f3af 8000 	nop.w
 800533a:	1c42      	adds	r2, r0, #1
 800533c:	4606      	mov	r6, r0
 800533e:	d1d6      	bne.n	80052ee <_svfiprintf_r+0x176>
 8005340:	89ab      	ldrh	r3, [r5, #12]
 8005342:	065b      	lsls	r3, r3, #25
 8005344:	f53f af2c 	bmi.w	80051a0 <_svfiprintf_r+0x28>
 8005348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800534a:	b01d      	add	sp, #116	; 0x74
 800534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005350:	ab03      	add	r3, sp, #12
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	462a      	mov	r2, r5
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <_svfiprintf_r+0x1f8>)
 8005358:	a904      	add	r1, sp, #16
 800535a:	4638      	mov	r0, r7
 800535c:	f7ff f99a 	bl	8004694 <_printf_i>
 8005360:	e7eb      	b.n	800533a <_svfiprintf_r+0x1c2>
 8005362:	bf00      	nop
 8005364:	08005aa0 	.word	0x08005aa0
 8005368:	08005aaa 	.word	0x08005aaa
 800536c:	00000000 	.word	0x00000000
 8005370:	080050c1 	.word	0x080050c1
 8005374:	08005aa6 	.word	0x08005aa6

08005378 <_sbrk_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d06      	ldr	r5, [pc, #24]	; (8005394 <_sbrk_r+0x1c>)
 800537c:	2300      	movs	r3, #0
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	f7fb fb00 	bl	8000988 <_sbrk>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_sbrk_r+0x1a>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_sbrk_r+0x1a>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200006bc 	.word	0x200006bc

08005398 <_raise_r>:
 8005398:	291f      	cmp	r1, #31
 800539a:	b538      	push	{r3, r4, r5, lr}
 800539c:	4604      	mov	r4, r0
 800539e:	460d      	mov	r5, r1
 80053a0:	d904      	bls.n	80053ac <_raise_r+0x14>
 80053a2:	2316      	movs	r3, #22
 80053a4:	6003      	str	r3, [r0, #0]
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053ae:	b112      	cbz	r2, 80053b6 <_raise_r+0x1e>
 80053b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053b4:	b94b      	cbnz	r3, 80053ca <_raise_r+0x32>
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 f830 	bl	800541c <_getpid_r>
 80053bc:	462a      	mov	r2, r5
 80053be:	4601      	mov	r1, r0
 80053c0:	4620      	mov	r0, r4
 80053c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053c6:	f000 b817 	b.w	80053f8 <_kill_r>
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d00a      	beq.n	80053e4 <_raise_r+0x4c>
 80053ce:	1c59      	adds	r1, r3, #1
 80053d0:	d103      	bne.n	80053da <_raise_r+0x42>
 80053d2:	2316      	movs	r3, #22
 80053d4:	6003      	str	r3, [r0, #0]
 80053d6:	2001      	movs	r0, #1
 80053d8:	e7e7      	b.n	80053aa <_raise_r+0x12>
 80053da:	2400      	movs	r4, #0
 80053dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053e0:	4628      	mov	r0, r5
 80053e2:	4798      	blx	r3
 80053e4:	2000      	movs	r0, #0
 80053e6:	e7e0      	b.n	80053aa <_raise_r+0x12>

080053e8 <raise>:
 80053e8:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <raise+0xc>)
 80053ea:	4601      	mov	r1, r0
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	f7ff bfd3 	b.w	8005398 <_raise_r>
 80053f2:	bf00      	nop
 80053f4:	2000000c 	.word	0x2000000c

080053f8 <_kill_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4d07      	ldr	r5, [pc, #28]	; (8005418 <_kill_r+0x20>)
 80053fc:	2300      	movs	r3, #0
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	f7fb fa37 	bl	8000878 <_kill>
 800540a:	1c43      	adds	r3, r0, #1
 800540c:	d102      	bne.n	8005414 <_kill_r+0x1c>
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	b103      	cbz	r3, 8005414 <_kill_r+0x1c>
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	bf00      	nop
 8005418:	200006bc 	.word	0x200006bc

0800541c <_getpid_r>:
 800541c:	f7fb ba24 	b.w	8000868 <_getpid>

08005420 <__sread>:
 8005420:	b510      	push	{r4, lr}
 8005422:	460c      	mov	r4, r1
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	f000 f8a8 	bl	800557c <_read_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	bfab      	itete	ge
 8005430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005432:	89a3      	ldrhlt	r3, [r4, #12]
 8005434:	181b      	addge	r3, r3, r0
 8005436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800543a:	bfac      	ite	ge
 800543c:	6563      	strge	r3, [r4, #84]	; 0x54
 800543e:	81a3      	strhlt	r3, [r4, #12]
 8005440:	bd10      	pop	{r4, pc}

08005442 <__swrite>:
 8005442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	461f      	mov	r7, r3
 8005448:	898b      	ldrh	r3, [r1, #12]
 800544a:	05db      	lsls	r3, r3, #23
 800544c:	4605      	mov	r5, r0
 800544e:	460c      	mov	r4, r1
 8005450:	4616      	mov	r6, r2
 8005452:	d505      	bpl.n	8005460 <__swrite+0x1e>
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	2302      	movs	r3, #2
 800545a:	2200      	movs	r2, #0
 800545c:	f000 f868 	bl	8005530 <_lseek_r>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	4628      	mov	r0, r5
 8005472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	f000 b817 	b.w	80054a8 <_write_r>

0800547a <__sseek>:
 800547a:	b510      	push	{r4, lr}
 800547c:	460c      	mov	r4, r1
 800547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005482:	f000 f855 	bl	8005530 <_lseek_r>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	bf15      	itete	ne
 800548c:	6560      	strne	r0, [r4, #84]	; 0x54
 800548e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005496:	81a3      	strheq	r3, [r4, #12]
 8005498:	bf18      	it	ne
 800549a:	81a3      	strhne	r3, [r4, #12]
 800549c:	bd10      	pop	{r4, pc}

0800549e <__sclose>:
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 b813 	b.w	80054cc <_close_r>
	...

080054a8 <_write_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d07      	ldr	r5, [pc, #28]	; (80054c8 <_write_r+0x20>)
 80054ac:	4604      	mov	r4, r0
 80054ae:	4608      	mov	r0, r1
 80054b0:	4611      	mov	r1, r2
 80054b2:	2200      	movs	r2, #0
 80054b4:	602a      	str	r2, [r5, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f7fb fa15 	bl	80008e6 <_write>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_write_r+0x1e>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_write_r+0x1e>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200006bc 	.word	0x200006bc

080054cc <_close_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	; (80054e8 <_close_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fa21 	bl	800091e <_close>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_close_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_close_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200006bc 	.word	0x200006bc

080054ec <_fstat_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d07      	ldr	r5, [pc, #28]	; (800550c <_fstat_r+0x20>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	f7fb fa1c 	bl	8000936 <_fstat>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d102      	bne.n	8005508 <_fstat_r+0x1c>
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	b103      	cbz	r3, 8005508 <_fstat_r+0x1c>
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	bd38      	pop	{r3, r4, r5, pc}
 800550a:	bf00      	nop
 800550c:	200006bc 	.word	0x200006bc

08005510 <_isatty_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d06      	ldr	r5, [pc, #24]	; (800552c <_isatty_r+0x1c>)
 8005514:	2300      	movs	r3, #0
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fb fa1b 	bl	8000956 <_isatty>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_isatty_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_isatty_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200006bc 	.word	0x200006bc

08005530 <_lseek_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	; (8005550 <_lseek_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb fa14 	bl	800096c <_lseek>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_lseek_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_lseek_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	200006bc 	.word	0x200006bc

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f7ff bc63 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200006b4 	.word	0x200006b4

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f7ff bc5e 	b.w	8004e22 <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200006b4 	.word	0x200006b4

0800556c <_malloc_usable_size_r>:
 800556c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005570:	1f18      	subs	r0, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfbc      	itt	lt
 8005576:	580b      	ldrlt	r3, [r1, r0]
 8005578:	18c0      	addlt	r0, r0, r3
 800557a:	4770      	bx	lr

0800557c <_read_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	; (800559c <_read_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb f98e 	bl	80008ac <_read>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_read_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_read_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200006bc 	.word	0x200006bc

080055a0 <_init>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

080055ac <_fini>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr
