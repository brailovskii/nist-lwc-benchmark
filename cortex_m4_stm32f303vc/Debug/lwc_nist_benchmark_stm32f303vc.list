
lwc_nist_benchmark_stm32f303vc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080040bc  080040bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040bc  080040bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000070  08004134  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08004134  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea87  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bc  00000000  00000000  0002eb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00030be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00031858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb92  00000000  00000000  00032438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef19  00000000  00000000  00050fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfc0c  00000000  00000000  0005fee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011faef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003858  00000000  00000000  0011fb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d6c 	.word	0x08003d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003d6c 	.word	0x08003d6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4907      	ldr	r1, [pc, #28]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4013      	ands	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029e:	68fb      	ldr	r3, [r7, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 f9d1 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f80f 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f88b 	bl	80003d4 <MX_GPIO_Init>
  MX_TIM6_Init();
 80002be:	f000 f849 	bl	8000354 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80002c2:	f000 f86b 	bl	800039c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
	  HAL_Delay(1000000);
 80002c6:	4c03      	ldr	r4, [pc, #12]	; (80002d4 <main+0x24>)
	  genkat_benchmark_hash_aead();
 80002c8:	f002 ff4e 	bl	8003168 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 80002cc:	4620      	mov	r0, r4
 80002ce:	f000 fa29 	bl	8000724 <HAL_Delay>
 80002d2:	e7f9      	b.n	80002c8 <main+0x18>
 80002d4:	000f4240 	.word	0x000f4240

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	e92d 4330 	stmdb	sp!, {r4, r5, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002dc:	2400      	movs	r4, #0
{
 80002de:	b0a1      	sub	sp, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	223c      	movs	r2, #60	; 0x3c
 80002e2:	4621      	mov	r1, r4
 80002e4:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ea:	e9cd 4400 	strd	r4, r4, [sp]
 80002ee:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	9409      	str	r4, [sp, #36]	; 0x24
 80002f4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	9404      	str	r4, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	f04f 0801 	mov.w	r8, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	f003 f90e 	bl	800351c <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	f04f 0910 	mov.w	r9, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000306:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000310:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000312:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000316:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f000 fcb4 	bl	8000c84 <HAL_RCC_OscConfig>
 800031c:	b9c0      	cbnz	r0, 8000350 <SystemClock_Config+0x78>
 800031e:	4601      	mov	r1, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	2300      	movs	r3, #0
 8000322:	2200      	movs	r2, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	240f      	movs	r4, #15
 8000328:	2502      	movs	r5, #2
 800032a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800032e:	e9cd 4500 	strd	r4, r5, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000332:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000334:	f001 fbae 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	b948      	cbnz	r0, 8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033c:	2201      	movs	r2, #1
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000340:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000342:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	f001 fddc 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	b910      	cbnz	r0, 8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
}
 800034a:	b021      	add	sp, #132	; 0x84
 800034c:	e8bd 8330 	ldmia.w	sp!, {r4, r5, r8, r9, pc}
    Error_Handler();
 8000350:	f000 f84c 	bl	80003ec <Error_Handler>

08000354 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000354:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000356:	4c0f      	ldr	r4, [pc, #60]	; (8000394 <MX_TIM6_Init+0x40>)
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_TIM6_Init+0x44>)
 800035a:	6023      	str	r3, [r4, #0]
{
 800035c:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8000360:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000364:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim6.Init.Period = 65535;
 800036a:	60e2      	str	r2, [r4, #12]
  htim6.Init.Prescaler = 0;
 800036c:	6063      	str	r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036e:	9301      	str	r3, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	60a3      	str	r3, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000374:	f001 ff74 	bl	8002260 <HAL_TIM_Base_Init>
 8000378:	b948      	cbnz	r0, 800038e <MX_TIM6_Init+0x3a>
 800037a:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800037c:	a901      	add	r1, sp, #4
 800037e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000382:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000384:	f002 fa34 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000388:	b908      	cbnz	r0, 800038e <MX_TIM6_Init+0x3a>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800038a:	b004      	add	sp, #16
 800038c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800038e:	f000 f82d 	bl	80003ec <Error_Handler>
 8000392:	bf00      	nop
 8000394:	2000062c 	.word	0x2000062c
 8000398:	40001000 	.word	0x40001000

0800039c <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <MX_USART1_UART_Init+0x30>)
{
 800039e:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART1_UART_Init+0x34>)
 80003a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80003a4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a8:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003aa:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 80003b8:	6041      	str	r1, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ba:	6142      	str	r2, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003bc:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003be:	f002 fab5 	bl	800292c <HAL_UART_Init>
 80003c2:	b900      	cbnz	r0, 80003c6 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80003c6:	f000 f811 	bl	80003ec <Error_Handler>
 80003ca:	bf00      	nop
 80003cc:	200005a8 	.word	0x200005a8
 80003d0:	40013800 	.word	0x40013800

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b508      	push	{r3, lr}

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80003d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80003da:	f7ff ff51 	bl	8000280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);

}
 80003de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003e6:	f7ff bf4b 	b.w	8000280 <LL_AHB1_GRP1_EnableClock>
 80003ea:	bf00      	nop

080003ec <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
 80003ee:	e7fe      	b.n	80003ee <Error_Handler+0x2>

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x44>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x44>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_MspInit+0x44>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <HAL_MspInit+0x44>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <HAL_TIM_Base_MspInit+0x44>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d113      	bne.n	8000472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 8000450:	f043 0310 	orr.w	r3, r3, #16
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 0310 	and.w	r3, r3, #16
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	2036      	movs	r0, #54	; 0x36
 8000468:	f000 fa5b 	bl	8000922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800046c:	2036      	movs	r0, #54	; 0x36
 800046e:	f000 fa74 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40001000 	.word	0x40001000
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a17      	ldr	r2, [pc, #92]	; (8000500 <HAL_UART_MspInit+0x7c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d127      	bne.n	80004f6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a16      	ldr	r2, [pc, #88]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004d6:	2330      	movs	r3, #48	; 0x30
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004e6:	2307      	movs	r3, #7
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004f2:	f000 fa4d 	bl	8000990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f6:	bf00      	nop
 80004f8:	3728      	adds	r7, #40	; 0x28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f8c4 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <TIM6_DAC_IRQHandler+0x10>)
 8000566:	f001 ff6c 	bl	8002442 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000062c 	.word	0x2000062c

08000574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <_sbrk+0x5c>)
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <_sbrk+0x60>)
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <_sbrk+0x64>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <_sbrk+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d207      	bcs.n	80005b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a4:	f002 ff82 	bl	80034ac <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	e009      	b.n	80005c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <_sbrk+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000a000 	.word	0x2000a000
 80005d4:	00000400 	.word	0x00000400
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	200006c0 	.word	0x200006c0

080005e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SystemInit+0x20>)
 80005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <SystemInit+0x20>)
 80005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800063c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490e      	ldr	r1, [pc, #56]	; (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0b      	ldr	r2, [pc, #44]	; (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0b      	ldr	r4, [pc, #44]	; (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062e:	f7ff ffd7 	bl	80005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000632:	f002 ff41 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000636:	f7ff fe3b 	bl	80002b0 <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800063c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000648:	080040c4 	.word	0x080040c4
  ldr r2, =_sbss
 800064c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000650:	200006c0 	.word	0x200006c0

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f94f 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff febc 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f967 	bl	8000976 <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f92f 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_IncTick+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_IncTick+0x24>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000008 	.word	0x20000008
 8000708:	20000678 	.word	0x20000678

0800070c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <HAL_GetTick+0x14>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000678 	.word	0x20000678

08000724 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800072c:	f7ff ffee 	bl	800070c <HAL_GetTick>
 8000730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800073c:	d005      	beq.n	800074a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_Delay+0x44>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800074a:	bf00      	nop
 800074c:	f7ff ffde 	bl	800070c <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8f7      	bhi.n	800074c <HAL_Delay+0x28>
  {
  }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000008 	.word	0x20000008

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db0b      	blt.n	80007fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f003 021f 	and.w	r2, r3, #31
 80007e8:	4907      	ldr	r1, [pc, #28]	; (8000808 <__NVIC_EnableIRQ+0x38>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	2001      	movs	r0, #1
 80007f2:	fa00 f202 	lsl.w	r2, r0, r2
 80007f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff8e 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff29 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff3e 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff8e 	bl	8000860 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5d 	bl	800080c <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff31 	bl	80007d0 <__NVIC_EnableIRQ>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffa2 	bl	80008c8 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e154      	b.n	8000c4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8146 	beq.w	8000c44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d00b      	beq.n	80009d8 <HAL_GPIO_Init+0x48>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009cc:	2b11      	cmp	r3, #17
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b12      	cmp	r3, #18
 80009d6:	d130      	bne.n	8000a3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a0e:	2201      	movs	r2, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	091b      	lsrs	r3, r3, #4
 8000a24:	f003 0201 	and.w	r2, r3, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2203      	movs	r2, #3
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0xea>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b12      	cmp	r3, #18
 8000a78:	d123      	bne.n	8000ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	08da      	lsrs	r2, r3, #3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3208      	adds	r2, #8
 8000a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	691a      	ldr	r2, [r3, #16]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	08da      	lsrs	r2, r3, #3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3208      	adds	r2, #8
 8000abc:	6939      	ldr	r1, [r7, #16]
 8000abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0203 	and.w	r2, r3, #3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 80a0 	beq.w	8000c44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b1c:	4a53      	ldr	r2, [pc, #332]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b46:	d019      	beq.n	8000b7c <HAL_GPIO_Init+0x1ec>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a49      	ldr	r2, [pc, #292]	; (8000c70 <HAL_GPIO_Init+0x2e0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x1e8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_GPIO_Init+0x2e4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1e4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <HAL_GPIO_Init+0x2e8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1e0>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a46      	ldr	r2, [pc, #280]	; (8000c7c <HAL_GPIO_Init+0x2ec>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1dc>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e008      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	e006      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b70:	2303      	movs	r3, #3
 8000b72:	e004      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e002      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <HAL_GPIO_Init+0x1ee>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	f002 0203 	and.w	r2, r2, #3
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	4093      	lsls	r3, r2
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b8e:	4937      	ldr	r1, [pc, #220]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b9c:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bea:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c14:	4a1a      	ldr	r2, [pc, #104]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f47f aea3 	bne.w	80009a0 <HAL_GPIO_Init+0x10>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	48001000 	.word	0x48001000
 8000c80:	40010400 	.word	0x40010400

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f000 bef4 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 816a 	beq.w	8000f82 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cae:	4bb3      	ldr	r3, [pc, #716]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d00c      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cba:	4bb0      	ldr	r3, [pc, #704]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d159      	bne.n	8000d7a <HAL_RCC_OscConfig+0xf6>
 8000cc6:	4bad      	ldr	r3, [pc, #692]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d152      	bne.n	8000d7a <HAL_RCC_OscConfig+0xf6>
 8000cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d102      	bne.n	8000d06 <HAL_RCC_OscConfig+0x82>
 8000d00:	4b9e      	ldr	r3, [pc, #632]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	e015      	b.n	8000d32 <HAL_RCC_OscConfig+0xae>
 8000d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d22:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d2e:	4b93      	ldr	r3, [pc, #588]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d36:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d3e:	fa92 f2a2 	rbit	r2, r2
 8000d42:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d46:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	f042 0220 	orr.w	r2, r2, #32
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	f002 021f 	and.w	r2, r2, #31
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	4013      	ands	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 810c 	beq.w	8000f80 <HAL_RCC_OscConfig+0x2fc>
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8106 	bne.w	8000f80 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f000 be86 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d84:	d106      	bne.n	8000d94 <HAL_RCC_OscConfig+0x110>
 8000d86:	4b7d      	ldr	r3, [pc, #500]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7c      	ldr	r2, [pc, #496]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e030      	b.n	8000df6 <HAL_RCC_OscConfig+0x172>
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x134>
 8000d9e:	4b77      	ldr	r3, [pc, #476]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a76      	ldr	r2, [pc, #472]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b74      	ldr	r3, [pc, #464]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a73      	ldr	r2, [pc, #460]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e01e      	b.n	8000df6 <HAL_RCC_OscConfig+0x172>
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc2:	d10c      	bne.n	8000dde <HAL_RCC_OscConfig+0x15a>
 8000dc4:	4b6d      	ldr	r3, [pc, #436]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a6c      	ldr	r2, [pc, #432]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a69      	ldr	r2, [pc, #420]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e00b      	b.n	8000df6 <HAL_RCC_OscConfig+0x172>
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a66      	ldr	r2, [pc, #408]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a63      	ldr	r2, [pc, #396]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000df6:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	f023 020f 	bic.w	r2, r3, #15
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	495d      	ldr	r1, [pc, #372]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d059      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fc7a 	bl	800070c <HAL_GetTick>
 8000e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1c:	e00a      	b.n	8000e34 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fc75 	bl	800070c <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	d902      	bls.n	8000e34 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	f000 be29 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>
 8000e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e48:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4c:	fab3 f383 	clz	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d102      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1e2>
 8000e60:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	e015      	b.n	8000e92 <HAL_RCC_OscConfig+0x20e>
 8000e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e82:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e9e:	fa92 f2a2 	rbit	r2, r2
 8000ea2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ea6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eaa:	fab2 f282 	clz	r2, r2
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	f042 0220 	orr.w	r2, r2, #32
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	f002 021f 	and.w	r2, r2, #31
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0ab      	beq.n	8000e1e <HAL_RCC_OscConfig+0x19a>
 8000ec6:	e05c      	b.n	8000f82 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fc20 	bl	800070c <HAL_GetTick>
 8000ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fc1b 	bl	800070c <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d902      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	f000 bdcf 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>
 8000ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000efc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f00:	fab3 f383 	clz	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d102      	bne.n	8000f1a <HAL_RCC_OscConfig+0x296>
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	e015      	b.n	8000f46 <HAL_RCC_OscConfig+0x2c2>
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f36:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_RCC_OscConfig+0x2f8>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f4a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f52:	fa92 f2a2 	rbit	r2, r2
 8000f56:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f5a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f5e:	fab2 f282 	clz	r2, r2
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	f042 0220 	orr.w	r2, r2, #32
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	f002 021f 	and.w	r2, r2, #31
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1ab      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x24e>
 8000f7a:	e002      	b.n	8000f82 <HAL_RCC_OscConfig+0x2fe>
 8000f7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 816f 	beq.w	8001270 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f92:	4bd0      	ldr	r3, [pc, #832]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f9e:	4bcd      	ldr	r3, [pc, #820]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d16c      	bne.n	8001084 <HAL_RCC_OscConfig+0x400>
 8000faa:	4bca      	ldr	r3, [pc, #808]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d166      	bne.n	8001084 <HAL_RCC_OscConfig+0x400>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fc0:	fa93 f3a3 	rbit	r3, r3
 8000fc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fc8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fcc:	fab3 f383 	clz	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d102      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x362>
 8000fe0:	4bbc      	ldr	r3, [pc, #752]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	e013      	b.n	800100e <HAL_RCC_OscConfig+0x38a>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ffe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800100a:	4bb2      	ldr	r3, [pc, #712]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	2202      	movs	r2, #2
 8001010:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001014:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001018:	fa92 f2a2 	rbit	r2, r2
 800101c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001020:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001024:	fab2 f282 	clz	r2, r2
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	f002 021f 	and.w	r2, r2, #31
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d007      	beq.n	8001050 <HAL_RCC_OscConfig+0x3cc>
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d002      	beq.n	8001050 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	f000 bd1b 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4ba0      	ldr	r3, [pc, #640]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	21f8      	movs	r1, #248	; 0xf8
 8001060:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001068:	fa91 f1a1 	rbit	r1, r1
 800106c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001070:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001074:	fab1 f181 	clz	r1, r1
 8001078:	b2c9      	uxtb	r1, r1
 800107a:	408b      	lsls	r3, r1
 800107c:	4995      	ldr	r1, [pc, #596]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e0f5      	b.n	8001270 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8085 	beq.w	800119a <HAL_RCC_OscConfig+0x516>
 8001090:	2301      	movs	r3, #1
 8001092:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	461a      	mov	r2, r3
 80010b8:	2301      	movs	r3, #1
 80010ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb26 	bl	800070c <HAL_GetTick>
 80010c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fb21 	bl	800070c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d902      	bls.n	80010dc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f000 bcd5 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	095b      	lsrs	r3, r3, #5
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d102      	bne.n	800110c <HAL_RCC_OscConfig+0x488>
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	e013      	b.n	8001134 <HAL_RCC_OscConfig+0x4b0>
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001124:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	2202      	movs	r2, #2
 8001136:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800113a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800113e:	fa92 f2a2 	rbit	r2, r2
 8001142:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001146:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800114a:	fab2 f282 	clz	r2, r2
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	f042 0220 	orr.w	r2, r2, #32
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	f002 021f 	and.w	r2, r2, #31
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	4013      	ands	r3, r2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0af      	beq.n	80010c6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	21f8      	movs	r1, #248	; 0xf8
 8001176:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800117e:	fa91 f1a1 	rbit	r1, r1
 8001182:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001186:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800118a:	fab1 f181 	clz	r1, r1
 800118e:	b2c9      	uxtb	r1, r1
 8001190:	408b      	lsls	r3, r1
 8001192:	4950      	ldr	r1, [pc, #320]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
 8001198:	e06a      	b.n	8001270 <HAL_RCC_OscConfig+0x5ec>
 800119a:	2301      	movs	r3, #1
 800119c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b0:	fab3 f383 	clz	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	461a      	mov	r2, r3
 80011c2:	2300      	movs	r3, #0
 80011c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff faa1 	bl	800070c <HAL_GetTick>
 80011ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fa9c 	bl	800070c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d902      	bls.n	80011e6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f000 bc50 	b.w	8001a86 <HAL_RCC_OscConfig+0xe02>
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d102      	bne.n	8001216 <HAL_RCC_OscConfig+0x592>
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	e013      	b.n	800123e <HAL_RCC_OscConfig+0x5ba>
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800122e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x650>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	2202      	movs	r2, #2
 8001240:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001244:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001248:	fa92 f2a2 	rbit	r2, r2
 800124c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001250:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f002 021f 	and.w	r2, r2, #31
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1af      	bne.n	80011d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80da 	beq.w	8001434 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d069      	beq.n	800135e <HAL_RCC_OscConfig+0x6da>
 800128a:	2301      	movs	r3, #1
 800128c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800129c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_OscConfig+0x654>)
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	461a      	mov	r2, r3
 80012b0:	2301      	movs	r3, #1
 80012b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fa2a 	bl	800070c <HAL_GetTick>
 80012b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012bc:	e00e      	b.n	80012dc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012be:	f7ff fa25 	bl	800070c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d906      	bls.n	80012dc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e3d9      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	10908120 	.word	0x10908120
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fa93 f2a3 	rbit	r2, r3
 8001300:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800130a:	2202      	movs	r2, #2
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa93 f2a3 	rbit	r2, r3
 8001318:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800131c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	4ba5      	ldr	r3, [pc, #660]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001322:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001326:	2102      	movs	r1, #2
 8001328:	6019      	str	r1, [r3, #0]
 800132a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f1a3 	rbit	r1, r3
 8001334:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001338:	6019      	str	r1, [r3, #0]
  return result;
 800133a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fab3 f383 	clz	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0b0      	beq.n	80012be <HAL_RCC_OscConfig+0x63a>
 800135c:	e06a      	b.n	8001434 <HAL_RCC_OscConfig+0x7b0>
 800135e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	fa93 f2a3 	rbit	r2, r3
 8001370:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001374:	601a      	str	r2, [r3, #0]
  return result;
 8001376:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800137a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <HAL_RCC_OscConfig+0x934>)
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	461a      	mov	r2, r3
 800138c:	2300      	movs	r3, #0
 800138e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff f9bc 	bl	800070c <HAL_GetTick>
 8001394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	e009      	b.n	80013ae <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139a:	f7ff f9b7 	bl	800070c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e36b      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 80013ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013b2:	2202      	movs	r2, #2
 80013b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013ca:	2202      	movs	r2, #2
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa93 f2a3 	rbit	r2, r3
 80013d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013e2:	2202      	movs	r2, #2
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa93 f2a3 	rbit	r2, r3
 80013f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80013f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013fe:	2102      	movs	r1, #2
 8001400:	6019      	str	r1, [r3, #0]
 8001402:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f1a3 	rbit	r1, r3
 800140c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001410:	6019      	str	r1, [r3, #0]
  return result;
 8001412:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1b2      	bne.n	800139a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8158 	beq.w	80016f4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a56      	ldr	r2, [pc, #344]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <HAL_RCC_OscConfig+0x938>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11a      	bne.n	80014be <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001488:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x938>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_RCC_OscConfig+0x938>)
 800148e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001492:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001494:	f7ff f93a 	bl	800070c <HAL_GetTick>
 8001498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	e009      	b.n	80014b2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149e:	f7ff f935 	bl	800070c <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e2e9      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_RCC_OscConfig+0x938>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0ef      	beq.n	800149e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x852>
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	e02f      	b.n	8001536 <HAL_RCC_OscConfig+0x8b2>
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x876>
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a33      	ldr	r2, [pc, #204]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e01d      	b.n	8001536 <HAL_RCC_OscConfig+0x8b2>
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x89a>
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a2a      	ldr	r2, [pc, #168]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e00b      	b.n	8001536 <HAL_RCC_OscConfig+0x8b2>
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d06b      	beq.n	8001618 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff f8e4 	bl	800070c <HAL_GetTick>
 8001544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00b      	b.n	8001562 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff f8df 	bl	800070c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e291      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 8001562:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800157e:	2202      	movs	r2, #2
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fa93 f2a3 	rbit	r2, r3
 800158c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001590:	601a      	str	r2, [r3, #0]
  return result;
 8001592:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001596:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d109      	bne.n	80015c0 <HAL_RCC_OscConfig+0x93c>
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <HAL_RCC_OscConfig+0x930>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x958>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	10908120 	.word	0x10908120
 80015bc:	40007000 	.word	0x40007000
 80015c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015c4:	2202      	movs	r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4bbb      	ldr	r3, [pc, #748]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e0:	2102      	movs	r1, #2
 80015e2:	6011      	str	r1, [r2, #0]
 80015e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	fa92 f1a2 	rbit	r1, r2
 80015ee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015f2:	6011      	str	r1, [r2, #0]
  return result;
 80015f4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d099      	beq.n	800154a <HAL_RCC_OscConfig+0x8c6>
 8001616:	e063      	b.n	80016e0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff f878 	bl	800070c <HAL_GetTick>
 800161c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00b      	b.n	800163a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff f873 	bl	800070c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e225      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 800163a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800163e:	2202      	movs	r2, #2
 8001640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	fa93 f2a3 	rbit	r2, r3
 800164c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	fa93 f2a3 	rbit	r2, r3
 8001664:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001668:	601a      	str	r2, [r3, #0]
  return result;
 800166a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800166e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0xa06>
 8001684:	4b90      	ldr	r3, [pc, #576]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	e00d      	b.n	80016a6 <HAL_RCC_OscConfig+0xa22>
 800168a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	fa93 f2a3 	rbit	r2, r3
 800169c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016aa:	2102      	movs	r1, #2
 80016ac:	6011      	str	r1, [r2, #0]
 80016ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	fa92 f1a2 	rbit	r1, r2
 80016b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016bc:	6011      	str	r1, [r2, #0]
  return result;
 80016be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	fab2 f282 	clz	r2, r2
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	f002 021f 	and.w	r2, r2, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f202 	lsl.w	r2, r1, r2
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1a0      	bne.n	8001622 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b77      	ldr	r3, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4a76      	ldr	r2, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 81c2 	beq.w	8001a84 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	f000 819c 	beq.w	8001a46 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	2b02      	cmp	r3, #2
 8001716:	f040 8114 	bne.w	8001942 <HAL_RCC_OscConfig+0xcbe>
 800171a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800171e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001732:	601a      	str	r2, [r3, #0]
  return result;
 8001734:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001738:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001744:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	461a      	mov	r2, r3
 800174c:	2300      	movs	r3, #0
 800174e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7fe ffdc 	bl	800070c <HAL_GetTick>
 8001754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	e009      	b.n	800176e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175a:	f7fe ffd7 	bl	800070c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e18b      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 800176e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001786:	601a      	str	r2, [r3, #0]
  return result;
 8001788:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800178c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0xb24>
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e01b      	b.n	80017e0 <HAL_RCC_OscConfig+0xb5c>
 80017a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017e8:	6011      	str	r1, [r2, #0]
 80017ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	fa92 f1a2 	rbit	r1, r2
 80017f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017f8:	6011      	str	r1, [r2, #0]
  return result;
 80017fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f002 021f 	and.w	r2, r2, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d19e      	bne.n	800175a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	430b      	orrs	r3, r1
 8001832:	4925      	ldr	r1, [pc, #148]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001850:	601a      	str	r2, [r3, #0]
  return result;
 8001852:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001856:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001862:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	461a      	mov	r2, r3
 800186a:	2301      	movs	r3, #1
 800186c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7fe ff4d 	bl	800070c <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001876:	e009      	b.n	800188c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7fe ff48 	bl	800070c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0fc      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 800188c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a4:	601a      	str	r2, [r3, #0]
  return result;
 80018a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0xc48>
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <HAL_RCC_OscConfig+0xc44>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e01e      	b.n	8001904 <HAL_RCC_OscConfig+0xc80>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0xe0c>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800190c:	6011      	str	r1, [r2, #0]
 800190e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	fa92 f1a2 	rbit	r1, r2
 8001918:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800191c:	6011      	str	r1, [r2, #0]
  return result;
 800191e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	fab2 f282 	clz	r2, r2
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f042 0220 	orr.w	r2, r2, #32
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	f002 021f 	and.w	r2, r2, #31
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d09b      	beq.n	8001878 <HAL_RCC_OscConfig+0xbf4>
 8001940:	e0a0      	b.n	8001a84 <HAL_RCC_OscConfig+0xe00>
 8001942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800194a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195a:	601a      	str	r2, [r3, #0]
  return result;
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800196c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	461a      	mov	r2, r3
 8001974:	2300      	movs	r3, #0
 8001976:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7fe fec8 	bl	800070c <HAL_GetTick>
 800197c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7fe fec3 	bl	800070c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e077      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	601a      	str	r2, [r3, #0]
  return result;
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <HAL_RCC_OscConfig+0xd4c>
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_OscConfig+0xe0c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	e01b      	b.n	8001a08 <HAL_RCC_OscConfig+0xd84>
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f107 0320 	add.w	r3, r7, #32
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f107 0318 	add.w	r3, r7, #24
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_RCC_OscConfig+0xe0c>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	f107 0210 	add.w	r2, r7, #16
 8001a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	fa92 f1a2 	rbit	r1, r2
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	6011      	str	r1, [r2, #0]
  return result;
 8001a22:	f107 020c 	add.w	r2, r7, #12
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d19e      	bne.n	8001982 <HAL_RCC_OscConfig+0xcfe>
 8001a44:	e01e      	b.n	8001a84 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e018      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_RCC_OscConfig+0xe0c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b09e      	sub	sp, #120	; 0x78
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e162      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b90      	ldr	r3, [pc, #576]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d910      	bls.n	8001adc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b8d      	ldr	r3, [pc, #564]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	498b      	ldr	r1, [pc, #556]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e14a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	497f      	ldr	r1, [pc, #508]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80dc 	beq.w	8001cc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d13c      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xf6>
 8001b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xa6>
 8001b34:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e00f      	b.n	8001b5a <HAL_RCC_ClockConfig+0xc6>
 8001b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	667b      	str	r3, [r7, #100]	; 0x64
 8001b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b56:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f042 0220 	orr.w	r2, r2, #32
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f002 021f 	and.w	r2, r2, #31
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d17b      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0f3      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d13c      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x178>
 8001b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x128>
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_ClockConfig+0x148>
 8001bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8001bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
 8001bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd8:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d13a      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b2      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1a0>
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	e00d      	b.n	8001c50 <HAL_RCC_ClockConfig+0x1bc>
 8001c34:	2302      	movs	r3, #2
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	2302      	movs	r3, #2
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	2202      	movs	r2, #2
 8001c52:	61ba      	str	r2, [r7, #24]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	fa92 f2a2 	rbit	r2, r2
 8001c5a:	617a      	str	r2, [r7, #20]
  return result;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e079      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7fe fd3c 	bl	800070c <HAL_GetTick>
 8001c94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7fe fd38 	bl	800070c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e061      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d214      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e040      	b.n	8001d72 <HAL_RCC_ClockConfig+0x2de>
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	491a      	ldr	r1, [pc, #104]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4912      	ldr	r1, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d36:	f000 f829 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_ClockConfig+0x2e8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d44:	22f0      	movs	r2, #240	; 0xf0
 8001d46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	40d3      	lsrs	r3, r2
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x2ec>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_ClockConfig+0x2f0>)
 8001d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_RCC_ClockConfig+0x2f4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fc8a 	bl	8000684 <HAL_InitTick>
  
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3778      	adds	r7, #120	; 0x78
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003d84 	.word	0x08003d84
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b08b      	sub	sp, #44	; 0x2c
 8001d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e03c      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dbe:	623b      	str	r3, [r7, #32]
      break;
 8001dc0:	e03c      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	fa92 f2a2 	rbit	r2, r2
 8001dd4:	607a      	str	r2, [r7, #4]
  return result;
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	40d3      	lsrs	r3, r2
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	220f      	movs	r2, #15
 8001df0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	fa92 f2a2 	rbit	r2, r2
 8001df8:	60fa      	str	r2, [r7, #12]
  return result;
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	40d3      	lsrs	r3, r2
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e004      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	623b      	str	r3, [r7, #32]
      break;
 8001e34:	e002      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e38:	623b      	str	r3, [r7, #32]
      break;
 8001e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	372c      	adds	r7, #44	; 0x2c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	08003d9c 	.word	0x08003d9c
 8001e58:	08003dac 	.word	0x08003dac
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e7e:	f7ff ffef 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e82:	4601      	mov	r1, r0
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	603a      	str	r2, [r7, #0]
  return result;
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	40d3      	lsrs	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08003d94 	.word	0x08003d94

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ec2:	f7ff ffcd 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ed0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	603a      	str	r2, [r7, #0]
  return result;
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	40d3      	lsrs	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08003d94 	.word	0x08003d94

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b092      	sub	sp, #72	; 0x48
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80d4 	beq.w	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f24:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10e      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	61d3      	str	r3, [r2, #28]
 8001f3c:	4b48      	ldr	r3, [pc, #288]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7fe fbd1 	bl	800070c <HAL_GetTick>
 8001f6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7fe fbcd 	bl	800070c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e169      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8084 	beq.w	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d07c      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002002:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d04b      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe fb7d 	bl	800070c <HAL_GetTick>
 8002012:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe fb79 	bl	800070c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e113      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800202c:	2302      	movs	r3, #2
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
 8002038:	2302      	movs	r3, #2
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	61fb      	str	r3, [r7, #28]
  return result;
 8002044:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d108      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800205a:	4b01      	ldr	r3, [pc, #4]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	e00d      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	10908100 	.word	0x10908100
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	4b78      	ldr	r3, [pc, #480]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	613a      	str	r2, [r7, #16]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	60fa      	str	r2, [r7, #12]
  return result;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0b7      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020a6:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	496a      	ldr	r1, [pc, #424]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b66      	ldr	r3, [pc, #408]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	4a65      	ldr	r2, [pc, #404]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d8:	4b60      	ldr	r3, [pc, #384]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	f023 0203 	bic.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	495d      	ldr	r1, [pc, #372]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f6:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4956      	ldr	r1, [pc, #344]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002104:	4313      	orrs	r3, r2
 8002106:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002114:	4b51      	ldr	r3, [pc, #324]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	494e      	ldr	r1, [pc, #312]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f023 0210 	bic.w	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4947      	ldr	r1, [pc, #284]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	493f      	ldr	r1, [pc, #252]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f023 0220 	bic.w	r2, r3, #32
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4938      	ldr	r1, [pc, #224]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800217c:	4313      	orrs	r3, r2
 800217e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4930      	ldr	r1, [pc, #192]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800219a:	4313      	orrs	r3, r2
 800219c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4929      	ldr	r1, [pc, #164]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	4921      	ldr	r1, [pc, #132]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	4912      	ldr	r1, [pc, #72]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	490b      	ldr	r1, [pc, #44]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3748      	adds	r7, #72	; 0x48
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e049      	b.n	8002306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe f8d6 	bl	8000438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f000 fa16 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d001      	beq.n	8002328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e04a      	b.n	80023be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_TIM_Base_Start_IT+0xbc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d018      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d013      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00e      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_Base_Start_IT+0x6c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_TIM_Base_Start_IT+0xcc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d115      	bne.n	80023a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d015      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0xaa>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d011      	beq.n	80023ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	e008      	b.n	80023ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e000      	b.n	80023bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40013400 	.word	0x40013400
 80023dc:	40014000 	.word	0x40014000
 80023e0:	00010007 	.word	0x00010007

080023e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	f241 1311 	movw	r3, #4369	; 0x1111
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10f      	bne.n	800242c <HAL_TIM_Base_Stop_IT+0x48>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	f240 4344 	movw	r3, #1092	; 0x444
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_TIM_Base_Stop_IT+0x48>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d122      	bne.n	800249e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d11b      	bne.n	800249e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0202 	mvn.w	r2, #2
 800246e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f905 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 800248a:	e005      	b.n	8002498 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8f7 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f908 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d122      	bne.n	80024f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d11b      	bne.n	80024f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0204 	mvn.w	r2, #4
 80024c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f8db 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 80024de:	e005      	b.n	80024ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8cd 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8de 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d122      	bne.n	8002546 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11b      	bne.n	8002546 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0208 	mvn.w	r2, #8
 8002516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8b1 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 8002532:	e005      	b.n	8002540 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f8a3 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8b4 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d122      	bne.n	800259a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d11b      	bne.n	800259a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0210 	mvn.w	r2, #16
 800256a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2208      	movs	r2, #8
 8002570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f887 	bl	8002694 <HAL_TIM_IC_CaptureCallback>
 8002586:	e005      	b.n	8002594 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f879 	bl	8002680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f88a 	bl	80026a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10e      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0201 	mvn.w	r2, #1
 80025be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 febf 	bl	8003344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d10e      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b80      	cmp	r3, #128	; 0x80
 80025e0:	d107      	bne.n	80025f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f989 	bl	8002904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f97c 	bl	8002918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f838 	bl	80026bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b20      	cmp	r3, #32
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b20      	cmp	r3, #32
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0220 	mvn.w	r2, #32
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f93c 	bl	80028f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <TIM_Base_SetConfig+0x104>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00f      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d00b      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <TIM_Base_SetConfig+0x108>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a38      	ldr	r2, [pc, #224]	; (80027dc <TIM_Base_SetConfig+0x10c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a37      	ldr	r2, [pc, #220]	; (80027e0 <TIM_Base_SetConfig+0x110>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <TIM_Base_SetConfig+0x104>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01b      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d017      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <TIM_Base_SetConfig+0x108>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <TIM_Base_SetConfig+0x10c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00f      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <TIM_Base_SetConfig+0x110>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00b      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <TIM_Base_SetConfig+0x118>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0x11c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d108      	bne.n	800276c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <TIM_Base_SetConfig+0x104>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <TIM_Base_SetConfig+0x110>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <TIM_Base_SetConfig+0x114>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <TIM_Base_SetConfig+0x118>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <TIM_Base_SetConfig+0x11c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800

080027f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e063      	b.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287a:	d013      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10c      	bne.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40013400 	.word	0x40013400
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800
 80028ec:	40014000 	.word	0x40014000

080028f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e040      	b.n	80029c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd fd98 	bl	8000484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8c0 	bl	8002af0 <UART_SetConfig>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e022      	b.n	80029c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa88 	bl	8002e98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002996:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fb0f 	bl	8002fdc <UART_CheckIdleState>
 80029be:	4603      	mov	r3, r0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029dc:	2b20      	cmp	r3, #32
 80029de:	f040 8082 	bne.w	8002ae6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_UART_Transmit+0x26>
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07a      	b.n	8002ae8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Transmit+0x38>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e073      	b.n	8002ae8 <HAL_UART_Transmit+0x120>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a16:	f7fd fe79 	bl	800070c <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	88fa      	ldrh	r2, [r7, #6]
 8002a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d108      	bne.n	8002a48 <HAL_UART_Transmit+0x80>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d104      	bne.n	8002a48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	e003      	b.n	8002a50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a58:	e02d      	b.n	8002ab6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fb02 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e039      	b.n	8002ae8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	881a      	ldrh	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a86:	b292      	uxth	r2, r2
 8002a88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	e008      	b.n	8002aa4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1cb      	bne.n	8002a5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 face 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e005      	b.n	8002ae8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b1e:	f023 030c 	bic.w	r3, r3, #12
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4aae      	ldr	r2, [pc, #696]	; (8002e24 <UART_SetConfig+0x334>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d120      	bne.n	8002bb2 <UART_SetConfig+0xc2>
 8002b70:	4bad      	ldr	r3, [pc, #692]	; (8002e28 <UART_SetConfig+0x338>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d817      	bhi.n	8002bac <UART_SetConfig+0xbc>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <UART_SetConfig+0x94>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba1 	.word	0x08002ba1
 8002b8c:	08002ba7 	.word	0x08002ba7
 8002b90:	08002b9b 	.word	0x08002b9b
 8002b94:	2301      	movs	r3, #1
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	e0b5      	b.n	8002d06 <UART_SetConfig+0x216>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	77fb      	strb	r3, [r7, #31]
 8002b9e:	e0b2      	b.n	8002d06 <UART_SetConfig+0x216>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e0af      	b.n	8002d06 <UART_SetConfig+0x216>
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e0ac      	b.n	8002d06 <UART_SetConfig+0x216>
 8002bac:	2310      	movs	r3, #16
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e0a9      	b.n	8002d06 <UART_SetConfig+0x216>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a9d      	ldr	r2, [pc, #628]	; (8002e2c <UART_SetConfig+0x33c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d124      	bne.n	8002c06 <UART_SetConfig+0x116>
 8002bbc:	4b9a      	ldr	r3, [pc, #616]	; (8002e28 <UART_SetConfig+0x338>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bc8:	d011      	beq.n	8002bee <UART_SetConfig+0xfe>
 8002bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bce:	d817      	bhi.n	8002c00 <UART_SetConfig+0x110>
 8002bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bd4:	d011      	beq.n	8002bfa <UART_SetConfig+0x10a>
 8002bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bda:	d811      	bhi.n	8002c00 <UART_SetConfig+0x110>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <UART_SetConfig+0xf8>
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d006      	beq.n	8002bf4 <UART_SetConfig+0x104>
 8002be6:	e00b      	b.n	8002c00 <UART_SetConfig+0x110>
 8002be8:	2300      	movs	r3, #0
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	e08b      	b.n	8002d06 <UART_SetConfig+0x216>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	77fb      	strb	r3, [r7, #31]
 8002bf2:	e088      	b.n	8002d06 <UART_SetConfig+0x216>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e085      	b.n	8002d06 <UART_SetConfig+0x216>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e082      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c00:	2310      	movs	r3, #16
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e07f      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a89      	ldr	r2, [pc, #548]	; (8002e30 <UART_SetConfig+0x340>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d124      	bne.n	8002c5a <UART_SetConfig+0x16a>
 8002c10:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <UART_SetConfig+0x338>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002c18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c1c:	d011      	beq.n	8002c42 <UART_SetConfig+0x152>
 8002c1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c22:	d817      	bhi.n	8002c54 <UART_SetConfig+0x164>
 8002c24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c28:	d011      	beq.n	8002c4e <UART_SetConfig+0x15e>
 8002c2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c2e:	d811      	bhi.n	8002c54 <UART_SetConfig+0x164>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <UART_SetConfig+0x14c>
 8002c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c38:	d006      	beq.n	8002c48 <UART_SetConfig+0x158>
 8002c3a:	e00b      	b.n	8002c54 <UART_SetConfig+0x164>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
 8002c40:	e061      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c42:	2302      	movs	r3, #2
 8002c44:	77fb      	strb	r3, [r7, #31]
 8002c46:	e05e      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	77fb      	strb	r3, [r7, #31]
 8002c4c:	e05b      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e058      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c54:	2310      	movs	r3, #16
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e055      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a75      	ldr	r2, [pc, #468]	; (8002e34 <UART_SetConfig+0x344>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d124      	bne.n	8002cae <UART_SetConfig+0x1be>
 8002c64:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <UART_SetConfig+0x338>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c70:	d011      	beq.n	8002c96 <UART_SetConfig+0x1a6>
 8002c72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c76:	d817      	bhi.n	8002ca8 <UART_SetConfig+0x1b8>
 8002c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7c:	d011      	beq.n	8002ca2 <UART_SetConfig+0x1b2>
 8002c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c82:	d811      	bhi.n	8002ca8 <UART_SetConfig+0x1b8>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <UART_SetConfig+0x1a0>
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8c:	d006      	beq.n	8002c9c <UART_SetConfig+0x1ac>
 8002c8e:	e00b      	b.n	8002ca8 <UART_SetConfig+0x1b8>
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
 8002c94:	e037      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c96:	2302      	movs	r3, #2
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e034      	b.n	8002d06 <UART_SetConfig+0x216>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e031      	b.n	8002d06 <UART_SetConfig+0x216>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e02e      	b.n	8002d06 <UART_SetConfig+0x216>
 8002ca8:	2310      	movs	r3, #16
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e02b      	b.n	8002d06 <UART_SetConfig+0x216>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a61      	ldr	r2, [pc, #388]	; (8002e38 <UART_SetConfig+0x348>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d124      	bne.n	8002d02 <UART_SetConfig+0x212>
 8002cb8:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <UART_SetConfig+0x338>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc4:	d011      	beq.n	8002cea <UART_SetConfig+0x1fa>
 8002cc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cca:	d817      	bhi.n	8002cfc <UART_SetConfig+0x20c>
 8002ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd0:	d011      	beq.n	8002cf6 <UART_SetConfig+0x206>
 8002cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd6:	d811      	bhi.n	8002cfc <UART_SetConfig+0x20c>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <UART_SetConfig+0x1f4>
 8002cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce0:	d006      	beq.n	8002cf0 <UART_SetConfig+0x200>
 8002ce2:	e00b      	b.n	8002cfc <UART_SetConfig+0x20c>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e00d      	b.n	8002d06 <UART_SetConfig+0x216>
 8002cea:	2302      	movs	r3, #2
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e00a      	b.n	8002d06 <UART_SetConfig+0x216>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e007      	b.n	8002d06 <UART_SetConfig+0x216>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e004      	b.n	8002d06 <UART_SetConfig+0x216>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e001      	b.n	8002d06 <UART_SetConfig+0x216>
 8002d02:	2310      	movs	r3, #16
 8002d04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0e:	d15c      	bne.n	8002dca <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d827      	bhi.n	8002d66 <UART_SetConfig+0x276>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <UART_SetConfig+0x22c>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	08002d51 	.word	0x08002d51
 8002d28:	08002d67 	.word	0x08002d67
 8002d2c:	08002d57 	.word	0x08002d57
 8002d30:	08002d67 	.word	0x08002d67
 8002d34:	08002d67 	.word	0x08002d67
 8002d38:	08002d67 	.word	0x08002d67
 8002d3c:	08002d5f 	.word	0x08002d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d40:	f7ff f89a 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8002d44:	61b8      	str	r0, [r7, #24]
        break;
 8002d46:	e013      	b.n	8002d70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d48:	f7ff f8b8 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002d4c:	61b8      	str	r0, [r7, #24]
        break;
 8002d4e:	e00f      	b.n	8002d70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <UART_SetConfig+0x34c>)
 8002d52:	61bb      	str	r3, [r7, #24]
        break;
 8002d54:	e00c      	b.n	8002d70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d56:	f7ff f819 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002d5a:	61b8      	str	r0, [r7, #24]
        break;
 8002d5c:	e008      	b.n	8002d70 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d62:	61bb      	str	r3, [r7, #24]
        break;
 8002d64:	e004      	b.n	8002d70 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8085 	beq.w	8002e82 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	005a      	lsls	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	441a      	add	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	d916      	bls.n	8002dc4 <UART_SetConfig+0x2d4>
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	d212      	bcs.n	8002dc4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f023 030f 	bic.w	r3, r3, #15
 8002da6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	89fa      	ldrh	r2, [r7, #14]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	e05e      	b.n	8002e82 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77bb      	strb	r3, [r7, #30]
 8002dc8:	e05b      	b.n	8002e82 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d837      	bhi.n	8002e40 <UART_SetConfig+0x350>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0x2e8>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e41 	.word	0x08002e41
 8002de8:	08002e13 	.word	0x08002e13
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08002e41 	.word	0x08002e41
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7ff f83c 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8002e00:	61b8      	str	r0, [r7, #24]
        break;
 8002e02:	e022      	b.n	8002e4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7ff f85a 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002e08:	61b8      	str	r0, [r7, #24]
        break;
 8002e0a:	e01e      	b.n	8002e4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <UART_SetConfig+0x34c>)
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e01b      	b.n	8002e4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e12:	f7fe ffbb 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002e16:	61b8      	str	r0, [r7, #24]
        break;
 8002e18:	e017      	b.n	8002e4a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e013      	b.n	8002e4a <UART_SetConfig+0x35a>
 8002e22:	bf00      	nop
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40004400 	.word	0x40004400
 8002e30:	40004800 	.word	0x40004800
 8002e34:	40004c00 	.word	0x40004c00
 8002e38:	40005000 	.word	0x40005000
 8002e3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	77bb      	strb	r3, [r7, #30]
        break;
 8002e48:	bf00      	nop
    }

    if (pclk != 0U)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d018      	beq.n	8002e82 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	085a      	lsrs	r2, r3, #1
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d908      	bls.n	8002e7e <UART_SetConfig+0x38e>
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e72:	d204      	bcs.n	8002e7e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	e001      	b.n	8002e82 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e8e:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3720      	adds	r7, #32
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01a      	beq.n	8002fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f96:	d10a      	bne.n	8002fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fec:	f7fd fb8e 	bl	800070c <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d10e      	bne.n	800301e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003000:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f82d 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e023      	b.n	8003066 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d10e      	bne.n	800304a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800302c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f817 	bl	800306e <UART_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e00d      	b.n	8003066 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	e05e      	b.n	800313e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d05a      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fd fb40 	bl	800070c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	429a      	cmp	r2, r3
 8003096:	d302      	bcc.n	800309e <UART_WaitOnFlagUntilTimeout+0x30>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11b      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e043      	b.n	800315e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02c      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f2:	d124      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800310c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e00f      	b.n	800315e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4013      	ands	r3, r2
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	429a      	cmp	r2, r3
 800315a:	d091      	beq.n	8003080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003168:	b538      	push	{r3, r4, r5, lr}

	int ret = 0;

	get_memory_usage();
 800316a:	f000 f947 	bl	80033fc <get_memory_usage>
	tick_msr_start();
	tick_msr_end();

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
	lwc_printf("Memory usage: ");
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 800316e:	4c16      	ldr	r4, [pc, #88]	; (80031c8 <genkat_benchmark_hash_aead+0x60>)
	tick_msr_start();
 8003170:	f000 f8f0 	bl	8003354 <tick_msr_start>
	tick_msr_end();
 8003174:	f000 f906 	bl	8003384 <tick_msr_end>
	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <genkat_benchmark_hash_aead+0x64>)
 800317a:	4915      	ldr	r1, [pc, #84]	; (80031d0 <genkat_benchmark_hash_aead+0x68>)
 800317c:	4815      	ldr	r0, [pc, #84]	; (80031d4 <genkat_benchmark_hash_aead+0x6c>)
 800317e:	f000 f91f 	bl	80033c0 <lwc_printf>
	lwc_printf("Memory usage: ");
 8003182:	4815      	ldr	r0, [pc, #84]	; (80031d8 <genkat_benchmark_hash_aead+0x70>)
 8003184:	f000 f91c 	bl	80033c0 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8003188:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 800318c:	4813      	ldr	r0, [pc, #76]	; (80031dc <genkat_benchmark_hash_aead+0x74>)
 800318e:	f000 f917 	bl	80033c0 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8003192:	f44f 7580 	mov.w	r5, #256	; 0x100
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003196:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
 800319a:	6a21      	ldr	r1, [r4, #32]
 800319c:	4810      	ldr	r0, [pc, #64]	; (80031e0 <genkat_benchmark_hash_aead+0x78>)
 800319e:	f000 f90f 	bl	80033c0 <lwc_printf>
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 80031a2:	462a      	mov	r2, r5
 80031a4:	2100      	movs	r1, #0
 80031a6:	480f      	ldr	r0, [pc, #60]	; (80031e4 <genkat_benchmark_hash_aead+0x7c>)
 80031a8:	f000 f9b8 	bl	800351c <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 80031ac:	462a      	mov	r2, r5
 80031ae:	2100      	movs	r1, #0
 80031b0:	480d      	ldr	r0, [pc, #52]	; (80031e8 <genkat_benchmark_hash_aead+0x80>)
 80031b2:	f000 f9b3 	bl	800351c <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 80031b6:	462a      	mov	r2, r5
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <genkat_benchmark_hash_aead+0x84>)
 80031ba:	2100      	movs	r1, #0
 80031bc:	f000 f9ae 	bl	800351c <memset>
#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
}
 80031c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = hash_generate_test_vectors();
 80031c4:	f000 b814 	b.w	80031f0 <hash_generate_test_vectors>
 80031c8:	2000067c 	.word	0x2000067c
 80031cc:	08003dbc 	.word	0x08003dbc
 80031d0:	08003e3c 	.word	0x08003e3c
 80031d4:	08003ebc 	.word	0x08003ebc
 80031d8:	08003f08 	.word	0x08003f08
 80031dc:	08003f18 	.word	0x08003f18
 80031e0:	08003f40 	.word	0x08003f40
 80031e4:	20000098 	.word	0x20000098
 80031e8:	20000198 	.word	0x20000198
 80031ec:	20000298 	.word	0x20000298

080031f0 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;

	init_buffer(msg, sizeof(msg));
 80031f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031fc:	2300      	movs	r3, #0
 80031fe:	4668      	mov	r0, sp
 8003200:	f000 f88e 	bl	8003320 <init_buffer>
 8003204:	4e30      	ldr	r6, [pc, #192]	; (80032c8 <hash_generate_test_vectors+0xd8>)
 8003206:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80032d8 <hash_generate_test_vectors+0xe8>
 800320a:	4f30      	ldr	r7, [pc, #192]	; (80032cc <hash_generate_test_vectors+0xdc>)
 800320c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80032dc <hash_generate_test_vectors+0xec>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {

		lwc_printf("msg_len:%6d ", (int)mlen);
 8003210:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80032e0 <hash_generate_test_vectors+0xf0>
		tick_msr_end();

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;

		if(ret_val == 0) {
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003214:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80032e4 <hash_generate_test_vectors+0xf4>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003218:	2400      	movs	r4, #0
 800321a:	2500      	movs	r5, #0
		lwc_printf("msg_len:%6d ", (int)mlen);
 800321c:	4621      	mov	r1, r4
 800321e:	4650      	mov	r0, sl
 8003220:	f000 f8ce 	bl	80033c0 <lwc_printf>
		tick_msr_start();
 8003224:	f000 f896 	bl	8003354 <tick_msr_start>
		tick_msr_end();
 8003228:	f000 f8ac 	bl	8003384 <tick_msr_end>
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 800322c:	f8d9 2000 	ldr.w	r2, [r9]
 8003230:	6833      	ldr	r3, [r6, #0]
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003232:	2a00      	cmp	r2, #0
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8003234:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003238:	4694      	mov	ip, r2
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 800323a:	f103 0301 	add.w	r3, r3, #1
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 800323e:	bfb8      	it	lt
 8003240:	f102 0c0f 	addlt.w	ip, r2, #15
 8003244:	4611      	mov	r1, r2
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8003246:	6033      	str	r3, [r6, #0]
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8003248:	4658      	mov	r0, fp
 800324a:	f8d8 3000 	ldr.w	r3, [r8]
 800324e:	ea4f 122c 	mov.w	r2, ip, asr #4
 8003252:	f000 f8b5 	bl	80033c0 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8003256:	ea54 0305 	orrs.w	r3, r4, r5
 800325a:	d032      	beq.n	80032c2 <hash_generate_test_vectors+0xd2>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 800325c:	1924      	adds	r4, r4, r4
 800325e:	416d      	adcs	r5, r5
 8003260:	2300      	movs	r3, #0
 8003262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003266:	42ab      	cmp	r3, r5
 8003268:	bf08      	it	eq
 800326a:	42a2      	cmpeq	r2, r4
 800326c:	d2d6      	bcs.n	800321c <hash_generate_test_vectors+0x2c>
			mlen = 4;
		}
	}//end of for loop


	ticks_res_pos = 0;
 800326e:	2300      	movs	r3, #0
	aead_hash_print_res("HASH");
 8003270:	4817      	ldr	r0, [pc, #92]	; (80032d0 <hash_generate_test_vectors+0xe0>)
	ticks_res_pos = 0;
 8003272:	6033      	str	r3, [r6, #0]
	aead_hash_print_res("HASH");
 8003274:	f000 f83a 	bl	80032ec <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 8003278:	4816      	ldr	r0, [pc, #88]	; (80032d4 <hash_generate_test_vectors+0xe4>)
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 800327a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80032e8 <hash_generate_test_vectors+0xf8>
	lwc_printf("HASHTotRes: ");
 800327e:	f000 f89f 	bl	80033c0 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003282:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003286:	f04f 0900 	mov.w	r9, #0
 800328a:	2400      	movs	r4, #0
 800328c:	2500      	movs	r5, #0
		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 800328e:	6833      	ldr	r3, [r6, #0]
 8003290:	1c58      	adds	r0, r3, #1
 8003292:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8003296:	6030      	str	r0, [r6, #0]
 8003298:	4621      	mov	r1, r4
 800329a:	4650      	mov	r0, sl
 800329c:	f000 f890 	bl	80033c0 <lwc_printf>

		if(mlen==0){
 80032a0:	ea54 0305 	orrs.w	r3, r4, r5
 80032a4:	d00a      	beq.n	80032bc <hash_generate_test_vectors+0xcc>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80032a6:	1924      	adds	r4, r4, r4
 80032a8:	416d      	adcs	r5, r5
 80032aa:	45a9      	cmp	r9, r5
 80032ac:	bf08      	it	eq
 80032ae:	45a0      	cmpeq	r8, r4
 80032b0:	d2ed      	bcs.n	800328e <hash_generate_test_vectors+0x9e>
			mlen = 4;
		}
	}

	return ret_val;
}
 80032b2:	2000      	movs	r0, #0
 80032b4:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 80032b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80032bc:	2408      	movs	r4, #8
 80032be:	2500      	movs	r5, #0
 80032c0:	e7e5      	b.n	800328e <hash_generate_test_vectors+0x9e>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80032c2:	2408      	movs	r4, #8
 80032c4:	2500      	movs	r5, #0
 80032c6:	e7a9      	b.n	800321c <hash_generate_test_vectors+0x2c>
 80032c8:	20000398 	.word	0x20000398
 80032cc:	20000298 	.word	0x20000298
 80032d0:	08003f98 	.word	0x08003f98
 80032d4:	08003fa0 	.word	0x08003fa0
 80032d8:	20000090 	.word	0x20000090
 80032dc:	20000094 	.word	0x20000094
 80032e0:	08003f6c 	.word	0x08003f6c
 80032e4:	08003f7c 	.word	0x08003f7c
 80032e8:	08003fb0 	.word	0x08003fb0

080032ec <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 80032ec:	b510      	push	{r4, lr}
 80032ee:	4601      	mov	r1, r0
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <aead_hash_print_res+0x20>)
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <aead_hash_print_res+0x24>)
 80032f4:	4807      	ldr	r0, [pc, #28]	; (8003314 <aead_hash_print_res+0x28>)
 80032f6:	f000 f863 	bl	80033c0 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 80032fa:	4907      	ldr	r1, [pc, #28]	; (8003318 <aead_hash_print_res+0x2c>)
 80032fc:	4807      	ldr	r0, [pc, #28]	; (800331c <aead_hash_print_res+0x30>)
 80032fe:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
}
 8003302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8003306:	6a09      	ldr	r1, [r1, #32]
 8003308:	f000 b85a 	b.w	80033c0 <lwc_printf>
 800330c:	08003dbc 	.word	0x08003dbc
 8003310:	08003e3c 	.word	0x08003e3c
 8003314:	08003fbc 	.word	0x08003fbc
 8003318:	2000067c 	.word	0x2000067c
 800331c:	08003ffc 	.word	0x08003ffc

08003320 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8003320:	b430      	push	{r4, r5}
 8003322:	4614      	mov	r4, r2
 8003324:	461d      	mov	r5, r3
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003326:	ea54 0305 	orrs.w	r3, r4, r5
 800332a:	d009      	beq.n	8003340 <init_buffer+0x20>
 800332c:	1e41      	subs	r1, r0, #1
 800332e:	460b      	mov	r3, r1
 8003330:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
 8003334:	4411      	add	r1, r2
 8003336:	18c2      	adds	r2, r0, r3
		buffer[i] = (unsigned char) i + '0';
 8003338:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (unsigned long long i = 0; i < numbytes; i++) {
 800333c:	428b      	cmp	r3, r1
 800333e:	d1fa      	bne.n	8003336 <init_buffer+0x16>
	}
}
 8003340:	bc30      	pop	{r4, r5}
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 8003344:	4a02      	ldr	r2, [pc, #8]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	2000039c 	.word	0x2000039c

08003354 <tick_msr_start>:

void tick_msr_start(void) {
 8003354:	b510      	push	{r4, lr}

	tim_per_elp_cnt = 0;
	htim6.Instance->CNT = 0;
 8003356:	4c08      	ldr	r4, [pc, #32]	; (8003378 <tick_msr_start+0x24>)
	tim_per_elp_cnt = 0;
 8003358:	4a08      	ldr	r2, [pc, #32]	; (800337c <tick_msr_start+0x28>)
	htim6.Instance->CNT = 0;
 800335a:	6821      	ldr	r1, [r4, #0]
	tim_per_elp_cnt = 0;
 800335c:	2300      	movs	r3, #0
	htim6.Instance->CNT = 0;
 800335e:	624b      	str	r3, [r1, #36]	; 0x24
	tim_per_elp_cnt = 0;
 8003360:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick();
 8003362:	f7fd f9d3 	bl	800070c <HAL_GetTick>
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <tick_msr_start+0x2c>)
 8003368:	4602      	mov	r2, r0
	HAL_TIM_Base_Start_IT(&htim6);
 800336a:	4620      	mov	r0, r4
}
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gb_ms_ticks = HAL_GetTick();
 8003370:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8003372:	f7fe bfcd 	b.w	8002310 <HAL_TIM_Base_Start_IT>
 8003376:	bf00      	nop
 8003378:	2000062c 	.word	0x2000062c
 800337c:	2000039c 	.word	0x2000039c
 8003380:	20000094 	.word	0x20000094

08003384 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8003384:	b538      	push	{r3, r4, r5, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 8003386:	4d0a      	ldr	r5, [pc, #40]	; (80033b0 <tick_msr_end+0x2c>)
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8003388:	4c0a      	ldr	r4, [pc, #40]	; (80033b4 <tick_msr_end+0x30>)
	HAL_TIM_Base_Stop_IT(&htim6);
 800338a:	4628      	mov	r0, r5
 800338c:	f7ff f82a 	bl	80023e4 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <tick_msr_end+0x34>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800339c:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 800339e:	f7fd f9b5 	bl	800070c <HAL_GetTick>
 80033a2:	4a06      	ldr	r2, [pc, #24]	; (80033bc <tick_msr_end+0x38>)
 80033a4:	6811      	ldr	r1, [r2, #0]
 80033a6:	4603      	mov	r3, r0
 80033a8:	1a5b      	subs	r3, r3, r1
	return gb_tick_cnt;
}
 80033aa:	6820      	ldr	r0, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 80033ac:	6013      	str	r3, [r2, #0]
}
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	2000062c 	.word	0x2000062c
 80033b4:	20000090 	.word	0x20000090
 80033b8:	2000039c 	.word	0x2000039c
 80033bc:	20000094 	.word	0x20000094

080033c0 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 80033c0:	b40f      	push	{r0, r1, r2, r3}
 80033c2:	b510      	push	{r4, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	aa04      	add	r2, sp, #16

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
	vsprintf(dbg_out_buf, format, args);
 80033c8:	4c0a      	ldr	r4, [pc, #40]	; (80033f4 <lwc_printf+0x34>)
void lwc_printf(const char *format, ...) {
 80033ca:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, format);
 80033ce:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 80033d0:	4620      	mov	r0, r4
 80033d2:	f000 fa55 	bl	8003880 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7fc fefa 	bl	80001d0 <strlen>
 80033dc:	4621      	mov	r1, r4
 80033de:	b282      	uxth	r2, r0
 80033e0:	2364      	movs	r3, #100	; 0x64
 80033e2:	4805      	ldr	r0, [pc, #20]	; (80033f8 <lwc_printf+0x38>)
 80033e4:	f7ff faf0 	bl	80029c8 <HAL_UART_Transmit>
}
 80033e8:	b002      	add	sp, #8
 80033ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033ee:	b004      	add	sp, #16
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	200003a0 	.word	0x200003a0
 80033f8:	200005a8 	.word	0x200005a8

080033fc <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8003400:	2234      	movs	r2, #52	; 0x34
 8003402:	2100      	movs	r1, #0
 8003404:	4822      	ldr	r0, [pc, #136]	; (8003490 <get_memory_usage+0x94>)
 8003406:	f000 f889 	bl	800351c <memset>

	mem_stat.flash_start_adr = 0x8000000;
 800340a:	4b21      	ldr	r3, [pc, #132]	; (8003490 <get_memory_usage+0x94>)
 800340c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003410:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <get_memory_usage+0x94>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <get_memory_usage+0x94>)
 8003418:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <get_memory_usage+0x98>)
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <get_memory_usage+0x94>)
 800341e:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <get_memory_usage+0x9c>)
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <get_memory_usage+0x94>)
 8003424:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <get_memory_usage+0xa0>)
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <get_memory_usage+0x94>)
 800342a:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <get_memory_usage+0xa4>)
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <get_memory_usage+0x94>)
 8003430:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8003432:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <get_memory_usage+0xa8>)
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <get_memory_usage+0x94>)
 8003436:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <get_memory_usage+0xac>)
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <get_memory_usage+0x94>)
 800343c:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <get_memory_usage+0x94>)
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <get_memory_usage+0x94>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <get_memory_usage+0x94>)
 800344a:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <get_memory_usage+0x94>)
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <get_memory_usage+0x94>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <get_memory_usage+0x94>)
 8003458:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <get_memory_usage+0x94>)
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <get_memory_usage+0x94>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <get_memory_usage+0x94>)
 8003466:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <get_memory_usage+0x94>)
 800346a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <get_memory_usage+0x94>)
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	4413      	add	r3, r2
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <get_memory_usage+0x94>)
 8003474:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <get_memory_usage+0x94>)
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <get_memory_usage+0x94>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	441a      	add	r2, r3
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <get_memory_usage+0x94>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	4a02      	ldr	r2, [pc, #8]	; (8003490 <get_memory_usage+0x94>)
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000067c 	.word	0x2000067c
 8003494:	08003d84 	.word	0x08003d84
 8003498:	20000070 	.word	0x20000070
 800349c:	200006c0 	.word	0x200006c0
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000070 	.word	0x20000070
 80034a8:	080040c4 	.word	0x080040c4

080034ac <__errno>:
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <__errno+0x8>)
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4d0d      	ldr	r5, [pc, #52]	; (80034f0 <__libc_init_array+0x38>)
 80034bc:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	2600      	movs	r6, #0
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	4d0b      	ldr	r5, [pc, #44]	; (80034f8 <__libc_init_array+0x40>)
 80034ca:	4c0c      	ldr	r4, [pc, #48]	; (80034fc <__libc_init_array+0x44>)
 80034cc:	f000 fc4e 	bl	8003d6c <_init>
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	2600      	movs	r6, #0
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	080040bc 	.word	0x080040bc
 80034f4:	080040bc 	.word	0x080040bc
 80034f8:	080040bc 	.word	0x080040bc
 80034fc:	080040c0 	.word	0x080040c0

08003500 <memcpy>:
 8003500:	440a      	add	r2, r1
 8003502:	4291      	cmp	r1, r2
 8003504:	f100 33ff 	add.w	r3, r0, #4294967295
 8003508:	d100      	bne.n	800350c <memcpy+0xc>
 800350a:	4770      	bx	lr
 800350c:	b510      	push	{r4, lr}
 800350e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003516:	4291      	cmp	r1, r2
 8003518:	d1f9      	bne.n	800350e <memcpy+0xe>
 800351a:	bd10      	pop	{r4, pc}

0800351c <memset>:
 800351c:	4402      	add	r2, r0
 800351e:	4603      	mov	r3, r0
 8003520:	4293      	cmp	r3, r2
 8003522:	d100      	bne.n	8003526 <memset+0xa>
 8003524:	4770      	bx	lr
 8003526:	f803 1b01 	strb.w	r1, [r3], #1
 800352a:	e7f9      	b.n	8003520 <memset+0x4>

0800352c <_printf_common>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	4616      	mov	r6, r2
 8003532:	4699      	mov	r9, r3
 8003534:	688a      	ldr	r2, [r1, #8]
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800353c:	4293      	cmp	r3, r2
 800353e:	bfb8      	it	lt
 8003540:	4613      	movlt	r3, r2
 8003542:	6033      	str	r3, [r6, #0]
 8003544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003548:	4607      	mov	r7, r0
 800354a:	460c      	mov	r4, r1
 800354c:	b10a      	cbz	r2, 8003552 <_printf_common+0x26>
 800354e:	3301      	adds	r3, #1
 8003550:	6033      	str	r3, [r6, #0]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	6833      	ldrmi	r3, [r6, #0]
 800355a:	3302      	addmi	r3, #2
 800355c:	6033      	strmi	r3, [r6, #0]
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	f015 0506 	ands.w	r5, r5, #6
 8003564:	d106      	bne.n	8003574 <_printf_common+0x48>
 8003566:	f104 0a19 	add.w	sl, r4, #25
 800356a:	68e3      	ldr	r3, [r4, #12]
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	42ab      	cmp	r3, r5
 8003572:	dc26      	bgt.n	80035c2 <_printf_common+0x96>
 8003574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003578:	1e13      	subs	r3, r2, #0
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	bf18      	it	ne
 800357e:	2301      	movne	r3, #1
 8003580:	0692      	lsls	r2, r2, #26
 8003582:	d42b      	bmi.n	80035dc <_printf_common+0xb0>
 8003584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003588:	4649      	mov	r1, r9
 800358a:	4638      	mov	r0, r7
 800358c:	47c0      	blx	r8
 800358e:	3001      	adds	r0, #1
 8003590:	d01e      	beq.n	80035d0 <_printf_common+0xa4>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	68e5      	ldr	r5, [r4, #12]
 8003596:	6832      	ldr	r2, [r6, #0]
 8003598:	f003 0306 	and.w	r3, r3, #6
 800359c:	2b04      	cmp	r3, #4
 800359e:	bf08      	it	eq
 80035a0:	1aad      	subeq	r5, r5, r2
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	6922      	ldr	r2, [r4, #16]
 80035a6:	bf0c      	ite	eq
 80035a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ac:	2500      	movne	r5, #0
 80035ae:	4293      	cmp	r3, r2
 80035b0:	bfc4      	itt	gt
 80035b2:	1a9b      	subgt	r3, r3, r2
 80035b4:	18ed      	addgt	r5, r5, r3
 80035b6:	2600      	movs	r6, #0
 80035b8:	341a      	adds	r4, #26
 80035ba:	42b5      	cmp	r5, r6
 80035bc:	d11a      	bne.n	80035f4 <_printf_common+0xc8>
 80035be:	2000      	movs	r0, #0
 80035c0:	e008      	b.n	80035d4 <_printf_common+0xa8>
 80035c2:	2301      	movs	r3, #1
 80035c4:	4652      	mov	r2, sl
 80035c6:	4649      	mov	r1, r9
 80035c8:	4638      	mov	r0, r7
 80035ca:	47c0      	blx	r8
 80035cc:	3001      	adds	r0, #1
 80035ce:	d103      	bne.n	80035d8 <_printf_common+0xac>
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d8:	3501      	adds	r5, #1
 80035da:	e7c6      	b.n	800356a <_printf_common+0x3e>
 80035dc:	18e1      	adds	r1, r4, r3
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	2030      	movs	r0, #48	; 0x30
 80035e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e6:	4422      	add	r2, r4
 80035e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f0:	3302      	adds	r3, #2
 80035f2:	e7c7      	b.n	8003584 <_printf_common+0x58>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4622      	mov	r2, r4
 80035f8:	4649      	mov	r1, r9
 80035fa:	4638      	mov	r0, r7
 80035fc:	47c0      	blx	r8
 80035fe:	3001      	adds	r0, #1
 8003600:	d0e6      	beq.n	80035d0 <_printf_common+0xa4>
 8003602:	3601      	adds	r6, #1
 8003604:	e7d9      	b.n	80035ba <_printf_common+0x8e>
	...

08003608 <_printf_i>:
 8003608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	460c      	mov	r4, r1
 800360e:	4691      	mov	r9, r2
 8003610:	7e27      	ldrb	r7, [r4, #24]
 8003612:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003614:	2f78      	cmp	r7, #120	; 0x78
 8003616:	4680      	mov	r8, r0
 8003618:	469a      	mov	sl, r3
 800361a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800361e:	d807      	bhi.n	8003630 <_printf_i+0x28>
 8003620:	2f62      	cmp	r7, #98	; 0x62
 8003622:	d80a      	bhi.n	800363a <_printf_i+0x32>
 8003624:	2f00      	cmp	r7, #0
 8003626:	f000 80d8 	beq.w	80037da <_printf_i+0x1d2>
 800362a:	2f58      	cmp	r7, #88	; 0x58
 800362c:	f000 80a3 	beq.w	8003776 <_printf_i+0x16e>
 8003630:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003638:	e03a      	b.n	80036b0 <_printf_i+0xa8>
 800363a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800363e:	2b15      	cmp	r3, #21
 8003640:	d8f6      	bhi.n	8003630 <_printf_i+0x28>
 8003642:	a001      	add	r0, pc, #4	; (adr r0, 8003648 <_printf_i+0x40>)
 8003644:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003648:	080036a1 	.word	0x080036a1
 800364c:	080036b5 	.word	0x080036b5
 8003650:	08003631 	.word	0x08003631
 8003654:	08003631 	.word	0x08003631
 8003658:	08003631 	.word	0x08003631
 800365c:	08003631 	.word	0x08003631
 8003660:	080036b5 	.word	0x080036b5
 8003664:	08003631 	.word	0x08003631
 8003668:	08003631 	.word	0x08003631
 800366c:	08003631 	.word	0x08003631
 8003670:	08003631 	.word	0x08003631
 8003674:	080037c1 	.word	0x080037c1
 8003678:	080036e5 	.word	0x080036e5
 800367c:	080037a3 	.word	0x080037a3
 8003680:	08003631 	.word	0x08003631
 8003684:	08003631 	.word	0x08003631
 8003688:	080037e3 	.word	0x080037e3
 800368c:	08003631 	.word	0x08003631
 8003690:	080036e5 	.word	0x080036e5
 8003694:	08003631 	.word	0x08003631
 8003698:	08003631 	.word	0x08003631
 800369c:	080037ab 	.word	0x080037ab
 80036a0:	680b      	ldr	r3, [r1, #0]
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	600a      	str	r2, [r1, #0]
 80036a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0a3      	b.n	80037fc <_printf_i+0x1f4>
 80036b4:	6825      	ldr	r5, [r4, #0]
 80036b6:	6808      	ldr	r0, [r1, #0]
 80036b8:	062e      	lsls	r6, r5, #24
 80036ba:	f100 0304 	add.w	r3, r0, #4
 80036be:	d50a      	bpl.n	80036d6 <_printf_i+0xce>
 80036c0:	6805      	ldr	r5, [r0, #0]
 80036c2:	600b      	str	r3, [r1, #0]
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	da03      	bge.n	80036d0 <_printf_i+0xc8>
 80036c8:	232d      	movs	r3, #45	; 0x2d
 80036ca:	426d      	negs	r5, r5
 80036cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d0:	485e      	ldr	r0, [pc, #376]	; (800384c <_printf_i+0x244>)
 80036d2:	230a      	movs	r3, #10
 80036d4:	e019      	b.n	800370a <_printf_i+0x102>
 80036d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036da:	6805      	ldr	r5, [r0, #0]
 80036dc:	600b      	str	r3, [r1, #0]
 80036de:	bf18      	it	ne
 80036e0:	b22d      	sxthne	r5, r5
 80036e2:	e7ef      	b.n	80036c4 <_printf_i+0xbc>
 80036e4:	680b      	ldr	r3, [r1, #0]
 80036e6:	6825      	ldr	r5, [r4, #0]
 80036e8:	1d18      	adds	r0, r3, #4
 80036ea:	6008      	str	r0, [r1, #0]
 80036ec:	0628      	lsls	r0, r5, #24
 80036ee:	d501      	bpl.n	80036f4 <_printf_i+0xec>
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	e002      	b.n	80036fa <_printf_i+0xf2>
 80036f4:	0669      	lsls	r1, r5, #25
 80036f6:	d5fb      	bpl.n	80036f0 <_printf_i+0xe8>
 80036f8:	881d      	ldrh	r5, [r3, #0]
 80036fa:	4854      	ldr	r0, [pc, #336]	; (800384c <_printf_i+0x244>)
 80036fc:	2f6f      	cmp	r7, #111	; 0x6f
 80036fe:	bf0c      	ite	eq
 8003700:	2308      	moveq	r3, #8
 8003702:	230a      	movne	r3, #10
 8003704:	2100      	movs	r1, #0
 8003706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800370a:	6866      	ldr	r6, [r4, #4]
 800370c:	60a6      	str	r6, [r4, #8]
 800370e:	2e00      	cmp	r6, #0
 8003710:	bfa2      	ittt	ge
 8003712:	6821      	ldrge	r1, [r4, #0]
 8003714:	f021 0104 	bicge.w	r1, r1, #4
 8003718:	6021      	strge	r1, [r4, #0]
 800371a:	b90d      	cbnz	r5, 8003720 <_printf_i+0x118>
 800371c:	2e00      	cmp	r6, #0
 800371e:	d04d      	beq.n	80037bc <_printf_i+0x1b4>
 8003720:	4616      	mov	r6, r2
 8003722:	fbb5 f1f3 	udiv	r1, r5, r3
 8003726:	fb03 5711 	mls	r7, r3, r1, r5
 800372a:	5dc7      	ldrb	r7, [r0, r7]
 800372c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003730:	462f      	mov	r7, r5
 8003732:	42bb      	cmp	r3, r7
 8003734:	460d      	mov	r5, r1
 8003736:	d9f4      	bls.n	8003722 <_printf_i+0x11a>
 8003738:	2b08      	cmp	r3, #8
 800373a:	d10b      	bne.n	8003754 <_printf_i+0x14c>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	07df      	lsls	r7, r3, #31
 8003740:	d508      	bpl.n	8003754 <_printf_i+0x14c>
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	6861      	ldr	r1, [r4, #4]
 8003746:	4299      	cmp	r1, r3
 8003748:	bfde      	ittt	le
 800374a:	2330      	movle	r3, #48	; 0x30
 800374c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003754:	1b92      	subs	r2, r2, r6
 8003756:	6122      	str	r2, [r4, #16]
 8003758:	f8cd a000 	str.w	sl, [sp]
 800375c:	464b      	mov	r3, r9
 800375e:	aa03      	add	r2, sp, #12
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f7ff fee2 	bl	800352c <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	d14c      	bne.n	8003806 <_printf_i+0x1fe>
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	b004      	add	sp, #16
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003776:	4835      	ldr	r0, [pc, #212]	; (800384c <_printf_i+0x244>)
 8003778:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	680e      	ldr	r6, [r1, #0]
 8003780:	061f      	lsls	r7, r3, #24
 8003782:	f856 5b04 	ldr.w	r5, [r6], #4
 8003786:	600e      	str	r6, [r1, #0]
 8003788:	d514      	bpl.n	80037b4 <_printf_i+0x1ac>
 800378a:	07d9      	lsls	r1, r3, #31
 800378c:	bf44      	itt	mi
 800378e:	f043 0320 	orrmi.w	r3, r3, #32
 8003792:	6023      	strmi	r3, [r4, #0]
 8003794:	b91d      	cbnz	r5, 800379e <_printf_i+0x196>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	f023 0320 	bic.w	r3, r3, #32
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	2310      	movs	r3, #16
 80037a0:	e7b0      	b.n	8003704 <_printf_i+0xfc>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	f043 0320 	orr.w	r3, r3, #32
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	2378      	movs	r3, #120	; 0x78
 80037ac:	4828      	ldr	r0, [pc, #160]	; (8003850 <_printf_i+0x248>)
 80037ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037b2:	e7e3      	b.n	800377c <_printf_i+0x174>
 80037b4:	065e      	lsls	r6, r3, #25
 80037b6:	bf48      	it	mi
 80037b8:	b2ad      	uxthmi	r5, r5
 80037ba:	e7e6      	b.n	800378a <_printf_i+0x182>
 80037bc:	4616      	mov	r6, r2
 80037be:	e7bb      	b.n	8003738 <_printf_i+0x130>
 80037c0:	680b      	ldr	r3, [r1, #0]
 80037c2:	6826      	ldr	r6, [r4, #0]
 80037c4:	6960      	ldr	r0, [r4, #20]
 80037c6:	1d1d      	adds	r5, r3, #4
 80037c8:	600d      	str	r5, [r1, #0]
 80037ca:	0635      	lsls	r5, r6, #24
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	d501      	bpl.n	80037d4 <_printf_i+0x1cc>
 80037d0:	6018      	str	r0, [r3, #0]
 80037d2:	e002      	b.n	80037da <_printf_i+0x1d2>
 80037d4:	0671      	lsls	r1, r6, #25
 80037d6:	d5fb      	bpl.n	80037d0 <_printf_i+0x1c8>
 80037d8:	8018      	strh	r0, [r3, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	4616      	mov	r6, r2
 80037e0:	e7ba      	b.n	8003758 <_printf_i+0x150>
 80037e2:	680b      	ldr	r3, [r1, #0]
 80037e4:	1d1a      	adds	r2, r3, #4
 80037e6:	600a      	str	r2, [r1, #0]
 80037e8:	681e      	ldr	r6, [r3, #0]
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	2100      	movs	r1, #0
 80037ee:	4630      	mov	r0, r6
 80037f0:	f7fc fcf6 	bl	80001e0 <memchr>
 80037f4:	b108      	cbz	r0, 80037fa <_printf_i+0x1f2>
 80037f6:	1b80      	subs	r0, r0, r6
 80037f8:	6060      	str	r0, [r4, #4]
 80037fa:	6863      	ldr	r3, [r4, #4]
 80037fc:	6123      	str	r3, [r4, #16]
 80037fe:	2300      	movs	r3, #0
 8003800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003804:	e7a8      	b.n	8003758 <_printf_i+0x150>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	4632      	mov	r2, r6
 800380a:	4649      	mov	r1, r9
 800380c:	4640      	mov	r0, r8
 800380e:	47d0      	blx	sl
 8003810:	3001      	adds	r0, #1
 8003812:	d0ab      	beq.n	800376c <_printf_i+0x164>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	079b      	lsls	r3, r3, #30
 8003818:	d413      	bmi.n	8003842 <_printf_i+0x23a>
 800381a:	68e0      	ldr	r0, [r4, #12]
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	4298      	cmp	r0, r3
 8003820:	bfb8      	it	lt
 8003822:	4618      	movlt	r0, r3
 8003824:	e7a4      	b.n	8003770 <_printf_i+0x168>
 8003826:	2301      	movs	r3, #1
 8003828:	4632      	mov	r2, r6
 800382a:	4649      	mov	r1, r9
 800382c:	4640      	mov	r0, r8
 800382e:	47d0      	blx	sl
 8003830:	3001      	adds	r0, #1
 8003832:	d09b      	beq.n	800376c <_printf_i+0x164>
 8003834:	3501      	adds	r5, #1
 8003836:	68e3      	ldr	r3, [r4, #12]
 8003838:	9903      	ldr	r1, [sp, #12]
 800383a:	1a5b      	subs	r3, r3, r1
 800383c:	42ab      	cmp	r3, r5
 800383e:	dcf2      	bgt.n	8003826 <_printf_i+0x21e>
 8003840:	e7eb      	b.n	800381a <_printf_i+0x212>
 8003842:	2500      	movs	r5, #0
 8003844:	f104 0619 	add.w	r6, r4, #25
 8003848:	e7f5      	b.n	8003836 <_printf_i+0x22e>
 800384a:	bf00      	nop
 800384c:	08004024 	.word	0x08004024
 8003850:	08004035 	.word	0x08004035

08003854 <_vsiprintf_r>:
 8003854:	b500      	push	{lr}
 8003856:	b09b      	sub	sp, #108	; 0x6c
 8003858:	9100      	str	r1, [sp, #0]
 800385a:	9104      	str	r1, [sp, #16]
 800385c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003860:	9105      	str	r1, [sp, #20]
 8003862:	9102      	str	r1, [sp, #8]
 8003864:	4905      	ldr	r1, [pc, #20]	; (800387c <_vsiprintf_r+0x28>)
 8003866:	9103      	str	r1, [sp, #12]
 8003868:	4669      	mov	r1, sp
 800386a:	f000 f95b 	bl	8003b24 <_svfiprintf_r>
 800386e:	9b00      	ldr	r3, [sp, #0]
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	b01b      	add	sp, #108	; 0x6c
 8003876:	f85d fb04 	ldr.w	pc, [sp], #4
 800387a:	bf00      	nop
 800387c:	ffff0208 	.word	0xffff0208

08003880 <vsiprintf>:
 8003880:	4613      	mov	r3, r2
 8003882:	460a      	mov	r2, r1
 8003884:	4601      	mov	r1, r0
 8003886:	4802      	ldr	r0, [pc, #8]	; (8003890 <vsiprintf+0x10>)
 8003888:	6800      	ldr	r0, [r0, #0]
 800388a:	f7ff bfe3 	b.w	8003854 <_vsiprintf_r>
 800388e:	bf00      	nop
 8003890:	2000000c 	.word	0x2000000c

08003894 <__retarget_lock_acquire_recursive>:
 8003894:	4770      	bx	lr

08003896 <__retarget_lock_release_recursive>:
 8003896:	4770      	bx	lr

08003898 <memmove>:
 8003898:	4288      	cmp	r0, r1
 800389a:	b510      	push	{r4, lr}
 800389c:	eb01 0402 	add.w	r4, r1, r2
 80038a0:	d902      	bls.n	80038a8 <memmove+0x10>
 80038a2:	4284      	cmp	r4, r0
 80038a4:	4623      	mov	r3, r4
 80038a6:	d807      	bhi.n	80038b8 <memmove+0x20>
 80038a8:	1e43      	subs	r3, r0, #1
 80038aa:	42a1      	cmp	r1, r4
 80038ac:	d008      	beq.n	80038c0 <memmove+0x28>
 80038ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038b6:	e7f8      	b.n	80038aa <memmove+0x12>
 80038b8:	4402      	add	r2, r0
 80038ba:	4601      	mov	r1, r0
 80038bc:	428a      	cmp	r2, r1
 80038be:	d100      	bne.n	80038c2 <memmove+0x2a>
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ca:	e7f7      	b.n	80038bc <memmove+0x24>

080038cc <_free_r>:
 80038cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ce:	2900      	cmp	r1, #0
 80038d0:	d048      	beq.n	8003964 <_free_r+0x98>
 80038d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d6:	9001      	str	r0, [sp, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f1a1 0404 	sub.w	r4, r1, #4
 80038de:	bfb8      	it	lt
 80038e0:	18e4      	addlt	r4, r4, r3
 80038e2:	f000 fa2f 	bl	8003d44 <__malloc_lock>
 80038e6:	4a20      	ldr	r2, [pc, #128]	; (8003968 <_free_r+0x9c>)
 80038e8:	9801      	ldr	r0, [sp, #4]
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	4615      	mov	r5, r2
 80038ee:	b933      	cbnz	r3, 80038fe <_free_r+0x32>
 80038f0:	6063      	str	r3, [r4, #4]
 80038f2:	6014      	str	r4, [r2, #0]
 80038f4:	b003      	add	sp, #12
 80038f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038fa:	f000 ba29 	b.w	8003d50 <__malloc_unlock>
 80038fe:	42a3      	cmp	r3, r4
 8003900:	d90b      	bls.n	800391a <_free_r+0x4e>
 8003902:	6821      	ldr	r1, [r4, #0]
 8003904:	1862      	adds	r2, r4, r1
 8003906:	4293      	cmp	r3, r2
 8003908:	bf04      	itt	eq
 800390a:	681a      	ldreq	r2, [r3, #0]
 800390c:	685b      	ldreq	r3, [r3, #4]
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	bf04      	itt	eq
 8003912:	1852      	addeq	r2, r2, r1
 8003914:	6022      	streq	r2, [r4, #0]
 8003916:	602c      	str	r4, [r5, #0]
 8003918:	e7ec      	b.n	80038f4 <_free_r+0x28>
 800391a:	461a      	mov	r2, r3
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b10b      	cbz	r3, 8003924 <_free_r+0x58>
 8003920:	42a3      	cmp	r3, r4
 8003922:	d9fa      	bls.n	800391a <_free_r+0x4e>
 8003924:	6811      	ldr	r1, [r2, #0]
 8003926:	1855      	adds	r5, r2, r1
 8003928:	42a5      	cmp	r5, r4
 800392a:	d10b      	bne.n	8003944 <_free_r+0x78>
 800392c:	6824      	ldr	r4, [r4, #0]
 800392e:	4421      	add	r1, r4
 8003930:	1854      	adds	r4, r2, r1
 8003932:	42a3      	cmp	r3, r4
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	d1dd      	bne.n	80038f4 <_free_r+0x28>
 8003938:	681c      	ldr	r4, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	6053      	str	r3, [r2, #4]
 800393e:	4421      	add	r1, r4
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	e7d7      	b.n	80038f4 <_free_r+0x28>
 8003944:	d902      	bls.n	800394c <_free_r+0x80>
 8003946:	230c      	movs	r3, #12
 8003948:	6003      	str	r3, [r0, #0]
 800394a:	e7d3      	b.n	80038f4 <_free_r+0x28>
 800394c:	6825      	ldr	r5, [r4, #0]
 800394e:	1961      	adds	r1, r4, r5
 8003950:	428b      	cmp	r3, r1
 8003952:	bf04      	itt	eq
 8003954:	6819      	ldreq	r1, [r3, #0]
 8003956:	685b      	ldreq	r3, [r3, #4]
 8003958:	6063      	str	r3, [r4, #4]
 800395a:	bf04      	itt	eq
 800395c:	1949      	addeq	r1, r1, r5
 800395e:	6021      	streq	r1, [r4, #0]
 8003960:	6054      	str	r4, [r2, #4]
 8003962:	e7c7      	b.n	80038f4 <_free_r+0x28>
 8003964:	b003      	add	sp, #12
 8003966:	bd30      	pop	{r4, r5, pc}
 8003968:	200005a0 	.word	0x200005a0

0800396c <_malloc_r>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	1ccd      	adds	r5, r1, #3
 8003970:	f025 0503 	bic.w	r5, r5, #3
 8003974:	3508      	adds	r5, #8
 8003976:	2d0c      	cmp	r5, #12
 8003978:	bf38      	it	cc
 800397a:	250c      	movcc	r5, #12
 800397c:	2d00      	cmp	r5, #0
 800397e:	4606      	mov	r6, r0
 8003980:	db01      	blt.n	8003986 <_malloc_r+0x1a>
 8003982:	42a9      	cmp	r1, r5
 8003984:	d903      	bls.n	800398e <_malloc_r+0x22>
 8003986:	230c      	movs	r3, #12
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	2000      	movs	r0, #0
 800398c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398e:	f000 f9d9 	bl	8003d44 <__malloc_lock>
 8003992:	4921      	ldr	r1, [pc, #132]	; (8003a18 <_malloc_r+0xac>)
 8003994:	680a      	ldr	r2, [r1, #0]
 8003996:	4614      	mov	r4, r2
 8003998:	b99c      	cbnz	r4, 80039c2 <_malloc_r+0x56>
 800399a:	4f20      	ldr	r7, [pc, #128]	; (8003a1c <_malloc_r+0xb0>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b923      	cbnz	r3, 80039aa <_malloc_r+0x3e>
 80039a0:	4621      	mov	r1, r4
 80039a2:	4630      	mov	r0, r6
 80039a4:	f000 f9be 	bl	8003d24 <_sbrk_r>
 80039a8:	6038      	str	r0, [r7, #0]
 80039aa:	4629      	mov	r1, r5
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f9b9 	bl	8003d24 <_sbrk_r>
 80039b2:	1c43      	adds	r3, r0, #1
 80039b4:	d123      	bne.n	80039fe <_malloc_r+0x92>
 80039b6:	230c      	movs	r3, #12
 80039b8:	6033      	str	r3, [r6, #0]
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f9c8 	bl	8003d50 <__malloc_unlock>
 80039c0:	e7e3      	b.n	800398a <_malloc_r+0x1e>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	1b5b      	subs	r3, r3, r5
 80039c6:	d417      	bmi.n	80039f8 <_malloc_r+0x8c>
 80039c8:	2b0b      	cmp	r3, #11
 80039ca:	d903      	bls.n	80039d4 <_malloc_r+0x68>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	441c      	add	r4, r3
 80039d0:	6025      	str	r5, [r4, #0]
 80039d2:	e004      	b.n	80039de <_malloc_r+0x72>
 80039d4:	6863      	ldr	r3, [r4, #4]
 80039d6:	42a2      	cmp	r2, r4
 80039d8:	bf0c      	ite	eq
 80039da:	600b      	streq	r3, [r1, #0]
 80039dc:	6053      	strne	r3, [r2, #4]
 80039de:	4630      	mov	r0, r6
 80039e0:	f000 f9b6 	bl	8003d50 <__malloc_unlock>
 80039e4:	f104 000b 	add.w	r0, r4, #11
 80039e8:	1d23      	adds	r3, r4, #4
 80039ea:	f020 0007 	bic.w	r0, r0, #7
 80039ee:	1ac2      	subs	r2, r0, r3
 80039f0:	d0cc      	beq.n	800398c <_malloc_r+0x20>
 80039f2:	1a1b      	subs	r3, r3, r0
 80039f4:	50a3      	str	r3, [r4, r2]
 80039f6:	e7c9      	b.n	800398c <_malloc_r+0x20>
 80039f8:	4622      	mov	r2, r4
 80039fa:	6864      	ldr	r4, [r4, #4]
 80039fc:	e7cc      	b.n	8003998 <_malloc_r+0x2c>
 80039fe:	1cc4      	adds	r4, r0, #3
 8003a00:	f024 0403 	bic.w	r4, r4, #3
 8003a04:	42a0      	cmp	r0, r4
 8003a06:	d0e3      	beq.n	80039d0 <_malloc_r+0x64>
 8003a08:	1a21      	subs	r1, r4, r0
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f000 f98a 	bl	8003d24 <_sbrk_r>
 8003a10:	3001      	adds	r0, #1
 8003a12:	d1dd      	bne.n	80039d0 <_malloc_r+0x64>
 8003a14:	e7cf      	b.n	80039b6 <_malloc_r+0x4a>
 8003a16:	bf00      	nop
 8003a18:	200005a0 	.word	0x200005a0
 8003a1c:	200005a4 	.word	0x200005a4

08003a20 <_realloc_r>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	4607      	mov	r7, r0
 8003a24:	4614      	mov	r4, r2
 8003a26:	460e      	mov	r6, r1
 8003a28:	b921      	cbnz	r1, 8003a34 <_realloc_r+0x14>
 8003a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a2e:	4611      	mov	r1, r2
 8003a30:	f7ff bf9c 	b.w	800396c <_malloc_r>
 8003a34:	b922      	cbnz	r2, 8003a40 <_realloc_r+0x20>
 8003a36:	f7ff ff49 	bl	80038cc <_free_r>
 8003a3a:	4625      	mov	r5, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a40:	f000 f98c 	bl	8003d5c <_malloc_usable_size_r>
 8003a44:	42a0      	cmp	r0, r4
 8003a46:	d20f      	bcs.n	8003a68 <_realloc_r+0x48>
 8003a48:	4621      	mov	r1, r4
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f7ff ff8e 	bl	800396c <_malloc_r>
 8003a50:	4605      	mov	r5, r0
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d0f2      	beq.n	8003a3c <_realloc_r+0x1c>
 8003a56:	4631      	mov	r1, r6
 8003a58:	4622      	mov	r2, r4
 8003a5a:	f7ff fd51 	bl	8003500 <memcpy>
 8003a5e:	4631      	mov	r1, r6
 8003a60:	4638      	mov	r0, r7
 8003a62:	f7ff ff33 	bl	80038cc <_free_r>
 8003a66:	e7e9      	b.n	8003a3c <_realloc_r+0x1c>
 8003a68:	4635      	mov	r5, r6
 8003a6a:	e7e7      	b.n	8003a3c <_realloc_r+0x1c>

08003a6c <__ssputs_r>:
 8003a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a70:	688e      	ldr	r6, [r1, #8]
 8003a72:	429e      	cmp	r6, r3
 8003a74:	4682      	mov	sl, r0
 8003a76:	460c      	mov	r4, r1
 8003a78:	4690      	mov	r8, r2
 8003a7a:	461f      	mov	r7, r3
 8003a7c:	d838      	bhi.n	8003af0 <__ssputs_r+0x84>
 8003a7e:	898a      	ldrh	r2, [r1, #12]
 8003a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a84:	d032      	beq.n	8003aec <__ssputs_r+0x80>
 8003a86:	6825      	ldr	r5, [r4, #0]
 8003a88:	6909      	ldr	r1, [r1, #16]
 8003a8a:	eba5 0901 	sub.w	r9, r5, r1
 8003a8e:	6965      	ldr	r5, [r4, #20]
 8003a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a98:	3301      	adds	r3, #1
 8003a9a:	444b      	add	r3, r9
 8003a9c:	106d      	asrs	r5, r5, #1
 8003a9e:	429d      	cmp	r5, r3
 8003aa0:	bf38      	it	cc
 8003aa2:	461d      	movcc	r5, r3
 8003aa4:	0553      	lsls	r3, r2, #21
 8003aa6:	d531      	bpl.n	8003b0c <__ssputs_r+0xa0>
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7ff ff5f 	bl	800396c <_malloc_r>
 8003aae:	4606      	mov	r6, r0
 8003ab0:	b950      	cbnz	r0, 8003ac8 <__ssputs_r+0x5c>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	f8ca 3000 	str.w	r3, [sl]
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac8:	6921      	ldr	r1, [r4, #16]
 8003aca:	464a      	mov	r2, r9
 8003acc:	f7ff fd18 	bl	8003500 <memcpy>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	6126      	str	r6, [r4, #16]
 8003ade:	6165      	str	r5, [r4, #20]
 8003ae0:	444e      	add	r6, r9
 8003ae2:	eba5 0509 	sub.w	r5, r5, r9
 8003ae6:	6026      	str	r6, [r4, #0]
 8003ae8:	60a5      	str	r5, [r4, #8]
 8003aea:	463e      	mov	r6, r7
 8003aec:	42be      	cmp	r6, r7
 8003aee:	d900      	bls.n	8003af2 <__ssputs_r+0x86>
 8003af0:	463e      	mov	r6, r7
 8003af2:	4632      	mov	r2, r6
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	4641      	mov	r1, r8
 8003af8:	f7ff fece 	bl	8003898 <memmove>
 8003afc:	68a3      	ldr	r3, [r4, #8]
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	1b9b      	subs	r3, r3, r6
 8003b02:	4432      	add	r2, r6
 8003b04:	60a3      	str	r3, [r4, #8]
 8003b06:	6022      	str	r2, [r4, #0]
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e7db      	b.n	8003ac4 <__ssputs_r+0x58>
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	f7ff ff87 	bl	8003a20 <_realloc_r>
 8003b12:	4606      	mov	r6, r0
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d1e1      	bne.n	8003adc <__ssputs_r+0x70>
 8003b18:	6921      	ldr	r1, [r4, #16]
 8003b1a:	4650      	mov	r0, sl
 8003b1c:	f7ff fed6 	bl	80038cc <_free_r>
 8003b20:	e7c7      	b.n	8003ab2 <__ssputs_r+0x46>
	...

08003b24 <_svfiprintf_r>:
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	4698      	mov	r8, r3
 8003b2a:	898b      	ldrh	r3, [r1, #12]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	b09d      	sub	sp, #116	; 0x74
 8003b30:	4607      	mov	r7, r0
 8003b32:	460d      	mov	r5, r1
 8003b34:	4614      	mov	r4, r2
 8003b36:	d50e      	bpl.n	8003b56 <_svfiprintf_r+0x32>
 8003b38:	690b      	ldr	r3, [r1, #16]
 8003b3a:	b963      	cbnz	r3, 8003b56 <_svfiprintf_r+0x32>
 8003b3c:	2140      	movs	r1, #64	; 0x40
 8003b3e:	f7ff ff15 	bl	800396c <_malloc_r>
 8003b42:	6028      	str	r0, [r5, #0]
 8003b44:	6128      	str	r0, [r5, #16]
 8003b46:	b920      	cbnz	r0, 8003b52 <_svfiprintf_r+0x2e>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	e0d1      	b.n	8003cf6 <_svfiprintf_r+0x1d2>
 8003b52:	2340      	movs	r3, #64	; 0x40
 8003b54:	616b      	str	r3, [r5, #20]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b64:	2330      	movs	r3, #48	; 0x30
 8003b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d10 <_svfiprintf_r+0x1ec>
 8003b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b6e:	f04f 0901 	mov.w	r9, #1
 8003b72:	4623      	mov	r3, r4
 8003b74:	469a      	mov	sl, r3
 8003b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b7a:	b10a      	cbz	r2, 8003b80 <_svfiprintf_r+0x5c>
 8003b7c:	2a25      	cmp	r2, #37	; 0x25
 8003b7e:	d1f9      	bne.n	8003b74 <_svfiprintf_r+0x50>
 8003b80:	ebba 0b04 	subs.w	fp, sl, r4
 8003b84:	d00b      	beq.n	8003b9e <_svfiprintf_r+0x7a>
 8003b86:	465b      	mov	r3, fp
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	f7ff ff6d 	bl	8003a6c <__ssputs_r>
 8003b92:	3001      	adds	r0, #1
 8003b94:	f000 80aa 	beq.w	8003cec <_svfiprintf_r+0x1c8>
 8003b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b9a:	445a      	add	r2, fp
 8003b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80a2 	beq.w	8003cec <_svfiprintf_r+0x1c8>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bb2:	f10a 0a01 	add.w	sl, sl, #1
 8003bb6:	9304      	str	r3, [sp, #16]
 8003bb8:	9307      	str	r3, [sp, #28]
 8003bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8003bc0:	4654      	mov	r4, sl
 8003bc2:	2205      	movs	r2, #5
 8003bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc8:	4851      	ldr	r0, [pc, #324]	; (8003d10 <_svfiprintf_r+0x1ec>)
 8003bca:	f7fc fb09 	bl	80001e0 <memchr>
 8003bce:	9a04      	ldr	r2, [sp, #16]
 8003bd0:	b9d8      	cbnz	r0, 8003c0a <_svfiprintf_r+0xe6>
 8003bd2:	06d0      	lsls	r0, r2, #27
 8003bd4:	bf44      	itt	mi
 8003bd6:	2320      	movmi	r3, #32
 8003bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bdc:	0711      	lsls	r1, r2, #28
 8003bde:	bf44      	itt	mi
 8003be0:	232b      	movmi	r3, #43	; 0x2b
 8003be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003be6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bea:	2b2a      	cmp	r3, #42	; 0x2a
 8003bec:	d015      	beq.n	8003c1a <_svfiprintf_r+0xf6>
 8003bee:	9a07      	ldr	r2, [sp, #28]
 8003bf0:	4654      	mov	r4, sl
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f04f 0c0a 	mov.w	ip, #10
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bfe:	3b30      	subs	r3, #48	; 0x30
 8003c00:	2b09      	cmp	r3, #9
 8003c02:	d94e      	bls.n	8003ca2 <_svfiprintf_r+0x17e>
 8003c04:	b1b0      	cbz	r0, 8003c34 <_svfiprintf_r+0x110>
 8003c06:	9207      	str	r2, [sp, #28]
 8003c08:	e014      	b.n	8003c34 <_svfiprintf_r+0x110>
 8003c0a:	eba0 0308 	sub.w	r3, r0, r8
 8003c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	46a2      	mov	sl, r4
 8003c18:	e7d2      	b.n	8003bc0 <_svfiprintf_r+0x9c>
 8003c1a:	9b03      	ldr	r3, [sp, #12]
 8003c1c:	1d19      	adds	r1, r3, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	9103      	str	r1, [sp, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bfbb      	ittet	lt
 8003c26:	425b      	neglt	r3, r3
 8003c28:	f042 0202 	orrlt.w	r2, r2, #2
 8003c2c:	9307      	strge	r3, [sp, #28]
 8003c2e:	9307      	strlt	r3, [sp, #28]
 8003c30:	bfb8      	it	lt
 8003c32:	9204      	strlt	r2, [sp, #16]
 8003c34:	7823      	ldrb	r3, [r4, #0]
 8003c36:	2b2e      	cmp	r3, #46	; 0x2e
 8003c38:	d10c      	bne.n	8003c54 <_svfiprintf_r+0x130>
 8003c3a:	7863      	ldrb	r3, [r4, #1]
 8003c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c3e:	d135      	bne.n	8003cac <_svfiprintf_r+0x188>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	9203      	str	r2, [sp, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bfb8      	it	lt
 8003c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c50:	3402      	adds	r4, #2
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d20 <_svfiprintf_r+0x1fc>
 8003c58:	7821      	ldrb	r1, [r4, #0]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4650      	mov	r0, sl
 8003c5e:	f7fc fabf 	bl	80001e0 <memchr>
 8003c62:	b140      	cbz	r0, 8003c76 <_svfiprintf_r+0x152>
 8003c64:	2340      	movs	r3, #64	; 0x40
 8003c66:	eba0 000a 	sub.w	r0, r0, sl
 8003c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c6e:	9b04      	ldr	r3, [sp, #16]
 8003c70:	4303      	orrs	r3, r0
 8003c72:	3401      	adds	r4, #1
 8003c74:	9304      	str	r3, [sp, #16]
 8003c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7a:	4826      	ldr	r0, [pc, #152]	; (8003d14 <_svfiprintf_r+0x1f0>)
 8003c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c80:	2206      	movs	r2, #6
 8003c82:	f7fc faad 	bl	80001e0 <memchr>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d038      	beq.n	8003cfc <_svfiprintf_r+0x1d8>
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <_svfiprintf_r+0x1f4>)
 8003c8c:	bb1b      	cbnz	r3, 8003cd6 <_svfiprintf_r+0x1b2>
 8003c8e:	9b03      	ldr	r3, [sp, #12]
 8003c90:	3307      	adds	r3, #7
 8003c92:	f023 0307 	bic.w	r3, r3, #7
 8003c96:	3308      	adds	r3, #8
 8003c98:	9303      	str	r3, [sp, #12]
 8003c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c9c:	4433      	add	r3, r6
 8003c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca0:	e767      	b.n	8003b72 <_svfiprintf_r+0x4e>
 8003ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	2001      	movs	r0, #1
 8003caa:	e7a5      	b.n	8003bf8 <_svfiprintf_r+0xd4>
 8003cac:	2300      	movs	r3, #0
 8003cae:	3401      	adds	r4, #1
 8003cb0:	9305      	str	r3, [sp, #20]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f04f 0c0a 	mov.w	ip, #10
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cbe:	3a30      	subs	r2, #48	; 0x30
 8003cc0:	2a09      	cmp	r2, #9
 8003cc2:	d903      	bls.n	8003ccc <_svfiprintf_r+0x1a8>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0c5      	beq.n	8003c54 <_svfiprintf_r+0x130>
 8003cc8:	9105      	str	r1, [sp, #20]
 8003cca:	e7c3      	b.n	8003c54 <_svfiprintf_r+0x130>
 8003ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e7f0      	b.n	8003cb8 <_svfiprintf_r+0x194>
 8003cd6:	ab03      	add	r3, sp, #12
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	462a      	mov	r2, r5
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <_svfiprintf_r+0x1f8>)
 8003cde:	a904      	add	r1, sp, #16
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f3af 8000 	nop.w
 8003ce6:	1c42      	adds	r2, r0, #1
 8003ce8:	4606      	mov	r6, r0
 8003cea:	d1d6      	bne.n	8003c9a <_svfiprintf_r+0x176>
 8003cec:	89ab      	ldrh	r3, [r5, #12]
 8003cee:	065b      	lsls	r3, r3, #25
 8003cf0:	f53f af2c 	bmi.w	8003b4c <_svfiprintf_r+0x28>
 8003cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cf6:	b01d      	add	sp, #116	; 0x74
 8003cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfc:	ab03      	add	r3, sp, #12
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	462a      	mov	r2, r5
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <_svfiprintf_r+0x1f8>)
 8003d04:	a904      	add	r1, sp, #16
 8003d06:	4638      	mov	r0, r7
 8003d08:	f7ff fc7e 	bl	8003608 <_printf_i>
 8003d0c:	e7eb      	b.n	8003ce6 <_svfiprintf_r+0x1c2>
 8003d0e:	bf00      	nop
 8003d10:	080040a8 	.word	0x080040a8
 8003d14:	080040b2 	.word	0x080040b2
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	08003a6d 	.word	0x08003a6d
 8003d20:	080040ae 	.word	0x080040ae

08003d24 <_sbrk_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d06      	ldr	r5, [pc, #24]	; (8003d40 <_sbrk_r+0x1c>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	f7fc fc20 	bl	8000574 <_sbrk>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_sbrk_r+0x1a>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_sbrk_r+0x1a>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	200006bc 	.word	0x200006bc

08003d44 <__malloc_lock>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__malloc_lock+0x8>)
 8003d46:	f7ff bda5 	b.w	8003894 <__retarget_lock_acquire_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	200006b4 	.word	0x200006b4

08003d50 <__malloc_unlock>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__malloc_unlock+0x8>)
 8003d52:	f7ff bda0 	b.w	8003896 <__retarget_lock_release_recursive>
 8003d56:	bf00      	nop
 8003d58:	200006b4 	.word	0x200006b4

08003d5c <_malloc_usable_size_r>:
 8003d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d60:	1f18      	subs	r0, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bfbc      	itt	lt
 8003d66:	580b      	ldrlt	r3, [r1, r0]
 8003d68:	18c0      	addlt	r0, r0, r3
 8003d6a:	4770      	bx	lr

08003d6c <_init>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr

08003d78 <_fini>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr
