
lwc_nist_benchmark_stm32f100rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003a78  08003a78  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a78  08003a78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000074  08003af4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08003af4  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dad4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f2  00000000  00000000  0002db71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00030ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c1e  00000000  00000000  00031648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da83  00000000  00000000  00043266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f114  00000000  00000000  00050ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bfdfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000bfe50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800368c 	.word	0x0800368c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800368c 	.word	0x0800368c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4313      	orrs	r3, r2
 8000232:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4013      	ands	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023e:	68fb      	ldr	r3, [r7, #12]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 f9ba 	bl	80005ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f80f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f879 	bl	8000350 <MX_GPIO_Init>
  MX_TIM6_Init();
 800025e:	f000 f839 	bl	80002d4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000262:	f000 f85b 	bl	800031c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
	  HAL_Delay(1000000);
 8000266:	4c03      	ldr	r4, [pc, #12]	; (8000274 <main+0x24>)
	  genkat_benchmark_hash_aead();
 8000268:	f002 fbf6 	bl	8002a58 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800026c:	4620      	mov	r0, r4
 800026e:	f000 fa05 	bl	800067c <HAL_Delay>
 8000272:	e7f9      	b.n	8000268 <main+0x18>
 8000274:	000f4240 	.word	0x000f4240

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2401      	movs	r4, #1
 8000280:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000282:	f44f 2100 	mov.w	r1, #524288	; 0x80000
{
 8000286:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000292:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800029e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002a6:	910f      	str	r1, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f000 fc9e 	bl	8000be8 <HAL_RCC_OscConfig>
 80002ac:	b978      	cbnz	r0, 80002ce <SystemClock_Config+0x56>
 80002ae:	4601      	mov	r1, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	240f      	movs	r4, #15
 80002b2:	2502      	movs	r5, #2
 80002b4:	2200      	movs	r2, #0
 80002b6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	e9cd 4500 	strd	r4, r5, [sp]
 80002be:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	f000 ff10 	bl	80010e8 <HAL_RCC_ClockConfig>
 80002c8:	b908      	cbnz	r0, 80002ce <SystemClock_Config+0x56>
  {
    Error_Handler();
  }
}
 80002ca:	b011      	add	sp, #68	; 0x44
 80002cc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80002ce:	f000 f843 	bl	8000358 <Error_Handler>
 80002d2:	bf00      	nop

080002d4 <MX_TIM6_Init>:

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	2300      	movs	r3, #0

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 80002d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80002da:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 80002dc:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <MX_TIM6_Init+0x40>)
 80002de:	490e      	ldr	r1, [pc, #56]	; (8000318 <MX_TIM6_Init+0x44>)
{
 80002e0:	b082      	sub	sp, #8
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002e2:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	e9cd 3300 	strd	r3, r3, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ec:	61a3      	str	r3, [r4, #24]
  htim6.Instance = TIM6;
 80002ee:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = 65535;
 80002f0:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002f2:	f001 f865 	bl	80013c0 <HAL_TIM_Base_Init>
 80002f6:	b950      	cbnz	r0, 800030e <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2200      	movs	r2, #0
 80002fa:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80002fc:	4669      	mov	r1, sp
 80002fe:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000304:	f001 fae0 	bl	80018c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000308:	b908      	cbnz	r0, 800030e <MX_TIM6_Init+0x3a>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800030a:	b002      	add	sp, #8
 800030c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800030e:	f000 f823 	bl	8000358 <Error_Handler>
 8000312:	bf00      	nop
 8000314:	200005ec 	.word	0x200005ec
 8000318:	40001000 	.word	0x40001000

0800031c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800031c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8000320:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000324:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <MX_USART1_UART_Init+0x2c>)
 8000328:	4908      	ldr	r1, [pc, #32]	; (800034c <MX_USART1_UART_Init+0x30>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Instance = USART1;
 800032e:	e9c0 1400 	strd	r1, r4, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000332:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000336:	6142      	str	r2, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000338:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	f001 fb3d 	bl	80019b8 <HAL_UART_Init>
 800033e:	b900      	cbnz	r0, 8000342 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000340:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000342:	f000 f809 	bl	8000358 <Error_Handler>
 8000346:	bf00      	nop
 8000348:	200005ac 	.word	0x200005ac
 800034c:	40013800 	.word	0x40013800

08000350 <MX_GPIO_Init>:
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000350:	2004      	movs	r0, #4
 8000352:	f7ff bf65 	b.w	8000220 <LL_APB2_GRP1_EnableClock>
 8000356:	bf00      	nop

08000358 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
 800035a:	e7fe      	b.n	800035a <Error_Handler+0x2>

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <HAL_MspInit+0x5c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_MspInit+0x5c>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_MspInit+0x60>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_MspInit+0x60>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010000 	.word	0x40010000

080003c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <HAL_TIM_Base_MspInit+0x44>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d113      	bne.n	80003fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <HAL_TIM_Base_MspInit+0x48>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <HAL_TIM_Base_MspInit+0x48>)
 80003d8:	f043 0310 	orr.w	r3, r3, #16
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_TIM_Base_MspInit+0x48>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 0310 	and.w	r3, r3, #16
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2036      	movs	r0, #54	; 0x36
 80003f0:	f000 fa3f 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003f4:	2036      	movs	r0, #54	; 0x36
 80003f6:	f000 fa58 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40001000 	.word	0x40001000
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <HAL_UART_MspInit+0x8c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d131      	bne.n	8000490 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <HAL_UART_MspInit+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <HAL_UART_MspInit+0x90>)
 8000432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <HAL_UART_MspInit+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_UART_MspInit+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_UART_MspInit+0x90>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_UART_MspInit+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800045c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <HAL_UART_MspInit+0x94>)
 8000472:	f000 fa35 	bl	80008e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <HAL_UART_MspInit+0x94>)
 800048c:	f000 fa28 	bl	80008e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40013800 	.word	0x40013800
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ea:	f000 f8ab 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <TIM6_DAC_IRQHandler+0x10>)
 80004fa:	f001 f839 	bl	8001570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200005ec 	.word	0x200005ec

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f002 fc3c 	bl	8002db4 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20002000 	.word	0x20002000
 8000568:	00000400 	.word	0x00000400
 800056c:	20000090 	.word	0x20000090
 8000570:	20000680 	.word	0x20000680

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000580:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000582:	e003      	b.n	800058c <LoopCopyDataInit>

08000584 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000586:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000588:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800058a:	3104      	adds	r1, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000590:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000592:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000594:	d3f6      	bcc.n	8000584 <CopyDataInit>
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000598:	e002      	b.n	80005a0 <LoopFillZerobss>

0800059a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800059c:	f842 3b04 	str.w	r3, [r2], #4

080005a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005a4:	d3f9      	bcc.n	800059a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a6:	f7ff ffe5 	bl	8000574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005aa:	f002 fc09 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe4f 	bl	8000250 <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r3, =_sidata
 80005b4:	08003a80 	.word	0x08003a80
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005bc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80005c0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80005c4:	2000067c 	.word	0x2000067c

080005c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_IRQHandler>

080005ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 f944 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f805 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005da:	f7ff febf 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f95f 	bl	80008c6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f927 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	20000634 	.word	0x20000634

08000668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000634 	.word	0x20000634

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff90 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2d 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff42 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <__NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff35 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e169      	b.n	8000bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f4:	2201      	movs	r2, #1
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	429a      	cmp	r2, r3
 800090e:	f040 8158 	bne.w	8000bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4a9a      	ldr	r2, [pc, #616]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d05e      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 800091c:	4a98      	ldr	r2, [pc, #608]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d875      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000922:	4a98      	ldr	r2, [pc, #608]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d058      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000928:	4a96      	ldr	r2, [pc, #600]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d86f      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800092e:	4a96      	ldr	r2, [pc, #600]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d052      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000934:	4a94      	ldr	r2, [pc, #592]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d869      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800093a:	4a94      	ldr	r2, [pc, #592]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d04c      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000940:	4a92      	ldr	r2, [pc, #584]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d863      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000946:	4a92      	ldr	r2, [pc, #584]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d046      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 800094c:	4a90      	ldr	r2, [pc, #576]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d85d      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d82a      	bhi.n	80009ac <HAL_GPIO_Init+0xcc>
 8000956:	2b12      	cmp	r3, #18
 8000958:	d859      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <HAL_GPIO_Init+0x80>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	080009db 	.word	0x080009db
 8000964:	080009b5 	.word	0x080009b5
 8000968:	080009c7 	.word	0x080009c7
 800096c:	08000a09 	.word	0x08000a09
 8000970:	08000a0f 	.word	0x08000a0f
 8000974:	08000a0f 	.word	0x08000a0f
 8000978:	08000a0f 	.word	0x08000a0f
 800097c:	08000a0f 	.word	0x08000a0f
 8000980:	08000a0f 	.word	0x08000a0f
 8000984:	08000a0f 	.word	0x08000a0f
 8000988:	08000a0f 	.word	0x08000a0f
 800098c:	08000a0f 	.word	0x08000a0f
 8000990:	08000a0f 	.word	0x08000a0f
 8000994:	08000a0f 	.word	0x08000a0f
 8000998:	08000a0f 	.word	0x08000a0f
 800099c:	08000a0f 	.word	0x08000a0f
 80009a0:	08000a0f 	.word	0x08000a0f
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009d1 	.word	0x080009d1
 80009ac:	4a79      	ldr	r2, [pc, #484]	; (8000b94 <HAL_GPIO_Init+0x2b4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009b2:	e02c      	b.n	8000a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e029      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e024      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	3308      	adds	r3, #8
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e01f      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e01a      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e013      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f0:	2308      	movs	r3, #8
 80009f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	611a      	str	r2, [r3, #16]
          break;
 80009fa:	e009      	b.n	8000a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009fc:	2308      	movs	r3, #8
 80009fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	615a      	str	r2, [r3, #20]
          break;
 8000a06:	e003      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          break;
 8000a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2bff      	cmp	r3, #255	; 0xff
 8000a14:	d801      	bhi.n	8000a1a <HAL_GPIO_Init+0x13a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	e001      	b.n	8000a1e <HAL_GPIO_Init+0x13e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d802      	bhi.n	8000a2c <HAL_GPIO_Init+0x14c>
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x152>
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	210f      	movs	r1, #15
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	401a      	ands	r2, r3
 8000a44:	6a39      	ldr	r1, [r7, #32]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 80b1 	beq.w	8000bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a78:	4a48      	ldr	r2, [pc, #288]	; (8000b9c <HAL_GPIO_Init+0x2bc>)
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a40      	ldr	r2, [pc, #256]	; (8000ba0 <HAL_GPIO_Init+0x2c0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d013      	beq.n	8000acc <HAL_GPIO_Init+0x1ec>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a3f      	ldr	r2, [pc, #252]	; (8000ba4 <HAL_GPIO_Init+0x2c4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00d      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <HAL_GPIO_Init+0x2c8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d007      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e4>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <HAL_GPIO_Init+0x2cc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d101      	bne.n	8000ac0 <HAL_GPIO_Init+0x1e0>
 8000abc:	2303      	movs	r3, #3
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000acc:	2300      	movs	r3, #0
 8000ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ade:	492f      	ldr	r1, [pc, #188]	; (8000b9c <HAL_GPIO_Init+0x2bc>)
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	492c      	ldr	r1, [pc, #176]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4928      	ldr	r1, [pc, #160]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	4922      	ldr	r1, [pc, #136]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	604b      	str	r3, [r1, #4]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	491e      	ldr	r1, [pc, #120]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	4918      	ldr	r1, [pc, #96]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	608b      	str	r3, [r1, #8]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4914      	ldr	r1, [pc, #80]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60cb      	str	r3, [r1, #12]
 8000b7c:	e021      	b.n	8000bc2 <HAL_GPIO_Init+0x2e2>
 8000b7e:	bf00      	nop
 8000b80:	10320000 	.word	0x10320000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	10210000 	.word	0x10210000
 8000b90:	10120000 	.word	0x10120000
 8000b94:	10110000 	.word	0x10110000
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	40011400 	.word	0x40011400
 8000bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_GPIO_Init+0x304>)
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	4909      	ldr	r1, [pc, #36]	; (8000be4 <HAL_GPIO_Init+0x304>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f47f ae8e 	bne.w	80008f4 <HAL_GPIO_Init+0x14>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	372c      	adds	r7, #44	; 0x2c
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e26c      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 8087 	beq.w	8000d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c08:	4b92      	ldr	r3, [pc, #584]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d00c      	beq.n	8000c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c14:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d112      	bne.n	8000c46 <HAL_RCC_OscConfig+0x5e>
 8000c20:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2c:	d10b      	bne.n	8000c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2e:	4b89      	ldr	r3, [pc, #548]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d06c      	beq.n	8000d14 <HAL_RCC_OscConfig+0x12c>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d168      	bne.n	8000d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e246      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c4e:	d106      	bne.n	8000c5e <HAL_RCC_OscConfig+0x76>
 8000c50:	4b80      	ldr	r3, [pc, #512]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a7f      	ldr	r2, [pc, #508]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	e02e      	b.n	8000cbc <HAL_RCC_OscConfig+0xd4>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <HAL_RCC_OscConfig+0x98>
 8000c66:	4b7b      	ldr	r3, [pc, #492]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a7a      	ldr	r2, [pc, #488]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b78      	ldr	r3, [pc, #480]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a77      	ldr	r2, [pc, #476]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e01d      	b.n	8000cbc <HAL_RCC_OscConfig+0xd4>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c88:	d10c      	bne.n	8000ca4 <HAL_RCC_OscConfig+0xbc>
 8000c8a:	4b72      	ldr	r3, [pc, #456]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a71      	ldr	r2, [pc, #452]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	4b6f      	ldr	r3, [pc, #444]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a6e      	ldr	r2, [pc, #440]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e00b      	b.n	8000cbc <HAL_RCC_OscConfig+0xd4>
 8000ca4:	4b6b      	ldr	r3, [pc, #428]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a6a      	ldr	r2, [pc, #424]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b68      	ldr	r3, [pc, #416]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a67      	ldr	r2, [pc, #412]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d013      	beq.n	8000cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fcd0 	bl	8000668 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fccc 	bl	8000668 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1fa      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cde:	4b5d      	ldr	r3, [pc, #372]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f0      	beq.n	8000ccc <HAL_RCC_OscConfig+0xe4>
 8000cea:	e014      	b.n	8000d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cec:	f7ff fcbc 	bl	8000668 <HAL_GetTick>
 8000cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf4:	f7ff fcb8 	bl	8000668 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	; 0x64
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e1e6      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d06:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f0      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x10c>
 8000d12:	e000      	b.n	8000d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d063      	beq.n	8000dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00b      	beq.n	8000d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 030c 	and.w	r3, r3, #12
 8000d36:	2b08      	cmp	r3, #8
 8000d38:	d11c      	bne.n	8000d74 <HAL_RCC_OscConfig+0x18c>
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d116      	bne.n	8000d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <HAL_RCC_OscConfig+0x176>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d001      	beq.n	8000d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e1ba      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4939      	ldr	r1, [pc, #228]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	e03a      	b.n	8000dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d020      	beq.n	8000dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d82:	f7ff fc71 	bl	8000668 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc6d 	bl	8000668 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e19b      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4927      	ldr	r1, [pc, #156]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
 8000dbc:	e015      	b.n	8000dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fc50 	bl	8000668 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fc4c 	bl	8000668 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e17a      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d03a      	beq.n	8000e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d019      	beq.n	8000e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_RCC_OscConfig+0x274>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e04:	f7ff fc30 	bl	8000668 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fc2c 	bl	8000668 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e15a      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f0      	beq.n	8000e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 faaa 	bl	8001384 <RCC_Delay>
 8000e30:	e01c      	b.n	8000e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_RCC_OscConfig+0x274>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e38:	f7ff fc16 	bl	8000668 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3e:	e00f      	b.n	8000e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e40:	f7ff fc12 	bl	8000668 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d908      	bls.n	8000e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e140      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	42420000 	.word	0x42420000
 8000e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e60:	4b9e      	ldr	r3, [pc, #632]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1e9      	bne.n	8000e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80a6 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7e:	4b97      	ldr	r3, [pc, #604]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10d      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b94      	ldr	r3, [pc, #592]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a93      	ldr	r2, [pc, #588]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	61d3      	str	r3, [r2, #28]
 8000e96:	4b91      	ldr	r3, [pc, #580]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea6:	4b8e      	ldr	r3, [pc, #568]	; (80010e0 <HAL_RCC_OscConfig+0x4f8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d118      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb2:	4b8b      	ldr	r3, [pc, #556]	; (80010e0 <HAL_RCC_OscConfig+0x4f8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a8a      	ldr	r2, [pc, #552]	; (80010e0 <HAL_RCC_OscConfig+0x4f8>)
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fbd3 	bl	8000668 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec6:	f7ff fbcf 	bl	8000668 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b64      	cmp	r3, #100	; 0x64
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e0fd      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	4b81      	ldr	r3, [pc, #516]	; (80010e0 <HAL_RCC_OscConfig+0x4f8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x312>
 8000eec:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6213      	str	r3, [r2, #32]
 8000ef8:	e02d      	b.n	8000f56 <HAL_RCC_OscConfig+0x36e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x334>
 8000f02:	4b76      	ldr	r3, [pc, #472]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a75      	ldr	r2, [pc, #468]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	4b73      	ldr	r3, [pc, #460]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a72      	ldr	r2, [pc, #456]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0304 	bic.w	r3, r3, #4
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	e01c      	b.n	8000f56 <HAL_RCC_OscConfig+0x36e>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d10c      	bne.n	8000f3e <HAL_RCC_OscConfig+0x356>
 8000f24:	4b6d      	ldr	r3, [pc, #436]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4a6c      	ldr	r2, [pc, #432]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6213      	str	r3, [r2, #32]
 8000f30:	4b6a      	ldr	r3, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a69      	ldr	r2, [pc, #420]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6213      	str	r3, [r2, #32]
 8000f3c:	e00b      	b.n	8000f56 <HAL_RCC_OscConfig+0x36e>
 8000f3e:	4b67      	ldr	r3, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a66      	ldr	r2, [pc, #408]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6213      	str	r3, [r2, #32]
 8000f4a:	4b64      	ldr	r3, [pc, #400]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a63      	ldr	r2, [pc, #396]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	f023 0304 	bic.w	r3, r3, #4
 8000f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d015      	beq.n	8000f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb83 	bl	8000668 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fb7f 	bl	8000668 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e0ab      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f7c:	4b57      	ldr	r3, [pc, #348]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0ee      	beq.n	8000f66 <HAL_RCC_OscConfig+0x37e>
 8000f88:	e014      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fb6d 	bl	8000668 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fb69 	bl	8000668 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e095      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1ee      	bne.n	8000f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d105      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a47      	ldr	r2, [pc, #284]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8081 	beq.w	80010d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fd0:	4b42      	ldr	r3, [pc, #264]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d061      	beq.n	80010a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d146      	bne.n	8001072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <HAL_RCC_OscConfig+0x4fc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb3d 	bl	8000668 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fb39 	bl	8000668 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e067      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001004:	4b35      	ldr	r3, [pc, #212]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001018:	d108      	bne.n	800102c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	f023 020f 	bic.w	r2, r3, #15
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	492d      	ldr	r1, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8001028:	4313      	orrs	r3, r2
 800102a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a19      	ldr	r1, [r3, #32]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	430b      	orrs	r3, r1
 800103e:	4927      	ldr	r1, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x4fc>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104a:	f7ff fb0d 	bl	8000668 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001052:	f7ff fb09 	bl	8000668 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e037      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x46a>
 8001070:	e02f      	b.n	80010d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_RCC_OscConfig+0x4fc>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff faf6 	bl	8000668 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001080:	f7ff faf2 	bl	8000668 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e020      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x498>
 800109e:	e018      	b.n	80010d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e013      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40007000 	.word	0x40007000
 80010e4:	42420060 	.word	0x42420060

080010e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0a0      	b.n	800123e <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a4b      	ldr	r2, [pc, #300]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 800111a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800111e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	4b46      	ldr	r3, [pc, #280]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a45      	ldr	r2, [pc, #276]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4940      	ldr	r1, [pc, #256]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d115      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e067      	b.n	800123e <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e05b      	b.n	800123e <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e053      	b.n	800123e <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f023 0203 	bic.w	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4929      	ldr	r1, [pc, #164]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff fa5e 	bl	8000668 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b0:	f7ff fa5a 	bl	8000668 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e03b      	b.n	800123e <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 020c 	and.w	r2, r3, #12
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1eb      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4915      	ldr	r1, [pc, #84]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490d      	ldr	r1, [pc, #52]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f81f 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_RCC_ClockConfig+0x160>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4909      	ldr	r1, [pc, #36]	; (800124c <HAL_RCC_ClockConfig+0x164>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_RCC_ClockConfig+0x168>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_RCC_ClockConfig+0x16c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f9d4 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	080036c4 	.word	0x080036c4
 8001250:	20000000 	.word	0x20000000
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001258:	b490      	push	{r4, r7}
 800125a:	b08e      	sub	sp, #56	; 0x38
 800125c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001260:	f107 0414 	add.w	r4, r7, #20
 8001264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800126c:	1d3c      	adds	r4, r7, #4
 800126e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d002      	beq.n	800129e <HAL_RCC_GetSysClockFreq+0x46>
 8001298:	2b08      	cmp	r3, #8
 800129a:	d003      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x4c>
 800129c:	e02c      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012a2:	e02c      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	0c9b      	lsrs	r3, r3, #18
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80012b0:	4413      	add	r3, r2
 80012b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d012      	beq.n	80012e8 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80012ce:	4413      	add	r3, r2
 80012d0:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012da:	fb02 f203 	mul.w	r2, r2, r3
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
 80012e6:	e004      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <HAL_RCC_GetSysClockFreq+0xc4>)
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012f6:	e002      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001300:	4618      	mov	r0, r3
 8001302:	3738      	adds	r7, #56	; 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bc90      	pop	{r4, r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	080036a4 	.word	0x080036a4
 8001310:	080036b4 	.word	0x080036b4
 8001314:	40021000 	.word	0x40021000
 8001318:	007a1200 	.word	0x007a1200
 800131c:	003d0900 	.word	0x003d0900

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b02      	ldr	r3, [pc, #8]	; (8001330 <HAL_RCC_GetHCLKFreq+0x10>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000000 	.word	0x20000000

08001334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001338:	f7ff fff2 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	4903      	ldr	r1, [pc, #12]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	080036d4 	.word	0x080036d4

0800135c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001360:	f7ff ffde 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0adb      	lsrs	r3, r3, #11
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	080036d4 	.word	0x080036d4

08001384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <RCC_Delay+0x34>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <RCC_Delay+0x38>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0a5b      	lsrs	r3, r3, #9
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013a0:	bf00      	nop
  }
  while (Delay --);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	60fa      	str	r2, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f9      	bne.n	80013a0 <RCC_Delay+0x1c>
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000000 	.word	0x20000000
 80013bc:	10624dd3 	.word	0x10624dd3

080013c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e041      	b.n	8001456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7fe ffea 	bl	80003c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2202      	movs	r2, #2
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3304      	adds	r3, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f000 f9e2 	bl	80017c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d001      	beq.n	8001478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e03f      	b.n	80014f8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_TIM_Base_Start_IT+0xa4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_TIM_Base_Start_IT+0x62>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a2:	d00e      	beq.n	80014c2 <HAL_TIM_Base_Start_IT+0x62>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_TIM_Base_Start_IT+0xa8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d009      	beq.n	80014c2 <HAL_TIM_Base_Start_IT+0x62>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_TIM_Base_Start_IT+0xac>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d004      	beq.n	80014c2 <HAL_TIM_Base_Start_IT+0x62>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_TIM_Base_Start_IT+0xb0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d111      	bne.n	80014e6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b06      	cmp	r3, #6
 80014d2:	d010      	beq.n	80014f6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e4:	e007      	b.n	80014f6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40000400 	.word	0x40000400
 800150c:	40000800 	.word	0x40000800
 8001510:	40014000 	.word	0x40014000

08001514 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a1a      	ldr	r2, [r3, #32]
 8001532:	f241 1311 	movw	r3, #4369	; 0x1111
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_TIM_Base_Stop_IT+0x48>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a1a      	ldr	r2, [r3, #32]
 8001542:	f240 4344 	movw	r3, #1092	; 0x444
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d107      	bne.n	800155c <HAL_TIM_Base_Stop_IT+0x48>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d122      	bne.n	80015cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d11b      	bne.n	80015cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0202 	mvn.w	r2, #2
 800159c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8ed 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 80015b8:	e005      	b.n	80015c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8e0 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8ef 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d122      	bne.n	8001620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d11b      	bne.n	8001620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0204 	mvn.w	r2, #4
 80015f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f8c3 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 800160c:	e005      	b.n	800161a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8b6 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f8c5 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d122      	bne.n	8001674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b08      	cmp	r3, #8
 800163a:	d11b      	bne.n	8001674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0208 	mvn.w	r2, #8
 8001644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2204      	movs	r2, #4
 800164a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f899 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 8001660:	e005      	b.n	800166e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f88c 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f89b 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b10      	cmp	r3, #16
 8001680:	d122      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	d11b      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0210 	mvn.w	r2, #16
 8001698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2208      	movs	r2, #8
 800169e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f86f 	bl	8001792 <HAL_TIM_IC_CaptureCallback>
 80016b4:	e005      	b.n	80016c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f862 	bl	8001780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f871 	bl	80017a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0201 	mvn.w	r2, #1
 80016ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f001 faac 	bl	8002c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b80      	cmp	r3, #128	; 0x80
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d107      	bne.n	8001720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f943 	bl	80019a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d10e      	bne.n	800174c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d107      	bne.n	800174c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f835 	bl	80017b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b20      	cmp	r3, #32
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d107      	bne.n	8001778 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0220 	mvn.w	r2, #32
 8001770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f90e 	bl	8001994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a35      	ldr	r2, [pc, #212]	; (80018b0 <TIM_Base_SetConfig+0xe8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00b      	beq.n	80017f8 <TIM_Base_SetConfig+0x30>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e6:	d007      	beq.n	80017f8 <TIM_Base_SetConfig+0x30>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <TIM_Base_SetConfig+0xec>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d003      	beq.n	80017f8 <TIM_Base_SetConfig+0x30>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <TIM_Base_SetConfig+0xf0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d108      	bne.n	800180a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <TIM_Base_SetConfig+0xe8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d017      	beq.n	8001842 <TIM_Base_SetConfig+0x7a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d013      	beq.n	8001842 <TIM_Base_SetConfig+0x7a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <TIM_Base_SetConfig+0xec>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00f      	beq.n	8001842 <TIM_Base_SetConfig+0x7a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <TIM_Base_SetConfig+0xf0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00b      	beq.n	8001842 <TIM_Base_SetConfig+0x7a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a23      	ldr	r2, [pc, #140]	; (80018bc <TIM_Base_SetConfig+0xf4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <TIM_Base_SetConfig+0x7a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <TIM_Base_SetConfig+0xf8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d003      	beq.n	8001842 <TIM_Base_SetConfig+0x7a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <TIM_Base_SetConfig+0xfc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d108      	bne.n	8001854 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <TIM_Base_SetConfig+0xe8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00b      	beq.n	8001898 <TIM_Base_SetConfig+0xd0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <TIM_Base_SetConfig+0xf4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <TIM_Base_SetConfig+0xd0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <TIM_Base_SetConfig+0xf8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d003      	beq.n	8001898 <TIM_Base_SetConfig+0xd0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <TIM_Base_SetConfig+0xfc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d103      	bne.n	80018a0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	615a      	str	r2, [r3, #20]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800
 80018bc:	40014000 	.word	0x40014000
 80018c0:	40014400 	.word	0x40014400
 80018c4:	40014800 	.word	0x40014800

080018c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018dc:	2302      	movs	r3, #2
 80018de:	e04b      	b.n	8001978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192c:	d00e      	beq.n	800194c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d009      	beq.n	800194c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a13      	ldr	r2, [pc, #76]	; (800198c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d004      	beq.n	800194c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d10c      	bne.n	8001966 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	4313      	orrs	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40000400 	.word	0x40000400
 800198c:	40000800 	.word	0x40000800
 8001990:	40014000 	.word	0x40014000

08001994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e03f      	b.n	8001a4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fd14 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f905 	bl	8001c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b08a      	sub	sp, #40	; 0x28
 8001a56:	af02      	add	r7, sp, #8
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d17c      	bne.n	8001b6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_UART_Transmit+0x2c>
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e075      	b.n	8001b6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_UART_Transmit+0x3e>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e06e      	b.n	8001b6e <HAL_UART_Transmit+0x11c>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2221      	movs	r2, #33	; 0x21
 8001aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001aa6:	f7fe fddf 	bl	8000668 <HAL_GetTick>
 8001aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac0:	d108      	bne.n	8001ad4 <HAL_UART_Transmit+0x82>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d104      	bne.n	8001ad4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	e003      	b.n	8001adc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ae4:	e02a      	b.n	8001b3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2200      	movs	r2, #0
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f840 	bl	8001b76 <UART_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e036      	b.n	8001b6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e007      	b.n	8001b2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1cf      	bne.n	8001ae6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f810 	bl	8001b76 <UART_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
  }
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b86:	e02c      	b.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d028      	beq.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b96:	f7fe fd67 	bl	8000668 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d21d      	bcs.n	8001be2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e00f      	b.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4013      	ands	r3, r2
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d0c3      	beq.n	8001b88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c4c:	f023 030c 	bic.w	r3, r3, #12
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a55      	ldr	r2, [pc, #340]	; (8001dcc <UART_SetConfig+0x1c0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d103      	bne.n	8001c82 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c7a:	f7ff fb6f 	bl	800135c <HAL_RCC_GetPCLK2Freq>
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	e002      	b.n	8001c88 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c82:	f7ff fb57 	bl	8001334 <HAL_RCC_GetPCLK1Freq>
 8001c86:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c90:	d14c      	bne.n	8001d2c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	441a      	add	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	0119      	lsls	r1, r3, #4
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	009a      	lsls	r2, r3, #2
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001cca:	fba3 0302 	umull	r0, r3, r3, r2
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	fb00 f303 	mul.w	r3, r0, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	3332      	adds	r3, #50	; 0x32
 8001cdc:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cea:	4419      	add	r1, r3
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009a      	lsls	r2, r3, #2
 8001cf6:	441a      	add	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d02:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001d04:	fba3 0302 	umull	r0, r3, r3, r2
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	2064      	movs	r0, #100	; 0x64
 8001d0c:	fb00 f303 	mul.w	r3, r0, r3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	3332      	adds	r3, #50	; 0x32
 8001d16:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	440a      	add	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8001d2a:	e04a      	b.n	8001dc2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009a      	lsls	r2, r3, #2
 8001d36:	441a      	add	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	0119      	lsls	r1, r3, #4
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	009a      	lsls	r2, r3, #2
 8001d56:	441a      	add	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001d64:	fba3 0302 	umull	r0, r3, r3, r2
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	2064      	movs	r0, #100	; 0x64
 8001d6c:	fb00 f303 	mul.w	r3, r0, r3
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	3332      	adds	r3, #50	; 0x32
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d82:	4419      	add	r1, r3
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009a      	lsls	r2, r3, #2
 8001d8e:	441a      	add	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001d9c:	fba3 0302 	umull	r0, r3, r3, r2
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	fb00 f303 	mul.w	r3, r0, r3
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	3332      	adds	r3, #50	; 0x32
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <UART_SetConfig+0x1c4>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	51eb851f 	.word	0x51eb851f

08001dd4 <nbedtls_platform_zeroize>:
 */
static void *(*const volatile memset_func)(void *, int, size_t) = memset;

void nbedtls_platform_zeroize(void *buf, size_t len)
{
    memset_func(buf, 0, len);
 8001dd4:	4b02      	ldr	r3, [pc, #8]	; (8001de0 <nbedtls_platform_zeroize+0xc>)
{
 8001dd6:	460a      	mov	r2, r1
    memset_func(buf, 0, len);
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4718      	bx	r3
 8001dde:	bf00      	nop
 8001de0:	2000000c 	.word	0x2000000c

08001de4 <nbedtls_sha256_init>:

void nbedtls_sha256_init(nbedtls_sha256_context *ctx)
{
    SHA256_VALIDATE(ctx != NULL);

    memset(ctx, 0, sizeof(nbedtls_sha256_context));
 8001de4:	226c      	movs	r2, #108	; 0x6c
 8001de6:	2100      	movs	r1, #0
 8001de8:	f001 b81c 	b.w	8002e24 <memset>

08001dec <nbedtls_sha256_free>:
}

void nbedtls_sha256_free(nbedtls_sha256_context *ctx)
{
    if (ctx == NULL)
 8001dec:	b110      	cbz	r0, 8001df4 <nbedtls_sha256_free+0x8>
        return;

    nbedtls_platform_zeroize(ctx, sizeof(nbedtls_sha256_context));
 8001dee:	216c      	movs	r1, #108	; 0x6c
 8001df0:	f7ff bff0 	b.w	8001dd4 <nbedtls_platform_zeroize>
}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <nbedtls_sha256_starts_ret>:
int nbedtls_sha256_starts_ret(nbedtls_sha256_context *ctx, int is224)
{
    SHA256_VALIDATE_RET(ctx != NULL);
    SHA256_VALIDATE_RET(is224 == 0 || is224 == 1);

    ctx->total[0] = 0;
 8001df8:	2300      	movs	r3, #0
{
 8001dfa:	b430      	push	{r4, r5}
    ctx->total[1] = 0;
 8001dfc:	e9c0 3300 	strd	r3, r3, [r0]

    if (is224 == 0)
 8001e00:	b999      	cbnz	r1, 8001e2a <nbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8001e02:	4d16      	ldr	r5, [pc, #88]	; (8001e5c <nbedtls_sha256_starts_ret+0x64>)
        ctx->state[1] = 0xBB67AE85;
 8001e04:	4c16      	ldr	r4, [pc, #88]	; (8001e60 <nbedtls_sha256_starts_ret+0x68>)
        ctx->state[2] = 0x3C6EF372;
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <nbedtls_sha256_starts_ret+0x6c>)
        ctx->state[3] = 0xA54FF53A;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <nbedtls_sha256_starts_ret+0x70>)
        ctx->state[0] = 0x6A09E667;
 8001e0a:	6085      	str	r5, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8001e0c:	60c4      	str	r4, [r0, #12]
        ctx->state[4] = 0x510E527F;
 8001e0e:	4d17      	ldr	r5, [pc, #92]	; (8001e6c <nbedtls_sha256_starts_ret+0x74>)
        ctx->state[5] = 0x9B05688C;
 8001e10:	4c17      	ldr	r4, [pc, #92]	; (8001e70 <nbedtls_sha256_starts_ret+0x78>)
        ctx->state[2] = 0x3C6EF372;
 8001e12:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8001e14:	6143      	str	r3, [r0, #20]
        ctx->state[6] = 0x1F83D9AB;
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <nbedtls_sha256_starts_ret+0x7c>)
        ctx->state[7] = 0x5BE0CD19;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <nbedtls_sha256_starts_ret+0x80>)
        ctx->state[5] = 0x9B05688C;
 8001e1a:	e9c0 5406 	strd	r5, r4, [r0, #24]
    }

    ctx->is224 = is224;

    return (0);
}
 8001e1e:	bc30      	pop	{r4, r5}
        ctx->state[7] = 0x5BE0CD19;
 8001e20:	e9c0 2308 	strd	r2, r3, [r0, #32]
    ctx->is224 = is224;
 8001e24:	6681      	str	r1, [r0, #104]	; 0x68
}
 8001e26:	2000      	movs	r0, #0
 8001e28:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8001e2a:	4c14      	ldr	r4, [pc, #80]	; (8001e7c <nbedtls_sha256_starts_ret+0x84>)
        ctx->state[0] = 0xC1059ED8;
 8001e2c:	4d14      	ldr	r5, [pc, #80]	; (8001e80 <nbedtls_sha256_starts_ret+0x88>)
        ctx->state[2] = 0x3070DD17;
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <nbedtls_sha256_starts_ret+0x8c>)
        ctx->state[3] = 0xF70E5939;
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <nbedtls_sha256_starts_ret+0x90>)
        ctx->state[1] = 0x367CD507;
 8001e32:	60c4      	str	r4, [r0, #12]
        ctx->state[5] = 0x68581511;
 8001e34:	f104 5447 	add.w	r4, r4, #834666496	; 0x31c00000
        ctx->state[0] = 0xC1059ED8;
 8001e38:	6085      	str	r5, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8001e3a:	6102      	str	r2, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 8001e3c:	4d13      	ldr	r5, [pc, #76]	; (8001e8c <nbedtls_sha256_starts_ret+0x94>)
        ctx->state[3] = 0xF70E5939;
 8001e3e:	6143      	str	r3, [r0, #20]
        ctx->state[6] = 0x64F98FA7;
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <nbedtls_sha256_starts_ret+0x98>)
        ctx->state[7] = 0xBEFA4FA4;
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <nbedtls_sha256_starts_ret+0x9c>)
        ctx->state[5] = 0x68581511;
 8001e44:	f504 14da 	add.w	r4, r4, #1785856	; 0x1b4000
 8001e48:	340a      	adds	r4, #10
 8001e4a:	e9c0 5406 	strd	r5, r4, [r0, #24]
}
 8001e4e:	bc30      	pop	{r4, r5}
        ctx->state[7] = 0xBEFA4FA4;
 8001e50:	e9c0 2308 	strd	r2, r3, [r0, #32]
    ctx->is224 = is224;
 8001e54:	6681      	str	r1, [r0, #104]	; 0x68
}
 8001e56:	2000      	movs	r0, #0
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	6a09e667 	.word	0x6a09e667
 8001e60:	bb67ae85 	.word	0xbb67ae85
 8001e64:	3c6ef372 	.word	0x3c6ef372
 8001e68:	a54ff53a 	.word	0xa54ff53a
 8001e6c:	510e527f 	.word	0x510e527f
 8001e70:	9b05688c 	.word	0x9b05688c
 8001e74:	1f83d9ab 	.word	0x1f83d9ab
 8001e78:	5be0cd19 	.word	0x5be0cd19
 8001e7c:	367cd507 	.word	0x367cd507
 8001e80:	c1059ed8 	.word	0xc1059ed8
 8001e84:	3070dd17 	.word	0x3070dd17
 8001e88:	f70e5939 	.word	0xf70e5939
 8001e8c:	ffc00b31 	.word	0xffc00b31
 8001e90:	64f98fa7 	.word	0x64f98fa7
 8001e94:	befa4fa4 	.word	0xbefa4fa4

08001e98 <nbedtls_internal_sha256_process>:
        (h) = temp1 + temp2;                                 \
    } while (0)

int nbedtls_internal_sha256_process(nbedtls_sha256_context *ctx,
                                    const unsigned char data[64])
{
 8001e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e9c:	4606      	mov	r6, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	b0e5      	sub	sp, #404	; 0x194
 8001ea2:	4a9b      	ldr	r2, [pc, #620]	; (8002110 <nbedtls_internal_sha256_process+0x278>)
 8001ea4:	901b      	str	r0, [sp, #108]	; 0x6c
 8001ea6:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8001eaa:	ab24      	add	r3, sp, #144	; 0x90
        A[1] = A[0];
        A[0] = temp1;
    }
#else  /* MBEDTLS_SHA256_SMALLER */
    for (i = 0; i < 16; i++)
        GET_UINT32_BE(W[i], data, 4 * i);
 8001eac:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8001eb0:	f891 c000 	ldrb.w	ip, [r1]
 8001eb4:	9319      	str	r3, [sp, #100]	; 0x64
 8001eb6:	6871      	ldr	r1, [r6, #4]
 8001eb8:	68f3      	ldr	r3, [r6, #12]
 8001eba:	9201      	str	r2, [sp, #4]
 8001ebc:	68b2      	ldr	r2, [r6, #8]
 8001ebe:	ad1c      	add	r5, sp, #112	; 0x70
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	7927      	ldrb	r7, [r4, #4]
 8001ec4:	7861      	ldrb	r1, [r4, #1]
 8001ec6:	7a60      	ldrb	r0, [r4, #9]
 8001ec8:	7962      	ldrb	r2, [r4, #5]
 8001eca:	7a23      	ldrb	r3, [r4, #8]
 8001ecc:	f894 e00b 	ldrb.w	lr, [r4, #11]
 8001ed0:	9502      	str	r5, [sp, #8]
 8001ed2:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 8001ed6:	78e5      	ldrb	r5, [r4, #3]
 8001ed8:	9000      	str	r0, [sp, #0]
 8001eda:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 8001ede:	063f      	lsls	r7, r7, #24
 8001ee0:	f894 a007 	ldrb.w	sl, [r4, #7]
 8001ee4:	f894 9002 	ldrb.w	r9, [r4, #2]
 8001ee8:	f894 b006 	ldrb.w	fp, [r4, #6]
 8001eec:	f894 800a 	ldrb.w	r8, [r4, #10]
 8001ef0:	6930      	ldr	r0, [r6, #16]
 8001ef2:	6971      	ldr	r1, [r6, #20]
 8001ef4:	ea4c 0c05 	orr.w	ip, ip, r5
 8001ef8:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001efc:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
 8001f00:	69b2      	ldr	r2, [r6, #24]
 8001f02:	69f3      	ldr	r3, [r6, #28]
 8001f04:	9d00      	ldr	r5, [sp, #0]
 8001f06:	ea47 070a 	orr.w	r7, r7, sl
 8001f0a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8001f0e:	ea4e 2508 	orr.w	r5, lr, r8, lsl #8
 8001f12:	9500      	str	r5, [sp, #0]
 8001f14:	9508      	str	r5, [sp, #32]
 8001f16:	9d02      	ldr	r5, [sp, #8]
 8001f18:	ea4c 2609 	orr.w	r6, ip, r9, lsl #8
 8001f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1e:	7de2      	ldrb	r2, [r4, #23]
 8001f20:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8001f24:	9203      	str	r2, [sp, #12]
 8001f26:	7b62      	ldrb	r2, [r4, #13]
 8001f28:	9d00      	ldr	r5, [sp, #0]
 8001f2a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001f2e:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
 8001f32:	f894 901f 	ldrb.w	r9, [r4, #31]
 8001f36:	9710      	str	r7, [sp, #64]	; 0x40
 8001f38:	9200      	str	r2, [sp, #0]
 8001f3a:	7f27      	ldrb	r7, [r4, #28]
 8001f3c:	7c62      	ldrb	r2, [r4, #17]
 8001f3e:	f894 800f 	ldrb.w	r8, [r4, #15]
 8001f42:	961a      	str	r6, [sp, #104]	; 0x68
 8001f44:	7b26      	ldrb	r6, [r4, #12]
 8001f46:	7d20      	ldrb	r0, [r4, #20]
 8001f48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8001f4c:	7ce1      	ldrb	r1, [r4, #19]
 8001f4e:	f894 e01b 	ldrb.w	lr, [r4, #27]
 8001f52:	9526      	str	r5, [sp, #152]	; 0x98
 8001f54:	930a      	str	r3, [sp, #40]	; 0x28
 8001f56:	7c25      	ldrb	r5, [r4, #16]
 8001f58:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001f5c:	9202      	str	r2, [sp, #8]
 8001f5e:	ea49 6907 	orr.w	r9, r9, r7, lsl #24
 8001f62:	f894 c015 	ldrb.w	ip, [r4, #21]
 8001f66:	9f00      	ldr	r7, [sp, #0]
 8001f68:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 8001f6c:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
 8001f70:	9f02      	ldr	r7, [sp, #8]
 8001f72:	f8cd c018 	str.w	ip, [sp, #24]
 8001f76:	9a03      	ldr	r2, [sp, #12]
 8001f78:	f894 c019 	ldrb.w	ip, [r4, #25]
 8001f7c:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 8001f80:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8001f84:	9f06      	ldr	r7, [sp, #24]
 8001f86:	f8cd c01c 	str.w	ip, [sp, #28]
 8001f8a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001f8e:	f894 c01d 	ldrb.w	ip, [r4, #29]
 8001f92:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001f96:	9f07      	ldr	r7, [sp, #28]
 8001f98:	7ea0      	ldrb	r0, [r4, #26]
 8001f9a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001f9e:	ea4e 6e0b 	orr.w	lr, lr, fp, lsl #24
 8001fa2:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
 8001fa6:	ea4e 4e07 	orr.w	lr, lr, r7, lsl #16
 8001faa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8001fac:	7da6      	ldrb	r6, [r4, #22]
 8001fae:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8001fb2:	9003      	str	r0, [sp, #12]
 8001fb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fb6:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 8001fba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8001fbc:	f894 a00e 	ldrb.w	sl, [r4, #14]
 8001fc0:	f894 c012 	ldrb.w	ip, [r4, #18]
 8001fc4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8001fc8:	7fa5      	ldrb	r5, [r4, #30]
 8001fca:	9e03      	ldr	r6, [sp, #12]
 8001fcc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001fd0:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 8001fd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001fd8:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8001fdc:	ea48 270a 	orr.w	r7, r8, sl, lsl #8
 8001fe0:	ea4e 2606 	orr.w	r6, lr, r6, lsl #8
 8001fe4:	ea49 2505 	orr.w	r5, r9, r5, lsl #8
 8001fe8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001fec:	e9cd 7127 	strd	r7, r1, [sp, #156]	; 0x9c
 8001ff0:	970f      	str	r7, [sp, #60]	; 0x3c
 8001ff2:	9106      	str	r1, [sp, #24]
 8001ff4:	9211      	str	r2, [sp, #68]	; 0x44
 8001ff6:	9607      	str	r6, [sp, #28]
 8001ff8:	950e      	str	r5, [sp, #56]	; 0x38
 8001ffa:	9312      	str	r3, [sp, #72]	; 0x48
 8001ffc:	e9cd 2629 	strd	r2, r6, [sp, #164]	; 0xa4
 8002000:	e9cd 532b 	strd	r5, r3, [sp, #172]	; 0xac
 8002004:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002008:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 800200c:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8002016:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
 800201a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800201e:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
 8002022:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
 8002026:	9102      	str	r1, [sp, #8]
 8002028:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800202c:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 8002030:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 8002034:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
 8002038:	f894 e033 	ldrb.w	lr, [r4, #51]	; 0x33
 800203c:	9303      	str	r3, [sp, #12]
 800203e:	9b00      	ldr	r3, [sp, #0]
 8002040:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 8002044:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8002048:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800204c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002050:	f894 903c 	ldrb.w	r9, [r4, #60]	; 0x3c
 8002054:	f894 a029 	ldrb.w	sl, [r4, #41]	; 0x29
 8002058:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800205c:	f894 b03f 	ldrb.w	fp, [r4, #63]	; 0x3f
 8002060:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 8002064:	ea4e 6e05 	orr.w	lr, lr, r5, lsl #24
 8002068:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800206c:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 8002070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002074:	9b03      	ldr	r3, [sp, #12]
 8002076:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800207a:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800207e:	ea4b 6b09 	orr.w	fp, fp, r9, lsl #24
 8002082:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8002086:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 800208a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800208e:	ea48 4606 	orr.w	r6, r8, r6, lsl #16
 8002092:	f894 a02a 	ldrb.w	sl, [r4, #42]	; 0x2a
 8002096:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
 800209a:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800209e:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
 80020a2:	9100      	str	r1, [sp, #0]
 80020a4:	9902      	ldr	r1, [sp, #8]
 80020a6:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
 80020aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020ae:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
 80020b2:	9900      	ldr	r1, [sp, #0]
 80020b4:	ea4c 4000 	orr.w	r0, ip, r0, lsl #16
 80020b8:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
 80020bc:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
 80020c0:	f894 403e 	ldrb.w	r4, [r4, #62]	; 0x3e
 80020c4:	9316      	str	r3, [sp, #88]	; 0x58
 80020c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80020c8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 80020cc:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
 80020d0:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
 80020d4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80020d8:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 80020dc:	ea49 2404 	orr.w	r4, r9, r4, lsl #8
 80020e0:	e9cd 652f 	strd	r6, r5, [sp, #188]	; 0xbc
 80020e4:	e9cd 0131 	strd	r0, r1, [sp, #196]	; 0xc4
 80020e8:	9515      	str	r5, [sp, #84]	; 0x54
 80020ea:	9014      	str	r0, [sp, #80]	; 0x50
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80020f0:	e9dd 3021 	ldrd	r3, r0, [sp, #132]	; 0x84
 80020f4:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80020fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80020fe:	9613      	str	r6, [sp, #76]	; 0x4c
 8002100:	910a      	str	r1, [sp, #40]	; 0x28
 8002102:	9409      	str	r4, [sp, #36]	; 0x24
 8002104:	9433      	str	r4, [sp, #204]	; 0xcc
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	e9dd c31d 	ldrd	ip, r3, [sp, #116]	; 0x74
 800210c:	e002      	b.n	8002114 <nbedtls_internal_sha256_process+0x27c>
 800210e:	bf00      	nop
 8002110:	080036dc 	.word	0x080036dc

    for (i = 0; i < 16; i += 8)
    {
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i + 0], K[i + 0]);
 8002114:	9c05      	ldr	r4, [sp, #20]
 8002116:	9904      	ldr	r1, [sp, #16]
 8002118:	9a02      	ldr	r2, [sp, #8]
 800211a:	6826      	ldr	r6, [r4, #0]
 800211c:	6809      	ldr	r1, [r1, #0]
 800211e:	ea4f 2ef5 	mov.w	lr, r5, ror #11
 8002122:	ea80 0702 	eor.w	r7, r0, r2
 8002126:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
 800212a:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
 800212e:	4431      	add	r1, r6
 8002130:	402f      	ands	r7, r5
 8002132:	9e00      	ldr	r6, [sp, #0]
 8002134:	4047      	eors	r7, r0
 8002136:	4471      	add	r1, lr
 8002138:	4439      	add	r1, r7
 800213a:	ea4f 3976 	mov.w	r9, r6, ror #13
 800213e:	9f00      	ldr	r7, [sp, #0]
 8002140:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
 8002144:	ea89 59b7 	eor.w	r9, r9, r7, ror #22
 8002148:	9f03      	ldr	r7, [sp, #12]
 800214a:	ea46 0a0c 	orr.w	sl, r6, ip
 800214e:	440f      	add	r7, r1
 8002150:	46be      	mov	lr, r7
 8002152:	ea06 060c 	and.w	r6, r6, ip
 8002156:	ea0a 0a03 	and.w	sl, sl, r3
 800215a:	ea4a 0a06 	orr.w	sl, sl, r6
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 800215e:	9e04      	ldr	r6, [sp, #16]
 8002160:	6867      	ldr	r7, [r4, #4]
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i + 0], K[i + 0]);
 8002162:	44d1      	add	r9, sl
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 8002164:	6876      	ldr	r6, [r6, #4]
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i + 0], K[i + 0]);
 8002166:	eb08 010e 	add.w	r1, r8, lr
 800216a:	44ce      	add	lr, r9
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 800216c:	ea85 0902 	eor.w	r9, r5, r2
 8002170:	9a00      	ldr	r2, [sp, #0]
 8002172:	443e      	add	r6, r7
 8002174:	9f02      	ldr	r7, [sp, #8]
 8002176:	ea4e 0a02 	orr.w	sl, lr, r2
 800217a:	ea09 0901 	and.w	r9, r9, r1
 800217e:	ea4f 28f1 	mov.w	r8, r1, ror #11
 8002182:	ea4f 3b7e 	mov.w	fp, lr, ror #13
 8002186:	ea89 0907 	eor.w	r9, r9, r7
 800218a:	4406      	add	r6, r0
 800218c:	ea0e 0702 	and.w	r7, lr, r2
 8002190:	ea88 18b1 	eor.w	r8, r8, r1, ror #6
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 8002194:	9a04      	ldr	r2, [sp, #16]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 8002196:	ea0a 0a0c 	and.w	sl, sl, ip
 800219a:	ea8b 0bbe 	eor.w	fp, fp, lr, ror #2
 800219e:	444e      	add	r6, r9
 80021a0:	ea4a 0a07 	orr.w	sl, sl, r7
 80021a4:	ea8b 5bbe 	eor.w	fp, fp, lr, ror #22
 80021a8:	ea88 6871 	eor.w	r8, r8, r1, ror #25
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 80021ac:	68a7      	ldr	r7, [r4, #8]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 80021ae:	44b0      	add	r8, r6
 80021b0:	eb0b 000a 	add.w	r0, fp, sl
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 80021b4:	6896      	ldr	r6, [r2, #8]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i + 1], K[i + 1]);
 80021b6:	eb00 0908 	add.w	r9, r0, r8
 80021ba:	4443      	add	r3, r8
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 80021bc:	9c02      	ldr	r4, [sp, #8]
 80021be:	ea81 0805 	eor.w	r8, r1, r5
 80021c2:	443e      	add	r6, r7
 80021c4:	ea08 0803 	and.w	r8, r8, r3
 80021c8:	ea4f 20f3 	mov.w	r0, r3, ror #11
 80021cc:	4434      	add	r4, r6
 80021ce:	ea88 0805 	eor.w	r8, r8, r5
 80021d2:	9e00      	ldr	r6, [sp, #0]
 80021d4:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 80021d8:	ea4e 0a09 	orr.w	sl, lr, r9
 80021dc:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 80021e0:	ea4f 3b79 	mov.w	fp, r9, ror #13
 80021e4:	44a0      	add	r8, r4
 80021e6:	4480      	add	r8, r0
 80021e8:	ea0a 0a06 	and.w	sl, sl, r6
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 80021ec:	9805      	ldr	r0, [sp, #20]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 80021ee:	ea0e 0609 	and.w	r6, lr, r9
 80021f2:	ea8b 0bb9 	eor.w	fp, fp, r9, ror #2
 80021f6:	ea4a 0a06 	orr.w	sl, sl, r6
 80021fa:	ea8b 5bb9 	eor.w	fp, fp, r9, ror #22
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 80021fe:	68c6      	ldr	r6, [r0, #12]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 8002200:	eb0b 040a 	add.w	r4, fp, sl
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 8002204:	68d0      	ldr	r0, [r2, #12]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i + 2], K[i + 2]);
 8002206:	eb04 0708 	add.w	r7, r4, r8
 800220a:	44c4      	add	ip, r8
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 800220c:	ea81 0803 	eor.w	r8, r1, r3
 8002210:	4430      	add	r0, r6
 8002212:	ea08 080c 	and.w	r8, r8, ip
 8002216:	ea4f 24fc 	mov.w	r4, ip, ror #11
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 800221a:	9e05      	ldr	r6, [sp, #20]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 800221c:	ea49 0a07 	orr.w	sl, r9, r7
 8002220:	4405      	add	r5, r0
 8002222:	ea88 0801 	eor.w	r8, r8, r1
 8002226:	ea84 14bc 	eor.w	r4, r4, ip, ror #6
 800222a:	ea09 0007 	and.w	r0, r9, r7
 800222e:	ea84 647c 	eor.w	r4, r4, ip, ror #25
 8002232:	ea4f 3b77 	mov.w	fp, r7, ror #13
 8002236:	ea0a 0a0e 	and.w	sl, sl, lr
 800223a:	44a8      	add	r8, r5
 800223c:	44a0      	add	r8, r4
 800223e:	ea4a 0a00 	orr.w	sl, sl, r0
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 8002242:	6934      	ldr	r4, [r6, #16]
 8002244:	6910      	ldr	r0, [r2, #16]
 8002246:	4616      	mov	r6, r2
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 8002248:	ea8b 0bb7 	eor.w	fp, fp, r7, ror #2
 800224c:	9a00      	ldr	r2, [sp, #0]
 800224e:	ea8b 5bb7 	eor.w	fp, fp, r7, ror #22
 8002252:	eb0b 050a 	add.w	r5, fp, sl
 8002256:	4442      	add	r2, r8
 8002258:	9200      	str	r2, [sp, #0]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 800225a:	4420      	add	r0, r4
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i + 3], K[i + 3]);
 800225c:	eb05 0208 	add.w	r2, r5, r8
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 8002260:	4401      	add	r1, r0
 8002262:	4610      	mov	r0, r2
 8002264:	9c00      	ldr	r4, [sp, #0]
 8002266:	ea83 0b0c 	eor.w	fp, r3, ip
 800226a:	ea0b 0b04 	and.w	fp, fp, r4
 800226e:	ea8b 0b03 	eor.w	fp, fp, r3
 8002272:	448b      	add	fp, r1
 8002274:	4601      	mov	r1, r0
 8002276:	ea4f 25f4 	mov.w	r5, r4, ror #11
 800227a:	ea4f 3a72 	mov.w	sl, r2, ror #13
 800227e:	ea47 0402 	orr.w	r4, r7, r2
 8002282:	9a00      	ldr	r2, [sp, #0]
 8002284:	ea04 0409 	and.w	r4, r4, r9
 8002288:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
 800228c:	9a00      	ldr	r2, [sp, #0]
 800228e:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 8002292:	4038      	ands	r0, r7
 8002294:	4304      	orrs	r4, r0
 8002296:	ea85 6572 	eor.w	r5, r5, r2, ror #25
 800229a:	ea8a 5ab1 	eor.w	sl, sl, r1, ror #22
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 800229e:	9a05      	ldr	r2, [sp, #20]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 80022a0:	445d      	add	r5, fp
 80022a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80022a4:	eb0a 0104 	add.w	r1, sl, r4
 80022a8:	eb01 0805 	add.w	r8, r1, r5
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80022ac:	6954      	ldr	r4, [r2, #20]
 80022ae:	6970      	ldr	r0, [r6, #20]
 80022b0:	9900      	ldr	r1, [sp, #0]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i + 4], K[i + 4]);
 80022b2:	eb0e 0605 	add.w	r6, lr, r5
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80022b6:	ea8c 0e01 	eor.w	lr, ip, r1
 80022ba:	4420      	add	r0, r4
 80022bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80022be:	ea0e 0e06 	and.w	lr, lr, r6
 80022c2:	4403      	add	r3, r0
 80022c4:	ea8e 0e0c 	eor.w	lr, lr, ip
 80022c8:	ea45 0a08 	orr.w	sl, r5, r8
 80022cc:	449e      	add	lr, r3
 80022ce:	ea4f 3578 	mov.w	r5, r8, ror #13
 80022d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80022d4:	ea85 05b8 	eor.w	r5, r5, r8, ror #2
 80022d8:	ea4f 21f6 	mov.w	r1, r6, ror #11
 80022dc:	ea03 0b08 	and.w	fp, r3, r8
 80022e0:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
 80022e4:	ea85 53b8 	eor.w	r3, r5, r8, ror #22
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 80022e8:	9d04      	ldr	r5, [sp, #16]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80022ea:	ea81 6176 	eor.w	r1, r1, r6, ror #25
 80022ee:	448e      	add	lr, r1
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 80022f0:	6994      	ldr	r4, [r2, #24]
 80022f2:	69a9      	ldr	r1, [r5, #24]
 80022f4:	9d00      	ldr	r5, [sp, #0]
 80022f6:	4421      	add	r1, r4
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80022f8:	eb09 000e 	add.w	r0, r9, lr
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 80022fc:	448c      	add	ip, r1
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 80022fe:	ea0a 0a07 	and.w	sl, sl, r7
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002302:	9900      	ldr	r1, [sp, #0]
 8002304:	ea85 0906 	eor.w	r9, r5, r6
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 8002308:	ea4a 0a0b 	orr.w	sl, sl, fp
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 800230c:	ea09 0900 	and.w	r9, r9, r0
 8002310:	ea4f 25f0 	mov.w	r5, r0, ror #11
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 8002314:	4453      	add	r3, sl
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002316:	ea89 0901 	eor.w	r9, r9, r1
 800231a:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i + 5], K[i + 5]);
 800231e:	4473      	add	r3, lr
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002320:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002322:	44e1      	add	r9, ip
 8002324:	ea85 6570 	eor.w	r5, r5, r0, ror #25
 8002328:	44a9      	add	r9, r5
 800232a:	ea48 0a03 	orr.w	sl, r8, r3
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 800232e:	69d5      	ldr	r5, [r2, #28]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002330:	ea0a 0a04 	and.w	sl, sl, r4
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002334:	4614      	mov	r4, r2
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002336:	eb07 0209 	add.w	r2, r7, r9
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 800233a:	4637      	mov	r7, r6
 800233c:	9904      	ldr	r1, [sp, #16]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 800233e:	ea4f 3e73 	mov.w	lr, r3, ror #13
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002342:	69c9      	ldr	r1, [r1, #28]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002344:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002348:	4429      	add	r1, r5
 800234a:	4615      	mov	r5, r2
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 800234c:	ea08 0b03 	and.w	fp, r8, r3
 8002350:	ea4a 0a0b 	orr.w	sl, sl, fp
 8002354:	ea8e 5cb3 	eor.w	ip, lr, r3, ror #22
 8002358:	44d4      	add	ip, sl
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 800235a:	4047      	eors	r7, r0
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 800235c:	44cc      	add	ip, r9
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 800235e:	4017      	ands	r7, r2
 8002360:	ea4f 29f2 	mov.w	r9, r2, ror #11
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 8002364:	9202      	str	r2, [sp, #8]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 8002366:	9a00      	ldr	r2, [sp, #0]
 8002368:	ea43 0a0c 	orr.w	sl, r3, ip
 800236c:	440a      	add	r2, r1
 800236e:	ea0a 0a08 	and.w	sl, sl, r8
 8002372:	ea03 010c 	and.w	r1, r3, ip
 8002376:	ea4a 0a01 	orr.w	sl, sl, r1
 800237a:	9904      	ldr	r1, [sp, #16]
 800237c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
 8002380:	3120      	adds	r1, #32
 8002382:	4077      	eors	r7, r6
 8002384:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 8002388:	443a      	add	r2, r7
 800238a:	9104      	str	r1, [sp, #16]
 800238c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800238e:	444a      	add	r2, r9
 8002390:	ea4f 3e7c 	mov.w	lr, ip, ror #13
 8002394:	4411      	add	r1, r2
 8002396:	ea8e 0ebc 	eor.w	lr, lr, ip, ror #2
 800239a:	460d      	mov	r5, r1
 800239c:	ea8e 5ebc 	eor.w	lr, lr, ip, ror #22
    for (i = 0; i < 16; i += 8)
 80023a0:	4905      	ldr	r1, [pc, #20]	; (80023b8 <nbedtls_internal_sha256_process+0x520>)
 80023a2:	3420      	adds	r4, #32
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 80023a4:	44f2      	add	sl, lr
 80023a6:	4452      	add	r2, sl
    for (i = 0; i < 16; i += 8)
 80023a8:	428c      	cmp	r4, r1
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i + 6], K[i + 6]);
 80023aa:	9603      	str	r6, [sp, #12]
 80023ac:	9405      	str	r4, [sp, #20]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i + 7], K[i + 7]);
 80023ae:	9200      	str	r2, [sp, #0]
    for (i = 0; i < 16; i += 8)
 80023b0:	f47f aeb0 	bne.w	8002114 <nbedtls_internal_sha256_process+0x27c>
 80023b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80023b6:	e012      	b.n	80023de <nbedtls_internal_sha256_process+0x546>
 80023b8:	0800371c 	.word	0x0800371c
 80023bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80023be:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80023c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80023c4:	9904      	ldr	r1, [sp, #16]
 80023c6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80023ca:	9112      	str	r1, [sp, #72]	; 0x48
 80023cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80023ce:	9116      	str	r1, [sp, #88]	; 0x58
 80023d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80023d2:	9113      	str	r1, [sp, #76]	; 0x4c
 80023d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80023d6:	9115      	str	r1, [sp, #84]	; 0x54
 80023d8:	9905      	ldr	r1, [sp, #20]
 80023da:	9114      	str	r1, [sp, #80]	; 0x50
 80023dc:	4671      	mov	r1, lr
    }

    for (i = 16; i < 64; i += 8)
    {
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 80023de:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80023e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80023e2:	46a1      	mov	r9, r4
 80023e4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80023e6:	4693      	mov	fp, r2
 80023e8:	44a1      	add	r9, r4
 80023ea:	4614      	mov	r4, r2
 80023ec:	9f02      	ldr	r7, [sp, #8]
 80023ee:	ea4f 46f1 	mov.w	r6, r1, ror #19
 80023f2:	ea80 0e07 	eor.w	lr, r0, r7
 80023f6:	ea4f 47b2 	mov.w	r7, r2, ror #18
 80023fa:	ea4f 2af5 	mov.w	sl, r5, ror #11
 80023fe:	ea87 17f2 	eor.w	r7, r7, r2, ror #7
 8002402:	9a01      	ldr	r2, [sp, #4]
 8002404:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 8002408:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
 800240c:	ea0e 0e05 	and.w	lr, lr, r5
 8002410:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
 8002414:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 8002418:	ea8e 0e00 	eor.w	lr, lr, r0
 800241c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800241e:	444e      	add	r6, r9
 8002420:	ea87 07d4 	eor.w	r7, r7, r4, lsr #3
 8002424:	44d6      	add	lr, sl
 8002426:	9c00      	ldr	r4, [sp, #0]
 8002428:	19f7      	adds	r7, r6, r7
 800242a:	448e      	add	lr, r1
 800242c:	9900      	ldr	r1, [sp, #0]
 800242e:	9704      	str	r7, [sp, #16]
 8002430:	ea4f 3974 	mov.w	r9, r4, ror #13
 8002434:	ea41 060c 	orr.w	r6, r1, ip
 8002438:	ea89 09b1 	eor.w	r9, r9, r1, ror #2
 800243c:	9904      	ldr	r1, [sp, #16]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 800243e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002440:	448e      	add	lr, r1
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002442:	9900      	ldr	r1, [sp, #0]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002444:	ea4f 47f4 	mov.w	r7, r4, ror #19
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002448:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 800244c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800244e:	ea87 4774 	eor.w	r7, r7, r4, ror #17
 8002452:	448b      	add	fp, r1
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002454:	9903      	ldr	r1, [sp, #12]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002456:	ea87 2794 	eor.w	r7, r7, r4, lsr #10
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 800245a:	468a      	mov	sl, r1
 800245c:	44f2      	add	sl, lr
 800245e:	46d6      	mov	lr, sl
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002460:	9c08      	ldr	r4, [sp, #32]
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002462:	9900      	ldr	r1, [sp, #0]
 8002464:	401e      	ands	r6, r3
 8002466:	ea01 010c 	and.w	r1, r1, ip
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 800246a:	ea4f 4ab4 	mov.w	sl, r4, ror #18
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 800246e:	430e      	orrs	r6, r1
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002470:	ea8a 1af4 	eor.w	sl, sl, r4, ror #7
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 8002474:	44b1      	add	r9, r6
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002476:	445f      	add	r7, fp
 8002478:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
 800247c:	9c02      	ldr	r4, [sp, #8]
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 800247e:	eb08 010e 	add.w	r1, r8, lr
 8002482:	44ce      	add	lr, r9
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 8002484:	eb07 090a 	add.w	r9, r7, sl
 8002488:	ea85 0804 	eor.w	r8, r5, r4
 800248c:	464c      	mov	r4, r9
 800248e:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8002490:	ea08 0a01 	and.w	sl, r8, r1
 8002494:	1987      	adds	r7, r0, r6
 8002496:	9802      	ldr	r0, [sp, #8]
 8002498:	ea4f 26f1 	mov.w	r6, r1, ror #11
 800249c:	ea8a 0a00 	eor.w	sl, sl, r0
 80024a0:	ea4f 307e 	mov.w	r0, lr, ror #13
 80024a4:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80024a8:	ea80 5bbe 	eor.w	fp, r0, lr, ror #22
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80024ae:	4427      	add	r7, r4
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024b0:	ea86 16b1 	eor.w	r6, r6, r1, ror #6
 80024b4:	4457      	add	r7, sl
 80024b6:	ea86 6671 	eor.w	r6, r6, r1, ror #25
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024ba:	4682      	mov	sl, r0
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024bc:	443e      	add	r6, r7
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024be:	9f04      	ldr	r7, [sp, #16]
 80024c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80024c2:	463c      	mov	r4, r7
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024c4:	9a00      	ldr	r2, [sp, #0]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024c6:	9808      	ldr	r0, [sp, #32]
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024c8:	ea42 090e 	orr.w	r9, r2, lr
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024ce:	ea09 090c 	and.w	r9, r9, ip
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024d2:	ea4f 48b2 	mov.w	r8, r2, ror #18
 80024d6:	ea88 18f2 	eor.w	r8, r8, r2, ror #7
 80024da:	ea88 08d2 	eor.w	r8, r8, r2, lsr #3
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024de:	9a00      	ldr	r2, [sp, #0]
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024e0:	4482      	add	sl, r0
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024e2:	ea02 000e 	and.w	r0, r2, lr
 80024e6:	ea49 0000 	orr.w	r0, r9, r0
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024ea:	ea4f 49f7 	mov.w	r9, r7, ror #19
 80024ee:	ea89 4977 	eor.w	r9, r9, r7, ror #17
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024f2:	4458      	add	r0, fp
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024f4:	ea89 2994 	eor.w	r9, r9, r4, lsr #10
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80024f8:	199c      	adds	r4, r3, r6
 80024fa:	1983      	adds	r3, r0, r6
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80024fc:	4626      	mov	r6, r4
 80024fe:	44d0      	add	r8, sl
 8002500:	44c8      	add	r8, r9
 8002502:	4640      	mov	r0, r8
 8002504:	4632      	mov	r2, r6
 8002506:	9f01      	ldr	r7, [sp, #4]
 8002508:	ea85 0a01 	eor.w	sl, r5, r1
 800250c:	6cbf      	ldr	r7, [r7, #72]	; 0x48
 800250e:	ea0a 0a04 	and.w	sl, sl, r4
 8002512:	9c02      	ldr	r4, [sp, #8]
 8002514:	ea4e 0903 	orr.w	r9, lr, r3
 8002518:	443c      	add	r4, r7
 800251a:	9308      	str	r3, [sp, #32]
 800251c:	ea4f 27f6 	mov.w	r7, r6, ror #11
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002520:	9b06      	ldr	r3, [sp, #24]
 8002522:	1826      	adds	r6, r4, r0
 8002524:	900c      	str	r0, [sp, #48]	; 0x30
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002526:	9800      	ldr	r0, [sp, #0]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002528:	ea4f 48b3 	mov.w	r8, r3, ror #18
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 800252c:	ea09 0900 	and.w	r9, r9, r0
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002530:	980f      	ldr	r0, [sp, #60]	; 0x3c
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002532:	ea8a 0a05 	eor.w	sl, sl, r5
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002536:	ea88 18f3 	eor.w	r8, r8, r3, ror #7
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 800253a:	9b08      	ldr	r3, [sp, #32]
 800253c:	4456      	add	r6, sl
 800253e:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002542:	4682      	mov	sl, r0
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002544:	9202      	str	r2, [sp, #8]
 8002546:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 800254a:	461a      	mov	r2, r3
 800254c:	ea4f 3473 	mov.w	r4, r3, ror #13
 8002550:	ea84 04b3 	eor.w	r4, r4, r3, ror #2
 8002554:	ea84 5bb3 	eor.w	fp, r4, r3, ror #22
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800255a:	9806      	ldr	r0, [sp, #24]
 800255c:	449a      	add	sl, r3
 800255e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002560:	ea0e 0402 	and.w	r4, lr, r2
 8002564:	ea49 0404 	orr.w	r4, r9, r4
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002568:	ea4f 49f3 	mov.w	r9, r3, ror #19
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 800256c:	4437      	add	r7, r6
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 800256e:	ea88 08d0 	eor.w	r8, r8, r0, lsr #3
 8002572:	ea89 4973 	eor.w	r9, r9, r3, ror #17
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 8002576:	445c      	add	r4, fp
 8002578:	443c      	add	r4, r7
 800257a:	44bc      	add	ip, r7
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 800257c:	ea89 2993 	eor.w	r9, r9, r3, lsr #10
 8002580:	9f02      	ldr	r7, [sp, #8]
 8002582:	44d0      	add	r8, sl
 8002584:	44c8      	add	r8, r9
 8002586:	ea81 0a07 	eor.w	sl, r1, r7
 800258a:	4647      	mov	r7, r8
 800258c:	9e01      	ldr	r6, [sp, #4]
 800258e:	970d      	str	r7, [sp, #52]	; 0x34
 8002590:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
 8002592:	ea0a 0a0c 	and.w	sl, sl, ip
 8002596:	4435      	add	r5, r6
 8002598:	19ef      	adds	r7, r5, r7
 800259a:	ea4f 3574 	mov.w	r5, r4, ror #13
 800259e:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
 80025a2:	ea85 5bb4 	eor.w	fp, r5, r4, ror #22
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025a8:	ea8a 0a01 	eor.w	sl, sl, r1
 80025ac:	4457      	add	r7, sl
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025ae:	46aa      	mov	sl, r5
 80025b0:	9811      	ldr	r0, [sp, #68]	; 0x44
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025b2:	ea4f 26fc 	mov.w	r6, ip, ror #11
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025b6:	ea4f 49b0 	mov.w	r9, r0, ror #18
 80025ba:	9d06      	ldr	r5, [sp, #24]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025bc:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025c0:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025c4:	ea42 0804 	orr.w	r8, r2, r4
 80025c8:	ea86 667c 	eor.w	r6, r6, ip, ror #25
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025cc:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 80025d0:	980c      	ldr	r0, [sp, #48]	; 0x30
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025d2:	443e      	add	r6, r7
 80025d4:	ea08 080e 	and.w	r8, r8, lr
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025d8:	44aa      	add	sl, r5
 80025da:	9f01      	ldr	r7, [sp, #4]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025dc:	ea02 0504 	and.w	r5, r2, r4
 80025e0:	9b00      	ldr	r3, [sp, #0]
 80025e2:	ea48 0505 	orr.w	r5, r8, r5
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025e6:	ea4f 48f0 	mov.w	r8, r0, ror #19
 80025ea:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 80025ec:	ea88 4870 	eor.w	r8, r8, r0, ror #17
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80025f0:	4433      	add	r3, r6
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80025f2:	44d1      	add	r9, sl
 80025f4:	ea88 2890 	eor.w	r8, r8, r0, lsr #10
 80025f8:	9802      	ldr	r0, [sp, #8]
 80025fa:	eb09 0208 	add.w	r2, r9, r8
 80025fe:	9300      	str	r3, [sp, #0]
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 8002600:	445d      	add	r5, fp
 8002602:	4439      	add	r1, r7
 8002604:	4435      	add	r5, r6
 8002606:	4411      	add	r1, r2
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002608:	ea80 060c 	eor.w	r6, r0, ip
 800260c:	4610      	mov	r0, r2
 800260e:	9a00      	ldr	r2, [sp, #0]
 8002610:	ea4f 28f3 	mov.w	r8, r3, ror #11
 8002614:	ea88 18b2 	eor.w	r8, r8, r2, ror #6
 8002618:	ea88 6872 	eor.w	r8, r8, r2, ror #25
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800261c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 800261e:	401e      	ands	r6, r3
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002620:	4692      	mov	sl, r2
 8002622:	9b07      	ldr	r3, [sp, #28]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002624:	9f02      	ldr	r7, [sp, #8]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002626:	ea4f 49b3 	mov.w	r9, r3, ror #18
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 800262a:	407e      	eors	r6, r7
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800262c:	ea89 19f3 	eor.w	r9, r9, r3, ror #7
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002630:	9f08      	ldr	r7, [sp, #32]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002636:	ea44 0b05 	orr.w	fp, r4, r5
 800263a:	440e      	add	r6, r1
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800263c:	449a      	add	sl, r3
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 800263e:	ea04 0105 	and.w	r1, r4, r5
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002642:	9b07      	ldr	r3, [sp, #28]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002644:	ea0b 0b07 	and.w	fp, fp, r7
 8002648:	ea4b 0b01 	orr.w	fp, fp, r1
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800264c:	ea4f 41f2 	mov.w	r1, r2, ror #19
 8002650:	ea89 09d3 	eor.w	r9, r9, r3, lsr #3
 8002654:	ea81 4172 	eor.w	r1, r1, r2, ror #17
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002658:	44b0      	add	r8, r6
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800265a:	44d1      	add	r9, sl
 800265c:	9e01      	ldr	r6, [sp, #4]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 800265e:	ea4f 3775 	mov.w	r7, r5, ror #13
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002662:	ea81 2192 	eor.w	r1, r1, r2, lsr #10
 8002666:	4449      	add	r1, r9
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002668:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 800266c:	6d76      	ldr	r6, [r6, #84]	; 0x54
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 800266e:	9b00      	ldr	r3, [sp, #0]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002670:	ea87 57b5 	eor.w	r7, r7, r5, ror #22
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002674:	9105      	str	r1, [sp, #20]
 8002676:	9902      	ldr	r1, [sp, #8]
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 8002678:	44c6      	add	lr, r8
 800267a:	445f      	add	r7, fp
 800267c:	44b8      	add	r8, r7
 800267e:	4672      	mov	r2, lr
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 8002680:	ea8c 0703 	eor.w	r7, ip, r3
 8002684:	460b      	mov	r3, r1
 8002686:	4433      	add	r3, r6
 8002688:	ea07 060e 	and.w	r6, r7, lr
 800268c:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8002690:	9a05      	ldr	r2, [sp, #20]
 8002692:	ea86 060c 	eor.w	r6, r6, ip
 8002696:	4413      	add	r3, r2
 8002698:	441e      	add	r6, r3
 800269a:	ea4f 3378 	mov.w	r3, r8, ror #13
 800269e:	ea83 03b8 	eor.w	r3, r3, r8, ror #2
 80026a2:	ea83 5bb8 	eor.w	fp, r3, r8, ror #22
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026a6:	9b07      	ldr	r3, [sp, #28]
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026a8:	f8cd e00c 	str.w	lr, [sp, #12]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026ac:	469a      	mov	sl, r3
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026ae:	9a03      	ldr	r2, [sp, #12]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026b2:	ea45 0908 	orr.w	r9, r5, r8
 80026b6:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80026ba:	9a03      	ldr	r2, [sp, #12]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026bc:	990e      	ldr	r1, [sp, #56]	; 0x38
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026be:	ea09 0904 	and.w	r9, r9, r4
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026c2:	449a      	add	sl, r3
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026c4:	ea05 0308 	and.w	r3, r5, r8
 80026c8:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80026cc:	ea49 0303 	orr.w	r3, r9, r3
 80026d0:	9a08      	ldr	r2, [sp, #32]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026d2:	ea4f 49f0 	mov.w	r9, r0, ror #19
 80026d6:	ea4f 4eb1 	mov.w	lr, r1, ror #18
 80026da:	ea89 4970 	eor.w	r9, r9, r0, ror #17
 80026de:	ea89 2990 	eor.w	r9, r9, r0, lsr #10
 80026e2:	ea8e 1ef1 	eor.w	lr, lr, r1, ror #7
 80026e6:	9018      	str	r0, [sp, #96]	; 0x60
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026e8:	4610      	mov	r0, r2
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026ea:	9a03      	ldr	r2, [sp, #12]
 80026ec:	ea8e 0ed1 	eor.w	lr, lr, r1, lsr #3
 80026f0:	44d6      	add	lr, sl
 80026f2:	4692      	mov	sl, r2
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026f4:	4437      	add	r7, r6
 80026f6:	9e01      	ldr	r6, [sp, #4]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80026f8:	9a00      	ldr	r2, [sp, #0]
 80026fa:	6db6      	ldr	r6, [r6, #88]	; 0x58
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80026fc:	445b      	add	r3, fp
 80026fe:	443b      	add	r3, r7
 8002700:	4438      	add	r0, r7
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8002702:	ea82 070a 	eor.w	r7, r2, sl
 8002706:	44b4      	add	ip, r6
 8002708:	44ce      	add	lr, r9
 800270a:	4007      	ands	r7, r0
 800270c:	ea4f 2bf0 	mov.w	fp, r0, ror #11
 8002710:	eb0c 090e 	add.w	r9, ip, lr
 8002714:	4057      	eors	r7, r2
 8002716:	ea8b 1bb0 	eor.w	fp, fp, r0, ror #6
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 800271a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800271c:	444f      	add	r7, r9
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 800271e:	ea8b 6c70 	eor.w	ip, fp, r0, ror #25
 8002722:	ea48 0a03 	orr.w	sl, r8, r3
 8002726:	ea4f 3673 	mov.w	r6, r3, ror #13
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 800272a:	9905      	ldr	r1, [sp, #20]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 800272c:	ea0a 0a05 	and.w	sl, sl, r5
 8002730:	44bc      	add	ip, r7
 8002732:	ea86 06b3 	eor.w	r6, r6, r3, ror #2
 8002736:	ea08 0703 	and.w	r7, r8, r3
 800273a:	ea4a 0707 	orr.w	r7, sl, r7
 800273e:	4464      	add	r4, ip
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 8002740:	ea4f 49b2 	mov.w	r9, r2, ror #18
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8002744:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
 8002748:	443e      	add	r6, r7
 800274a:	9402      	str	r4, [sp, #8]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 800274c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800274e:	9c05      	ldr	r4, [sp, #20]
 8002750:	ea89 19f2 	eor.w	r9, r9, r2, ror #7
 8002754:	ea4f 4af1 	mov.w	sl, r1, ror #19
 8002758:	ea89 09d2 	eor.w	r9, r9, r2, lsr #3
 800275c:	ea8a 4a71 	eor.w	sl, sl, r1, ror #17
 8002760:	44b9      	add	r9, r7
 8002762:	ea8a 2a94 	eor.w	sl, sl, r4, lsr #10
 8002766:	9f01      	ldr	r7, [sp, #4]
 8002768:	9c04      	ldr	r4, [sp, #16]
 800276a:	9903      	ldr	r1, [sp, #12]
 800276c:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 800276e:	44a1      	add	r9, r4
 8002770:	9a00      	ldr	r2, [sp, #0]
 8002772:	9c02      	ldr	r4, [sp, #8]
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 8002774:	44b4      	add	ip, r6
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 8002776:	ea81 0600 	eor.w	r6, r1, r0
 800277a:	44ca      	add	sl, r9
 800277c:	443a      	add	r2, r7
 800277e:	ea06 0704 	and.w	r7, r6, r4
 8002782:	404f      	eors	r7, r1
 8002784:	ea43 0b0c 	orr.w	fp, r3, ip
 8002788:	4452      	add	r2, sl
 800278a:	443a      	add	r2, r7
 800278c:	ea0b 0b08 	and.w	fp, fp, r8
 8002790:	ea03 070c 	and.w	r7, r3, ip
 8002794:	ea4f 26f4 	mov.w	r6, r4, ror #11
 8002798:	ea4b 0b07 	orr.w	fp, fp, r7
 800279c:	9f01      	ldr	r7, [sp, #4]
 800279e:	ea86 16b4 	eor.w	r6, r6, r4, ror #6
 80027a2:	ea86 6674 	eor.w	r6, r6, r4, ror #25
 80027a6:	3720      	adds	r7, #32
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 80027a8:	9c04      	ldr	r4, [sp, #16]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80027aa:	4432      	add	r2, r6
 80027ac:	9701      	str	r7, [sp, #4]
        P(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i + 0), K[i + 0]);
 80027ae:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80027b0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80027b2:	6434      	str	r4, [r6, #64]	; 0x40
 80027b4:	9710      	str	r7, [sp, #64]	; 0x40
        P(A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i + 1), K[i + 1]);
 80027b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027b8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80027ba:	6471      	str	r1, [r6, #68]	; 0x44
        P(A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i + 2), K[i + 2]);
 80027bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80027be:	9708      	str	r7, [sp, #32]
 80027c0:	64b1      	str	r1, [r6, #72]	; 0x48
        P(A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i + 3), K[i + 3]);
 80027c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80027c4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80027c6:	64f1      	str	r1, [r6, #76]	; 0x4c
        P(A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i + 4), K[i + 4]);
 80027c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80027ca:	970f      	str	r7, [sp, #60]	; 0x3c
 80027cc:	6531      	str	r1, [r6, #80]	; 0x50
 80027ce:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80027d0:	990a      	ldr	r1, [sp, #40]	; 0x28
        P(A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i + 5), K[i + 5]);
 80027d2:	9c05      	ldr	r4, [sp, #20]
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80027d4:	ea4f 397c 	mov.w	r9, ip, ror #13
 80027d8:	9706      	str	r7, [sp, #24]
 80027da:	9107      	str	r1, [sp, #28]
 80027dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80027de:	9912      	ldr	r1, [sp, #72]	; 0x48
 80027e0:	ea89 09bc 	eor.w	r9, r9, ip, ror #2
        P(A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i + 6), K[i + 6]);
 80027e4:	e9c6 4e15 	strd	r4, lr, [r6, #84]	; 0x54
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80027e8:	ea89 59bc 	eor.w	r9, r9, ip, ror #22
 80027ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80027ee:	9711      	str	r7, [sp, #68]	; 0x44
 80027f0:	911a      	str	r1, [sp, #104]	; 0x68
    for (i = 16; i < 64; i += 8)
 80027f2:	9f01      	ldr	r7, [sp, #4]
 80027f4:	4919      	ldr	r1, [pc, #100]	; (800285c <nbedtls_internal_sha256_process+0x9c4>)
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 80027f6:	44cb      	add	fp, r9
 80027f8:	940e      	str	r4, [sp, #56]	; 0x38
 80027fa:	4415      	add	r5, r2
 80027fc:	f106 0420 	add.w	r4, r6, #32
 8002800:	445a      	add	r2, fp
    for (i = 16; i < 64; i += 8)
 8002802:	42b9      	cmp	r1, r7
        P(A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i + 7), K[i + 7]);
 8002804:	f8c6 a05c 	str.w	sl, [r6, #92]	; 0x5c
 8002808:	9419      	str	r4, [sp, #100]	; 0x64
 800280a:	9200      	str	r2, [sp, #0]
    for (i = 16; i < 64; i += 8)
 800280c:	f47f add6 	bne.w	80023bc <nbedtls_internal_sha256_process+0x524>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for (i = 0; i < 8; i++)
        ctx->state[i] += A[i];
 8002810:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8002812:	6927      	ldr	r7, [r4, #16]
 8002814:	e9d4 1602 	ldrd	r1, r6, [r4, #8]
 8002818:	4466      	add	r6, ip
 800281a:	eb03 0c07 	add.w	ip, r3, r7
 800281e:	4627      	mov	r7, r4
 8002820:	440a      	add	r2, r1
 8002822:	69a3      	ldr	r3, [r4, #24]
 8002824:	6961      	ldr	r1, [r4, #20]
 8002826:	4696      	mov	lr, r2
 8002828:	69e4      	ldr	r4, [r4, #28]
 800282a:	9a02      	ldr	r2, [sp, #8]
 800282c:	441d      	add	r5, r3
 800282e:	4422      	add	r2, r4
 8002830:	4614      	mov	r4, r2
 8002832:	463a      	mov	r2, r7
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 8002838:	4418      	add	r0, r3
 800283a:	e9c2 4007 	strd	r4, r0, [r2, #28]

    return (0);
}
 800283e:	2000      	movs	r0, #0
        ctx->state[i] += A[i];
 8002840:	9b03      	ldr	r3, [sp, #12]
 8002842:	4441      	add	r1, r8
 8002844:	441f      	add	r7, r3
 8002846:	e9c2 e602 	strd	lr, r6, [r2, #8]
 800284a:	e9c2 1505 	strd	r1, r5, [r2, #20]
 800284e:	f8c2 c010 	str.w	ip, [r2, #16]
 8002852:	6257      	str	r7, [r2, #36]	; 0x24
}
 8002854:	b065      	add	sp, #404	; 0x194
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285a:	bf00      	nop
 800285c:	0800379c 	.word	0x0800379c

08002860 <nbedtls_sha256_update_ret>:
    uint32_t left;

    SHA256_VALIDATE_RET(ctx != NULL);
    SHA256_VALIDATE_RET(ilen == 0 || input != NULL);

    if (ilen == 0)
 8002860:	2a00      	cmp	r2, #0
 8002862:	d038      	beq.n	80028d6 <nbedtls_sha256_update_ret+0x76>
{
 8002864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        return (0);

    left = ctx->total[0] & 0x3F;
 8002868:	6805      	ldr	r5, [r0, #0]
 800286a:	4614      	mov	r4, r2
 800286c:	18aa      	adds	r2, r5, r2
 800286e:	4607      	mov	r7, r0
 8002870:	460e      	mov	r6, r1
    fill = 64 - left;

    ctx->total[0] += (uint32_t)ilen;
 8002872:	6002      	str	r2, [r0, #0]
    left = ctx->total[0] & 0x3F;
 8002874:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    ctx->total[0] &= 0xFFFFFFFF;

    if (ctx->total[0] < (uint32_t)ilen)
 8002878:	d302      	bcc.n	8002880 <nbedtls_sha256_update_ret+0x20>
        ctx->total[1]++;
 800287a:	6843      	ldr	r3, [r0, #4]
 800287c:	3301      	adds	r3, #1
 800287e:	6043      	str	r3, [r0, #4]

    if (left && ilen >= fill)
 8002880:	b975      	cbnz	r5, 80028a0 <nbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen -= fill;
        left = 0;
    }

    while (ilen >= 64)
 8002882:	2c3f      	cmp	r4, #63	; 0x3f
 8002884:	d802      	bhi.n	800288c <nbedtls_sha256_update_ret+0x2c>
 8002886:	e028      	b.n	80028da <nbedtls_sha256_update_ret+0x7a>
 8002888:	2c3f      	cmp	r4, #63	; 0x3f
 800288a:	d920      	bls.n	80028ce <nbedtls_sha256_update_ret+0x6e>
    {
        if ((ret = nbedtls_internal_sha256_process(ctx, input)) != 0)
 800288c:	4631      	mov	r1, r6
 800288e:	4638      	mov	r0, r7
 8002890:	f7ff fb02 	bl	8001e98 <nbedtls_internal_sha256_process>
            return (ret);

        input += 64;
        ilen -= 64;
 8002894:	3c40      	subs	r4, #64	; 0x40
        input += 64;
 8002896:	3640      	adds	r6, #64	; 0x40
        if ((ret = nbedtls_internal_sha256_process(ctx, input)) != 0)
 8002898:	2800      	cmp	r0, #0
 800289a:	d0f5      	beq.n	8002888 <nbedtls_sha256_update_ret+0x28>

    if (ilen > 0)
        memcpy((void *)(ctx->buffer + left), input, ilen);

    return (0);
}
 800289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fill = 64 - left;
 80028a0:	f1c5 0840 	rsb	r8, r5, #64	; 0x40
    if (left && ilen >= fill)
 80028a4:	4544      	cmp	r4, r8
 80028a6:	d3ec      	bcc.n	8002882 <nbedtls_sha256_update_ret+0x22>
        memcpy((void *)(ctx->buffer + left), input, fill);
 80028a8:	f107 0928 	add.w	r9, r7, #40	; 0x28
 80028ac:	4631      	mov	r1, r6
 80028ae:	4642      	mov	r2, r8
 80028b0:	eb09 0005 	add.w	r0, r9, r5
 80028b4:	f000 faa8 	bl	8002e08 <memcpy>
        if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 80028b8:	4649      	mov	r1, r9
 80028ba:	4638      	mov	r0, r7
 80028bc:	f7ff faec 	bl	8001e98 <nbedtls_internal_sha256_process>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d1eb      	bne.n	800289c <nbedtls_sha256_update_ret+0x3c>
 80028c4:	442c      	add	r4, r5
        ilen -= fill;
 80028c6:	3c40      	subs	r4, #64	; 0x40
        left = 0;
 80028c8:	4605      	mov	r5, r0
        input += fill;
 80028ca:	4446      	add	r6, r8
 80028cc:	e7dc      	b.n	8002888 <nbedtls_sha256_update_ret+0x28>
    if (ilen > 0)
 80028ce:	b924      	cbnz	r4, 80028da <nbedtls_sha256_update_ret+0x7a>
    return (0);
 80028d0:	2000      	movs	r0, #0
}
 80028d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (0);
 80028d6:	2000      	movs	r0, #0
}
 80028d8:	4770      	bx	lr
        memcpy((void *)(ctx->buffer + left), input, ilen);
 80028da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028de:	4622      	mov	r2, r4
 80028e0:	4631      	mov	r1, r6
 80028e2:	4428      	add	r0, r5
 80028e4:	f000 fa90 	bl	8002e08 <memcpy>
 80028e8:	e7f2      	b.n	80028d0 <nbedtls_sha256_update_ret+0x70>
 80028ea:	bf00      	nop

080028ec <nbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int nbedtls_sha256_finish_ret(nbedtls_sha256_context *ctx,
                              unsigned char output[32])
{
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80028f0:	2080      	movs	r0, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 80028f2:	6822      	ldr	r2, [r4, #0]

    if (used <= 56)
    {
        /* Enough room for padding + length in current block */
        memset(ctx->buffer + used, 0, 56 - used);
 80028f4:	f104 0628 	add.w	r6, r4, #40	; 0x28
    used = ctx->total[0] & 0x3F;
 80028f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 80028fc:	18a3      	adds	r3, r4, r2
 80028fe:	3201      	adds	r2, #1
    if (used <= 56)
 8002900:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 8002902:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
{
 8002906:	460d      	mov	r5, r1
        memset(ctx->buffer + used, 0, 56 - used);
 8002908:	eb06 0002 	add.w	r0, r6, r2
    if (used <= 56)
 800290c:	d861      	bhi.n	80029d2 <nbedtls_sha256_finish_ret+0xe6>
        memset(ctx->buffer + used, 0, 56 - used);
 800290e:	2100      	movs	r1, #0
 8002910:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8002914:	f000 fa86 	bl	8002e24 <memset>
    }

    /*
     * Add message length
     */
    high = (ctx->total[0] >> 29) | (ctx->total[1] << 3);
 8002918:	e9d4 3100 	ldrd	r3, r1, [r4]
 800291c:	0f5a      	lsrs	r2, r3, #29
 800291e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low = (ctx->total[0] << 3);
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	ba1b      	rev	r3, r3
 8002926:	ba12      	rev	r2, r2

    PUT_UINT32_BE(high, ctx->buffer, 56);
    PUT_UINT32_BE(low, ctx->buffer, 60);

    if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 8002928:	4631      	mov	r1, r6
 800292a:	4620      	mov	r0, r4
    PUT_UINT32_BE(high, ctx->buffer, 56);
 800292c:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
    if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 8002930:	f7ff fab2 	bl	8001e98 <nbedtls_internal_sha256_process>
 8002934:	2800      	cmp	r0, #0
 8002936:	d14b      	bne.n	80029d0 <nbedtls_sha256_finish_ret+0xe4>
        return (ret);

    /*
     * Output final state
     */
    PUT_UINT32_BE(ctx->state[0], output, 0);
 8002938:	7ae3      	ldrb	r3, [r4, #11]
 800293a:	702b      	strb	r3, [r5, #0]
 800293c:	8963      	ldrh	r3, [r4, #10]
 800293e:	706b      	strb	r3, [r5, #1]
 8002940:	68a3      	ldr	r3, [r4, #8]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	70ab      	strb	r3, [r5, #2]
 8002946:	68a3      	ldr	r3, [r4, #8]
 8002948:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE(ctx->state[1], output, 4);
 800294a:	7be3      	ldrb	r3, [r4, #15]
 800294c:	712b      	strb	r3, [r5, #4]
 800294e:	89e3      	ldrh	r3, [r4, #14]
 8002950:	716b      	strb	r3, [r5, #5]
 8002952:	68e3      	ldr	r3, [r4, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	71ab      	strb	r3, [r5, #6]
 8002958:	68e3      	ldr	r3, [r4, #12]
 800295a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE(ctx->state[2], output, 8);
 800295c:	7ce3      	ldrb	r3, [r4, #19]
 800295e:	722b      	strb	r3, [r5, #8]
 8002960:	8a63      	ldrh	r3, [r4, #18]
 8002962:	726b      	strb	r3, [r5, #9]
 8002964:	6923      	ldr	r3, [r4, #16]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	72ab      	strb	r3, [r5, #10]
 800296a:	6923      	ldr	r3, [r4, #16]
 800296c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE(ctx->state[3], output, 12);
 800296e:	7de3      	ldrb	r3, [r4, #23]
 8002970:	732b      	strb	r3, [r5, #12]
 8002972:	8ae3      	ldrh	r3, [r4, #22]
 8002974:	736b      	strb	r3, [r5, #13]
 8002976:	6963      	ldr	r3, [r4, #20]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	73ab      	strb	r3, [r5, #14]
 800297c:	6963      	ldr	r3, [r4, #20]
 800297e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE(ctx->state[4], output, 16);
 8002980:	7ee3      	ldrb	r3, [r4, #27]
 8002982:	742b      	strb	r3, [r5, #16]
 8002984:	8b63      	ldrh	r3, [r4, #26]
 8002986:	746b      	strb	r3, [r5, #17]
 8002988:	69a3      	ldr	r3, [r4, #24]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	74ab      	strb	r3, [r5, #18]
 800298e:	69a3      	ldr	r3, [r4, #24]
 8002990:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE(ctx->state[5], output, 20);
 8002992:	7fe3      	ldrb	r3, [r4, #31]
 8002994:	752b      	strb	r3, [r5, #20]
 8002996:	8be3      	ldrh	r3, [r4, #30]
 8002998:	756b      	strb	r3, [r5, #21]
 800299a:	69e3      	ldr	r3, [r4, #28]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	75ab      	strb	r3, [r5, #22]
 80029a0:	69e3      	ldr	r3, [r4, #28]
 80029a2:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE(ctx->state[6], output, 24);
 80029a4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80029a8:	762b      	strb	r3, [r5, #24]
 80029aa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80029ac:	766b      	strb	r3, [r5, #25]
 80029ae:	6a23      	ldr	r3, [r4, #32]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	76ab      	strb	r3, [r5, #26]
 80029b4:	6a23      	ldr	r3, [r4, #32]
 80029b6:	76eb      	strb	r3, [r5, #27]

    if (ctx->is224 == 0)
 80029b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80029ba:	b94b      	cbnz	r3, 80029d0 <nbedtls_sha256_finish_ret+0xe4>
        PUT_UINT32_BE(ctx->state[7], output, 28);
 80029bc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80029c0:	772b      	strb	r3, [r5, #28]
 80029c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80029c4:	776b      	strb	r3, [r5, #29]
 80029c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	77ab      	strb	r3, [r5, #30]
 80029cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ce:	77eb      	strb	r3, [r5, #31]

    return (0);
}
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
        memset(ctx->buffer + used, 0, 64 - used);
 80029d2:	2100      	movs	r1, #0
 80029d4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 80029d8:	f000 fa24 	bl	8002e24 <memset>
        if ((ret = nbedtls_internal_sha256_process(ctx, ctx->buffer)) != 0)
 80029dc:	4631      	mov	r1, r6
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff fa5a 	bl	8001e98 <nbedtls_internal_sha256_process>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d1f3      	bne.n	80029d0 <nbedtls_sha256_finish_ret+0xe4>
        memset(ctx->buffer, 0, 56);
 80029e8:	4601      	mov	r1, r0
 80029ea:	2238      	movs	r2, #56	; 0x38
 80029ec:	4630      	mov	r0, r6
 80029ee:	f000 fa19 	bl	8002e24 <memset>
 80029f2:	e791      	b.n	8002918 <nbedtls_sha256_finish_ret+0x2c>

080029f4 <nbedtls_sha256_ret>:
 */
int nbedtls_sha256_ret(const unsigned char *input,
                       size_t ilen,
                       unsigned char output[32],
                       int is224)
{
 80029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f6:	461c      	mov	r4, r3
 80029f8:	b09d      	sub	sp, #116	; 0x74
 80029fa:	4605      	mov	r5, r0

    SHA256_VALIDATE_RET(is224 == 0 || is224 == 1);
    SHA256_VALIDATE_RET(ilen == 0 || input != NULL);
    SHA256_VALIDATE_RET((unsigned char *)output != NULL);

    nbedtls_sha256_init(&ctx);
 80029fc:	a801      	add	r0, sp, #4
{
 80029fe:	460e      	mov	r6, r1
 8002a00:	4617      	mov	r7, r2
    nbedtls_sha256_init(&ctx);
 8002a02:	f7ff f9ef 	bl	8001de4 <nbedtls_sha256_init>

    if ((ret = nbedtls_sha256_starts_ret(&ctx, is224)) != 0)
 8002a06:	4621      	mov	r1, r4
 8002a08:	a801      	add	r0, sp, #4
 8002a0a:	f7ff f9f5 	bl	8001df8 <nbedtls_sha256_starts_ret>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	b128      	cbz	r0, 8002a1e <nbedtls_sha256_ret+0x2a>

    if ((ret = nbedtls_sha256_finish_ret(&ctx, output)) != 0)
        goto exit;

exit:
    nbedtls_sha256_free(&ctx);
 8002a12:	a801      	add	r0, sp, #4
 8002a14:	f7ff f9ea 	bl	8001dec <nbedtls_sha256_free>

    return (ret);
}
 8002a18:	4620      	mov	r0, r4
 8002a1a:	b01d      	add	sp, #116	; 0x74
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((ret = nbedtls_sha256_update_ret(&ctx, input, ilen)) != 0)
 8002a1e:	4632      	mov	r2, r6
 8002a20:	4629      	mov	r1, r5
 8002a22:	a801      	add	r0, sp, #4
 8002a24:	f7ff ff1c 	bl	8002860 <nbedtls_sha256_update_ret>
 8002a28:	4604      	mov	r4, r0
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d1f1      	bne.n	8002a12 <nbedtls_sha256_ret+0x1e>
    if ((ret = nbedtls_sha256_finish_ret(&ctx, output)) != 0)
 8002a2e:	4639      	mov	r1, r7
 8002a30:	a801      	add	r0, sp, #4
 8002a32:	f7ff ff5b 	bl	80028ec <nbedtls_sha256_finish_ret>
 8002a36:	4604      	mov	r4, r0
    nbedtls_sha256_free(&ctx);
 8002a38:	a801      	add	r0, sp, #4
 8002a3a:	f7ff f9d7 	bl	8001dec <nbedtls_sha256_free>
}
 8002a3e:	4620      	mov	r0, r4
 8002a40:	b01d      	add	sp, #116	; 0x74
 8002a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a44 <crypto_hash>:
    nbedtls_sha256_ret(input, ilen, output, is224);
}
#endif

int crypto_hash(unsigned char* out, const unsigned char* in, unsigned long long inlen)
{
 8002a44:	4613      	mov	r3, r2
 8002a46:	b410      	push	{r4}
 8002a48:	4604      	mov	r4, r0
    return nbedtls_sha256_ret(in, inlen, out, 0);
 8002a4a:	4608      	mov	r0, r1
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	4619      	mov	r1, r3
}
 8002a50:	bc10      	pop	{r4}
    return nbedtls_sha256_ret(in, inlen, out, 0);
 8002a52:	2300      	movs	r3, #0
 8002a54:	f7ff bfce 	b.w	80029f4 <nbedtls_sha256_ret>

08002a58 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8002a58:	b538      	push	{r3, r4, r5, lr}
	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
	lwc_printf("Memory usage: ");
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002a5a:	f44f 7580 	mov.w	r5, #256	; 0x100
	get_memory_usage();
 8002a5e:	f000 f951 	bl	8002d04 <get_memory_usage>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8002a62:	4c15      	ldr	r4, [pc, #84]	; (8002ab8 <genkat_benchmark_hash_aead+0x60>)
	tick_msr_start();
 8002a64:	f000 f8fa 	bl	8002c5c <tick_msr_start>
	tick_msr_end();
 8002a68:	f000 f910 	bl	8002c8c <tick_msr_end>
	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8002a6c:	4a13      	ldr	r2, [pc, #76]	; (8002abc <genkat_benchmark_hash_aead+0x64>)
 8002a6e:	4914      	ldr	r1, [pc, #80]	; (8002ac0 <genkat_benchmark_hash_aead+0x68>)
 8002a70:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <genkat_benchmark_hash_aead+0x6c>)
 8002a72:	f000 f929 	bl	8002cc8 <lwc_printf>
	lwc_printf("Memory usage: ");
 8002a76:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <genkat_benchmark_hash_aead+0x70>)
 8002a78:	f000 f926 	bl	8002cc8 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8002a7c:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 8002a80:	4812      	ldr	r0, [pc, #72]	; (8002acc <genkat_benchmark_hash_aead+0x74>)
 8002a82:	f000 f921 	bl	8002cc8 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002a86:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
 8002a8a:	6a21      	ldr	r1, [r4, #32]
 8002a8c:	4810      	ldr	r0, [pc, #64]	; (8002ad0 <genkat_benchmark_hash_aead+0x78>)
 8002a8e:	f000 f91b 	bl	8002cc8 <lwc_printf>
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002a92:	462a      	mov	r2, r5
 8002a94:	2100      	movs	r1, #0
 8002a96:	480f      	ldr	r0, [pc, #60]	; (8002ad4 <genkat_benchmark_hash_aead+0x7c>)
 8002a98:	f000 f9c4 	bl	8002e24 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8002a9c:	462a      	mov	r2, r5
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <genkat_benchmark_hash_aead+0x80>)
 8002aa2:	f000 f9bf 	bl	8002e24 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8002aa6:	462a      	mov	r2, r5
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	480c      	ldr	r0, [pc, #48]	; (8002adc <genkat_benchmark_hash_aead+0x84>)
 8002aac:	f000 f9ba 	bl	8002e24 <memset>
#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
}
 8002ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = hash_generate_test_vectors();
 8002ab4:	f000 b814 	b.w	8002ae0 <hash_generate_test_vectors>
 8002ab8:	20000638 	.word	0x20000638
 8002abc:	080037dc 	.word	0x080037dc
 8002ac0:	0800385c 	.word	0x0800385c
 8002ac4:	080038dc 	.word	0x080038dc
 8002ac8:	08003928 	.word	0x08003928
 8002acc:	08003938 	.word	0x08003938
 8002ad0:	08003960 	.word	0x08003960
 8002ad4:	2000009c 	.word	0x2000009c
 8002ad8:	2000019c 	.word	0x2000019c
 8002adc:	2000029c 	.word	0x2000029c

08002ae0 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;

	init_buffer(msg, sizeof(msg));
 8002ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aec:	2300      	movs	r3, #0
 8002aee:	a808      	add	r0, sp, #32
 8002af0:	f000 f89a 	bl	8002c28 <init_buffer>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002af4:	2400      	movs	r4, #0
 8002af6:	2500      	movs	r5, #0
 8002af8:	4f35      	ldr	r7, [pc, #212]	; (8002bd0 <hash_generate_test_vectors+0xf0>)
 8002afa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002be0 <hash_generate_test_vectors+0x100>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8002afe:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002be4 <hash_generate_test_vectors+0x104>
		tick_msr_end();

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;

		if(ret_val == 0) {
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002b02:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002be8 <hash_generate_test_vectors+0x108>
 8002b06:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8002bec <hash_generate_test_vectors+0x10c>
		lwc_printf("msg_len:%6d ", (int)mlen);
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	f000 f8db 	bl	8002cc8 <lwc_printf>
		tick_msr_start();
 8002b12:	f000 f8a3 	bl	8002c5c <tick_msr_start>
		ret_val = crypto_hash(digest, msg, mlen);
 8002b16:	4622      	mov	r2, r4
 8002b18:	462b      	mov	r3, r5
 8002b1a:	a908      	add	r1, sp, #32
 8002b1c:	4668      	mov	r0, sp
 8002b1e:	f7ff ff91 	bl	8002a44 <crypto_hash>
 8002b22:	4606      	mov	r6, r0
		tick_msr_end();
 8002b24:	f000 f8b2 	bl	8002c8c <tick_msr_end>
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <hash_generate_test_vectors+0xf4>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
		if(ret_val == 0) {
 8002b36:	2e00      	cmp	r6, #0
 8002b38:	d147      	bne.n	8002bca <hash_generate_test_vectors+0xea>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	bfb8      	it	lt
 8002b40:	f102 0c0f 	addlt.w	ip, r2, #15
 8002b44:	4611      	mov	r1, r2
 8002b46:	f8d9 3000 	ldr.w	r3, [r9]
 8002b4a:	4658      	mov	r0, fp
 8002b4c:	ea4f 122c 	mov.w	r2, ip, asr #4
 8002b50:	f000 f8ba 	bl	8002cc8 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8002b54:	ea54 0305 	orrs.w	r3, r4, r5
 8002b58:	d031      	beq.n	8002bbe <hash_generate_test_vectors+0xde>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b60:	1924      	adds	r4, r4, r4
 8002b62:	416d      	adcs	r5, r5
 8002b64:	42ab      	cmp	r3, r5
 8002b66:	bf08      	it	eq
 8002b68:	42a2      	cmpeq	r2, r4
 8002b6a:	d2ce      	bcs.n	8002b0a <hash_generate_test_vectors+0x2a>
			mlen = 4;
		}
	}//end of for loop


	ticks_res_pos = 0;
 8002b6c:	2300      	movs	r3, #0
	aead_hash_print_res("HASH");
 8002b6e:	481a      	ldr	r0, [pc, #104]	; (8002bd8 <hash_generate_test_vectors+0xf8>)
	ticks_res_pos = 0;
 8002b70:	603b      	str	r3, [r7, #0]
	aead_hash_print_res("HASH");
 8002b72:	f000 f83f 	bl	8002bf4 <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 8002b76:	4819      	ldr	r0, [pc, #100]	; (8002bdc <hash_generate_test_vectors+0xfc>)
 8002b78:	f000 f8a6 	bl	8002cc8 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002b7c:	2400      	movs	r4, #0
 8002b7e:	2500      	movs	r5, #0
 8002b80:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8002b84:	f04f 0900 	mov.w	r9, #0

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 8002b88:	f8df b064 	ldr.w	fp, [pc, #100]	; 8002bf0 <hash_generate_test_vectors+0x110>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4621      	mov	r1, r4
 8002b90:	f103 0c01 	add.w	ip, r3, #1
 8002b94:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 8002b98:	4658      	mov	r0, fp
 8002b9a:	f8c7 c000 	str.w	ip, [r7]
 8002b9e:	f000 f893 	bl	8002cc8 <lwc_printf>

		if(mlen==0){
 8002ba2:	ea54 0305 	orrs.w	r3, r4, r5
 8002ba6:	d00d      	beq.n	8002bc4 <hash_generate_test_vectors+0xe4>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002ba8:	1924      	adds	r4, r4, r4
 8002baa:	416d      	adcs	r5, r5
 8002bac:	45a9      	cmp	r9, r5
 8002bae:	bf08      	it	eq
 8002bb0:	45a0      	cmpeq	r8, r4
 8002bb2:	d2eb      	bcs.n	8002b8c <hash_generate_test_vectors+0xac>
			mlen = 4;
		}
	}

	return ret_val;
}
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 8002bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002bbe:	2408      	movs	r4, #8
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	e7a2      	b.n	8002b0a <hash_generate_test_vectors+0x2a>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002bc4:	2408      	movs	r4, #8
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	e7e0      	b.n	8002b8c <hash_generate_test_vectors+0xac>
			ret_val = KAT_CRYPTO_FAILURE;
 8002bca:	f06f 0603 	mvn.w	r6, #3
 8002bce:	e7cd      	b.n	8002b6c <hash_generate_test_vectors+0x8c>
 8002bd0:	2000039c 	.word	0x2000039c
 8002bd4:	20000094 	.word	0x20000094
 8002bd8:	080039b8 	.word	0x080039b8
 8002bdc:	080039c0 	.word	0x080039c0
 8002be0:	2000029c 	.word	0x2000029c
 8002be4:	0800398c 	.word	0x0800398c
 8002be8:	20000098 	.word	0x20000098
 8002bec:	0800399c 	.word	0x0800399c
 8002bf0:	080039d0 	.word	0x080039d0

08002bf4 <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 8002bf4:	b510      	push	{r4, lr}
 8002bf6:	4601      	mov	r1, r0
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <aead_hash_print_res+0x20>)
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <aead_hash_print_res+0x24>)
 8002bfc:	4807      	ldr	r0, [pc, #28]	; (8002c1c <aead_hash_print_res+0x28>)
 8002bfe:	f000 f863 	bl	8002cc8 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
}
 8002c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002c06:	4906      	ldr	r1, [pc, #24]	; (8002c20 <aead_hash_print_res+0x2c>)
 8002c08:	4806      	ldr	r0, [pc, #24]	; (8002c24 <aead_hash_print_res+0x30>)
 8002c0a:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
 8002c0e:	6a09      	ldr	r1, [r1, #32]
 8002c10:	f000 b85a 	b.w	8002cc8 <lwc_printf>
 8002c14:	080037dc 	.word	0x080037dc
 8002c18:	0800385c 	.word	0x0800385c
 8002c1c:	080039dc 	.word	0x080039dc
 8002c20:	20000638 	.word	0x20000638
 8002c24:	08003a1c 	.word	0x08003a1c

08002c28 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8002c28:	b430      	push	{r4, r5}
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	461d      	mov	r5, r3
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002c2e:	ea54 0305 	orrs.w	r3, r4, r5
 8002c32:	d009      	beq.n	8002c48 <init_buffer+0x20>
 8002c34:	1e41      	subs	r1, r0, #1
 8002c36:	460b      	mov	r3, r1
 8002c38:	4411      	add	r1, r2
 8002c3a:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
 8002c3e:	18c2      	adds	r2, r0, r3
		buffer[i] = (unsigned char) i + '0';
 8002c40:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002c44:	428b      	cmp	r3, r1
 8002c46:	d1fa      	bne.n	8002c3e <init_buffer+0x16>
	}
}
 8002c48:	bc30      	pop	{r4, r5}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 8002c4c:	4a02      	ldr	r2, [pc, #8]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	200003a0 	.word	0x200003a0

08002c5c <tick_msr_start>:

void tick_msr_start(void) {

	tim_per_elp_cnt = 0;
 8002c5c:	2300      	movs	r3, #0
void tick_msr_start(void) {
 8002c5e:	b510      	push	{r4, lr}
	htim6.Instance->CNT = 0;
 8002c60:	4c07      	ldr	r4, [pc, #28]	; (8002c80 <tick_msr_start+0x24>)
	tim_per_elp_cnt = 0;
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <tick_msr_start+0x28>)
	htim6.Instance->CNT = 0;
 8002c64:	6822      	ldr	r2, [r4, #0]
	tim_per_elp_cnt = 0;
 8002c66:	600b      	str	r3, [r1, #0]
	htim6.Instance->CNT = 0;
 8002c68:	6253      	str	r3, [r2, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8002c6a:	f7fd fcfd 	bl	8000668 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <tick_msr_start+0x2c>)
	HAL_TIM_Base_Start_IT(&htim6);
 8002c72:	4620      	mov	r0, r4
}
 8002c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gb_ms_ticks = HAL_GetTick();
 8002c78:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8002c7a:	f7fe bbf1 	b.w	8001460 <HAL_TIM_Base_Start_IT>
 8002c7e:	bf00      	nop
 8002c80:	200005ec 	.word	0x200005ec
 8002c84:	200003a0 	.word	0x200003a0
 8002c88:	20000098 	.word	0x20000098

08002c8c <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8002c8c:	b538      	push	{r3, r4, r5, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 8002c8e:	4d0a      	ldr	r5, [pc, #40]	; (8002cb8 <tick_msr_end+0x2c>)
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8002c90:	4c0a      	ldr	r4, [pc, #40]	; (8002cbc <tick_msr_end+0x30>)
	HAL_TIM_Base_Stop_IT(&htim6);
 8002c92:	4628      	mov	r0, r5
 8002c94:	f7fe fc3e 	bl	8001514 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <tick_msr_end+0x34>)
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ca4:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8002ca6:	f7fd fcdf 	bl	8000668 <HAL_GetTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <tick_msr_end+0x38>)
	return gb_tick_cnt;
}
 8002cae:	6820      	ldr	r0, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8002cb0:	6811      	ldr	r1, [r2, #0]
 8002cb2:	1a5b      	subs	r3, r3, r1
 8002cb4:	6013      	str	r3, [r2, #0]
}
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	200005ec 	.word	0x200005ec
 8002cbc:	20000094 	.word	0x20000094
 8002cc0:	200003a0 	.word	0x200003a0
 8002cc4:	20000098 	.word	0x20000098

08002cc8 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8002cc8:	b40f      	push	{r0, r1, r2, r3}
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	aa04      	add	r2, sp, #16

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
	vsprintf(dbg_out_buf, format, args);
 8002cd0:	4c0a      	ldr	r4, [pc, #40]	; (8002cfc <lwc_printf+0x34>)
void lwc_printf(const char *format, ...) {
 8002cd2:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(dbg_out_buf, format, args);
 8002cd6:	4620      	mov	r0, r4
	va_start(args, format);
 8002cd8:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 8002cda:	f000 f8c1 	bl	8002e60 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7fd fa96 	bl	8000210 <strlen>
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	b282      	uxth	r2, r0
 8002ce8:	2364      	movs	r3, #100	; 0x64
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <lwc_printf+0x38>)
 8002cec:	f7fe feb1 	bl	8001a52 <HAL_UART_Transmit>
}
 8002cf0:	b002      	add	sp, #8
 8002cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf6:	b004      	add	sp, #16
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	200003a4 	.word	0x200003a4
 8002d00:	200005ac 	.word	0x200005ac

08002d04 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8002d08:	2234      	movs	r2, #52	; 0x34
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4822      	ldr	r0, [pc, #136]	; (8002d98 <get_memory_usage+0x94>)
 8002d0e:	f000 f889 	bl	8002e24 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <get_memory_usage+0x94>)
 8002d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d18:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	; (8002d98 <get_memory_usage+0x94>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <get_memory_usage+0x94>)
 8002d20:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <get_memory_usage+0x98>)
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <get_memory_usage+0x94>)
 8002d26:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <get_memory_usage+0x9c>)
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <get_memory_usage+0x94>)
 8002d2c:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <get_memory_usage+0xa0>)
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <get_memory_usage+0x94>)
 8002d32:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <get_memory_usage+0xa4>)
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <get_memory_usage+0x94>)
 8002d38:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <get_memory_usage+0xa8>)
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <get_memory_usage+0x94>)
 8002d3e:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <get_memory_usage+0xac>)
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <get_memory_usage+0x94>)
 8002d44:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <get_memory_usage+0x94>)
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <get_memory_usage+0x94>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <get_memory_usage+0x94>)
 8002d52:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <get_memory_usage+0x94>)
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <get_memory_usage+0x94>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <get_memory_usage+0x94>)
 8002d60:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <get_memory_usage+0x94>)
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <get_memory_usage+0x94>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <get_memory_usage+0x94>)
 8002d6e:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <get_memory_usage+0x94>)
 8002d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <get_memory_usage+0x94>)
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	4413      	add	r3, r2
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <get_memory_usage+0x94>)
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <get_memory_usage+0x94>)
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <get_memory_usage+0x94>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	441a      	add	r2, r3
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <get_memory_usage+0x94>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	4a02      	ldr	r2, [pc, #8]	; (8002d98 <get_memory_usage+0x94>)
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000638 	.word	0x20000638
 8002d9c:	080036a4 	.word	0x080036a4
 8002da0:	20000074 	.word	0x20000074
 8002da4:	2000067c 	.word	0x2000067c
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000074 	.word	0x20000074
 8002db0:	08003a80 	.word	0x08003a80

08002db4 <__errno>:
 8002db4:	4b01      	ldr	r3, [pc, #4]	; (8002dbc <__errno+0x8>)
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000010 	.word	0x20000010

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4d0c      	ldr	r5, [pc, #48]	; (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4c0d      	ldr	r4, [pc, #52]	; (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	f000 fc5c 	bl	800368c <_init>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	4d0a      	ldr	r5, [pc, #40]	; (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4c0a      	ldr	r4, [pc, #40]	; (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08003a78 	.word	0x08003a78
 8002dfc:	08003a78 	.word	0x08003a78
 8002e00:	08003a78 	.word	0x08003a78
 8002e04:	08003a7c 	.word	0x08003a7c

08002e08 <memcpy>:
 8002e08:	440a      	add	r2, r1
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e10:	d100      	bne.n	8002e14 <memcpy+0xc>
 8002e12:	4770      	bx	lr
 8002e14:	b510      	push	{r4, lr}
 8002e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e1a:	4291      	cmp	r1, r2
 8002e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e20:	d1f9      	bne.n	8002e16 <memcpy+0xe>
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <memset>:
 8002e24:	4603      	mov	r3, r0
 8002e26:	4402      	add	r2, r0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <memset+0xa>
 8002e2c:	4770      	bx	lr
 8002e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e32:	e7f9      	b.n	8002e28 <memset+0x4>

08002e34 <_vsiprintf_r>:
 8002e34:	b500      	push	{lr}
 8002e36:	b09b      	sub	sp, #108	; 0x6c
 8002e38:	9100      	str	r1, [sp, #0]
 8002e3a:	9104      	str	r1, [sp, #16]
 8002e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e40:	9105      	str	r1, [sp, #20]
 8002e42:	9102      	str	r1, [sp, #8]
 8002e44:	4905      	ldr	r1, [pc, #20]	; (8002e5c <_vsiprintf_r+0x28>)
 8002e46:	9103      	str	r1, [sp, #12]
 8002e48:	4669      	mov	r1, sp
 8002e4a:	f000 f86f 	bl	8002f2c <_svfiprintf_r>
 8002e4e:	2200      	movs	r2, #0
 8002e50:	9b00      	ldr	r3, [sp, #0]
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	b01b      	add	sp, #108	; 0x6c
 8002e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e5a:	bf00      	nop
 8002e5c:	ffff0208 	.word	0xffff0208

08002e60 <vsiprintf>:
 8002e60:	4613      	mov	r3, r2
 8002e62:	460a      	mov	r2, r1
 8002e64:	4601      	mov	r1, r0
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <vsiprintf+0x10>)
 8002e68:	6800      	ldr	r0, [r0, #0]
 8002e6a:	f7ff bfe3 	b.w	8002e34 <_vsiprintf_r>
 8002e6e:	bf00      	nop
 8002e70:	20000010 	.word	0x20000010

08002e74 <__ssputs_r>:
 8002e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e78:	688e      	ldr	r6, [r1, #8]
 8002e7a:	4682      	mov	sl, r0
 8002e7c:	429e      	cmp	r6, r3
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4690      	mov	r8, r2
 8002e82:	461f      	mov	r7, r3
 8002e84:	d838      	bhi.n	8002ef8 <__ssputs_r+0x84>
 8002e86:	898a      	ldrh	r2, [r1, #12]
 8002e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e8c:	d032      	beq.n	8002ef4 <__ssputs_r+0x80>
 8002e8e:	6825      	ldr	r5, [r4, #0]
 8002e90:	6909      	ldr	r1, [r1, #16]
 8002e92:	3301      	adds	r3, #1
 8002e94:	eba5 0901 	sub.w	r9, r5, r1
 8002e98:	6965      	ldr	r5, [r4, #20]
 8002e9a:	444b      	add	r3, r9
 8002e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ea4:	106d      	asrs	r5, r5, #1
 8002ea6:	429d      	cmp	r5, r3
 8002ea8:	bf38      	it	cc
 8002eaa:	461d      	movcc	r5, r3
 8002eac:	0553      	lsls	r3, r2, #21
 8002eae:	d531      	bpl.n	8002f14 <__ssputs_r+0xa0>
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f000 fb45 	bl	8003540 <_malloc_r>
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	b950      	cbnz	r0, 8002ed0 <__ssputs_r+0x5c>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f8ca 3000 	str.w	r3, [sl]
 8002ec4:	89a3      	ldrh	r3, [r4, #12]
 8002ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed0:	464a      	mov	r2, r9
 8002ed2:	6921      	ldr	r1, [r4, #16]
 8002ed4:	f7ff ff98 	bl	8002e08 <memcpy>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	81a3      	strh	r3, [r4, #12]
 8002ee4:	6126      	str	r6, [r4, #16]
 8002ee6:	444e      	add	r6, r9
 8002ee8:	6026      	str	r6, [r4, #0]
 8002eea:	463e      	mov	r6, r7
 8002eec:	6165      	str	r5, [r4, #20]
 8002eee:	eba5 0509 	sub.w	r5, r5, r9
 8002ef2:	60a5      	str	r5, [r4, #8]
 8002ef4:	42be      	cmp	r6, r7
 8002ef6:	d900      	bls.n	8002efa <__ssputs_r+0x86>
 8002ef8:	463e      	mov	r6, r7
 8002efa:	4632      	mov	r2, r6
 8002efc:	4641      	mov	r1, r8
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	f000 fab8 	bl	8003474 <memmove>
 8002f04:	68a3      	ldr	r3, [r4, #8]
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	1b9b      	subs	r3, r3, r6
 8002f0a:	4432      	add	r2, r6
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	60a3      	str	r3, [r4, #8]
 8002f10:	6022      	str	r2, [r4, #0]
 8002f12:	e7db      	b.n	8002ecc <__ssputs_r+0x58>
 8002f14:	462a      	mov	r2, r5
 8002f16:	f000 fb6d 	bl	80035f4 <_realloc_r>
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d1e1      	bne.n	8002ee4 <__ssputs_r+0x70>
 8002f20:	4650      	mov	r0, sl
 8002f22:	6921      	ldr	r1, [r4, #16]
 8002f24:	f000 fac0 	bl	80034a8 <_free_r>
 8002f28:	e7c7      	b.n	8002eba <__ssputs_r+0x46>
	...

08002f2c <_svfiprintf_r>:
 8002f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f30:	4698      	mov	r8, r3
 8002f32:	898b      	ldrh	r3, [r1, #12]
 8002f34:	4607      	mov	r7, r0
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	460d      	mov	r5, r1
 8002f3a:	4614      	mov	r4, r2
 8002f3c:	b09d      	sub	sp, #116	; 0x74
 8002f3e:	d50e      	bpl.n	8002f5e <_svfiprintf_r+0x32>
 8002f40:	690b      	ldr	r3, [r1, #16]
 8002f42:	b963      	cbnz	r3, 8002f5e <_svfiprintf_r+0x32>
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	f000 fafb 	bl	8003540 <_malloc_r>
 8002f4a:	6028      	str	r0, [r5, #0]
 8002f4c:	6128      	str	r0, [r5, #16]
 8002f4e:	b920      	cbnz	r0, 8002f5a <_svfiprintf_r+0x2e>
 8002f50:	230c      	movs	r3, #12
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	e0d1      	b.n	80030fe <_svfiprintf_r+0x1d2>
 8002f5a:	2340      	movs	r3, #64	; 0x40
 8002f5c:	616b      	str	r3, [r5, #20]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9309      	str	r3, [sp, #36]	; 0x24
 8002f62:	2320      	movs	r3, #32
 8002f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f68:	2330      	movs	r3, #48	; 0x30
 8002f6a:	f04f 0901 	mov.w	r9, #1
 8002f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003118 <_svfiprintf_r+0x1ec>
 8002f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f82:	b10a      	cbz	r2, 8002f88 <_svfiprintf_r+0x5c>
 8002f84:	2a25      	cmp	r2, #37	; 0x25
 8002f86:	d1f9      	bne.n	8002f7c <_svfiprintf_r+0x50>
 8002f88:	ebba 0b04 	subs.w	fp, sl, r4
 8002f8c:	d00b      	beq.n	8002fa6 <_svfiprintf_r+0x7a>
 8002f8e:	465b      	mov	r3, fp
 8002f90:	4622      	mov	r2, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ff6d 	bl	8002e74 <__ssputs_r>
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	f000 80aa 	beq.w	80030f4 <_svfiprintf_r+0x1c8>
 8002fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fa2:	445a      	add	r2, fp
 8002fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8002fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a2 	beq.w	80030f4 <_svfiprintf_r+0x1c8>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fba:	f10a 0a01 	add.w	sl, sl, #1
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	9307      	str	r3, [sp, #28]
 8002fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002fc8:	4654      	mov	r4, sl
 8002fca:	2205      	movs	r2, #5
 8002fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd0:	4851      	ldr	r0, [pc, #324]	; (8003118 <_svfiprintf_r+0x1ec>)
 8002fd2:	f000 fa41 	bl	8003458 <memchr>
 8002fd6:	9a04      	ldr	r2, [sp, #16]
 8002fd8:	b9d8      	cbnz	r0, 8003012 <_svfiprintf_r+0xe6>
 8002fda:	06d0      	lsls	r0, r2, #27
 8002fdc:	bf44      	itt	mi
 8002fde:	2320      	movmi	r3, #32
 8002fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fe4:	0711      	lsls	r1, r2, #28
 8002fe6:	bf44      	itt	mi
 8002fe8:	232b      	movmi	r3, #43	; 0x2b
 8002fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fee:	f89a 3000 	ldrb.w	r3, [sl]
 8002ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff4:	d015      	beq.n	8003022 <_svfiprintf_r+0xf6>
 8002ff6:	4654      	mov	r4, sl
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f04f 0c0a 	mov.w	ip, #10
 8002ffe:	9a07      	ldr	r2, [sp, #28]
 8003000:	4621      	mov	r1, r4
 8003002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003006:	3b30      	subs	r3, #48	; 0x30
 8003008:	2b09      	cmp	r3, #9
 800300a:	d94e      	bls.n	80030aa <_svfiprintf_r+0x17e>
 800300c:	b1b0      	cbz	r0, 800303c <_svfiprintf_r+0x110>
 800300e:	9207      	str	r2, [sp, #28]
 8003010:	e014      	b.n	800303c <_svfiprintf_r+0x110>
 8003012:	eba0 0308 	sub.w	r3, r0, r8
 8003016:	fa09 f303 	lsl.w	r3, r9, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	46a2      	mov	sl, r4
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	e7d2      	b.n	8002fc8 <_svfiprintf_r+0x9c>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	9103      	str	r1, [sp, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfbb      	ittet	lt
 800302e:	425b      	neglt	r3, r3
 8003030:	f042 0202 	orrlt.w	r2, r2, #2
 8003034:	9307      	strge	r3, [sp, #28]
 8003036:	9307      	strlt	r3, [sp, #28]
 8003038:	bfb8      	it	lt
 800303a:	9204      	strlt	r2, [sp, #16]
 800303c:	7823      	ldrb	r3, [r4, #0]
 800303e:	2b2e      	cmp	r3, #46	; 0x2e
 8003040:	d10c      	bne.n	800305c <_svfiprintf_r+0x130>
 8003042:	7863      	ldrb	r3, [r4, #1]
 8003044:	2b2a      	cmp	r3, #42	; 0x2a
 8003046:	d135      	bne.n	80030b4 <_svfiprintf_r+0x188>
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	3402      	adds	r4, #2
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	bfb8      	it	lt
 8003056:	f04f 33ff 	movlt.w	r3, #4294967295
 800305a:	9305      	str	r3, [sp, #20]
 800305c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003128 <_svfiprintf_r+0x1fc>
 8003060:	2203      	movs	r2, #3
 8003062:	4650      	mov	r0, sl
 8003064:	7821      	ldrb	r1, [r4, #0]
 8003066:	f000 f9f7 	bl	8003458 <memchr>
 800306a:	b140      	cbz	r0, 800307e <_svfiprintf_r+0x152>
 800306c:	2340      	movs	r3, #64	; 0x40
 800306e:	eba0 000a 	sub.w	r0, r0, sl
 8003072:	fa03 f000 	lsl.w	r0, r3, r0
 8003076:	9b04      	ldr	r3, [sp, #16]
 8003078:	3401      	adds	r4, #1
 800307a:	4303      	orrs	r3, r0
 800307c:	9304      	str	r3, [sp, #16]
 800307e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003082:	2206      	movs	r2, #6
 8003084:	4825      	ldr	r0, [pc, #148]	; (800311c <_svfiprintf_r+0x1f0>)
 8003086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800308a:	f000 f9e5 	bl	8003458 <memchr>
 800308e:	2800      	cmp	r0, #0
 8003090:	d038      	beq.n	8003104 <_svfiprintf_r+0x1d8>
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <_svfiprintf_r+0x1f4>)
 8003094:	bb1b      	cbnz	r3, 80030de <_svfiprintf_r+0x1b2>
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	3307      	adds	r3, #7
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	3308      	adds	r3, #8
 80030a0:	9303      	str	r3, [sp, #12]
 80030a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a4:	4433      	add	r3, r6
 80030a6:	9309      	str	r3, [sp, #36]	; 0x24
 80030a8:	e767      	b.n	8002f7a <_svfiprintf_r+0x4e>
 80030aa:	460c      	mov	r4, r1
 80030ac:	2001      	movs	r0, #1
 80030ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80030b2:	e7a5      	b.n	8003000 <_svfiprintf_r+0xd4>
 80030b4:	2300      	movs	r3, #0
 80030b6:	f04f 0c0a 	mov.w	ip, #10
 80030ba:	4619      	mov	r1, r3
 80030bc:	3401      	adds	r4, #1
 80030be:	9305      	str	r3, [sp, #20]
 80030c0:	4620      	mov	r0, r4
 80030c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c6:	3a30      	subs	r2, #48	; 0x30
 80030c8:	2a09      	cmp	r2, #9
 80030ca:	d903      	bls.n	80030d4 <_svfiprintf_r+0x1a8>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0c5      	beq.n	800305c <_svfiprintf_r+0x130>
 80030d0:	9105      	str	r1, [sp, #20]
 80030d2:	e7c3      	b.n	800305c <_svfiprintf_r+0x130>
 80030d4:	4604      	mov	r4, r0
 80030d6:	2301      	movs	r3, #1
 80030d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80030dc:	e7f0      	b.n	80030c0 <_svfiprintf_r+0x194>
 80030de:	ab03      	add	r3, sp, #12
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	462a      	mov	r2, r5
 80030e4:	4638      	mov	r0, r7
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <_svfiprintf_r+0x1f8>)
 80030e8:	a904      	add	r1, sp, #16
 80030ea:	f3af 8000 	nop.w
 80030ee:	1c42      	adds	r2, r0, #1
 80030f0:	4606      	mov	r6, r0
 80030f2:	d1d6      	bne.n	80030a2 <_svfiprintf_r+0x176>
 80030f4:	89ab      	ldrh	r3, [r5, #12]
 80030f6:	065b      	lsls	r3, r3, #25
 80030f8:	f53f af2c 	bmi.w	8002f54 <_svfiprintf_r+0x28>
 80030fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030fe:	b01d      	add	sp, #116	; 0x74
 8003100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003104:	ab03      	add	r3, sp, #12
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	462a      	mov	r2, r5
 800310a:	4638      	mov	r0, r7
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <_svfiprintf_r+0x1f8>)
 800310e:	a904      	add	r1, sp, #16
 8003110:	f000 f87c 	bl	800320c <_printf_i>
 8003114:	e7eb      	b.n	80030ee <_svfiprintf_r+0x1c2>
 8003116:	bf00      	nop
 8003118:	08003a44 	.word	0x08003a44
 800311c:	08003a4e 	.word	0x08003a4e
 8003120:	00000000 	.word	0x00000000
 8003124:	08002e75 	.word	0x08002e75
 8003128:	08003a4a 	.word	0x08003a4a

0800312c <_printf_common>:
 800312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003130:	4616      	mov	r6, r2
 8003132:	4699      	mov	r9, r3
 8003134:	688a      	ldr	r2, [r1, #8]
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	4607      	mov	r7, r0
 800313a:	4293      	cmp	r3, r2
 800313c:	bfb8      	it	lt
 800313e:	4613      	movlt	r3, r2
 8003140:	6033      	str	r3, [r6, #0]
 8003142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003146:	460c      	mov	r4, r1
 8003148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800314c:	b10a      	cbz	r2, 8003152 <_printf_common+0x26>
 800314e:	3301      	adds	r3, #1
 8003150:	6033      	str	r3, [r6, #0]
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	0699      	lsls	r1, r3, #26
 8003156:	bf42      	ittt	mi
 8003158:	6833      	ldrmi	r3, [r6, #0]
 800315a:	3302      	addmi	r3, #2
 800315c:	6033      	strmi	r3, [r6, #0]
 800315e:	6825      	ldr	r5, [r4, #0]
 8003160:	f015 0506 	ands.w	r5, r5, #6
 8003164:	d106      	bne.n	8003174 <_printf_common+0x48>
 8003166:	f104 0a19 	add.w	sl, r4, #25
 800316a:	68e3      	ldr	r3, [r4, #12]
 800316c:	6832      	ldr	r2, [r6, #0]
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	42ab      	cmp	r3, r5
 8003172:	dc28      	bgt.n	80031c6 <_printf_common+0x9a>
 8003174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003178:	1e13      	subs	r3, r2, #0
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	bf18      	it	ne
 800317e:	2301      	movne	r3, #1
 8003180:	0692      	lsls	r2, r2, #26
 8003182:	d42d      	bmi.n	80031e0 <_printf_common+0xb4>
 8003184:	4649      	mov	r1, r9
 8003186:	4638      	mov	r0, r7
 8003188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800318c:	47c0      	blx	r8
 800318e:	3001      	adds	r0, #1
 8003190:	d020      	beq.n	80031d4 <_printf_common+0xa8>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	68e5      	ldr	r5, [r4, #12]
 8003196:	f003 0306 	and.w	r3, r3, #6
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf18      	it	ne
 800319e:	2500      	movne	r5, #0
 80031a0:	6832      	ldr	r2, [r6, #0]
 80031a2:	f04f 0600 	mov.w	r6, #0
 80031a6:	68a3      	ldr	r3, [r4, #8]
 80031a8:	bf08      	it	eq
 80031aa:	1aad      	subeq	r5, r5, r2
 80031ac:	6922      	ldr	r2, [r4, #16]
 80031ae:	bf08      	it	eq
 80031b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bfc4      	itt	gt
 80031b8:	1a9b      	subgt	r3, r3, r2
 80031ba:	18ed      	addgt	r5, r5, r3
 80031bc:	341a      	adds	r4, #26
 80031be:	42b5      	cmp	r5, r6
 80031c0:	d11a      	bne.n	80031f8 <_printf_common+0xcc>
 80031c2:	2000      	movs	r0, #0
 80031c4:	e008      	b.n	80031d8 <_printf_common+0xac>
 80031c6:	2301      	movs	r3, #1
 80031c8:	4652      	mov	r2, sl
 80031ca:	4649      	mov	r1, r9
 80031cc:	4638      	mov	r0, r7
 80031ce:	47c0      	blx	r8
 80031d0:	3001      	adds	r0, #1
 80031d2:	d103      	bne.n	80031dc <_printf_common+0xb0>
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031dc:	3501      	adds	r5, #1
 80031de:	e7c4      	b.n	800316a <_printf_common+0x3e>
 80031e0:	2030      	movs	r0, #48	; 0x30
 80031e2:	18e1      	adds	r1, r4, r3
 80031e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031ee:	4422      	add	r2, r4
 80031f0:	3302      	adds	r3, #2
 80031f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031f6:	e7c5      	b.n	8003184 <_printf_common+0x58>
 80031f8:	2301      	movs	r3, #1
 80031fa:	4622      	mov	r2, r4
 80031fc:	4649      	mov	r1, r9
 80031fe:	4638      	mov	r0, r7
 8003200:	47c0      	blx	r8
 8003202:	3001      	adds	r0, #1
 8003204:	d0e6      	beq.n	80031d4 <_printf_common+0xa8>
 8003206:	3601      	adds	r6, #1
 8003208:	e7d9      	b.n	80031be <_printf_common+0x92>
	...

0800320c <_printf_i>:
 800320c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	460c      	mov	r4, r1
 8003212:	7e27      	ldrb	r7, [r4, #24]
 8003214:	4691      	mov	r9, r2
 8003216:	2f78      	cmp	r7, #120	; 0x78
 8003218:	4680      	mov	r8, r0
 800321a:	469a      	mov	sl, r3
 800321c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800321e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003222:	d807      	bhi.n	8003234 <_printf_i+0x28>
 8003224:	2f62      	cmp	r7, #98	; 0x62
 8003226:	d80a      	bhi.n	800323e <_printf_i+0x32>
 8003228:	2f00      	cmp	r7, #0
 800322a:	f000 80d9 	beq.w	80033e0 <_printf_i+0x1d4>
 800322e:	2f58      	cmp	r7, #88	; 0x58
 8003230:	f000 80a4 	beq.w	800337c <_printf_i+0x170>
 8003234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800323c:	e03a      	b.n	80032b4 <_printf_i+0xa8>
 800323e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003242:	2b15      	cmp	r3, #21
 8003244:	d8f6      	bhi.n	8003234 <_printf_i+0x28>
 8003246:	a001      	add	r0, pc, #4	; (adr r0, 800324c <_printf_i+0x40>)
 8003248:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032b9 	.word	0x080032b9
 8003254:	08003235 	.word	0x08003235
 8003258:	08003235 	.word	0x08003235
 800325c:	08003235 	.word	0x08003235
 8003260:	08003235 	.word	0x08003235
 8003264:	080032b9 	.word	0x080032b9
 8003268:	08003235 	.word	0x08003235
 800326c:	08003235 	.word	0x08003235
 8003270:	08003235 	.word	0x08003235
 8003274:	08003235 	.word	0x08003235
 8003278:	080033c7 	.word	0x080033c7
 800327c:	080032e9 	.word	0x080032e9
 8003280:	080033a9 	.word	0x080033a9
 8003284:	08003235 	.word	0x08003235
 8003288:	08003235 	.word	0x08003235
 800328c:	080033e9 	.word	0x080033e9
 8003290:	08003235 	.word	0x08003235
 8003294:	080032e9 	.word	0x080032e9
 8003298:	08003235 	.word	0x08003235
 800329c:	08003235 	.word	0x08003235
 80032a0:	080033b1 	.word	0x080033b1
 80032a4:	680b      	ldr	r3, [r1, #0]
 80032a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032aa:	1d1a      	adds	r2, r3, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	600a      	str	r2, [r1, #0]
 80032b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0a4      	b.n	8003402 <_printf_i+0x1f6>
 80032b8:	6825      	ldr	r5, [r4, #0]
 80032ba:	6808      	ldr	r0, [r1, #0]
 80032bc:	062e      	lsls	r6, r5, #24
 80032be:	f100 0304 	add.w	r3, r0, #4
 80032c2:	d50a      	bpl.n	80032da <_printf_i+0xce>
 80032c4:	6805      	ldr	r5, [r0, #0]
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	2d00      	cmp	r5, #0
 80032ca:	da03      	bge.n	80032d4 <_printf_i+0xc8>
 80032cc:	232d      	movs	r3, #45	; 0x2d
 80032ce:	426d      	negs	r5, r5
 80032d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032d4:	230a      	movs	r3, #10
 80032d6:	485e      	ldr	r0, [pc, #376]	; (8003450 <_printf_i+0x244>)
 80032d8:	e019      	b.n	800330e <_printf_i+0x102>
 80032da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032de:	6805      	ldr	r5, [r0, #0]
 80032e0:	600b      	str	r3, [r1, #0]
 80032e2:	bf18      	it	ne
 80032e4:	b22d      	sxthne	r5, r5
 80032e6:	e7ef      	b.n	80032c8 <_printf_i+0xbc>
 80032e8:	680b      	ldr	r3, [r1, #0]
 80032ea:	6825      	ldr	r5, [r4, #0]
 80032ec:	1d18      	adds	r0, r3, #4
 80032ee:	6008      	str	r0, [r1, #0]
 80032f0:	0628      	lsls	r0, r5, #24
 80032f2:	d501      	bpl.n	80032f8 <_printf_i+0xec>
 80032f4:	681d      	ldr	r5, [r3, #0]
 80032f6:	e002      	b.n	80032fe <_printf_i+0xf2>
 80032f8:	0669      	lsls	r1, r5, #25
 80032fa:	d5fb      	bpl.n	80032f4 <_printf_i+0xe8>
 80032fc:	881d      	ldrh	r5, [r3, #0]
 80032fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003300:	bf0c      	ite	eq
 8003302:	2308      	moveq	r3, #8
 8003304:	230a      	movne	r3, #10
 8003306:	4852      	ldr	r0, [pc, #328]	; (8003450 <_printf_i+0x244>)
 8003308:	2100      	movs	r1, #0
 800330a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800330e:	6866      	ldr	r6, [r4, #4]
 8003310:	2e00      	cmp	r6, #0
 8003312:	bfa8      	it	ge
 8003314:	6821      	ldrge	r1, [r4, #0]
 8003316:	60a6      	str	r6, [r4, #8]
 8003318:	bfa4      	itt	ge
 800331a:	f021 0104 	bicge.w	r1, r1, #4
 800331e:	6021      	strge	r1, [r4, #0]
 8003320:	b90d      	cbnz	r5, 8003326 <_printf_i+0x11a>
 8003322:	2e00      	cmp	r6, #0
 8003324:	d04d      	beq.n	80033c2 <_printf_i+0x1b6>
 8003326:	4616      	mov	r6, r2
 8003328:	fbb5 f1f3 	udiv	r1, r5, r3
 800332c:	fb03 5711 	mls	r7, r3, r1, r5
 8003330:	5dc7      	ldrb	r7, [r0, r7]
 8003332:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003336:	462f      	mov	r7, r5
 8003338:	42bb      	cmp	r3, r7
 800333a:	460d      	mov	r5, r1
 800333c:	d9f4      	bls.n	8003328 <_printf_i+0x11c>
 800333e:	2b08      	cmp	r3, #8
 8003340:	d10b      	bne.n	800335a <_printf_i+0x14e>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	07df      	lsls	r7, r3, #31
 8003346:	d508      	bpl.n	800335a <_printf_i+0x14e>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	6861      	ldr	r1, [r4, #4]
 800334c:	4299      	cmp	r1, r3
 800334e:	bfde      	ittt	le
 8003350:	2330      	movle	r3, #48	; 0x30
 8003352:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003356:	f106 36ff 	addle.w	r6, r6, #4294967295
 800335a:	1b92      	subs	r2, r2, r6
 800335c:	6122      	str	r2, [r4, #16]
 800335e:	464b      	mov	r3, r9
 8003360:	4621      	mov	r1, r4
 8003362:	4640      	mov	r0, r8
 8003364:	f8cd a000 	str.w	sl, [sp]
 8003368:	aa03      	add	r2, sp, #12
 800336a:	f7ff fedf 	bl	800312c <_printf_common>
 800336e:	3001      	adds	r0, #1
 8003370:	d14c      	bne.n	800340c <_printf_i+0x200>
 8003372:	f04f 30ff 	mov.w	r0, #4294967295
 8003376:	b004      	add	sp, #16
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	4834      	ldr	r0, [pc, #208]	; (8003450 <_printf_i+0x244>)
 800337e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003382:	680e      	ldr	r6, [r1, #0]
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f856 5b04 	ldr.w	r5, [r6], #4
 800338a:	061f      	lsls	r7, r3, #24
 800338c:	600e      	str	r6, [r1, #0]
 800338e:	d514      	bpl.n	80033ba <_printf_i+0x1ae>
 8003390:	07d9      	lsls	r1, r3, #31
 8003392:	bf44      	itt	mi
 8003394:	f043 0320 	orrmi.w	r3, r3, #32
 8003398:	6023      	strmi	r3, [r4, #0]
 800339a:	b91d      	cbnz	r5, 80033a4 <_printf_i+0x198>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	2310      	movs	r3, #16
 80033a6:	e7af      	b.n	8003308 <_printf_i+0xfc>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	f043 0320 	orr.w	r3, r3, #32
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	2378      	movs	r3, #120	; 0x78
 80033b2:	4828      	ldr	r0, [pc, #160]	; (8003454 <_printf_i+0x248>)
 80033b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033b8:	e7e3      	b.n	8003382 <_printf_i+0x176>
 80033ba:	065e      	lsls	r6, r3, #25
 80033bc:	bf48      	it	mi
 80033be:	b2ad      	uxthmi	r5, r5
 80033c0:	e7e6      	b.n	8003390 <_printf_i+0x184>
 80033c2:	4616      	mov	r6, r2
 80033c4:	e7bb      	b.n	800333e <_printf_i+0x132>
 80033c6:	680b      	ldr	r3, [r1, #0]
 80033c8:	6826      	ldr	r6, [r4, #0]
 80033ca:	1d1d      	adds	r5, r3, #4
 80033cc:	6960      	ldr	r0, [r4, #20]
 80033ce:	600d      	str	r5, [r1, #0]
 80033d0:	0635      	lsls	r5, r6, #24
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	d501      	bpl.n	80033da <_printf_i+0x1ce>
 80033d6:	6018      	str	r0, [r3, #0]
 80033d8:	e002      	b.n	80033e0 <_printf_i+0x1d4>
 80033da:	0671      	lsls	r1, r6, #25
 80033dc:	d5fb      	bpl.n	80033d6 <_printf_i+0x1ca>
 80033de:	8018      	strh	r0, [r3, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	4616      	mov	r6, r2
 80033e4:	6123      	str	r3, [r4, #16]
 80033e6:	e7ba      	b.n	800335e <_printf_i+0x152>
 80033e8:	680b      	ldr	r3, [r1, #0]
 80033ea:	1d1a      	adds	r2, r3, #4
 80033ec:	600a      	str	r2, [r1, #0]
 80033ee:	681e      	ldr	r6, [r3, #0]
 80033f0:	2100      	movs	r1, #0
 80033f2:	4630      	mov	r0, r6
 80033f4:	6862      	ldr	r2, [r4, #4]
 80033f6:	f000 f82f 	bl	8003458 <memchr>
 80033fa:	b108      	cbz	r0, 8003400 <_printf_i+0x1f4>
 80033fc:	1b80      	subs	r0, r0, r6
 80033fe:	6060      	str	r0, [r4, #4]
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	6123      	str	r3, [r4, #16]
 8003404:	2300      	movs	r3, #0
 8003406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800340a:	e7a8      	b.n	800335e <_printf_i+0x152>
 800340c:	4632      	mov	r2, r6
 800340e:	4649      	mov	r1, r9
 8003410:	4640      	mov	r0, r8
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	47d0      	blx	sl
 8003416:	3001      	adds	r0, #1
 8003418:	d0ab      	beq.n	8003372 <_printf_i+0x166>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	079b      	lsls	r3, r3, #30
 800341e:	d413      	bmi.n	8003448 <_printf_i+0x23c>
 8003420:	68e0      	ldr	r0, [r4, #12]
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	4298      	cmp	r0, r3
 8003426:	bfb8      	it	lt
 8003428:	4618      	movlt	r0, r3
 800342a:	e7a4      	b.n	8003376 <_printf_i+0x16a>
 800342c:	2301      	movs	r3, #1
 800342e:	4632      	mov	r2, r6
 8003430:	4649      	mov	r1, r9
 8003432:	4640      	mov	r0, r8
 8003434:	47d0      	blx	sl
 8003436:	3001      	adds	r0, #1
 8003438:	d09b      	beq.n	8003372 <_printf_i+0x166>
 800343a:	3501      	adds	r5, #1
 800343c:	68e3      	ldr	r3, [r4, #12]
 800343e:	9903      	ldr	r1, [sp, #12]
 8003440:	1a5b      	subs	r3, r3, r1
 8003442:	42ab      	cmp	r3, r5
 8003444:	dcf2      	bgt.n	800342c <_printf_i+0x220>
 8003446:	e7eb      	b.n	8003420 <_printf_i+0x214>
 8003448:	2500      	movs	r5, #0
 800344a:	f104 0619 	add.w	r6, r4, #25
 800344e:	e7f5      	b.n	800343c <_printf_i+0x230>
 8003450:	08003a55 	.word	0x08003a55
 8003454:	08003a66 	.word	0x08003a66

08003458 <memchr>:
 8003458:	4603      	mov	r3, r0
 800345a:	b510      	push	{r4, lr}
 800345c:	b2c9      	uxtb	r1, r1
 800345e:	4402      	add	r2, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	4618      	mov	r0, r3
 8003464:	d101      	bne.n	800346a <memchr+0x12>
 8003466:	2000      	movs	r0, #0
 8003468:	e003      	b.n	8003472 <memchr+0x1a>
 800346a:	7804      	ldrb	r4, [r0, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	428c      	cmp	r4, r1
 8003470:	d1f6      	bne.n	8003460 <memchr+0x8>
 8003472:	bd10      	pop	{r4, pc}

08003474 <memmove>:
 8003474:	4288      	cmp	r0, r1
 8003476:	b510      	push	{r4, lr}
 8003478:	eb01 0402 	add.w	r4, r1, r2
 800347c:	d902      	bls.n	8003484 <memmove+0x10>
 800347e:	4284      	cmp	r4, r0
 8003480:	4623      	mov	r3, r4
 8003482:	d807      	bhi.n	8003494 <memmove+0x20>
 8003484:	1e43      	subs	r3, r0, #1
 8003486:	42a1      	cmp	r1, r4
 8003488:	d008      	beq.n	800349c <memmove+0x28>
 800348a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800348e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003492:	e7f8      	b.n	8003486 <memmove+0x12>
 8003494:	4601      	mov	r1, r0
 8003496:	4402      	add	r2, r0
 8003498:	428a      	cmp	r2, r1
 800349a:	d100      	bne.n	800349e <memmove+0x2a>
 800349c:	bd10      	pop	{r4, pc}
 800349e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034a6:	e7f7      	b.n	8003498 <memmove+0x24>

080034a8 <_free_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4605      	mov	r5, r0
 80034ac:	2900      	cmp	r1, #0
 80034ae:	d043      	beq.n	8003538 <_free_r+0x90>
 80034b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b4:	1f0c      	subs	r4, r1, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bfb8      	it	lt
 80034ba:	18e4      	addlt	r4, r4, r3
 80034bc:	f000 f8d0 	bl	8003660 <__malloc_lock>
 80034c0:	4a1e      	ldr	r2, [pc, #120]	; (800353c <_free_r+0x94>)
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	4610      	mov	r0, r2
 80034c6:	b933      	cbnz	r3, 80034d6 <_free_r+0x2e>
 80034c8:	6063      	str	r3, [r4, #4]
 80034ca:	6014      	str	r4, [r2, #0]
 80034cc:	4628      	mov	r0, r5
 80034ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034d2:	f000 b8cb 	b.w	800366c <__malloc_unlock>
 80034d6:	42a3      	cmp	r3, r4
 80034d8:	d90a      	bls.n	80034f0 <_free_r+0x48>
 80034da:	6821      	ldr	r1, [r4, #0]
 80034dc:	1862      	adds	r2, r4, r1
 80034de:	4293      	cmp	r3, r2
 80034e0:	bf01      	itttt	eq
 80034e2:	681a      	ldreq	r2, [r3, #0]
 80034e4:	685b      	ldreq	r3, [r3, #4]
 80034e6:	1852      	addeq	r2, r2, r1
 80034e8:	6022      	streq	r2, [r4, #0]
 80034ea:	6063      	str	r3, [r4, #4]
 80034ec:	6004      	str	r4, [r0, #0]
 80034ee:	e7ed      	b.n	80034cc <_free_r+0x24>
 80034f0:	461a      	mov	r2, r3
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	b10b      	cbz	r3, 80034fa <_free_r+0x52>
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	d9fa      	bls.n	80034f0 <_free_r+0x48>
 80034fa:	6811      	ldr	r1, [r2, #0]
 80034fc:	1850      	adds	r0, r2, r1
 80034fe:	42a0      	cmp	r0, r4
 8003500:	d10b      	bne.n	800351a <_free_r+0x72>
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	4401      	add	r1, r0
 8003506:	1850      	adds	r0, r2, r1
 8003508:	4283      	cmp	r3, r0
 800350a:	6011      	str	r1, [r2, #0]
 800350c:	d1de      	bne.n	80034cc <_free_r+0x24>
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4401      	add	r1, r0
 8003514:	6011      	str	r1, [r2, #0]
 8003516:	6053      	str	r3, [r2, #4]
 8003518:	e7d8      	b.n	80034cc <_free_r+0x24>
 800351a:	d902      	bls.n	8003522 <_free_r+0x7a>
 800351c:	230c      	movs	r3, #12
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	e7d4      	b.n	80034cc <_free_r+0x24>
 8003522:	6820      	ldr	r0, [r4, #0]
 8003524:	1821      	adds	r1, r4, r0
 8003526:	428b      	cmp	r3, r1
 8003528:	bf01      	itttt	eq
 800352a:	6819      	ldreq	r1, [r3, #0]
 800352c:	685b      	ldreq	r3, [r3, #4]
 800352e:	1809      	addeq	r1, r1, r0
 8003530:	6021      	streq	r1, [r4, #0]
 8003532:	6063      	str	r3, [r4, #4]
 8003534:	6054      	str	r4, [r2, #4]
 8003536:	e7c9      	b.n	80034cc <_free_r+0x24>
 8003538:	bd38      	pop	{r3, r4, r5, pc}
 800353a:	bf00      	nop
 800353c:	200005a4 	.word	0x200005a4

08003540 <_malloc_r>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	1ccd      	adds	r5, r1, #3
 8003544:	f025 0503 	bic.w	r5, r5, #3
 8003548:	3508      	adds	r5, #8
 800354a:	2d0c      	cmp	r5, #12
 800354c:	bf38      	it	cc
 800354e:	250c      	movcc	r5, #12
 8003550:	2d00      	cmp	r5, #0
 8003552:	4606      	mov	r6, r0
 8003554:	db01      	blt.n	800355a <_malloc_r+0x1a>
 8003556:	42a9      	cmp	r1, r5
 8003558:	d903      	bls.n	8003562 <_malloc_r+0x22>
 800355a:	230c      	movs	r3, #12
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	2000      	movs	r0, #0
 8003560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003562:	f000 f87d 	bl	8003660 <__malloc_lock>
 8003566:	4921      	ldr	r1, [pc, #132]	; (80035ec <_malloc_r+0xac>)
 8003568:	680a      	ldr	r2, [r1, #0]
 800356a:	4614      	mov	r4, r2
 800356c:	b99c      	cbnz	r4, 8003596 <_malloc_r+0x56>
 800356e:	4f20      	ldr	r7, [pc, #128]	; (80035f0 <_malloc_r+0xb0>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b923      	cbnz	r3, 800357e <_malloc_r+0x3e>
 8003574:	4621      	mov	r1, r4
 8003576:	4630      	mov	r0, r6
 8003578:	f000 f862 	bl	8003640 <_sbrk_r>
 800357c:	6038      	str	r0, [r7, #0]
 800357e:	4629      	mov	r1, r5
 8003580:	4630      	mov	r0, r6
 8003582:	f000 f85d 	bl	8003640 <_sbrk_r>
 8003586:	1c43      	adds	r3, r0, #1
 8003588:	d123      	bne.n	80035d2 <_malloc_r+0x92>
 800358a:	230c      	movs	r3, #12
 800358c:	4630      	mov	r0, r6
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	f000 f86c 	bl	800366c <__malloc_unlock>
 8003594:	e7e3      	b.n	800355e <_malloc_r+0x1e>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	1b5b      	subs	r3, r3, r5
 800359a:	d417      	bmi.n	80035cc <_malloc_r+0x8c>
 800359c:	2b0b      	cmp	r3, #11
 800359e:	d903      	bls.n	80035a8 <_malloc_r+0x68>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	441c      	add	r4, r3
 80035a4:	6025      	str	r5, [r4, #0]
 80035a6:	e004      	b.n	80035b2 <_malloc_r+0x72>
 80035a8:	6863      	ldr	r3, [r4, #4]
 80035aa:	42a2      	cmp	r2, r4
 80035ac:	bf0c      	ite	eq
 80035ae:	600b      	streq	r3, [r1, #0]
 80035b0:	6053      	strne	r3, [r2, #4]
 80035b2:	4630      	mov	r0, r6
 80035b4:	f000 f85a 	bl	800366c <__malloc_unlock>
 80035b8:	f104 000b 	add.w	r0, r4, #11
 80035bc:	1d23      	adds	r3, r4, #4
 80035be:	f020 0007 	bic.w	r0, r0, #7
 80035c2:	1ac2      	subs	r2, r0, r3
 80035c4:	d0cc      	beq.n	8003560 <_malloc_r+0x20>
 80035c6:	1a1b      	subs	r3, r3, r0
 80035c8:	50a3      	str	r3, [r4, r2]
 80035ca:	e7c9      	b.n	8003560 <_malloc_r+0x20>
 80035cc:	4622      	mov	r2, r4
 80035ce:	6864      	ldr	r4, [r4, #4]
 80035d0:	e7cc      	b.n	800356c <_malloc_r+0x2c>
 80035d2:	1cc4      	adds	r4, r0, #3
 80035d4:	f024 0403 	bic.w	r4, r4, #3
 80035d8:	42a0      	cmp	r0, r4
 80035da:	d0e3      	beq.n	80035a4 <_malloc_r+0x64>
 80035dc:	1a21      	subs	r1, r4, r0
 80035de:	4630      	mov	r0, r6
 80035e0:	f000 f82e 	bl	8003640 <_sbrk_r>
 80035e4:	3001      	adds	r0, #1
 80035e6:	d1dd      	bne.n	80035a4 <_malloc_r+0x64>
 80035e8:	e7cf      	b.n	800358a <_malloc_r+0x4a>
 80035ea:	bf00      	nop
 80035ec:	200005a4 	.word	0x200005a4
 80035f0:	200005a8 	.word	0x200005a8

080035f4 <_realloc_r>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	4607      	mov	r7, r0
 80035f8:	4614      	mov	r4, r2
 80035fa:	460e      	mov	r6, r1
 80035fc:	b921      	cbnz	r1, 8003608 <_realloc_r+0x14>
 80035fe:	4611      	mov	r1, r2
 8003600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003604:	f7ff bf9c 	b.w	8003540 <_malloc_r>
 8003608:	b922      	cbnz	r2, 8003614 <_realloc_r+0x20>
 800360a:	f7ff ff4d 	bl	80034a8 <_free_r>
 800360e:	4625      	mov	r5, r4
 8003610:	4628      	mov	r0, r5
 8003612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003614:	f000 f830 	bl	8003678 <_malloc_usable_size_r>
 8003618:	42a0      	cmp	r0, r4
 800361a:	d20f      	bcs.n	800363c <_realloc_r+0x48>
 800361c:	4621      	mov	r1, r4
 800361e:	4638      	mov	r0, r7
 8003620:	f7ff ff8e 	bl	8003540 <_malloc_r>
 8003624:	4605      	mov	r5, r0
 8003626:	2800      	cmp	r0, #0
 8003628:	d0f2      	beq.n	8003610 <_realloc_r+0x1c>
 800362a:	4631      	mov	r1, r6
 800362c:	4622      	mov	r2, r4
 800362e:	f7ff fbeb 	bl	8002e08 <memcpy>
 8003632:	4631      	mov	r1, r6
 8003634:	4638      	mov	r0, r7
 8003636:	f7ff ff37 	bl	80034a8 <_free_r>
 800363a:	e7e9      	b.n	8003610 <_realloc_r+0x1c>
 800363c:	4635      	mov	r5, r6
 800363e:	e7e7      	b.n	8003610 <_realloc_r+0x1c>

08003640 <_sbrk_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	2300      	movs	r3, #0
 8003644:	4d05      	ldr	r5, [pc, #20]	; (800365c <_sbrk_r+0x1c>)
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	f7fc ff5c 	bl	8000508 <_sbrk>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_sbrk_r+0x1a>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	b103      	cbz	r3, 800365a <_sbrk_r+0x1a>
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	2000066c 	.word	0x2000066c

08003660 <__malloc_lock>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__malloc_lock+0x8>)
 8003662:	f000 b811 	b.w	8003688 <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	20000674 	.word	0x20000674

0800366c <__malloc_unlock>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__malloc_unlock+0x8>)
 800366e:	f000 b80c 	b.w	800368a <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	20000674 	.word	0x20000674

08003678 <_malloc_usable_size_r>:
 8003678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800367c:	1f18      	subs	r0, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfbc      	itt	lt
 8003682:	580b      	ldrlt	r3, [r1, r0]
 8003684:	18c0      	addlt	r0, r0, r3
 8003686:	4770      	bx	lr

08003688 <__retarget_lock_acquire_recursive>:
 8003688:	4770      	bx	lr

0800368a <__retarget_lock_release_recursive>:
 800368a:	4770      	bx	lr

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
