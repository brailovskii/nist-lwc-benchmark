
lwc_nist_benchmark_stm32f100rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800454c  0800454c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800454c  0800454c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800454c  0800454c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000070  080045c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  080045c4  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f12d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265b  00000000  00000000  0002f1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  000325a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133c9  00000000  00000000  00033238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e917  00000000  00000000  00046601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070de8  00000000  00000000  00054f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  000c5d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f94 	.word	0x08003f94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003f94 	.word	0x08003f94

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4313      	orrs	r3, r2
 8000232:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4013      	ands	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023e:	68fb      	ldr	r3, [r7, #12]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fa44 	bl	80006de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f80f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f879 	bl	8000350 <MX_GPIO_Init>
  MX_TIM6_Init();
 800025e:	f000 f839 	bl	80002d4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000262:	f000 f85b 	bl	800031c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
	  HAL_Delay(1000000);
 8000266:	4c03      	ldr	r4, [pc, #12]	; (8000274 <main+0x24>)
	  genkat_benchmark_hash_aead();
 8000268:	f002 fb1e 	bl	80028a8 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800026c:	4620      	mov	r0, r4
 800026e:	f000 fa8f 	bl	8000790 <HAL_Delay>
 8000272:	e7f9      	b.n	8000268 <main+0x18>
 8000274:	000f4240 	.word	0x000f4240

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2300      	movs	r3, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2401      	movs	r4, #1
 8000280:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000282:	f44f 2100 	mov.w	r1, #524288	; 0x80000
{
 8000286:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	a806      	add	r0, sp, #24
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000292:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800029e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002a6:	910f      	str	r1, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f000 fd28 	bl	8000cfc <HAL_RCC_OscConfig>
 80002ac:	b978      	cbnz	r0, 80002ce <SystemClock_Config+0x56>
 80002ae:	4601      	mov	r1, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	240f      	movs	r4, #15
 80002b2:	2502      	movs	r5, #2
 80002b4:	2200      	movs	r2, #0
 80002b6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	e9cd 4500 	strd	r4, r5, [sp]
 80002be:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c4:	f000 ff9a 	bl	80011fc <HAL_RCC_ClockConfig>
 80002c8:	b908      	cbnz	r0, 80002ce <SystemClock_Config+0x56>
  {
    Error_Handler();
  }
}
 80002ca:	b011      	add	sp, #68	; 0x44
 80002cc:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80002ce:	f000 f843 	bl	8000358 <Error_Handler>
 80002d2:	bf00      	nop

080002d4 <MX_TIM6_Init>:

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	2300      	movs	r3, #0

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 80002d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80002da:	b510      	push	{r4, lr}
  htim6.Instance = TIM6;
 80002dc:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <MX_TIM6_Init+0x40>)
 80002de:	490e      	ldr	r1, [pc, #56]	; (8000318 <MX_TIM6_Init+0x44>)
{
 80002e0:	b082      	sub	sp, #8
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002e2:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	e9cd 3300 	strd	r3, r3, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ec:	61a3      	str	r3, [r4, #24]
  htim6.Instance = TIM6;
 80002ee:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = 65535;
 80002f0:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002f2:	f001 f8ef 	bl	80014d4 <HAL_TIM_Base_Init>
 80002f6:	b950      	cbnz	r0, 800030e <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2200      	movs	r2, #0
 80002fa:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80002fc:	4669      	mov	r1, sp
 80002fe:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000304:	f001 fb6a 	bl	80019dc <HAL_TIMEx_MasterConfigSynchronization>
 8000308:	b908      	cbnz	r0, 800030e <MX_TIM6_Init+0x3a>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800030a:	b002      	add	sp, #8
 800030c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800030e:	f000 f823 	bl	8000358 <Error_Handler>
 8000312:	bf00      	nop
 8000314:	200005e8 	.word	0x200005e8
 8000318:	40001000 	.word	0x40001000

0800031c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800031c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8000320:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000324:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <MX_USART1_UART_Init+0x2c>)
 8000328:	4908      	ldr	r1, [pc, #32]	; (800034c <MX_USART1_UART_Init+0x30>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Instance = USART1;
 800032e:	e9c0 1400 	strd	r1, r4, [r0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000332:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000336:	6142      	str	r2, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000338:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	f001 fbc7 	bl	8001acc <HAL_UART_Init>
 800033e:	b900      	cbnz	r0, 8000342 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000340:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000342:	f000 f809 	bl	8000358 <Error_Handler>
 8000346:	bf00      	nop
 8000348:	200005a8 	.word	0x200005a8
 800034c:	40013800 	.word	0x40013800

08000350 <MX_GPIO_Init>:
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000350:	2004      	movs	r0, #4
 8000352:	f7ff bf65 	b.w	8000220 <LL_APB2_GRP1_EnableClock>
 8000356:	bf00      	nop

08000358 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
 800035a:	e7fe      	b.n	800035a <Error_Handler+0x2>

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <HAL_MspInit+0x5c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_MspInit+0x5c>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_MspInit+0x60>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_MspInit+0x60>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010000 	.word	0x40010000

080003c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <HAL_TIM_Base_MspInit+0x44>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d113      	bne.n	80003fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <HAL_TIM_Base_MspInit+0x48>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <HAL_TIM_Base_MspInit+0x48>)
 80003d8:	f043 0310 	orr.w	r3, r3, #16
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_TIM_Base_MspInit+0x48>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 0310 	and.w	r3, r3, #16
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	2036      	movs	r0, #54	; 0x36
 80003f0:	f000 fac9 	bl	8000986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003f4:	2036      	movs	r0, #54	; 0x36
 80003f6:	f000 fae2 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40001000 	.word	0x40001000
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <HAL_UART_MspInit+0x8c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d131      	bne.n	8000490 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <HAL_UART_MspInit+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <HAL_UART_MspInit+0x90>)
 8000432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <HAL_UART_MspInit+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <HAL_UART_MspInit+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_UART_MspInit+0x90>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_UART_MspInit+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800045c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <HAL_UART_MspInit+0x94>)
 8000472:	f000 fabf 	bl	80009f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <HAL_UART_MspInit+0x94>)
 800048c:	f000 fab2 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40013800 	.word	0x40013800
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ea:	f000 f935 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <TIM6_DAC_IRQHandler+0x10>)
 80004fa:	f001 f8c3 	bl	8001684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200005e8 	.word	0x200005e8

08000508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	return 1;
 800050c:	2301      	movs	r3, #1
}
 800050e:	4618      	mov	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <_kill>:

int _kill(int pid, int sig)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000520:	f002 fb8e 	bl	8002c40 <__errno>
 8000524:	4603      	mov	r3, r0
 8000526:	2216      	movs	r2, #22
 8000528:	601a      	str	r2, [r3, #0]
	return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_exit>:

void _exit (int status)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800053e:	f04f 31ff 	mov.w	r1, #4294967295
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ffe7 	bl	8000516 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000548:	e7fe      	b.n	8000548 <_exit+0x12>

0800054a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	60b9      	str	r1, [r7, #8]
 8000554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e00a      	b.n	8000572 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800055c:	f3af 8000 	nop.w
 8000560:	4601      	mov	r1, r0
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	60ba      	str	r2, [r7, #8]
 8000568:	b2ca      	uxtb	r2, r1
 800056a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	429a      	cmp	r2, r3
 8000578:	dbf0      	blt.n	800055c <_read+0x12>
	}

return len;
 800057a:	687b      	ldr	r3, [r7, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e009      	b.n	80005aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	60ba      	str	r2, [r7, #8]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbf1      	blt.n	8000596 <_write+0x12>
	}
	return len;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_close>:

int _close(int file)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	return -1;
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e2:	605a      	str	r2, [r3, #4]
	return 0;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <_isatty>:

int _isatty(int file)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	return 1;
 80005f8:	2301      	movs	r3, #1
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <_sbrk+0x5c>)
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <_sbrk+0x60>)
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <_sbrk+0x64>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <_sbrk+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	429a      	cmp	r2, r3
 800064a:	d207      	bcs.n	800065c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800064c:	f002 faf8 	bl	8002c40 <__errno>
 8000650:	4603      	mov	r3, r0
 8000652:	220c      	movs	r2, #12
 8000654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e009      	b.n	8000670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <_sbrk+0x64>)
 800066c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20002000 	.word	0x20002000
 800067c:	00000400 	.word	0x00000400
 8000680:	2000008c 	.word	0x2000008c
 8000684:	20000678 	.word	0x20000678

08000688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006a0:	480a      	ldr	r0, [pc, #40]	; (80006cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffe5 	bl	8000688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f002 fad7 	bl	8002c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fdc5 	bl	8000250 <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r3, =_sidata
 80006c8:	08004554 	.word	0x08004554
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006d0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80006d4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80006d8:	20000678 	.word	0x20000678

080006dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_IRQHandler>

080006de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f944 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 f805 	bl	80006f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ee:	f7ff fe35 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x54>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x58>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f95f 	bl	80009da <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e00e      	b.n	8000744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b0f      	cmp	r3, #15
 800072a:	d80a      	bhi.n	8000742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072c:	2200      	movs	r2, #0
 800072e:	6879      	ldr	r1, [r7, #4]
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 f927 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_InitTick+0x5c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4413      	add	r3, r2
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <HAL_IncTick+0x20>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000008 	.word	0x20000008
 8000778:	20000630 	.word	0x20000630

0800077c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000630 	.word	0x20000630

08000790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff fff0 	bl	800077c <HAL_GetTick>
 800079c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a8:	d005      	beq.n	80007b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_Delay+0x44>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4413      	add	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007b6:	bf00      	nop
 80007b8:	f7ff ffe0 	bl	800077c <HAL_GetTick>
 80007bc:	4602      	mov	r2, r0
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d8f7      	bhi.n	80007b8 <HAL_Delay+0x28>
  {
  }
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000008 	.word	0x20000008

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	db0b      	blt.n	8000866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 021f 	and.w	r2, r3, #31
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <__NVIC_EnableIRQ+0x34>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	2001      	movs	r0, #1
 800085e:	fa00 f202 	lsl.w	r2, r0, r2
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f7ff ff90 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff2d 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff42 	bl	8000820 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff35 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa2 	bl	800092c <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b08b      	sub	sp, #44	; 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a06:	e169      	b.n	8000cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f040 8158 	bne.w	8000cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a9a      	ldr	r2, [pc, #616]	; (8000c94 <HAL_GPIO_Init+0x2a0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d05e      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a30:	4a98      	ldr	r2, [pc, #608]	; (8000c94 <HAL_GPIO_Init+0x2a0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d875      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a36:	4a98      	ldr	r2, [pc, #608]	; (8000c98 <HAL_GPIO_Init+0x2a4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d058      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a3c:	4a96      	ldr	r2, [pc, #600]	; (8000c98 <HAL_GPIO_Init+0x2a4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d86f      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a42:	4a96      	ldr	r2, [pc, #600]	; (8000c9c <HAL_GPIO_Init+0x2a8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d052      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a48:	4a94      	ldr	r2, [pc, #592]	; (8000c9c <HAL_GPIO_Init+0x2a8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d869      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a4e:	4a94      	ldr	r2, [pc, #592]	; (8000ca0 <HAL_GPIO_Init+0x2ac>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d04c      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a54:	4a92      	ldr	r2, [pc, #584]	; (8000ca0 <HAL_GPIO_Init+0x2ac>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d863      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a92      	ldr	r2, [pc, #584]	; (8000ca4 <HAL_GPIO_Init+0x2b0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d046      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
 8000a60:	4a90      	ldr	r2, [pc, #576]	; (8000ca4 <HAL_GPIO_Init+0x2b0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d85d      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a66:	2b12      	cmp	r3, #18
 8000a68:	d82a      	bhi.n	8000ac0 <HAL_GPIO_Init+0xcc>
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d859      	bhi.n	8000b22 <HAL_GPIO_Init+0x12e>
 8000a6e:	a201      	add	r2, pc, #4	; (adr r2, 8000a74 <HAL_GPIO_Init+0x80>)
 8000a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a74:	08000aef 	.word	0x08000aef
 8000a78:	08000ac9 	.word	0x08000ac9
 8000a7c:	08000adb 	.word	0x08000adb
 8000a80:	08000b1d 	.word	0x08000b1d
 8000a84:	08000b23 	.word	0x08000b23
 8000a88:	08000b23 	.word	0x08000b23
 8000a8c:	08000b23 	.word	0x08000b23
 8000a90:	08000b23 	.word	0x08000b23
 8000a94:	08000b23 	.word	0x08000b23
 8000a98:	08000b23 	.word	0x08000b23
 8000a9c:	08000b23 	.word	0x08000b23
 8000aa0:	08000b23 	.word	0x08000b23
 8000aa4:	08000b23 	.word	0x08000b23
 8000aa8:	08000b23 	.word	0x08000b23
 8000aac:	08000b23 	.word	0x08000b23
 8000ab0:	08000b23 	.word	0x08000b23
 8000ab4:	08000b23 	.word	0x08000b23
 8000ab8:	08000ad1 	.word	0x08000ad1
 8000abc:	08000ae5 	.word	0x08000ae5
 8000ac0:	4a79      	ldr	r2, [pc, #484]	; (8000ca8 <HAL_GPIO_Init+0x2b4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d013      	beq.n	8000aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ac6:	e02c      	b.n	8000b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e029      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e024      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e01f      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	330c      	adds	r3, #12
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e01a      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000af6:	2304      	movs	r3, #4
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e013      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	611a      	str	r2, [r3, #16]
          break;
 8000b0e:	e009      	b.n	8000b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	615a      	str	r2, [r3, #20]
          break;
 8000b1a:	e003      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e000      	b.n	8000b24 <HAL_GPIO_Init+0x130>
          break;
 8000b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2bff      	cmp	r3, #255	; 0xff
 8000b28:	d801      	bhi.n	8000b2e <HAL_GPIO_Init+0x13a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	e001      	b.n	8000b32 <HAL_GPIO_Init+0x13e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	2bff      	cmp	r3, #255	; 0xff
 8000b38:	d802      	bhi.n	8000b40 <HAL_GPIO_Init+0x14c>
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x152>
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	3b08      	subs	r3, #8
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	401a      	ands	r2, r3
 8000b58:	6a39      	ldr	r1, [r7, #32]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	431a      	orrs	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80b1 	beq.w	8000cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b74:	4b4d      	ldr	r3, [pc, #308]	; (8000cac <HAL_GPIO_Init+0x2b8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a4c      	ldr	r2, [pc, #304]	; (8000cac <HAL_GPIO_Init+0x2b8>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b4a      	ldr	r3, [pc, #296]	; (8000cac <HAL_GPIO_Init+0x2b8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b8c:	4a48      	ldr	r2, [pc, #288]	; (8000cb0 <HAL_GPIO_Init+0x2bc>)
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a40      	ldr	r2, [pc, #256]	; (8000cb4 <HAL_GPIO_Init+0x2c0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3f      	ldr	r2, [pc, #252]	; (8000cb8 <HAL_GPIO_Init+0x2c4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1e8>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3e      	ldr	r2, [pc, #248]	; (8000cbc <HAL_GPIO_Init+0x2c8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a3d      	ldr	r2, [pc, #244]	; (8000cc0 <HAL_GPIO_Init+0x2cc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1e0>
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e004      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <HAL_GPIO_Init+0x1ee>
 8000be0:	2300      	movs	r3, #0
 8000be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be4:	f002 0203 	and.w	r2, r2, #3
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf2:	492f      	ldr	r1, [pc, #188]	; (8000cb0 <HAL_GPIO_Init+0x2bc>)
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	492c      	ldr	r1, [pc, #176]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4928      	ldr	r1, [pc, #160]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4922      	ldr	r1, [pc, #136]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	491e      	ldr	r1, [pc, #120]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	4918      	ldr	r1, [pc, #96]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	608b      	str	r3, [r1, #8]
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	4914      	ldr	r1, [pc, #80]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d021      	beq.n	8000cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	490e      	ldr	r1, [pc, #56]	; (8000cc4 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60cb      	str	r3, [r1, #12]
 8000c90:	e021      	b.n	8000cd6 <HAL_GPIO_Init+0x2e2>
 8000c92:	bf00      	nop
 8000c94:	10320000 	.word	0x10320000
 8000c98:	10310000 	.word	0x10310000
 8000c9c:	10220000 	.word	0x10220000
 8000ca0:	10210000 	.word	0x10210000
 8000ca4:	10120000 	.word	0x10120000
 8000ca8:	10110000 	.word	0x10110000
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	40011400 	.word	0x40011400
 8000cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_GPIO_Init+0x304>)
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4909      	ldr	r1, [pc, #36]	; (8000cf8 <HAL_GPIO_Init+0x304>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	3301      	adds	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f47f ae8e 	bne.w	8000a08 <HAL_GPIO_Init+0x14>
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	372c      	adds	r7, #44	; 0x2c
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e26c      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8087 	beq.w	8000e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d1c:	4b92      	ldr	r3, [pc, #584]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d00c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d28:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d112      	bne.n	8000d5a <HAL_RCC_OscConfig+0x5e>
 8000d34:	4b8c      	ldr	r3, [pc, #560]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d40:	d10b      	bne.n	8000d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d06c      	beq.n	8000e28 <HAL_RCC_OscConfig+0x12c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d168      	bne.n	8000e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e246      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d62:	d106      	bne.n	8000d72 <HAL_RCC_OscConfig+0x76>
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a7f      	ldr	r2, [pc, #508]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e02e      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x98>
 8000d7a:	4b7b      	ldr	r3, [pc, #492]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a7a      	ldr	r2, [pc, #488]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a77      	ldr	r2, [pc, #476]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e01d      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0xbc>
 8000d9e:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a71      	ldr	r2, [pc, #452]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a6a      	ldr	r2, [pc, #424]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a67      	ldr	r2, [pc, #412]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d013      	beq.n	8000e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fcd0 	bl	800077c <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fccc 	bl	800077c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1fa      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0xe4>
 8000dfe:	e014      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fcbc 	bl	800077c <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fcb8 	bl	800077c <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e1e6      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x10c>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d063      	beq.n	8000efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e36:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00b      	beq.n	8000e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d11c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x18c>
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d116      	bne.n	8000e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <HAL_RCC_OscConfig+0x176>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d001      	beq.n	8000e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e1ba      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4939      	ldr	r1, [pc, #228]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e86:	e03a      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d020      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_RCC_OscConfig+0x270>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e96:	f7ff fc71 	bl	800077c <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fc6d 	bl	800077c <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e19b      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4927      	ldr	r1, [pc, #156]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_RCC_OscConfig+0x270>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fc50 	bl	800077c <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fc4c 	bl	800077c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e17a      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d03a      	beq.n	8000f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d019      	beq.n	8000f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fc30 	bl	800077c <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc2c 	bl	800077c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e15a      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 faaa 	bl	8001498 <RCC_Delay>
 8000f44:	e01c      	b.n	8000f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fc16 	bl	800077c <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f52:	e00f      	b.n	8000f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fc12 	bl	800077c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d908      	bls.n	8000f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e140      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	42420000 	.word	0x42420000
 8000f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f74:	4b9e      	ldr	r3, [pc, #632]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e9      	bne.n	8000f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80a6 	beq.w	80010da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f92:	4b97      	ldr	r3, [pc, #604]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10d      	bne.n	8000fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b94      	ldr	r3, [pc, #592]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a93      	ldr	r2, [pc, #588]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b91      	ldr	r3, [pc, #580]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	4b8e      	ldr	r3, [pc, #568]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d118      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a8a      	ldr	r2, [pc, #552]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fbd3 	bl	800077c <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fda:	f7ff fbcf 	bl	800077c <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e0fd      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x312>
 8001000:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e02d      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x334>
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a75      	ldr	r2, [pc, #468]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a72      	ldr	r2, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	e01c      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b05      	cmp	r3, #5
 8001036:	d10c      	bne.n	8001052 <HAL_RCC_OscConfig+0x356>
 8001038:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4a6c      	ldr	r2, [pc, #432]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6213      	str	r3, [r2, #32]
 8001044:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a69      	ldr	r2, [pc, #420]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	e00b      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 8001052:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a66      	ldr	r2, [pc, #408]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a63      	ldr	r2, [pc, #396]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d015      	beq.n	800109e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb83 	bl	800077c <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fb7f 	bl	800077c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	; 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e0ab      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ee      	beq.n	800107a <HAL_RCC_OscConfig+0x37e>
 800109c:	e014      	b.n	80010c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109e:	f7ff fb6d 	bl	800077c <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fb69 	bl	800077c <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e095      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ee      	bne.n	80010a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ce:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8081 	beq.w	80011e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d061      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d146      	bne.n	8001186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <HAL_RCC_OscConfig+0x4fc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fb3d 	bl	800077c <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001106:	f7ff fb39 	bl	800077c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e067      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d108      	bne.n	8001140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f023 020f 	bic.w	r2, r3, #15
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	492d      	ldr	r1, [pc, #180]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a19      	ldr	r1, [r3, #32]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	430b      	orrs	r3, r1
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <HAL_RCC_OscConfig+0x4fc>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fb0d 	bl	800077c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fb09 	bl	800077c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e037      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x46a>
 8001184:	e02f      	b.n	80011e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_RCC_OscConfig+0x4fc>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff faf6 	bl	800077c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff faf2 	bl	800077c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e020      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x498>
 80011b2:	e018      	b.n	80011e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e013      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40007000 	.word	0x40007000
 80011f8:	42420060 	.word	0x42420060

080011fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0a0      	b.n	8001352 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b4c      	ldr	r3, [pc, #304]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 800122e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a45      	ldr	r2, [pc, #276]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800124a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b43      	ldr	r3, [pc, #268]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4940      	ldr	r1, [pc, #256]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d040      	beq.n	80012ec <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e067      	b.n	8001352 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e05b      	b.n	8001352 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e053      	b.n	8001352 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4929      	ldr	r1, [pc, #164]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fa5e 	bl	800077c <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fa5a 	bl	800077c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e03b      	b.n	8001352 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4915      	ldr	r1, [pc, #84]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	490d      	ldr	r1, [pc, #52]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800132a:	f000 f81f 	bl	800136c <HAL_RCC_GetSysClockFreq>
 800132e:	4602      	mov	r2, r0
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_RCC_ClockConfig+0x160>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <HAL_RCC_ClockConfig+0x164>)
 800133c:	5ccb      	ldrb	r3, [r1, r3]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_RCC_ClockConfig+0x168>)
 8001344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_RCC_ClockConfig+0x16c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f9d4 	bl	80006f8 <HAL_InitTick>

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	08003fcc 	.word	0x08003fcc
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800136c:	b490      	push	{r4, r7}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001374:	f107 0414 	add.w	r4, r7, #20
 8001378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001380:	1d3c      	adds	r4, r7, #4
 8001382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	; 0x34
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_RCC_GetSysClockFreq+0xbc>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d002      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d003      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x4c>
 80013b0:	e02c      	b.n	800140c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_GetSysClockFreq+0xc0>)
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013b6:	e02c      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013c4:	4413      	add	r3, r2
 80013c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d012      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013e2:	4413      	add	r3, r2
 80013e4:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_RCC_GetSysClockFreq+0xc0>)
 80013ee:	fb02 f203 	mul.w	r2, r2, r3
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
 80013fa:	e004      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800140a:	e002      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_GetSysClockFreq+0xc0>)
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001414:	4618      	mov	r0, r3
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bc90      	pop	{r4, r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	08003fac 	.word	0x08003fac
 8001424:	08003fbc 	.word	0x08003fbc
 8001428:	40021000 	.word	0x40021000
 800142c:	007a1200 	.word	0x007a1200
 8001430:	003d0900 	.word	0x003d0900

08001434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001438:	4b02      	ldr	r3, [pc, #8]	; (8001444 <HAL_RCC_GetHCLKFreq+0x10>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800144c:	f7ff fff2 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	4903      	ldr	r1, [pc, #12]	; (800146c <HAL_RCC_GetPCLK1Freq+0x24>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	08003fdc 	.word	0x08003fdc

08001470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001474:	f7ff ffde 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	0adb      	lsrs	r3, r3, #11
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	4903      	ldr	r1, [pc, #12]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	08003fdc 	.word	0x08003fdc

08001498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <RCC_Delay+0x34>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <RCC_Delay+0x38>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0a5b      	lsrs	r3, r3, #9
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014b4:	bf00      	nop
  }
  while (Delay --);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1e5a      	subs	r2, r3, #1
 80014ba:	60fa      	str	r2, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f9      	bne.n	80014b4 <RCC_Delay+0x1c>
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	20000000 	.word	0x20000000
 80014d0:	10624dd3 	.word	0x10624dd3

080014d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e041      	b.n	800156a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe ff60 	bl	80003c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3304      	adds	r3, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4610      	mov	r0, r2
 8001514:	f000 f9e2 	bl	80018dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d001      	beq.n	800158c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e03f      	b.n	800160c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_TIM_Base_Start_IT+0xa4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_TIM_Base_Start_IT+0x62>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b6:	d00e      	beq.n	80015d6 <HAL_TIM_Base_Start_IT+0x62>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_TIM_Base_Start_IT+0xa8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d009      	beq.n	80015d6 <HAL_TIM_Base_Start_IT+0x62>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_TIM_Base_Start_IT+0xac>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d004      	beq.n	80015d6 <HAL_TIM_Base_Start_IT+0x62>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_TIM_Base_Start_IT+0xb0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d111      	bne.n	80015fa <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d010      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015f8:	e007      	b.n	800160a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40012c00 	.word	0x40012c00
 800161c:	40000400 	.word	0x40000400
 8001620:	40000800 	.word	0x40000800
 8001624:	40014000 	.word	0x40014000

08001628 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	f241 1311 	movw	r3, #4369	; 0x1111
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10f      	bne.n	8001670 <HAL_TIM_Base_Stop_IT+0x48>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	f240 4344 	movw	r3, #1092	; 0x444
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <HAL_TIM_Base_Stop_IT+0x48>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d122      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d11b      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0202 	mvn.w	r2, #2
 80016b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8ed 	bl	80018a6 <HAL_TIM_IC_CaptureCallback>
 80016cc:	e005      	b.n	80016da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f8e0 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8ef 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d122      	bne.n	8001734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d11b      	bne.n	8001734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0204 	mvn.w	r2, #4
 8001704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f8c3 	bl	80018a6 <HAL_TIM_IC_CaptureCallback>
 8001720:	e005      	b.n	800172e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f8b6 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f8c5 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b08      	cmp	r3, #8
 8001740:	d122      	bne.n	8001788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	d11b      	bne.n	8001788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0208 	mvn.w	r2, #8
 8001758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2204      	movs	r2, #4
 800175e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f899 	bl	80018a6 <HAL_TIM_IC_CaptureCallback>
 8001774:	e005      	b.n	8001782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f88c 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f89b 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b10      	cmp	r3, #16
 8001794:	d122      	bne.n	80017dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d11b      	bne.n	80017dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0210 	mvn.w	r2, #16
 80017ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2208      	movs	r2, #8
 80017b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f86f 	bl	80018a6 <HAL_TIM_IC_CaptureCallback>
 80017c8:	e005      	b.n	80017d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f862 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f871 	bl	80018b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10e      	bne.n	8001808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0201 	mvn.w	r2, #1
 8001800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f001 f94a 	bl	8002a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	2b80      	cmp	r3, #128	; 0x80
 8001814:	d10e      	bne.n	8001834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d107      	bne.n	8001834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800182c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f943 	bl	8001aba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183e:	2b40      	cmp	r3, #64	; 0x40
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184c:	2b40      	cmp	r3, #64	; 0x40
 800184e:	d107      	bne.n	8001860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f835 	bl	80018ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b20      	cmp	r3, #32
 800186c:	d10e      	bne.n	800188c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b20      	cmp	r3, #32
 800187a:	d107      	bne.n	800188c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0220 	mvn.w	r2, #32
 8001884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f90e 	bl	8001aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a35      	ldr	r2, [pc, #212]	; (80019c4 <TIM_Base_SetConfig+0xe8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00b      	beq.n	800190c <TIM_Base_SetConfig+0x30>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fa:	d007      	beq.n	800190c <TIM_Base_SetConfig+0x30>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <TIM_Base_SetConfig+0xec>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d003      	beq.n	800190c <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <TIM_Base_SetConfig+0xf0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d108      	bne.n	800191e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <TIM_Base_SetConfig+0xe8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d017      	beq.n	8001956 <TIM_Base_SetConfig+0x7a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192c:	d013      	beq.n	8001956 <TIM_Base_SetConfig+0x7a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <TIM_Base_SetConfig+0xec>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00f      	beq.n	8001956 <TIM_Base_SetConfig+0x7a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a24      	ldr	r2, [pc, #144]	; (80019cc <TIM_Base_SetConfig+0xf0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00b      	beq.n	8001956 <TIM_Base_SetConfig+0x7a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <TIM_Base_SetConfig+0xf4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <TIM_Base_SetConfig+0x7a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <TIM_Base_SetConfig+0xf8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d003      	beq.n	8001956 <TIM_Base_SetConfig+0x7a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <TIM_Base_SetConfig+0xfc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d108      	bne.n	8001968 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <TIM_Base_SetConfig+0xe8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00b      	beq.n	80019ac <TIM_Base_SetConfig+0xd0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <TIM_Base_SetConfig+0xf4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d007      	beq.n	80019ac <TIM_Base_SetConfig+0xd0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <TIM_Base_SetConfig+0xf8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d003      	beq.n	80019ac <TIM_Base_SetConfig+0xd0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <TIM_Base_SetConfig+0xfc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d103      	bne.n	80019b4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	615a      	str	r2, [r3, #20]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40012c00 	.word	0x40012c00
 80019c8:	40000400 	.word	0x40000400
 80019cc:	40000800 	.word	0x40000800
 80019d0:	40014000 	.word	0x40014000
 80019d4:	40014400 	.word	0x40014400
 80019d8:	40014800 	.word	0x40014800

080019dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e04b      	b.n	8001a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a40:	d00e      	beq.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d004      	beq.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d10c      	bne.n	8001a7a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40000800 	.word	0x40000800
 8001aa4:	40014000 	.word	0x40014000

08001aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e03f      	b.n	8001b5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe fc8a 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2224      	movs	r2, #36	; 0x24
 8001afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f905 	bl	8001d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08a      	sub	sp, #40	; 0x28
 8001b6a:	af02      	add	r7, sp, #8
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d17c      	bne.n	8001c80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_UART_Transmit+0x2c>
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e075      	b.n	8001c82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_UART_Transmit+0x3e>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e06e      	b.n	8001c82 <HAL_UART_Transmit+0x11c>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2221      	movs	r2, #33	; 0x21
 8001bb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bba:	f7fe fddf 	bl	800077c <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd4:	d108      	bne.n	8001be8 <HAL_UART_Transmit+0x82>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e003      	b.n	8001bf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001bf8:	e02a      	b.n	8001c50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f840 	bl	8001c8a <UART_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e036      	b.n	8001c82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10b      	bne.n	8001c32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	e007      	b.n	8001c42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1cf      	bne.n	8001bfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2200      	movs	r2, #0
 8001c62:	2140      	movs	r1, #64	; 0x40
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f810 	bl	8001c8a <UART_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e006      	b.n	8001c82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9a:	e02c      	b.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d028      	beq.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <UART_WaitOnFlagUntilTimeout+0x30>
 8001caa:	f7fe fd67 	bl	800077c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d21d      	bcs.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e00f      	b.n	8001d16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	bf0c      	ite	eq
 8001d06:	2301      	moveq	r3, #1
 8001d08:	2300      	movne	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d0c3      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d60:	f023 030c 	bic.w	r3, r3, #12
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a55      	ldr	r2, [pc, #340]	; (8001ee0 <UART_SetConfig+0x1c0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d103      	bne.n	8001d96 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d8e:	f7ff fb6f 	bl	8001470 <HAL_RCC_GetPCLK2Freq>
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	e002      	b.n	8001d9c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d96:	f7ff fb57 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
 8001d9a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da4:	d14c      	bne.n	8001e40 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009a      	lsls	r2, r3, #2
 8001db0:	441a      	add	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	4a49      	ldr	r2, [pc, #292]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	0119      	lsls	r1, r3, #4
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001dde:	fba3 0302 	umull	r0, r3, r3, r2
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2064      	movs	r0, #100	; 0x64
 8001de6:	fb00 f303 	mul.w	r3, r0, r3
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	3332      	adds	r3, #50	; 0x32
 8001df0:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dfe:	4419      	add	r1, r3
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	441a      	add	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e16:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001e18:	fba3 0302 	umull	r0, r3, r3, r2
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	2064      	movs	r0, #100	; 0x64
 8001e20:	fb00 f303 	mul.w	r3, r0, r3
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	3332      	adds	r3, #50	; 0x32
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	f003 0207 	and.w	r2, r3, #7
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	440a      	add	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8001e3e:	e04a      	b.n	8001ed6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	009a      	lsls	r2, r3, #2
 8001e4a:	441a      	add	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	0119      	lsls	r1, r3, #4
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	009a      	lsls	r2, r3, #2
 8001e6a:	441a      	add	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001e78:	fba3 0302 	umull	r0, r3, r3, r2
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	2064      	movs	r0, #100	; 0x64
 8001e80:	fb00 f303 	mul.w	r3, r0, r3
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	3332      	adds	r3, #50	; 0x32
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e96:	4419      	add	r1, r3
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009a      	lsls	r2, r3, #2
 8001ea2:	441a      	add	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	2064      	movs	r0, #100	; 0x64
 8001eb8:	fb00 f303 	mul.w	r3, r0, r3
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	3332      	adds	r3, #50	; 0x32
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <UART_SetConfig+0x1c4>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	440a      	add	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	51eb851f 	.word	0x51eb851f

08001ee8 <Xoodoo_StaticInitialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_StaticInitialize( void )
{
}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <Xoodoo_Initialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_Initialize(void *state)
{
    memset(state, 0, NLANES*sizeof(tXoodooLane));
 8001eec:	2230      	movs	r2, #48	; 0x30
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f000 bef0 	b.w	8002cd4 <memset>

08001ef4 <Xoodoo_AddByte>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddByte(void *state, unsigned char byte, unsigned int offset)
{
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001ef4:	2a2f      	cmp	r2, #47	; 0x2f
{
 8001ef6:	b508      	push	{r3, lr}
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001ef8:	d803      	bhi.n	8001f02 <Xoodoo_AddByte+0xe>
    ((unsigned char *)state)[offset] ^= byte;
 8001efa:	5c83      	ldrb	r3, [r0, r2]
 8001efc:	4059      	eors	r1, r3
 8001efe:	5481      	strb	r1, [r0, r2]
}
 8001f00:	bd08      	pop	{r3, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001f02:	2127      	movs	r1, #39	; 0x27
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <Xoodoo_AddByte+0x1c>)
 8001f06:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <Xoodoo_AddByte+0x20>)
 8001f08:	4803      	ldr	r0, [pc, #12]	; (8001f18 <Xoodoo_AddByte+0x24>)
 8001f0a:	f000 fe7b 	bl	8002c04 <__assert_func>
 8001f0e:	bf00      	nop
 8001f10:	08003fe4 	.word	0x08003fe4
 8001f14:	080040f4 	.word	0x080040f4
 8001f18:	08004008 	.word	0x08004008

08001f1c <Xoodoo_AddBytes>:

void Xoodoo_AddBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
    unsigned int i;

    assert(offset < NLANES*sizeof(tXoodooLane));
 8001f1c:	2a2f      	cmp	r2, #47	; 0x2f
{
 8001f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001f20:	d848      	bhi.n	8001fb4 <Xoodoo_AddBytes+0x98>
 8001f22:	4616      	mov	r6, r2
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8001f24:	441a      	add	r2, r3
 8001f26:	2a30      	cmp	r2, #48	; 0x30
 8001f28:	d84a      	bhi.n	8001fc0 <Xoodoo_AddBytes+0xa4>
    for(i=0; i<length; i++)
 8001f2a:	b3a3      	cbz	r3, 8001f96 <Xoodoo_AddBytes+0x7a>
 8001f2c:	1d32      	adds	r2, r6, #4
 8001f2e:	4402      	add	r2, r0
 8001f30:	1984      	adds	r4, r0, r6
 8001f32:	1d0d      	adds	r5, r1, #4
 8001f34:	42ac      	cmp	r4, r5
 8001f36:	bf38      	it	cc
 8001f38:	4291      	cmpcc	r1, r2
 8001f3a:	d32d      	bcc.n	8001f98 <Xoodoo_AddBytes+0x7c>
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	2a04      	cmp	r2, #4
 8001f40:	d92a      	bls.n	8001f98 <Xoodoo_AddBytes+0x7c>
 8001f42:	460f      	mov	r7, r1
 8001f44:	4622      	mov	r2, r4
 8001f46:	f023 0e03 	bic.w	lr, r3, #3
 8001f4a:	44a6      	add	lr, r4
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f4c:	f854 5b04 	ldr.w	r5, [r4], #4
 8001f50:	f857 cb04 	ldr.w	ip, [r7], #4
 8001f54:	4574      	cmp	r4, lr
 8001f56:	ea85 050c 	eor.w	r5, r5, ip
 8001f5a:	f842 5b04 	str.w	r5, [r2], #4
 8001f5e:	d1f5      	bne.n	8001f4c <Xoodoo_AddBytes+0x30>
 8001f60:	079c      	lsls	r4, r3, #30
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	d016      	beq.n	8001f96 <Xoodoo_AddBytes+0x7a>
 8001f68:	18b7      	adds	r7, r6, r2
 8001f6a:	f810 c007 	ldrb.w	ip, [r0, r7]
 8001f6e:	5c8c      	ldrb	r4, [r1, r2]
    for(i=0; i<length; i++)
 8001f70:	1c55      	adds	r5, r2, #1
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f72:	ea84 040c 	eor.w	r4, r4, ip
    for(i=0; i<length; i++)
 8001f76:	42ab      	cmp	r3, r5
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f78:	55c4      	strb	r4, [r0, r7]
    for(i=0; i<length; i++)
 8001f7a:	d90c      	bls.n	8001f96 <Xoodoo_AddBytes+0x7a>
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f7c:	1977      	adds	r7, r6, r5
 8001f7e:	5d4c      	ldrb	r4, [r1, r5]
 8001f80:	5dc5      	ldrb	r5, [r0, r7]
    for(i=0; i<length; i++)
 8001f82:	3202      	adds	r2, #2
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f84:	406c      	eors	r4, r5
    for(i=0; i<length; i++)
 8001f86:	4293      	cmp	r3, r2
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f88:	55c4      	strb	r4, [r0, r7]
    for(i=0; i<length; i++)
 8001f8a:	d904      	bls.n	8001f96 <Xoodoo_AddBytes+0x7a>
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001f8c:	4416      	add	r6, r2
 8001f8e:	5c8b      	ldrb	r3, [r1, r2]
 8001f90:	5d82      	ldrb	r2, [r0, r6]
 8001f92:	4053      	eors	r3, r2
 8001f94:	5583      	strb	r3, [r0, r6]
}
 8001f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f98:	3e01      	subs	r6, #1
 8001f9a:	1e4a      	subs	r2, r1, #1
 8001f9c:	4430      	add	r0, r6
 8001f9e:	4413      	add	r3, r2
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001fa0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8001fa4:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    for(i=0; i<length; i++)
 8001fa8:	429a      	cmp	r2, r3
        ((unsigned char *)state)[offset+i] ^= data[i];
 8001faa:	ea81 0104 	eor.w	r1, r1, r4
 8001fae:	7001      	strb	r1, [r0, #0]
    for(i=0; i<length; i++)
 8001fb0:	d1f6      	bne.n	8001fa0 <Xoodoo_AddBytes+0x84>
}
 8001fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001fb4:	2131      	movs	r1, #49	; 0x31
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <Xoodoo_AddBytes+0xb0>)
 8001fb8:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <Xoodoo_AddBytes+0xb4>)
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <Xoodoo_AddBytes+0xb8>)
 8001fbc:	f000 fe22 	bl	8002c04 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8001fc0:	2132      	movs	r1, #50	; 0x32
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <Xoodoo_AddBytes+0xbc>)
 8001fc4:	4a02      	ldr	r2, [pc, #8]	; (8001fd0 <Xoodoo_AddBytes+0xb4>)
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <Xoodoo_AddBytes+0xb8>)
 8001fc8:	f000 fe1c 	bl	8002c04 <__assert_func>
 8001fcc:	08003fe4 	.word	0x08003fe4
 8001fd0:	08004104 	.word	0x08004104
 8001fd4:	08004008 	.word	0x08004008
 8001fd8:	08004098 	.word	0x08004098

08001fdc <Xoodoo_ExtractBytes>:

/* ---------------------------------------------------------------- */

void Xoodoo_ExtractBytes(const void *state, unsigned char *data, unsigned int offset, unsigned int length)
{
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001fdc:	2a2f      	cmp	r2, #47	; 0x2f
{
 8001fde:	b538      	push	{r3, r4, r5, lr}
 8001fe0:	4614      	mov	r4, r2
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001fe2:	d80a      	bhi.n	8001ffa <Xoodoo_ExtractBytes+0x1e>
 8001fe4:	461a      	mov	r2, r3
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8001fe6:	18e3      	adds	r3, r4, r3
 8001fe8:	2b30      	cmp	r3, #48	; 0x30
 8001fea:	d80c      	bhi.n	8002006 <Xoodoo_ExtractBytes+0x2a>
 8001fec:	4605      	mov	r5, r0
 8001fee:	4608      	mov	r0, r1
    memcpy(data, (unsigned char*)state+offset, length);
 8001ff0:	1929      	adds	r1, r5, r4
}
 8001ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memcpy(data, (unsigned char*)state+offset, length);
 8001ff6:	f000 be5f 	b.w	8002cb8 <memcpy>
    assert(offset < NLANES*sizeof(tXoodooLane));
 8001ffa:	214c      	movs	r1, #76	; 0x4c
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <Xoodoo_ExtractBytes+0x38>)
 8001ffe:	4a06      	ldr	r2, [pc, #24]	; (8002018 <Xoodoo_ExtractBytes+0x3c>)
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <Xoodoo_ExtractBytes+0x40>)
 8002002:	f000 fdff 	bl	8002c04 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8002006:	214d      	movs	r1, #77	; 0x4d
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <Xoodoo_ExtractBytes+0x44>)
 800200a:	4a03      	ldr	r2, [pc, #12]	; (8002018 <Xoodoo_ExtractBytes+0x3c>)
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <Xoodoo_ExtractBytes+0x40>)
 800200e:	f000 fdf9 	bl	8002c04 <__assert_func>
 8002012:	bf00      	nop
 8002014:	08003fe4 	.word	0x08003fe4
 8002018:	08004114 	.word	0x08004114
 800201c:	08004008 	.word	0x08004008
 8002020:	08004098 	.word	0x08004098

08002024 <fromBytesToWords>:
static void fromBytesToWords(tXoodooLane *stateAsWords, const unsigned char *state)
{
    unsigned int i, j;

    for(i=0; i<NLANES; i++) {
        stateAsWords[i] = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	6003      	str	r3, [r0, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002028:	780a      	ldrb	r2, [r1, #0]
{
 800202a:	b410      	push	{r4}
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800202c:	6002      	str	r2, [r0, #0]
 800202e:	784c      	ldrb	r4, [r1, #1]
 8002030:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002034:	6002      	str	r2, [r0, #0]
 8002036:	788c      	ldrb	r4, [r1, #2]
 8002038:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800203c:	6002      	str	r2, [r0, #0]
 800203e:	78cc      	ldrb	r4, [r1, #3]
        stateAsWords[i] = 0;
 8002040:	6043      	str	r3, [r0, #4]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002042:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8002046:	6002      	str	r2, [r0, #0]
 8002048:	790a      	ldrb	r2, [r1, #4]
 800204a:	6042      	str	r2, [r0, #4]
 800204c:	794c      	ldrb	r4, [r1, #5]
 800204e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002052:	6042      	str	r2, [r0, #4]
 8002054:	798c      	ldrb	r4, [r1, #6]
 8002056:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800205a:	6042      	str	r2, [r0, #4]
 800205c:	79cc      	ldrb	r4, [r1, #7]
        stateAsWords[i] = 0;
 800205e:	6083      	str	r3, [r0, #8]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002060:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8002064:	6042      	str	r2, [r0, #4]
 8002066:	7a0a      	ldrb	r2, [r1, #8]
 8002068:	6082      	str	r2, [r0, #8]
 800206a:	7a4c      	ldrb	r4, [r1, #9]
 800206c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002070:	6082      	str	r2, [r0, #8]
 8002072:	7a8c      	ldrb	r4, [r1, #10]
 8002074:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002078:	6082      	str	r2, [r0, #8]
 800207a:	7acc      	ldrb	r4, [r1, #11]
        stateAsWords[i] = 0;
 800207c:	60c3      	str	r3, [r0, #12]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800207e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8002082:	6082      	str	r2, [r0, #8]
 8002084:	7b0a      	ldrb	r2, [r1, #12]
 8002086:	60c2      	str	r2, [r0, #12]
 8002088:	7b4c      	ldrb	r4, [r1, #13]
 800208a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800208e:	60c2      	str	r2, [r0, #12]
 8002090:	7b8c      	ldrb	r4, [r1, #14]
 8002092:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002096:	60c2      	str	r2, [r0, #12]
 8002098:	7bcc      	ldrb	r4, [r1, #15]
        stateAsWords[i] = 0;
 800209a:	6103      	str	r3, [r0, #16]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800209c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80020a0:	60c2      	str	r2, [r0, #12]
 80020a2:	7c0a      	ldrb	r2, [r1, #16]
 80020a4:	6102      	str	r2, [r0, #16]
 80020a6:	7c4c      	ldrb	r4, [r1, #17]
 80020a8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80020ac:	6102      	str	r2, [r0, #16]
 80020ae:	7c8c      	ldrb	r4, [r1, #18]
 80020b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80020b4:	6102      	str	r2, [r0, #16]
 80020b6:	7ccc      	ldrb	r4, [r1, #19]
        stateAsWords[i] = 0;
 80020b8:	6143      	str	r3, [r0, #20]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80020ba:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80020be:	6102      	str	r2, [r0, #16]
 80020c0:	7d0a      	ldrb	r2, [r1, #20]
 80020c2:	6142      	str	r2, [r0, #20]
 80020c4:	7d4c      	ldrb	r4, [r1, #21]
 80020c6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80020ca:	6142      	str	r2, [r0, #20]
 80020cc:	7d8c      	ldrb	r4, [r1, #22]
 80020ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80020d2:	6142      	str	r2, [r0, #20]
 80020d4:	7dcc      	ldrb	r4, [r1, #23]
        stateAsWords[i] = 0;
 80020d6:	6183      	str	r3, [r0, #24]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80020d8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80020dc:	6142      	str	r2, [r0, #20]
 80020de:	7e0a      	ldrb	r2, [r1, #24]
 80020e0:	6182      	str	r2, [r0, #24]
 80020e2:	7e4c      	ldrb	r4, [r1, #25]
 80020e4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80020e8:	6182      	str	r2, [r0, #24]
 80020ea:	7e8c      	ldrb	r4, [r1, #26]
 80020ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80020f0:	6182      	str	r2, [r0, #24]
 80020f2:	7ecc      	ldrb	r4, [r1, #27]
        stateAsWords[i] = 0;
 80020f4:	61c3      	str	r3, [r0, #28]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 80020f6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80020fa:	6182      	str	r2, [r0, #24]
 80020fc:	7f0a      	ldrb	r2, [r1, #28]
 80020fe:	61c2      	str	r2, [r0, #28]
 8002100:	7f4c      	ldrb	r4, [r1, #29]
 8002102:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002106:	61c2      	str	r2, [r0, #28]
 8002108:	7f8c      	ldrb	r4, [r1, #30]
 800210a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800210e:	61c2      	str	r2, [r0, #28]
 8002110:	7fcc      	ldrb	r4, [r1, #31]
        stateAsWords[i] = 0;
 8002112:	6203      	str	r3, [r0, #32]
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002114:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8002118:	61c2      	str	r2, [r0, #28]
 800211a:	f891 2020 	ldrb.w	r2, [r1, #32]
 800211e:	6202      	str	r2, [r0, #32]
 8002120:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 8002124:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002128:	6202      	str	r2, [r0, #32]
 800212a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 800212e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002132:	6202      	str	r2, [r0, #32]
 8002134:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
        stateAsWords[i] = 0;
 8002138:	6243      	str	r3, [r0, #36]	; 0x24
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 800213a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800213e:	6202      	str	r2, [r0, #32]
 8002140:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
 8002144:	6242      	str	r2, [r0, #36]	; 0x24
 8002146:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800214a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800214e:	6242      	str	r2, [r0, #36]	; 0x24
 8002150:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8002154:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002158:	6242      	str	r2, [r0, #36]	; 0x24
 800215a:	f891 4027 	ldrb.w	r4, [r1, #39]	; 0x27
        stateAsWords[i] = 0;
 800215e:	6283      	str	r3, [r0, #40]	; 0x28
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002160:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8002164:	6242      	str	r2, [r0, #36]	; 0x24
 8002166:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800216a:	6282      	str	r2, [r0, #40]	; 0x28
 800216c:	f891 4029 	ldrb.w	r4, [r1, #41]	; 0x29
 8002170:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002174:	6282      	str	r2, [r0, #40]	; 0x28
 8002176:	f891 402a 	ldrb.w	r4, [r1, #42]	; 0x2a
 800217a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800217e:	6282      	str	r2, [r0, #40]	; 0x28
 8002180:	f891 402b 	ldrb.w	r4, [r1, #43]	; 0x2b
        stateAsWords[i] = 0;
 8002184:	62c3      	str	r3, [r0, #44]	; 0x2c
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002186:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800218a:	6282      	str	r2, [r0, #40]	; 0x28
 800218c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    }
}
 8002190:	bc10      	pop	{r4}
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8002192:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002194:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 8002198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800219c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800219e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 80021a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021a6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80021a8:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
 80021ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021b0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80021b2:	4770      	bx	lr

080021b4 <fromWordsToBytes>:
{
    unsigned int i, j;

    for(i=0; i<NLANES; i++)
        for(j=0; j<sizeof(tXoodooLane); j++)
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 80021b4:	680b      	ldr	r3, [r1, #0]
 80021b6:	7003      	strb	r3, [r0, #0]
 80021b8:	680b      	ldr	r3, [r1, #0]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	7043      	strb	r3, [r0, #1]
 80021be:	884b      	ldrh	r3, [r1, #2]
 80021c0:	7083      	strb	r3, [r0, #2]
 80021c2:	78cb      	ldrb	r3, [r1, #3]
 80021c4:	70c3      	strb	r3, [r0, #3]
 80021c6:	684b      	ldr	r3, [r1, #4]
 80021c8:	7103      	strb	r3, [r0, #4]
 80021ca:	684b      	ldr	r3, [r1, #4]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	7143      	strb	r3, [r0, #5]
 80021d0:	88cb      	ldrh	r3, [r1, #6]
 80021d2:	7183      	strb	r3, [r0, #6]
 80021d4:	79cb      	ldrb	r3, [r1, #7]
 80021d6:	71c3      	strb	r3, [r0, #7]
 80021d8:	688b      	ldr	r3, [r1, #8]
 80021da:	7203      	strb	r3, [r0, #8]
 80021dc:	688b      	ldr	r3, [r1, #8]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	7243      	strb	r3, [r0, #9]
 80021e2:	894b      	ldrh	r3, [r1, #10]
 80021e4:	7283      	strb	r3, [r0, #10]
 80021e6:	7acb      	ldrb	r3, [r1, #11]
 80021e8:	72c3      	strb	r3, [r0, #11]
 80021ea:	68cb      	ldr	r3, [r1, #12]
 80021ec:	7303      	strb	r3, [r0, #12]
 80021ee:	68cb      	ldr	r3, [r1, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	7343      	strb	r3, [r0, #13]
 80021f4:	89cb      	ldrh	r3, [r1, #14]
 80021f6:	7383      	strb	r3, [r0, #14]
 80021f8:	7bcb      	ldrb	r3, [r1, #15]
 80021fa:	73c3      	strb	r3, [r0, #15]
 80021fc:	690b      	ldr	r3, [r1, #16]
 80021fe:	7403      	strb	r3, [r0, #16]
 8002200:	690b      	ldr	r3, [r1, #16]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	7443      	strb	r3, [r0, #17]
 8002206:	8a4b      	ldrh	r3, [r1, #18]
 8002208:	7483      	strb	r3, [r0, #18]
 800220a:	7ccb      	ldrb	r3, [r1, #19]
 800220c:	74c3      	strb	r3, [r0, #19]
 800220e:	694b      	ldr	r3, [r1, #20]
 8002210:	7503      	strb	r3, [r0, #20]
 8002212:	694b      	ldr	r3, [r1, #20]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	7543      	strb	r3, [r0, #21]
 8002218:	8acb      	ldrh	r3, [r1, #22]
 800221a:	7583      	strb	r3, [r0, #22]
 800221c:	7dcb      	ldrb	r3, [r1, #23]
 800221e:	75c3      	strb	r3, [r0, #23]
 8002220:	698b      	ldr	r3, [r1, #24]
 8002222:	7603      	strb	r3, [r0, #24]
 8002224:	698b      	ldr	r3, [r1, #24]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	7643      	strb	r3, [r0, #25]
 800222a:	8b4b      	ldrh	r3, [r1, #26]
 800222c:	7683      	strb	r3, [r0, #26]
 800222e:	7ecb      	ldrb	r3, [r1, #27]
 8002230:	76c3      	strb	r3, [r0, #27]
 8002232:	69cb      	ldr	r3, [r1, #28]
 8002234:	7703      	strb	r3, [r0, #28]
 8002236:	69cb      	ldr	r3, [r1, #28]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	7743      	strb	r3, [r0, #29]
 800223c:	8bcb      	ldrh	r3, [r1, #30]
 800223e:	7783      	strb	r3, [r0, #30]
 8002240:	7fcb      	ldrb	r3, [r1, #31]
 8002242:	77c3      	strb	r3, [r0, #31]
 8002244:	6a0b      	ldr	r3, [r1, #32]
 8002246:	f880 3020 	strb.w	r3, [r0, #32]
 800224a:	6a0b      	ldr	r3, [r1, #32]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8002252:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8002254:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8002258:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
 800225c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8002260:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002262:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8002266:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 800226e:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
 8002270:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 8002274:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
 8002278:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 800227c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800227e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8002282:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 800228a:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
 800228c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8002290:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8002294:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 8002298:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800229a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800229e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
 80022a6:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
 80022a8:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 80022ac:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 80022b0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <Xoodoo_Round>:

static void Xoodoo_Round( tXoodooLane * a, tXoodooLane rc )
{
 80022b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022bc:	4604      	mov	r4, r0
 80022be:	f100 0310 	add.w	r3, r0, #16
 80022c2:	3020      	adds	r0, #32
 80022c4:	ea43 0200 	orr.w	r2, r3, r0
 80022c8:	4322      	orrs	r2, r4
 80022ca:	b099      	sub	sp, #100	; 0x64
 80022cc:	f012 0207 	ands.w	r2, r2, #7
 80022d0:	9103      	str	r1, [sp, #12]
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	f040 819b 	bne.w	800260e <Xoodoo_Round+0x356>
    tXoodooLane    p[NCOLUMS];
    tXoodooLane    e[NCOLUMS];

    /* Theta: Column Parity Mixer */
    for (x=0; x<NCOLUMS; ++x)
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 80022d8:	6a22      	ldr	r2, [r4, #32]
 80022da:	6925      	ldr	r5, [r4, #16]
 80022dc:	6961      	ldr	r1, [r4, #20]
 80022de:	4055      	eors	r5, r2
 80022e0:	6826      	ldr	r6, [r4, #0]
 80022e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022e4:	4075      	eors	r5, r6
 80022e6:	4051      	eors	r1, r2
 80022e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022ea:	69a2      	ldr	r2, [r4, #24]
 80022ec:	9504      	str	r5, [sp, #16]
 80022ee:	6865      	ldr	r5, [r4, #4]
 80022f0:	4056      	eors	r6, r2
 80022f2:	4069      	eors	r1, r5
 80022f4:	69e2      	ldr	r2, [r4, #28]
 80022f6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80022f8:	9105      	str	r1, [sp, #20]
 80022fa:	68a1      	ldr	r1, [r4, #8]
 80022fc:	406a      	eors	r2, r5
 80022fe:	68e5      	ldr	r5, [r4, #12]
 8002300:	4071      	eors	r1, r6
 8002302:	406a      	eors	r2, r5
 8002304:	9106      	str	r1, [sp, #24]
 8002306:	9207      	str	r2, [sp, #28]
    for (x=0; x<NCOLUMS; ++x)
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8002308:	9907      	ldr	r1, [sp, #28]
 800230a:	9a06      	ldr	r2, [sp, #24]
 800230c:	4323      	orrs	r3, r4
 800230e:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 8002312:	4318      	orrs	r0, r3
 8002314:	ea4f 48b1 	mov.w	r8, r1, ror #18
 8002318:	ea4f 43b2 	mov.w	r3, r2, ror #18
 800231c:	ea4f 4eb6 	mov.w	lr, r6, ror #18
 8002320:	ea4f 4cb5 	mov.w	ip, r5, ror #18
 8002324:	ea83 62f2 	eor.w	r2, r3, r2, ror #27
 8002328:	ea88 68f1 	eor.w	r8, r8, r1, ror #27
 800232c:	ea8e 6ef6 	eor.w	lr, lr, r6, ror #27
 8002330:	ea8c 6cf5 	eor.w	ip, ip, r5, ror #27
 8002334:	0743      	lsls	r3, r0, #29
 8002336:	e9cd 8e08 	strd	r8, lr, [sp, #32]
 800233a:	e9cd c20a 	strd	ip, r2, [sp, #40]	; 0x28
 800233e:	f040 812b 	bne.w	8002598 <Xoodoo_Round+0x2e0>
    for (x=0; x<NCOLUMS; ++x)
        for (y=0; y<NROWS; ++y)
            a[index(x,y)] ^= e[x];
 8002342:	e9d4 7600 	ldrd	r7, r6, [r4]
 8002346:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
 800234a:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 800234e:	ea8e 0000 	eor.w	r0, lr, r0
 8002352:	ea8e 0606 	eor.w	r6, lr, r6
 8002356:	ea8e 0e03 	eor.w	lr, lr, r3
 800235a:	68a3      	ldr	r3, [r4, #8]
 800235c:	ea88 0707 	eor.w	r7, r8, r7
 8002360:	ea8c 0903 	eor.w	r9, ip, r3
 8002364:	68e3      	ldr	r3, [r4, #12]
 8002366:	6027      	str	r7, [r4, #0]
 8002368:	ea82 0a03 	eor.w	sl, r2, r3
 800236c:	69a3      	ldr	r3, [r4, #24]
 800236e:	69e7      	ldr	r7, [r4, #28]
 8002370:	ea8c 0b03 	eor.w	fp, ip, r3
 8002374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002376:	4057      	eors	r7, r2
 8002378:	405a      	eors	r2, r3
 800237a:	6160      	str	r0, [r4, #20]
 800237c:	9001      	str	r0, [sp, #4]
 800237e:	4673      	mov	r3, lr
 8002380:	4610      	mov	r0, r2
 8002382:	6066      	str	r6, [r4, #4]
 8002384:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002386:	ea88 0101 	eor.w	r1, r8, r1
 800238a:	ea8c 0606 	eor.w	r6, ip, r6
 800238e:	e9c4 1e08 	strd	r1, lr, [r4, #32]
 8002392:	e9c4 9a02 	strd	r9, sl, [r4, #8]
 8002396:	e9c4 b706 	strd	fp, r7, [r4, #24]
 800239a:	e9c4 620a 	strd	r6, r2, [r4, #40]	; 0x28
 800239e:	ea88 0505 	eor.w	r5, r8, r5
 80023a2:	6125      	str	r5, [r4, #16]
 80023a4:	9500      	str	r5, [sp, #0]
    for (x=0; x<NCOLUMS; ++x) {
        b[index(x,0)] = a[index(x,0)];
        b[index(x,1)] = a[index(x-1,1)];
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
    }
    memcpy( a, b, sizeof(b) );
 80023a6:	4625      	mov	r5, r4
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 80023a8:	ea4f 5270 	mov.w	r2, r0, ror #21
 80023ac:	ea4f 5171 	mov.w	r1, r1, ror #21
 80023b0:	ea4f 5373 	mov.w	r3, r3, ror #21
 80023b4:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
 80023b8:	6820      	ldr	r0, [r4, #0]
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	6861      	ldr	r1, [r4, #4]
 80023be:	9217      	str	r2, [sp, #92]	; 0x5c
 80023c0:	68a2      	ldr	r2, [r4, #8]
 80023c2:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    memcpy( a, b, sizeof(b) );
 80023c6:	46c8      	mov	r8, r9
 80023c8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
        b[index(x,1)] = a[index(x-1,1)];
 80023cc:	9b00      	ldr	r3, [sp, #0]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 80023ce:	ea4f 5676 	mov.w	r6, r6, ror #21
        b[index(x,1)] = a[index(x-1,1)];
 80023d2:	9311      	str	r3, [sp, #68]	; 0x44
 80023d4:	9b01      	ldr	r3, [sp, #4]
    memcpy( a, b, sizeof(b) );
 80023d6:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 80023da:	9616      	str	r6, [sp, #88]	; 0x58
        b[index(x,1)] = a[index(x-1,1)];
 80023dc:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80023e0:	9710      	str	r7, [sp, #64]	; 0x40
 80023e2:	9312      	str	r3, [sp, #72]	; 0x48
    memcpy( a, b, sizeof(b) );
 80023e4:	4646      	mov	r6, r8
 80023e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023e8:	4556      	cmp	r6, sl
 80023ea:	6028      	str	r0, [r5, #0]
 80023ec:	6069      	str	r1, [r5, #4]
 80023ee:	60aa      	str	r2, [r5, #8]
 80023f0:	60eb      	str	r3, [r5, #12]
 80023f2:	f108 0810 	add.w	r8, r8, #16
 80023f6:	f105 0510 	add.w	r5, r5, #16
 80023fa:	d1f3      	bne.n	80023e4 <Xoodoo_Round+0x12c>
    Dump("Rho-west", a, 2);
        
    /* Iota: round constant */
    a[0] ^= rc;
 80023fc:	6821      	ldr	r1, [r4, #0]
 80023fe:	9b03      	ldr	r3, [sp, #12]
 8002400:	404b      	eors	r3, r1
 8002402:	4619      	mov	r1, r3
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	9b02      	ldr	r3, [sp, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f040 8087 	bne.w	800251c <Xoodoo_Round+0x264>
    Dump("Iota", a, 2);

    /* Chi: non linear layer */
    for (x=0; x<NCOLUMS; ++x)
        for (y=0; y<NROWS; ++y)
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 800240e:	e9d4 e304 	ldrd	lr, r3, [r4, #16]
 8002412:	6866      	ldr	r6, [r4, #4]
 8002414:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002416:	6a25      	ldr	r5, [r4, #32]
 8002418:	ea26 0002 	bic.w	r0, r6, r2
 800241c:	4058      	eors	r0, r3
 800241e:	9011      	str	r0, [sp, #68]	; 0x44
 8002420:	ea22 0003 	bic.w	r0, r2, r3
 8002424:	ea23 0306 	bic.w	r3, r3, r6
 8002428:	4070      	eors	r0, r6
 800242a:	4053      	eors	r3, r2
 800242c:	68a7      	ldr	r7, [r4, #8]
 800242e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002432:	900d      	str	r0, [sp, #52]	; 0x34
 8002434:	9315      	str	r3, [sp, #84]	; 0x54
 8002436:	ea21 0005 	bic.w	r0, r1, r5
 800243a:	ea25 030e 	bic.w	r3, r5, lr
 800243e:	69a2      	ldr	r2, [r4, #24]
 8002440:	404b      	eors	r3, r1
 8002442:	ea80 000e 	eor.w	r0, r0, lr
 8002446:	ea2e 0101 	bic.w	r1, lr, r1
 800244a:	68e6      	ldr	r6, [r4, #12]
 800244c:	4069      	eors	r1, r5
 800244e:	9010      	str	r0, [sp, #64]	; 0x40
 8002450:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002452:	ea27 000c 	bic.w	r0, r7, ip
 8002456:	4050      	eors	r0, r2
 8002458:	930c      	str	r3, [sp, #48]	; 0x30
 800245a:	9114      	str	r1, [sp, #80]	; 0x50
 800245c:	69e3      	ldr	r3, [r4, #28]
 800245e:	ea2c 0102 	bic.w	r1, ip, r2
 8002462:	4079      	eors	r1, r7
 8002464:	9012      	str	r0, [sp, #72]	; 0x48
 8002466:	ea26 0005 	bic.w	r0, r6, r5
 800246a:	4058      	eors	r0, r3
 800246c:	ea22 0207 	bic.w	r2, r2, r7
 8002470:	910e      	str	r1, [sp, #56]	; 0x38
 8002472:	ea25 0103 	bic.w	r1, r5, r3
 8002476:	ea23 0306 	bic.w	r3, r3, r6
 800247a:	ea82 020c 	eor.w	r2, r2, ip
 800247e:	4071      	eors	r1, r6
 8002480:	406b      	eors	r3, r5
 8002482:	9216      	str	r2, [sp, #88]	; 0x58
 8002484:	9013      	str	r0, [sp, #76]	; 0x4c
 8002486:	910f      	str	r1, [sp, #60]	; 0x3c
 8002488:	9317      	str	r3, [sp, #92]	; 0x5c
    memcpy( a, b, sizeof(b) );
 800248a:	4626      	mov	r6, r4
 800248c:	af0c      	add	r7, sp, #48	; 0x30
 800248e:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 8002492:	463d      	mov	r5, r7
 8002494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002496:	4565      	cmp	r5, ip
 8002498:	6030      	str	r0, [r6, #0]
 800249a:	6071      	str	r1, [r6, #4]
 800249c:	60b2      	str	r2, [r6, #8]
 800249e:	60f3      	str	r3, [r6, #12]
 80024a0:	f107 0710 	add.w	r7, r7, #16
 80024a4:	f106 0610 	add.w	r6, r6, #16
 80024a8:	d1f3      	bne.n	8002492 <Xoodoo_Round+0x1da>
    for (x=0; x<NCOLUMS; ++x) {
        b[index(x,0)] = a[index(x,0)];
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
    }
    memcpy( a, b, sizeof(b) );
 80024aa:	4625      	mov	r5, r4
 80024ac:	6820      	ldr	r0, [r4, #0]
 80024ae:	6861      	ldr	r1, [r4, #4]
 80024b0:	68a2      	ldr	r2, [r4, #8]
 80024b2:	68e3      	ldr	r3, [r4, #12]
 80024b4:	ae0c      	add	r6, sp, #48	; 0x30
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80024b6:	6927      	ldr	r7, [r4, #16]
    memcpy( a, b, sizeof(b) );
 80024b8:	46b4      	mov	ip, r6
 80024ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80024bc:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 80024c0:	69e2      	ldr	r2, [r4, #28]
 80024c2:	ea4f 73f7 	mov.w	r3, r7, ror #31
 80024c6:	ea4f 76f1 	mov.w	r6, r1, ror #31
 80024ca:	ea4f 77f2 	mov.w	r7, r2, ror #31
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 80024ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80024d2:	9310      	str	r3, [sp, #64]	; 0x40
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 80024d4:	ea4f 6832 	mov.w	r8, r2, ror #24
 80024d8:	ea4f 6131 	mov.w	r1, r1, ror #24
 80024dc:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80024e0:	ea4f 6232 	mov.w	r2, r2, ror #24
 80024e4:	ea4f 6333 	mov.w	r3, r3, ror #24
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80024e8:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 80024ec:	e9cd 8114 	strd	r8, r1, [sp, #80]	; 0x50
 80024f0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80024f4:	ea4f 70f0 	mov.w	r0, r0, ror #31
    memcpy( a, b, sizeof(b) );
 80024f8:	f10d 0e60 	add.w	lr, sp, #96	; 0x60
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 80024fc:	9011      	str	r0, [sp, #68]	; 0x44
    memcpy( a, b, sizeof(b) );
 80024fe:	4664      	mov	r4, ip
 8002500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002502:	4574      	cmp	r4, lr
 8002504:	6028      	str	r0, [r5, #0]
 8002506:	6069      	str	r1, [r5, #4]
 8002508:	60aa      	str	r2, [r5, #8]
 800250a:	60eb      	str	r3, [r5, #12]
 800250c:	f10c 0c10 	add.w	ip, ip, #16
 8002510:	f105 0510 	add.w	r5, r5, #16
 8002514:	d1f3      	bne.n	80024fe <Xoodoo_Round+0x246>
    Dump("Rho-east", a, 2);

}
 8002516:	b019      	add	sp, #100	; 0x64
 8002518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 800251c:	6927      	ldr	r7, [r4, #16]
 800251e:	6a26      	ldr	r6, [r4, #32]
 8002520:	6960      	ldr	r0, [r4, #20]
 8002522:	ea26 0307 	bic.w	r3, r6, r7
 8002526:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800252a:	404b      	eors	r3, r1
 800252c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800252e:	ea21 0206 	bic.w	r2, r1, r6
 8002532:	930c      	str	r3, [sp, #48]	; 0x30
 8002534:	ea27 0301 	bic.w	r3, r7, r1
 8002538:	407a      	eors	r2, r7
 800253a:	4073      	eors	r3, r6
 800253c:	68a7      	ldr	r7, [r4, #8]
 800253e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002540:	ea20 010c 	bic.w	r1, r0, ip
 8002544:	4069      	eors	r1, r5
 8002546:	9210      	str	r2, [sp, #64]	; 0x40
 8002548:	9314      	str	r3, [sp, #80]	; 0x50
 800254a:	69a2      	ldr	r2, [r4, #24]
 800254c:	ea2c 0305 	bic.w	r3, ip, r5
 8002550:	4043      	eors	r3, r0
 8002552:	9115      	str	r1, [sp, #84]	; 0x54
 8002554:	ea27 0106 	bic.w	r1, r7, r6
 8002558:	4051      	eors	r1, r2
 800255a:	9311      	str	r3, [sp, #68]	; 0x44
 800255c:	ea25 0300 	bic.w	r3, r5, r0
 8002560:	ea83 030c 	eor.w	r3, r3, ip
 8002564:	68e5      	ldr	r5, [r4, #12]
 8002566:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002568:	9112      	str	r1, [sp, #72]	; 0x48
 800256a:	ea26 0102 	bic.w	r1, r6, r2
 800256e:	4079      	eors	r1, r7
 8002570:	930d      	str	r3, [sp, #52]	; 0x34
 8002572:	ea22 0207 	bic.w	r2, r2, r7
 8002576:	69e3      	ldr	r3, [r4, #28]
 8002578:	4072      	eors	r2, r6
 800257a:	910e      	str	r1, [sp, #56]	; 0x38
 800257c:	ea25 0100 	bic.w	r1, r5, r0
 8002580:	4059      	eors	r1, r3
 8002582:	9216      	str	r2, [sp, #88]	; 0x58
 8002584:	ea20 0203 	bic.w	r2, r0, r3
 8002588:	ea23 0305 	bic.w	r3, r3, r5
 800258c:	406a      	eors	r2, r5
 800258e:	4043      	eors	r3, r0
 8002590:	9113      	str	r1, [sp, #76]	; 0x4c
 8002592:	920f      	str	r2, [sp, #60]	; 0x3c
 8002594:	9317      	str	r3, [sp, #92]	; 0x5c
 8002596:	e778      	b.n	800248a <Xoodoo_Round+0x1d2>
            a[index(x,y)] ^= e[x];
 8002598:	6923      	ldr	r3, [r4, #16]
 800259a:	6826      	ldr	r6, [r4, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	6960      	ldr	r0, [r4, #20]
 80025a0:	ea86 0708 	eor.w	r7, r6, r8
 80025a4:	9e00      	ldr	r6, [sp, #0]
 80025a6:	9001      	str	r0, [sp, #4]
 80025a8:	ea86 0608 	eor.w	r6, r6, r8
 80025ac:	9600      	str	r6, [sp, #0]
 80025ae:	9e01      	ldr	r6, [sp, #4]
 80025b0:	68a0      	ldr	r0, [r4, #8]
 80025b2:	6865      	ldr	r5, [r4, #4]
 80025b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025b6:	ea86 060e 	eor.w	r6, r6, lr
 80025ba:	ea85 050e 	eor.w	r5, r5, lr
 80025be:	f8d4 b018 	ldr.w	fp, [r4, #24]
 80025c2:	9601      	str	r6, [sp, #4]
 80025c4:	ea83 030e 	eor.w	r3, r3, lr
 80025c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025ca:	ea80 0e0c 	eor.w	lr, r0, ip
 80025ce:	68e0      	ldr	r0, [r4, #12]
 80025d0:	ea8b 0b0c 	eor.w	fp, fp, ip
 80025d4:	ea86 060c 	eor.w	r6, r6, ip
 80025d8:	ea80 0c02 	eor.w	ip, r0, r2
 80025dc:	9800      	ldr	r0, [sp, #0]
 80025de:	6a21      	ldr	r1, [r4, #32]
 80025e0:	6027      	str	r7, [r4, #0]
 80025e2:	6120      	str	r0, [r4, #16]
 80025e4:	69e7      	ldr	r7, [r4, #28]
 80025e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025e8:	6065      	str	r5, [r4, #4]
 80025ea:	9d01      	ldr	r5, [sp, #4]
 80025ec:	ea81 0108 	eor.w	r1, r1, r8
 80025f0:	4057      	eors	r7, r2
 80025f2:	4050      	eors	r0, r2
 80025f4:	6221      	str	r1, [r4, #32]
 80025f6:	6165      	str	r5, [r4, #20]
 80025f8:	6263      	str	r3, [r4, #36]	; 0x24
 80025fa:	f8c4 e008 	str.w	lr, [r4, #8]
 80025fe:	f8c4 b018 	str.w	fp, [r4, #24]
 8002602:	62a6      	str	r6, [r4, #40]	; 0x28
 8002604:	f8c4 c00c 	str.w	ip, [r4, #12]
 8002608:	61e7      	str	r7, [r4, #28]
 800260a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800260c:	e6cb      	b.n	80023a6 <Xoodoo_Round+0xee>
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 800260e:	6921      	ldr	r1, [r4, #16]
 8002610:	6a25      	ldr	r5, [r4, #32]
 8002612:	6962      	ldr	r2, [r4, #20]
 8002614:	ea81 0605 	eor.w	r6, r1, r5
 8002618:	6825      	ldr	r5, [r4, #0]
 800261a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800261c:	e662      	b.n	80022e4 <Xoodoo_Round+0x2c>
 800261e:	bf00      	nop

08002620 <Xoodoo_Permute_Nrounds>:
    _rc2,
    _rc1
};

void Xoodoo_Permute_Nrounds( void * state, uint32_t nr )
{
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	460c      	mov	r4, r1
 8002624:	b08c      	sub	sp, #48	; 0x30
    tXoodooLane        a[NLANES];
    unsigned int    i;

    fromBytesToWords(a, (const unsigned char *)state);
 8002626:	4601      	mov	r1, r0
{
 8002628:	4606      	mov	r6, r0
    fromBytesToWords(a, (const unsigned char *)state);
 800262a:	4668      	mov	r0, sp
 800262c:	f7ff fcfa 	bl	8002024 <fromBytesToWords>

    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8002630:	f1c4 010c 	rsb	r1, r4, #12
 8002634:	290b      	cmp	r1, #11
 8002636:	d80b      	bhi.n	8002650 <Xoodoo_Permute_Nrounds+0x30>
 8002638:	4d08      	ldr	r5, [pc, #32]	; (800265c <Xoodoo_Permute_Nrounds+0x3c>)
 800263a:	008c      	lsls	r4, r1, #2
 800263c:	3c04      	subs	r4, #4
 800263e:	442c      	add	r4, r5
 8002640:	352c      	adds	r5, #44	; 0x2c
        Xoodoo_Round( a, RC[i] );
 8002642:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8002646:	4668      	mov	r0, sp
 8002648:	f7ff fe36 	bl	80022b8 <Xoodoo_Round>
    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 800264c:	42ac      	cmp	r4, r5
 800264e:	d1f8      	bne.n	8002642 <Xoodoo_Permute_Nrounds+0x22>
        Dump("Round", a, 1);
    }
    Dump("Permutation", a, 0);

    fromWordsToBytes((unsigned char *)state, a);
 8002650:	4669      	mov	r1, sp
 8002652:	4630      	mov	r0, r6
 8002654:	f7ff fdae 	bl	80021b4 <fromWordsToBytes>

}
 8002658:	b00c      	add	sp, #48	; 0x30
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	080040c4 	.word	0x080040c4

08002660 <Xoodoo_Permute_12rounds>:
    Xoodoo_Permute_Nrounds( state, 6 );
}

void Xoodoo_Permute_12rounds( uint32_t * state)
{
    Xoodoo_Permute_Nrounds( state, 12 );
 8002660:	210c      	movs	r1, #12
 8002662:	f7ff bfdd 	b.w	8002620 <Xoodoo_Permute_Nrounds>
 8002666:	bf00      	nop

08002668 <Xoodyak_Down>:
#define Cyclist_lRatchet                JOIN(prefix, _lRatchet)

/* ------- Cyclist internal interfaces ------- */

static void Cyclist_Down(Cyclist_Instance *instance, const uint8_t *Xi, unsigned int XiLen, uint8_t Cd)
{
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	4604      	mov	r4, r0
 800266c:	4615      	mov	r5, r2
 800266e:	461e      	mov	r6, r3
    SnP_AddBytes(instance->state, Xi, 0, XiLen);
 8002670:	4613      	mov	r3, r2
 8002672:	2200      	movs	r2, #0
 8002674:	f7ff fc52 	bl	8001f1c <Xoodoo_AddBytes>
    SnP_AddByte(instance->state, 0x01, XiLen);
 8002678:	462a      	mov	r2, r5
 800267a:	4620      	mov	r0, r4
 800267c:	2101      	movs	r1, #1
 800267e:	f7ff fc39 	bl	8001ef4 <Xoodoo_AddByte>
    SnP_AddByte(instance->state, (instance->mode == Cyclist_ModeHash) ? (Cd & 0x01) : Cd, Cyclist_f_bPrime - 1);
 8002682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002684:	222f      	movs	r2, #47	; 0x2f
 8002686:	2b01      	cmp	r3, #1
 8002688:	bf08      	it	eq
 800268a:	f006 0601 	andeq.w	r6, r6, #1
 800268e:	4631      	mov	r1, r6
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff fc2f 	bl	8001ef4 <Xoodoo_AddByte>
    instance->phase = Cyclist_PhaseDown;
 8002696:	2301      	movs	r3, #1
 8002698:	6323      	str	r3, [r4, #48]	; 0x30

}
 800269a:	bd70      	pop	{r4, r5, r6, pc}

0800269c <Xoodyak_Up>:

static void Cyclist_Up(Cyclist_Instance *instance, uint8_t *Yi, unsigned int YiLen, uint8_t Cu)
{
 800269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    #if defined(OUTPUT)
    uint8_t   s[Cyclist_f_bPrime];
    #endif

    if (instance->mode != Cyclist_ModeHash) {
 80026a0:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 80026a2:	4604      	mov	r4, r0
    if (instance->mode != Cyclist_ModeHash) {
 80026a4:	2f01      	cmp	r7, #1
{
 80026a6:	460d      	mov	r5, r1
 80026a8:	4616      	mov	r6, r2
    if (instance->mode != Cyclist_ModeHash) {
 80026aa:	d003      	beq.n	80026b4 <Xoodyak_Up+0x18>
        SnP_AddByte(instance->state, Cu, Cyclist_f_bPrime - 1);
 80026ac:	4619      	mov	r1, r3
 80026ae:	222f      	movs	r2, #47	; 0x2f
 80026b0:	f7ff fc20 	bl	8001ef4 <Xoodoo_AddByte>
    if (instance->file != NULL) {
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        SnP_ExtractAndAddBytes( instance->state, s, s, 0, Cyclist_f_bPrime );
    }
    #endif
    SnP_Permute( instance->state );
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ffd3 	bl	8002660 <Xoodoo_Permute_12rounds>
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        fprintf( instance->file, "After f() ");
        displayByteString( instance->file, "", s, Cyclist_f_bPrime );
    }
    #endif
    instance->phase = Cyclist_PhaseUp;
 80026ba:	2202      	movs	r2, #2
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 80026bc:	4633      	mov	r3, r6
    instance->phase = Cyclist_PhaseUp;
 80026be:	6322      	str	r2, [r4, #48]	; 0x30
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 80026c0:	4629      	mov	r1, r5
 80026c2:	4620      	mov	r0, r4
}
 80026c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 80026c8:	2200      	movs	r2, #0
 80026ca:	f7ff bc87 	b.w	8001fdc <Xoodoo_ExtractBytes>
 80026ce:	bf00      	nop

080026d0 <Xoodyak_AbsorbAny>:

static void Cyclist_AbsorbAny(Cyclist_Instance *instance, const uint8_t *X, size_t XLen, unsigned int r, uint8_t Cd)
{
 80026d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026d4:	4606      	mov	r6, r0
 80026d6:	460d      	mov	r5, r1
 80026d8:	4614      	mov	r4, r2
 80026da:	4699      	mov	r9, r3
 80026dc:	f89d 8020 	ldrb.w	r8, [sp, #32]
 80026e0:	e014      	b.n	800270c <Xoodyak_AbsorbAny+0x3c>
    unsigned int splitLen;

    do {
        if (instance->phase != Cyclist_PhaseUp) {
            Cyclist_Up(instance, NULL, 0, 0);
 80026e2:	2300      	movs	r3, #0
        }
        splitLen = MyMin(XLen, r);
 80026e4:	454c      	cmp	r4, r9
            Cyclist_Up(instance, NULL, 0, 0);
 80026e6:	461a      	mov	r2, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	4630      	mov	r0, r6
        splitLen = MyMin(XLen, r);
 80026ec:	4627      	mov	r7, r4
 80026ee:	bf28      	it	cs
 80026f0:	464f      	movcs	r7, r9
            Cyclist_Up(instance, NULL, 0, 0);
 80026f2:	f7ff ffd3 	bl	800269c <Xoodyak_Up>
        Cyclist_Down(instance, X, splitLen, Cd);
 80026f6:	4629      	mov	r1, r5
 80026f8:	4643      	mov	r3, r8
 80026fa:	463a      	mov	r2, r7
 80026fc:	4630      	mov	r0, r6
 80026fe:	f7ff ffb3 	bl	8002668 <Xoodyak_Down>
        Cd = 0;
        X       += splitLen;
        XLen    -= splitLen;
    } while ( XLen != 0 );
 8002702:	1be4      	subs	r4, r4, r7
        X       += splitLen;
 8002704:	443d      	add	r5, r7
    } while ( XLen != 0 );
 8002706:	d009      	beq.n	800271c <Xoodyak_AbsorbAny+0x4c>
        Cd = 0;
 8002708:	f04f 0800 	mov.w	r8, #0
        if (instance->phase != Cyclist_PhaseUp) {
 800270c:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800270e:	2a02      	cmp	r2, #2
 8002710:	d1e7      	bne.n	80026e2 <Xoodyak_AbsorbAny+0x12>
        splitLen = MyMin(XLen, r);
 8002712:	454c      	cmp	r4, r9
 8002714:	4627      	mov	r7, r4
 8002716:	bf28      	it	cs
 8002718:	464f      	movcs	r7, r9
 800271a:	e7ec      	b.n	80026f6 <Xoodyak_AbsorbAny+0x26>
}
 800271c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002720 <Xoodyak_AbsorbKey>:

static void Cyclist_AbsorbKey(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8002720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t KID[Cyclist_Rkin];

    assert(instance->mode == Cyclist_ModeHash);
 8002724:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
{
 8002728:	b08f      	sub	sp, #60	; 0x3c
    assert(instance->mode == Cyclist_ModeHash);
 800272a:	f1ba 0f01 	cmp.w	sl, #1
{
 800272e:	9e18      	ldr	r6, [sp, #96]	; 0x60
    assert(instance->mode == Cyclist_ModeHash);
 8002730:	d134      	bne.n	800279c <Xoodyak_AbsorbKey+0x7c>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 8002732:	1997      	adds	r7, r2, r6
 8002734:	2f2b      	cmp	r7, #43	; 0x2b
 8002736:	4615      	mov	r5, r2
 8002738:	d836      	bhi.n	80027a8 <Xoodyak_AbsorbKey+0x88>
 800273a:	469b      	mov	fp, r3

    instance->mode      = Cyclist_ModeKeyed;
 800273c:	f04f 0902 	mov.w	r9, #2
    instance->Rabsorb   = Cyclist_Rkin;
 8002740:	f04f 082c 	mov.w	r8, #44	; 0x2c
    instance->Rsqueeze  = Cyclist_Rkout;
 8002744:	2318      	movs	r3, #24
 8002746:	4604      	mov	r4, r0
    instance->Rabsorb   = Cyclist_Rkin;
 8002748:	e9c0 980d 	strd	r9, r8, [r0, #52]	; 0x34
    instance->Rsqueeze  = Cyclist_Rkout;
 800274c:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (KLen != 0) {
 800274e:	b912      	cbnz	r2, 8002756 <Xoodyak_AbsorbKey+0x36>
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
        if (counterLen != 0) {
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
        }
    }
}
 8002750:	b00f      	add	sp, #60	; 0x3c
 8002752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy(KID, K, KLen);
 8002756:	a803      	add	r0, sp, #12
 8002758:	f000 faae 	bl	8002cb8 <memcpy>
        memcpy(KID + KLen, ID, IDLen);
 800275c:	ab03      	add	r3, sp, #12
 800275e:	1958      	adds	r0, r3, r5
 8002760:	4632      	mov	r2, r6
 8002762:	4659      	mov	r1, fp
 8002764:	f000 faa8 	bl	8002cb8 <memcpy>
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8002768:	aa0e      	add	r2, sp, #56	; 0x38
 800276a:	19d5      	adds	r5, r2, r7
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 800276c:	4643      	mov	r3, r8
 800276e:	f8cd 9000 	str.w	r9, [sp]
 8002772:	4620      	mov	r0, r4
 8002774:	a903      	add	r1, sp, #12
 8002776:	1c7a      	adds	r2, r7, #1
        KID[KLen + IDLen] = (uint8_t)IDLen;
 8002778:	f805 6c2c 	strb.w	r6, [r5, #-44]
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 800277c:	f7ff ffa8 	bl	80026d0 <Xoodyak_AbsorbAny>
        if (counterLen != 0) {
 8002780:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0e4      	beq.n	8002750 <Xoodyak_AbsorbKey+0x30>
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
 8002786:	2200      	movs	r2, #0
 8002788:	4653      	mov	r3, sl
 800278a:	9200      	str	r2, [sp, #0]
 800278c:	4620      	mov	r0, r4
 800278e:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 8002792:	f7ff ff9d 	bl	80026d0 <Xoodyak_AbsorbAny>
}
 8002796:	b00f      	add	sp, #60	; 0x3c
 8002798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(instance->mode == Cyclist_ModeHash);
 800279c:	216a      	movs	r1, #106	; 0x6a
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <Xoodyak_AbsorbKey+0x94>)
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <Xoodyak_AbsorbKey+0x98>)
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <Xoodyak_AbsorbKey+0x9c>)
 80027a4:	f000 fa2e 	bl	8002c04 <__assert_func>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 80027a8:	216b      	movs	r1, #107	; 0x6b
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <Xoodyak_AbsorbKey+0xa0>)
 80027ac:	4a02      	ldr	r2, [pc, #8]	; (80027b8 <Xoodyak_AbsorbKey+0x98>)
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <Xoodyak_AbsorbKey+0x9c>)
 80027b0:	f000 fa28 	bl	8002c04 <__assert_func>
 80027b4:	08004128 	.word	0x08004128
 80027b8:	080041fc 	.word	0x080041fc
 80027bc:	0800414c 	.word	0x0800414c
 80027c0:	080041d4 	.word	0x080041d4

080027c4 <Xoodyak_SqueezeAny>:

static void Cyclist_SqueezeAny(Cyclist_Instance *instance, uint8_t *Y, size_t YLen, uint8_t Cu)
{
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int len;

    len = MyMin(YLen, instance->Rsqueeze );
 80027c6:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
{
 80027c8:	4614      	mov	r4, r2
    len = MyMin(YLen, instance->Rsqueeze );
 80027ca:	4295      	cmp	r5, r2
 80027cc:	bf28      	it	cs
 80027ce:	4615      	movcs	r5, r2
{
 80027d0:	460e      	mov	r6, r1
    Cyclist_Up(instance, Y, len, Cu);
 80027d2:	462a      	mov	r2, r5
{
 80027d4:	4607      	mov	r7, r0
    Y += len;
 80027d6:	442e      	add	r6, r5
    Cyclist_Up(instance, Y, len, Cu);
 80027d8:	f7ff ff60 	bl	800269c <Xoodyak_Up>
    YLen -= len;
    while (YLen != 0) {
 80027dc:	1b65      	subs	r5, r4, r5
 80027de:	d012      	beq.n	8002806 <Xoodyak_SqueezeAny+0x42>
        Cyclist_Down(instance, NULL, 0, 0);
 80027e0:	2300      	movs	r3, #0
 80027e2:	4638      	mov	r0, r7
 80027e4:	461a      	mov	r2, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7ff ff3e 	bl	8002668 <Xoodyak_Down>
        len = MyMin(YLen, instance->Rsqueeze );
 80027ec:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
        Cyclist_Up(instance, Y, len, 0);
 80027ee:	4631      	mov	r1, r6
        len = MyMin(YLen, instance->Rsqueeze );
 80027f0:	42ac      	cmp	r4, r5
 80027f2:	bf28      	it	cs
 80027f4:	462c      	movcs	r4, r5
        Cyclist_Up(instance, Y, len, 0);
 80027f6:	2300      	movs	r3, #0
 80027f8:	4622      	mov	r2, r4
 80027fa:	4638      	mov	r0, r7
 80027fc:	f7ff ff4e 	bl	800269c <Xoodyak_Up>
    while (YLen != 0) {
 8002800:	1b2d      	subs	r5, r5, r4
        Y += len;
 8002802:	4426      	add	r6, r4
    while (YLen != 0) {
 8002804:	d1ec      	bne.n	80027e0 <Xoodyak_SqueezeAny+0x1c>
        YLen -= len;
    }
}
 8002806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002808 <Xoodyak_Initialize>:
}

/* ------- Cyclist interfaces ------- */

void Cyclist_Initialize(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8002808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800280c:	4604      	mov	r4, r0
 800280e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002812:	460e      	mov	r6, r1
 8002814:	4615      	mov	r5, r2
 8002816:	461f      	mov	r7, r3
 8002818:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    SnP_StaticInitialize();
 800281c:	f7ff fb64 	bl	8001ee8 <Xoodoo_StaticInitialize>
    SnP_Initialize(instance->state);
 8002820:	4620      	mov	r0, r4
 8002822:	f7ff fb63 	bl	8001eec <Xoodoo_Initialize>
    instance->phase     = Cyclist_PhaseUp;
 8002826:	2102      	movs	r1, #2
    instance->mode      = Cyclist_ModeHash;
 8002828:	2201      	movs	r2, #1
    instance->Rabsorb   = Cyclist_Rhash;
 800282a:	2310      	movs	r3, #16
    instance->mode      = Cyclist_ModeHash;
 800282c:	e9c4 120c 	strd	r1, r2, [r4, #48]	; 0x30
    instance->Rsqueeze  = Cyclist_Rhash;
 8002830:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
    #ifdef OUTPUT
    instance->file = 0;
    SnP_Initialize( instance->stateShadow );
    #endif
    if (KLen != 0) {
 8002834:	b90d      	cbnz	r5, 800283a <Xoodyak_Initialize+0x32>
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
    }
}
 8002836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 800283a:	463b      	mov	r3, r7
 800283c:	462a      	mov	r2, r5
 800283e:	4631      	mov	r1, r6
 8002840:	4620      	mov	r0, r4
 8002842:	e9cd 9a09 	strd	r9, sl, [sp, #36]	; 0x24
 8002846:	f8cd 8020 	str.w	r8, [sp, #32]
}
 800284a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 800284e:	f7ff bf67 	b.w	8002720 <Xoodyak_AbsorbKey>
 8002852:	bf00      	nop

08002854 <Xoodyak_Absorb>:

void Cyclist_Absorb(Cyclist_Instance *instance, const uint8_t *X, size_t XLen)
{
 8002854:	b510      	push	{r4, lr}
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 8002856:	2403      	movs	r4, #3
{
 8002858:	b082      	sub	sp, #8
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 800285a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800285c:	9400      	str	r4, [sp, #0]
 800285e:	f7ff ff37 	bl	80026d0 <Xoodyak_AbsorbAny>
}
 8002862:	b002      	add	sp, #8
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop

08002868 <Xoodyak_Squeeze>:
    Cyclist_Crypt(instance, C, P, CLen, 1);
}

void Cyclist_Squeeze(Cyclist_Instance *instance, uint8_t *Y, size_t YLen)
{
    Cyclist_SqueezeAny(instance, Y, YLen, 0x40);
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	f7ff bfab 	b.w	80027c4 <Xoodyak_SqueezeAny>
 800286e:	bf00      	nop

08002870 <crypto_hash>:
#endif

#include "Xoodyak.h"

int crypto_hash(unsigned char *out, const unsigned char *in, unsigned long long inlen)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
    Xoodyak_Instance    instance;

    Xoodyak_Initialize(&instance, NULL, 0, NULL, 0, NULL, 0);
 8002872:	2400      	movs	r4, #0
{
 8002874:	460e      	mov	r6, r1
 8002876:	4617      	mov	r7, r2
 8002878:	4605      	mov	r5, r0
 800287a:	b095      	sub	sp, #84	; 0x54
    Xoodyak_Initialize(&instance, NULL, 0, NULL, 0, NULL, 0);
 800287c:	4623      	mov	r3, r4
 800287e:	4622      	mov	r2, r4
 8002880:	4621      	mov	r1, r4
 8002882:	a804      	add	r0, sp, #16
 8002884:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002888:	9400      	str	r4, [sp, #0]
 800288a:	f7ff ffbd 	bl	8002808 <Xoodyak_Initialize>
    Xoodyak_Absorb(&instance, in, (size_t)inlen);
 800288e:	463a      	mov	r2, r7
 8002890:	4631      	mov	r1, r6
 8002892:	a804      	add	r0, sp, #16
 8002894:	f7ff ffde 	bl	8002854 <Xoodyak_Absorb>
    Xoodyak_Squeeze(&instance, out, crypto_hash_BYTES);
 8002898:	a804      	add	r0, sp, #16
 800289a:	4629      	mov	r1, r5
 800289c:	2220      	movs	r2, #32
 800289e:	f7ff ffe3 	bl	8002868 <Xoodyak_Squeeze>
        }
        printf("\n");
    }
    #endif
    return 0;
}
 80028a2:	4620      	mov	r0, r4
 80028a4:	b015      	add	sp, #84	; 0x54
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a8 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 80028a8:	b538      	push	{r3, r4, r5, lr}
	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
	lwc_printf("Memory usage: ");
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 80028aa:	f44f 7580 	mov.w	r5, #256	; 0x100
	get_memory_usage();
 80028ae:	f000 f951 	bl	8002b54 <get_memory_usage>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 80028b2:	4c15      	ldr	r4, [pc, #84]	; (8002908 <genkat_benchmark_hash_aead+0x60>)
	tick_msr_start();
 80028b4:	f000 f8fa 	bl	8002aac <tick_msr_start>
	tick_msr_end();
 80028b8:	f000 f910 	bl	8002adc <tick_msr_end>
	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <genkat_benchmark_hash_aead+0x64>)
 80028be:	4914      	ldr	r1, [pc, #80]	; (8002910 <genkat_benchmark_hash_aead+0x68>)
 80028c0:	4814      	ldr	r0, [pc, #80]	; (8002914 <genkat_benchmark_hash_aead+0x6c>)
 80028c2:	f000 f929 	bl	8002b18 <lwc_printf>
	lwc_printf("Memory usage: ");
 80028c6:	4814      	ldr	r0, [pc, #80]	; (8002918 <genkat_benchmark_hash_aead+0x70>)
 80028c8:	f000 f926 	bl	8002b18 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 80028cc:	e9d4 210b 	ldrd	r2, r1, [r4, #44]	; 0x2c
 80028d0:	4812      	ldr	r0, [pc, #72]	; (800291c <genkat_benchmark_hash_aead+0x74>)
 80028d2:	f000 f921 	bl	8002b18 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 80028d6:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
 80028da:	6a21      	ldr	r1, [r4, #32]
 80028dc:	4810      	ldr	r0, [pc, #64]	; (8002920 <genkat_benchmark_hash_aead+0x78>)
 80028de:	f000 f91b 	bl	8002b18 <lwc_printf>
	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 80028e2:	462a      	mov	r2, r5
 80028e4:	2100      	movs	r1, #0
 80028e6:	480f      	ldr	r0, [pc, #60]	; (8002924 <genkat_benchmark_hash_aead+0x7c>)
 80028e8:	f000 f9f4 	bl	8002cd4 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 80028ec:	462a      	mov	r2, r5
 80028ee:	2100      	movs	r1, #0
 80028f0:	480d      	ldr	r0, [pc, #52]	; (8002928 <genkat_benchmark_hash_aead+0x80>)
 80028f2:	f000 f9ef 	bl	8002cd4 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 80028f6:	462a      	mov	r2, r5
 80028f8:	2100      	movs	r1, #0
 80028fa:	480c      	ldr	r0, [pc, #48]	; (800292c <genkat_benchmark_hash_aead+0x84>)
 80028fc:	f000 f9ea 	bl	8002cd4 <memset>
#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
}
 8002900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = hash_generate_test_vectors();
 8002904:	f000 b814 	b.w	8002930 <hash_generate_test_vectors>
 8002908:	20000634 	.word	0x20000634
 800290c:	08004210 	.word	0x08004210
 8002910:	08004290 	.word	0x08004290
 8002914:	08004310 	.word	0x08004310
 8002918:	0800435c 	.word	0x0800435c
 800291c:	0800436c 	.word	0x0800436c
 8002920:	08004394 	.word	0x08004394
 8002924:	20000098 	.word	0x20000098
 8002928:	20000198 	.word	0x20000198
 800292c:	20000298 	.word	0x20000298

08002930 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;

	init_buffer(msg, sizeof(msg));
 8002938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293c:	2300      	movs	r3, #0
 800293e:	a808      	add	r0, sp, #32
 8002940:	f000 f89a 	bl	8002a78 <init_buffer>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002944:	2400      	movs	r4, #0
 8002946:	2500      	movs	r5, #0
 8002948:	4f35      	ldr	r7, [pc, #212]	; (8002a20 <hash_generate_test_vectors+0xf0>)
 800294a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002a30 <hash_generate_test_vectors+0x100>

		lwc_printf("msg_len:%6d ", (int)mlen);
 800294e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002a34 <hash_generate_test_vectors+0x104>
		tick_msr_end();

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;

		if(ret_val == 0) {
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002952:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002a38 <hash_generate_test_vectors+0x108>
 8002956:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8002a3c <hash_generate_test_vectors+0x10c>
		lwc_printf("msg_len:%6d ", (int)mlen);
 800295a:	4621      	mov	r1, r4
 800295c:	4640      	mov	r0, r8
 800295e:	f000 f8db 	bl	8002b18 <lwc_printf>
		tick_msr_start();
 8002962:	f000 f8a3 	bl	8002aac <tick_msr_start>
		ret_val = crypto_hash(digest, msg, mlen);
 8002966:	4622      	mov	r2, r4
 8002968:	462b      	mov	r3, r5
 800296a:	a908      	add	r1, sp, #32
 800296c:	4668      	mov	r0, sp
 800296e:	f7ff ff7f 	bl	8002870 <crypto_hash>
 8002972:	4606      	mov	r6, r0
		tick_msr_end();
 8002974:	f000 f8b2 	bl	8002adc <tick_msr_end>
		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8002978:	4a2a      	ldr	r2, [pc, #168]	; (8002a24 <hash_generate_test_vectors+0xf4>)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
		if(ret_val == 0) {
 8002986:	2e00      	cmp	r6, #0
 8002988:	d147      	bne.n	8002a1a <hash_generate_test_vectors+0xea>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 800298a:	4694      	mov	ip, r2
 800298c:	2a00      	cmp	r2, #0
 800298e:	bfb8      	it	lt
 8002990:	f102 0c0f 	addlt.w	ip, r2, #15
 8002994:	4611      	mov	r1, r2
 8002996:	f8d9 3000 	ldr.w	r3, [r9]
 800299a:	4658      	mov	r0, fp
 800299c:	ea4f 122c 	mov.w	r2, ip, asr #4
 80029a0:	f000 f8ba 	bl	8002b18 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 80029a4:	ea54 0305 	orrs.w	r3, r4, r5
 80029a8:	d031      	beq.n	8002a0e <hash_generate_test_vectors+0xde>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80029aa:	2300      	movs	r3, #0
 80029ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b0:	1924      	adds	r4, r4, r4
 80029b2:	416d      	adcs	r5, r5
 80029b4:	42ab      	cmp	r3, r5
 80029b6:	bf08      	it	eq
 80029b8:	42a2      	cmpeq	r2, r4
 80029ba:	d2ce      	bcs.n	800295a <hash_generate_test_vectors+0x2a>
			mlen = 4;
		}
	}//end of for loop


	ticks_res_pos = 0;
 80029bc:	2300      	movs	r3, #0
	aead_hash_print_res("HASH");
 80029be:	481a      	ldr	r0, [pc, #104]	; (8002a28 <hash_generate_test_vectors+0xf8>)
	ticks_res_pos = 0;
 80029c0:	603b      	str	r3, [r7, #0]
	aead_hash_print_res("HASH");
 80029c2:	f000 f83f 	bl	8002a44 <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 80029c6:	4819      	ldr	r0, [pc, #100]	; (8002a2c <hash_generate_test_vectors+0xfc>)
 80029c8:	f000 f8a6 	bl	8002b18 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80029cc:	2400      	movs	r4, #0
 80029ce:	2500      	movs	r5, #0
 80029d0:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80029d4:	f04f 0900 	mov.w	r9, #0

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 80029d8:	f8df b064 	ldr.w	fp, [pc, #100]	; 8002a40 <hash_generate_test_vectors+0x110>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4621      	mov	r1, r4
 80029e0:	f103 0c01 	add.w	ip, r3, #1
 80029e4:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 80029e8:	4658      	mov	r0, fp
 80029ea:	f8c7 c000 	str.w	ip, [r7]
 80029ee:	f000 f893 	bl	8002b18 <lwc_printf>

		if(mlen==0){
 80029f2:	ea54 0305 	orrs.w	r3, r4, r5
 80029f6:	d00d      	beq.n	8002a14 <hash_generate_test_vectors+0xe4>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80029f8:	1924      	adds	r4, r4, r4
 80029fa:	416d      	adcs	r5, r5
 80029fc:	45a9      	cmp	r9, r5
 80029fe:	bf08      	it	eq
 8002a00:	45a0      	cmpeq	r8, r4
 8002a02:	d2eb      	bcs.n	80029dc <hash_generate_test_vectors+0xac>
			mlen = 4;
		}
	}

	return ret_val;
}
 8002a04:	4630      	mov	r0, r6
 8002a06:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 8002a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002a0e:	2408      	movs	r4, #8
 8002a10:	2500      	movs	r5, #0
 8002a12:	e7a2      	b.n	800295a <hash_generate_test_vectors+0x2a>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002a14:	2408      	movs	r4, #8
 8002a16:	2500      	movs	r5, #0
 8002a18:	e7e0      	b.n	80029dc <hash_generate_test_vectors+0xac>
			ret_val = KAT_CRYPTO_FAILURE;
 8002a1a:	f06f 0603 	mvn.w	r6, #3
 8002a1e:	e7cd      	b.n	80029bc <hash_generate_test_vectors+0x8c>
 8002a20:	20000398 	.word	0x20000398
 8002a24:	20000090 	.word	0x20000090
 8002a28:	080043ec 	.word	0x080043ec
 8002a2c:	080043f4 	.word	0x080043f4
 8002a30:	20000298 	.word	0x20000298
 8002a34:	080043c0 	.word	0x080043c0
 8002a38:	20000094 	.word	0x20000094
 8002a3c:	080043d0 	.word	0x080043d0
 8002a40:	08004404 	.word	0x08004404

08002a44 <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4601      	mov	r1, r0
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <aead_hash_print_res+0x20>)
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <aead_hash_print_res+0x24>)
 8002a4c:	4807      	ldr	r0, [pc, #28]	; (8002a6c <aead_hash_print_res+0x28>)
 8002a4e:	f000 f863 	bl	8002b18 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
}
 8002a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002a56:	4906      	ldr	r1, [pc, #24]	; (8002a70 <aead_hash_print_res+0x2c>)
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <aead_hash_print_res+0x30>)
 8002a5a:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
 8002a5e:	6a09      	ldr	r1, [r1, #32]
 8002a60:	f000 b85a 	b.w	8002b18 <lwc_printf>
 8002a64:	08004210 	.word	0x08004210
 8002a68:	08004290 	.word	0x08004290
 8002a6c:	08004410 	.word	0x08004410
 8002a70:	20000634 	.word	0x20000634
 8002a74:	08004450 	.word	0x08004450

08002a78 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8002a78:	b430      	push	{r4, r5}
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	461d      	mov	r5, r3
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002a7e:	ea54 0305 	orrs.w	r3, r4, r5
 8002a82:	d009      	beq.n	8002a98 <init_buffer+0x20>
 8002a84:	1e41      	subs	r1, r0, #1
 8002a86:	460b      	mov	r3, r1
 8002a88:	4411      	add	r1, r2
 8002a8a:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
 8002a8e:	18c2      	adds	r2, r0, r3
		buffer[i] = (unsigned char) i + '0';
 8002a90:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d1fa      	bne.n	8002a8e <init_buffer+0x16>
	}
}
 8002a98:	bc30      	pop	{r4, r5}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_PeriodElapsedCallback>:
uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	tim_per_elp_cnt++;
 8002a9c:	4a02      	ldr	r2, [pc, #8]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000039c 	.word	0x2000039c

08002aac <tick_msr_start>:

void tick_msr_start(void) {

	tim_per_elp_cnt = 0;
 8002aac:	2300      	movs	r3, #0
void tick_msr_start(void) {
 8002aae:	b510      	push	{r4, lr}
	htim6.Instance->CNT = 0;
 8002ab0:	4c07      	ldr	r4, [pc, #28]	; (8002ad0 <tick_msr_start+0x24>)
	tim_per_elp_cnt = 0;
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <tick_msr_start+0x28>)
	htim6.Instance->CNT = 0;
 8002ab4:	6822      	ldr	r2, [r4, #0]
	tim_per_elp_cnt = 0;
 8002ab6:	600b      	str	r3, [r1, #0]
	htim6.Instance->CNT = 0;
 8002ab8:	6253      	str	r3, [r2, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8002aba:	f7fd fe5f 	bl	800077c <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <tick_msr_start+0x2c>)
	HAL_TIM_Base_Start_IT(&htim6);
 8002ac2:	4620      	mov	r0, r4
}
 8002ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gb_ms_ticks = HAL_GetTick();
 8002ac8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8002aca:	f7fe bd53 	b.w	8001574 <HAL_TIM_Base_Start_IT>
 8002ace:	bf00      	nop
 8002ad0:	200005e8 	.word	0x200005e8
 8002ad4:	2000039c 	.word	0x2000039c
 8002ad8:	20000094 	.word	0x20000094

08002adc <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8002adc:	b538      	push	{r3, r4, r5, lr}

	HAL_TIM_Base_Stop_IT(&htim6);
 8002ade:	4d0a      	ldr	r5, [pc, #40]	; (8002b08 <tick_msr_end+0x2c>)
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <tick_msr_end+0x30>)
	HAL_TIM_Base_Stop_IT(&htim6);
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7fe fda0 	bl	8001628 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <tick_msr_end+0x34>)
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002af4:	6023      	str	r3, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8002af6:	f7fd fe41 	bl	800077c <HAL_GetTick>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <tick_msr_end+0x38>)
	return gb_tick_cnt;
}
 8002afe:	6820      	ldr	r0, [r4, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	1a5b      	subs	r3, r3, r1
 8002b04:	6013      	str	r3, [r2, #0]
}
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	200005e8 	.word	0x200005e8
 8002b0c:	20000090 	.word	0x20000090
 8002b10:	2000039c 	.word	0x2000039c
 8002b14:	20000094 	.word	0x20000094

08002b18 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8002b18:	b40f      	push	{r0, r1, r2, r3}
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	aa04      	add	r2, sp, #16

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
	vsprintf(dbg_out_buf, format, args);
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <lwc_printf+0x34>)
void lwc_printf(const char *format, ...) {
 8002b22:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(dbg_out_buf, format, args);
 8002b26:	4620      	mov	r0, r4
	va_start(args, format);
 8002b28:	9201      	str	r2, [sp, #4]
	vsprintf(dbg_out_buf, format, args);
 8002b2a:	f000 fbdf 	bl	80032ec <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7fd fb6e 	bl	8000210 <strlen>
 8002b34:	4621      	mov	r1, r4
 8002b36:	b282      	uxth	r2, r0
 8002b38:	2364      	movs	r3, #100	; 0x64
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <lwc_printf+0x38>)
 8002b3c:	f7ff f813 	bl	8001b66 <HAL_UART_Transmit>
}
 8002b40:	b002      	add	sp, #8
 8002b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b46:	b004      	add	sp, #16
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	200003a0 	.word	0x200003a0
 8002b50:	200005a8 	.word	0x200005a8

08002b54 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 8002b58:	2234      	movs	r2, #52	; 0x34
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4822      	ldr	r0, [pc, #136]	; (8002be8 <get_memory_usage+0x94>)
 8002b5e:	f000 f8b9 	bl	8002cd4 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <get_memory_usage+0x94>)
 8002b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b68:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <get_memory_usage+0x94>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <get_memory_usage+0x94>)
 8002b70:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <get_memory_usage+0x98>)
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <get_memory_usage+0x94>)
 8002b76:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <get_memory_usage+0x9c>)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <get_memory_usage+0x94>)
 8002b7c:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <get_memory_usage+0xa0>)
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <get_memory_usage+0x94>)
 8002b82:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <get_memory_usage+0xa4>)
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <get_memory_usage+0x94>)
 8002b88:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <get_memory_usage+0xa8>)
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <get_memory_usage+0x94>)
 8002b8e:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <get_memory_usage+0xac>)
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <get_memory_usage+0x94>)
 8002b94:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <get_memory_usage+0x94>)
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <get_memory_usage+0x94>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <get_memory_usage+0x94>)
 8002ba2:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <get_memory_usage+0x94>)
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <get_memory_usage+0x94>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <get_memory_usage+0x94>)
 8002bb0:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <get_memory_usage+0x94>)
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <get_memory_usage+0x94>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <get_memory_usage+0x94>)
 8002bbe:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <get_memory_usage+0x94>)
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <get_memory_usage+0x94>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	4413      	add	r3, r2
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <get_memory_usage+0x94>)
 8002bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <get_memory_usage+0x94>)
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <get_memory_usage+0x94>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	441a      	add	r2, r3
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <get_memory_usage+0x94>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	4a02      	ldr	r2, [pc, #8]	; (8002be8 <get_memory_usage+0x94>)
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000634 	.word	0x20000634
 8002bec:	08003fac 	.word	0x08003fac
 8002bf0:	20000070 	.word	0x20000070
 8002bf4:	20000678 	.word	0x20000678
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000070 	.word	0x20000070
 8002c00:	08004554 	.word	0x08004554

08002c04 <__assert_func>:
 8002c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c06:	4614      	mov	r4, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <__assert_func+0x2c>)
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68d8      	ldr	r0, [r3, #12]
 8002c12:	b14c      	cbz	r4, 8002c28 <__assert_func+0x24>
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <__assert_func+0x30>)
 8002c16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002c1a:	9100      	str	r1, [sp, #0]
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	4906      	ldr	r1, [pc, #24]	; (8002c38 <__assert_func+0x34>)
 8002c20:	f000 f814 	bl	8002c4c <fiprintf>
 8002c24:	f000 fc2c 	bl	8003480 <abort>
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__assert_func+0x38>)
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	e7f3      	b.n	8002c16 <__assert_func+0x12>
 8002c2e:	bf00      	nop
 8002c30:	2000000c 	.word	0x2000000c
 8002c34:	08004478 	.word	0x08004478
 8002c38:	08004485 	.word	0x08004485
 8002c3c:	080044b3 	.word	0x080044b3

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <fiprintf>:
 8002c4c:	b40e      	push	{r1, r2, r3}
 8002c4e:	b503      	push	{r0, r1, lr}
 8002c50:	4601      	mov	r1, r0
 8002c52:	ab03      	add	r3, sp, #12
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <fiprintf+0x20>)
 8002c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c5a:	6800      	ldr	r0, [r0, #0]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	f000 f869 	bl	8002d34 <_vfiprintf_r>
 8002c62:	b002      	add	sp, #8
 8002c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c68:	b003      	add	sp, #12
 8002c6a:	4770      	bx	lr
 8002c6c:	2000000c 	.word	0x2000000c

08002c70 <__libc_init_array>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	2600      	movs	r6, #0
 8002c74:	4d0c      	ldr	r5, [pc, #48]	; (8002ca8 <__libc_init_array+0x38>)
 8002c76:	4c0d      	ldr	r4, [pc, #52]	; (8002cac <__libc_init_array+0x3c>)
 8002c78:	1b64      	subs	r4, r4, r5
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	42a6      	cmp	r6, r4
 8002c7e:	d109      	bne.n	8002c94 <__libc_init_array+0x24>
 8002c80:	f001 f988 	bl	8003f94 <_init>
 8002c84:	2600      	movs	r6, #0
 8002c86:	4d0a      	ldr	r5, [pc, #40]	; (8002cb0 <__libc_init_array+0x40>)
 8002c88:	4c0a      	ldr	r4, [pc, #40]	; (8002cb4 <__libc_init_array+0x44>)
 8002c8a:	1b64      	subs	r4, r4, r5
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	42a6      	cmp	r6, r4
 8002c90:	d105      	bne.n	8002c9e <__libc_init_array+0x2e>
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c98:	4798      	blx	r3
 8002c9a:	3601      	adds	r6, #1
 8002c9c:	e7ee      	b.n	8002c7c <__libc_init_array+0xc>
 8002c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca2:	4798      	blx	r3
 8002ca4:	3601      	adds	r6, #1
 8002ca6:	e7f2      	b.n	8002c8e <__libc_init_array+0x1e>
 8002ca8:	0800454c 	.word	0x0800454c
 8002cac:	0800454c 	.word	0x0800454c
 8002cb0:	0800454c 	.word	0x0800454c
 8002cb4:	08004550 	.word	0x08004550

08002cb8 <memcpy>:
 8002cb8:	440a      	add	r2, r1
 8002cba:	4291      	cmp	r1, r2
 8002cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cc0:	d100      	bne.n	8002cc4 <memcpy+0xc>
 8002cc2:	4770      	bx	lr
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cca:	4291      	cmp	r1, r2
 8002ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cd0:	d1f9      	bne.n	8002cc6 <memcpy+0xe>
 8002cd2:	bd10      	pop	{r4, pc}

08002cd4 <memset>:
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4402      	add	r2, r0
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d100      	bne.n	8002cde <memset+0xa>
 8002cdc:	4770      	bx	lr
 8002cde:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce2:	e7f9      	b.n	8002cd8 <memset+0x4>

08002ce4 <__sfputc_r>:
 8002ce4:	6893      	ldr	r3, [r2, #8]
 8002ce6:	b410      	push	{r4}
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	da07      	bge.n	8002d00 <__sfputc_r+0x1c>
 8002cf0:	6994      	ldr	r4, [r2, #24]
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	db01      	blt.n	8002cfa <__sfputc_r+0x16>
 8002cf6:	290a      	cmp	r1, #10
 8002cf8:	d102      	bne.n	8002d00 <__sfputc_r+0x1c>
 8002cfa:	bc10      	pop	{r4}
 8002cfc:	f000 bb00 	b.w	8003300 <__swbuf_r>
 8002d00:	6813      	ldr	r3, [r2, #0]
 8002d02:	1c58      	adds	r0, r3, #1
 8002d04:	6010      	str	r0, [r2, #0]
 8002d06:	7019      	strb	r1, [r3, #0]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	bc10      	pop	{r4}
 8002d0c:	4770      	bx	lr

08002d0e <__sfputs_r>:
 8002d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d10:	4606      	mov	r6, r0
 8002d12:	460f      	mov	r7, r1
 8002d14:	4614      	mov	r4, r2
 8002d16:	18d5      	adds	r5, r2, r3
 8002d18:	42ac      	cmp	r4, r5
 8002d1a:	d101      	bne.n	8002d20 <__sfputs_r+0x12>
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	e007      	b.n	8002d30 <__sfputs_r+0x22>
 8002d20:	463a      	mov	r2, r7
 8002d22:	4630      	mov	r0, r6
 8002d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d28:	f7ff ffdc 	bl	8002ce4 <__sfputc_r>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d1f3      	bne.n	8002d18 <__sfputs_r+0xa>
 8002d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d34 <_vfiprintf_r>:
 8002d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d38:	460d      	mov	r5, r1
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	4698      	mov	r8, r3
 8002d3e:	4606      	mov	r6, r0
 8002d40:	b09d      	sub	sp, #116	; 0x74
 8002d42:	b118      	cbz	r0, 8002d4c <_vfiprintf_r+0x18>
 8002d44:	6983      	ldr	r3, [r0, #24]
 8002d46:	b90b      	cbnz	r3, 8002d4c <_vfiprintf_r+0x18>
 8002d48:	f000 fcbc 	bl	80036c4 <__sinit>
 8002d4c:	4b89      	ldr	r3, [pc, #548]	; (8002f74 <_vfiprintf_r+0x240>)
 8002d4e:	429d      	cmp	r5, r3
 8002d50:	d11b      	bne.n	8002d8a <_vfiprintf_r+0x56>
 8002d52:	6875      	ldr	r5, [r6, #4]
 8002d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d56:	07d9      	lsls	r1, r3, #31
 8002d58:	d405      	bmi.n	8002d66 <_vfiprintf_r+0x32>
 8002d5a:	89ab      	ldrh	r3, [r5, #12]
 8002d5c:	059a      	lsls	r2, r3, #22
 8002d5e:	d402      	bmi.n	8002d66 <_vfiprintf_r+0x32>
 8002d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d62:	f000 fd4d 	bl	8003800 <__retarget_lock_acquire_recursive>
 8002d66:	89ab      	ldrh	r3, [r5, #12]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	d501      	bpl.n	8002d70 <_vfiprintf_r+0x3c>
 8002d6c:	692b      	ldr	r3, [r5, #16]
 8002d6e:	b9eb      	cbnz	r3, 8002dac <_vfiprintf_r+0x78>
 8002d70:	4629      	mov	r1, r5
 8002d72:	4630      	mov	r0, r6
 8002d74:	f000 fb16 	bl	80033a4 <__swsetup_r>
 8002d78:	b1c0      	cbz	r0, 8002dac <_vfiprintf_r+0x78>
 8002d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d7c:	07dc      	lsls	r4, r3, #31
 8002d7e:	d50e      	bpl.n	8002d9e <_vfiprintf_r+0x6a>
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	b01d      	add	sp, #116	; 0x74
 8002d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <_vfiprintf_r+0x244>)
 8002d8c:	429d      	cmp	r5, r3
 8002d8e:	d101      	bne.n	8002d94 <_vfiprintf_r+0x60>
 8002d90:	68b5      	ldr	r5, [r6, #8]
 8002d92:	e7df      	b.n	8002d54 <_vfiprintf_r+0x20>
 8002d94:	4b79      	ldr	r3, [pc, #484]	; (8002f7c <_vfiprintf_r+0x248>)
 8002d96:	429d      	cmp	r5, r3
 8002d98:	bf08      	it	eq
 8002d9a:	68f5      	ldreq	r5, [r6, #12]
 8002d9c:	e7da      	b.n	8002d54 <_vfiprintf_r+0x20>
 8002d9e:	89ab      	ldrh	r3, [r5, #12]
 8002da0:	0598      	lsls	r0, r3, #22
 8002da2:	d4ed      	bmi.n	8002d80 <_vfiprintf_r+0x4c>
 8002da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002da6:	f000 fd2c 	bl	8003802 <__retarget_lock_release_recursive>
 8002daa:	e7e9      	b.n	8002d80 <_vfiprintf_r+0x4c>
 8002dac:	2300      	movs	r3, #0
 8002dae:	9309      	str	r3, [sp, #36]	; 0x24
 8002db0:	2320      	movs	r3, #32
 8002db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002db6:	2330      	movs	r3, #48	; 0x30
 8002db8:	f04f 0901 	mov.w	r9, #1
 8002dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f80 <_vfiprintf_r+0x24c>
 8002dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dc8:	4623      	mov	r3, r4
 8002dca:	469a      	mov	sl, r3
 8002dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dd0:	b10a      	cbz	r2, 8002dd6 <_vfiprintf_r+0xa2>
 8002dd2:	2a25      	cmp	r2, #37	; 0x25
 8002dd4:	d1f9      	bne.n	8002dca <_vfiprintf_r+0x96>
 8002dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8002dda:	d00b      	beq.n	8002df4 <_vfiprintf_r+0xc0>
 8002ddc:	465b      	mov	r3, fp
 8002dde:	4622      	mov	r2, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	4630      	mov	r0, r6
 8002de4:	f7ff ff93 	bl	8002d0e <__sfputs_r>
 8002de8:	3001      	adds	r0, #1
 8002dea:	f000 80aa 	beq.w	8002f42 <_vfiprintf_r+0x20e>
 8002dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df0:	445a      	add	r2, fp
 8002df2:	9209      	str	r2, [sp, #36]	; 0x24
 8002df4:	f89a 3000 	ldrb.w	r3, [sl]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a2 	beq.w	8002f42 <_vfiprintf_r+0x20e>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e08:	f10a 0a01 	add.w	sl, sl, #1
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	9307      	str	r3, [sp, #28]
 8002e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e14:	931a      	str	r3, [sp, #104]	; 0x68
 8002e16:	4654      	mov	r4, sl
 8002e18:	2205      	movs	r2, #5
 8002e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1e:	4858      	ldr	r0, [pc, #352]	; (8002f80 <_vfiprintf_r+0x24c>)
 8002e20:	f000 fd54 	bl	80038cc <memchr>
 8002e24:	9a04      	ldr	r2, [sp, #16]
 8002e26:	b9d8      	cbnz	r0, 8002e60 <_vfiprintf_r+0x12c>
 8002e28:	06d1      	lsls	r1, r2, #27
 8002e2a:	bf44      	itt	mi
 8002e2c:	2320      	movmi	r3, #32
 8002e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e32:	0713      	lsls	r3, r2, #28
 8002e34:	bf44      	itt	mi
 8002e36:	232b      	movmi	r3, #43	; 0x2b
 8002e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e40:	2b2a      	cmp	r3, #42	; 0x2a
 8002e42:	d015      	beq.n	8002e70 <_vfiprintf_r+0x13c>
 8002e44:	4654      	mov	r4, sl
 8002e46:	2000      	movs	r0, #0
 8002e48:	f04f 0c0a 	mov.w	ip, #10
 8002e4c:	9a07      	ldr	r2, [sp, #28]
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e54:	3b30      	subs	r3, #48	; 0x30
 8002e56:	2b09      	cmp	r3, #9
 8002e58:	d94e      	bls.n	8002ef8 <_vfiprintf_r+0x1c4>
 8002e5a:	b1b0      	cbz	r0, 8002e8a <_vfiprintf_r+0x156>
 8002e5c:	9207      	str	r2, [sp, #28]
 8002e5e:	e014      	b.n	8002e8a <_vfiprintf_r+0x156>
 8002e60:	eba0 0308 	sub.w	r3, r0, r8
 8002e64:	fa09 f303 	lsl.w	r3, r9, r3
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	46a2      	mov	sl, r4
 8002e6c:	9304      	str	r3, [sp, #16]
 8002e6e:	e7d2      	b.n	8002e16 <_vfiprintf_r+0xe2>
 8002e70:	9b03      	ldr	r3, [sp, #12]
 8002e72:	1d19      	adds	r1, r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	9103      	str	r1, [sp, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bfbb      	ittet	lt
 8002e7c:	425b      	neglt	r3, r3
 8002e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8002e82:	9307      	strge	r3, [sp, #28]
 8002e84:	9307      	strlt	r3, [sp, #28]
 8002e86:	bfb8      	it	lt
 8002e88:	9204      	strlt	r2, [sp, #16]
 8002e8a:	7823      	ldrb	r3, [r4, #0]
 8002e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e8e:	d10c      	bne.n	8002eaa <_vfiprintf_r+0x176>
 8002e90:	7863      	ldrb	r3, [r4, #1]
 8002e92:	2b2a      	cmp	r3, #42	; 0x2a
 8002e94:	d135      	bne.n	8002f02 <_vfiprintf_r+0x1ce>
 8002e96:	9b03      	ldr	r3, [sp, #12]
 8002e98:	3402      	adds	r4, #2
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	9203      	str	r2, [sp, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bfb8      	it	lt
 8002ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ea8:	9305      	str	r3, [sp, #20]
 8002eaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002f90 <_vfiprintf_r+0x25c>
 8002eae:	2203      	movs	r2, #3
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	7821      	ldrb	r1, [r4, #0]
 8002eb4:	f000 fd0a 	bl	80038cc <memchr>
 8002eb8:	b140      	cbz	r0, 8002ecc <_vfiprintf_r+0x198>
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	eba0 000a 	sub.w	r0, r0, sl
 8002ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8002ec4:	9b04      	ldr	r3, [sp, #16]
 8002ec6:	3401      	adds	r4, #1
 8002ec8:	4303      	orrs	r3, r0
 8002eca:	9304      	str	r3, [sp, #16]
 8002ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed0:	2206      	movs	r2, #6
 8002ed2:	482c      	ldr	r0, [pc, #176]	; (8002f84 <_vfiprintf_r+0x250>)
 8002ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ed8:	f000 fcf8 	bl	80038cc <memchr>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d03f      	beq.n	8002f60 <_vfiprintf_r+0x22c>
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <_vfiprintf_r+0x254>)
 8002ee2:	bb1b      	cbnz	r3, 8002f2c <_vfiprintf_r+0x1f8>
 8002ee4:	9b03      	ldr	r3, [sp, #12]
 8002ee6:	3307      	adds	r3, #7
 8002ee8:	f023 0307 	bic.w	r3, r3, #7
 8002eec:	3308      	adds	r3, #8
 8002eee:	9303      	str	r3, [sp, #12]
 8002ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef2:	443b      	add	r3, r7
 8002ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef6:	e767      	b.n	8002dc8 <_vfiprintf_r+0x94>
 8002ef8:	460c      	mov	r4, r1
 8002efa:	2001      	movs	r0, #1
 8002efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f00:	e7a5      	b.n	8002e4e <_vfiprintf_r+0x11a>
 8002f02:	2300      	movs	r3, #0
 8002f04:	f04f 0c0a 	mov.w	ip, #10
 8002f08:	4619      	mov	r1, r3
 8002f0a:	3401      	adds	r4, #1
 8002f0c:	9305      	str	r3, [sp, #20]
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f14:	3a30      	subs	r2, #48	; 0x30
 8002f16:	2a09      	cmp	r2, #9
 8002f18:	d903      	bls.n	8002f22 <_vfiprintf_r+0x1ee>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0c5      	beq.n	8002eaa <_vfiprintf_r+0x176>
 8002f1e:	9105      	str	r1, [sp, #20]
 8002f20:	e7c3      	b.n	8002eaa <_vfiprintf_r+0x176>
 8002f22:	4604      	mov	r4, r0
 8002f24:	2301      	movs	r3, #1
 8002f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2a:	e7f0      	b.n	8002f0e <_vfiprintf_r+0x1da>
 8002f2c:	ab03      	add	r3, sp, #12
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	462a      	mov	r2, r5
 8002f32:	4630      	mov	r0, r6
 8002f34:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <_vfiprintf_r+0x258>)
 8002f36:	a904      	add	r1, sp, #16
 8002f38:	f3af 8000 	nop.w
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	1c78      	adds	r0, r7, #1
 8002f40:	d1d6      	bne.n	8002ef0 <_vfiprintf_r+0x1bc>
 8002f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f44:	07d9      	lsls	r1, r3, #31
 8002f46:	d405      	bmi.n	8002f54 <_vfiprintf_r+0x220>
 8002f48:	89ab      	ldrh	r3, [r5, #12]
 8002f4a:	059a      	lsls	r2, r3, #22
 8002f4c:	d402      	bmi.n	8002f54 <_vfiprintf_r+0x220>
 8002f4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f50:	f000 fc57 	bl	8003802 <__retarget_lock_release_recursive>
 8002f54:	89ab      	ldrh	r3, [r5, #12]
 8002f56:	065b      	lsls	r3, r3, #25
 8002f58:	f53f af12 	bmi.w	8002d80 <_vfiprintf_r+0x4c>
 8002f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f5e:	e711      	b.n	8002d84 <_vfiprintf_r+0x50>
 8002f60:	ab03      	add	r3, sp, #12
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	462a      	mov	r2, r5
 8002f66:	4630      	mov	r0, r6
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <_vfiprintf_r+0x258>)
 8002f6a:	a904      	add	r1, sp, #16
 8002f6c:	f000 f882 	bl	8003074 <_printf_i>
 8002f70:	e7e4      	b.n	8002f3c <_vfiprintf_r+0x208>
 8002f72:	bf00      	nop
 8002f74:	0800450c 	.word	0x0800450c
 8002f78:	0800452c 	.word	0x0800452c
 8002f7c:	080044ec 	.word	0x080044ec
 8002f80:	080044b8 	.word	0x080044b8
 8002f84:	080044c2 	.word	0x080044c2
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	08002d0f 	.word	0x08002d0f
 8002f90:	080044be 	.word	0x080044be

08002f94 <_printf_common>:
 8002f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	4616      	mov	r6, r2
 8002f9a:	4699      	mov	r9, r3
 8002f9c:	688a      	ldr	r2, [r1, #8]
 8002f9e:	690b      	ldr	r3, [r1, #16]
 8002fa0:	4607      	mov	r7, r0
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	bfb8      	it	lt
 8002fa6:	4613      	movlt	r3, r2
 8002fa8:	6033      	str	r3, [r6, #0]
 8002faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fae:	460c      	mov	r4, r1
 8002fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fb4:	b10a      	cbz	r2, 8002fba <_printf_common+0x26>
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	6033      	str	r3, [r6, #0]
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	0699      	lsls	r1, r3, #26
 8002fbe:	bf42      	ittt	mi
 8002fc0:	6833      	ldrmi	r3, [r6, #0]
 8002fc2:	3302      	addmi	r3, #2
 8002fc4:	6033      	strmi	r3, [r6, #0]
 8002fc6:	6825      	ldr	r5, [r4, #0]
 8002fc8:	f015 0506 	ands.w	r5, r5, #6
 8002fcc:	d106      	bne.n	8002fdc <_printf_common+0x48>
 8002fce:	f104 0a19 	add.w	sl, r4, #25
 8002fd2:	68e3      	ldr	r3, [r4, #12]
 8002fd4:	6832      	ldr	r2, [r6, #0]
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	42ab      	cmp	r3, r5
 8002fda:	dc28      	bgt.n	800302e <_printf_common+0x9a>
 8002fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fe0:	1e13      	subs	r3, r2, #0
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	bf18      	it	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	0692      	lsls	r2, r2, #26
 8002fea:	d42d      	bmi.n	8003048 <_printf_common+0xb4>
 8002fec:	4649      	mov	r1, r9
 8002fee:	4638      	mov	r0, r7
 8002ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ff4:	47c0      	blx	r8
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d020      	beq.n	800303c <_printf_common+0xa8>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	68e5      	ldr	r5, [r4, #12]
 8002ffe:	f003 0306 	and.w	r3, r3, #6
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf18      	it	ne
 8003006:	2500      	movne	r5, #0
 8003008:	6832      	ldr	r2, [r6, #0]
 800300a:	f04f 0600 	mov.w	r6, #0
 800300e:	68a3      	ldr	r3, [r4, #8]
 8003010:	bf08      	it	eq
 8003012:	1aad      	subeq	r5, r5, r2
 8003014:	6922      	ldr	r2, [r4, #16]
 8003016:	bf08      	it	eq
 8003018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800301c:	4293      	cmp	r3, r2
 800301e:	bfc4      	itt	gt
 8003020:	1a9b      	subgt	r3, r3, r2
 8003022:	18ed      	addgt	r5, r5, r3
 8003024:	341a      	adds	r4, #26
 8003026:	42b5      	cmp	r5, r6
 8003028:	d11a      	bne.n	8003060 <_printf_common+0xcc>
 800302a:	2000      	movs	r0, #0
 800302c:	e008      	b.n	8003040 <_printf_common+0xac>
 800302e:	2301      	movs	r3, #1
 8003030:	4652      	mov	r2, sl
 8003032:	4649      	mov	r1, r9
 8003034:	4638      	mov	r0, r7
 8003036:	47c0      	blx	r8
 8003038:	3001      	adds	r0, #1
 800303a:	d103      	bne.n	8003044 <_printf_common+0xb0>
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003044:	3501      	adds	r5, #1
 8003046:	e7c4      	b.n	8002fd2 <_printf_common+0x3e>
 8003048:	2030      	movs	r0, #48	; 0x30
 800304a:	18e1      	adds	r1, r4, r3
 800304c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003056:	4422      	add	r2, r4
 8003058:	3302      	adds	r3, #2
 800305a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800305e:	e7c5      	b.n	8002fec <_printf_common+0x58>
 8003060:	2301      	movs	r3, #1
 8003062:	4622      	mov	r2, r4
 8003064:	4649      	mov	r1, r9
 8003066:	4638      	mov	r0, r7
 8003068:	47c0      	blx	r8
 800306a:	3001      	adds	r0, #1
 800306c:	d0e6      	beq.n	800303c <_printf_common+0xa8>
 800306e:	3601      	adds	r6, #1
 8003070:	e7d9      	b.n	8003026 <_printf_common+0x92>
	...

08003074 <_printf_i>:
 8003074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003078:	460c      	mov	r4, r1
 800307a:	7e27      	ldrb	r7, [r4, #24]
 800307c:	4691      	mov	r9, r2
 800307e:	2f78      	cmp	r7, #120	; 0x78
 8003080:	4680      	mov	r8, r0
 8003082:	469a      	mov	sl, r3
 8003084:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003086:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800308a:	d807      	bhi.n	800309c <_printf_i+0x28>
 800308c:	2f62      	cmp	r7, #98	; 0x62
 800308e:	d80a      	bhi.n	80030a6 <_printf_i+0x32>
 8003090:	2f00      	cmp	r7, #0
 8003092:	f000 80d9 	beq.w	8003248 <_printf_i+0x1d4>
 8003096:	2f58      	cmp	r7, #88	; 0x58
 8003098:	f000 80a4 	beq.w	80031e4 <_printf_i+0x170>
 800309c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030a4:	e03a      	b.n	800311c <_printf_i+0xa8>
 80030a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030aa:	2b15      	cmp	r3, #21
 80030ac:	d8f6      	bhi.n	800309c <_printf_i+0x28>
 80030ae:	a001      	add	r0, pc, #4	; (adr r0, 80030b4 <_printf_i+0x40>)
 80030b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030b4:	0800310d 	.word	0x0800310d
 80030b8:	08003121 	.word	0x08003121
 80030bc:	0800309d 	.word	0x0800309d
 80030c0:	0800309d 	.word	0x0800309d
 80030c4:	0800309d 	.word	0x0800309d
 80030c8:	0800309d 	.word	0x0800309d
 80030cc:	08003121 	.word	0x08003121
 80030d0:	0800309d 	.word	0x0800309d
 80030d4:	0800309d 	.word	0x0800309d
 80030d8:	0800309d 	.word	0x0800309d
 80030dc:	0800309d 	.word	0x0800309d
 80030e0:	0800322f 	.word	0x0800322f
 80030e4:	08003151 	.word	0x08003151
 80030e8:	08003211 	.word	0x08003211
 80030ec:	0800309d 	.word	0x0800309d
 80030f0:	0800309d 	.word	0x0800309d
 80030f4:	08003251 	.word	0x08003251
 80030f8:	0800309d 	.word	0x0800309d
 80030fc:	08003151 	.word	0x08003151
 8003100:	0800309d 	.word	0x0800309d
 8003104:	0800309d 	.word	0x0800309d
 8003108:	08003219 	.word	0x08003219
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	600a      	str	r2, [r1, #0]
 8003118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800311c:	2301      	movs	r3, #1
 800311e:	e0a4      	b.n	800326a <_printf_i+0x1f6>
 8003120:	6825      	ldr	r5, [r4, #0]
 8003122:	6808      	ldr	r0, [r1, #0]
 8003124:	062e      	lsls	r6, r5, #24
 8003126:	f100 0304 	add.w	r3, r0, #4
 800312a:	d50a      	bpl.n	8003142 <_printf_i+0xce>
 800312c:	6805      	ldr	r5, [r0, #0]
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	2d00      	cmp	r5, #0
 8003132:	da03      	bge.n	800313c <_printf_i+0xc8>
 8003134:	232d      	movs	r3, #45	; 0x2d
 8003136:	426d      	negs	r5, r5
 8003138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800313c:	230a      	movs	r3, #10
 800313e:	485e      	ldr	r0, [pc, #376]	; (80032b8 <_printf_i+0x244>)
 8003140:	e019      	b.n	8003176 <_printf_i+0x102>
 8003142:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003146:	6805      	ldr	r5, [r0, #0]
 8003148:	600b      	str	r3, [r1, #0]
 800314a:	bf18      	it	ne
 800314c:	b22d      	sxthne	r5, r5
 800314e:	e7ef      	b.n	8003130 <_printf_i+0xbc>
 8003150:	680b      	ldr	r3, [r1, #0]
 8003152:	6825      	ldr	r5, [r4, #0]
 8003154:	1d18      	adds	r0, r3, #4
 8003156:	6008      	str	r0, [r1, #0]
 8003158:	0628      	lsls	r0, r5, #24
 800315a:	d501      	bpl.n	8003160 <_printf_i+0xec>
 800315c:	681d      	ldr	r5, [r3, #0]
 800315e:	e002      	b.n	8003166 <_printf_i+0xf2>
 8003160:	0669      	lsls	r1, r5, #25
 8003162:	d5fb      	bpl.n	800315c <_printf_i+0xe8>
 8003164:	881d      	ldrh	r5, [r3, #0]
 8003166:	2f6f      	cmp	r7, #111	; 0x6f
 8003168:	bf0c      	ite	eq
 800316a:	2308      	moveq	r3, #8
 800316c:	230a      	movne	r3, #10
 800316e:	4852      	ldr	r0, [pc, #328]	; (80032b8 <_printf_i+0x244>)
 8003170:	2100      	movs	r1, #0
 8003172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003176:	6866      	ldr	r6, [r4, #4]
 8003178:	2e00      	cmp	r6, #0
 800317a:	bfa8      	it	ge
 800317c:	6821      	ldrge	r1, [r4, #0]
 800317e:	60a6      	str	r6, [r4, #8]
 8003180:	bfa4      	itt	ge
 8003182:	f021 0104 	bicge.w	r1, r1, #4
 8003186:	6021      	strge	r1, [r4, #0]
 8003188:	b90d      	cbnz	r5, 800318e <_printf_i+0x11a>
 800318a:	2e00      	cmp	r6, #0
 800318c:	d04d      	beq.n	800322a <_printf_i+0x1b6>
 800318e:	4616      	mov	r6, r2
 8003190:	fbb5 f1f3 	udiv	r1, r5, r3
 8003194:	fb03 5711 	mls	r7, r3, r1, r5
 8003198:	5dc7      	ldrb	r7, [r0, r7]
 800319a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800319e:	462f      	mov	r7, r5
 80031a0:	42bb      	cmp	r3, r7
 80031a2:	460d      	mov	r5, r1
 80031a4:	d9f4      	bls.n	8003190 <_printf_i+0x11c>
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d10b      	bne.n	80031c2 <_printf_i+0x14e>
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	07df      	lsls	r7, r3, #31
 80031ae:	d508      	bpl.n	80031c2 <_printf_i+0x14e>
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	6861      	ldr	r1, [r4, #4]
 80031b4:	4299      	cmp	r1, r3
 80031b6:	bfde      	ittt	le
 80031b8:	2330      	movle	r3, #48	; 0x30
 80031ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031c2:	1b92      	subs	r2, r2, r6
 80031c4:	6122      	str	r2, [r4, #16]
 80031c6:	464b      	mov	r3, r9
 80031c8:	4621      	mov	r1, r4
 80031ca:	4640      	mov	r0, r8
 80031cc:	f8cd a000 	str.w	sl, [sp]
 80031d0:	aa03      	add	r2, sp, #12
 80031d2:	f7ff fedf 	bl	8002f94 <_printf_common>
 80031d6:	3001      	adds	r0, #1
 80031d8:	d14c      	bne.n	8003274 <_printf_i+0x200>
 80031da:	f04f 30ff 	mov.w	r0, #4294967295
 80031de:	b004      	add	sp, #16
 80031e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e4:	4834      	ldr	r0, [pc, #208]	; (80032b8 <_printf_i+0x244>)
 80031e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031ea:	680e      	ldr	r6, [r1, #0]
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80031f2:	061f      	lsls	r7, r3, #24
 80031f4:	600e      	str	r6, [r1, #0]
 80031f6:	d514      	bpl.n	8003222 <_printf_i+0x1ae>
 80031f8:	07d9      	lsls	r1, r3, #31
 80031fa:	bf44      	itt	mi
 80031fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003200:	6023      	strmi	r3, [r4, #0]
 8003202:	b91d      	cbnz	r5, 800320c <_printf_i+0x198>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	f023 0320 	bic.w	r3, r3, #32
 800320a:	6023      	str	r3, [r4, #0]
 800320c:	2310      	movs	r3, #16
 800320e:	e7af      	b.n	8003170 <_printf_i+0xfc>
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f043 0320 	orr.w	r3, r3, #32
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	2378      	movs	r3, #120	; 0x78
 800321a:	4828      	ldr	r0, [pc, #160]	; (80032bc <_printf_i+0x248>)
 800321c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003220:	e7e3      	b.n	80031ea <_printf_i+0x176>
 8003222:	065e      	lsls	r6, r3, #25
 8003224:	bf48      	it	mi
 8003226:	b2ad      	uxthmi	r5, r5
 8003228:	e7e6      	b.n	80031f8 <_printf_i+0x184>
 800322a:	4616      	mov	r6, r2
 800322c:	e7bb      	b.n	80031a6 <_printf_i+0x132>
 800322e:	680b      	ldr	r3, [r1, #0]
 8003230:	6826      	ldr	r6, [r4, #0]
 8003232:	1d1d      	adds	r5, r3, #4
 8003234:	6960      	ldr	r0, [r4, #20]
 8003236:	600d      	str	r5, [r1, #0]
 8003238:	0635      	lsls	r5, r6, #24
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	d501      	bpl.n	8003242 <_printf_i+0x1ce>
 800323e:	6018      	str	r0, [r3, #0]
 8003240:	e002      	b.n	8003248 <_printf_i+0x1d4>
 8003242:	0671      	lsls	r1, r6, #25
 8003244:	d5fb      	bpl.n	800323e <_printf_i+0x1ca>
 8003246:	8018      	strh	r0, [r3, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	4616      	mov	r6, r2
 800324c:	6123      	str	r3, [r4, #16]
 800324e:	e7ba      	b.n	80031c6 <_printf_i+0x152>
 8003250:	680b      	ldr	r3, [r1, #0]
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	600a      	str	r2, [r1, #0]
 8003256:	681e      	ldr	r6, [r3, #0]
 8003258:	2100      	movs	r1, #0
 800325a:	4630      	mov	r0, r6
 800325c:	6862      	ldr	r2, [r4, #4]
 800325e:	f000 fb35 	bl	80038cc <memchr>
 8003262:	b108      	cbz	r0, 8003268 <_printf_i+0x1f4>
 8003264:	1b80      	subs	r0, r0, r6
 8003266:	6060      	str	r0, [r4, #4]
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003272:	e7a8      	b.n	80031c6 <_printf_i+0x152>
 8003274:	4632      	mov	r2, r6
 8003276:	4649      	mov	r1, r9
 8003278:	4640      	mov	r0, r8
 800327a:	6923      	ldr	r3, [r4, #16]
 800327c:	47d0      	blx	sl
 800327e:	3001      	adds	r0, #1
 8003280:	d0ab      	beq.n	80031da <_printf_i+0x166>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	079b      	lsls	r3, r3, #30
 8003286:	d413      	bmi.n	80032b0 <_printf_i+0x23c>
 8003288:	68e0      	ldr	r0, [r4, #12]
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	4298      	cmp	r0, r3
 800328e:	bfb8      	it	lt
 8003290:	4618      	movlt	r0, r3
 8003292:	e7a4      	b.n	80031de <_printf_i+0x16a>
 8003294:	2301      	movs	r3, #1
 8003296:	4632      	mov	r2, r6
 8003298:	4649      	mov	r1, r9
 800329a:	4640      	mov	r0, r8
 800329c:	47d0      	blx	sl
 800329e:	3001      	adds	r0, #1
 80032a0:	d09b      	beq.n	80031da <_printf_i+0x166>
 80032a2:	3501      	adds	r5, #1
 80032a4:	68e3      	ldr	r3, [r4, #12]
 80032a6:	9903      	ldr	r1, [sp, #12]
 80032a8:	1a5b      	subs	r3, r3, r1
 80032aa:	42ab      	cmp	r3, r5
 80032ac:	dcf2      	bgt.n	8003294 <_printf_i+0x220>
 80032ae:	e7eb      	b.n	8003288 <_printf_i+0x214>
 80032b0:	2500      	movs	r5, #0
 80032b2:	f104 0619 	add.w	r6, r4, #25
 80032b6:	e7f5      	b.n	80032a4 <_printf_i+0x230>
 80032b8:	080044c9 	.word	0x080044c9
 80032bc:	080044da 	.word	0x080044da

080032c0 <_vsiprintf_r>:
 80032c0:	b500      	push	{lr}
 80032c2:	b09b      	sub	sp, #108	; 0x6c
 80032c4:	9100      	str	r1, [sp, #0]
 80032c6:	9104      	str	r1, [sp, #16]
 80032c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032cc:	9105      	str	r1, [sp, #20]
 80032ce:	9102      	str	r1, [sp, #8]
 80032d0:	4905      	ldr	r1, [pc, #20]	; (80032e8 <_vsiprintf_r+0x28>)
 80032d2:	9103      	str	r1, [sp, #12]
 80032d4:	4669      	mov	r1, sp
 80032d6:	f000 fc49 	bl	8003b6c <_svfiprintf_r>
 80032da:	2200      	movs	r2, #0
 80032dc:	9b00      	ldr	r3, [sp, #0]
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	b01b      	add	sp, #108	; 0x6c
 80032e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e6:	bf00      	nop
 80032e8:	ffff0208 	.word	0xffff0208

080032ec <vsiprintf>:
 80032ec:	4613      	mov	r3, r2
 80032ee:	460a      	mov	r2, r1
 80032f0:	4601      	mov	r1, r0
 80032f2:	4802      	ldr	r0, [pc, #8]	; (80032fc <vsiprintf+0x10>)
 80032f4:	6800      	ldr	r0, [r0, #0]
 80032f6:	f7ff bfe3 	b.w	80032c0 <_vsiprintf_r>
 80032fa:	bf00      	nop
 80032fc:	2000000c 	.word	0x2000000c

08003300 <__swbuf_r>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	460e      	mov	r6, r1
 8003304:	4614      	mov	r4, r2
 8003306:	4605      	mov	r5, r0
 8003308:	b118      	cbz	r0, 8003312 <__swbuf_r+0x12>
 800330a:	6983      	ldr	r3, [r0, #24]
 800330c:	b90b      	cbnz	r3, 8003312 <__swbuf_r+0x12>
 800330e:	f000 f9d9 	bl	80036c4 <__sinit>
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <__swbuf_r+0x98>)
 8003314:	429c      	cmp	r4, r3
 8003316:	d12b      	bne.n	8003370 <__swbuf_r+0x70>
 8003318:	686c      	ldr	r4, [r5, #4]
 800331a:	69a3      	ldr	r3, [r4, #24]
 800331c:	60a3      	str	r3, [r4, #8]
 800331e:	89a3      	ldrh	r3, [r4, #12]
 8003320:	071a      	lsls	r2, r3, #28
 8003322:	d52f      	bpl.n	8003384 <__swbuf_r+0x84>
 8003324:	6923      	ldr	r3, [r4, #16]
 8003326:	b36b      	cbz	r3, 8003384 <__swbuf_r+0x84>
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	6820      	ldr	r0, [r4, #0]
 800332c:	b2f6      	uxtb	r6, r6
 800332e:	1ac0      	subs	r0, r0, r3
 8003330:	6963      	ldr	r3, [r4, #20]
 8003332:	4637      	mov	r7, r6
 8003334:	4283      	cmp	r3, r0
 8003336:	dc04      	bgt.n	8003342 <__swbuf_r+0x42>
 8003338:	4621      	mov	r1, r4
 800333a:	4628      	mov	r0, r5
 800333c:	f000 f92e 	bl	800359c <_fflush_r>
 8003340:	bb30      	cbnz	r0, 8003390 <__swbuf_r+0x90>
 8003342:	68a3      	ldr	r3, [r4, #8]
 8003344:	3001      	adds	r0, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	60a3      	str	r3, [r4, #8]
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	6022      	str	r2, [r4, #0]
 8003350:	701e      	strb	r6, [r3, #0]
 8003352:	6963      	ldr	r3, [r4, #20]
 8003354:	4283      	cmp	r3, r0
 8003356:	d004      	beq.n	8003362 <__swbuf_r+0x62>
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	07db      	lsls	r3, r3, #31
 800335c:	d506      	bpl.n	800336c <__swbuf_r+0x6c>
 800335e:	2e0a      	cmp	r6, #10
 8003360:	d104      	bne.n	800336c <__swbuf_r+0x6c>
 8003362:	4621      	mov	r1, r4
 8003364:	4628      	mov	r0, r5
 8003366:	f000 f919 	bl	800359c <_fflush_r>
 800336a:	b988      	cbnz	r0, 8003390 <__swbuf_r+0x90>
 800336c:	4638      	mov	r0, r7
 800336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <__swbuf_r+0x9c>)
 8003372:	429c      	cmp	r4, r3
 8003374:	d101      	bne.n	800337a <__swbuf_r+0x7a>
 8003376:	68ac      	ldr	r4, [r5, #8]
 8003378:	e7cf      	b.n	800331a <__swbuf_r+0x1a>
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <__swbuf_r+0xa0>)
 800337c:	429c      	cmp	r4, r3
 800337e:	bf08      	it	eq
 8003380:	68ec      	ldreq	r4, [r5, #12]
 8003382:	e7ca      	b.n	800331a <__swbuf_r+0x1a>
 8003384:	4621      	mov	r1, r4
 8003386:	4628      	mov	r0, r5
 8003388:	f000 f80c 	bl	80033a4 <__swsetup_r>
 800338c:	2800      	cmp	r0, #0
 800338e:	d0cb      	beq.n	8003328 <__swbuf_r+0x28>
 8003390:	f04f 37ff 	mov.w	r7, #4294967295
 8003394:	e7ea      	b.n	800336c <__swbuf_r+0x6c>
 8003396:	bf00      	nop
 8003398:	0800450c 	.word	0x0800450c
 800339c:	0800452c 	.word	0x0800452c
 80033a0:	080044ec 	.word	0x080044ec

080033a4 <__swsetup_r>:
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <__swsetup_r+0xcc>)
 80033a6:	b570      	push	{r4, r5, r6, lr}
 80033a8:	681d      	ldr	r5, [r3, #0]
 80033aa:	4606      	mov	r6, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	b125      	cbz	r5, 80033ba <__swsetup_r+0x16>
 80033b0:	69ab      	ldr	r3, [r5, #24]
 80033b2:	b913      	cbnz	r3, 80033ba <__swsetup_r+0x16>
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f985 	bl	80036c4 <__sinit>
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <__swsetup_r+0xd0>)
 80033bc:	429c      	cmp	r4, r3
 80033be:	d10f      	bne.n	80033e0 <__swsetup_r+0x3c>
 80033c0:	686c      	ldr	r4, [r5, #4]
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033c8:	0719      	lsls	r1, r3, #28
 80033ca:	d42c      	bmi.n	8003426 <__swsetup_r+0x82>
 80033cc:	06dd      	lsls	r5, r3, #27
 80033ce:	d411      	bmi.n	80033f4 <__swsetup_r+0x50>
 80033d0:	2309      	movs	r3, #9
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	81a3      	strh	r3, [r4, #12]
 80033de:	e03e      	b.n	800345e <__swsetup_r+0xba>
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <__swsetup_r+0xd4>)
 80033e2:	429c      	cmp	r4, r3
 80033e4:	d101      	bne.n	80033ea <__swsetup_r+0x46>
 80033e6:	68ac      	ldr	r4, [r5, #8]
 80033e8:	e7eb      	b.n	80033c2 <__swsetup_r+0x1e>
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <__swsetup_r+0xd8>)
 80033ec:	429c      	cmp	r4, r3
 80033ee:	bf08      	it	eq
 80033f0:	68ec      	ldreq	r4, [r5, #12]
 80033f2:	e7e6      	b.n	80033c2 <__swsetup_r+0x1e>
 80033f4:	0758      	lsls	r0, r3, #29
 80033f6:	d512      	bpl.n	800341e <__swsetup_r+0x7a>
 80033f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033fa:	b141      	cbz	r1, 800340e <__swsetup_r+0x6a>
 80033fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003400:	4299      	cmp	r1, r3
 8003402:	d002      	beq.n	800340a <__swsetup_r+0x66>
 8003404:	4630      	mov	r0, r6
 8003406:	f000 fa89 	bl	800391c <_free_r>
 800340a:	2300      	movs	r3, #0
 800340c:	6363      	str	r3, [r4, #52]	; 0x34
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	2300      	movs	r3, #0
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	b94b      	cbnz	r3, 800343e <__swsetup_r+0x9a>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d003      	beq.n	800343e <__swsetup_r+0x9a>
 8003436:	4621      	mov	r1, r4
 8003438:	4630      	mov	r0, r6
 800343a:	f000 fa07 	bl	800384c <__smakebuf_r>
 800343e:	89a0      	ldrh	r0, [r4, #12]
 8003440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003444:	f010 0301 	ands.w	r3, r0, #1
 8003448:	d00a      	beq.n	8003460 <__swsetup_r+0xbc>
 800344a:	2300      	movs	r3, #0
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	6963      	ldr	r3, [r4, #20]
 8003450:	425b      	negs	r3, r3
 8003452:	61a3      	str	r3, [r4, #24]
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	b943      	cbnz	r3, 800346a <__swsetup_r+0xc6>
 8003458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800345c:	d1ba      	bne.n	80033d4 <__swsetup_r+0x30>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	0781      	lsls	r1, r0, #30
 8003462:	bf58      	it	pl
 8003464:	6963      	ldrpl	r3, [r4, #20]
 8003466:	60a3      	str	r3, [r4, #8]
 8003468:	e7f4      	b.n	8003454 <__swsetup_r+0xb0>
 800346a:	2000      	movs	r0, #0
 800346c:	e7f7      	b.n	800345e <__swsetup_r+0xba>
 800346e:	bf00      	nop
 8003470:	2000000c 	.word	0x2000000c
 8003474:	0800450c 	.word	0x0800450c
 8003478:	0800452c 	.word	0x0800452c
 800347c:	080044ec 	.word	0x080044ec

08003480 <abort>:
 8003480:	2006      	movs	r0, #6
 8003482:	b508      	push	{r3, lr}
 8003484:	f000 fcaa 	bl	8003ddc <raise>
 8003488:	2001      	movs	r0, #1
 800348a:	f7fd f854 	bl	8000536 <_exit>
	...

08003490 <__sflush_r>:
 8003490:	898a      	ldrh	r2, [r1, #12]
 8003492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003496:	4605      	mov	r5, r0
 8003498:	0710      	lsls	r0, r2, #28
 800349a:	460c      	mov	r4, r1
 800349c:	d458      	bmi.n	8003550 <__sflush_r+0xc0>
 800349e:	684b      	ldr	r3, [r1, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	dc05      	bgt.n	80034b0 <__sflush_r+0x20>
 80034a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dc02      	bgt.n	80034b0 <__sflush_r+0x20>
 80034aa:	2000      	movs	r0, #0
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034b2:	2e00      	cmp	r6, #0
 80034b4:	d0f9      	beq.n	80034aa <__sflush_r+0x1a>
 80034b6:	2300      	movs	r3, #0
 80034b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034bc:	682f      	ldr	r7, [r5, #0]
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	d032      	beq.n	8003528 <__sflush_r+0x98>
 80034c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	075a      	lsls	r2, r3, #29
 80034c8:	d505      	bpl.n	80034d6 <__sflush_r+0x46>
 80034ca:	6863      	ldr	r3, [r4, #4]
 80034cc:	1ac0      	subs	r0, r0, r3
 80034ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034d0:	b10b      	cbz	r3, 80034d6 <__sflush_r+0x46>
 80034d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d4:	1ac0      	subs	r0, r0, r3
 80034d6:	2300      	movs	r3, #0
 80034d8:	4602      	mov	r2, r0
 80034da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034dc:	4628      	mov	r0, r5
 80034de:	6a21      	ldr	r1, [r4, #32]
 80034e0:	47b0      	blx	r6
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	d106      	bne.n	80034f6 <__sflush_r+0x66>
 80034e8:	6829      	ldr	r1, [r5, #0]
 80034ea:	291d      	cmp	r1, #29
 80034ec:	d82c      	bhi.n	8003548 <__sflush_r+0xb8>
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <__sflush_r+0x108>)
 80034f0:	40ca      	lsrs	r2, r1
 80034f2:	07d6      	lsls	r6, r2, #31
 80034f4:	d528      	bpl.n	8003548 <__sflush_r+0xb8>
 80034f6:	2200      	movs	r2, #0
 80034f8:	6062      	str	r2, [r4, #4]
 80034fa:	6922      	ldr	r2, [r4, #16]
 80034fc:	04d9      	lsls	r1, r3, #19
 80034fe:	6022      	str	r2, [r4, #0]
 8003500:	d504      	bpl.n	800350c <__sflush_r+0x7c>
 8003502:	1c42      	adds	r2, r0, #1
 8003504:	d101      	bne.n	800350a <__sflush_r+0x7a>
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	b903      	cbnz	r3, 800350c <__sflush_r+0x7c>
 800350a:	6560      	str	r0, [r4, #84]	; 0x54
 800350c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800350e:	602f      	str	r7, [r5, #0]
 8003510:	2900      	cmp	r1, #0
 8003512:	d0ca      	beq.n	80034aa <__sflush_r+0x1a>
 8003514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003518:	4299      	cmp	r1, r3
 800351a:	d002      	beq.n	8003522 <__sflush_r+0x92>
 800351c:	4628      	mov	r0, r5
 800351e:	f000 f9fd 	bl	800391c <_free_r>
 8003522:	2000      	movs	r0, #0
 8003524:	6360      	str	r0, [r4, #52]	; 0x34
 8003526:	e7c1      	b.n	80034ac <__sflush_r+0x1c>
 8003528:	6a21      	ldr	r1, [r4, #32]
 800352a:	2301      	movs	r3, #1
 800352c:	4628      	mov	r0, r5
 800352e:	47b0      	blx	r6
 8003530:	1c41      	adds	r1, r0, #1
 8003532:	d1c7      	bne.n	80034c4 <__sflush_r+0x34>
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0c4      	beq.n	80034c4 <__sflush_r+0x34>
 800353a:	2b1d      	cmp	r3, #29
 800353c:	d001      	beq.n	8003542 <__sflush_r+0xb2>
 800353e:	2b16      	cmp	r3, #22
 8003540:	d101      	bne.n	8003546 <__sflush_r+0xb6>
 8003542:	602f      	str	r7, [r5, #0]
 8003544:	e7b1      	b.n	80034aa <__sflush_r+0x1a>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	81a3      	strh	r3, [r4, #12]
 800354e:	e7ad      	b.n	80034ac <__sflush_r+0x1c>
 8003550:	690f      	ldr	r7, [r1, #16]
 8003552:	2f00      	cmp	r7, #0
 8003554:	d0a9      	beq.n	80034aa <__sflush_r+0x1a>
 8003556:	0793      	lsls	r3, r2, #30
 8003558:	bf18      	it	ne
 800355a:	2300      	movne	r3, #0
 800355c:	680e      	ldr	r6, [r1, #0]
 800355e:	bf08      	it	eq
 8003560:	694b      	ldreq	r3, [r1, #20]
 8003562:	eba6 0807 	sub.w	r8, r6, r7
 8003566:	600f      	str	r7, [r1, #0]
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	f1b8 0f00 	cmp.w	r8, #0
 800356e:	dd9c      	ble.n	80034aa <__sflush_r+0x1a>
 8003570:	4643      	mov	r3, r8
 8003572:	463a      	mov	r2, r7
 8003574:	4628      	mov	r0, r5
 8003576:	6a21      	ldr	r1, [r4, #32]
 8003578:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800357a:	47b0      	blx	r6
 800357c:	2800      	cmp	r0, #0
 800357e:	dc06      	bgt.n	800358e <__sflush_r+0xfe>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800358a:	81a3      	strh	r3, [r4, #12]
 800358c:	e78e      	b.n	80034ac <__sflush_r+0x1c>
 800358e:	4407      	add	r7, r0
 8003590:	eba8 0800 	sub.w	r8, r8, r0
 8003594:	e7e9      	b.n	800356a <__sflush_r+0xda>
 8003596:	bf00      	nop
 8003598:	20400001 	.word	0x20400001

0800359c <_fflush_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	4605      	mov	r5, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	b913      	cbnz	r3, 80035ac <_fflush_r+0x10>
 80035a6:	2500      	movs	r5, #0
 80035a8:	4628      	mov	r0, r5
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	b118      	cbz	r0, 80035b6 <_fflush_r+0x1a>
 80035ae:	6983      	ldr	r3, [r0, #24]
 80035b0:	b90b      	cbnz	r3, 80035b6 <_fflush_r+0x1a>
 80035b2:	f000 f887 	bl	80036c4 <__sinit>
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <_fflush_r+0x6c>)
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d11b      	bne.n	80035f4 <_fflush_r+0x58>
 80035bc:	686c      	ldr	r4, [r5, #4]
 80035be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0ef      	beq.n	80035a6 <_fflush_r+0xa>
 80035c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035c8:	07d0      	lsls	r0, r2, #31
 80035ca:	d404      	bmi.n	80035d6 <_fflush_r+0x3a>
 80035cc:	0599      	lsls	r1, r3, #22
 80035ce:	d402      	bmi.n	80035d6 <_fflush_r+0x3a>
 80035d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035d2:	f000 f915 	bl	8003800 <__retarget_lock_acquire_recursive>
 80035d6:	4628      	mov	r0, r5
 80035d8:	4621      	mov	r1, r4
 80035da:	f7ff ff59 	bl	8003490 <__sflush_r>
 80035de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035e0:	4605      	mov	r5, r0
 80035e2:	07da      	lsls	r2, r3, #31
 80035e4:	d4e0      	bmi.n	80035a8 <_fflush_r+0xc>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	059b      	lsls	r3, r3, #22
 80035ea:	d4dd      	bmi.n	80035a8 <_fflush_r+0xc>
 80035ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ee:	f000 f908 	bl	8003802 <__retarget_lock_release_recursive>
 80035f2:	e7d9      	b.n	80035a8 <_fflush_r+0xc>
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <_fflush_r+0x70>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <_fflush_r+0x62>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7df      	b.n	80035be <_fflush_r+0x22>
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <_fflush_r+0x74>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7da      	b.n	80035be <_fflush_r+0x22>
 8003608:	0800450c 	.word	0x0800450c
 800360c:	0800452c 	.word	0x0800452c
 8003610:	080044ec 	.word	0x080044ec

08003614 <std>:
 8003614:	2300      	movs	r3, #0
 8003616:	b510      	push	{r4, lr}
 8003618:	4604      	mov	r4, r0
 800361a:	e9c0 3300 	strd	r3, r3, [r0]
 800361e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003622:	6083      	str	r3, [r0, #8]
 8003624:	8181      	strh	r1, [r0, #12]
 8003626:	6643      	str	r3, [r0, #100]	; 0x64
 8003628:	81c2      	strh	r2, [r0, #14]
 800362a:	6183      	str	r3, [r0, #24]
 800362c:	4619      	mov	r1, r3
 800362e:	2208      	movs	r2, #8
 8003630:	305c      	adds	r0, #92	; 0x5c
 8003632:	f7ff fb4f 	bl	8002cd4 <memset>
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <std+0x38>)
 8003638:	6224      	str	r4, [r4, #32]
 800363a:	6263      	str	r3, [r4, #36]	; 0x24
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <std+0x3c>)
 800363e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <std+0x40>)
 8003642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <std+0x44>)
 8003646:	6323      	str	r3, [r4, #48]	; 0x30
 8003648:	bd10      	pop	{r4, pc}
 800364a:	bf00      	nop
 800364c:	08003e15 	.word	0x08003e15
 8003650:	08003e37 	.word	0x08003e37
 8003654:	08003e6f 	.word	0x08003e6f
 8003658:	08003e93 	.word	0x08003e93

0800365c <_cleanup_r>:
 800365c:	4901      	ldr	r1, [pc, #4]	; (8003664 <_cleanup_r+0x8>)
 800365e:	f000 b8af 	b.w	80037c0 <_fwalk_reent>
 8003662:	bf00      	nop
 8003664:	0800359d 	.word	0x0800359d

08003668 <__sfmoreglue>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	2568      	movs	r5, #104	; 0x68
 800366c:	1e4a      	subs	r2, r1, #1
 800366e:	4355      	muls	r5, r2
 8003670:	460e      	mov	r6, r1
 8003672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003676:	f000 f99d 	bl	80039b4 <_malloc_r>
 800367a:	4604      	mov	r4, r0
 800367c:	b140      	cbz	r0, 8003690 <__sfmoreglue+0x28>
 800367e:	2100      	movs	r1, #0
 8003680:	e9c0 1600 	strd	r1, r6, [r0]
 8003684:	300c      	adds	r0, #12
 8003686:	60a0      	str	r0, [r4, #8]
 8003688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800368c:	f7ff fb22 	bl	8002cd4 <memset>
 8003690:	4620      	mov	r0, r4
 8003692:	bd70      	pop	{r4, r5, r6, pc}

08003694 <__sfp_lock_acquire>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__sfp_lock_acquire+0x8>)
 8003696:	f000 b8b3 	b.w	8003800 <__retarget_lock_acquire_recursive>
 800369a:	bf00      	nop
 800369c:	20000670 	.word	0x20000670

080036a0 <__sfp_lock_release>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sfp_lock_release+0x8>)
 80036a2:	f000 b8ae 	b.w	8003802 <__retarget_lock_release_recursive>
 80036a6:	bf00      	nop
 80036a8:	20000670 	.word	0x20000670

080036ac <__sinit_lock_acquire>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__sinit_lock_acquire+0x8>)
 80036ae:	f000 b8a7 	b.w	8003800 <__retarget_lock_acquire_recursive>
 80036b2:	bf00      	nop
 80036b4:	2000066b 	.word	0x2000066b

080036b8 <__sinit_lock_release>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__sinit_lock_release+0x8>)
 80036ba:	f000 b8a2 	b.w	8003802 <__retarget_lock_release_recursive>
 80036be:	bf00      	nop
 80036c0:	2000066b 	.word	0x2000066b

080036c4 <__sinit>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	f7ff fff0 	bl	80036ac <__sinit_lock_acquire>
 80036cc:	69a3      	ldr	r3, [r4, #24]
 80036ce:	b11b      	cbz	r3, 80036d8 <__sinit+0x14>
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d4:	f7ff bff0 	b.w	80036b8 <__sinit_lock_release>
 80036d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036dc:	6523      	str	r3, [r4, #80]	; 0x50
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <__sinit+0x68>)
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <__sinit+0x6c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80036e6:	42a3      	cmp	r3, r4
 80036e8:	bf08      	it	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	4620      	mov	r0, r4
 80036ee:	bf08      	it	eq
 80036f0:	61a3      	streq	r3, [r4, #24]
 80036f2:	f000 f81f 	bl	8003734 <__sfp>
 80036f6:	6060      	str	r0, [r4, #4]
 80036f8:	4620      	mov	r0, r4
 80036fa:	f000 f81b 	bl	8003734 <__sfp>
 80036fe:	60a0      	str	r0, [r4, #8]
 8003700:	4620      	mov	r0, r4
 8003702:	f000 f817 	bl	8003734 <__sfp>
 8003706:	2200      	movs	r2, #0
 8003708:	2104      	movs	r1, #4
 800370a:	60e0      	str	r0, [r4, #12]
 800370c:	6860      	ldr	r0, [r4, #4]
 800370e:	f7ff ff81 	bl	8003614 <std>
 8003712:	2201      	movs	r2, #1
 8003714:	2109      	movs	r1, #9
 8003716:	68a0      	ldr	r0, [r4, #8]
 8003718:	f7ff ff7c 	bl	8003614 <std>
 800371c:	2202      	movs	r2, #2
 800371e:	2112      	movs	r1, #18
 8003720:	68e0      	ldr	r0, [r4, #12]
 8003722:	f7ff ff77 	bl	8003614 <std>
 8003726:	2301      	movs	r3, #1
 8003728:	61a3      	str	r3, [r4, #24]
 800372a:	e7d1      	b.n	80036d0 <__sinit+0xc>
 800372c:	080044b4 	.word	0x080044b4
 8003730:	0800365d 	.word	0x0800365d

08003734 <__sfp>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	4607      	mov	r7, r0
 8003738:	f7ff ffac 	bl	8003694 <__sfp_lock_acquire>
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <__sfp+0x84>)
 800373e:	681e      	ldr	r6, [r3, #0]
 8003740:	69b3      	ldr	r3, [r6, #24]
 8003742:	b913      	cbnz	r3, 800374a <__sfp+0x16>
 8003744:	4630      	mov	r0, r6
 8003746:	f7ff ffbd 	bl	80036c4 <__sinit>
 800374a:	3648      	adds	r6, #72	; 0x48
 800374c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003750:	3b01      	subs	r3, #1
 8003752:	d503      	bpl.n	800375c <__sfp+0x28>
 8003754:	6833      	ldr	r3, [r6, #0]
 8003756:	b30b      	cbz	r3, 800379c <__sfp+0x68>
 8003758:	6836      	ldr	r6, [r6, #0]
 800375a:	e7f7      	b.n	800374c <__sfp+0x18>
 800375c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003760:	b9d5      	cbnz	r5, 8003798 <__sfp+0x64>
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <__sfp+0x88>)
 8003764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003768:	60e3      	str	r3, [r4, #12]
 800376a:	6665      	str	r5, [r4, #100]	; 0x64
 800376c:	f000 f847 	bl	80037fe <__retarget_lock_init_recursive>
 8003770:	f7ff ff96 	bl	80036a0 <__sfp_lock_release>
 8003774:	2208      	movs	r2, #8
 8003776:	4629      	mov	r1, r5
 8003778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800377c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003780:	6025      	str	r5, [r4, #0]
 8003782:	61a5      	str	r5, [r4, #24]
 8003784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003788:	f7ff faa4 	bl	8002cd4 <memset>
 800378c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003794:	4620      	mov	r0, r4
 8003796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003798:	3468      	adds	r4, #104	; 0x68
 800379a:	e7d9      	b.n	8003750 <__sfp+0x1c>
 800379c:	2104      	movs	r1, #4
 800379e:	4638      	mov	r0, r7
 80037a0:	f7ff ff62 	bl	8003668 <__sfmoreglue>
 80037a4:	4604      	mov	r4, r0
 80037a6:	6030      	str	r0, [r6, #0]
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d1d5      	bne.n	8003758 <__sfp+0x24>
 80037ac:	f7ff ff78 	bl	80036a0 <__sfp_lock_release>
 80037b0:	230c      	movs	r3, #12
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	e7ee      	b.n	8003794 <__sfp+0x60>
 80037b6:	bf00      	nop
 80037b8:	080044b4 	.word	0x080044b4
 80037bc:	ffff0001 	.word	0xffff0001

080037c0 <_fwalk_reent>:
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c4:	4606      	mov	r6, r0
 80037c6:	4688      	mov	r8, r1
 80037c8:	2700      	movs	r7, #0
 80037ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037d2:	f1b9 0901 	subs.w	r9, r9, #1
 80037d6:	d505      	bpl.n	80037e4 <_fwalk_reent+0x24>
 80037d8:	6824      	ldr	r4, [r4, #0]
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d1f7      	bne.n	80037ce <_fwalk_reent+0xe>
 80037de:	4638      	mov	r0, r7
 80037e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e4:	89ab      	ldrh	r3, [r5, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d907      	bls.n	80037fa <_fwalk_reent+0x3a>
 80037ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ee:	3301      	adds	r3, #1
 80037f0:	d003      	beq.n	80037fa <_fwalk_reent+0x3a>
 80037f2:	4629      	mov	r1, r5
 80037f4:	4630      	mov	r0, r6
 80037f6:	47c0      	blx	r8
 80037f8:	4307      	orrs	r7, r0
 80037fa:	3568      	adds	r5, #104	; 0x68
 80037fc:	e7e9      	b.n	80037d2 <_fwalk_reent+0x12>

080037fe <__retarget_lock_init_recursive>:
 80037fe:	4770      	bx	lr

08003800 <__retarget_lock_acquire_recursive>:
 8003800:	4770      	bx	lr

08003802 <__retarget_lock_release_recursive>:
 8003802:	4770      	bx	lr

08003804 <__swhatbuf_r>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	460e      	mov	r6, r1
 8003808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380c:	4614      	mov	r4, r2
 800380e:	2900      	cmp	r1, #0
 8003810:	461d      	mov	r5, r3
 8003812:	b096      	sub	sp, #88	; 0x58
 8003814:	da07      	bge.n	8003826 <__swhatbuf_r+0x22>
 8003816:	2300      	movs	r3, #0
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	89b3      	ldrh	r3, [r6, #12]
 800381c:	061a      	lsls	r2, r3, #24
 800381e:	d410      	bmi.n	8003842 <__swhatbuf_r+0x3e>
 8003820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003824:	e00e      	b.n	8003844 <__swhatbuf_r+0x40>
 8003826:	466a      	mov	r2, sp
 8003828:	f000 fb5a 	bl	8003ee0 <_fstat_r>
 800382c:	2800      	cmp	r0, #0
 800382e:	dbf2      	blt.n	8003816 <__swhatbuf_r+0x12>
 8003830:	9a01      	ldr	r2, [sp, #4]
 8003832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800383a:	425a      	negs	r2, r3
 800383c:	415a      	adcs	r2, r3
 800383e:	602a      	str	r2, [r5, #0]
 8003840:	e7ee      	b.n	8003820 <__swhatbuf_r+0x1c>
 8003842:	2340      	movs	r3, #64	; 0x40
 8003844:	2000      	movs	r0, #0
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	b016      	add	sp, #88	; 0x58
 800384a:	bd70      	pop	{r4, r5, r6, pc}

0800384c <__smakebuf_r>:
 800384c:	898b      	ldrh	r3, [r1, #12]
 800384e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003850:	079d      	lsls	r5, r3, #30
 8003852:	4606      	mov	r6, r0
 8003854:	460c      	mov	r4, r1
 8003856:	d507      	bpl.n	8003868 <__smakebuf_r+0x1c>
 8003858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	6123      	str	r3, [r4, #16]
 8003860:	2301      	movs	r3, #1
 8003862:	6163      	str	r3, [r4, #20]
 8003864:	b002      	add	sp, #8
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	466a      	mov	r2, sp
 800386a:	ab01      	add	r3, sp, #4
 800386c:	f7ff ffca 	bl	8003804 <__swhatbuf_r>
 8003870:	9900      	ldr	r1, [sp, #0]
 8003872:	4605      	mov	r5, r0
 8003874:	4630      	mov	r0, r6
 8003876:	f000 f89d 	bl	80039b4 <_malloc_r>
 800387a:	b948      	cbnz	r0, 8003890 <__smakebuf_r+0x44>
 800387c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003880:	059a      	lsls	r2, r3, #22
 8003882:	d4ef      	bmi.n	8003864 <__smakebuf_r+0x18>
 8003884:	f023 0303 	bic.w	r3, r3, #3
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	81a3      	strh	r3, [r4, #12]
 800388e:	e7e3      	b.n	8003858 <__smakebuf_r+0xc>
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <__smakebuf_r+0x7c>)
 8003892:	62b3      	str	r3, [r6, #40]	; 0x28
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	6020      	str	r0, [r4, #0]
 8003898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	9b00      	ldr	r3, [sp, #0]
 80038a0:	6120      	str	r0, [r4, #16]
 80038a2:	6163      	str	r3, [r4, #20]
 80038a4:	9b01      	ldr	r3, [sp, #4]
 80038a6:	b15b      	cbz	r3, 80038c0 <__smakebuf_r+0x74>
 80038a8:	4630      	mov	r0, r6
 80038aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ae:	f000 fb29 	bl	8003f04 <_isatty_r>
 80038b2:	b128      	cbz	r0, 80038c0 <__smakebuf_r+0x74>
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	89a0      	ldrh	r0, [r4, #12]
 80038c2:	4305      	orrs	r5, r0
 80038c4:	81a5      	strh	r5, [r4, #12]
 80038c6:	e7cd      	b.n	8003864 <__smakebuf_r+0x18>
 80038c8:	0800365d 	.word	0x0800365d

080038cc <memchr>:
 80038cc:	4603      	mov	r3, r0
 80038ce:	b510      	push	{r4, lr}
 80038d0:	b2c9      	uxtb	r1, r1
 80038d2:	4402      	add	r2, r0
 80038d4:	4293      	cmp	r3, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	d101      	bne.n	80038de <memchr+0x12>
 80038da:	2000      	movs	r0, #0
 80038dc:	e003      	b.n	80038e6 <memchr+0x1a>
 80038de:	7804      	ldrb	r4, [r0, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	428c      	cmp	r4, r1
 80038e4:	d1f6      	bne.n	80038d4 <memchr+0x8>
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <memmove>:
 80038e8:	4288      	cmp	r0, r1
 80038ea:	b510      	push	{r4, lr}
 80038ec:	eb01 0402 	add.w	r4, r1, r2
 80038f0:	d902      	bls.n	80038f8 <memmove+0x10>
 80038f2:	4284      	cmp	r4, r0
 80038f4:	4623      	mov	r3, r4
 80038f6:	d807      	bhi.n	8003908 <memmove+0x20>
 80038f8:	1e43      	subs	r3, r0, #1
 80038fa:	42a1      	cmp	r1, r4
 80038fc:	d008      	beq.n	8003910 <memmove+0x28>
 80038fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003906:	e7f8      	b.n	80038fa <memmove+0x12>
 8003908:	4601      	mov	r1, r0
 800390a:	4402      	add	r2, r0
 800390c:	428a      	cmp	r2, r1
 800390e:	d100      	bne.n	8003912 <memmove+0x2a>
 8003910:	bd10      	pop	{r4, pc}
 8003912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800391a:	e7f7      	b.n	800390c <memmove+0x24>

0800391c <_free_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4605      	mov	r5, r0
 8003920:	2900      	cmp	r1, #0
 8003922:	d043      	beq.n	80039ac <_free_r+0x90>
 8003924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003928:	1f0c      	subs	r4, r1, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	bfb8      	it	lt
 800392e:	18e4      	addlt	r4, r4, r3
 8003930:	f000 fb0a 	bl	8003f48 <__malloc_lock>
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <_free_r+0x94>)
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	4610      	mov	r0, r2
 800393a:	b933      	cbnz	r3, 800394a <_free_r+0x2e>
 800393c:	6063      	str	r3, [r4, #4]
 800393e:	6014      	str	r4, [r2, #0]
 8003940:	4628      	mov	r0, r5
 8003942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003946:	f000 bb05 	b.w	8003f54 <__malloc_unlock>
 800394a:	42a3      	cmp	r3, r4
 800394c:	d90a      	bls.n	8003964 <_free_r+0x48>
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	1862      	adds	r2, r4, r1
 8003952:	4293      	cmp	r3, r2
 8003954:	bf01      	itttt	eq
 8003956:	681a      	ldreq	r2, [r3, #0]
 8003958:	685b      	ldreq	r3, [r3, #4]
 800395a:	1852      	addeq	r2, r2, r1
 800395c:	6022      	streq	r2, [r4, #0]
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6004      	str	r4, [r0, #0]
 8003962:	e7ed      	b.n	8003940 <_free_r+0x24>
 8003964:	461a      	mov	r2, r3
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	b10b      	cbz	r3, 800396e <_free_r+0x52>
 800396a:	42a3      	cmp	r3, r4
 800396c:	d9fa      	bls.n	8003964 <_free_r+0x48>
 800396e:	6811      	ldr	r1, [r2, #0]
 8003970:	1850      	adds	r0, r2, r1
 8003972:	42a0      	cmp	r0, r4
 8003974:	d10b      	bne.n	800398e <_free_r+0x72>
 8003976:	6820      	ldr	r0, [r4, #0]
 8003978:	4401      	add	r1, r0
 800397a:	1850      	adds	r0, r2, r1
 800397c:	4283      	cmp	r3, r0
 800397e:	6011      	str	r1, [r2, #0]
 8003980:	d1de      	bne.n	8003940 <_free_r+0x24>
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4401      	add	r1, r0
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	6053      	str	r3, [r2, #4]
 800398c:	e7d8      	b.n	8003940 <_free_r+0x24>
 800398e:	d902      	bls.n	8003996 <_free_r+0x7a>
 8003990:	230c      	movs	r3, #12
 8003992:	602b      	str	r3, [r5, #0]
 8003994:	e7d4      	b.n	8003940 <_free_r+0x24>
 8003996:	6820      	ldr	r0, [r4, #0]
 8003998:	1821      	adds	r1, r4, r0
 800399a:	428b      	cmp	r3, r1
 800399c:	bf01      	itttt	eq
 800399e:	6819      	ldreq	r1, [r3, #0]
 80039a0:	685b      	ldreq	r3, [r3, #4]
 80039a2:	1809      	addeq	r1, r1, r0
 80039a4:	6021      	streq	r1, [r4, #0]
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	6054      	str	r4, [r2, #4]
 80039aa:	e7c9      	b.n	8003940 <_free_r+0x24>
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
 80039ae:	bf00      	nop
 80039b0:	200005a0 	.word	0x200005a0

080039b4 <_malloc_r>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	1ccd      	adds	r5, r1, #3
 80039b8:	f025 0503 	bic.w	r5, r5, #3
 80039bc:	3508      	adds	r5, #8
 80039be:	2d0c      	cmp	r5, #12
 80039c0:	bf38      	it	cc
 80039c2:	250c      	movcc	r5, #12
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	4606      	mov	r6, r0
 80039c8:	db01      	blt.n	80039ce <_malloc_r+0x1a>
 80039ca:	42a9      	cmp	r1, r5
 80039cc:	d903      	bls.n	80039d6 <_malloc_r+0x22>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6033      	str	r3, [r6, #0]
 80039d2:	2000      	movs	r0, #0
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d6:	f000 fab7 	bl	8003f48 <__malloc_lock>
 80039da:	4921      	ldr	r1, [pc, #132]	; (8003a60 <_malloc_r+0xac>)
 80039dc:	680a      	ldr	r2, [r1, #0]
 80039de:	4614      	mov	r4, r2
 80039e0:	b99c      	cbnz	r4, 8003a0a <_malloc_r+0x56>
 80039e2:	4f20      	ldr	r7, [pc, #128]	; (8003a64 <_malloc_r+0xb0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	b923      	cbnz	r3, 80039f2 <_malloc_r+0x3e>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4630      	mov	r0, r6
 80039ec:	f000 f9be 	bl	8003d6c <_sbrk_r>
 80039f0:	6038      	str	r0, [r7, #0]
 80039f2:	4629      	mov	r1, r5
 80039f4:	4630      	mov	r0, r6
 80039f6:	f000 f9b9 	bl	8003d6c <_sbrk_r>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d123      	bne.n	8003a46 <_malloc_r+0x92>
 80039fe:	230c      	movs	r3, #12
 8003a00:	4630      	mov	r0, r6
 8003a02:	6033      	str	r3, [r6, #0]
 8003a04:	f000 faa6 	bl	8003f54 <__malloc_unlock>
 8003a08:	e7e3      	b.n	80039d2 <_malloc_r+0x1e>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	1b5b      	subs	r3, r3, r5
 8003a0e:	d417      	bmi.n	8003a40 <_malloc_r+0x8c>
 8003a10:	2b0b      	cmp	r3, #11
 8003a12:	d903      	bls.n	8003a1c <_malloc_r+0x68>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	441c      	add	r4, r3
 8003a18:	6025      	str	r5, [r4, #0]
 8003a1a:	e004      	b.n	8003a26 <_malloc_r+0x72>
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	42a2      	cmp	r2, r4
 8003a20:	bf0c      	ite	eq
 8003a22:	600b      	streq	r3, [r1, #0]
 8003a24:	6053      	strne	r3, [r2, #4]
 8003a26:	4630      	mov	r0, r6
 8003a28:	f000 fa94 	bl	8003f54 <__malloc_unlock>
 8003a2c:	f104 000b 	add.w	r0, r4, #11
 8003a30:	1d23      	adds	r3, r4, #4
 8003a32:	f020 0007 	bic.w	r0, r0, #7
 8003a36:	1ac2      	subs	r2, r0, r3
 8003a38:	d0cc      	beq.n	80039d4 <_malloc_r+0x20>
 8003a3a:	1a1b      	subs	r3, r3, r0
 8003a3c:	50a3      	str	r3, [r4, r2]
 8003a3e:	e7c9      	b.n	80039d4 <_malloc_r+0x20>
 8003a40:	4622      	mov	r2, r4
 8003a42:	6864      	ldr	r4, [r4, #4]
 8003a44:	e7cc      	b.n	80039e0 <_malloc_r+0x2c>
 8003a46:	1cc4      	adds	r4, r0, #3
 8003a48:	f024 0403 	bic.w	r4, r4, #3
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d0e3      	beq.n	8003a18 <_malloc_r+0x64>
 8003a50:	1a21      	subs	r1, r4, r0
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f98a 	bl	8003d6c <_sbrk_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d1dd      	bne.n	8003a18 <_malloc_r+0x64>
 8003a5c:	e7cf      	b.n	80039fe <_malloc_r+0x4a>
 8003a5e:	bf00      	nop
 8003a60:	200005a0 	.word	0x200005a0
 8003a64:	200005a4 	.word	0x200005a4

08003a68 <_realloc_r>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	4607      	mov	r7, r0
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	460e      	mov	r6, r1
 8003a70:	b921      	cbnz	r1, 8003a7c <_realloc_r+0x14>
 8003a72:	4611      	mov	r1, r2
 8003a74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a78:	f7ff bf9c 	b.w	80039b4 <_malloc_r>
 8003a7c:	b922      	cbnz	r2, 8003a88 <_realloc_r+0x20>
 8003a7e:	f7ff ff4d 	bl	800391c <_free_r>
 8003a82:	4625      	mov	r5, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a88:	f000 fa6a 	bl	8003f60 <_malloc_usable_size_r>
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d20f      	bcs.n	8003ab0 <_realloc_r+0x48>
 8003a90:	4621      	mov	r1, r4
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7ff ff8e 	bl	80039b4 <_malloc_r>
 8003a98:	4605      	mov	r5, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0f2      	beq.n	8003a84 <_realloc_r+0x1c>
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	f7ff f909 	bl	8002cb8 <memcpy>
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ff37 	bl	800391c <_free_r>
 8003aae:	e7e9      	b.n	8003a84 <_realloc_r+0x1c>
 8003ab0:	4635      	mov	r5, r6
 8003ab2:	e7e7      	b.n	8003a84 <_realloc_r+0x1c>

08003ab4 <__ssputs_r>:
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	688e      	ldr	r6, [r1, #8]
 8003aba:	4682      	mov	sl, r0
 8003abc:	429e      	cmp	r6, r3
 8003abe:	460c      	mov	r4, r1
 8003ac0:	4690      	mov	r8, r2
 8003ac2:	461f      	mov	r7, r3
 8003ac4:	d838      	bhi.n	8003b38 <__ssputs_r+0x84>
 8003ac6:	898a      	ldrh	r2, [r1, #12]
 8003ac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003acc:	d032      	beq.n	8003b34 <__ssputs_r+0x80>
 8003ace:	6825      	ldr	r5, [r4, #0]
 8003ad0:	6909      	ldr	r1, [r1, #16]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	eba5 0901 	sub.w	r9, r5, r1
 8003ad8:	6965      	ldr	r5, [r4, #20]
 8003ada:	444b      	add	r3, r9
 8003adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ae4:	106d      	asrs	r5, r5, #1
 8003ae6:	429d      	cmp	r5, r3
 8003ae8:	bf38      	it	cc
 8003aea:	461d      	movcc	r5, r3
 8003aec:	0553      	lsls	r3, r2, #21
 8003aee:	d531      	bpl.n	8003b54 <__ssputs_r+0xa0>
 8003af0:	4629      	mov	r1, r5
 8003af2:	f7ff ff5f 	bl	80039b4 <_malloc_r>
 8003af6:	4606      	mov	r6, r0
 8003af8:	b950      	cbnz	r0, 8003b10 <__ssputs_r+0x5c>
 8003afa:	230c      	movs	r3, #12
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f8ca 3000 	str.w	r3, [sl]
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0a:	81a3      	strh	r3, [r4, #12]
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	464a      	mov	r2, r9
 8003b12:	6921      	ldr	r1, [r4, #16]
 8003b14:	f7ff f8d0 	bl	8002cb8 <memcpy>
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	81a3      	strh	r3, [r4, #12]
 8003b24:	6126      	str	r6, [r4, #16]
 8003b26:	444e      	add	r6, r9
 8003b28:	6026      	str	r6, [r4, #0]
 8003b2a:	463e      	mov	r6, r7
 8003b2c:	6165      	str	r5, [r4, #20]
 8003b2e:	eba5 0509 	sub.w	r5, r5, r9
 8003b32:	60a5      	str	r5, [r4, #8]
 8003b34:	42be      	cmp	r6, r7
 8003b36:	d900      	bls.n	8003b3a <__ssputs_r+0x86>
 8003b38:	463e      	mov	r6, r7
 8003b3a:	4632      	mov	r2, r6
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	6820      	ldr	r0, [r4, #0]
 8003b40:	f7ff fed2 	bl	80038e8 <memmove>
 8003b44:	68a3      	ldr	r3, [r4, #8]
 8003b46:	6822      	ldr	r2, [r4, #0]
 8003b48:	1b9b      	subs	r3, r3, r6
 8003b4a:	4432      	add	r2, r6
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	60a3      	str	r3, [r4, #8]
 8003b50:	6022      	str	r2, [r4, #0]
 8003b52:	e7db      	b.n	8003b0c <__ssputs_r+0x58>
 8003b54:	462a      	mov	r2, r5
 8003b56:	f7ff ff87 	bl	8003a68 <_realloc_r>
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d1e1      	bne.n	8003b24 <__ssputs_r+0x70>
 8003b60:	4650      	mov	r0, sl
 8003b62:	6921      	ldr	r1, [r4, #16]
 8003b64:	f7ff feda 	bl	800391c <_free_r>
 8003b68:	e7c7      	b.n	8003afa <__ssputs_r+0x46>
	...

08003b6c <_svfiprintf_r>:
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	4698      	mov	r8, r3
 8003b72:	898b      	ldrh	r3, [r1, #12]
 8003b74:	4607      	mov	r7, r0
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	460d      	mov	r5, r1
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	b09d      	sub	sp, #116	; 0x74
 8003b7e:	d50e      	bpl.n	8003b9e <_svfiprintf_r+0x32>
 8003b80:	690b      	ldr	r3, [r1, #16]
 8003b82:	b963      	cbnz	r3, 8003b9e <_svfiprintf_r+0x32>
 8003b84:	2140      	movs	r1, #64	; 0x40
 8003b86:	f7ff ff15 	bl	80039b4 <_malloc_r>
 8003b8a:	6028      	str	r0, [r5, #0]
 8003b8c:	6128      	str	r0, [r5, #16]
 8003b8e:	b920      	cbnz	r0, 8003b9a <_svfiprintf_r+0x2e>
 8003b90:	230c      	movs	r3, #12
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	e0d1      	b.n	8003d3e <_svfiprintf_r+0x1d2>
 8003b9a:	2340      	movs	r3, #64	; 0x40
 8003b9c:	616b      	str	r3, [r5, #20]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ba8:	2330      	movs	r3, #48	; 0x30
 8003baa:	f04f 0901 	mov.w	r9, #1
 8003bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d58 <_svfiprintf_r+0x1ec>
 8003bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bba:	4623      	mov	r3, r4
 8003bbc:	469a      	mov	sl, r3
 8003bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc2:	b10a      	cbz	r2, 8003bc8 <_svfiprintf_r+0x5c>
 8003bc4:	2a25      	cmp	r2, #37	; 0x25
 8003bc6:	d1f9      	bne.n	8003bbc <_svfiprintf_r+0x50>
 8003bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bcc:	d00b      	beq.n	8003be6 <_svfiprintf_r+0x7a>
 8003bce:	465b      	mov	r3, fp
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f7ff ff6d 	bl	8003ab4 <__ssputs_r>
 8003bda:	3001      	adds	r0, #1
 8003bdc:	f000 80aa 	beq.w	8003d34 <_svfiprintf_r+0x1c8>
 8003be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003be2:	445a      	add	r2, fp
 8003be4:	9209      	str	r2, [sp, #36]	; 0x24
 8003be6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80a2 	beq.w	8003d34 <_svfiprintf_r+0x1c8>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bfa:	f10a 0a01 	add.w	sl, sl, #1
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	9307      	str	r3, [sp, #28]
 8003c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c06:	931a      	str	r3, [sp, #104]	; 0x68
 8003c08:	4654      	mov	r4, sl
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c10:	4851      	ldr	r0, [pc, #324]	; (8003d58 <_svfiprintf_r+0x1ec>)
 8003c12:	f7ff fe5b 	bl	80038cc <memchr>
 8003c16:	9a04      	ldr	r2, [sp, #16]
 8003c18:	b9d8      	cbnz	r0, 8003c52 <_svfiprintf_r+0xe6>
 8003c1a:	06d0      	lsls	r0, r2, #27
 8003c1c:	bf44      	itt	mi
 8003c1e:	2320      	movmi	r3, #32
 8003c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c24:	0711      	lsls	r1, r2, #28
 8003c26:	bf44      	itt	mi
 8003c28:	232b      	movmi	r3, #43	; 0x2b
 8003c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c32:	2b2a      	cmp	r3, #42	; 0x2a
 8003c34:	d015      	beq.n	8003c62 <_svfiprintf_r+0xf6>
 8003c36:	4654      	mov	r4, sl
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f04f 0c0a 	mov.w	ip, #10
 8003c3e:	9a07      	ldr	r2, [sp, #28]
 8003c40:	4621      	mov	r1, r4
 8003c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c46:	3b30      	subs	r3, #48	; 0x30
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	d94e      	bls.n	8003cea <_svfiprintf_r+0x17e>
 8003c4c:	b1b0      	cbz	r0, 8003c7c <_svfiprintf_r+0x110>
 8003c4e:	9207      	str	r2, [sp, #28]
 8003c50:	e014      	b.n	8003c7c <_svfiprintf_r+0x110>
 8003c52:	eba0 0308 	sub.w	r3, r0, r8
 8003c56:	fa09 f303 	lsl.w	r3, r9, r3
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	46a2      	mov	sl, r4
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	e7d2      	b.n	8003c08 <_svfiprintf_r+0x9c>
 8003c62:	9b03      	ldr	r3, [sp, #12]
 8003c64:	1d19      	adds	r1, r3, #4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	9103      	str	r1, [sp, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfbb      	ittet	lt
 8003c6e:	425b      	neglt	r3, r3
 8003c70:	f042 0202 	orrlt.w	r2, r2, #2
 8003c74:	9307      	strge	r3, [sp, #28]
 8003c76:	9307      	strlt	r3, [sp, #28]
 8003c78:	bfb8      	it	lt
 8003c7a:	9204      	strlt	r2, [sp, #16]
 8003c7c:	7823      	ldrb	r3, [r4, #0]
 8003c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c80:	d10c      	bne.n	8003c9c <_svfiprintf_r+0x130>
 8003c82:	7863      	ldrb	r3, [r4, #1]
 8003c84:	2b2a      	cmp	r3, #42	; 0x2a
 8003c86:	d135      	bne.n	8003cf4 <_svfiprintf_r+0x188>
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	3402      	adds	r4, #2
 8003c8c:	1d1a      	adds	r2, r3, #4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	9203      	str	r2, [sp, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bfb8      	it	lt
 8003c96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c9a:	9305      	str	r3, [sp, #20]
 8003c9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d68 <_svfiprintf_r+0x1fc>
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4650      	mov	r0, sl
 8003ca4:	7821      	ldrb	r1, [r4, #0]
 8003ca6:	f7ff fe11 	bl	80038cc <memchr>
 8003caa:	b140      	cbz	r0, 8003cbe <_svfiprintf_r+0x152>
 8003cac:	2340      	movs	r3, #64	; 0x40
 8003cae:	eba0 000a 	sub.w	r0, r0, sl
 8003cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cb6:	9b04      	ldr	r3, [sp, #16]
 8003cb8:	3401      	adds	r4, #1
 8003cba:	4303      	orrs	r3, r0
 8003cbc:	9304      	str	r3, [sp, #16]
 8003cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc2:	2206      	movs	r2, #6
 8003cc4:	4825      	ldr	r0, [pc, #148]	; (8003d5c <_svfiprintf_r+0x1f0>)
 8003cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cca:	f7ff fdff 	bl	80038cc <memchr>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d038      	beq.n	8003d44 <_svfiprintf_r+0x1d8>
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <_svfiprintf_r+0x1f4>)
 8003cd4:	bb1b      	cbnz	r3, 8003d1e <_svfiprintf_r+0x1b2>
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	3307      	adds	r3, #7
 8003cda:	f023 0307 	bic.w	r3, r3, #7
 8003cde:	3308      	adds	r3, #8
 8003ce0:	9303      	str	r3, [sp, #12]
 8003ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce4:	4433      	add	r3, r6
 8003ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce8:	e767      	b.n	8003bba <_svfiprintf_r+0x4e>
 8003cea:	460c      	mov	r4, r1
 8003cec:	2001      	movs	r0, #1
 8003cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cf2:	e7a5      	b.n	8003c40 <_svfiprintf_r+0xd4>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f04f 0c0a 	mov.w	ip, #10
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	3401      	adds	r4, #1
 8003cfe:	9305      	str	r3, [sp, #20]
 8003d00:	4620      	mov	r0, r4
 8003d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d06:	3a30      	subs	r2, #48	; 0x30
 8003d08:	2a09      	cmp	r2, #9
 8003d0a:	d903      	bls.n	8003d14 <_svfiprintf_r+0x1a8>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0c5      	beq.n	8003c9c <_svfiprintf_r+0x130>
 8003d10:	9105      	str	r1, [sp, #20]
 8003d12:	e7c3      	b.n	8003c9c <_svfiprintf_r+0x130>
 8003d14:	4604      	mov	r4, r0
 8003d16:	2301      	movs	r3, #1
 8003d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d1c:	e7f0      	b.n	8003d00 <_svfiprintf_r+0x194>
 8003d1e:	ab03      	add	r3, sp, #12
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	462a      	mov	r2, r5
 8003d24:	4638      	mov	r0, r7
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <_svfiprintf_r+0x1f8>)
 8003d28:	a904      	add	r1, sp, #16
 8003d2a:	f3af 8000 	nop.w
 8003d2e:	1c42      	adds	r2, r0, #1
 8003d30:	4606      	mov	r6, r0
 8003d32:	d1d6      	bne.n	8003ce2 <_svfiprintf_r+0x176>
 8003d34:	89ab      	ldrh	r3, [r5, #12]
 8003d36:	065b      	lsls	r3, r3, #25
 8003d38:	f53f af2c 	bmi.w	8003b94 <_svfiprintf_r+0x28>
 8003d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d3e:	b01d      	add	sp, #116	; 0x74
 8003d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d44:	ab03      	add	r3, sp, #12
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <_svfiprintf_r+0x1f8>)
 8003d4e:	a904      	add	r1, sp, #16
 8003d50:	f7ff f990 	bl	8003074 <_printf_i>
 8003d54:	e7eb      	b.n	8003d2e <_svfiprintf_r+0x1c2>
 8003d56:	bf00      	nop
 8003d58:	080044b8 	.word	0x080044b8
 8003d5c:	080044c2 	.word	0x080044c2
 8003d60:	00000000 	.word	0x00000000
 8003d64:	08003ab5 	.word	0x08003ab5
 8003d68:	080044be 	.word	0x080044be

08003d6c <_sbrk_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	2300      	movs	r3, #0
 8003d70:	4d05      	ldr	r5, [pc, #20]	; (8003d88 <_sbrk_r+0x1c>)
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f7fc fc50 	bl	800061c <_sbrk>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_sbrk_r+0x1a>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_sbrk_r+0x1a>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	20000674 	.word	0x20000674

08003d8c <_raise_r>:
 8003d8c:	291f      	cmp	r1, #31
 8003d8e:	b538      	push	{r3, r4, r5, lr}
 8003d90:	4604      	mov	r4, r0
 8003d92:	460d      	mov	r5, r1
 8003d94:	d904      	bls.n	8003da0 <_raise_r+0x14>
 8003d96:	2316      	movs	r3, #22
 8003d98:	6003      	str	r3, [r0, #0]
 8003d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003da2:	b112      	cbz	r2, 8003daa <_raise_r+0x1e>
 8003da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003da8:	b94b      	cbnz	r3, 8003dbe <_raise_r+0x32>
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 f830 	bl	8003e10 <_getpid_r>
 8003db0:	462a      	mov	r2, r5
 8003db2:	4601      	mov	r1, r0
 8003db4:	4620      	mov	r0, r4
 8003db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dba:	f000 b817 	b.w	8003dec <_kill_r>
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d00a      	beq.n	8003dd8 <_raise_r+0x4c>
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	d103      	bne.n	8003dce <_raise_r+0x42>
 8003dc6:	2316      	movs	r3, #22
 8003dc8:	6003      	str	r3, [r0, #0]
 8003dca:	2001      	movs	r0, #1
 8003dcc:	e7e7      	b.n	8003d9e <_raise_r+0x12>
 8003dce:	2400      	movs	r4, #0
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003dd6:	4798      	blx	r3
 8003dd8:	2000      	movs	r0, #0
 8003dda:	e7e0      	b.n	8003d9e <_raise_r+0x12>

08003ddc <raise>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <raise+0xc>)
 8003dde:	4601      	mov	r1, r0
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f7ff bfd3 	b.w	8003d8c <_raise_r>
 8003de6:	bf00      	nop
 8003de8:	2000000c 	.word	0x2000000c

08003dec <_kill_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	2300      	movs	r3, #0
 8003df0:	4d06      	ldr	r5, [pc, #24]	; (8003e0c <_kill_r+0x20>)
 8003df2:	4604      	mov	r4, r0
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	f7fc fb8c 	bl	8000516 <_kill>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	d102      	bne.n	8003e08 <_kill_r+0x1c>
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	b103      	cbz	r3, 8003e08 <_kill_r+0x1c>
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	bd38      	pop	{r3, r4, r5, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000674 	.word	0x20000674

08003e10 <_getpid_r>:
 8003e10:	f7fc bb7a 	b.w	8000508 <_getpid>

08003e14 <__sread>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f8a8 	bl	8003f70 <_read_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	bfab      	itete	ge
 8003e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e26:	89a3      	ldrhlt	r3, [r4, #12]
 8003e28:	181b      	addge	r3, r3, r0
 8003e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e2e:	bfac      	ite	ge
 8003e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e32:	81a3      	strhlt	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__swrite>:
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	898b      	ldrh	r3, [r1, #12]
 8003e3e:	4605      	mov	r5, r0
 8003e40:	05db      	lsls	r3, r3, #23
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
 8003e46:	d505      	bpl.n	8003e54 <__swrite+0x1e>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 f868 	bl	8003f24 <_lseek_r>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	4632      	mov	r2, r6
 8003e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	4628      	mov	r0, r5
 8003e60:	463b      	mov	r3, r7
 8003e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f000 b817 	b.w	8003e9c <_write_r>

08003e6e <__sseek>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	460c      	mov	r4, r1
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 f855 	bl	8003f24 <_lseek_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	bf15      	itete	ne
 8003e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8a:	81a3      	strheq	r3, [r4, #12]
 8003e8c:	bf18      	it	ne
 8003e8e:	81a3      	strhne	r3, [r4, #12]
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <__sclose>:
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 b813 	b.w	8003ec0 <_close_r>
	...

08003e9c <_write_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4d05      	ldr	r5, [pc, #20]	; (8003ebc <_write_r+0x20>)
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7fc fb6a 	bl	8000584 <_write>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_write_r+0x1e>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_write_r+0x1e>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	20000674 	.word	0x20000674

08003ec0 <_close_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4d05      	ldr	r5, [pc, #20]	; (8003edc <_close_r+0x1c>)
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	4608      	mov	r0, r1
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	f7fc fb76 	bl	80005bc <_close>
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d102      	bne.n	8003eda <_close_r+0x1a>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	b103      	cbz	r3, 8003eda <_close_r+0x1a>
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	bd38      	pop	{r3, r4, r5, pc}
 8003edc:	20000674 	.word	0x20000674

08003ee0 <_fstat_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	4d06      	ldr	r5, [pc, #24]	; (8003f00 <_fstat_r+0x20>)
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	f7fc fb70 	bl	80005d2 <_fstat>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d102      	bne.n	8003efc <_fstat_r+0x1c>
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	b103      	cbz	r3, 8003efc <_fstat_r+0x1c>
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
 8003efe:	bf00      	nop
 8003f00:	20000674 	.word	0x20000674

08003f04 <_isatty_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	2300      	movs	r3, #0
 8003f08:	4d05      	ldr	r5, [pc, #20]	; (8003f20 <_isatty_r+0x1c>)
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	f7fc fb6e 	bl	80005f0 <_isatty>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_isatty_r+0x1a>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_isatty_r+0x1a>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000674 	.word	0x20000674

08003f24 <_lseek_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4d05      	ldr	r5, [pc, #20]	; (8003f44 <_lseek_r+0x20>)
 8003f30:	602a      	str	r2, [r5, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f7fc fb66 	bl	8000604 <_lseek>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d102      	bne.n	8003f42 <_lseek_r+0x1e>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	b103      	cbz	r3, 8003f42 <_lseek_r+0x1e>
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	20000674 	.word	0x20000674

08003f48 <__malloc_lock>:
 8003f48:	4801      	ldr	r0, [pc, #4]	; (8003f50 <__malloc_lock+0x8>)
 8003f4a:	f7ff bc59 	b.w	8003800 <__retarget_lock_acquire_recursive>
 8003f4e:	bf00      	nop
 8003f50:	2000066c 	.word	0x2000066c

08003f54 <__malloc_unlock>:
 8003f54:	4801      	ldr	r0, [pc, #4]	; (8003f5c <__malloc_unlock+0x8>)
 8003f56:	f7ff bc54 	b.w	8003802 <__retarget_lock_release_recursive>
 8003f5a:	bf00      	nop
 8003f5c:	2000066c 	.word	0x2000066c

08003f60 <_malloc_usable_size_r>:
 8003f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f64:	1f18      	subs	r0, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bfbc      	itt	lt
 8003f6a:	580b      	ldrlt	r3, [r1, r0]
 8003f6c:	18c0      	addlt	r0, r0, r3
 8003f6e:	4770      	bx	lr

08003f70 <_read_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4d05      	ldr	r5, [pc, #20]	; (8003f90 <_read_r+0x20>)
 8003f7c:	602a      	str	r2, [r5, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f7fc fae3 	bl	800054a <_read>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	d102      	bne.n	8003f8e <_read_r+0x1e>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	b103      	cbz	r3, 8003f8e <_read_r+0x1e>
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	20000674 	.word	0x20000674

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
