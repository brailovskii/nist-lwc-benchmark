
lwc_nist_benchmark_stm32f100rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c8  080049c8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080049c8  080049c8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c8  080049c8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080049d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000080  08004a50  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08004a50  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1b8  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e3  00000000  00000000  0002f261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013585  00000000  00000000  000331a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e619  00000000  00000000  00046725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070ae9  00000000  00000000  00054d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  000c587c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004550 	.word	0x08004550

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08004550 	.word	0x08004550

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4313      	orrs	r3, r2
 8000232:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4013      	ands	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023e:	68fb      	ldr	r3, [r7, #12]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fa5d 	bl	8000712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f80e 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f8ac 	bl	80003b8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000260:	f000 f84a 	bl	80002f8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000264:	f000 f87e 	bl	8000364 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000268:	f002 fc76 	bl	8002b58 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <main+0x24>)
 800026e:	f000 faa9 	bl	80007c4 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 8000272:	e7f9      	b.n	8000268 <main+0x18>
 8000274:	000f4240 	.word	0x000f4240

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 ffda 	bl	8003240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fd39 	bl	8000d30 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c4:	f000 f87f 	bl	80003c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 ffa5 	bl	8001230 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002ec:	f000 f86b 	bl	80003c6 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3740      	adds	r7, #64	; 0x40
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fe:	463b      	mov	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_TIM6_Init+0x64>)
 8000308:	4a15      	ldr	r2, [pc, #84]	; (8000360 <MX_TIM6_Init+0x68>)
 800030a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <MX_TIM6_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_TIM6_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_TIM6_Init+0x64>)
 800031a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800031e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_TIM6_Init+0x64>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000326:	480d      	ldr	r0, [pc, #52]	; (800035c <MX_TIM6_Init+0x64>)
 8000328:	f001 f8ee 	bl	8001508 <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000332:	f000 f848 	bl	80003c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_TIM6_Init+0x64>)
 8000344:	f001 fb64 	bl	8001a10 <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800034e:	f000 f83a 	bl	80003c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200005fc 	.word	0x200005fc
 8000360:	40001000 	.word	0x40001000

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_USART1_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800039c:	f001 fbb0 	bl	8001b00 <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 f80e 	bl	80003c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200005bc 	.word	0x200005bc
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80003bc:	2004      	movs	r0, #4
 80003be:	f7ff ff2f 	bl	8000220 <LL_APB2_GRP1_EnableClock>

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ca:	b672      	cpsid	i
}
 80003cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ce:	e7fe      	b.n	80003ce <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <HAL_TIM_Base_MspInit+0x44>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d113      	bne.n	800046e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0c      	ldr	r2, [pc, #48]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 800044c:	f043 0310 	orr.w	r3, r3, #16
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 0310 	and.w	r3, r3, #16
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2036      	movs	r0, #54	; 0x36
 8000464:	f000 faa9 	bl	80009ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000468:	2036      	movs	r0, #54	; 0x36
 800046a:	f000 fac2 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40001000 	.word	0x40001000
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <HAL_UART_MspInit+0x8c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d131      	bne.n	8000504 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <HAL_UART_MspInit+0x94>)
 80004e6:	f000 fa9f 	bl	8000a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_MspInit+0x94>)
 8000500:	f000 fa92 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40013800 	.word	0x40013800
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f915 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <TIM6_DAC_IRQHandler+0x10>)
 800056e:	f001 f8a3 	bl	80016b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200005fc 	.word	0x200005fc

0800057c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00a      	b.n	80005a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800058e:	f3af 8000 	nop.w
 8000592:	4601      	mov	r1, r0
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf0      	blt.n	800058e <_read+0x12>
	}

return len;
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e009      	b.n	80005dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf1      	blt.n	80005c8 <_write+0x12>
	}
	return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
	return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
	return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
	return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f002 fd88 	bl	8003194 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20002000 	.word	0x20002000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	20000690 	.word	0x20000690

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ca:	e003      	b.n	80006d4 <LoopCopyDataInit>

080006cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006d2:	3104      	adds	r1, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006dc:	d3f6      	bcc.n	80006cc <CopyDataInit>
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e0:	e002      	b.n	80006e8 <LoopFillZerobss>

080006e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e4:	f842 3b04 	str.w	r3, [r2], #4

080006e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ec:	d3f9      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff ffe5 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f002 fd55 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fdab 	bl	8000250 <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r3, =_sidata
 80006fc:	080049d0 	.word	0x080049d0
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000704:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000708:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 800070c:	2000068c 	.word	0x2000068c

08000710 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_IRQHandler>

08000712 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000716:	2003      	movs	r0, #3
 8000718:	f000 f944 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f805 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000722:	f7ff fe55 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x54>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f95f 	bl	8000a0e <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e00e      	b.n	8000778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d80a      	bhi.n	8000776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f927 	bl	80009ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_InitTick+0x5c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_IncTick+0x20>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000644 	.word	0x20000644

080007b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_GetTick+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000644 	.word	0x20000644

080007c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff fff0 	bl	80007b0 <HAL_GetTick>
 80007d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d005      	beq.n	80007ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_Delay+0x44>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ea:	bf00      	nop
 80007ec:	f7ff ffe0 	bl	80007b0 <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f7      	bhi.n	80007ec <HAL_Delay+0x28>
  {
  }
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <__NVIC_EnableIRQ+0x34>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff90 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff2d 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff42 	bl	8000854 <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff35 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffa2 	bl	8000960 <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b08b      	sub	sp, #44	; 0x2c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3a:	e169      	b.n	8000d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	f040 8158 	bne.w	8000d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a9a      	ldr	r2, [pc, #616]	; (8000cc8 <HAL_GPIO_Init+0x2a0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d05e      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a64:	4a98      	ldr	r2, [pc, #608]	; (8000cc8 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d875      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a6a:	4a98      	ldr	r2, [pc, #608]	; (8000ccc <HAL_GPIO_Init+0x2a4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d058      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a70:	4a96      	ldr	r2, [pc, #600]	; (8000ccc <HAL_GPIO_Init+0x2a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d86f      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a76:	4a96      	ldr	r2, [pc, #600]	; (8000cd0 <HAL_GPIO_Init+0x2a8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d052      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a7c:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <HAL_GPIO_Init+0x2a8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d869      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a82:	4a94      	ldr	r2, [pc, #592]	; (8000cd4 <HAL_GPIO_Init+0x2ac>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d04c      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a88:	4a92      	ldr	r2, [pc, #584]	; (8000cd4 <HAL_GPIO_Init+0x2ac>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d863      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a92      	ldr	r2, [pc, #584]	; (8000cd8 <HAL_GPIO_Init+0x2b0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d046      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a94:	4a90      	ldr	r2, [pc, #576]	; (8000cd8 <HAL_GPIO_Init+0x2b0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d85d      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d82a      	bhi.n	8000af4 <HAL_GPIO_Init+0xcc>
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	d859      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000aa2:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <HAL_GPIO_Init+0x80>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000b23 	.word	0x08000b23
 8000aac:	08000afd 	.word	0x08000afd
 8000ab0:	08000b0f 	.word	0x08000b0f
 8000ab4:	08000b51 	.word	0x08000b51
 8000ab8:	08000b57 	.word	0x08000b57
 8000abc:	08000b57 	.word	0x08000b57
 8000ac0:	08000b57 	.word	0x08000b57
 8000ac4:	08000b57 	.word	0x08000b57
 8000ac8:	08000b57 	.word	0x08000b57
 8000acc:	08000b57 	.word	0x08000b57
 8000ad0:	08000b57 	.word	0x08000b57
 8000ad4:	08000b57 	.word	0x08000b57
 8000ad8:	08000b57 	.word	0x08000b57
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b57 	.word	0x08000b57
 8000ae4:	08000b57 	.word	0x08000b57
 8000ae8:	08000b57 	.word	0x08000b57
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b19 	.word	0x08000b19
 8000af4:	4a79      	ldr	r2, [pc, #484]	; (8000cdc <HAL_GPIO_Init+0x2b4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000afa:	e02c      	b.n	8000b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e029      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e024      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	3308      	adds	r3, #8
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e01f      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	330c      	adds	r3, #12
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e01a      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d102      	bne.n	8000b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e013      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	611a      	str	r2, [r3, #16]
          break;
 8000b42:	e009      	b.n	8000b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	615a      	str	r2, [r3, #20]
          break;
 8000b4e:	e003      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          break;
 8000b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d801      	bhi.n	8000b62 <HAL_GPIO_Init+0x13a>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	e001      	b.n	8000b66 <HAL_GPIO_Init+0x13e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3304      	adds	r3, #4
 8000b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2bff      	cmp	r3, #255	; 0xff
 8000b6c:	d802      	bhi.n	8000b74 <HAL_GPIO_Init+0x14c>
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x152>
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	3b08      	subs	r3, #8
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	210f      	movs	r1, #15
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	6a39      	ldr	r1, [r7, #32]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	431a      	orrs	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80b1 	beq.w	8000d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba8:	4b4d      	ldr	r3, [pc, #308]	; (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a4c      	ldr	r2, [pc, #304]	; (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc0:	4a48      	ldr	r2, [pc, #288]	; (8000ce4 <HAL_GPIO_Init+0x2bc>)
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <HAL_GPIO_Init+0x2c0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d013      	beq.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3f      	ldr	r2, [pc, #252]	; (8000cec <HAL_GPIO_Init+0x2c4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d00d      	beq.n	8000c10 <HAL_GPIO_Init+0x1e8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a3e      	ldr	r2, [pc, #248]	; (8000cf0 <HAL_GPIO_Init+0x2c8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d007      	beq.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a3d      	ldr	r2, [pc, #244]	; (8000cf4 <HAL_GPIO_Init+0x2cc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <HAL_GPIO_Init+0x1e0>
 8000c04:	2303      	movs	r3, #3
 8000c06:	e006      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e004      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c14:	2300      	movs	r3, #0
 8000c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c18:	f002 0203 	and.w	r2, r2, #3
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c26:	492f      	ldr	r1, [pc, #188]	; (8000ce4 <HAL_GPIO_Init+0x2bc>)
 8000c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	492c      	ldr	r1, [pc, #176]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4928      	ldr	r1, [pc, #160]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	4922      	ldr	r1, [pc, #136]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	491e      	ldr	r1, [pc, #120]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	4918      	ldr	r1, [pc, #96]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4914      	ldr	r1, [pc, #80]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d021      	beq.n	8000cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60cb      	str	r3, [r1, #12]
 8000cc4:	e021      	b.n	8000d0a <HAL_GPIO_Init+0x2e2>
 8000cc6:	bf00      	nop
 8000cc8:	10320000 	.word	0x10320000
 8000ccc:	10310000 	.word	0x10310000
 8000cd0:	10220000 	.word	0x10220000
 8000cd4:	10210000 	.word	0x10210000
 8000cd8:	10120000 	.word	0x10120000
 8000cdc:	10110000 	.word	0x10110000
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40011400 	.word	0x40011400
 8000cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_GPIO_Init+0x304>)
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	4909      	ldr	r1, [pc, #36]	; (8000d2c <HAL_GPIO_Init+0x304>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f47f ae8e 	bne.w	8000a3c <HAL_GPIO_Init+0x14>
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	372c      	adds	r7, #44	; 0x2c
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e26c      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8087 	beq.w	8000e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d50:	4b92      	ldr	r3, [pc, #584]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d00c      	beq.n	8000d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d112      	bne.n	8000d8e <HAL_RCC_OscConfig+0x5e>
 8000d68:	4b8c      	ldr	r3, [pc, #560]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d10b      	bne.n	8000d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d76:	4b89      	ldr	r3, [pc, #548]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d06c      	beq.n	8000e5c <HAL_RCC_OscConfig+0x12c>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d168      	bne.n	8000e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e246      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d96:	d106      	bne.n	8000da6 <HAL_RCC_OscConfig+0x76>
 8000d98:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a7f      	ldr	r2, [pc, #508]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e02e      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x98>
 8000dae:	4b7b      	ldr	r3, [pc, #492]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7a      	ldr	r2, [pc, #488]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b78      	ldr	r3, [pc, #480]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e01d      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0xbc>
 8000dd2:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a71      	ldr	r2, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6e      	ldr	r2, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e00b      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000dec:	4b6b      	ldr	r3, [pc, #428]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6a      	ldr	r2, [pc, #424]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a67      	ldr	r2, [pc, #412]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d013      	beq.n	8000e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fcd0 	bl	80007b0 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fccc 	bl	80007b0 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e1fa      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0xe4>
 8000e32:	e014      	b.n	8000e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fcbc 	bl	80007b0 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fcb8 	bl	80007b0 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1e6      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x10c>
 8000e5a:	e000      	b.n	8000e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d063      	beq.n	8000f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e76:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d11c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x18c>
 8000e82:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d116      	bne.n	8000ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x176>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d001      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e1ba      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4939      	ldr	r1, [pc, #228]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	e03a      	b.n	8000f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d020      	beq.n	8000f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fc71 	bl	80007b0 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fc6d 	bl	80007b0 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e19b      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f0      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4927      	ldr	r1, [pc, #156]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e015      	b.n	8000f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_RCC_OscConfig+0x270>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc50 	bl	80007b0 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc4c 	bl	80007b0 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e17a      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d03a      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d019      	beq.n	8000f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_RCC_OscConfig+0x274>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fc30 	bl	80007b0 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fc2c 	bl	80007b0 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e15a      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 faaa 	bl	80014cc <RCC_Delay>
 8000f78:	e01c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_RCC_OscConfig+0x274>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fc16 	bl	80007b0 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f86:	e00f      	b.n	8000fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fc12 	bl	80007b0 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d908      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e140      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	42420000 	.word	0x42420000
 8000fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa8:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e9      	bne.n	8000f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a6 	beq.w	800110e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc6:	4b97      	ldr	r3, [pc, #604]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10d      	bne.n	8000fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b94      	ldr	r3, [pc, #592]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a93      	ldr	r2, [pc, #588]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fee:	4b8e      	ldr	r3, [pc, #568]	; (8001228 <HAL_RCC_OscConfig+0x4f8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffa:	4b8b      	ldr	r3, [pc, #556]	; (8001228 <HAL_RCC_OscConfig+0x4f8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a8a      	ldr	r2, [pc, #552]	; (8001228 <HAL_RCC_OscConfig+0x4f8>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001006:	f7ff fbd3 	bl	80007b0 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100e:	f7ff fbcf 	bl	80007b0 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b64      	cmp	r3, #100	; 0x64
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e0fd      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	4b81      	ldr	r3, [pc, #516]	; (8001228 <HAL_RCC_OscConfig+0x4f8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x312>
 8001034:	4b7b      	ldr	r3, [pc, #492]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a7a      	ldr	r2, [pc, #488]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	e02d      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x334>
 800104a:	4b76      	ldr	r3, [pc, #472]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a75      	ldr	r2, [pc, #468]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b73      	ldr	r3, [pc, #460]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a72      	ldr	r2, [pc, #456]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	e01c      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b05      	cmp	r3, #5
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0x356>
 800106c:	4b6d      	ldr	r3, [pc, #436]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a6c      	ldr	r2, [pc, #432]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	4b6a      	ldr	r3, [pc, #424]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a69      	ldr	r2, [pc, #420]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6213      	str	r3, [r2, #32]
 8001084:	e00b      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001086:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a66      	ldr	r2, [pc, #408]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a63      	ldr	r2, [pc, #396]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d015      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fb83 	bl	80007b0 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	e00a      	b.n	80010c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff fb7f 	bl	80007b0 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e0ab      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c4:	4b57      	ldr	r3, [pc, #348]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0ee      	beq.n	80010ae <HAL_RCC_OscConfig+0x37e>
 80010d0:	e014      	b.n	80010fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fb6d 	bl	80007b0 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fb69 	bl	80007b0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e095      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ee      	bne.n	80010da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d105      	bne.n	800110e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a47      	ldr	r2, [pc, #284]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8081 	beq.w	800121a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001118:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d061      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d146      	bne.n	80011ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <HAL_RCC_OscConfig+0x4fc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fb3d 	bl	80007b0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff fb39 	bl	80007b0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e067      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	4b35      	ldr	r3, [pc, #212]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d108      	bne.n	8001174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	f023 020f 	bic.w	r2, r3, #15
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	492d      	ldr	r1, [pc, #180]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a19      	ldr	r1, [r3, #32]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	430b      	orrs	r3, r1
 8001186:	4927      	ldr	r1, [pc, #156]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_RCC_OscConfig+0x4fc>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fb0d 	bl	80007b0 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fb09 	bl	80007b0 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e037      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x46a>
 80011b8:	e02f      	b.n	800121a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_RCC_OscConfig+0x4fc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff faf6 	bl	80007b0 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff faf2 	bl	80007b0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e020      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x498>
 80011e6:	e018      	b.n	800121a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e013      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	429a      	cmp	r2, r3
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	40007000 	.word	0x40007000
 800122c:	42420060 	.word	0x42420060

08001230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0a0      	b.n	8001386 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 8001262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a45      	ldr	r2, [pc, #276]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800127a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800127e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4940      	ldr	r1, [pc, #256]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800128e:	4313      	orrs	r3, r2
 8001290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d040      	beq.n	8001320 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d115      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e067      	b.n	8001386 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e05b      	b.n	8001386 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e053      	b.n	8001386 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f023 0203 	bic.w	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4929      	ldr	r1, [pc, #164]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f0:	f7ff fa5e 	bl	80007b0 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	e00a      	b.n	800130e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	f7ff fa5a 	bl	80007b0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e03b      	b.n	8001386 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 020c 	and.w	r2, r3, #12
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	429a      	cmp	r2, r3
 800131e:	d1eb      	bne.n	80012f8 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4915      	ldr	r1, [pc, #84]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	490d      	ldr	r1, [pc, #52]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135e:	f000 f81f 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 8001362:	4602      	mov	r2, r0
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_RCC_ClockConfig+0x160>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4909      	ldr	r1, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x164>)
 8001370:	5ccb      	ldrb	r3, [r1, r3]
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_RCC_ClockConfig+0x168>)
 8001378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_RCC_ClockConfig+0x16c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f9d4 	bl	800072c <HAL_InitTick>

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	08004778 	.word	0x08004778
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b08e      	sub	sp, #56	; 0x38
 80013a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013a8:	f107 0414 	add.w	r4, r7, #20
 80013ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013b4:	1d3c      	adds	r4, r7, #4
 80013b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d002      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x46>
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d003      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x4c>
 80013e4:	e02c      	b.n	8001440 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ea:	e02c      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	0c9b      	lsrs	r3, r3, #18
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013f8:	4413      	add	r3, r2
 80013fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d012      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_RCC_GetSysClockFreq+0xbc>)
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001416:	4413      	add	r3, r2
 8001418:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001422:	fb02 f203 	mul.w	r2, r2, r3
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
 800142e:	e004      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800143e:	e002      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001448:	4618      	mov	r0, r3
 800144a:	3738      	adds	r7, #56	; 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bc90      	pop	{r4, r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	08004568 	.word	0x08004568
 8001458:	08004578 	.word	0x08004578
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_RCC_GetHCLKFreq+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001480:	f7ff fff2 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	08004788 	.word	0x08004788

080014a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a8:	f7ff ffde 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	0adb      	lsrs	r3, r3, #11
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	4903      	ldr	r1, [pc, #12]	; (80014c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	08004788 	.word	0x08004788

080014cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <RCC_Delay+0x34>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <RCC_Delay+0x38>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0a5b      	lsrs	r3, r3, #9
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e8:	bf00      	nop
  }
  while (Delay --);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e5a      	subs	r2, r3, #1
 80014ee:	60fa      	str	r2, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <RCC_Delay+0x1c>
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e041      	b.n	800159e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe ff80 	bl	8000434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f000 f9e2 	bl	8001910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d001      	beq.n	80015c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e03f      	b.n	8001640 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_TIM_Base_Start_IT+0xa4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x62>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d00e      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x62>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_TIM_Base_Start_IT+0xa8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d009      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x62>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_TIM_Base_Start_IT+0xac>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_TIM_Base_Start_IT+0x62>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_TIM_Base_Start_IT+0xb0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d111      	bne.n	800162e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b06      	cmp	r3, #6
 800161a:	d010      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162c:	e007      	b.n	800163e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40012c00 	.word	0x40012c00
 8001650:	40000400 	.word	0x40000400
 8001654:	40000800 	.word	0x40000800
 8001658:	40014000 	.word	0x40014000

0800165c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a1a      	ldr	r2, [r3, #32]
 800167a:	f241 1311 	movw	r3, #4369	; 0x1111
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10f      	bne.n	80016a4 <HAL_TIM_Base_Stop_IT+0x48>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	f240 4344 	movw	r3, #1092	; 0x444
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_TIM_Base_Stop_IT+0x48>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d122      	bne.n	8001714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d11b      	bne.n	8001714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f06f 0202 	mvn.w	r2, #2
 80016e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8ed 	bl	80018da <HAL_TIM_IC_CaptureCallback>
 8001700:	e005      	b.n	800170e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8e0 	bl	80018c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8ef 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b04      	cmp	r3, #4
 8001720:	d122      	bne.n	8001768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b04      	cmp	r3, #4
 800172e:	d11b      	bne.n	8001768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0204 	mvn.w	r2, #4
 8001738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8c3 	bl	80018da <HAL_TIM_IC_CaptureCallback>
 8001754:	e005      	b.n	8001762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8b6 	bl	80018c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f8c5 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b08      	cmp	r3, #8
 8001774:	d122      	bne.n	80017bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b08      	cmp	r3, #8
 8001782:	d11b      	bne.n	80017bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0208 	mvn.w	r2, #8
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2204      	movs	r2, #4
 8001792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f899 	bl	80018da <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f88c 	bl	80018c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f89b 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d122      	bne.n	8001810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d11b      	bne.n	8001810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0210 	mvn.w	r2, #16
 80017e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2208      	movs	r2, #8
 80017e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f86f 	bl	80018da <HAL_TIM_IC_CaptureCallback>
 80017fc:	e005      	b.n	800180a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f862 	bl	80018c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f871 	bl	80018ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10e      	bne.n	800183c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0201 	mvn.w	r2, #1
 8001834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f001 fbc6 	bl	8002fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b80      	cmp	r3, #128	; 0x80
 8001848:	d10e      	bne.n	8001868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001854:	2b80      	cmp	r3, #128	; 0x80
 8001856:	d107      	bne.n	8001868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f943 	bl	8001aee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001872:	2b40      	cmp	r3, #64	; 0x40
 8001874:	d10e      	bne.n	8001894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d107      	bne.n	8001894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800188c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f835 	bl	80018fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d10e      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b20      	cmp	r3, #32
 80018ae:	d107      	bne.n	80018c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0220 	mvn.w	r2, #32
 80018b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f90e 	bl	8001adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <TIM_Base_SetConfig+0xe8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00b      	beq.n	8001940 <TIM_Base_SetConfig+0x30>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192e:	d007      	beq.n	8001940 <TIM_Base_SetConfig+0x30>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a32      	ldr	r2, [pc, #200]	; (80019fc <TIM_Base_SetConfig+0xec>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d003      	beq.n	8001940 <TIM_Base_SetConfig+0x30>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <TIM_Base_SetConfig+0xf0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d108      	bne.n	8001952 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <TIM_Base_SetConfig+0xe8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d017      	beq.n	800198a <TIM_Base_SetConfig+0x7a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d013      	beq.n	800198a <TIM_Base_SetConfig+0x7a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <TIM_Base_SetConfig+0xec>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00f      	beq.n	800198a <TIM_Base_SetConfig+0x7a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <TIM_Base_SetConfig+0xf0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00b      	beq.n	800198a <TIM_Base_SetConfig+0x7a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <TIM_Base_SetConfig+0xf4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <TIM_Base_SetConfig+0x7a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <TIM_Base_SetConfig+0xf8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d003      	beq.n	800198a <TIM_Base_SetConfig+0x7a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <TIM_Base_SetConfig+0xfc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d108      	bne.n	800199c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <TIM_Base_SetConfig+0xe8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00b      	beq.n	80019e0 <TIM_Base_SetConfig+0xd0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <TIM_Base_SetConfig+0xf4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <TIM_Base_SetConfig+0xd0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <TIM_Base_SetConfig+0xf8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d003      	beq.n	80019e0 <TIM_Base_SetConfig+0xd0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <TIM_Base_SetConfig+0xfc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d103      	bne.n	80019e8 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40000800 	.word	0x40000800
 8001a04:	40014000 	.word	0x40014000
 8001a08:	40014400 	.word	0x40014400
 8001a0c:	40014800 	.word	0x40014800

08001a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e04b      	b.n	8001ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d00e      	beq.n	8001a94 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d10c      	bne.n	8001aae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40000800 	.word	0x40000800
 8001ad8:	40014000 	.word	0x40014000

08001adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e03f      	b.n	8001b92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fcaa 	bl	8000480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f905 	bl	8001d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b08a      	sub	sp, #40	; 0x28
 8001b9e:	af02      	add	r7, sp, #8
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d17c      	bne.n	8001cb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_UART_Transmit+0x2c>
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e075      	b.n	8001cb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_UART_Transmit+0x3e>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e06e      	b.n	8001cb6 <HAL_UART_Transmit+0x11c>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2221      	movs	r2, #33	; 0x21
 8001bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bee:	f7fe fddf 	bl	80007b0 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	88fa      	ldrh	r2, [r7, #6]
 8001bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c08:	d108      	bne.n	8001c1c <HAL_UART_Transmit+0x82>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d104      	bne.n	8001c1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	e003      	b.n	8001c24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c2c:	e02a      	b.n	8001c84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2200      	movs	r2, #0
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f840 	bl	8001cbe <UART_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e036      	b.n	8001cb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10b      	bne.n	8001c66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	3302      	adds	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	e007      	b.n	8001c76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	3301      	adds	r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1cf      	bne.n	8001c2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2200      	movs	r2, #0
 8001c96:	2140      	movs	r1, #64	; 0x40
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f810 	bl	8001cbe <UART_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e006      	b.n	8001cb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e000      	b.n	8001cb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cce:	e02c      	b.n	8001d2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d028      	beq.n	8001d2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <UART_WaitOnFlagUntilTimeout+0x30>
 8001cde:	f7fe fd67 	bl	80007b0 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d21d      	bcs.n	8001d2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e00f      	b.n	8001d4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4013      	ands	r3, r2
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d0c3      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d94:	f023 030c 	bic.w	r3, r3, #12
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <UART_SetConfig+0x1c0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d103      	bne.n	8001dca <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001dc2:	f7ff fb6f 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	e002      	b.n	8001dd0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001dca:	f7ff fb57 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 8001dce:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	d14c      	bne.n	8001e74 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009a      	lsls	r2, r3, #2
 8001de4:	441a      	add	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	4a49      	ldr	r2, [pc, #292]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	0119      	lsls	r1, r3, #4
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	009a      	lsls	r2, r3, #2
 8001e04:	441a      	add	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e10:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001e12:	fba3 0302 	umull	r0, r3, r3, r2
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	fb00 f303 	mul.w	r3, r0, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	3332      	adds	r3, #50	; 0x32
 8001e24:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e32:	4419      	add	r1, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009a      	lsls	r2, r3, #2
 8001e3e:	441a      	add	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e4a:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001e4c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	2064      	movs	r0, #100	; 0x64
 8001e54:	fb00 f303 	mul.w	r3, r0, r3
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	3332      	adds	r3, #50	; 0x32
 8001e5e:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	f003 0207 	and.w	r2, r3, #7
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	440a      	add	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8001e72:	e04a      	b.n	8001f0a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	441a      	add	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	0119      	lsls	r1, r3, #4
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009a      	lsls	r2, r3, #2
 8001e9e:	441a      	add	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001eac:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	2064      	movs	r0, #100	; 0x64
 8001eb4:	fb00 f303 	mul.w	r3, r0, r3
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	3332      	adds	r3, #50	; 0x32
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eca:	4419      	add	r1, r3
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009a      	lsls	r2, r3, #2
 8001ed6:	441a      	add	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001ee4:	fba3 0302 	umull	r0, r3, r3, r2
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	2064      	movs	r0, #100	; 0x64
 8001eec:	fb00 f303 	mul.w	r3, r0, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	3332      	adds	r3, #50	; 0x32
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <UART_SetConfig+0x1c4>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	440a      	add	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013800 	.word	0x40013800
 8001f18:	51eb851f 	.word	0x51eb851f

08001f1c <selectConst>:
	const bool condition2,
	const uint8_t option1,
	const uint8_t option2,
	const uint8_t option3,
	const uint8_t option4)
{
 8001f1c:	b490      	push	{r4, r7}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	71fb      	strb	r3, [r7, #7]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71bb      	strb	r3, [r7, #6]
 8001f32:	460b      	mov	r3, r1
 8001f34:	717b      	strb	r3, [r7, #5]
 8001f36:	4613      	mov	r3, r2
 8001f38:	713b      	strb	r3, [r7, #4]
	if (condition1 && condition2) return option1;
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <selectConst+0x2e>
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <selectConst+0x2e>
 8001f46:	797b      	ldrb	r3, [r7, #5]
 8001f48:	e00a      	b.n	8001f60 <selectConst+0x44>
	if (condition1) return option2;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <selectConst+0x38>
 8001f50:	793b      	ldrb	r3, [r7, #4]
 8001f52:	e005      	b.n	8001f60 <selectConst+0x44>
	if (condition2) return option3;
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <selectConst+0x42>
 8001f5a:	7c3b      	ldrb	r3, [r7, #16]
 8001f5c:	e000      	b.n	8001f60 <selectConst+0x44>
	return option4;
 8001f5e:	7d3b      	ldrb	r3, [r7, #20]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc90      	pop	{r4, r7}
 8001f68:	4770      	bx	lr

08001f6a <concatenate>:

static void concatenate(
	uint8_t *out,
	const uint8_t *in_left, const size_t leftlen_inbytes,
	const uint8_t *in_right, const size_t rightlen_inbytes)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
	memcpy(out, in_left, leftlen_inbytes);
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f001 f951 	bl	8003224 <memcpy>
	memcpy(out + leftlen_inbytes, in_right, rightlen_inbytes);
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 f949 	bl	8003224 <memcpy>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <XOR>:
static void XOR(
	uint8_t *out,
	const uint8_t *in_left,
	const uint8_t *in_right,
	const size_t iolen_inbytes)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b087      	sub	sp, #28
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
	size_t i;
	for (i = 0; i < iolen_inbytes; i++) out[i] = in_left[i] ^ in_right[i];
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e010      	b.n	8001fd0 <XOR+0x36>
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	7819      	ldrb	r1, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4403      	add	r3, r0
 8001fc4:	404a      	eors	r2, r1
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3ea      	bcc.n	8001fae <XOR+0x14>
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <XOR_const>:

static void XOR_const(
	uint8_t *State_inout,
	const uint8_t  Constant)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
	State_inout[STATE_INBYTES - 1] ^= (Constant << LAST_THREE_BITS_OFFSET);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	331f      	adds	r3, #31
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b25a      	sxtb	r2, r3
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	015b      	lsls	r3, r3, #5
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	4053      	eors	r3, r2
 8002000:	b25a      	sxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	331f      	adds	r3, #31
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <ROTR1>:

static void ROTR1(
	uint8_t *out,
	const uint8_t *in,
	const size_t iolen_inbytes)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	uint8_t tmp = in[0];
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	74fb      	strb	r3, [r7, #19]
	size_t i;
	for (i = 0; i < iolen_inbytes - 1; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e017      	b.n	800205c <ROTR1+0x48>
	{
		out[i] = (in[i] >> 1) | ((in[(i+1)] & 1) << 7);
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	b25a      	sxtb	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	440b      	add	r3, r1
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	01db      	lsls	r3, r3, #7
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b259      	sxtb	r1, r3
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4413      	add	r3, r2
 8002052:	b2ca      	uxtb	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iolen_inbytes - 1; i++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3e2      	bcc.n	800202c <ROTR1+0x18>
	}
	out[iolen_inbytes - 1] = (in[i] >> 1) | ((tmp & 1) << 7);
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	b25a      	sxtb	r2, r3
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	01db      	lsls	r3, r3, #7
 8002078:	b25b      	sxtb	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b259      	sxtb	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3b01      	subs	r3, #1
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <ShuffleXOR>:
static void ShuffleXOR(
	uint8_t *DataBlock_out,
	const uint8_t *OuterState_in,
	const uint8_t *DataBlock_in,
	const size_t DBlen_inbytes)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
	const uint8_t *OuterState_part1 = OuterState_in;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61bb      	str	r3, [r7, #24]
	const uint8_t *OuterState_part2 = OuterState_in + RATE_INBYTES / 2;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3302      	adds	r3, #2
 80020aa:	617b      	str	r3, [r7, #20]

	uint8_t OuterState_part1_ROTR1[RATE_INBYTES / 2] = { 0 };
 80020ac:	2300      	movs	r3, #0
 80020ae:	823b      	strh	r3, [r7, #16]
	size_t i;

	ROTR1(OuterState_part1_ROTR1, OuterState_part1, RATE_INBYTES / 2);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2202      	movs	r2, #2
 80020b6:	69b9      	ldr	r1, [r7, #24]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ffab 	bl	8002014 <ROTR1>

	i = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
	while ((i < DBlen_inbytes) && (i < RATE_INBYTES / 2))
 80020c2:	e010      	b.n	80020e6 <ShuffleXOR+0x52>
	{
		DataBlock_out[i] = OuterState_part2[i] ^ DataBlock_in[i];
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	4413      	add	r3, r2
 80020ca:	7819      	ldrb	r1, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4403      	add	r3, r0
 80020da:	404a      	eors	r2, r1
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
		i++;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3301      	adds	r3, #1
 80020e4:	61fb      	str	r3, [r7, #28]
	while ((i < DBlen_inbytes) && (i < RATE_INBYTES / 2))
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d217      	bcs.n	800211e <ShuffleXOR+0x8a>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d9e7      	bls.n	80020c4 <ShuffleXOR+0x30>
	}
	while (i < DBlen_inbytes)
 80020f4:	e013      	b.n	800211e <ShuffleXOR+0x8a>
	{
		DataBlock_out[i] = OuterState_part1_ROTR1[i - RATE_INBYTES / 2] ^ DataBlock_in[i];
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b02      	subs	r3, #2
 80020fa:	f107 0220 	add.w	r2, r7, #32
 80020fe:	4413      	add	r3, r2
 8002100:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4403      	add	r3, r0
 8002112:	404a      	eors	r2, r1
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]
		i++;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
	while (i < DBlen_inbytes)
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3e7      	bcc.n	80020f6 <ShuffleXOR+0x62>
	}
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <rhoohr>:
	uint8_t *OuterState_inout,
	uint8_t *DataBlock_out,
	const uint8_t *DataBlock_in,
	const size_t DBlen_inbytes,
	const uint32_t EncDecInd)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
	ShuffleXOR(DataBlock_out, OuterState_inout, DataBlock_in, DBlen_inbytes);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	68b8      	ldr	r0, [r7, #8]
 8002146:	f7ff ffa5 	bl	8002094 <ShuffleXOR>

	if (EncDecInd == ENC)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <rhoohr+0x2e>
	{
		XOR(OuterState_inout, OuterState_inout, DataBlock_in, DBlen_inbytes);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff ff1f 	bl	8001f9a <XOR>
	}
	else
	{
		XOR(OuterState_inout, OuterState_inout, DataBlock_out, DBlen_inbytes);
	}	
}
 800215c:	e005      	b.n	800216a <rhoohr+0x3a>
		XOR(OuterState_inout, OuterState_inout, DataBlock_out, DBlen_inbytes);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff ff18 	bl	8001f9a <XOR>
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HASH>:
static void HASH(
	uint8_t *State_inout,
	const uint8_t *Data_in,
	const uint64_t Dlen_inbytes,
	const uint8_t  Constant)
{
 8002172:	b5b0      	push	{r4, r5, r7, lr}
 8002174:	b088      	sub	sp, #32
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t *State = State_inout;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	61bb      	str	r3, [r7, #24]
	size_t Dlen_inblocks = (Dlen_inbytes + RATE_INBYTES - 1) / RATE_INBYTES;
 8002184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002188:	1cd4      	adds	r4, r2, #3
 800218a:	f143 0500 	adc.w	r5, r3, #0
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	08a2      	lsrs	r2, r4, #2
 8002198:	ea42 7285 	orr.w	r2, r2, r5, lsl #30
 800219c:	08ab      	lsrs	r3, r5, #2
 800219e:	4613      	mov	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
	size_t LastDBlocklen;
	size_t i;

	for (i = 0; i < Dlen_inblocks - 1; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e00e      	b.n	80021c6 <HASH+0x54>
	{
		PHOTON_Permutation(State);
 80021a8:	69b8      	ldr	r0, [r7, #24]
 80021aa:	f000 fc57 	bl	8002a5c <PHOTON_Permutation>
		XOR(State, State, Data_in + i * RATE_INBYTES, RATE_INBYTES);
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	441a      	add	r2, r3
 80021b6:	2304      	movs	r3, #4
 80021b8:	69b9      	ldr	r1, [r7, #24]
 80021ba:	69b8      	ldr	r0, [r7, #24]
 80021bc:	f7ff feed 	bl	8001f9a <XOR>
	for (i = 0; i < Dlen_inblocks - 1; i++)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	3301      	adds	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3eb      	bcc.n	80021a8 <HASH+0x36>
	}
	PHOTON_Permutation(State);	
 80021d0:	69b8      	ldr	r0, [r7, #24]
 80021d2:	f000 fc43 	bl	8002a5c <PHOTON_Permutation>
	LastDBlocklen = Dlen_inbytes - i * RATE_INBYTES;
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	613b      	str	r3, [r7, #16]
	XOR(State, State, Data_in + i * RATE_INBYTES, LastDBlocklen);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	441a      	add	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	69b8      	ldr	r0, [r7, #24]
 80021ee:	f7ff fed4 	bl	8001f9a <XOR>
	if (LastDBlocklen < RATE_INBYTES) State[LastDBlocklen] ^= 0x01; // ozs
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d80a      	bhi.n	800220e <HASH+0x9c>
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	440b      	add	r3, r1
 8002206:	f082 0201 	eor.w	r2, r2, #1
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

	XOR_const(State, Constant);
 800220e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002212:	4619      	mov	r1, r3
 8002214:	69b8      	ldr	r0, [r7, #24]
 8002216:	f7ff fee5 	bl	8001fe4 <XOR_const>
}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bdb0      	pop	{r4, r5, r7, pc}

08002222 <ENCorDEC>:
	uint8_t *Data_out,
	const uint8_t *Data_in,
	const uint64_t Dlen_inbytes,
	const uint8_t Constant,
	const uint32_t EncDecInd)
{
 8002222:	b5b0      	push	{r4, r5, r7, lr}
 8002224:	b08a      	sub	sp, #40	; 0x28
 8002226:	af02      	add	r7, sp, #8
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
	uint8_t *State = State_inout;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	61bb      	str	r3, [r7, #24]
	size_t Dlen_inblocks = (Dlen_inbytes + RATE_INBYTES - 1) / RATE_INBYTES;
 8002232:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002236:	1cd4      	adds	r4, r2, #3
 8002238:	f143 0500 	adc.w	r5, r3, #0
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	08a2      	lsrs	r2, r4, #2
 8002246:	ea42 7285 	orr.w	r2, r2, r5, lsl #30
 800224a:	08ab      	lsrs	r3, r5, #2
 800224c:	4613      	mov	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
	size_t LastDBlocklen;
	size_t i;

	for (i = 0; i < Dlen_inblocks - 1; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	e013      	b.n	800227e <ENCorDEC+0x5c>
	{
		PHOTON_Permutation(State);
 8002256:	69b8      	ldr	r0, [r7, #24]
 8002258:	f000 fc00 	bl	8002a5c <PHOTON_Permutation>
		rhoohr(State, Data_out + i * RATE_INBYTES, Data_in + i * RATE_INBYTES, RATE_INBYTES, EncDecInd);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	18d1      	adds	r1, r2, r3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	441a      	add	r2, r3
 800226c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2304      	movs	r3, #4
 8002272:	69b8      	ldr	r0, [r7, #24]
 8002274:	f7ff ff5c 	bl	8002130 <rhoohr>
	for (i = 0; i < Dlen_inblocks - 1; i++)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3301      	adds	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3b01      	subs	r3, #1
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3e6      	bcc.n	8002256 <ENCorDEC+0x34>
	}
	PHOTON_Permutation(State);
 8002288:	69b8      	ldr	r0, [r7, #24]
 800228a:	f000 fbe7 	bl	8002a5c <PHOTON_Permutation>
	LastDBlocklen = Dlen_inbytes - i * RATE_INBYTES;
 800228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	613b      	str	r3, [r7, #16]
	rhoohr(State, Data_out + i * RATE_INBYTES, Data_in + i * RATE_INBYTES, LastDBlocklen, EncDecInd);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	18d1      	adds	r1, r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	441a      	add	r2, r3
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	69b8      	ldr	r0, [r7, #24]
 80022b0:	f7ff ff3e 	bl	8002130 <rhoohr>
	if (LastDBlocklen < RATE_INBYTES) State[LastDBlocklen] ^= 0x01; // ozs
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d80a      	bhi.n	80022d0 <ENCorDEC+0xae>
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	440b      	add	r3, r1
 80022c8:	f082 0201 	eor.w	r2, r2, #1
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]

	XOR_const(State, Constant);
 80022d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022d4:	4619      	mov	r1, r3
 80022d6:	69b8      	ldr	r0, [r7, #24]
 80022d8:	f7ff fe84 	bl	8001fe4 <XOR_const>
}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bdb0      	pop	{r4, r5, r7, pc}

080022e4 <TAG>:

static void TAG(
	uint8_t *Tag_out,
	uint8_t *State)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	size_t i;

	i = TAG_INBYTES;
 80022ee:	2310      	movs	r3, #16
 80022f0:	60fb      	str	r3, [r7, #12]
	while (i > SQUEEZE_RATE_INBYTES)
 80022f2:	e00d      	b.n	8002310 <TAG+0x2c>
	{
		PHOTON_Permutation(State);
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f000 fbb1 	bl	8002a5c <PHOTON_Permutation>
		memcpy(Tag_out, State, SQUEEZE_RATE_INBYTES);
 80022fa:	2210      	movs	r2, #16
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 ff90 	bl	8003224 <memcpy>
		Tag_out += SQUEEZE_RATE_INBYTES;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3310      	adds	r3, #16
 8002308:	607b      	str	r3, [r7, #4]
		i -= SQUEEZE_RATE_INBYTES;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b10      	subs	r3, #16
 800230e:	60fb      	str	r3, [r7, #12]
	while (i > SQUEEZE_RATE_INBYTES)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b10      	cmp	r3, #16
 8002314:	d8ee      	bhi.n	80022f4 <TAG+0x10>
	}
	PHOTON_Permutation(State);
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f000 fba0 	bl	8002a5c <PHOTON_Permutation>
	memcpy(Tag_out, State, i);
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 ff7f 	bl	8003224 <memcpy>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <crypto_aead_encrypt>:
	const unsigned char *ad, unsigned long long adlen,
	const unsigned char *nsec,
	const unsigned char *npub,
	const unsigned char *k
	)
{
 800232e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002332:	b099      	sub	sp, #100	; 0x64
 8002334:	af04      	add	r7, sp, #16
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	... and secret key k[0],k[1],...
	... the implementation shall not use nsec
	...
	... return 0;
	*/
	uint8_t *C = c;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t *T = c + mlen;
 8002340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint8_t *M = m;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
	const uint8_t *A = ad;
 800234c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002350:	643b      	str	r3, [r7, #64]	; 0x40
	const uint8_t *N = npub;
 8002352:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
	const uint8_t *K = k;
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t State[STATE_INBYTES] = { 0 };
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	f107 0318 	add.w	r3, r7, #24
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]
	uint8_t c0;
	uint8_t c1;
	
	concatenate(State, N, NOUNCE_INBYTES, K, KEY_INBYTES);
 8002376:	f107 0014 	add.w	r0, r7, #20
 800237a:	2310      	movs	r3, #16
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	2210      	movs	r2, #16
 8002382:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002384:	f7ff fdf1 	bl	8001f6a <concatenate>

	if ((adlen == 0) && (mlen == 0))
 8002388:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800238c:	4313      	orrs	r3, r2
 800238e:	d118      	bne.n	80023c2 <crypto_aead_encrypt+0x94>
 8002390:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002394:	4313      	orrs	r3, r2
 8002396:	d114      	bne.n	80023c2 <crypto_aead_encrypt+0x94>
	{
		XOR_const(State, 1);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fe20 	bl	8001fe4 <XOR_const>
		TAG(T, State);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80023ac:	f7ff ff9a 	bl	80022e4 <TAG>
		*clen = TAG_INBYTES;
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	f04f 0210 	mov.w	r2, #16
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9c1 2300 	strd	r2, r3, [r1]
		return 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	e07c      	b.n	80024bc <crypto_aead_encrypt+0x18e>
	}

	c0 = selectConst((mlen != 0), ((adlen % RATE_INBYTES) == 0), 1, 2, 3, 4);
 80023c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c6:	4313      	orrs	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2de      	uxtb	r6, r3
 80023d2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023d6:	f04f 0003 	mov.w	r0, #3
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	ea02 0800 	and.w	r8, r2, r0
 80023e2:	ea03 0901 	and.w	r9, r3, r1
 80023e6:	ea48 0309 	orr.w	r3, r8, r9
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2d9      	uxtb	r1, r3
 80023f4:	2304      	movs	r3, #4
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2303      	movs	r3, #3
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2302      	movs	r3, #2
 80023fe:	2201      	movs	r2, #1
 8002400:	4630      	mov	r0, r6
 8002402:	f7ff fd8b 	bl	8001f1c <selectConst>
 8002406:	4603      	mov	r3, r0
 8002408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	c1 = selectConst((adlen != 0), ((mlen % RATE_INBYTES) == 0), 1, 2, 5, 6);
 800240c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002414:	4313      	orrs	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2de      	uxtb	r6, r3
 8002420:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002424:	f04f 0003 	mov.w	r0, #3
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	ea02 0400 	and.w	r4, r2, r0
 8002430:	ea03 0501 	and.w	r5, r3, r1
 8002434:	ea44 0305 	orr.w	r3, r4, r5
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2d9      	uxtb	r1, r3
 8002442:	2306      	movs	r3, #6
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	2305      	movs	r3, #5
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2302      	movs	r3, #2
 800244c:	2201      	movs	r2, #1
 800244e:	4630      	mov	r0, r6
 8002450:	f7ff fd64 	bl	8001f1c <selectConst>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	if (adlen != 0) HASH(State, A, adlen, c0);
 800245a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800245e:	4313      	orrs	r3, r2
 8002460:	d009      	beq.n	8002476 <crypto_aead_encrypt+0x148>
 8002462:	f107 0014 	add.w	r0, r7, #20
 8002466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002470:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002472:	f7ff fe7e 	bl	8002172 <HASH>
	if ( mlen != 0) ENCorDEC(State, C, M, mlen, c1, ENC);
 8002476:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800247a:	4313      	orrs	r3, r2
 800247c:	d00e      	beq.n	800249c <crypto_aead_encrypt+0x16e>
 800247e:	f107 0014 	add.w	r0, r7, #20
 8002482:	2300      	movs	r3, #0
 8002484:	9303      	str	r3, [sp, #12]
 8002486:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002490:	e9cd 2300 	strd	r2, r3, [sp]
 8002494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002496:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002498:	f7ff fec3 	bl	8002222 <ENCorDEC>
	
	TAG(T, State);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80024a4:	f7ff ff1e 	bl	80022e4 <TAG>
	*clen = mlen + TAG_INBYTES;
 80024a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80024ac:	f112 0a10 	adds.w	sl, r2, #16
 80024b0:	f143 0b00 	adc.w	fp, r3, #0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	e9c3 ab00 	strd	sl, fp, [r3]
	return 0;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3754      	adds	r7, #84	; 0x54
 80024c0:	46bd      	mov	sp, r7
 80024c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024c6 <crypto_aead_decrypt>:
	const unsigned char *c, unsigned long long clen,
	const unsigned char *ad, unsigned long long adlen,
	const unsigned char *npub,
	const unsigned char *k
	)
{
 80024c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ca:	b09f      	sub	sp, #124	; 0x7c
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
	... and nonce number npub[0],npub[1],...
	... and secret key k[0],k[1],...
	...
	... return 0;
	*/
	uint8_t *M = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	667b      	str	r3, [r7, #100]	; 0x64
	const uint8_t *C = c;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	663b      	str	r3, [r7, #96]	; 0x60
	const uint8_t *T = c + clen - TAG_INBYTES;
 80024de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024e2:	3b10      	subs	r3, #16
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	const uint8_t *A = ad;
 80024ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ee:	65bb      	str	r3, [r7, #88]	; 0x58
	const uint8_t *N = npub;
 80024f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f4:	657b      	str	r3, [r7, #84]	; 0x54
	const uint8_t *K = k;
 80024f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024fa:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t State[STATE_INBYTES] = { 0 };
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	615a      	str	r2, [r3, #20]
 8002512:	619a      	str	r2, [r3, #24]
	uint8_t T_tmp[TAG_INBYTES] = { 0 };
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	f107 0318 	add.w	r3, r7, #24
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
	uint8_t c0;
	uint8_t c1;
	uint64_t cmtlen;

	if (clen < TAG_INBYTES) return TAG_UNMATCH;
 8002524:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf08      	it	eq
 800252c:	2a10      	cmpeq	r2, #16
 800252e:	d202      	bcs.n	8002536 <crypto_aead_decrypt+0x70>
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	e0e3      	b.n	80026fe <crypto_aead_decrypt+0x238>
	cmtlen = clen - TAG_INBYTES;
 8002536:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800253a:	f1b2 0a10 	subs.w	sl, r2, #16
 800253e:	f143 3bff 	adc.w	fp, r3, #4294967295
 8002542:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48

	concatenate(State, N, NOUNCE_INBYTES, K, KEY_INBYTES);
 8002546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800254a:	2310      	movs	r3, #16
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002550:	2210      	movs	r2, #16
 8002552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002554:	f7ff fd09 	bl	8001f6a <concatenate>

	if ((adlen == 0) && (cmtlen == 0))
 8002558:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800255c:	4313      	orrs	r3, r2
 800255e:	d127      	bne.n	80025b0 <crypto_aead_decrypt+0xea>
 8002560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002564:	4313      	orrs	r3, r2
 8002566:	d123      	bne.n	80025b0 <crypto_aead_decrypt+0xea>
	{
		XOR_const(State, 1);
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fd38 	bl	8001fe4 <XOR_const>
		TAG(T_tmp, State);
 8002574:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff feb0 	bl	80022e4 <TAG>
		if (memcmp(T_tmp, T, TAG_INBYTES) != 0) return TAG_UNMATCH;
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2210      	movs	r2, #16
 800258a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fe3b 	bl	8003208 <memcmp>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <crypto_aead_decrypt+0xd8>
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	e0af      	b.n	80026fe <crypto_aead_decrypt+0x238>
		*mlen = 0;
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9c1 2300 	strd	r2, r3, [r1]
		return TAG_MATCH;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e0a6      	b.n	80026fe <crypto_aead_decrypt+0x238>
	}

	c0 = selectConst((cmtlen != 0), ((adlen % RATE_INBYTES) == 0), 1, 2, 3, 4);
 80025b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b4:	4313      	orrs	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2de      	uxtb	r6, r3
 80025c0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80025c4:	f04f 0003 	mov.w	r0, #3
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	ea02 0800 	and.w	r8, r2, r0
 80025d0:	ea03 0901 	and.w	r9, r3, r1
 80025d4:	ea48 0309 	orr.w	r3, r8, r9
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2d9      	uxtb	r1, r3
 80025e2:	2304      	movs	r3, #4
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2303      	movs	r3, #3
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2302      	movs	r3, #2
 80025ec:	2201      	movs	r2, #1
 80025ee:	4630      	mov	r0, r6
 80025f0:	f7ff fc94 	bl	8001f1c <selectConst>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	c1 = selectConst((adlen != 0), ((cmtlen % RATE_INBYTES) == 0), 1, 2, 5, 6);
 80025fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80025fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002602:	4313      	orrs	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2de      	uxtb	r6, r3
 800260e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002612:	f04f 0003 	mov.w	r0, #3
 8002616:	f04f 0100 	mov.w	r1, #0
 800261a:	ea02 0400 	and.w	r4, r2, r0
 800261e:	ea03 0501 	and.w	r5, r3, r1
 8002622:	ea44 0305 	orr.w	r3, r4, r5
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2d9      	uxtb	r1, r3
 8002630:	2306      	movs	r3, #6
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2305      	movs	r3, #5
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2302      	movs	r3, #2
 800263a:	2201      	movs	r2, #1
 800263c:	4630      	mov	r0, r6
 800263e:	f7ff fc6d 	bl	8001f1c <selectConst>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	if (adlen != 0) HASH(State, A, adlen, c0);
 8002648:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800264c:	4313      	orrs	r3, r2
 800264e:	d009      	beq.n	8002664 <crypto_aead_decrypt+0x19e>
 8002650:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002654:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800265e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002660:	f7ff fd87 	bl	8002172 <HASH>
	if (cmtlen != 0)
 8002664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002668:	4313      	orrs	r3, r2
 800266a:	d01a      	beq.n	80026a2 <crypto_aead_decrypt+0x1dc>
	{
		M = (uint8_t *)malloc(cmtlen);
 800266c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fdba 	bl	80031e8 <malloc>
 8002674:	4603      	mov	r3, r0
 8002676:	667b      	str	r3, [r7, #100]	; 0x64
		if (M == NULL) return OTHER_FAILURES;
 8002678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <crypto_aead_decrypt+0x1be>
 800267e:	f06f 0301 	mvn.w	r3, #1
 8002682:	e03c      	b.n	80026fe <crypto_aead_decrypt+0x238>
		ENCorDEC(State, M, C, cmtlen, c1, DEC);
 8002684:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002688:	2301      	movs	r3, #1
 800268a:	9303      	str	r3, [sp, #12]
 800268c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002696:	e9cd 2300 	strd	r2, r3, [sp]
 800269a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800269c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800269e:	f7ff fdc0 	bl	8002222 <ENCorDEC>
	}

	TAG(T_tmp, State);
 80026a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe19 	bl	80022e4 <TAG>
	if (memcmp(T_tmp, T, TAG_INBYTES) != 0)
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	2210      	movs	r2, #16
 80026b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fda4 	bl	8003208 <memcmp>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <crypto_aead_decrypt+0x212>
	{
		if (M != NULL) free(M);
 80026c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <crypto_aead_decrypt+0x20c>
 80026cc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026ce:	f000 fd93 	bl	80031f8 <free>
		return TAG_UNMATCH;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e012      	b.n	80026fe <crypto_aead_decrypt+0x238>
	}

	if (cmtlen != 0)
 80026d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026dc:	4313      	orrs	r3, r2
 80026de:	d008      	beq.n	80026f2 <crypto_aead_decrypt+0x22c>
	{
		memcpy(m, M, cmtlen);
 80026e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e2:	461a      	mov	r2, r3
 80026e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fd9c 	bl	8003224 <memcpy>
		free(M);
 80026ec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026ee:	f000 fd83 	bl	80031f8 <free>
	}
	*mlen = cmtlen;
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]
	return TAG_MATCH;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	376c      	adds	r7, #108	; 0x6c
 8002702:	46bd      	mov	sp, r7
 8002704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002708 <FieldMult>:
};

byte sbox[16] = {12, 5, 6, 11, 9, 0, 10, 13, 3, 14, 15, 8, 4, 7, 1, 2};

byte FieldMult(byte a, byte b)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
	byte x = a, ret = 0;
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	2300      	movs	r3, #0
 800271e:	73bb      	strb	r3, [r7, #14]
	int i;
	for(i = 0; i < S; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	e020      	b.n	8002768 <FieldMult+0x60>
		if((b>>i)&1) ret ^= x;
 8002726:	79ba      	ldrb	r2, [r7, #6]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	fa42 f303 	asr.w	r3, r2, r3
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <FieldMult+0x36>
 8002736:	7bba      	ldrb	r2, [r7, #14]
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	4053      	eors	r3, r2
 800273c:	73bb      	strb	r3, [r7, #14]
		if((x>>(S-1))&1) {
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <FieldMult+0x54>
			x <<= 1;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
			x ^= ReductionPoly;
 8002752:	2203      	movs	r2, #3
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	4053      	eors	r3, r2
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e002      	b.n	8002762 <FieldMult+0x5a>
		}
		else x <<= 1;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < S; i++) {
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3301      	adds	r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b03      	cmp	r3, #3
 800276c:	dddb      	ble.n	8002726 <FieldMult+0x1e>
	}
	return ret&WORDFILTER;
 800276e:	220f      	movs	r2, #15
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	4013      	ands	r3, r2
 8002774:	b2db      	uxtb	r3, r3
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <PrintState>:

void PrintState(byte state[D][D])
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	if(!DEBUG) return;
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <PrintState+0x60>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d023      	beq.n	80027d8 <PrintState+0x58>
	int i, j;
	for(i = 0; i < D; i++){
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e019      	b.n	80027ca <PrintState+0x4a>
		for(j = 0; j < D; j++)
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	e00d      	b.n	80027b8 <PrintState+0x38>
			printf("%2X ", state[i][j]);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	441a      	add	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <PrintState+0x64>)
 80027ae:	f000 fdf5 	bl	800339c <iprintf>
		for(j = 0; j < D; j++)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b07      	cmp	r3, #7
 80027bc:	ddee      	ble.n	800279c <PrintState+0x1c>
		printf("\n");
 80027be:	200a      	movs	r0, #10
 80027c0:	f000 fe04 	bl	80033cc <putchar>
	for(i = 0; i < D; i++){
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3301      	adds	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b07      	cmp	r3, #7
 80027ce:	dde2      	ble.n	8002796 <PrintState+0x16>
	}
	printf("\n");
 80027d0:	200a      	movs	r0, #10
 80027d2:	f000 fdfb 	bl	80033cc <putchar>
 80027d6:	e000      	b.n	80027da <PrintState+0x5a>
	if(!DEBUG) return;
 80027d8:	bf00      	nop
}
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200000a0 	.word	0x200000a0
 80027e4:	08004588 	.word	0x08004588

080027e8 <AddKey>:
	}
	printf("\n");
}

void AddKey(byte state[D][D], int round)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < D; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e018      	b.n	800282a <AddKey+0x42>
		state[i][0] ^= RC[i][round];
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	7819      	ldrb	r1, [r3, #0]
 8002802:	480e      	ldr	r0, [pc, #56]	; (800283c <AddKey+0x54>)
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	18c2      	adds	r2, r0, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4413      	add	r3, r2
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4403      	add	r3, r0
 800281e:	404a      	eors	r2, r1
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < D; i++)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b07      	cmp	r3, #7
 800282e:	dde3      	ble.n	80027f8 <AddKey+0x10>
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	08004790 	.word	0x08004790

08002840 <SubCell>:

void SubCell(byte state[D][D])
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i = 0; i < D; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e01d      	b.n	800288a <SubCell+0x4a>
		for(j = 0; j <  D; j++)
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	e014      	b.n	800287e <SubCell+0x3e>
			state[i][j] = sbox[state[i][j]];
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	441a      	add	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4619      	mov	r1, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	441a      	add	r2, r3
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <SubCell+0x5c>)
 800286e:	5c59      	ldrb	r1, [r3, r1]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4413      	add	r3, r2
 8002874:	460a      	mov	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]
		for(j = 0; j <  D; j++)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3301      	adds	r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b07      	cmp	r3, #7
 8002882:	dde7      	ble.n	8002854 <SubCell+0x14>
	for(i = 0; i < D; i++)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b07      	cmp	r3, #7
 800288e:	ddde      	ble.n	800284e <SubCell+0xe>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	2000000c 	.word	0x2000000c

080028a0 <ShiftRow>:

void ShiftRow(byte state[D][D])
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	int i, j;
	byte tmp[D];
	for(i = 1; i < D; i++) {
 80028a8:	2301      	movs	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e038      	b.n	8002920 <ShiftRow+0x80>
		for(j = 0; j < D; j++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e00f      	b.n	80028d4 <ShiftRow+0x34>
			tmp[j] = state[i][j];
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	441a      	add	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	7819      	ldrb	r1, [r3, #0]
 80028c2:	f107 0208 	add.w	r2, r7, #8
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	460a      	mov	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < D; j++)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3301      	adds	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b07      	cmp	r3, #7
 80028d8:	ddec      	ble.n	80028b4 <ShiftRow+0x14>
		for(j = 0; j < D; j++)
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	e019      	b.n	8002914 <ShiftRow+0x74>
			state[i][j] = tmp[(j+i)%D];
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4413      	add	r3, r2
 80028e6:	425a      	negs	r2, r3
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	f002 0207 	and.w	r2, r2, #7
 80028f0:	bf58      	it	pl
 80028f2:	4253      	negpl	r3, r2
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	00d2      	lsls	r2, r2, #3
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	440a      	add	r2, r1
 80028fc:	f107 0118 	add.w	r1, r7, #24
 8002900:	440b      	add	r3, r1
 8002902:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	460a      	mov	r2, r1
 800290c:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < D; j++)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	3301      	adds	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b07      	cmp	r3, #7
 8002918:	dde2      	ble.n	80028e0 <ShiftRow+0x40>
	for(i = 1; i < D; i++) {
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b07      	cmp	r3, #7
 8002924:	ddc3      	ble.n	80028ae <ShiftRow+0xe>
	}
}
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
	...

08002934 <MixColumn>:

void MixColumn(byte state[D][D])
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	int i, j, k;
	byte tmp[D];
	for(j = 0; j < D; j++){
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e048      	b.n	80029d4 <MixColumn+0xa0>
		for(i = 0; i < D; i++) {
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e029      	b.n	800299c <MixColumn+0x68>
			byte sum = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	74fb      	strb	r3, [r7, #19]
			for(k = 0; k < D; k++)
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e018      	b.n	8002984 <MixColumn+0x50>
				sum ^= FieldMult(MixColMatrix[i][k], state[k][j]);
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <MixColumn+0xb0>)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	441a      	add	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4413      	add	r3, r2
 800295e:	7818      	ldrb	r0, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	441a      	add	r2, r3
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	f7ff feca 	bl	8002708 <FieldMult>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	4053      	eors	r3, r2
 800297c:	74fb      	strb	r3, [r7, #19]
			for(k = 0; k < D; k++)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3301      	adds	r3, #1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b07      	cmp	r3, #7
 8002988:	dde3      	ble.n	8002952 <MixColumn+0x1e>
			tmp[i] = sum;
 800298a:	f107 0208 	add.w	r2, r7, #8
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	7cfa      	ldrb	r2, [r7, #19]
 8002994:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < D; i++) {
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b07      	cmp	r3, #7
 80029a0:	ddd2      	ble.n	8002948 <MixColumn+0x14>
		}
		for(i = 0; i < D; i++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	e00f      	b.n	80029c8 <MixColumn+0x94>
			state[i][j] = tmp[i];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	441a      	add	r2, r3
 80029b0:	f107 0108 	add.w	r1, r7, #8
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	440b      	add	r3, r1
 80029b8:	7819      	ldrb	r1, [r3, #0]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4413      	add	r3, r2
 80029be:	460a      	mov	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < D; i++)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b07      	cmp	r3, #7
 80029cc:	ddec      	ble.n	80029a8 <MixColumn+0x74>
	for(j = 0; j < D; j++){
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	ddb3      	ble.n	8002942 <MixColumn+0xe>
	}
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	080047f0 	.word	0x080047f0

080029e8 <Permutation>:
	}
}
#endif

void Permutation(byte state[D][D], int R)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < R; i++) {
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e023      	b.n	8002a40 <Permutation+0x58>
		if(DEBUG) printf("--- Round %d ---\n", i);
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <Permutation+0x6c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <Permutation+0x20>
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	4815      	ldr	r0, [pc, #84]	; (8002a58 <Permutation+0x70>)
 8002a04:	f000 fcca 	bl	800339c <iprintf>
		AddKey(state, i); PrintState(state);
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff feec 	bl	80027e8 <AddKey>
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff feb5 	bl	8002780 <PrintState>
#ifndef _TABLE_
		SubCell(state); PrintState(state);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff12 	bl	8002840 <SubCell>
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff feaf 	bl	8002780 <PrintState>
		ShiftRow(state); PrintState(state);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ff3c 	bl	80028a0 <ShiftRow>
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fea9 	bl	8002780 <PrintState>
		MixColumn(state); 
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff80 	bl	8002934 <MixColumn>
#else
		SCShRMCS(state);
#endif
		PrintState(state);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fea3 	bl	8002780 <PrintState>
	for(i = 0; i < R; i++) {
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dbd7      	blt.n	80029f8 <Permutation+0x10>
	}
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200000a0 	.word	0x200000a0
 8002a58:	08004590 	.word	0x08004590

08002a5c <PHOTON_Permutation>:

void PHOTON_Permutation(unsigned char *State_in)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b095      	sub	sp, #84	; 0x54
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    byte state[D][D];
    int i;

	for (i = 0; i < D * D; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a68:	e02b      	b.n	8002ac2 <PHOTON_Permutation+0x66>
	{
		state[i / D][i % D] = (State_in[i / 2] >> (4 * (i & 1))) & 0xf;
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6c:	0fda      	lsrs	r2, r3, #31
 8002a6e:	4413      	add	r3, r2
 8002a70:	105b      	asrs	r3, r3, #1
 8002a72:	461a      	mov	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa42 f303 	asr.w	r3, r2, r3
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da00      	bge.n	8002a92 <PHOTON_Permutation+0x36>
 8002a90:	3307      	adds	r3, #7
 8002a92:	10db      	asrs	r3, r3, #3
 8002a94:	4618      	mov	r0, r3
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	4259      	negs	r1, r3
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	f001 0107 	and.w	r1, r1, #7
 8002aa2:	bf58      	it	pl
 8002aa4:	424b      	negpl	r3, r1
 8002aa6:	f002 020f 	and.w	r2, r2, #15
 8002aaa:	b2d1      	uxtb	r1, r2
 8002aac:	00c2      	lsls	r2, r0, #3
 8002aae:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b44      	subs	r3, #68	; 0x44
 8002ab8:	460a      	mov	r2, r1
 8002aba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < D * D; i++)
 8002abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002abe:	3301      	adds	r3, #1
 8002ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac4:	2b3f      	cmp	r3, #63	; 0x3f
 8002ac6:	ddd0      	ble.n	8002a6a <PHOTON_Permutation+0xe>
	}
   
    Permutation(state, ROUND);
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	210c      	movs	r1, #12
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff8a 	bl	80029e8 <Permutation>

	memset(State_in, 0, (D * D) / 2);
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fbb1 	bl	8003240 <memset>
	for (i = 0; i < D * D; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae2:	e031      	b.n	8002b48 <PHOTON_Permutation+0xec>
	{
		State_in[i / 2] |= (state[i / D][i % D] & 0xf) << (4 * (i & 1));
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae6:	0fda      	lsrs	r2, r3, #31
 8002ae8:	4413      	add	r3, r2
 8002aea:	105b      	asrs	r3, r3, #1
 8002aec:	461c      	mov	r4, r3
 8002aee:	4622      	mov	r2, r4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25a      	sxtb	r2, r3
 8002af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da00      	bge.n	8002b00 <PHOTON_Permutation+0xa4>
 8002afe:	3307      	adds	r3, #7
 8002b00:	10db      	asrs	r3, r3, #3
 8002b02:	4618      	mov	r0, r3
 8002b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b06:	4259      	negs	r1, r3
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	f001 0107 	and.w	r1, r1, #7
 8002b10:	bf58      	it	pl
 8002b12:	424b      	negpl	r3, r1
 8002b14:	00c1      	lsls	r1, r0, #3
 8002b16:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002b1a:	4401      	add	r1, r0
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3b44      	subs	r3, #68	; 0x44
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f003 010f 	and.w	r1, r3, #15
 8002b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b25a      	sxtb	r2, r3
 8002b38:	4621      	mov	r1, r4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	440b      	add	r3, r1
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < D * D; i++)
 8002b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b44:	3301      	adds	r3, #1
 8002b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b4c:	ddca      	ble.n	8002ae4 <PHOTON_Permutation+0x88>
	}
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	3754      	adds	r7, #84	; 0x54
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0

	int ret = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 8002b62:	f000 fabf 	bl	80030e4 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8002b66:	f000 fa3f 	bl	8002fe8 <tick_msr_start>
	tick_msr_end();
 8002b6a:	f000 fa57 	bl	800301c <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <genkat_benchmark_hash_aead+0x8c>)
 8002b70:	491d      	ldr	r1, [pc, #116]	; (8002be8 <genkat_benchmark_hash_aead+0x90>)
 8002b72:	481e      	ldr	r0, [pc, #120]	; (8002bec <genkat_benchmark_hash_aead+0x94>)
 8002b74:	f000 fa74 	bl	8003060 <lwc_printf>
	lwc_printf("Memory usage: ");
 8002b78:	481d      	ldr	r0, [pc, #116]	; (8002bf0 <genkat_benchmark_hash_aead+0x98>)
 8002b7a:	f000 fa71 	bl	8003060 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <genkat_benchmark_hash_aead+0x9c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <genkat_benchmark_hash_aead+0x9c>)
 8002b84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b86:	4619      	mov	r1, r3
 8002b88:	481b      	ldr	r0, [pc, #108]	; (8002bf8 <genkat_benchmark_hash_aead+0xa0>)
 8002b8a:	f000 fa69 	bl	8003060 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <genkat_benchmark_hash_aead+0x9c>)
 8002b90:	6a19      	ldr	r1, [r3, #32]
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <genkat_benchmark_hash_aead+0x9c>)
 8002b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <genkat_benchmark_hash_aead+0x9c>)
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	4818      	ldr	r0, [pc, #96]	; (8002bfc <genkat_benchmark_hash_aead+0xa4>)
 8002b9c:	f000 fa60 	bl	8003060 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 8002ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4816      	ldr	r0, [pc, #88]	; (8002c00 <genkat_benchmark_hash_aead+0xa8>)
 8002ba8:	f000 fb4a 	bl	8003240 <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8002bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4814      	ldr	r0, [pc, #80]	; (8002c04 <genkat_benchmark_hash_aead+0xac>)
 8002bb4:	f000 fb44 	bl	8003240 <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8002bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4812      	ldr	r0, [pc, #72]	; (8002c08 <genkat_benchmark_hash_aead+0xb0>)
 8002bc0:	f000 fb3e 	bl	8003240 <memset>



#ifdef LWC_ALGO_AEAD
	ret = aead_generate_test_vectors();
 8002bc4:	f000 f824 	bl	8002c10 <aead_generate_test_vectors>
 8002bc8:	6078      	str	r0, [r7, #4]

	if(ret != KAT_SUCCESS){
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <genkat_benchmark_hash_aead+0x80>
		lwc_printf("TotRes: Error %d", ret);
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	480e      	ldr	r0, [pc, #56]	; (8002c0c <genkat_benchmark_hash_aead+0xb4>)
 8002bd4:	f000 fa44 	bl	8003060 <lwc_printf>

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
#endif

	return ret;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08004830 	.word	0x08004830
 8002be8:	080048b0 	.word	0x080048b0
 8002bec:	080045a4 	.word	0x080045a4
 8002bf0:	080045ec 	.word	0x080045ec
 8002bf4:	20000648 	.word	0x20000648
 8002bf8:	080045fc 	.word	0x080045fc
 8002bfc:	08004624 	.word	0x08004624
 8002c00:	200000ac 	.word	0x200000ac
 8002c04:	200001ac 	.word	0x200001ac
 8002c08:	200002ac 	.word	0x200002ac
 8002c0c:	08004650 	.word	0x08004650

08002c10 <aead_generate_test_vectors>:
#ifdef LWC_ALGO_AEAD

#define MAX_MESSAGE_LENGTH			32
#define MAX_ASSOCIATED_DATA_LENGTH	32

int aead_generate_test_vectors() {
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	b0c9      	sub	sp, #292	; 0x124
 8002c16:	af0a      	add	r7, sp, #40	; 0x28
	unsigned char nonce[CRYPTO_NPUBBYTES];
	unsigned char msg[MAX_MESSAGE_LENGTH];
	unsigned char msg2[MAX_MESSAGE_LENGTH];
	unsigned char ad[MAX_ASSOCIATED_DATA_LENGTH];
	unsigned char ct[MAX_MESSAGE_LENGTH + CRYPTO_ABYTES];
	unsigned long long clen = 0, mlen2 = 0;
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int func_ret = 0, ret_val = KAT_SUCCESS;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	init_buffer(key, sizeof(key));
 8002c3c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002c40:	f04f 0210 	mov.w	r2, #16
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	f000 f993 	bl	8002f74 <init_buffer>
	init_buffer(nonce, sizeof(nonce));
 8002c4e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002c52:	f04f 0210 	mov.w	r2, #16
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	f000 f98a 	bl	8002f74 <init_buffer>
	init_buffer(msg, sizeof(msg));
 8002c60:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002c64:	f04f 0220 	mov.w	r2, #32
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	f000 f981 	bl	8002f74 <init_buffer>
	init_buffer(ad, sizeof(ad));
 8002c72:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002c76:	f04f 0220 	mov.w	r2, #32
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	4608      	mov	r0, r1
 8002c80:	f000 f978 	bl	8002f74 <init_buffer>

	ticks_res_pos = 0;
 8002c84:	4b9c      	ldr	r3, [pc, #624]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]

	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8002c96:	e0c6      	b.n	8002e26 <aead_generate_test_vectors+0x216>
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8002ca4:	e0ac      	b.n	8002e00 <aead_generate_test_vectors+0x1f0>

			lwc_printf("msg_len:%4d ad_len:%4d  ", (int) mlen, (int) adlen);
 8002ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002caa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4892      	ldr	r0, [pc, #584]	; (8002efc <aead_generate_test_vectors+0x2ec>)
 8002cb2:	f000 f9d5 	bl	8003060 <lwc_printf>

			tick_msr_start();
 8002cb6:	f000 f997 	bl	8002fe8 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_encrypt(ct, &clen, msg, mlen, ad, adlen,	NULL, nonce, key);
 8002cba:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002cbe:	f107 0110 	add.w	r1, r7, #16
 8002cc2:	f107 001c 	add.w	r0, r7, #28
 8002cc6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002cca:	9308      	str	r3, [sp, #32]
 8002ccc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002cd0:	9307      	str	r3, [sp, #28]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9306      	str	r3, [sp, #24]
 8002cd6:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002cda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002ce8:	e9cd 2300 	strd	r2, r3, [sp]
 8002cec:	4622      	mov	r2, r4
 8002cee:	f7ff fb1e 	bl	800232e <crypto_aead_encrypt>
 8002cf2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
#else
			func_ret = 0;
#endif
			tick_msr_end();
 8002cf6:	f000 f991 	bl	800301c <tick_msr_end>

			lwc_printf("enc:%8lu us:%8lu ms:%8lu   ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 8002cfa:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <aead_generate_test_vectors+0x2f0>)
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	4b80      	ldr	r3, [pc, #512]	; (8002f00 <aead_generate_test_vectors+0x2f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	091a      	lsrs	r2, r3, #4
 8002d04:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <aead_generate_test_vectors+0x2f4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	487f      	ldr	r0, [pc, #508]	; (8002f08 <aead_generate_test_vectors+0x2f8>)
 8002d0a:	f000 f9a9 	bl	8003060 <lwc_printf>
			aead_enc_ticks_res[ticks_res_pos] = gb_tick_cnt;
 8002d0e:	4b7a      	ldr	r3, [pc, #488]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7b      	ldr	r2, [pc, #492]	; (8002f00 <aead_generate_test_vectors+0x2f0>)
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	497d      	ldr	r1, [pc, #500]	; (8002f0c <aead_generate_test_vectors+0x2fc>)
 8002d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if (func_ret != 0) {
 8002d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <aead_generate_test_vectors+0x11e>
				ret_val = KAT_CRYPTO_FAILURE;
 8002d24:	f06f 0303 	mvn.w	r3, #3
 8002d28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				break;
 8002d2c:	e06f      	b.n	8002e0e <aead_generate_test_vectors+0x1fe>
			}




			tick_msr_start();
 8002d2e:	f000 f95b 	bl	8002fe8 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
			func_ret = crypto_aead_decrypt(msg2, &mlen2, NULL, ct, clen, ad, adlen, nonce, key);
 8002d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d36:	f107 0e1c 	add.w	lr, r7, #28
 8002d3a:	f107 0c08 	add.w	ip, r7, #8
 8002d3e:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8002d42:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d46:	9307      	str	r3, [sp, #28]
 8002d48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d4c:	9306      	str	r3, [sp, #24]
 8002d4e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8002d60:	4673      	mov	r3, lr
 8002d62:	2200      	movs	r2, #0
 8002d64:	4661      	mov	r1, ip
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff fbad 	bl	80024c6 <crypto_aead_decrypt>
 8002d6c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
#else
			func_ret = 0;
#endif
			tick_msr_end();
 8002d70:	f000 f954 	bl	800301c <tick_msr_end>

			lwc_printf("dec:%8lu us:%8lu ms:%8lu ", gb_tick_cnt, gb_tick_cnt / 16, gb_ms_ticks);
 8002d74:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <aead_generate_test_vectors+0x2f0>)
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <aead_generate_test_vectors+0x2f0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	091a      	lsrs	r2, r3, #4
 8002d7e:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <aead_generate_test_vectors+0x2f4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4863      	ldr	r0, [pc, #396]	; (8002f10 <aead_generate_test_vectors+0x300>)
 8002d84:	f000 f96c 	bl	8003060 <lwc_printf>
			lwc_print_hex_str(ct, clen);
 8002d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f986 	bl	80030a4 <lwc_print_hex_str>
			lwc_printf("\n");
 8002d98:	485e      	ldr	r0, [pc, #376]	; (8002f14 <aead_generate_test_vectors+0x304>)
 8002d9a:	f000 f961 	bl	8003060 <lwc_printf>
			aead_dec_ticks_res[ticks_res_pos] = gb_tick_cnt;
 8002d9e:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <aead_generate_test_vectors+0x2f0>)
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	495c      	ldr	r1, [pc, #368]	; (8002f18 <aead_generate_test_vectors+0x308>)
 8002da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


#ifdef ENABLE_ALGO_TEST
			if ((func_ret != 0) || (mlen != mlen2)	|| (memcmp(msg, msg2, mlen) != 0)) {
 8002dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d113      	bne.n	8002ddc <aead_generate_test_vectors+0x1cc>
 8002db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	bf08      	it	eq
 8002dc0:	4290      	cmpeq	r0, r2
 8002dc2:	d10b      	bne.n	8002ddc <aead_generate_test_vectors+0x1cc>
 8002dc4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002dc8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002dcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fa19 	bl	8003208 <memcmp>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <aead_generate_test_vectors+0x1d6>
				ret_val = KAT_CRYPTO_FAILURE;
 8002ddc:	f06f 0303 	mvn.w	r3, #3
 8002de0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				break;
 8002de4:	e013      	b.n	8002e0e <aead_generate_test_vectors+0x1fe>
			}
#endif


			ticks_res_pos++;
 8002de6:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002dee:	6013      	str	r3, [r2, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8002df0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002df4:	f112 0508 	adds.w	r5, r2, #8
 8002df8:	f143 0600 	adc.w	r6, r3, #0
 8002dfc:	e9c7 5638 	strd	r5, r6, [r7, #224]	; 0xe0
 8002e00:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf08      	it	eq
 8002e08:	2a21      	cmpeq	r2, #33	; 0x21
 8002e0a:	f4ff af4c 	bcc.w	8002ca6 <aead_generate_test_vectors+0x96>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH) && (ret_val == KAT_SUCCESS); mlen += 8) {
 8002e0e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002e12:	f112 0108 	adds.w	r1, r2, #8
 8002e16:	6039      	str	r1, [r7, #0]
 8002e18:	f143 0300 	adc.w	r3, r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002e22:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8002e26:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf08      	it	eq
 8002e2e:	2a21      	cmpeq	r2, #33	; 0x21
 8002e30:	d204      	bcs.n	8002e3c <aead_generate_test_vectors+0x22c>
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f43f af2e 	beq.w	8002c98 <aead_generate_test_vectors+0x88>

		}//end of foe loop
	}//end of for loop

	if (ret_val != 0) {
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <aead_generate_test_vectors+0x23a>
		lwc_printf("Error occurred\n");
 8002e44:	4835      	ldr	r0, [pc, #212]	; (8002f1c <aead_generate_test_vectors+0x30c>)
 8002e46:	f000 f90b 	bl	8003060 <lwc_printf>
	}

	/* Now print Results in one single line for easier file processing*/
	ticks_res_pos = 0;
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
	aead_hash_print_res("AEAD");
 8002e50:	4833      	ldr	r0, [pc, #204]	; (8002f20 <aead_generate_test_vectors+0x310>)
 8002e52:	f000 f86d 	bl	8002f30 <aead_hash_print_res>
	lwc_printf("AEADTotRes: ");
 8002e56:	4833      	ldr	r0, [pc, #204]	; (8002f24 <aead_generate_test_vectors+0x314>)
 8002e58:	f000 f902 	bl	8003060 <lwc_printf>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
 8002e68:	e039      	b.n	8002ede <aead_generate_test_vectors+0x2ce>
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
 8002e76:	e024      	b.n	8002ec2 <aead_generate_test_vectors+0x2b2>
			lwc_printf("enc(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_enc_ticks_res[ticks_res_pos]);
 8002e78:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002e7c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4821      	ldr	r0, [pc, #132]	; (8002f0c <aead_generate_test_vectors+0x2fc>)
 8002e86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e8a:	4827      	ldr	r0, [pc, #156]	; (8002f28 <aead_generate_test_vectors+0x318>)
 8002e8c:	f000 f8e8 	bl	8003060 <lwc_printf>
			lwc_printf("dec(%d,%d) = %d ", (int)mlen, (int)adlen, (int)aead_dec_ticks_res[ticks_res_pos]);
 8002e90:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002e94:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	481e      	ldr	r0, [pc, #120]	; (8002f18 <aead_generate_test_vectors+0x308>)
 8002e9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ea2:	4822      	ldr	r0, [pc, #136]	; (8002f2c <aead_generate_test_vectors+0x31c>)
 8002ea4:	f000 f8dc 	bl	8003060 <lwc_printf>
			ticks_res_pos++;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <aead_generate_test_vectors+0x2e8>)
 8002eb0:	6013      	str	r3, [r2, #0]
		for (unsigned long long adlen = 0; adlen <= MAX_ASSOCIATED_DATA_LENGTH; adlen += 8) {
 8002eb2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002eb6:	f112 0808 	adds.w	r8, r2, #8
 8002eba:	f143 0900 	adc.w	r9, r3, #0
 8002ebe:	e9c7 8934 	strd	r8, r9, [r7, #208]	; 0xd0
 8002ec2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf08      	it	eq
 8002eca:	2a21      	cmpeq	r2, #33	; 0x21
 8002ecc:	d3d4      	bcc.n	8002e78 <aead_generate_test_vectors+0x268>
	for (unsigned long long mlen = 0; (mlen <= MAX_MESSAGE_LENGTH);	mlen += 8) {
 8002ece:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8002ed2:	f112 0a08 	adds.w	sl, r2, #8
 8002ed6:	f143 0b00 	adc.w	fp, r3, #0
 8002eda:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
 8002ede:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf08      	it	eq
 8002ee6:	2a21      	cmpeq	r2, #33	; 0x21
 8002ee8:	d3bf      	bcc.n	8002e6a <aead_generate_test_vectors+0x25a>
		}
	}

	return ret_val;
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	37fc      	adds	r7, #252	; 0xfc
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef8:	200003ac 	.word	0x200003ac
 8002efc:	08004664 	.word	0x08004664
 8002f00:	200000a4 	.word	0x200000a4
 8002f04:	200000a8 	.word	0x200000a8
 8002f08:	08004680 	.word	0x08004680
 8002f0c:	200000ac 	.word	0x200000ac
 8002f10:	0800469c 	.word	0x0800469c
 8002f14:	080046b8 	.word	0x080046b8
 8002f18:	200001ac 	.word	0x200001ac
 8002f1c:	080046bc 	.word	0x080046bc
 8002f20:	080046cc 	.word	0x080046cc
 8002f24:	080046d4 	.word	0x080046d4
 8002f28:	080046e4 	.word	0x080046e4
 8002f2c:	080046f8 	.word	0x080046f8

08002f30 <aead_hash_print_res>:
	return ret_val;
}

#endif

void aead_hash_print_res(char *algo_type){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <aead_hash_print_res+0x30>)
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <aead_hash_print_res+0x34>)
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	480a      	ldr	r0, [pc, #40]	; (8002f68 <aead_hash_print_res+0x38>)
 8002f40:	f000 f88e 	bl	8003060 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <aead_hash_print_res+0x3c>)
 8002f46:	6a19      	ldr	r1, [r3, #32]
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <aead_hash_print_res+0x3c>)
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <aead_hash_print_res+0x3c>)
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <aead_hash_print_res+0x40>)
 8002f52:	f000 f885 	bl	8003060 <lwc_printf>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	08004830 	.word	0x08004830
 8002f64:	080048b0 	.word	0x080048b0
 8002f68:	0800470c 	.word	0x0800470c
 8002f6c:	20000648 	.word	0x20000648
 8002f70:	08004748 	.word	0x08004748

08002f74 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8002f74:	b4b0      	push	{r4, r5, r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002f8c:	e00d      	b.n	8002faa <init_buffer+0x36>
		buffer[i] = (unsigned char) i + '0';
 8002f8e:	7c3a      	ldrb	r2, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	440b      	add	r3, r1
 8002f96:	3230      	adds	r2, #48	; 0x30
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8002f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fa0:	1c54      	adds	r4, r2, #1
 8002fa2:	f143 0500 	adc.w	r5, r3, #0
 8002fa6:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8002faa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb2:	4299      	cmp	r1, r3
 8002fb4:	bf08      	it	eq
 8002fb6:	4290      	cmpeq	r0, r2
 8002fb8:	d3e9      	bcc.n	8002f8e <init_buffer+0x1a>
	}
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bcb0      	pop	{r4, r5, r7}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	200003b0 	.word	0x200003b0

08002fe8 <tick_msr_start>:

void tick_msr_start(void) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <tick_msr_start+0x28>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <tick_msr_start+0x2c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8002ffa:	f7fd fbd9 	bl	80007b0 <HAL_GetTick>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a05      	ldr	r2, [pc, #20]	; (8003018 <tick_msr_start+0x30>)
 8003002:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <tick_msr_start+0x2c>)
 8003006:	f7fe facf 	bl	80015a8 <HAL_TIM_Base_Start_IT>
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200003b0 	.word	0x200003b0
 8003014:	200005fc 	.word	0x200005fc
 8003018:	200000a8 	.word	0x200000a8

0800301c <tick_msr_end>:

uint32_t tick_msr_end(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 8003020:	480b      	ldr	r0, [pc, #44]	; (8003050 <tick_msr_end+0x34>)
 8003022:	f7fe fb1b 	bl	800165c <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <tick_msr_end+0x38>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	041a      	lsls	r2, r3, #16
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <tick_msr_end+0x34>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	4313      	orrs	r3, r2
 8003034:	4a08      	ldr	r2, [pc, #32]	; (8003058 <tick_msr_end+0x3c>)
 8003036:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8003038:	f7fd fbba 	bl	80007b0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <tick_msr_end+0x40>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	4a05      	ldr	r2, [pc, #20]	; (800305c <tick_msr_end+0x40>)
 8003046:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <tick_msr_end+0x3c>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200005fc 	.word	0x200005fc
 8003054:	200003b0 	.word	0x200003b0
 8003058:	200000a4 	.word	0x200000a4
 800305c:	200000a8 	.word	0x200000a8

08003060 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003060:	b40f      	push	{r0, r1, r2, r3}
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6939      	ldr	r1, [r7, #16]
 8003072:	480a      	ldr	r0, [pc, #40]	; (800309c <lwc_printf+0x3c>)
 8003074:	f000 f9e4 	bl	8003440 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <lwc_printf+0x3c>)
 800307a:	f7fd f8c9 	bl	8000210 <strlen>
 800307e:	4603      	mov	r3, r0
 8003080:	b29a      	uxth	r2, r3
 8003082:	2364      	movs	r3, #100	; 0x64
 8003084:	4905      	ldr	r1, [pc, #20]	; (800309c <lwc_printf+0x3c>)
 8003086:	4806      	ldr	r0, [pc, #24]	; (80030a0 <lwc_printf+0x40>)
 8003088:	f7fe fd87 	bl	8001b9a <HAL_UART_Transmit>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003096:	b004      	add	sp, #16
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	200003b4 	.word	0x200003b4
 80030a0:	200005bc 	.word	0x200005bc

080030a4 <lwc_print_hex_str>:


void lwc_print_hex_str(const void *data, uint32_t len){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

	uint8_t *buf = (uint8_t *)data;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60bb      	str	r3, [r7, #8]

	for(uint32_t i = 0; i <len; i++){
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e00a      	b.n	80030ce <lwc_print_hex_str+0x2a>
		lwc_printf("%02X", buf[i]);
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4807      	ldr	r0, [pc, #28]	; (80030e0 <lwc_print_hex_str+0x3c>)
 80030c4:	f7ff ffcc 	bl	8003060 <lwc_printf>
	for(uint32_t i = 0; i <len; i++){
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d3f0      	bcc.n	80030b8 <lwc_print_hex_str+0x14>
	}

}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	08004770 	.word	0x08004770

080030e4 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 80030e8:	2234      	movs	r2, #52	; 0x34
 80030ea:	2100      	movs	r1, #0
 80030ec:	4822      	ldr	r0, [pc, #136]	; (8003178 <get_memory_usage+0x94>)
 80030ee:	f000 f8a7 	bl	8003240 <memset>

	mem_stat.flash_start_adr = 0x8000000;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <get_memory_usage+0x94>)
 80030f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f8:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <get_memory_usage+0x94>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <get_memory_usage+0x94>)
 8003100:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8003102:	4a1e      	ldr	r2, [pc, #120]	; (800317c <get_memory_usage+0x98>)
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <get_memory_usage+0x94>)
 8003106:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <get_memory_usage+0x9c>)
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <get_memory_usage+0x94>)
 800310c:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <get_memory_usage+0xa0>)
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <get_memory_usage+0x94>)
 8003112:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8003114:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <get_memory_usage+0xa4>)
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <get_memory_usage+0x94>)
 8003118:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <get_memory_usage+0xa8>)
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <get_memory_usage+0x94>)
 800311e:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <get_memory_usage+0xac>)
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <get_memory_usage+0x94>)
 8003124:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8003126:	4b14      	ldr	r3, [pc, #80]	; (8003178 <get_memory_usage+0x94>)
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <get_memory_usage+0x94>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	4a11      	ldr	r2, [pc, #68]	; (8003178 <get_memory_usage+0x94>)
 8003132:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <get_memory_usage+0x94>)
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <get_memory_usage+0x94>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <get_memory_usage+0x94>)
 8003140:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <get_memory_usage+0x94>)
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <get_memory_usage+0x94>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <get_memory_usage+0x94>)
 800314e:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <get_memory_usage+0x94>)
 8003152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <get_memory_usage+0x94>)
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	4413      	add	r3, r2
 800315a:	4a07      	ldr	r2, [pc, #28]	; (8003178 <get_memory_usage+0x94>)
 800315c:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <get_memory_usage+0x94>)
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <get_memory_usage+0x94>)
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	441a      	add	r2, r3
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <get_memory_usage+0x94>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a02      	ldr	r2, [pc, #8]	; (8003178 <get_memory_usage+0x94>)
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000648 	.word	0x20000648
 800317c:	08004568 	.word	0x08004568
 8003180:	20000080 	.word	0x20000080
 8003184:	2000068c 	.word	0x2000068c
 8003188:	20000000 	.word	0x20000000
 800318c:	20000080 	.word	0x20000080
 8003190:	080049d0 	.word	0x080049d0

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000001c 	.word	0x2000001c

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	2600      	movs	r6, #0
 80031a4:	4d0c      	ldr	r5, [pc, #48]	; (80031d8 <__libc_init_array+0x38>)
 80031a6:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	42a6      	cmp	r6, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	f001 f9ce 	bl	8004550 <_init>
 80031b4:	2600      	movs	r6, #0
 80031b6:	4d0a      	ldr	r5, [pc, #40]	; (80031e0 <__libc_init_array+0x40>)
 80031b8:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <__libc_init_array+0x44>)
 80031ba:	1b64      	subs	r4, r4, r5
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c8:	4798      	blx	r3
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d2:	4798      	blx	r3
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	080049c8 	.word	0x080049c8
 80031dc:	080049c8 	.word	0x080049c8
 80031e0:	080049c8 	.word	0x080049c8
 80031e4:	080049cc 	.word	0x080049cc

080031e8 <malloc>:
 80031e8:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <malloc+0xc>)
 80031ea:	4601      	mov	r1, r0
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	f000 b87b 	b.w	80032e8 <_malloc_r>
 80031f2:	bf00      	nop
 80031f4:	2000001c 	.word	0x2000001c

080031f8 <free>:
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <free+0xc>)
 80031fa:	4601      	mov	r1, r0
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	f000 b827 	b.w	8003250 <_free_r>
 8003202:	bf00      	nop
 8003204:	2000001c 	.word	0x2000001c

08003208 <memcmp>:
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	2400      	movs	r4, #0
 800320c:	3901      	subs	r1, #1
 800320e:	42a2      	cmp	r2, r4
 8003210:	d101      	bne.n	8003216 <memcmp+0xe>
 8003212:	2000      	movs	r0, #0
 8003214:	e005      	b.n	8003222 <memcmp+0x1a>
 8003216:	5d03      	ldrb	r3, [r0, r4]
 8003218:	3401      	adds	r4, #1
 800321a:	5d0d      	ldrb	r5, [r1, r4]
 800321c:	42ab      	cmp	r3, r5
 800321e:	d0f6      	beq.n	800320e <memcmp+0x6>
 8003220:	1b58      	subs	r0, r3, r5
 8003222:	bd30      	pop	{r4, r5, pc}

08003224 <memcpy>:
 8003224:	440a      	add	r2, r1
 8003226:	4291      	cmp	r1, r2
 8003228:	f100 33ff 	add.w	r3, r0, #4294967295
 800322c:	d100      	bne.n	8003230 <memcpy+0xc>
 800322e:	4770      	bx	lr
 8003230:	b510      	push	{r4, lr}
 8003232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003236:	4291      	cmp	r1, r2
 8003238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800323c:	d1f9      	bne.n	8003232 <memcpy+0xe>
 800323e:	bd10      	pop	{r4, pc}

08003240 <memset>:
 8003240:	4603      	mov	r3, r0
 8003242:	4402      	add	r2, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <_free_r>:
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	4605      	mov	r5, r0
 8003254:	2900      	cmp	r1, #0
 8003256:	d043      	beq.n	80032e0 <_free_r+0x90>
 8003258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800325c:	1f0c      	subs	r4, r1, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfb8      	it	lt
 8003262:	18e4      	addlt	r4, r4, r3
 8003264:	f000 f9ee 	bl	8003644 <__malloc_lock>
 8003268:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <_free_r+0x94>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	4610      	mov	r0, r2
 800326e:	b933      	cbnz	r3, 800327e <_free_r+0x2e>
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	6014      	str	r4, [r2, #0]
 8003274:	4628      	mov	r0, r5
 8003276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800327a:	f000 b9e9 	b.w	8003650 <__malloc_unlock>
 800327e:	42a3      	cmp	r3, r4
 8003280:	d90a      	bls.n	8003298 <_free_r+0x48>
 8003282:	6821      	ldr	r1, [r4, #0]
 8003284:	1862      	adds	r2, r4, r1
 8003286:	4293      	cmp	r3, r2
 8003288:	bf01      	itttt	eq
 800328a:	681a      	ldreq	r2, [r3, #0]
 800328c:	685b      	ldreq	r3, [r3, #4]
 800328e:	1852      	addeq	r2, r2, r1
 8003290:	6022      	streq	r2, [r4, #0]
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	6004      	str	r4, [r0, #0]
 8003296:	e7ed      	b.n	8003274 <_free_r+0x24>
 8003298:	461a      	mov	r2, r3
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	b10b      	cbz	r3, 80032a2 <_free_r+0x52>
 800329e:	42a3      	cmp	r3, r4
 80032a0:	d9fa      	bls.n	8003298 <_free_r+0x48>
 80032a2:	6811      	ldr	r1, [r2, #0]
 80032a4:	1850      	adds	r0, r2, r1
 80032a6:	42a0      	cmp	r0, r4
 80032a8:	d10b      	bne.n	80032c2 <_free_r+0x72>
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	4401      	add	r1, r0
 80032ae:	1850      	adds	r0, r2, r1
 80032b0:	4283      	cmp	r3, r0
 80032b2:	6011      	str	r1, [r2, #0]
 80032b4:	d1de      	bne.n	8003274 <_free_r+0x24>
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4401      	add	r1, r0
 80032bc:	6011      	str	r1, [r2, #0]
 80032be:	6053      	str	r3, [r2, #4]
 80032c0:	e7d8      	b.n	8003274 <_free_r+0x24>
 80032c2:	d902      	bls.n	80032ca <_free_r+0x7a>
 80032c4:	230c      	movs	r3, #12
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	e7d4      	b.n	8003274 <_free_r+0x24>
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	1821      	adds	r1, r4, r0
 80032ce:	428b      	cmp	r3, r1
 80032d0:	bf01      	itttt	eq
 80032d2:	6819      	ldreq	r1, [r3, #0]
 80032d4:	685b      	ldreq	r3, [r3, #4]
 80032d6:	1809      	addeq	r1, r1, r0
 80032d8:	6021      	streq	r1, [r4, #0]
 80032da:	6063      	str	r3, [r4, #4]
 80032dc:	6054      	str	r4, [r2, #4]
 80032de:	e7c9      	b.n	8003274 <_free_r+0x24>
 80032e0:	bd38      	pop	{r3, r4, r5, pc}
 80032e2:	bf00      	nop
 80032e4:	200005b4 	.word	0x200005b4

080032e8 <_malloc_r>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	1ccd      	adds	r5, r1, #3
 80032ec:	f025 0503 	bic.w	r5, r5, #3
 80032f0:	3508      	adds	r5, #8
 80032f2:	2d0c      	cmp	r5, #12
 80032f4:	bf38      	it	cc
 80032f6:	250c      	movcc	r5, #12
 80032f8:	2d00      	cmp	r5, #0
 80032fa:	4606      	mov	r6, r0
 80032fc:	db01      	blt.n	8003302 <_malloc_r+0x1a>
 80032fe:	42a9      	cmp	r1, r5
 8003300:	d903      	bls.n	800330a <_malloc_r+0x22>
 8003302:	230c      	movs	r3, #12
 8003304:	6033      	str	r3, [r6, #0]
 8003306:	2000      	movs	r0, #0
 8003308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330a:	f000 f99b 	bl	8003644 <__malloc_lock>
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <_malloc_r+0xac>)
 8003310:	680a      	ldr	r2, [r1, #0]
 8003312:	4614      	mov	r4, r2
 8003314:	b99c      	cbnz	r4, 800333e <_malloc_r+0x56>
 8003316:	4f20      	ldr	r7, [pc, #128]	; (8003398 <_malloc_r+0xb0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b923      	cbnz	r3, 8003326 <_malloc_r+0x3e>
 800331c:	4621      	mov	r1, r4
 800331e:	4630      	mov	r0, r6
 8003320:	f000 f868 	bl	80033f4 <_sbrk_r>
 8003324:	6038      	str	r0, [r7, #0]
 8003326:	4629      	mov	r1, r5
 8003328:	4630      	mov	r0, r6
 800332a:	f000 f863 	bl	80033f4 <_sbrk_r>
 800332e:	1c43      	adds	r3, r0, #1
 8003330:	d123      	bne.n	800337a <_malloc_r+0x92>
 8003332:	230c      	movs	r3, #12
 8003334:	4630      	mov	r0, r6
 8003336:	6033      	str	r3, [r6, #0]
 8003338:	f000 f98a 	bl	8003650 <__malloc_unlock>
 800333c:	e7e3      	b.n	8003306 <_malloc_r+0x1e>
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	1b5b      	subs	r3, r3, r5
 8003342:	d417      	bmi.n	8003374 <_malloc_r+0x8c>
 8003344:	2b0b      	cmp	r3, #11
 8003346:	d903      	bls.n	8003350 <_malloc_r+0x68>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	441c      	add	r4, r3
 800334c:	6025      	str	r5, [r4, #0]
 800334e:	e004      	b.n	800335a <_malloc_r+0x72>
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	42a2      	cmp	r2, r4
 8003354:	bf0c      	ite	eq
 8003356:	600b      	streq	r3, [r1, #0]
 8003358:	6053      	strne	r3, [r2, #4]
 800335a:	4630      	mov	r0, r6
 800335c:	f000 f978 	bl	8003650 <__malloc_unlock>
 8003360:	f104 000b 	add.w	r0, r4, #11
 8003364:	1d23      	adds	r3, r4, #4
 8003366:	f020 0007 	bic.w	r0, r0, #7
 800336a:	1ac2      	subs	r2, r0, r3
 800336c:	d0cc      	beq.n	8003308 <_malloc_r+0x20>
 800336e:	1a1b      	subs	r3, r3, r0
 8003370:	50a3      	str	r3, [r4, r2]
 8003372:	e7c9      	b.n	8003308 <_malloc_r+0x20>
 8003374:	4622      	mov	r2, r4
 8003376:	6864      	ldr	r4, [r4, #4]
 8003378:	e7cc      	b.n	8003314 <_malloc_r+0x2c>
 800337a:	1cc4      	adds	r4, r0, #3
 800337c:	f024 0403 	bic.w	r4, r4, #3
 8003380:	42a0      	cmp	r0, r4
 8003382:	d0e3      	beq.n	800334c <_malloc_r+0x64>
 8003384:	1a21      	subs	r1, r4, r0
 8003386:	4630      	mov	r0, r6
 8003388:	f000 f834 	bl	80033f4 <_sbrk_r>
 800338c:	3001      	adds	r0, #1
 800338e:	d1dd      	bne.n	800334c <_malloc_r+0x64>
 8003390:	e7cf      	b.n	8003332 <_malloc_r+0x4a>
 8003392:	bf00      	nop
 8003394:	200005b4 	.word	0x200005b4
 8003398:	200005b8 	.word	0x200005b8

0800339c <iprintf>:
 800339c:	b40f      	push	{r0, r1, r2, r3}
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <iprintf+0x2c>)
 80033a0:	b513      	push	{r0, r1, r4, lr}
 80033a2:	681c      	ldr	r4, [r3, #0]
 80033a4:	b124      	cbz	r4, 80033b0 <iprintf+0x14>
 80033a6:	69a3      	ldr	r3, [r4, #24]
 80033a8:	b913      	cbnz	r3, 80033b0 <iprintf+0x14>
 80033aa:	4620      	mov	r0, r4
 80033ac:	f000 f8aa 	bl	8003504 <__sinit>
 80033b0:	ab05      	add	r3, sp, #20
 80033b2:	4620      	mov	r0, r4
 80033b4:	9a04      	ldr	r2, [sp, #16]
 80033b6:	68a1      	ldr	r1, [r4, #8]
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	f000 fad3 	bl	8003964 <_vfiprintf_r>
 80033be:	b002      	add	sp, #8
 80033c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c4:	b004      	add	sp, #16
 80033c6:	4770      	bx	lr
 80033c8:	2000001c 	.word	0x2000001c

080033cc <putchar>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <putchar+0x24>)
 80033d0:	4605      	mov	r5, r0
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	b124      	cbz	r4, 80033e0 <putchar+0x14>
 80033d6:	69a3      	ldr	r3, [r4, #24]
 80033d8:	b913      	cbnz	r3, 80033e0 <putchar+0x14>
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 f892 	bl	8003504 <__sinit>
 80033e0:	4629      	mov	r1, r5
 80033e2:	4620      	mov	r0, r4
 80033e4:	68a2      	ldr	r2, [r4, #8]
 80033e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ea:	f000 bd81 	b.w	8003ef0 <_putc_r>
 80033ee:	bf00      	nop
 80033f0:	2000001c 	.word	0x2000001c

080033f4 <_sbrk_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	2300      	movs	r3, #0
 80033f8:	4d05      	ldr	r5, [pc, #20]	; (8003410 <_sbrk_r+0x1c>)
 80033fa:	4604      	mov	r4, r0
 80033fc:	4608      	mov	r0, r1
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	f7fd f926 	bl	8000650 <_sbrk>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d102      	bne.n	800340e <_sbrk_r+0x1a>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	b103      	cbz	r3, 800340e <_sbrk_r+0x1a>
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	bd38      	pop	{r3, r4, r5, pc}
 8003410:	20000688 	.word	0x20000688

08003414 <_vsiprintf_r>:
 8003414:	b500      	push	{lr}
 8003416:	b09b      	sub	sp, #108	; 0x6c
 8003418:	9100      	str	r1, [sp, #0]
 800341a:	9104      	str	r1, [sp, #16]
 800341c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	9102      	str	r1, [sp, #8]
 8003424:	4905      	ldr	r1, [pc, #20]	; (800343c <_vsiprintf_r+0x28>)
 8003426:	9103      	str	r1, [sp, #12]
 8003428:	4669      	mov	r1, sp
 800342a:	f000 f973 	bl	8003714 <_svfiprintf_r>
 800342e:	2200      	movs	r2, #0
 8003430:	9b00      	ldr	r3, [sp, #0]
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	b01b      	add	sp, #108	; 0x6c
 8003436:	f85d fb04 	ldr.w	pc, [sp], #4
 800343a:	bf00      	nop
 800343c:	ffff0208 	.word	0xffff0208

08003440 <vsiprintf>:
 8003440:	4613      	mov	r3, r2
 8003442:	460a      	mov	r2, r1
 8003444:	4601      	mov	r1, r0
 8003446:	4802      	ldr	r0, [pc, #8]	; (8003450 <vsiprintf+0x10>)
 8003448:	6800      	ldr	r0, [r0, #0]
 800344a:	f7ff bfe3 	b.w	8003414 <_vsiprintf_r>
 800344e:	bf00      	nop
 8003450:	2000001c 	.word	0x2000001c

08003454 <std>:
 8003454:	2300      	movs	r3, #0
 8003456:	b510      	push	{r4, lr}
 8003458:	4604      	mov	r4, r0
 800345a:	e9c0 3300 	strd	r3, r3, [r0]
 800345e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003462:	6083      	str	r3, [r0, #8]
 8003464:	8181      	strh	r1, [r0, #12]
 8003466:	6643      	str	r3, [r0, #100]	; 0x64
 8003468:	81c2      	strh	r2, [r0, #14]
 800346a:	6183      	str	r3, [r0, #24]
 800346c:	4619      	mov	r1, r3
 800346e:	2208      	movs	r2, #8
 8003470:	305c      	adds	r0, #92	; 0x5c
 8003472:	f7ff fee5 	bl	8003240 <memset>
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <std+0x38>)
 8003478:	6224      	str	r4, [r4, #32]
 800347a:	6263      	str	r3, [r4, #36]	; 0x24
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <std+0x3c>)
 800347e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <std+0x40>)
 8003482:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <std+0x44>)
 8003486:	6323      	str	r3, [r4, #48]	; 0x30
 8003488:	bd10      	pop	{r4, pc}
 800348a:	bf00      	nop
 800348c:	08003f81 	.word	0x08003f81
 8003490:	08003fa3 	.word	0x08003fa3
 8003494:	08003fdb 	.word	0x08003fdb
 8003498:	08003fff 	.word	0x08003fff

0800349c <_cleanup_r>:
 800349c:	4901      	ldr	r1, [pc, #4]	; (80034a4 <_cleanup_r+0x8>)
 800349e:	f000 b8af 	b.w	8003600 <_fwalk_reent>
 80034a2:	bf00      	nop
 80034a4:	080042d9 	.word	0x080042d9

080034a8 <__sfmoreglue>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	2568      	movs	r5, #104	; 0x68
 80034ac:	1e4a      	subs	r2, r1, #1
 80034ae:	4355      	muls	r5, r2
 80034b0:	460e      	mov	r6, r1
 80034b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034b6:	f7ff ff17 	bl	80032e8 <_malloc_r>
 80034ba:	4604      	mov	r4, r0
 80034bc:	b140      	cbz	r0, 80034d0 <__sfmoreglue+0x28>
 80034be:	2100      	movs	r1, #0
 80034c0:	e9c0 1600 	strd	r1, r6, [r0]
 80034c4:	300c      	adds	r0, #12
 80034c6:	60a0      	str	r0, [r4, #8]
 80034c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034cc:	f7ff feb8 	bl	8003240 <memset>
 80034d0:	4620      	mov	r0, r4
 80034d2:	bd70      	pop	{r4, r5, r6, pc}

080034d4 <__sfp_lock_acquire>:
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <__sfp_lock_acquire+0x8>)
 80034d6:	f000 b8b3 	b.w	8003640 <__retarget_lock_acquire_recursive>
 80034da:	bf00      	nop
 80034dc:	20000684 	.word	0x20000684

080034e0 <__sfp_lock_release>:
 80034e0:	4801      	ldr	r0, [pc, #4]	; (80034e8 <__sfp_lock_release+0x8>)
 80034e2:	f000 b8ae 	b.w	8003642 <__retarget_lock_release_recursive>
 80034e6:	bf00      	nop
 80034e8:	20000684 	.word	0x20000684

080034ec <__sinit_lock_acquire>:
 80034ec:	4801      	ldr	r0, [pc, #4]	; (80034f4 <__sinit_lock_acquire+0x8>)
 80034ee:	f000 b8a7 	b.w	8003640 <__retarget_lock_acquire_recursive>
 80034f2:	bf00      	nop
 80034f4:	2000067f 	.word	0x2000067f

080034f8 <__sinit_lock_release>:
 80034f8:	4801      	ldr	r0, [pc, #4]	; (8003500 <__sinit_lock_release+0x8>)
 80034fa:	f000 b8a2 	b.w	8003642 <__retarget_lock_release_recursive>
 80034fe:	bf00      	nop
 8003500:	2000067f 	.word	0x2000067f

08003504 <__sinit>:
 8003504:	b510      	push	{r4, lr}
 8003506:	4604      	mov	r4, r0
 8003508:	f7ff fff0 	bl	80034ec <__sinit_lock_acquire>
 800350c:	69a3      	ldr	r3, [r4, #24]
 800350e:	b11b      	cbz	r3, 8003518 <__sinit+0x14>
 8003510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003514:	f7ff bff0 	b.w	80034f8 <__sinit_lock_release>
 8003518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800351c:	6523      	str	r3, [r4, #80]	; 0x50
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <__sinit+0x68>)
 8003520:	4a13      	ldr	r2, [pc, #76]	; (8003570 <__sinit+0x6c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	62a2      	str	r2, [r4, #40]	; 0x28
 8003526:	42a3      	cmp	r3, r4
 8003528:	bf08      	it	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	4620      	mov	r0, r4
 800352e:	bf08      	it	eq
 8003530:	61a3      	streq	r3, [r4, #24]
 8003532:	f000 f81f 	bl	8003574 <__sfp>
 8003536:	6060      	str	r0, [r4, #4]
 8003538:	4620      	mov	r0, r4
 800353a:	f000 f81b 	bl	8003574 <__sfp>
 800353e:	60a0      	str	r0, [r4, #8]
 8003540:	4620      	mov	r0, r4
 8003542:	f000 f817 	bl	8003574 <__sfp>
 8003546:	2200      	movs	r2, #0
 8003548:	2104      	movs	r1, #4
 800354a:	60e0      	str	r0, [r4, #12]
 800354c:	6860      	ldr	r0, [r4, #4]
 800354e:	f7ff ff81 	bl	8003454 <std>
 8003552:	2201      	movs	r2, #1
 8003554:	2109      	movs	r1, #9
 8003556:	68a0      	ldr	r0, [r4, #8]
 8003558:	f7ff ff7c 	bl	8003454 <std>
 800355c:	2202      	movs	r2, #2
 800355e:	2112      	movs	r1, #18
 8003560:	68e0      	ldr	r0, [r4, #12]
 8003562:	f7ff ff77 	bl	8003454 <std>
 8003566:	2301      	movs	r3, #1
 8003568:	61a3      	str	r3, [r4, #24]
 800356a:	e7d1      	b.n	8003510 <__sinit+0xc>
 800356c:	08004930 	.word	0x08004930
 8003570:	0800349d 	.word	0x0800349d

08003574 <__sfp>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	4607      	mov	r7, r0
 8003578:	f7ff ffac 	bl	80034d4 <__sfp_lock_acquire>
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <__sfp+0x84>)
 800357e:	681e      	ldr	r6, [r3, #0]
 8003580:	69b3      	ldr	r3, [r6, #24]
 8003582:	b913      	cbnz	r3, 800358a <__sfp+0x16>
 8003584:	4630      	mov	r0, r6
 8003586:	f7ff ffbd 	bl	8003504 <__sinit>
 800358a:	3648      	adds	r6, #72	; 0x48
 800358c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003590:	3b01      	subs	r3, #1
 8003592:	d503      	bpl.n	800359c <__sfp+0x28>
 8003594:	6833      	ldr	r3, [r6, #0]
 8003596:	b30b      	cbz	r3, 80035dc <__sfp+0x68>
 8003598:	6836      	ldr	r6, [r6, #0]
 800359a:	e7f7      	b.n	800358c <__sfp+0x18>
 800359c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035a0:	b9d5      	cbnz	r5, 80035d8 <__sfp+0x64>
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <__sfp+0x88>)
 80035a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035a8:	60e3      	str	r3, [r4, #12]
 80035aa:	6665      	str	r5, [r4, #100]	; 0x64
 80035ac:	f000 f847 	bl	800363e <__retarget_lock_init_recursive>
 80035b0:	f7ff ff96 	bl	80034e0 <__sfp_lock_release>
 80035b4:	2208      	movs	r2, #8
 80035b6:	4629      	mov	r1, r5
 80035b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	61a5      	str	r5, [r4, #24]
 80035c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035c8:	f7ff fe3a 	bl	8003240 <memset>
 80035cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035d4:	4620      	mov	r0, r4
 80035d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d8:	3468      	adds	r4, #104	; 0x68
 80035da:	e7d9      	b.n	8003590 <__sfp+0x1c>
 80035dc:	2104      	movs	r1, #4
 80035de:	4638      	mov	r0, r7
 80035e0:	f7ff ff62 	bl	80034a8 <__sfmoreglue>
 80035e4:	4604      	mov	r4, r0
 80035e6:	6030      	str	r0, [r6, #0]
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d1d5      	bne.n	8003598 <__sfp+0x24>
 80035ec:	f7ff ff78 	bl	80034e0 <__sfp_lock_release>
 80035f0:	230c      	movs	r3, #12
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	e7ee      	b.n	80035d4 <__sfp+0x60>
 80035f6:	bf00      	nop
 80035f8:	08004930 	.word	0x08004930
 80035fc:	ffff0001 	.word	0xffff0001

08003600 <_fwalk_reent>:
 8003600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003604:	4606      	mov	r6, r0
 8003606:	4688      	mov	r8, r1
 8003608:	2700      	movs	r7, #0
 800360a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800360e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003612:	f1b9 0901 	subs.w	r9, r9, #1
 8003616:	d505      	bpl.n	8003624 <_fwalk_reent+0x24>
 8003618:	6824      	ldr	r4, [r4, #0]
 800361a:	2c00      	cmp	r4, #0
 800361c:	d1f7      	bne.n	800360e <_fwalk_reent+0xe>
 800361e:	4638      	mov	r0, r7
 8003620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003624:	89ab      	ldrh	r3, [r5, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d907      	bls.n	800363a <_fwalk_reent+0x3a>
 800362a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800362e:	3301      	adds	r3, #1
 8003630:	d003      	beq.n	800363a <_fwalk_reent+0x3a>
 8003632:	4629      	mov	r1, r5
 8003634:	4630      	mov	r0, r6
 8003636:	47c0      	blx	r8
 8003638:	4307      	orrs	r7, r0
 800363a:	3568      	adds	r5, #104	; 0x68
 800363c:	e7e9      	b.n	8003612 <_fwalk_reent+0x12>

0800363e <__retarget_lock_init_recursive>:
 800363e:	4770      	bx	lr

08003640 <__retarget_lock_acquire_recursive>:
 8003640:	4770      	bx	lr

08003642 <__retarget_lock_release_recursive>:
 8003642:	4770      	bx	lr

08003644 <__malloc_lock>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__malloc_lock+0x8>)
 8003646:	f7ff bffb 	b.w	8003640 <__retarget_lock_acquire_recursive>
 800364a:	bf00      	nop
 800364c:	20000680 	.word	0x20000680

08003650 <__malloc_unlock>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__malloc_unlock+0x8>)
 8003652:	f7ff bff6 	b.w	8003642 <__retarget_lock_release_recursive>
 8003656:	bf00      	nop
 8003658:	20000680 	.word	0x20000680

0800365c <__ssputs_r>:
 800365c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003660:	688e      	ldr	r6, [r1, #8]
 8003662:	4682      	mov	sl, r0
 8003664:	429e      	cmp	r6, r3
 8003666:	460c      	mov	r4, r1
 8003668:	4690      	mov	r8, r2
 800366a:	461f      	mov	r7, r3
 800366c:	d838      	bhi.n	80036e0 <__ssputs_r+0x84>
 800366e:	898a      	ldrh	r2, [r1, #12]
 8003670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003674:	d032      	beq.n	80036dc <__ssputs_r+0x80>
 8003676:	6825      	ldr	r5, [r4, #0]
 8003678:	6909      	ldr	r1, [r1, #16]
 800367a:	3301      	adds	r3, #1
 800367c:	eba5 0901 	sub.w	r9, r5, r1
 8003680:	6965      	ldr	r5, [r4, #20]
 8003682:	444b      	add	r3, r9
 8003684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800368c:	106d      	asrs	r5, r5, #1
 800368e:	429d      	cmp	r5, r3
 8003690:	bf38      	it	cc
 8003692:	461d      	movcc	r5, r3
 8003694:	0553      	lsls	r3, r2, #21
 8003696:	d531      	bpl.n	80036fc <__ssputs_r+0xa0>
 8003698:	4629      	mov	r1, r5
 800369a:	f7ff fe25 	bl	80032e8 <_malloc_r>
 800369e:	4606      	mov	r6, r0
 80036a0:	b950      	cbnz	r0, 80036b8 <__ssputs_r+0x5c>
 80036a2:	230c      	movs	r3, #12
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f8ca 3000 	str.w	r3, [sl]
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b8:	464a      	mov	r2, r9
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	f7ff fdb2 	bl	8003224 <memcpy>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	81a3      	strh	r3, [r4, #12]
 80036cc:	6126      	str	r6, [r4, #16]
 80036ce:	444e      	add	r6, r9
 80036d0:	6026      	str	r6, [r4, #0]
 80036d2:	463e      	mov	r6, r7
 80036d4:	6165      	str	r5, [r4, #20]
 80036d6:	eba5 0509 	sub.w	r5, r5, r9
 80036da:	60a5      	str	r5, [r4, #8]
 80036dc:	42be      	cmp	r6, r7
 80036de:	d900      	bls.n	80036e2 <__ssputs_r+0x86>
 80036e0:	463e      	mov	r6, r7
 80036e2:	4632      	mov	r2, r6
 80036e4:	4641      	mov	r1, r8
 80036e6:	6820      	ldr	r0, [r4, #0]
 80036e8:	f000 feb6 	bl	8004458 <memmove>
 80036ec:	68a3      	ldr	r3, [r4, #8]
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	1b9b      	subs	r3, r3, r6
 80036f2:	4432      	add	r2, r6
 80036f4:	2000      	movs	r0, #0
 80036f6:	60a3      	str	r3, [r4, #8]
 80036f8:	6022      	str	r2, [r4, #0]
 80036fa:	e7db      	b.n	80036b4 <__ssputs_r+0x58>
 80036fc:	462a      	mov	r2, r5
 80036fe:	f000 fec5 	bl	800448c <_realloc_r>
 8003702:	4606      	mov	r6, r0
 8003704:	2800      	cmp	r0, #0
 8003706:	d1e1      	bne.n	80036cc <__ssputs_r+0x70>
 8003708:	4650      	mov	r0, sl
 800370a:	6921      	ldr	r1, [r4, #16]
 800370c:	f7ff fda0 	bl	8003250 <_free_r>
 8003710:	e7c7      	b.n	80036a2 <__ssputs_r+0x46>
	...

08003714 <_svfiprintf_r>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	4698      	mov	r8, r3
 800371a:	898b      	ldrh	r3, [r1, #12]
 800371c:	4607      	mov	r7, r0
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	460d      	mov	r5, r1
 8003722:	4614      	mov	r4, r2
 8003724:	b09d      	sub	sp, #116	; 0x74
 8003726:	d50e      	bpl.n	8003746 <_svfiprintf_r+0x32>
 8003728:	690b      	ldr	r3, [r1, #16]
 800372a:	b963      	cbnz	r3, 8003746 <_svfiprintf_r+0x32>
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	f7ff fddb 	bl	80032e8 <_malloc_r>
 8003732:	6028      	str	r0, [r5, #0]
 8003734:	6128      	str	r0, [r5, #16]
 8003736:	b920      	cbnz	r0, 8003742 <_svfiprintf_r+0x2e>
 8003738:	230c      	movs	r3, #12
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	e0d1      	b.n	80038e6 <_svfiprintf_r+0x1d2>
 8003742:	2340      	movs	r3, #64	; 0x40
 8003744:	616b      	str	r3, [r5, #20]
 8003746:	2300      	movs	r3, #0
 8003748:	9309      	str	r3, [sp, #36]	; 0x24
 800374a:	2320      	movs	r3, #32
 800374c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003750:	2330      	movs	r3, #48	; 0x30
 8003752:	f04f 0901 	mov.w	r9, #1
 8003756:	f8cd 800c 	str.w	r8, [sp, #12]
 800375a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003900 <_svfiprintf_r+0x1ec>
 800375e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003762:	4623      	mov	r3, r4
 8003764:	469a      	mov	sl, r3
 8003766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800376a:	b10a      	cbz	r2, 8003770 <_svfiprintf_r+0x5c>
 800376c:	2a25      	cmp	r2, #37	; 0x25
 800376e:	d1f9      	bne.n	8003764 <_svfiprintf_r+0x50>
 8003770:	ebba 0b04 	subs.w	fp, sl, r4
 8003774:	d00b      	beq.n	800378e <_svfiprintf_r+0x7a>
 8003776:	465b      	mov	r3, fp
 8003778:	4622      	mov	r2, r4
 800377a:	4629      	mov	r1, r5
 800377c:	4638      	mov	r0, r7
 800377e:	f7ff ff6d 	bl	800365c <__ssputs_r>
 8003782:	3001      	adds	r0, #1
 8003784:	f000 80aa 	beq.w	80038dc <_svfiprintf_r+0x1c8>
 8003788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800378a:	445a      	add	r2, fp
 800378c:	9209      	str	r2, [sp, #36]	; 0x24
 800378e:	f89a 3000 	ldrb.w	r3, [sl]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80a2 	beq.w	80038dc <_svfiprintf_r+0x1c8>
 8003798:	2300      	movs	r3, #0
 800379a:	f04f 32ff 	mov.w	r2, #4294967295
 800379e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037a2:	f10a 0a01 	add.w	sl, sl, #1
 80037a6:	9304      	str	r3, [sp, #16]
 80037a8:	9307      	str	r3, [sp, #28]
 80037aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ae:	931a      	str	r3, [sp, #104]	; 0x68
 80037b0:	4654      	mov	r4, sl
 80037b2:	2205      	movs	r2, #5
 80037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b8:	4851      	ldr	r0, [pc, #324]	; (8003900 <_svfiprintf_r+0x1ec>)
 80037ba:	f000 fe3f 	bl	800443c <memchr>
 80037be:	9a04      	ldr	r2, [sp, #16]
 80037c0:	b9d8      	cbnz	r0, 80037fa <_svfiprintf_r+0xe6>
 80037c2:	06d0      	lsls	r0, r2, #27
 80037c4:	bf44      	itt	mi
 80037c6:	2320      	movmi	r3, #32
 80037c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037cc:	0711      	lsls	r1, r2, #28
 80037ce:	bf44      	itt	mi
 80037d0:	232b      	movmi	r3, #43	; 0x2b
 80037d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d6:	f89a 3000 	ldrb.w	r3, [sl]
 80037da:	2b2a      	cmp	r3, #42	; 0x2a
 80037dc:	d015      	beq.n	800380a <_svfiprintf_r+0xf6>
 80037de:	4654      	mov	r4, sl
 80037e0:	2000      	movs	r0, #0
 80037e2:	f04f 0c0a 	mov.w	ip, #10
 80037e6:	9a07      	ldr	r2, [sp, #28]
 80037e8:	4621      	mov	r1, r4
 80037ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ee:	3b30      	subs	r3, #48	; 0x30
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d94e      	bls.n	8003892 <_svfiprintf_r+0x17e>
 80037f4:	b1b0      	cbz	r0, 8003824 <_svfiprintf_r+0x110>
 80037f6:	9207      	str	r2, [sp, #28]
 80037f8:	e014      	b.n	8003824 <_svfiprintf_r+0x110>
 80037fa:	eba0 0308 	sub.w	r3, r0, r8
 80037fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003802:	4313      	orrs	r3, r2
 8003804:	46a2      	mov	sl, r4
 8003806:	9304      	str	r3, [sp, #16]
 8003808:	e7d2      	b.n	80037b0 <_svfiprintf_r+0x9c>
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	1d19      	adds	r1, r3, #4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	9103      	str	r1, [sp, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	bfbb      	ittet	lt
 8003816:	425b      	neglt	r3, r3
 8003818:	f042 0202 	orrlt.w	r2, r2, #2
 800381c:	9307      	strge	r3, [sp, #28]
 800381e:	9307      	strlt	r3, [sp, #28]
 8003820:	bfb8      	it	lt
 8003822:	9204      	strlt	r2, [sp, #16]
 8003824:	7823      	ldrb	r3, [r4, #0]
 8003826:	2b2e      	cmp	r3, #46	; 0x2e
 8003828:	d10c      	bne.n	8003844 <_svfiprintf_r+0x130>
 800382a:	7863      	ldrb	r3, [r4, #1]
 800382c:	2b2a      	cmp	r3, #42	; 0x2a
 800382e:	d135      	bne.n	800389c <_svfiprintf_r+0x188>
 8003830:	9b03      	ldr	r3, [sp, #12]
 8003832:	3402      	adds	r4, #2
 8003834:	1d1a      	adds	r2, r3, #4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	9203      	str	r2, [sp, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	bfb8      	it	lt
 800383e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003842:	9305      	str	r3, [sp, #20]
 8003844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003910 <_svfiprintf_r+0x1fc>
 8003848:	2203      	movs	r2, #3
 800384a:	4650      	mov	r0, sl
 800384c:	7821      	ldrb	r1, [r4, #0]
 800384e:	f000 fdf5 	bl	800443c <memchr>
 8003852:	b140      	cbz	r0, 8003866 <_svfiprintf_r+0x152>
 8003854:	2340      	movs	r3, #64	; 0x40
 8003856:	eba0 000a 	sub.w	r0, r0, sl
 800385a:	fa03 f000 	lsl.w	r0, r3, r0
 800385e:	9b04      	ldr	r3, [sp, #16]
 8003860:	3401      	adds	r4, #1
 8003862:	4303      	orrs	r3, r0
 8003864:	9304      	str	r3, [sp, #16]
 8003866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386a:	2206      	movs	r2, #6
 800386c:	4825      	ldr	r0, [pc, #148]	; (8003904 <_svfiprintf_r+0x1f0>)
 800386e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003872:	f000 fde3 	bl	800443c <memchr>
 8003876:	2800      	cmp	r0, #0
 8003878:	d038      	beq.n	80038ec <_svfiprintf_r+0x1d8>
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <_svfiprintf_r+0x1f4>)
 800387c:	bb1b      	cbnz	r3, 80038c6 <_svfiprintf_r+0x1b2>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	3307      	adds	r3, #7
 8003882:	f023 0307 	bic.w	r3, r3, #7
 8003886:	3308      	adds	r3, #8
 8003888:	9303      	str	r3, [sp, #12]
 800388a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800388c:	4433      	add	r3, r6
 800388e:	9309      	str	r3, [sp, #36]	; 0x24
 8003890:	e767      	b.n	8003762 <_svfiprintf_r+0x4e>
 8003892:	460c      	mov	r4, r1
 8003894:	2001      	movs	r0, #1
 8003896:	fb0c 3202 	mla	r2, ip, r2, r3
 800389a:	e7a5      	b.n	80037e8 <_svfiprintf_r+0xd4>
 800389c:	2300      	movs	r3, #0
 800389e:	f04f 0c0a 	mov.w	ip, #10
 80038a2:	4619      	mov	r1, r3
 80038a4:	3401      	adds	r4, #1
 80038a6:	9305      	str	r3, [sp, #20]
 80038a8:	4620      	mov	r0, r4
 80038aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038ae:	3a30      	subs	r2, #48	; 0x30
 80038b0:	2a09      	cmp	r2, #9
 80038b2:	d903      	bls.n	80038bc <_svfiprintf_r+0x1a8>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0c5      	beq.n	8003844 <_svfiprintf_r+0x130>
 80038b8:	9105      	str	r1, [sp, #20]
 80038ba:	e7c3      	b.n	8003844 <_svfiprintf_r+0x130>
 80038bc:	4604      	mov	r4, r0
 80038be:	2301      	movs	r3, #1
 80038c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038c4:	e7f0      	b.n	80038a8 <_svfiprintf_r+0x194>
 80038c6:	ab03      	add	r3, sp, #12
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	462a      	mov	r2, r5
 80038cc:	4638      	mov	r0, r7
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <_svfiprintf_r+0x1f8>)
 80038d0:	a904      	add	r1, sp, #16
 80038d2:	f3af 8000 	nop.w
 80038d6:	1c42      	adds	r2, r0, #1
 80038d8:	4606      	mov	r6, r0
 80038da:	d1d6      	bne.n	800388a <_svfiprintf_r+0x176>
 80038dc:	89ab      	ldrh	r3, [r5, #12]
 80038de:	065b      	lsls	r3, r3, #25
 80038e0:	f53f af2c 	bmi.w	800373c <_svfiprintf_r+0x28>
 80038e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038e6:	b01d      	add	sp, #116	; 0x74
 80038e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ec:	ab03      	add	r3, sp, #12
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	462a      	mov	r2, r5
 80038f2:	4638      	mov	r0, r7
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <_svfiprintf_r+0x1f8>)
 80038f6:	a904      	add	r1, sp, #16
 80038f8:	f000 f9d4 	bl	8003ca4 <_printf_i>
 80038fc:	e7eb      	b.n	80038d6 <_svfiprintf_r+0x1c2>
 80038fe:	bf00      	nop
 8003900:	08004994 	.word	0x08004994
 8003904:	0800499e 	.word	0x0800499e
 8003908:	00000000 	.word	0x00000000
 800390c:	0800365d 	.word	0x0800365d
 8003910:	0800499a 	.word	0x0800499a

08003914 <__sfputc_r>:
 8003914:	6893      	ldr	r3, [r2, #8]
 8003916:	b410      	push	{r4}
 8003918:	3b01      	subs	r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	6093      	str	r3, [r2, #8]
 800391e:	da07      	bge.n	8003930 <__sfputc_r+0x1c>
 8003920:	6994      	ldr	r4, [r2, #24]
 8003922:	42a3      	cmp	r3, r4
 8003924:	db01      	blt.n	800392a <__sfputc_r+0x16>
 8003926:	290a      	cmp	r1, #10
 8003928:	d102      	bne.n	8003930 <__sfputc_r+0x1c>
 800392a:	bc10      	pop	{r4}
 800392c:	f000 bb6c 	b.w	8004008 <__swbuf_r>
 8003930:	6813      	ldr	r3, [r2, #0]
 8003932:	1c58      	adds	r0, r3, #1
 8003934:	6010      	str	r0, [r2, #0]
 8003936:	7019      	strb	r1, [r3, #0]
 8003938:	4608      	mov	r0, r1
 800393a:	bc10      	pop	{r4}
 800393c:	4770      	bx	lr

0800393e <__sfputs_r>:
 800393e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003940:	4606      	mov	r6, r0
 8003942:	460f      	mov	r7, r1
 8003944:	4614      	mov	r4, r2
 8003946:	18d5      	adds	r5, r2, r3
 8003948:	42ac      	cmp	r4, r5
 800394a:	d101      	bne.n	8003950 <__sfputs_r+0x12>
 800394c:	2000      	movs	r0, #0
 800394e:	e007      	b.n	8003960 <__sfputs_r+0x22>
 8003950:	463a      	mov	r2, r7
 8003952:	4630      	mov	r0, r6
 8003954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003958:	f7ff ffdc 	bl	8003914 <__sfputc_r>
 800395c:	1c43      	adds	r3, r0, #1
 800395e:	d1f3      	bne.n	8003948 <__sfputs_r+0xa>
 8003960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003964 <_vfiprintf_r>:
 8003964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	460d      	mov	r5, r1
 800396a:	4614      	mov	r4, r2
 800396c:	4698      	mov	r8, r3
 800396e:	4606      	mov	r6, r0
 8003970:	b09d      	sub	sp, #116	; 0x74
 8003972:	b118      	cbz	r0, 800397c <_vfiprintf_r+0x18>
 8003974:	6983      	ldr	r3, [r0, #24]
 8003976:	b90b      	cbnz	r3, 800397c <_vfiprintf_r+0x18>
 8003978:	f7ff fdc4 	bl	8003504 <__sinit>
 800397c:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <_vfiprintf_r+0x240>)
 800397e:	429d      	cmp	r5, r3
 8003980:	d11b      	bne.n	80039ba <_vfiprintf_r+0x56>
 8003982:	6875      	ldr	r5, [r6, #4]
 8003984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003986:	07d9      	lsls	r1, r3, #31
 8003988:	d405      	bmi.n	8003996 <_vfiprintf_r+0x32>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	059a      	lsls	r2, r3, #22
 800398e:	d402      	bmi.n	8003996 <_vfiprintf_r+0x32>
 8003990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003992:	f7ff fe55 	bl	8003640 <__retarget_lock_acquire_recursive>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	071b      	lsls	r3, r3, #28
 800399a:	d501      	bpl.n	80039a0 <_vfiprintf_r+0x3c>
 800399c:	692b      	ldr	r3, [r5, #16]
 800399e:	b9eb      	cbnz	r3, 80039dc <_vfiprintf_r+0x78>
 80039a0:	4629      	mov	r1, r5
 80039a2:	4630      	mov	r0, r6
 80039a4:	f000 fb94 	bl	80040d0 <__swsetup_r>
 80039a8:	b1c0      	cbz	r0, 80039dc <_vfiprintf_r+0x78>
 80039aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ac:	07dc      	lsls	r4, r3, #31
 80039ae:	d50e      	bpl.n	80039ce <_vfiprintf_r+0x6a>
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	b01d      	add	sp, #116	; 0x74
 80039b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ba:	4b7b      	ldr	r3, [pc, #492]	; (8003ba8 <_vfiprintf_r+0x244>)
 80039bc:	429d      	cmp	r5, r3
 80039be:	d101      	bne.n	80039c4 <_vfiprintf_r+0x60>
 80039c0:	68b5      	ldr	r5, [r6, #8]
 80039c2:	e7df      	b.n	8003984 <_vfiprintf_r+0x20>
 80039c4:	4b79      	ldr	r3, [pc, #484]	; (8003bac <_vfiprintf_r+0x248>)
 80039c6:	429d      	cmp	r5, r3
 80039c8:	bf08      	it	eq
 80039ca:	68f5      	ldreq	r5, [r6, #12]
 80039cc:	e7da      	b.n	8003984 <_vfiprintf_r+0x20>
 80039ce:	89ab      	ldrh	r3, [r5, #12]
 80039d0:	0598      	lsls	r0, r3, #22
 80039d2:	d4ed      	bmi.n	80039b0 <_vfiprintf_r+0x4c>
 80039d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039d6:	f7ff fe34 	bl	8003642 <__retarget_lock_release_recursive>
 80039da:	e7e9      	b.n	80039b0 <_vfiprintf_r+0x4c>
 80039dc:	2300      	movs	r3, #0
 80039de:	9309      	str	r3, [sp, #36]	; 0x24
 80039e0:	2320      	movs	r3, #32
 80039e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e6:	2330      	movs	r3, #48	; 0x30
 80039e8:	f04f 0901 	mov.w	r9, #1
 80039ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003bb0 <_vfiprintf_r+0x24c>
 80039f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f8:	4623      	mov	r3, r4
 80039fa:	469a      	mov	sl, r3
 80039fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a00:	b10a      	cbz	r2, 8003a06 <_vfiprintf_r+0xa2>
 8003a02:	2a25      	cmp	r2, #37	; 0x25
 8003a04:	d1f9      	bne.n	80039fa <_vfiprintf_r+0x96>
 8003a06:	ebba 0b04 	subs.w	fp, sl, r4
 8003a0a:	d00b      	beq.n	8003a24 <_vfiprintf_r+0xc0>
 8003a0c:	465b      	mov	r3, fp
 8003a0e:	4622      	mov	r2, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7ff ff93 	bl	800393e <__sfputs_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	f000 80aa 	beq.w	8003b72 <_vfiprintf_r+0x20e>
 8003a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a20:	445a      	add	r2, fp
 8003a22:	9209      	str	r2, [sp, #36]	; 0x24
 8003a24:	f89a 3000 	ldrb.w	r3, [sl]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80a2 	beq.w	8003b72 <_vfiprintf_r+0x20e>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a38:	f10a 0a01 	add.w	sl, sl, #1
 8003a3c:	9304      	str	r3, [sp, #16]
 8003a3e:	9307      	str	r3, [sp, #28]
 8003a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a44:	931a      	str	r3, [sp, #104]	; 0x68
 8003a46:	4654      	mov	r4, sl
 8003a48:	2205      	movs	r2, #5
 8003a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4e:	4858      	ldr	r0, [pc, #352]	; (8003bb0 <_vfiprintf_r+0x24c>)
 8003a50:	f000 fcf4 	bl	800443c <memchr>
 8003a54:	9a04      	ldr	r2, [sp, #16]
 8003a56:	b9d8      	cbnz	r0, 8003a90 <_vfiprintf_r+0x12c>
 8003a58:	06d1      	lsls	r1, r2, #27
 8003a5a:	bf44      	itt	mi
 8003a5c:	2320      	movmi	r3, #32
 8003a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a62:	0713      	lsls	r3, r2, #28
 8003a64:	bf44      	itt	mi
 8003a66:	232b      	movmi	r3, #43	; 0x2b
 8003a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a70:	2b2a      	cmp	r3, #42	; 0x2a
 8003a72:	d015      	beq.n	8003aa0 <_vfiprintf_r+0x13c>
 8003a74:	4654      	mov	r4, sl
 8003a76:	2000      	movs	r0, #0
 8003a78:	f04f 0c0a 	mov.w	ip, #10
 8003a7c:	9a07      	ldr	r2, [sp, #28]
 8003a7e:	4621      	mov	r1, r4
 8003a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a84:	3b30      	subs	r3, #48	; 0x30
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d94e      	bls.n	8003b28 <_vfiprintf_r+0x1c4>
 8003a8a:	b1b0      	cbz	r0, 8003aba <_vfiprintf_r+0x156>
 8003a8c:	9207      	str	r2, [sp, #28]
 8003a8e:	e014      	b.n	8003aba <_vfiprintf_r+0x156>
 8003a90:	eba0 0308 	sub.w	r3, r0, r8
 8003a94:	fa09 f303 	lsl.w	r3, r9, r3
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	46a2      	mov	sl, r4
 8003a9c:	9304      	str	r3, [sp, #16]
 8003a9e:	e7d2      	b.n	8003a46 <_vfiprintf_r+0xe2>
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	1d19      	adds	r1, r3, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	9103      	str	r1, [sp, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bfbb      	ittet	lt
 8003aac:	425b      	neglt	r3, r3
 8003aae:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab2:	9307      	strge	r3, [sp, #28]
 8003ab4:	9307      	strlt	r3, [sp, #28]
 8003ab6:	bfb8      	it	lt
 8003ab8:	9204      	strlt	r2, [sp, #16]
 8003aba:	7823      	ldrb	r3, [r4, #0]
 8003abc:	2b2e      	cmp	r3, #46	; 0x2e
 8003abe:	d10c      	bne.n	8003ada <_vfiprintf_r+0x176>
 8003ac0:	7863      	ldrb	r3, [r4, #1]
 8003ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac4:	d135      	bne.n	8003b32 <_vfiprintf_r+0x1ce>
 8003ac6:	9b03      	ldr	r3, [sp, #12]
 8003ac8:	3402      	adds	r4, #2
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	9203      	str	r2, [sp, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bfb8      	it	lt
 8003ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad8:	9305      	str	r3, [sp, #20]
 8003ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bc0 <_vfiprintf_r+0x25c>
 8003ade:	2203      	movs	r2, #3
 8003ae0:	4650      	mov	r0, sl
 8003ae2:	7821      	ldrb	r1, [r4, #0]
 8003ae4:	f000 fcaa 	bl	800443c <memchr>
 8003ae8:	b140      	cbz	r0, 8003afc <_vfiprintf_r+0x198>
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	eba0 000a 	sub.w	r0, r0, sl
 8003af0:	fa03 f000 	lsl.w	r0, r3, r0
 8003af4:	9b04      	ldr	r3, [sp, #16]
 8003af6:	3401      	adds	r4, #1
 8003af8:	4303      	orrs	r3, r0
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b00:	2206      	movs	r2, #6
 8003b02:	482c      	ldr	r0, [pc, #176]	; (8003bb4 <_vfiprintf_r+0x250>)
 8003b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b08:	f000 fc98 	bl	800443c <memchr>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d03f      	beq.n	8003b90 <_vfiprintf_r+0x22c>
 8003b10:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <_vfiprintf_r+0x254>)
 8003b12:	bb1b      	cbnz	r3, 8003b5c <_vfiprintf_r+0x1f8>
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	3307      	adds	r3, #7
 8003b18:	f023 0307 	bic.w	r3, r3, #7
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b22:	443b      	add	r3, r7
 8003b24:	9309      	str	r3, [sp, #36]	; 0x24
 8003b26:	e767      	b.n	80039f8 <_vfiprintf_r+0x94>
 8003b28:	460c      	mov	r4, r1
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b30:	e7a5      	b.n	8003a7e <_vfiprintf_r+0x11a>
 8003b32:	2300      	movs	r3, #0
 8003b34:	f04f 0c0a 	mov.w	ip, #10
 8003b38:	4619      	mov	r1, r3
 8003b3a:	3401      	adds	r4, #1
 8003b3c:	9305      	str	r3, [sp, #20]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b44:	3a30      	subs	r2, #48	; 0x30
 8003b46:	2a09      	cmp	r2, #9
 8003b48:	d903      	bls.n	8003b52 <_vfiprintf_r+0x1ee>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0c5      	beq.n	8003ada <_vfiprintf_r+0x176>
 8003b4e:	9105      	str	r1, [sp, #20]
 8003b50:	e7c3      	b.n	8003ada <_vfiprintf_r+0x176>
 8003b52:	4604      	mov	r4, r0
 8003b54:	2301      	movs	r3, #1
 8003b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b5a:	e7f0      	b.n	8003b3e <_vfiprintf_r+0x1da>
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	462a      	mov	r2, r5
 8003b62:	4630      	mov	r0, r6
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <_vfiprintf_r+0x258>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	f3af 8000 	nop.w
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	1c78      	adds	r0, r7, #1
 8003b70:	d1d6      	bne.n	8003b20 <_vfiprintf_r+0x1bc>
 8003b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b74:	07d9      	lsls	r1, r3, #31
 8003b76:	d405      	bmi.n	8003b84 <_vfiprintf_r+0x220>
 8003b78:	89ab      	ldrh	r3, [r5, #12]
 8003b7a:	059a      	lsls	r2, r3, #22
 8003b7c:	d402      	bmi.n	8003b84 <_vfiprintf_r+0x220>
 8003b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b80:	f7ff fd5f 	bl	8003642 <__retarget_lock_release_recursive>
 8003b84:	89ab      	ldrh	r3, [r5, #12]
 8003b86:	065b      	lsls	r3, r3, #25
 8003b88:	f53f af12 	bmi.w	80039b0 <_vfiprintf_r+0x4c>
 8003b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b8e:	e711      	b.n	80039b4 <_vfiprintf_r+0x50>
 8003b90:	ab03      	add	r3, sp, #12
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	462a      	mov	r2, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <_vfiprintf_r+0x258>)
 8003b9a:	a904      	add	r1, sp, #16
 8003b9c:	f000 f882 	bl	8003ca4 <_printf_i>
 8003ba0:	e7e4      	b.n	8003b6c <_vfiprintf_r+0x208>
 8003ba2:	bf00      	nop
 8003ba4:	08004954 	.word	0x08004954
 8003ba8:	08004974 	.word	0x08004974
 8003bac:	08004934 	.word	0x08004934
 8003bb0:	08004994 	.word	0x08004994
 8003bb4:	0800499e 	.word	0x0800499e
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	0800393f 	.word	0x0800393f
 8003bc0:	0800499a 	.word	0x0800499a

08003bc4 <_printf_common>:
 8003bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	4616      	mov	r6, r2
 8003bca:	4699      	mov	r9, r3
 8003bcc:	688a      	ldr	r2, [r1, #8]
 8003bce:	690b      	ldr	r3, [r1, #16]
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	bfb8      	it	lt
 8003bd6:	4613      	movlt	r3, r2
 8003bd8:	6033      	str	r3, [r6, #0]
 8003bda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bde:	460c      	mov	r4, r1
 8003be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003be4:	b10a      	cbz	r2, 8003bea <_printf_common+0x26>
 8003be6:	3301      	adds	r3, #1
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	0699      	lsls	r1, r3, #26
 8003bee:	bf42      	ittt	mi
 8003bf0:	6833      	ldrmi	r3, [r6, #0]
 8003bf2:	3302      	addmi	r3, #2
 8003bf4:	6033      	strmi	r3, [r6, #0]
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	f015 0506 	ands.w	r5, r5, #6
 8003bfc:	d106      	bne.n	8003c0c <_printf_common+0x48>
 8003bfe:	f104 0a19 	add.w	sl, r4, #25
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	42ab      	cmp	r3, r5
 8003c0a:	dc28      	bgt.n	8003c5e <_printf_common+0x9a>
 8003c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c10:	1e13      	subs	r3, r2, #0
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	bf18      	it	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	0692      	lsls	r2, r2, #26
 8003c1a:	d42d      	bmi.n	8003c78 <_printf_common+0xb4>
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	4638      	mov	r0, r7
 8003c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c24:	47c0      	blx	r8
 8003c26:	3001      	adds	r0, #1
 8003c28:	d020      	beq.n	8003c6c <_printf_common+0xa8>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	68e5      	ldr	r5, [r4, #12]
 8003c2e:	f003 0306 	and.w	r3, r3, #6
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf18      	it	ne
 8003c36:	2500      	movne	r5, #0
 8003c38:	6832      	ldr	r2, [r6, #0]
 8003c3a:	f04f 0600 	mov.w	r6, #0
 8003c3e:	68a3      	ldr	r3, [r4, #8]
 8003c40:	bf08      	it	eq
 8003c42:	1aad      	subeq	r5, r5, r2
 8003c44:	6922      	ldr	r2, [r4, #16]
 8003c46:	bf08      	it	eq
 8003c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	bfc4      	itt	gt
 8003c50:	1a9b      	subgt	r3, r3, r2
 8003c52:	18ed      	addgt	r5, r5, r3
 8003c54:	341a      	adds	r4, #26
 8003c56:	42b5      	cmp	r5, r6
 8003c58:	d11a      	bne.n	8003c90 <_printf_common+0xcc>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e008      	b.n	8003c70 <_printf_common+0xac>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4652      	mov	r2, sl
 8003c62:	4649      	mov	r1, r9
 8003c64:	4638      	mov	r0, r7
 8003c66:	47c0      	blx	r8
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d103      	bne.n	8003c74 <_printf_common+0xb0>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	3501      	adds	r5, #1
 8003c76:	e7c4      	b.n	8003c02 <_printf_common+0x3e>
 8003c78:	2030      	movs	r0, #48	; 0x30
 8003c7a:	18e1      	adds	r1, r4, r3
 8003c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c86:	4422      	add	r2, r4
 8003c88:	3302      	adds	r3, #2
 8003c8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c8e:	e7c5      	b.n	8003c1c <_printf_common+0x58>
 8003c90:	2301      	movs	r3, #1
 8003c92:	4622      	mov	r2, r4
 8003c94:	4649      	mov	r1, r9
 8003c96:	4638      	mov	r0, r7
 8003c98:	47c0      	blx	r8
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d0e6      	beq.n	8003c6c <_printf_common+0xa8>
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7d9      	b.n	8003c56 <_printf_common+0x92>
	...

08003ca4 <_printf_i>:
 8003ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	460c      	mov	r4, r1
 8003caa:	7e27      	ldrb	r7, [r4, #24]
 8003cac:	4691      	mov	r9, r2
 8003cae:	2f78      	cmp	r7, #120	; 0x78
 8003cb0:	4680      	mov	r8, r0
 8003cb2:	469a      	mov	sl, r3
 8003cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cba:	d807      	bhi.n	8003ccc <_printf_i+0x28>
 8003cbc:	2f62      	cmp	r7, #98	; 0x62
 8003cbe:	d80a      	bhi.n	8003cd6 <_printf_i+0x32>
 8003cc0:	2f00      	cmp	r7, #0
 8003cc2:	f000 80d9 	beq.w	8003e78 <_printf_i+0x1d4>
 8003cc6:	2f58      	cmp	r7, #88	; 0x58
 8003cc8:	f000 80a4 	beq.w	8003e14 <_printf_i+0x170>
 8003ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cd4:	e03a      	b.n	8003d4c <_printf_i+0xa8>
 8003cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cda:	2b15      	cmp	r3, #21
 8003cdc:	d8f6      	bhi.n	8003ccc <_printf_i+0x28>
 8003cde:	a001      	add	r0, pc, #4	; (adr r0, 8003ce4 <_printf_i+0x40>)
 8003ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ce4:	08003d3d 	.word	0x08003d3d
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003ccd 	.word	0x08003ccd
 8003cf0:	08003ccd 	.word	0x08003ccd
 8003cf4:	08003ccd 	.word	0x08003ccd
 8003cf8:	08003ccd 	.word	0x08003ccd
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003ccd 	.word	0x08003ccd
 8003d04:	08003ccd 	.word	0x08003ccd
 8003d08:	08003ccd 	.word	0x08003ccd
 8003d0c:	08003ccd 	.word	0x08003ccd
 8003d10:	08003e5f 	.word	0x08003e5f
 8003d14:	08003d81 	.word	0x08003d81
 8003d18:	08003e41 	.word	0x08003e41
 8003d1c:	08003ccd 	.word	0x08003ccd
 8003d20:	08003ccd 	.word	0x08003ccd
 8003d24:	08003e81 	.word	0x08003e81
 8003d28:	08003ccd 	.word	0x08003ccd
 8003d2c:	08003d81 	.word	0x08003d81
 8003d30:	08003ccd 	.word	0x08003ccd
 8003d34:	08003ccd 	.word	0x08003ccd
 8003d38:	08003e49 	.word	0x08003e49
 8003d3c:	680b      	ldr	r3, [r1, #0]
 8003d3e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d42:	1d1a      	adds	r2, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	600a      	str	r2, [r1, #0]
 8003d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0a4      	b.n	8003e9a <_printf_i+0x1f6>
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	6808      	ldr	r0, [r1, #0]
 8003d54:	062e      	lsls	r6, r5, #24
 8003d56:	f100 0304 	add.w	r3, r0, #4
 8003d5a:	d50a      	bpl.n	8003d72 <_printf_i+0xce>
 8003d5c:	6805      	ldr	r5, [r0, #0]
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	da03      	bge.n	8003d6c <_printf_i+0xc8>
 8003d64:	232d      	movs	r3, #45	; 0x2d
 8003d66:	426d      	negs	r5, r5
 8003d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d6c:	230a      	movs	r3, #10
 8003d6e:	485e      	ldr	r0, [pc, #376]	; (8003ee8 <_printf_i+0x244>)
 8003d70:	e019      	b.n	8003da6 <_printf_i+0x102>
 8003d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d76:	6805      	ldr	r5, [r0, #0]
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	bf18      	it	ne
 8003d7c:	b22d      	sxthne	r5, r5
 8003d7e:	e7ef      	b.n	8003d60 <_printf_i+0xbc>
 8003d80:	680b      	ldr	r3, [r1, #0]
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	1d18      	adds	r0, r3, #4
 8003d86:	6008      	str	r0, [r1, #0]
 8003d88:	0628      	lsls	r0, r5, #24
 8003d8a:	d501      	bpl.n	8003d90 <_printf_i+0xec>
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	e002      	b.n	8003d96 <_printf_i+0xf2>
 8003d90:	0669      	lsls	r1, r5, #25
 8003d92:	d5fb      	bpl.n	8003d8c <_printf_i+0xe8>
 8003d94:	881d      	ldrh	r5, [r3, #0]
 8003d96:	2f6f      	cmp	r7, #111	; 0x6f
 8003d98:	bf0c      	ite	eq
 8003d9a:	2308      	moveq	r3, #8
 8003d9c:	230a      	movne	r3, #10
 8003d9e:	4852      	ldr	r0, [pc, #328]	; (8003ee8 <_printf_i+0x244>)
 8003da0:	2100      	movs	r1, #0
 8003da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003da6:	6866      	ldr	r6, [r4, #4]
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	bfa8      	it	ge
 8003dac:	6821      	ldrge	r1, [r4, #0]
 8003dae:	60a6      	str	r6, [r4, #8]
 8003db0:	bfa4      	itt	ge
 8003db2:	f021 0104 	bicge.w	r1, r1, #4
 8003db6:	6021      	strge	r1, [r4, #0]
 8003db8:	b90d      	cbnz	r5, 8003dbe <_printf_i+0x11a>
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	d04d      	beq.n	8003e5a <_printf_i+0x1b6>
 8003dbe:	4616      	mov	r6, r2
 8003dc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dc4:	fb03 5711 	mls	r7, r3, r1, r5
 8003dc8:	5dc7      	ldrb	r7, [r0, r7]
 8003dca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dce:	462f      	mov	r7, r5
 8003dd0:	42bb      	cmp	r3, r7
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	d9f4      	bls.n	8003dc0 <_printf_i+0x11c>
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d10b      	bne.n	8003df2 <_printf_i+0x14e>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	07df      	lsls	r7, r3, #31
 8003dde:	d508      	bpl.n	8003df2 <_printf_i+0x14e>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	6861      	ldr	r1, [r4, #4]
 8003de4:	4299      	cmp	r1, r3
 8003de6:	bfde      	ittt	le
 8003de8:	2330      	movle	r3, #48	; 0x30
 8003dea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003df2:	1b92      	subs	r2, r2, r6
 8003df4:	6122      	str	r2, [r4, #16]
 8003df6:	464b      	mov	r3, r9
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f8cd a000 	str.w	sl, [sp]
 8003e00:	aa03      	add	r2, sp, #12
 8003e02:	f7ff fedf 	bl	8003bc4 <_printf_common>
 8003e06:	3001      	adds	r0, #1
 8003e08:	d14c      	bne.n	8003ea4 <_printf_i+0x200>
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	b004      	add	sp, #16
 8003e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e14:	4834      	ldr	r0, [pc, #208]	; (8003ee8 <_printf_i+0x244>)
 8003e16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e1a:	680e      	ldr	r6, [r1, #0]
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e22:	061f      	lsls	r7, r3, #24
 8003e24:	600e      	str	r6, [r1, #0]
 8003e26:	d514      	bpl.n	8003e52 <_printf_i+0x1ae>
 8003e28:	07d9      	lsls	r1, r3, #31
 8003e2a:	bf44      	itt	mi
 8003e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e30:	6023      	strmi	r3, [r4, #0]
 8003e32:	b91d      	cbnz	r5, 8003e3c <_printf_i+0x198>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	f023 0320 	bic.w	r3, r3, #32
 8003e3a:	6023      	str	r3, [r4, #0]
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	e7af      	b.n	8003da0 <_printf_i+0xfc>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f043 0320 	orr.w	r3, r3, #32
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	2378      	movs	r3, #120	; 0x78
 8003e4a:	4828      	ldr	r0, [pc, #160]	; (8003eec <_printf_i+0x248>)
 8003e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e50:	e7e3      	b.n	8003e1a <_printf_i+0x176>
 8003e52:	065e      	lsls	r6, r3, #25
 8003e54:	bf48      	it	mi
 8003e56:	b2ad      	uxthmi	r5, r5
 8003e58:	e7e6      	b.n	8003e28 <_printf_i+0x184>
 8003e5a:	4616      	mov	r6, r2
 8003e5c:	e7bb      	b.n	8003dd6 <_printf_i+0x132>
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	6826      	ldr	r6, [r4, #0]
 8003e62:	1d1d      	adds	r5, r3, #4
 8003e64:	6960      	ldr	r0, [r4, #20]
 8003e66:	600d      	str	r5, [r1, #0]
 8003e68:	0635      	lsls	r5, r6, #24
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	d501      	bpl.n	8003e72 <_printf_i+0x1ce>
 8003e6e:	6018      	str	r0, [r3, #0]
 8003e70:	e002      	b.n	8003e78 <_printf_i+0x1d4>
 8003e72:	0671      	lsls	r1, r6, #25
 8003e74:	d5fb      	bpl.n	8003e6e <_printf_i+0x1ca>
 8003e76:	8018      	strh	r0, [r3, #0]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4616      	mov	r6, r2
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	e7ba      	b.n	8003df6 <_printf_i+0x152>
 8003e80:	680b      	ldr	r3, [r1, #0]
 8003e82:	1d1a      	adds	r2, r3, #4
 8003e84:	600a      	str	r2, [r1, #0]
 8003e86:	681e      	ldr	r6, [r3, #0]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	6862      	ldr	r2, [r4, #4]
 8003e8e:	f000 fad5 	bl	800443c <memchr>
 8003e92:	b108      	cbz	r0, 8003e98 <_printf_i+0x1f4>
 8003e94:	1b80      	subs	r0, r0, r6
 8003e96:	6060      	str	r0, [r4, #4]
 8003e98:	6863      	ldr	r3, [r4, #4]
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea2:	e7a8      	b.n	8003df6 <_printf_i+0x152>
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	47d0      	blx	sl
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d0ab      	beq.n	8003e0a <_printf_i+0x166>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	079b      	lsls	r3, r3, #30
 8003eb6:	d413      	bmi.n	8003ee0 <_printf_i+0x23c>
 8003eb8:	68e0      	ldr	r0, [r4, #12]
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	4298      	cmp	r0, r3
 8003ebe:	bfb8      	it	lt
 8003ec0:	4618      	movlt	r0, r3
 8003ec2:	e7a4      	b.n	8003e0e <_printf_i+0x16a>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4640      	mov	r0, r8
 8003ecc:	47d0      	blx	sl
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d09b      	beq.n	8003e0a <_printf_i+0x166>
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	68e3      	ldr	r3, [r4, #12]
 8003ed6:	9903      	ldr	r1, [sp, #12]
 8003ed8:	1a5b      	subs	r3, r3, r1
 8003eda:	42ab      	cmp	r3, r5
 8003edc:	dcf2      	bgt.n	8003ec4 <_printf_i+0x220>
 8003ede:	e7eb      	b.n	8003eb8 <_printf_i+0x214>
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	f104 0619 	add.w	r6, r4, #25
 8003ee6:	e7f5      	b.n	8003ed4 <_printf_i+0x230>
 8003ee8:	080049a5 	.word	0x080049a5
 8003eec:	080049b6 	.word	0x080049b6

08003ef0 <_putc_r>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	b118      	cbz	r0, 8003f02 <_putc_r+0x12>
 8003efa:	6983      	ldr	r3, [r0, #24]
 8003efc:	b90b      	cbnz	r3, 8003f02 <_putc_r+0x12>
 8003efe:	f7ff fb01 	bl	8003504 <__sinit>
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <_putc_r+0x84>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d124      	bne.n	8003f52 <_putc_r+0x62>
 8003f08:	6874      	ldr	r4, [r6, #4]
 8003f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f0c:	07d8      	lsls	r0, r3, #31
 8003f0e:	d405      	bmi.n	8003f1c <_putc_r+0x2c>
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	0599      	lsls	r1, r3, #22
 8003f14:	d402      	bmi.n	8003f1c <_putc_r+0x2c>
 8003f16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f18:	f7ff fb92 	bl	8003640 <__retarget_lock_acquire_recursive>
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	da05      	bge.n	8003f32 <_putc_r+0x42>
 8003f26:	69a2      	ldr	r2, [r4, #24]
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	db1c      	blt.n	8003f66 <_putc_r+0x76>
 8003f2c:	b2eb      	uxtb	r3, r5
 8003f2e:	2b0a      	cmp	r3, #10
 8003f30:	d019      	beq.n	8003f66 <_putc_r+0x76>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	6022      	str	r2, [r4, #0]
 8003f38:	701d      	strb	r5, [r3, #0]
 8003f3a:	b2ed      	uxtb	r5, r5
 8003f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f3e:	07da      	lsls	r2, r3, #31
 8003f40:	d405      	bmi.n	8003f4e <_putc_r+0x5e>
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	059b      	lsls	r3, r3, #22
 8003f46:	d402      	bmi.n	8003f4e <_putc_r+0x5e>
 8003f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f4a:	f7ff fb7a 	bl	8003642 <__retarget_lock_release_recursive>
 8003f4e:	4628      	mov	r0, r5
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <_putc_r+0x88>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d101      	bne.n	8003f5c <_putc_r+0x6c>
 8003f58:	68b4      	ldr	r4, [r6, #8]
 8003f5a:	e7d6      	b.n	8003f0a <_putc_r+0x1a>
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <_putc_r+0x8c>)
 8003f5e:	429c      	cmp	r4, r3
 8003f60:	bf08      	it	eq
 8003f62:	68f4      	ldreq	r4, [r6, #12]
 8003f64:	e7d1      	b.n	8003f0a <_putc_r+0x1a>
 8003f66:	4629      	mov	r1, r5
 8003f68:	4622      	mov	r2, r4
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f000 f84c 	bl	8004008 <__swbuf_r>
 8003f70:	4605      	mov	r5, r0
 8003f72:	e7e3      	b.n	8003f3c <_putc_r+0x4c>
 8003f74:	08004954 	.word	0x08004954
 8003f78:	08004974 	.word	0x08004974
 8003f7c:	08004934 	.word	0x08004934

08003f80 <__sread>:
 8003f80:	b510      	push	{r4, lr}
 8003f82:	460c      	mov	r4, r1
 8003f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f88:	f000 faa6 	bl	80044d8 <_read_r>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	bfab      	itete	ge
 8003f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f92:	89a3      	ldrhlt	r3, [r4, #12]
 8003f94:	181b      	addge	r3, r3, r0
 8003f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f9a:	bfac      	ite	ge
 8003f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f9e:	81a3      	strhlt	r3, [r4, #12]
 8003fa0:	bd10      	pop	{r4, pc}

08003fa2 <__swrite>:
 8003fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa6:	461f      	mov	r7, r3
 8003fa8:	898b      	ldrh	r3, [r1, #12]
 8003faa:	4605      	mov	r5, r0
 8003fac:	05db      	lsls	r3, r3, #23
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	d505      	bpl.n	8003fc0 <__swrite+0x1e>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fbc:	f000 f9c8 	bl	8004350 <_lseek_r>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	4628      	mov	r0, r5
 8003fcc:	463b      	mov	r3, r7
 8003fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	f000 b869 	b.w	80040ac <_write_r>

08003fda <__sseek>:
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	460c      	mov	r4, r1
 8003fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe2:	f000 f9b5 	bl	8004350 <_lseek_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	bf15      	itete	ne
 8003fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ff6:	81a3      	strheq	r3, [r4, #12]
 8003ff8:	bf18      	it	ne
 8003ffa:	81a3      	strhne	r3, [r4, #12]
 8003ffc:	bd10      	pop	{r4, pc}

08003ffe <__sclose>:
 8003ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004002:	f000 b8d3 	b.w	80041ac <_close_r>
	...

08004008 <__swbuf_r>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	460e      	mov	r6, r1
 800400c:	4614      	mov	r4, r2
 800400e:	4605      	mov	r5, r0
 8004010:	b118      	cbz	r0, 800401a <__swbuf_r+0x12>
 8004012:	6983      	ldr	r3, [r0, #24]
 8004014:	b90b      	cbnz	r3, 800401a <__swbuf_r+0x12>
 8004016:	f7ff fa75 	bl	8003504 <__sinit>
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <__swbuf_r+0x98>)
 800401c:	429c      	cmp	r4, r3
 800401e:	d12b      	bne.n	8004078 <__swbuf_r+0x70>
 8004020:	686c      	ldr	r4, [r5, #4]
 8004022:	69a3      	ldr	r3, [r4, #24]
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	071a      	lsls	r2, r3, #28
 800402a:	d52f      	bpl.n	800408c <__swbuf_r+0x84>
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	b36b      	cbz	r3, 800408c <__swbuf_r+0x84>
 8004030:	6923      	ldr	r3, [r4, #16]
 8004032:	6820      	ldr	r0, [r4, #0]
 8004034:	b2f6      	uxtb	r6, r6
 8004036:	1ac0      	subs	r0, r0, r3
 8004038:	6963      	ldr	r3, [r4, #20]
 800403a:	4637      	mov	r7, r6
 800403c:	4283      	cmp	r3, r0
 800403e:	dc04      	bgt.n	800404a <__swbuf_r+0x42>
 8004040:	4621      	mov	r1, r4
 8004042:	4628      	mov	r0, r5
 8004044:	f000 f948 	bl	80042d8 <_fflush_r>
 8004048:	bb30      	cbnz	r0, 8004098 <__swbuf_r+0x90>
 800404a:	68a3      	ldr	r3, [r4, #8]
 800404c:	3001      	adds	r0, #1
 800404e:	3b01      	subs	r3, #1
 8004050:	60a3      	str	r3, [r4, #8]
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	6022      	str	r2, [r4, #0]
 8004058:	701e      	strb	r6, [r3, #0]
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	4283      	cmp	r3, r0
 800405e:	d004      	beq.n	800406a <__swbuf_r+0x62>
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	07db      	lsls	r3, r3, #31
 8004064:	d506      	bpl.n	8004074 <__swbuf_r+0x6c>
 8004066:	2e0a      	cmp	r6, #10
 8004068:	d104      	bne.n	8004074 <__swbuf_r+0x6c>
 800406a:	4621      	mov	r1, r4
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f933 	bl	80042d8 <_fflush_r>
 8004072:	b988      	cbnz	r0, 8004098 <__swbuf_r+0x90>
 8004074:	4638      	mov	r0, r7
 8004076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <__swbuf_r+0x9c>)
 800407a:	429c      	cmp	r4, r3
 800407c:	d101      	bne.n	8004082 <__swbuf_r+0x7a>
 800407e:	68ac      	ldr	r4, [r5, #8]
 8004080:	e7cf      	b.n	8004022 <__swbuf_r+0x1a>
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <__swbuf_r+0xa0>)
 8004084:	429c      	cmp	r4, r3
 8004086:	bf08      	it	eq
 8004088:	68ec      	ldreq	r4, [r5, #12]
 800408a:	e7ca      	b.n	8004022 <__swbuf_r+0x1a>
 800408c:	4621      	mov	r1, r4
 800408e:	4628      	mov	r0, r5
 8004090:	f000 f81e 	bl	80040d0 <__swsetup_r>
 8004094:	2800      	cmp	r0, #0
 8004096:	d0cb      	beq.n	8004030 <__swbuf_r+0x28>
 8004098:	f04f 37ff 	mov.w	r7, #4294967295
 800409c:	e7ea      	b.n	8004074 <__swbuf_r+0x6c>
 800409e:	bf00      	nop
 80040a0:	08004954 	.word	0x08004954
 80040a4:	08004974 	.word	0x08004974
 80040a8:	08004934 	.word	0x08004934

080040ac <_write_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4604      	mov	r4, r0
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	2200      	movs	r2, #0
 80040b6:	4d05      	ldr	r5, [pc, #20]	; (80040cc <_write_r+0x20>)
 80040b8:	602a      	str	r2, [r5, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7fc fa7b 	bl	80005b6 <_write>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_write_r+0x1e>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_write_r+0x1e>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000688 	.word	0x20000688

080040d0 <__swsetup_r>:
 80040d0:	4b32      	ldr	r3, [pc, #200]	; (800419c <__swsetup_r+0xcc>)
 80040d2:	b570      	push	{r4, r5, r6, lr}
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	4606      	mov	r6, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	b125      	cbz	r5, 80040e6 <__swsetup_r+0x16>
 80040dc:	69ab      	ldr	r3, [r5, #24]
 80040de:	b913      	cbnz	r3, 80040e6 <__swsetup_r+0x16>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f7ff fa0f 	bl	8003504 <__sinit>
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <__swsetup_r+0xd0>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d10f      	bne.n	800410c <__swsetup_r+0x3c>
 80040ec:	686c      	ldr	r4, [r5, #4]
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040f4:	0719      	lsls	r1, r3, #28
 80040f6:	d42c      	bmi.n	8004152 <__swsetup_r+0x82>
 80040f8:	06dd      	lsls	r5, r3, #27
 80040fa:	d411      	bmi.n	8004120 <__swsetup_r+0x50>
 80040fc:	2309      	movs	r3, #9
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	81a3      	strh	r3, [r4, #12]
 800410a:	e03e      	b.n	800418a <__swsetup_r+0xba>
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <__swsetup_r+0xd4>)
 800410e:	429c      	cmp	r4, r3
 8004110:	d101      	bne.n	8004116 <__swsetup_r+0x46>
 8004112:	68ac      	ldr	r4, [r5, #8]
 8004114:	e7eb      	b.n	80040ee <__swsetup_r+0x1e>
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <__swsetup_r+0xd8>)
 8004118:	429c      	cmp	r4, r3
 800411a:	bf08      	it	eq
 800411c:	68ec      	ldreq	r4, [r5, #12]
 800411e:	e7e6      	b.n	80040ee <__swsetup_r+0x1e>
 8004120:	0758      	lsls	r0, r3, #29
 8004122:	d512      	bpl.n	800414a <__swsetup_r+0x7a>
 8004124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004126:	b141      	cbz	r1, 800413a <__swsetup_r+0x6a>
 8004128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <__swsetup_r+0x66>
 8004130:	4630      	mov	r0, r6
 8004132:	f7ff f88d 	bl	8003250 <_free_r>
 8004136:	2300      	movs	r3, #0
 8004138:	6363      	str	r3, [r4, #52]	; 0x34
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	2300      	movs	r3, #0
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	f043 0308 	orr.w	r3, r3, #8
 8004150:	81a3      	strh	r3, [r4, #12]
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	b94b      	cbnz	r3, 800416a <__swsetup_r+0x9a>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d003      	beq.n	800416a <__swsetup_r+0x9a>
 8004162:	4621      	mov	r1, r4
 8004164:	4630      	mov	r0, r6
 8004166:	f000 f929 	bl	80043bc <__smakebuf_r>
 800416a:	89a0      	ldrh	r0, [r4, #12]
 800416c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004170:	f010 0301 	ands.w	r3, r0, #1
 8004174:	d00a      	beq.n	800418c <__swsetup_r+0xbc>
 8004176:	2300      	movs	r3, #0
 8004178:	60a3      	str	r3, [r4, #8]
 800417a:	6963      	ldr	r3, [r4, #20]
 800417c:	425b      	negs	r3, r3
 800417e:	61a3      	str	r3, [r4, #24]
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	b943      	cbnz	r3, 8004196 <__swsetup_r+0xc6>
 8004184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004188:	d1ba      	bne.n	8004100 <__swsetup_r+0x30>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	0781      	lsls	r1, r0, #30
 800418e:	bf58      	it	pl
 8004190:	6963      	ldrpl	r3, [r4, #20]
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	e7f4      	b.n	8004180 <__swsetup_r+0xb0>
 8004196:	2000      	movs	r0, #0
 8004198:	e7f7      	b.n	800418a <__swsetup_r+0xba>
 800419a:	bf00      	nop
 800419c:	2000001c 	.word	0x2000001c
 80041a0:	08004954 	.word	0x08004954
 80041a4:	08004974 	.word	0x08004974
 80041a8:	08004934 	.word	0x08004934

080041ac <_close_r>:
 80041ac:	b538      	push	{r3, r4, r5, lr}
 80041ae:	2300      	movs	r3, #0
 80041b0:	4d05      	ldr	r5, [pc, #20]	; (80041c8 <_close_r+0x1c>)
 80041b2:	4604      	mov	r4, r0
 80041b4:	4608      	mov	r0, r1
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	f7fc fa19 	bl	80005ee <_close>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_close_r+0x1a>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_close_r+0x1a>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20000688 	.word	0x20000688

080041cc <__sflush_r>:
 80041cc:	898a      	ldrh	r2, [r1, #12]
 80041ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d2:	4605      	mov	r5, r0
 80041d4:	0710      	lsls	r0, r2, #28
 80041d6:	460c      	mov	r4, r1
 80041d8:	d458      	bmi.n	800428c <__sflush_r+0xc0>
 80041da:	684b      	ldr	r3, [r1, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	dc05      	bgt.n	80041ec <__sflush_r+0x20>
 80041e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	dc02      	bgt.n	80041ec <__sflush_r+0x20>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ee:	2e00      	cmp	r6, #0
 80041f0:	d0f9      	beq.n	80041e6 <__sflush_r+0x1a>
 80041f2:	2300      	movs	r3, #0
 80041f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041f8:	682f      	ldr	r7, [r5, #0]
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	d032      	beq.n	8004264 <__sflush_r+0x98>
 80041fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	075a      	lsls	r2, r3, #29
 8004204:	d505      	bpl.n	8004212 <__sflush_r+0x46>
 8004206:	6863      	ldr	r3, [r4, #4]
 8004208:	1ac0      	subs	r0, r0, r3
 800420a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800420c:	b10b      	cbz	r3, 8004212 <__sflush_r+0x46>
 800420e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004210:	1ac0      	subs	r0, r0, r3
 8004212:	2300      	movs	r3, #0
 8004214:	4602      	mov	r2, r0
 8004216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004218:	4628      	mov	r0, r5
 800421a:	6a21      	ldr	r1, [r4, #32]
 800421c:	47b0      	blx	r6
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	d106      	bne.n	8004232 <__sflush_r+0x66>
 8004224:	6829      	ldr	r1, [r5, #0]
 8004226:	291d      	cmp	r1, #29
 8004228:	d82c      	bhi.n	8004284 <__sflush_r+0xb8>
 800422a:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <__sflush_r+0x108>)
 800422c:	40ca      	lsrs	r2, r1
 800422e:	07d6      	lsls	r6, r2, #31
 8004230:	d528      	bpl.n	8004284 <__sflush_r+0xb8>
 8004232:	2200      	movs	r2, #0
 8004234:	6062      	str	r2, [r4, #4]
 8004236:	6922      	ldr	r2, [r4, #16]
 8004238:	04d9      	lsls	r1, r3, #19
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	d504      	bpl.n	8004248 <__sflush_r+0x7c>
 800423e:	1c42      	adds	r2, r0, #1
 8004240:	d101      	bne.n	8004246 <__sflush_r+0x7a>
 8004242:	682b      	ldr	r3, [r5, #0]
 8004244:	b903      	cbnz	r3, 8004248 <__sflush_r+0x7c>
 8004246:	6560      	str	r0, [r4, #84]	; 0x54
 8004248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800424a:	602f      	str	r7, [r5, #0]
 800424c:	2900      	cmp	r1, #0
 800424e:	d0ca      	beq.n	80041e6 <__sflush_r+0x1a>
 8004250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004254:	4299      	cmp	r1, r3
 8004256:	d002      	beq.n	800425e <__sflush_r+0x92>
 8004258:	4628      	mov	r0, r5
 800425a:	f7fe fff9 	bl	8003250 <_free_r>
 800425e:	2000      	movs	r0, #0
 8004260:	6360      	str	r0, [r4, #52]	; 0x34
 8004262:	e7c1      	b.n	80041e8 <__sflush_r+0x1c>
 8004264:	6a21      	ldr	r1, [r4, #32]
 8004266:	2301      	movs	r3, #1
 8004268:	4628      	mov	r0, r5
 800426a:	47b0      	blx	r6
 800426c:	1c41      	adds	r1, r0, #1
 800426e:	d1c7      	bne.n	8004200 <__sflush_r+0x34>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0c4      	beq.n	8004200 <__sflush_r+0x34>
 8004276:	2b1d      	cmp	r3, #29
 8004278:	d001      	beq.n	800427e <__sflush_r+0xb2>
 800427a:	2b16      	cmp	r3, #22
 800427c:	d101      	bne.n	8004282 <__sflush_r+0xb6>
 800427e:	602f      	str	r7, [r5, #0]
 8004280:	e7b1      	b.n	80041e6 <__sflush_r+0x1a>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	e7ad      	b.n	80041e8 <__sflush_r+0x1c>
 800428c:	690f      	ldr	r7, [r1, #16]
 800428e:	2f00      	cmp	r7, #0
 8004290:	d0a9      	beq.n	80041e6 <__sflush_r+0x1a>
 8004292:	0793      	lsls	r3, r2, #30
 8004294:	bf18      	it	ne
 8004296:	2300      	movne	r3, #0
 8004298:	680e      	ldr	r6, [r1, #0]
 800429a:	bf08      	it	eq
 800429c:	694b      	ldreq	r3, [r1, #20]
 800429e:	eba6 0807 	sub.w	r8, r6, r7
 80042a2:	600f      	str	r7, [r1, #0]
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	f1b8 0f00 	cmp.w	r8, #0
 80042aa:	dd9c      	ble.n	80041e6 <__sflush_r+0x1a>
 80042ac:	4643      	mov	r3, r8
 80042ae:	463a      	mov	r2, r7
 80042b0:	4628      	mov	r0, r5
 80042b2:	6a21      	ldr	r1, [r4, #32]
 80042b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042b6:	47b0      	blx	r6
 80042b8:	2800      	cmp	r0, #0
 80042ba:	dc06      	bgt.n	80042ca <__sflush_r+0xfe>
 80042bc:	89a3      	ldrh	r3, [r4, #12]
 80042be:	f04f 30ff 	mov.w	r0, #4294967295
 80042c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c6:	81a3      	strh	r3, [r4, #12]
 80042c8:	e78e      	b.n	80041e8 <__sflush_r+0x1c>
 80042ca:	4407      	add	r7, r0
 80042cc:	eba8 0800 	sub.w	r8, r8, r0
 80042d0:	e7e9      	b.n	80042a6 <__sflush_r+0xda>
 80042d2:	bf00      	nop
 80042d4:	20400001 	.word	0x20400001

080042d8 <_fflush_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	690b      	ldr	r3, [r1, #16]
 80042dc:	4605      	mov	r5, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	b913      	cbnz	r3, 80042e8 <_fflush_r+0x10>
 80042e2:	2500      	movs	r5, #0
 80042e4:	4628      	mov	r0, r5
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	b118      	cbz	r0, 80042f2 <_fflush_r+0x1a>
 80042ea:	6983      	ldr	r3, [r0, #24]
 80042ec:	b90b      	cbnz	r3, 80042f2 <_fflush_r+0x1a>
 80042ee:	f7ff f909 	bl	8003504 <__sinit>
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <_fflush_r+0x6c>)
 80042f4:	429c      	cmp	r4, r3
 80042f6:	d11b      	bne.n	8004330 <_fflush_r+0x58>
 80042f8:	686c      	ldr	r4, [r5, #4]
 80042fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0ef      	beq.n	80042e2 <_fflush_r+0xa>
 8004302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004304:	07d0      	lsls	r0, r2, #31
 8004306:	d404      	bmi.n	8004312 <_fflush_r+0x3a>
 8004308:	0599      	lsls	r1, r3, #22
 800430a:	d402      	bmi.n	8004312 <_fflush_r+0x3a>
 800430c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800430e:	f7ff f997 	bl	8003640 <__retarget_lock_acquire_recursive>
 8004312:	4628      	mov	r0, r5
 8004314:	4621      	mov	r1, r4
 8004316:	f7ff ff59 	bl	80041cc <__sflush_r>
 800431a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800431c:	4605      	mov	r5, r0
 800431e:	07da      	lsls	r2, r3, #31
 8004320:	d4e0      	bmi.n	80042e4 <_fflush_r+0xc>
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	059b      	lsls	r3, r3, #22
 8004326:	d4dd      	bmi.n	80042e4 <_fflush_r+0xc>
 8004328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800432a:	f7ff f98a 	bl	8003642 <__retarget_lock_release_recursive>
 800432e:	e7d9      	b.n	80042e4 <_fflush_r+0xc>
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <_fflush_r+0x70>)
 8004332:	429c      	cmp	r4, r3
 8004334:	d101      	bne.n	800433a <_fflush_r+0x62>
 8004336:	68ac      	ldr	r4, [r5, #8]
 8004338:	e7df      	b.n	80042fa <_fflush_r+0x22>
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <_fflush_r+0x74>)
 800433c:	429c      	cmp	r4, r3
 800433e:	bf08      	it	eq
 8004340:	68ec      	ldreq	r4, [r5, #12]
 8004342:	e7da      	b.n	80042fa <_fflush_r+0x22>
 8004344:	08004954 	.word	0x08004954
 8004348:	08004974 	.word	0x08004974
 800434c:	08004934 	.word	0x08004934

08004350 <_lseek_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	2200      	movs	r2, #0
 800435a:	4d05      	ldr	r5, [pc, #20]	; (8004370 <_lseek_r+0x20>)
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f7fc f969 	bl	8000636 <_lseek>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_lseek_r+0x1e>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_lseek_r+0x1e>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	20000688 	.word	0x20000688

08004374 <__swhatbuf_r>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	460e      	mov	r6, r1
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	4614      	mov	r4, r2
 800437e:	2900      	cmp	r1, #0
 8004380:	461d      	mov	r5, r3
 8004382:	b096      	sub	sp, #88	; 0x58
 8004384:	da07      	bge.n	8004396 <__swhatbuf_r+0x22>
 8004386:	2300      	movs	r3, #0
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	89b3      	ldrh	r3, [r6, #12]
 800438c:	061a      	lsls	r2, r3, #24
 800438e:	d410      	bmi.n	80043b2 <__swhatbuf_r+0x3e>
 8004390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004394:	e00e      	b.n	80043b4 <__swhatbuf_r+0x40>
 8004396:	466a      	mov	r2, sp
 8004398:	f000 f8b0 	bl	80044fc <_fstat_r>
 800439c:	2800      	cmp	r0, #0
 800439e:	dbf2      	blt.n	8004386 <__swhatbuf_r+0x12>
 80043a0:	9a01      	ldr	r2, [sp, #4]
 80043a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043aa:	425a      	negs	r2, r3
 80043ac:	415a      	adcs	r2, r3
 80043ae:	602a      	str	r2, [r5, #0]
 80043b0:	e7ee      	b.n	8004390 <__swhatbuf_r+0x1c>
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	2000      	movs	r0, #0
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	b016      	add	sp, #88	; 0x58
 80043ba:	bd70      	pop	{r4, r5, r6, pc}

080043bc <__smakebuf_r>:
 80043bc:	898b      	ldrh	r3, [r1, #12]
 80043be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043c0:	079d      	lsls	r5, r3, #30
 80043c2:	4606      	mov	r6, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	d507      	bpl.n	80043d8 <__smakebuf_r+0x1c>
 80043c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	2301      	movs	r3, #1
 80043d2:	6163      	str	r3, [r4, #20]
 80043d4:	b002      	add	sp, #8
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	466a      	mov	r2, sp
 80043da:	ab01      	add	r3, sp, #4
 80043dc:	f7ff ffca 	bl	8004374 <__swhatbuf_r>
 80043e0:	9900      	ldr	r1, [sp, #0]
 80043e2:	4605      	mov	r5, r0
 80043e4:	4630      	mov	r0, r6
 80043e6:	f7fe ff7f 	bl	80032e8 <_malloc_r>
 80043ea:	b948      	cbnz	r0, 8004400 <__smakebuf_r+0x44>
 80043ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f0:	059a      	lsls	r2, r3, #22
 80043f2:	d4ef      	bmi.n	80043d4 <__smakebuf_r+0x18>
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	e7e3      	b.n	80043c8 <__smakebuf_r+0xc>
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <__smakebuf_r+0x7c>)
 8004402:	62b3      	str	r3, [r6, #40]	; 0x28
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	6020      	str	r0, [r4, #0]
 8004408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	9b00      	ldr	r3, [sp, #0]
 8004410:	6120      	str	r0, [r4, #16]
 8004412:	6163      	str	r3, [r4, #20]
 8004414:	9b01      	ldr	r3, [sp, #4]
 8004416:	b15b      	cbz	r3, 8004430 <__smakebuf_r+0x74>
 8004418:	4630      	mov	r0, r6
 800441a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800441e:	f000 f87f 	bl	8004520 <_isatty_r>
 8004422:	b128      	cbz	r0, 8004430 <__smakebuf_r+0x74>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	89a0      	ldrh	r0, [r4, #12]
 8004432:	4305      	orrs	r5, r0
 8004434:	81a5      	strh	r5, [r4, #12]
 8004436:	e7cd      	b.n	80043d4 <__smakebuf_r+0x18>
 8004438:	0800349d 	.word	0x0800349d

0800443c <memchr>:
 800443c:	4603      	mov	r3, r0
 800443e:	b510      	push	{r4, lr}
 8004440:	b2c9      	uxtb	r1, r1
 8004442:	4402      	add	r2, r0
 8004444:	4293      	cmp	r3, r2
 8004446:	4618      	mov	r0, r3
 8004448:	d101      	bne.n	800444e <memchr+0x12>
 800444a:	2000      	movs	r0, #0
 800444c:	e003      	b.n	8004456 <memchr+0x1a>
 800444e:	7804      	ldrb	r4, [r0, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	428c      	cmp	r4, r1
 8004454:	d1f6      	bne.n	8004444 <memchr+0x8>
 8004456:	bd10      	pop	{r4, pc}

08004458 <memmove>:
 8004458:	4288      	cmp	r0, r1
 800445a:	b510      	push	{r4, lr}
 800445c:	eb01 0402 	add.w	r4, r1, r2
 8004460:	d902      	bls.n	8004468 <memmove+0x10>
 8004462:	4284      	cmp	r4, r0
 8004464:	4623      	mov	r3, r4
 8004466:	d807      	bhi.n	8004478 <memmove+0x20>
 8004468:	1e43      	subs	r3, r0, #1
 800446a:	42a1      	cmp	r1, r4
 800446c:	d008      	beq.n	8004480 <memmove+0x28>
 800446e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004476:	e7f8      	b.n	800446a <memmove+0x12>
 8004478:	4601      	mov	r1, r0
 800447a:	4402      	add	r2, r0
 800447c:	428a      	cmp	r2, r1
 800447e:	d100      	bne.n	8004482 <memmove+0x2a>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800448a:	e7f7      	b.n	800447c <memmove+0x24>

0800448c <_realloc_r>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	4607      	mov	r7, r0
 8004490:	4614      	mov	r4, r2
 8004492:	460e      	mov	r6, r1
 8004494:	b921      	cbnz	r1, 80044a0 <_realloc_r+0x14>
 8004496:	4611      	mov	r1, r2
 8004498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800449c:	f7fe bf24 	b.w	80032e8 <_malloc_r>
 80044a0:	b922      	cbnz	r2, 80044ac <_realloc_r+0x20>
 80044a2:	f7fe fed5 	bl	8003250 <_free_r>
 80044a6:	4625      	mov	r5, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ac:	f000 f848 	bl	8004540 <_malloc_usable_size_r>
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d20f      	bcs.n	80044d4 <_realloc_r+0x48>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4638      	mov	r0, r7
 80044b8:	f7fe ff16 	bl	80032e8 <_malloc_r>
 80044bc:	4605      	mov	r5, r0
 80044be:	2800      	cmp	r0, #0
 80044c0:	d0f2      	beq.n	80044a8 <_realloc_r+0x1c>
 80044c2:	4631      	mov	r1, r6
 80044c4:	4622      	mov	r2, r4
 80044c6:	f7fe fead 	bl	8003224 <memcpy>
 80044ca:	4631      	mov	r1, r6
 80044cc:	4638      	mov	r0, r7
 80044ce:	f7fe febf 	bl	8003250 <_free_r>
 80044d2:	e7e9      	b.n	80044a8 <_realloc_r+0x1c>
 80044d4:	4635      	mov	r5, r6
 80044d6:	e7e7      	b.n	80044a8 <_realloc_r+0x1c>

080044d8 <_read_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	2200      	movs	r2, #0
 80044e2:	4d05      	ldr	r5, [pc, #20]	; (80044f8 <_read_r+0x20>)
 80044e4:	602a      	str	r2, [r5, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f7fc f848 	bl	800057c <_read>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d102      	bne.n	80044f6 <_read_r+0x1e>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	b103      	cbz	r3, 80044f6 <_read_r+0x1e>
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
 80044f8:	20000688 	.word	0x20000688

080044fc <_fstat_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	2300      	movs	r3, #0
 8004500:	4d06      	ldr	r5, [pc, #24]	; (800451c <_fstat_r+0x20>)
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	f7fc f87b 	bl	8000604 <_fstat>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d102      	bne.n	8004518 <_fstat_r+0x1c>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b103      	cbz	r3, 8004518 <_fstat_r+0x1c>
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	bd38      	pop	{r3, r4, r5, pc}
 800451a:	bf00      	nop
 800451c:	20000688 	.word	0x20000688

08004520 <_isatty_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	2300      	movs	r3, #0
 8004524:	4d05      	ldr	r5, [pc, #20]	; (800453c <_isatty_r+0x1c>)
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fc f879 	bl	8000622 <_isatty>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_isatty_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_isatty_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000688 	.word	0x20000688

08004540 <_malloc_usable_size_r>:
 8004540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004544:	1f18      	subs	r0, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfbc      	itt	lt
 800454a:	580b      	ldrlt	r3, [r1, r0]
 800454c:	18c0      	addlt	r0, r0, r3
 800454e:	4770      	bx	lr

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
