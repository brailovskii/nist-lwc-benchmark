
lwc_nist_benchmark_stm32f100rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c74  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e8  080042e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080042e8  080042e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042e8  080042e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  20000070  08004360  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08004360  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea8a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a5  00000000  00000000  0002eb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00030fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00031c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001307f  00000000  00000000  00032850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e228  00000000  00000000  000458cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070034  00000000  00000000  00053af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  000c3b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e2c 	.word	0x08003e2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003e2c 	.word	0x08003e2c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022a:	699a      	ldr	r2, [r3, #24]
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4313      	orrs	r3, r2
 8000232:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4013      	ands	r3, r2
 800023c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023e:	68fb      	ldr	r3, [r7, #12]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fa7d 	bl	8000752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f80e 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f8ac 	bl	80003b8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000260:	f000 f84a 	bl	80002f8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000264:	f000 f87e 	bl	8000364 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000268:	f002 f9dc 	bl	8002624 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <main+0x24>)
 800026e:	f000 fac9 	bl	8000804 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 8000272:	e7f9      	b.n	8000268 <main+0x18>
 8000274:	000f4240 	.word	0x000f4240

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fc70 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fd59 	bl	8000d70 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c4:	f000 f87f 	bl	80003c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 ffc5 	bl	8001270 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002ec:	f000 f86b 	bl	80003c6 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3740      	adds	r7, #64	; 0x40
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fe:	463b      	mov	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_TIM6_Init+0x64>)
 8000308:	4a15      	ldr	r2, [pc, #84]	; (8000360 <MX_TIM6_Init+0x68>)
 800030a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <MX_TIM6_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_TIM6_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_TIM6_Init+0x64>)
 800031a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800031e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_TIM6_Init+0x64>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000326:	480d      	ldr	r0, [pc, #52]	; (800035c <MX_TIM6_Init+0x64>)
 8000328:	f001 f90e 	bl	8001548 <HAL_TIM_Base_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000332:	f000 f848 	bl	80003c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	4619      	mov	r1, r3
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_TIM6_Init+0x64>)
 8000344:	f001 fb84 	bl	8001a50 <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800034e:	f000 f83a 	bl	80003c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	200005e8 	.word	0x200005e8
 8000360:	40001000 	.word	0x40001000

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_USART1_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800039c:	f001 fbd0 	bl	8001b40 <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 f80e 	bl	80003c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200005a8 	.word	0x200005a8
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80003bc:	2004      	movs	r0, #4
 80003be:	f7ff ff2f 	bl	8000220 <LL_APB2_GRP1_EnableClock>

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ca:	b672      	cpsid	i
}
 80003cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ce:	e7fe      	b.n	80003ce <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <HAL_TIM_Base_MspInit+0x44>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d113      	bne.n	800046e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0c      	ldr	r2, [pc, #48]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 800044c:	f043 0310 	orr.w	r3, r3, #16
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_TIM_Base_MspInit+0x48>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 0310 	and.w	r3, r3, #16
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2036      	movs	r0, #54	; 0x36
 8000464:	f000 fac9 	bl	80009fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000468:	2036      	movs	r0, #54	; 0x36
 800046a:	f000 fae2 	bl	8000a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40001000 	.word	0x40001000
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <HAL_UART_MspInit+0x8c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d131      	bne.n	8000504 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <HAL_UART_MspInit+0x94>)
 80004e6:	f000 fabf 	bl	8000a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_MspInit+0x94>)
 8000500:	f000 fab2 	bl	8000a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40013800 	.word	0x40013800
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f935 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <TIM6_DAC_IRQHandler+0x10>)
 800056e:	f001 f8c3 	bl	80016f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200005e8 	.word	0x200005e8

0800057c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	return 1;
 8000580:	2301      	movs	r3, #1
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <_kill>:

int _kill(int pid, int sig)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000594:	f002 faa0 	bl	8002ad8 <__errno>
 8000598:	4603      	mov	r3, r0
 800059a:	2216      	movs	r2, #22
 800059c:	601a      	str	r2, [r3, #0]
	return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_exit>:

void _exit (int status)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005b2:	f04f 31ff 	mov.w	r1, #4294967295
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff ffe7 	bl	800058a <_kill>
	while (1) {}		/* Make sure we hang here */
 80005bc:	e7fe      	b.n	80005bc <_exit+0x12>

080005be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b086      	sub	sp, #24
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e00a      	b.n	80005e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005d0:	f3af 8000 	nop.w
 80005d4:	4601      	mov	r1, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	b2ca      	uxtb	r2, r1
 80005de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dbf0      	blt.n	80005d0 <_read+0x12>
	}

return len;
 80005ee:	687b      	ldr	r3, [r7, #4]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e009      	b.n	800061e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	60ba      	str	r2, [r7, #8]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	3301      	adds	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	dbf1      	blt.n	800060a <_write+0x12>
	}
	return len;
 8000626:	687b      	ldr	r3, [r7, #4]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <_close>:

int _close(int file)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	return -1;
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000656:	605a      	str	r2, [r3, #4]
	return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <_isatty>:

int _isatty(int file)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	return 1;
 800066c:	2301      	movs	r3, #1
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <_sbrk+0x5c>)
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <_sbrk+0x60>)
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <_sbrk+0x64>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <_sbrk+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d207      	bcs.n	80006d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c0:	f002 fa0a 	bl	8002ad8 <__errno>
 80006c4:	4603      	mov	r3, r0
 80006c6:	220c      	movs	r2, #12
 80006c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e009      	b.n	80006e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <_sbrk+0x64>)
 80006e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20002000 	.word	0x20002000
 80006f0:	00000400 	.word	0x00000400
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	20000678 	.word	0x20000678

080006fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800070a:	e003      	b.n	8000714 <LoopCopyDataInit>

0800070c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800070e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000712:	3104      	adds	r1, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800071a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800071c:	d3f6      	bcc.n	800070c <CopyDataInit>
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000720:	e002      	b.n	8000728 <LoopFillZerobss>

08000722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000724:	f842 3b04 	str.w	r3, [r2], #4

08000728 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800072c:	d3f9      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072e:	f7ff ffe5 	bl	80006fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f002 f9e9 	bl	8002b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fd8b 	bl	8000250 <main>
  bx lr
 800073a:	4770      	bx	lr
  ldr r3, =_sidata
 800073c:	080042f0 	.word	0x080042f0
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000744:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000748:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800074c:	20000678 	.word	0x20000678

08000750 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_IRQHandler>

08000752 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000756:	2003      	movs	r0, #3
 8000758:	f000 f944 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 f805 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000762:	f7ff fe35 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f95f 	bl	8000a4e <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 f927 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a03      	ldr	r2, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000630 	.word	0x20000630

080007f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	20000630 	.word	0x20000630

08000804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff fff0 	bl	80007f0 <HAL_GetTick>
 8000810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800081c:	d005      	beq.n	800082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_Delay+0x44>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4413      	add	r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082a:	bf00      	nop
 800082c:	f7ff ffe0 	bl	80007f0 <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f7      	bhi.n	800082c <HAL_Delay+0x28>
  {
  }
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db0b      	blt.n	80008da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	4906      	ldr	r1, [pc, #24]	; (80008e4 <__NVIC_EnableIRQ+0x34>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	2001      	movs	r0, #1
 80008d2:	fa00 f202 	lsl.w	r2, r0, r2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff90 	bl	80008e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff2d 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff42 	bl	8000894 <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff90 	bl	800093c <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5f 	bl	80008e8 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff35 	bl	80008b0 <__NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffa2 	bl	80009a0 <SysTick_Config>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b08b      	sub	sp, #44	; 0x2c
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7a:	e169      	b.n	8000d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f040 8158 	bne.w	8000d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	4a9a      	ldr	r2, [pc, #616]	; (8000d08 <HAL_GPIO_Init+0x2a0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d05e      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a98      	ldr	r2, [pc, #608]	; (8000d08 <HAL_GPIO_Init+0x2a0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d875      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000aaa:	4a98      	ldr	r2, [pc, #608]	; (8000d0c <HAL_GPIO_Init+0x2a4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d058      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a96      	ldr	r2, [pc, #600]	; (8000d0c <HAL_GPIO_Init+0x2a4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d86f      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ab6:	4a96      	ldr	r2, [pc, #600]	; (8000d10 <HAL_GPIO_Init+0x2a8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d052      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000abc:	4a94      	ldr	r2, [pc, #592]	; (8000d10 <HAL_GPIO_Init+0x2a8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d869      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ac2:	4a94      	ldr	r2, [pc, #592]	; (8000d14 <HAL_GPIO_Init+0x2ac>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d04c      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a92      	ldr	r2, [pc, #584]	; (8000d14 <HAL_GPIO_Init+0x2ac>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d863      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ace:	4a92      	ldr	r2, [pc, #584]	; (8000d18 <HAL_GPIO_Init+0x2b0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d046      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a90      	ldr	r2, [pc, #576]	; (8000d18 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d85d      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d82a      	bhi.n	8000b34 <HAL_GPIO_Init+0xcc>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d859      	bhi.n	8000b96 <HAL_GPIO_Init+0x12e>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <HAL_GPIO_Init+0x80>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b3d 	.word	0x08000b3d
 8000af0:	08000b4f 	.word	0x08000b4f
 8000af4:	08000b91 	.word	0x08000b91
 8000af8:	08000b97 	.word	0x08000b97
 8000afc:	08000b97 	.word	0x08000b97
 8000b00:	08000b97 	.word	0x08000b97
 8000b04:	08000b97 	.word	0x08000b97
 8000b08:	08000b97 	.word	0x08000b97
 8000b0c:	08000b97 	.word	0x08000b97
 8000b10:	08000b97 	.word	0x08000b97
 8000b14:	08000b97 	.word	0x08000b97
 8000b18:	08000b97 	.word	0x08000b97
 8000b1c:	08000b97 	.word	0x08000b97
 8000b20:	08000b97 	.word	0x08000b97
 8000b24:	08000b97 	.word	0x08000b97
 8000b28:	08000b97 	.word	0x08000b97
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b59 	.word	0x08000b59
 8000b34:	4a79      	ldr	r2, [pc, #484]	; (8000d1c <HAL_GPIO_Init+0x2b4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d013      	beq.n	8000b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b3a:	e02c      	b.n	8000b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e029      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	e024      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	3308      	adds	r3, #8
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e01f      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e01a      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e013      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d105      	bne.n	8000b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	611a      	str	r2, [r3, #16]
          break;
 8000b82:	e009      	b.n	8000b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b84:	2308      	movs	r3, #8
 8000b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	615a      	str	r2, [r3, #20]
          break;
 8000b8e:	e003      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
          break;
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_Init+0x130>
          break;
 8000b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	2bff      	cmp	r3, #255	; 0xff
 8000b9c:	d801      	bhi.n	8000ba2 <HAL_GPIO_Init+0x13a>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	e001      	b.n	8000ba6 <HAL_GPIO_Init+0x13e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2bff      	cmp	r3, #255	; 0xff
 8000bac:	d802      	bhi.n	8000bb4 <HAL_GPIO_Init+0x14c>
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x152>
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	3b08      	subs	r3, #8
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	6a39      	ldr	r1, [r7, #32]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80b1 	beq.w	8000d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be8:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a4c      	ldr	r2, [pc, #304]	; (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <HAL_GPIO_Init+0x2b8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c00:	4a48      	ldr	r2, [pc, #288]	; (8000d24 <HAL_GPIO_Init+0x2bc>)
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <HAL_GPIO_Init+0x2c0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d013      	beq.n	8000c54 <HAL_GPIO_Init+0x1ec>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3f      	ldr	r2, [pc, #252]	; (8000d2c <HAL_GPIO_Init+0x2c4>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d00d      	beq.n	8000c50 <HAL_GPIO_Init+0x1e8>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3e      	ldr	r2, [pc, #248]	; (8000d30 <HAL_GPIO_Init+0x2c8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d007      	beq.n	8000c4c <HAL_GPIO_Init+0x1e4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <HAL_GPIO_Init+0x2cc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d101      	bne.n	8000c48 <HAL_GPIO_Init+0x1e0>
 8000c44:	2303      	movs	r3, #3
 8000c46:	e006      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e004      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c50:	2301      	movs	r3, #1
 8000c52:	e000      	b.n	8000c56 <HAL_GPIO_Init+0x1ee>
 8000c54:	2300      	movs	r3, #0
 8000c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c58:	f002 0203 	and.w	r2, r2, #3
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	4093      	lsls	r3, r2
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c66:	492f      	ldr	r1, [pc, #188]	; (8000d24 <HAL_GPIO_Init+0x2bc>)
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	492c      	ldr	r1, [pc, #176]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	600b      	str	r3, [r1, #0]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4928      	ldr	r1, [pc, #160]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4922      	ldr	r1, [pc, #136]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	491e      	ldr	r1, [pc, #120]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	4918      	ldr	r1, [pc, #96]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4914      	ldr	r1, [pc, #80]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d021      	beq.n	8000d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	490e      	ldr	r1, [pc, #56]	; (8000d38 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60cb      	str	r3, [r1, #12]
 8000d04:	e021      	b.n	8000d4a <HAL_GPIO_Init+0x2e2>
 8000d06:	bf00      	nop
 8000d08:	10320000 	.word	0x10320000
 8000d0c:	10310000 	.word	0x10310000
 8000d10:	10220000 	.word	0x10220000
 8000d14:	10210000 	.word	0x10210000
 8000d18:	10120000 	.word	0x10120000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_GPIO_Init+0x304>)
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4909      	ldr	r1, [pc, #36]	; (8000d6c <HAL_GPIO_Init+0x304>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f ae8e 	bne.w	8000a7c <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	372c      	adds	r7, #44	; 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e26c      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8087 	beq.w	8000e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d00c      	beq.n	8000db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d9c:	4b8f      	ldr	r3, [pc, #572]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d112      	bne.n	8000dce <HAL_RCC_OscConfig+0x5e>
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db4:	d10b      	bne.n	8000dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	4b89      	ldr	r3, [pc, #548]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d06c      	beq.n	8000e9c <HAL_RCC_OscConfig+0x12c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d168      	bne.n	8000e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e246      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd6:	d106      	bne.n	8000de6 <HAL_RCC_OscConfig+0x76>
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a7f      	ldr	r2, [pc, #508]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e02e      	b.n	8000e44 <HAL_RCC_OscConfig+0xd4>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x98>
 8000dee:	4b7b      	ldr	r3, [pc, #492]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a7a      	ldr	r2, [pc, #488]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b78      	ldr	r3, [pc, #480]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a77      	ldr	r2, [pc, #476]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e01d      	b.n	8000e44 <HAL_RCC_OscConfig+0xd4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0xbc>
 8000e12:	4b72      	ldr	r3, [pc, #456]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a71      	ldr	r2, [pc, #452]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6e      	ldr	r2, [pc, #440]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0xd4>
 8000e2c:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6a      	ldr	r2, [pc, #424]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b68      	ldr	r3, [pc, #416]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a67      	ldr	r2, [pc, #412]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fcd0 	bl	80007f0 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fccc 	bl	80007f0 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e1fa      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	4b5d      	ldr	r3, [pc, #372]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0xe4>
 8000e72:	e014      	b.n	8000e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fcbc 	bl	80007f0 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fcb8 	bl	80007f0 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e1e6      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x10c>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d063      	beq.n	8000f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d11c      	bne.n	8000efc <HAL_RCC_OscConfig+0x18c>
 8000ec2:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d116      	bne.n	8000efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d005      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x176>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e1ba      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4939      	ldr	r1, [pc, #228]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	e03a      	b.n	8000f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d020      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc71 	bl	80007f0 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fc6d 	bl	80007f0 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e19b      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f0      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4927      	ldr	r1, [pc, #156]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
 8000f44:	e015      	b.n	8000f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fc50 	bl	80007f0 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f54:	f7ff fc4c 	bl	80007f0 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e17a      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d03a      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d019      	beq.n	8000fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fc30 	bl	80007f0 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f94:	f7ff fc2c 	bl	80007f0 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e15a      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f000 faaa 	bl	800150c <RCC_Delay>
 8000fb8:	e01c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fc16 	bl	80007f0 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc6:	e00f      	b.n	8000fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fc12 	bl	80007f0 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d908      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e140      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	42420000 	.word	0x42420000
 8000fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe8:	4b9e      	ldr	r3, [pc, #632]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e9      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a6 	beq.w	800114e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001006:	4b97      	ldr	r3, [pc, #604]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b94      	ldr	r3, [pc, #592]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a93      	ldr	r2, [pc, #588]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800102a:	2301      	movs	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102e:	4b8e      	ldr	r3, [pc, #568]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001036:	2b00      	cmp	r3, #0
 8001038:	d118      	bne.n	800106c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103a:	4b8b      	ldr	r3, [pc, #556]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a8a      	ldr	r2, [pc, #552]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001046:	f7ff fbd3 	bl	80007f0 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104e:	f7ff fbcf 	bl	80007f0 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e0fd      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001060:	4b81      	ldr	r3, [pc, #516]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x312>
 8001074:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a7a      	ldr	r2, [pc, #488]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6213      	str	r3, [r2, #32]
 8001080:	e02d      	b.n	80010de <HAL_RCC_OscConfig+0x36e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x334>
 800108a:	4b76      	ldr	r3, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a75      	ldr	r2, [pc, #468]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	4b73      	ldr	r3, [pc, #460]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a72      	ldr	r2, [pc, #456]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	e01c      	b.n	80010de <HAL_RCC_OscConfig+0x36e>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x356>
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4a6c      	ldr	r2, [pc, #432]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6213      	str	r3, [r2, #32]
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a69      	ldr	r2, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6213      	str	r3, [r2, #32]
 80010c4:	e00b      	b.n	80010de <HAL_RCC_OscConfig+0x36e>
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a66      	ldr	r2, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	4b64      	ldr	r3, [pc, #400]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a63      	ldr	r2, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	f023 0304 	bic.w	r3, r3, #4
 80010dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d015      	beq.n	8001112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb83 	bl	80007f0 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb7f 	bl	80007f0 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e0ab      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001104:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0ee      	beq.n	80010ee <HAL_RCC_OscConfig+0x37e>
 8001110:	e014      	b.n	800113c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001112:	f7ff fb6d 	bl	80007f0 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001118:	e00a      	b.n	8001130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111a:	f7ff fb69 	bl	80007f0 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f241 3288 	movw	r2, #5000	; 0x1388
 8001128:	4293      	cmp	r3, r2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e095      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ee      	bne.n	800111a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d105      	bne.n	800114e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a47      	ldr	r2, [pc, #284]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8081 	beq.w	800125a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d061      	beq.n	8001228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d146      	bne.n	80011fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_RCC_OscConfig+0x4fc>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fb3d 	bl	80007f0 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117a:	f7ff fb39 	bl	80007f0 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e067      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d108      	bne.n	80011b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a6:	f023 020f 	bic.w	r2, r3, #15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	492d      	ldr	r1, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a19      	ldr	r1, [r3, #32]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	430b      	orrs	r3, r1
 80011c6:	4927      	ldr	r1, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_RCC_OscConfig+0x4fc>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fb0d 	bl	80007f0 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff fb09 	bl	80007f0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e037      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x46a>
 80011f8:	e02f      	b.n	800125a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_RCC_OscConfig+0x4fc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff faf6 	bl	80007f0 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001208:	f7ff faf2 	bl	80007f0 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e020      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x498>
 8001226:	e018      	b.n	800125a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e013      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	429a      	cmp	r2, r3
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	40007000 	.word	0x40007000
 800126c:	42420060 	.word	0x42420060

08001270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0a0      	b.n	80013c6 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80012a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b4:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80012ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4940      	ldr	r1, [pc, #256]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d040      	beq.n	8001360 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d115      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e067      	b.n	80013c6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e05b      	b.n	80013c6 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e053      	b.n	80013c6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f023 0203 	bic.w	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4929      	ldr	r1, [pc, #164]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fa5e 	bl	80007f0 <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001336:	e00a      	b.n	800134e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001338:	f7ff fa5a 	bl	80007f0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	; 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e03b      	b.n	80013c6 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 020c 	and.w	r2, r3, #12
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d1eb      	bne.n	8001338 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4915      	ldr	r1, [pc, #84]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	490d      	ldr	r1, [pc, #52]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139e:	f000 f81f 	bl	80013e0 <HAL_RCC_GetSysClockFreq>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RCC_ClockConfig+0x160>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4909      	ldr	r1, [pc, #36]	; (80013d4 <HAL_RCC_ClockConfig+0x164>)
 80013b0:	5ccb      	ldrb	r3, [r1, r3]
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_RCC_ClockConfig+0x168>)
 80013b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_RCC_ClockConfig+0x16c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f9d4 	bl	800076c <HAL_InitTick>

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	080040d0 	.word	0x080040d0
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e0:	b490      	push	{r4, r7}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013e8:	f107 0414 	add.w	r4, r7, #20
 80013ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f4:	1d3c      	adds	r4, r7, #4
 80013f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b04      	cmp	r3, #4
 800141e:	d002      	beq.n	8001426 <HAL_RCC_GetSysClockFreq+0x46>
 8001420:	2b08      	cmp	r3, #8
 8001422:	d003      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x4c>
 8001424:	e02c      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800142a:	e02c      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	0c9b      	lsrs	r3, r3, #18
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001438:	4413      	add	r3, r2
 800143a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d012      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_RCC_GetSysClockFreq+0xbc>)
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001456:	4413      	add	r3, r2
 8001458:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001462:	fb02 f203 	mul.w	r2, r2, r3
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
 800146e:	e004      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800147e:	e002      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001488:	4618      	mov	r0, r3
 800148a:	3738      	adds	r7, #56	; 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bc90      	pop	{r4, r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	08003e44 	.word	0x08003e44
 8001498:	08003e54 	.word	0x08003e54
 800149c:	40021000 	.word	0x40021000
 80014a0:	007a1200 	.word	0x007a1200
 80014a4:	003d0900 	.word	0x003d0900

080014a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c0:	f7ff fff2 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	080040e0 	.word	0x080040e0

080014e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0adb      	lsrs	r3, r3, #11
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4903      	ldr	r1, [pc, #12]	; (8001508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	080040e0 	.word	0x080040e0

0800150c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <RCC_Delay+0x34>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <RCC_Delay+0x38>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0a5b      	lsrs	r3, r3, #9
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001528:	bf00      	nop
  }
  while (Delay --);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	60fa      	str	r2, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f9      	bne.n	8001528 <RCC_Delay+0x1c>
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000000 	.word	0x20000000
 8001544:	10624dd3 	.word	0x10624dd3

08001548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e041      	b.n	80015de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7fe ff60 	bl	8000434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3304      	adds	r3, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f000 f9e2 	bl	8001950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d001      	beq.n	8001600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e03f      	b.n	8001680 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_TIM_Base_Start_IT+0xa4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_TIM_Base_Start_IT+0x62>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162a:	d00e      	beq.n	800164a <HAL_TIM_Base_Start_IT+0x62>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <HAL_TIM_Base_Start_IT+0xa8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d009      	beq.n	800164a <HAL_TIM_Base_Start_IT+0x62>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <HAL_TIM_Base_Start_IT+0xac>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d004      	beq.n	800164a <HAL_TIM_Base_Start_IT+0x62>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_TIM_Base_Start_IT+0xb0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d111      	bne.n	800166e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d010      	beq.n	800167e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166c:	e007      	b.n	800167e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40000400 	.word	0x40000400
 8001694:	40000800 	.word	0x40000800
 8001698:	40014000 	.word	0x40014000

0800169c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10f      	bne.n	80016e4 <HAL_TIM_Base_Stop_IT+0x48>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a1a      	ldr	r2, [r3, #32]
 80016ca:	f240 4344 	movw	r3, #1092	; 0x444
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_TIM_Base_Stop_IT+0x48>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d122      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0202 	mvn.w	r2, #2
 8001724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f8ed 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 8001740:	e005      	b.n	800174e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8e0 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8ef 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b04      	cmp	r3, #4
 8001760:	d122      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b04      	cmp	r3, #4
 800176e:	d11b      	bne.n	80017a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0204 	mvn.w	r2, #4
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f8c3 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8b6 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8c5 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d122      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d11b      	bne.n	80017fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0208 	mvn.w	r2, #8
 80017cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2204      	movs	r2, #4
 80017d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f899 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 80017e8:	e005      	b.n	80017f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f88c 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f89b 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b10      	cmp	r3, #16
 8001808:	d122      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b10      	cmp	r3, #16
 8001816:	d11b      	bne.n	8001850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0210 	mvn.w	r2, #16
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2208      	movs	r2, #8
 8001826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f86f 	bl	800191a <HAL_TIM_IC_CaptureCallback>
 800183c:	e005      	b.n	800184a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f862 	bl	8001908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f871 	bl	800192c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0201 	mvn.w	r2, #1
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f001 f84a 	bl	8002910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f943 	bl	8001b2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c0:	2b40      	cmp	r3, #64	; 0x40
 80018c2:	d107      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f835 	bl	800193e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b20      	cmp	r3, #32
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0220 	mvn.w	r2, #32
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f90e 	bl	8001b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a35      	ldr	r2, [pc, #212]	; (8001a38 <TIM_Base_SetConfig+0xe8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00b      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196e:	d007      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <TIM_Base_SetConfig+0xec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <TIM_Base_SetConfig+0x30>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <TIM_Base_SetConfig+0xf0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d108      	bne.n	8001992 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <TIM_Base_SetConfig+0xe8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d017      	beq.n	80019ca <TIM_Base_SetConfig+0x7a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d013      	beq.n	80019ca <TIM_Base_SetConfig+0x7a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <TIM_Base_SetConfig+0xec>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00f      	beq.n	80019ca <TIM_Base_SetConfig+0x7a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <TIM_Base_SetConfig+0xf0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00b      	beq.n	80019ca <TIM_Base_SetConfig+0x7a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <TIM_Base_SetConfig+0xf4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <TIM_Base_SetConfig+0x7a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <TIM_Base_SetConfig+0xf8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d003      	beq.n	80019ca <TIM_Base_SetConfig+0x7a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <TIM_Base_SetConfig+0xfc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d108      	bne.n	80019dc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <TIM_Base_SetConfig+0xe8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00b      	beq.n	8001a20 <TIM_Base_SetConfig+0xd0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <TIM_Base_SetConfig+0xf4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <TIM_Base_SetConfig+0xd0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <TIM_Base_SetConfig+0xf8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d003      	beq.n	8001a20 <TIM_Base_SetConfig+0xd0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <TIM_Base_SetConfig+0xfc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d103      	bne.n	8001a28 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	615a      	str	r2, [r3, #20]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40000800 	.word	0x40000800
 8001a44:	40014000 	.word	0x40014000
 8001a48:	40014400 	.word	0x40014400
 8001a4c:	40014800 	.word	0x40014800

08001a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e04b      	b.n	8001b00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d10c      	bne.n	8001aee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800
 8001b18:	40014000 	.word	0x40014000

08001b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e03f      	b.n	8001bd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fc8a 	bl	8000480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f905 	bl	8001d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b08a      	sub	sp, #40	; 0x28
 8001bde:	af02      	add	r7, sp, #8
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d17c      	bne.n	8001cf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_UART_Transmit+0x2c>
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e075      	b.n	8001cf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_UART_Transmit+0x3e>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e06e      	b.n	8001cf6 <HAL_UART_Transmit+0x11c>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2221      	movs	r2, #33	; 0x21
 8001c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c2e:	f7fe fddf 	bl	80007f0 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c48:	d108      	bne.n	8001c5c <HAL_UART_Transmit+0x82>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	e003      	b.n	8001c64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c6c:	e02a      	b.n	8001cc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f840 	bl	8001cfe <UART_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e036      	b.n	8001cf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e007      	b.n	8001cb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1cf      	bne.n	8001c6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2140      	movs	r1, #64	; 0x40
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f810 	bl	8001cfe <UART_WaitOnFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e006      	b.n	8001cf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0e:	e02c      	b.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d16:	d028      	beq.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <UART_WaitOnFlagUntilTimeout+0x30>
 8001d1e:	f7fe fd67 	bl	80007f0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d21d      	bcs.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e00f      	b.n	8001d8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4013      	ands	r3, r2
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	bf0c      	ite	eq
 8001d7a:	2301      	moveq	r3, #1
 8001d7c:	2300      	movne	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d0c3      	beq.n	8001d10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001dd4:	f023 030c 	bic.w	r3, r3, #12
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a55      	ldr	r2, [pc, #340]	; (8001f54 <UART_SetConfig+0x1c0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d103      	bne.n	8001e0a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e02:	f7ff fb6f 	bl	80014e4 <HAL_RCC_GetPCLK2Freq>
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	e002      	b.n	8001e10 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e0a:	f7ff fb57 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8001e0e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e18:	d14c      	bne.n	8001eb4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009a      	lsls	r2, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	0119      	lsls	r1, r3, #4
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009a      	lsls	r2, r3, #2
 8001e44:	441a      	add	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001e52:	fba3 0302 	umull	r0, r3, r3, r2
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2064      	movs	r0, #100	; 0x64
 8001e5a:	fb00 f303 	mul.w	r3, r0, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	3332      	adds	r3, #50	; 0x32
 8001e64:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e72:	4419      	add	r1, r3
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	441a      	add	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001e8c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	fb00 f303 	mul.w	r3, r0, r3
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	3332      	adds	r3, #50	; 0x32
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	f003 0207 	and.w	r2, r3, #7
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	440a      	add	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8001eb2:	e04a      	b.n	8001f4a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	009a      	lsls	r2, r3, #2
 8001ebe:	441a      	add	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	0119      	lsls	r1, r3, #4
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001eec:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	2064      	movs	r0, #100	; 0x64
 8001ef4:	fb00 f303 	mul.w	r3, r0, r3
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	3332      	adds	r3, #50	; 0x32
 8001efe:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f0a:	4419      	add	r1, r3
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009a      	lsls	r2, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001f24:	fba3 0302 	umull	r0, r3, r3, r2
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	2064      	movs	r0, #100	; 0x64
 8001f2c:	fb00 f303 	mul.w	r3, r0, r3
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	3332      	adds	r3, #50	; 0x32
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <UART_SetConfig+0x1c4>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	f003 020f 	and.w	r2, r3, #15
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	440a      	add	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40013800 	.word	0x40013800
 8001f58:	51eb851f 	.word	0x51eb851f

08001f5c <injectm_ref>:
// The function injectm_ref adds a 16-byte block of the message to the two
// leftmost branches of the state (i.e. to the state-words x0, y0, x1, and y1),
// whereby the block is first ransformed via a linear Feistel function.

void injectm_ref(state_t *state, const uchar_t *msgbytes, int nb)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b08b      	sub	sp, #44	; 0x2c
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t *msgwords = (uint32_t *) msgbytes;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpx = 0, tmpy = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
  int i, j;

  // Since the message block is 16 bytes long, we need to consider only two
  // x-words when computing tmpx and two y-words when computing tmpy.

  for(i = 0; i < MSGBLOCK_WLEN; i += 2) {
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	e013      	b.n	8001fa2 <injectm_ref+0x46>
    tmpx ^= msgwords[i];
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f86:	4053      	eors	r3, r2
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    tmpy ^= msgwords[i+1];
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4413      	add	r3, r2
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a3a      	ldr	r2, [r7, #32]
 8001f98:	4053      	eors	r3, r2
 8001f9a:	623b      	str	r3, [r7, #32]
  for(i = 0; i < MSGBLOCK_WLEN; i += 2) {
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	dde8      	ble.n	8001f7a <injectm_ref+0x1e>
  }
  tmpx = ELL(tmpx);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	041a      	lsls	r2, r3, #16
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	4053      	eors	r3, r2
 8001fb0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpy = ELL(tmpy);
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	4053      	eors	r3, r2
 8001fbe:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001fc2:	623b      	str	r3, [r7, #32]
  // The two leftmost x-words of the state are updated by adding the two
  // x-words of the message and tmpy to them, and the same is done with the two
  // leftmost y-words. The remaining nb/2-2 x-words are updated by just adding
  // tmpy to them, and the same is done with the remaining nb/2-2 y-words.

  for (i = j = 0; i < MSGBLOCK_WLEN/2; i++) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	e02a      	b.n	8002024 <injectm_ref+0xc8>
    state->x[i] ^= (msgwords[j++] ^ tmpy);
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	61ba      	str	r2, [r7, #24]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4413      	add	r3, r2
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	405a      	eors	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	69f9      	ldr	r1, [r7, #28]
 8001fe4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fe8:	ea82 0103 	eor.w	r1, r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    state->y[i] ^= (msgwords[j++] ^ tmpx);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	61ba      	str	r2, [r7, #24]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4413      	add	r3, r2
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	405a      	eors	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	69f9      	ldr	r1, [r7, #28]
 800200a:	3108      	adds	r1, #8
 800200c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002010:	ea82 0103 	eor.w	r1, r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	3208      	adds	r2, #8
 800201a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = j = 0; i < MSGBLOCK_WLEN/2; i++) {
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b01      	cmp	r3, #1
 8002028:	ddd1      	ble.n	8001fce <injectm_ref+0x72>
  }
  for (i = MSGBLOCK_WLEN/2; i < nb/2; i++) {
 800202a:	2302      	movs	r3, #2
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e01a      	b.n	8002066 <injectm_ref+0x10a>
    state->x[i] ^= tmpy;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	ea82 0103 	eor.w	r1, r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    state->y[i] ^= tmpx;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	ea82 0103 	eor.w	r1, r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	3208      	adds	r2, #8
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = MSGBLOCK_WLEN/2; i < nb/2; i++) {
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0fda      	lsrs	r2, r3, #31
 800206a:	4413      	add	r3, r2
 800206c:	105b      	asrs	r3, r3, #1
 800206e:	461a      	mov	r2, r3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	4293      	cmp	r3, r2
 8002074:	dbdc      	blt.n	8002030 <injectm_ref+0xd4>
  }
}
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	372c      	adds	r7, #44	; 0x2c
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <trunc_state>:

// The function trunc_state extracts the four 32-bit words x0, y0, x1, and y1
// from the state and copies these 16 bytes to the array <out>.

void trunc_state(uchar_t *out, const state_t *state)
{
 8002082:	b480      	push	{r7}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  uint32_t *out_words = (uint32_t *) out;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60fb      	str	r3, [r7, #12]
  int i, j;

  for (i = j = 0; j < SQZBLOCK_WLEN; i++) {
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e019      	b.n	80020ce <trunc_state+0x4c>
    out_words[j++] = state->x[i];
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	613a      	str	r2, [r7, #16]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	6979      	ldr	r1, [r7, #20]
 80020aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80020ae:	601a      	str	r2, [r3, #0]
    out_words[j++] = state->y[i];
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	613a      	str	r2, [r7, #16]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	6979      	ldr	r1, [r7, #20]
 80020c0:	3108      	adds	r1, #8
 80020c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80020c6:	601a      	str	r2, [r3, #0]
  for (i = j = 0; j < SQZBLOCK_WLEN; i++) {
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	dde2      	ble.n	800209a <trunc_state+0x18>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <crypto_hash>:

// To ensure compatibility with the SUPERCOP, the below implementation of
// crypto_hash can handle overlapping input and output buffers.

int crypto_hash(uchar_t *out, const uchar_t *in, ullint_t inlen)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b09c      	sub	sp, #112	; 0x70
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	e9c7 2300 	strd	r2, r3, [r7]
  state_t state = { { 0 }, { 0 } };   // State with x, y array initialized to 0
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fd38 	bl	8002b6c <memset>
  uchar_t lastblk[MSGBLOCK_BLEN] = { 0 };   // Buffer for last block of message
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	f107 0318 	add.w	r3, r7, #24
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
  // The type size_t is large enough to contain the size in bytes of any object
  size_t in_blen = (size_t) inlen, hashed_bytes = 0, lastblk_blen;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002110:	2300      	movs	r3, #0
 8002112:	66fb      	str	r3, [r7, #108]	; 0x6c

  // A message exceeding 16 bytes is absorbed in 16-byte blocks. Note that the
  // loop below is not iterated at all when inlen <= 16 bytes.

  while((in_blen - hashed_bytes) > MSGBLOCK_BLEN) {
 8002114:	e012      	b.n	800213c <crypto_hash+0x5c>
    // Add 16 bytes of the message to the state
    injectm_ref(&state, &(in[hashed_bytes]), NUM_BRANCHES);
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211a:	18d1      	adds	r1, r2, r3
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	2208      	movs	r2, #8
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff1a 	bl	8001f5c <injectm_ref>
    // Execute SPARKLE with a slim number of steps
    sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	2208      	movs	r2, #8
 800212e:	2108      	movs	r1, #8
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f965 	bl	8002400 <sparkle_ref>
    hashed_bytes += MSGBLOCK_BLEN;
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002138:	3310      	adds	r3, #16
 800213a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while((in_blen - hashed_bytes) > MSGBLOCK_BLEN) {
 800213c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800213e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b10      	cmp	r3, #16
 8002144:	d8e7      	bhi.n	8002116 <crypto_hash+0x36>
  }

  // The last block can be between 0 and 16 bytes long (it can only be 0 when
  // inlen is 0). It is padded only when its length is shorter than 16 bytes.

  lastblk_blen = in_blen - hashed_bytes;
 8002146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	667b      	str	r3, [r7, #100]	; 0x64
  memcpy(lastblk, &(in[hashed_bytes]), lastblk_blen);
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	18d1      	adds	r1, r2, r3
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fcf8 	bl	8002b50 <memcpy>
  if (lastblk_blen < MSGBLOCK_BLEN) {
 8002160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002162:	2b0f      	cmp	r3, #15
 8002164:	d805      	bhi.n	8002172 <crypto_hash+0x92>
    lastblk[lastblk_blen] = 0x80;
 8002166:	f107 0214 	add.w	r2, r7, #20
 800216a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216c:	4413      	add	r3, r2
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	701a      	strb	r2, [r3, #0]
  }
  // Absorb the (padded) last message block
  injectm_ref(&state, lastblk, NUM_BRANCHES);
 8002172:	f107 0114 	add.w	r1, r7, #20
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	2208      	movs	r2, #8
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff feed 	bl	8001f5c <injectm_ref>
  // Const_M is added to y3, which is state.y[3]
  if (lastblk_blen < MSGBLOCK_BLEN) {
 8002182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d804      	bhi.n	8002192 <crypto_hash+0xb2>
    state.y[(NUM_BRANCHES/2)-1] ^= 0x01000000;
 8002188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218a:	f083 7380 	eor.w	r3, r3, #16777216	; 0x1000000
 800218e:	653b      	str	r3, [r7, #80]	; 0x50
 8002190:	e003      	b.n	800219a <crypto_hash+0xba>
  } else {
    state.y[(NUM_BRANCHES/2)-1] ^= 0x02000000;
 8002192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002194:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
 8002198:	653b      	str	r3, [r7, #80]	; 0x50
  }
  // Execute SPARKLE with a big number of steps
  sparkle_ref(&state, NUM_BRANCHES, STEPS_BIG);
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	220c      	movs	r2, #12
 80021a0:	2108      	movs	r1, #8
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f92c 	bl	8002400 <sparkle_ref>

  // Squeeze to produce the message digest

  trunc_state(out, &state);
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff ff67 	bl	8002082 <trunc_state>
  sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	2208      	movs	r2, #8
 80021ba:	2108      	movs	r1, #8
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f91f 	bl	8002400 <sparkle_ref>
  trunc_state(&(out[SQZBLOCK_BLEN]), &state);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3310      	adds	r3, #16
 80021c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff58 	bl	8002082 <trunc_state>
  sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	2208      	movs	r2, #8
 80021d8:	2108      	movs	r1, #8
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f910 	bl	8002400 <sparkle_ref>
  trunc_state(&(out[2*SQZBLOCK_BLEN]), &state);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3320      	adds	r3, #32
 80021e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff49 	bl	8002082 <trunc_state>

  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3770      	adds	r7, #112	; 0x70
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <linear_layer>:
  0xBB1185EB, 0x4F7C7B57, 0xCFBFA1C8, 0xC2B3293D  \
};


void linear_layer(state_t *state, int nb)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b089      	sub	sp, #36	; 0x24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  int i, b = nb/2;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	0fda      	lsrs	r2, r3, #31
 8002208:	4413      	add	r3, r2
 800220a:	105b      	asrs	r3, r3, #1
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t *x = state->x, *y = state->y;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3320      	adds	r3, #32
 8002216:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;
  
  // Feistel function (adding to y part)
  tmp = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	e00a      	b.n	8002238 <linear_layer+0x3e>
    tmp ^= x[i];
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4053      	eors	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf0      	blt.n	8002222 <linear_layer+0x28>
  tmp = ELL(tmp);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	041a      	lsls	r2, r3, #16
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4053      	eors	r3, r2
 8002248:	ea4f 4333 	mov.w	r3, r3, ror #16
 800224c:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e018      	b.n	8002286 <linear_layer+0x8c>
    y[i+b] ^= (tmp ^ y[i]);
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	405a      	eors	r2, r3
 8002270:	69f8      	ldr	r0, [r7, #28]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4403      	add	r3, r0
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	4403      	add	r3, r0
 800227c:	404a      	eors	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < b; i ++)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	3301      	adds	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	429a      	cmp	r2, r3
 800228c:	dbe2      	blt.n	8002254 <linear_layer+0x5a>
  
  // Feistel function (adding to x part)
  tmp = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e00a      	b.n	80022ae <linear_layer+0xb4>
    tmp ^= y[i];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4053      	eors	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dbf0      	blt.n	8002298 <linear_layer+0x9e>
  tmp = ELL(tmp);
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	041a      	lsls	r2, r3, #16
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4053      	eors	r3, r2
 80022be:	ea4f 4333 	mov.w	r3, r3, ror #16
 80022c2:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	e018      	b.n	80022fc <linear_layer+0x102>
    x[i+b] ^= (tmp ^ x[i]);
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	405a      	eors	r2, r3
 80022e6:	69f8      	ldr	r0, [r7, #28]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4403      	add	r3, r0
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	6938      	ldr	r0, [r7, #16]
 80022f0:	4403      	add	r3, r0
 80022f2:	404a      	eors	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < b; i ++)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbe2      	blt.n	80022ca <linear_layer+0xd0>
  // <------- left side --------> <------- right side ------->
  //    0    1    2 ...  B-2  B-1    B  B+1  B+2 ... 2B-2 2B-1
  //  B+1  B+2  B+3 ... 2B-1    B    0    1    2 ...  B-2  B-1
  
  // Branch swap of the x part
  tmp = x[0];
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < b-1; i ++) {
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	e01d      	b.n	800234c <linear_layer+0x152>
    x[i] = x[i+b+1];
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	4413      	add	r3, r2
 8002316:	3301      	adds	r3, #1
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	441a      	add	r2, r3
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	440b      	add	r3, r1
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	601a      	str	r2, [r3, #0]
    x[i+b+1] = x[i+1];
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	441a      	add	r2, r3
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	440b      	add	r3, r1
 800233a:	3301      	adds	r3, #1
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	440b      	add	r3, r1
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < b-1; i ++) {
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3301      	adds	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3b01      	subs	r3, #1
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	429a      	cmp	r2, r3
 8002354:	dbdc      	blt.n	8002310 <linear_layer+0x116>
  }
  x[b-1] = x[b];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	441a      	add	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002364:	3b01      	subs	r3, #1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	6939      	ldr	r1, [r7, #16]
 800236a:	440b      	add	r3, r1
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	601a      	str	r2, [r3, #0]
  x[b] = tmp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	601a      	str	r2, [r3, #0]
  
  // Branch swap of the y part
  tmp = y[0];
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < b-1; i ++) {
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e01d      	b.n	80023c4 <linear_layer+0x1ca>
    y[i] = y[i+b+1];
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4413      	add	r3, r2
 800238e:	3301      	adds	r3, #1
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	441a      	add	r2, r3
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	68f9      	ldr	r1, [r7, #12]
 800239c:	440b      	add	r3, r1
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	601a      	str	r2, [r3, #0]
    y[i+b+1] = y[i+1];
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	441a      	add	r2, r3
 80023ac:	69f9      	ldr	r1, [r7, #28]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	440b      	add	r3, r1
 80023b2:	3301      	adds	r3, #1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	440b      	add	r3, r1
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < b-1; i ++) {
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbdc      	blt.n	8002388 <linear_layer+0x18e>
  }
  y[b-1] = y[b];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	441a      	add	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	3b01      	subs	r3, #1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	440b      	add	r3, r1
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	601a      	str	r2, [r3, #0]
  y[b] = tmp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3724      	adds	r7, #36	; 0x24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <sparkle_ref>:


void sparkle_ref(state_t *state, int nb, int ns)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  int i, j;  // Step and branch counter
  
  // The number of branches (nb) must be even and not bigger than MAX_BRANCHES.
  assert(((nb & 1) == 0) && (nb >= 4) && (nb <= MAX_BRANCHES));
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <sparkle_ref+0x22>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b03      	cmp	r3, #3
 800241a:	dd02      	ble.n	8002422 <sparkle_ref+0x22>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b08      	cmp	r3, #8
 8002420:	dd05      	ble.n	800242e <sparkle_ref+0x2e>
 8002422:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <sparkle_ref+0x214>)
 8002424:	4a7c      	ldr	r2, [pc, #496]	; (8002618 <sparkle_ref+0x218>)
 8002426:	216f      	movs	r1, #111	; 0x6f
 8002428:	487c      	ldr	r0, [pc, #496]	; (800261c <sparkle_ref+0x21c>)
 800242a:	f000 fb37 	bl	8002a9c <__assert_func>
  
  for(i = 0; i < ns; i ++) {
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e0e5      	b.n	8002600 <sparkle_ref+0x200>
    // Add step counter
    state->y[0] ^= RCON[i%MAX_BRANCHES];
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4259      	negs	r1, r3
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	f001 0107 	and.w	r1, r1, #7
 8002444:	bf58      	it	pl
 8002446:	424b      	negpl	r3, r1
 8002448:	4975      	ldr	r1, [pc, #468]	; (8002620 <sparkle_ref+0x220>)
 800244a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800244e:	405a      	eors	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	621a      	str	r2, [r3, #32]
    state->y[1] ^= i;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	405a      	eors	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
    // ARXBox layer
    for(j = 0; j < nb; j ++)
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e0c0      	b.n	80025e8 <sparkle_ref+0x1e8>
      ARXBOX(state->x[j], state->y[j], RCON[j]);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6939      	ldr	r1, [r7, #16]
 8002472:	3108      	adds	r1, #8
 8002474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002478:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800247c:	18d1      	adds	r1, r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002498:	ea4f 6333 	mov.w	r3, r3, ror #24
 800249c:	ea82 0103 	eor.w	r1, r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	3208      	adds	r2, #8
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024b2:	495b      	ldr	r1, [pc, #364]	; (8002620 <sparkle_ref+0x220>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024ba:	ea82 0103 	eor.w	r1, r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6939      	ldr	r1, [r7, #16]
 80024d2:	3108      	adds	r1, #8
 80024d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024d8:	ea4f 4373 	mov.w	r3, r3, ror #17
 80024dc:	18d1      	adds	r1, r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024f8:	ea4f 4373 	mov.w	r3, r3, ror #17
 80024fc:	ea82 0103 	eor.w	r1, r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	3208      	adds	r2, #8
 8002506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002512:	4943      	ldr	r1, [pc, #268]	; (8002620 <sparkle_ref+0x220>)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800251a:	ea82 0103 	eor.w	r1, r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	3108      	adds	r1, #8
 8002534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002538:	18d1      	adds	r1, r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6939      	ldr	r1, [r7, #16]
 8002550:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002554:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8002558:	ea82 0103 	eor.w	r1, r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	3208      	adds	r2, #8
 8002562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800256e:	492c      	ldr	r1, [pc, #176]	; (8002620 <sparkle_ref+0x220>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002576:	ea82 0103 	eor.w	r1, r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6939      	ldr	r1, [r7, #16]
 800258e:	3108      	adds	r1, #8
 8002590:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002594:	ea4f 6333 	mov.w	r3, r3, ror #24
 8002598:	18d1      	adds	r1, r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6939      	ldr	r1, [r7, #16]
 80025b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025b4:	ea4f 4333 	mov.w	r3, r3, ror #16
 80025b8:	ea82 0103 	eor.w	r1, r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025ce:	4914      	ldr	r1, [pc, #80]	; (8002620 <sparkle_ref+0x220>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025d6:	ea82 0103 	eor.w	r1, r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(j = 0; j < nb; j ++)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3301      	adds	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f6ff af3a 	blt.w	8002466 <sparkle_ref+0x66>
    // Linear layer
    linear_layer(state, nb);
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff fe00 	bl	80021fa <linear_layer>
  for(i = 0; i < ns; i ++) {
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	f6ff af15 	blt.w	8002434 <sparkle_ref+0x34>
  }
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08003e64 	.word	0x08003e64
 8002618:	08004108 	.word	0x08004108
 800261c:	08003e9c 	.word	0x08003e9c
 8002620:	080040e8 	.word	0x080040e8

08002624 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0

	int ret = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 800262e:	f000 f9dd 	bl	80029ec <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 8002632:	f000 f97d 	bl	8002930 <tick_msr_start>
	tick_msr_end();
 8002636:	f000 f995 	bl	8002964 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 800263a:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <genkat_benchmark_hash_aead+0x7c>)
 800263c:	4919      	ldr	r1, [pc, #100]	; (80026a4 <genkat_benchmark_hash_aead+0x80>)
 800263e:	481a      	ldr	r0, [pc, #104]	; (80026a8 <genkat_benchmark_hash_aead+0x84>)
 8002640:	f000 f9b2 	bl	80029a8 <lwc_printf>
	lwc_printf("Memory usage: ");
 8002644:	4819      	ldr	r0, [pc, #100]	; (80026ac <genkat_benchmark_hash_aead+0x88>)
 8002646:	f000 f9af 	bl	80029a8 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <genkat_benchmark_hash_aead+0x8c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <genkat_benchmark_hash_aead+0x8c>)
 8002650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002652:	4619      	mov	r1, r3
 8002654:	4817      	ldr	r0, [pc, #92]	; (80026b4 <genkat_benchmark_hash_aead+0x90>)
 8002656:	f000 f9a7 	bl	80029a8 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <genkat_benchmark_hash_aead+0x8c>)
 800265c:	6a19      	ldr	r1, [r3, #32]
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <genkat_benchmark_hash_aead+0x8c>)
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <genkat_benchmark_hash_aead+0x8c>)
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	4814      	ldr	r0, [pc, #80]	; (80026b8 <genkat_benchmark_hash_aead+0x94>)
 8002668:	f000 f99e 	bl	80029a8 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 800266c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002670:	2100      	movs	r1, #0
 8002672:	4812      	ldr	r0, [pc, #72]	; (80026bc <genkat_benchmark_hash_aead+0x98>)
 8002674:	f000 fa7a 	bl	8002b6c <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	2100      	movs	r1, #0
 800267e:	4810      	ldr	r0, [pc, #64]	; (80026c0 <genkat_benchmark_hash_aead+0x9c>)
 8002680:	f000 fa74 	bl	8002b6c <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8002684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002688:	2100      	movs	r1, #0
 800268a:	480e      	ldr	r0, [pc, #56]	; (80026c4 <genkat_benchmark_hash_aead+0xa0>)
 800268c:	f000 fa6e 	bl	8002b6c <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 8002690:	f000 f81a 	bl	80026c8 <hash_generate_test_vectors>
 8002694:	6078      	str	r0, [r7, #4]
#endif

	return ret;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	08004114 	.word	0x08004114
 80026a4:	08004194 	.word	0x08004194
 80026a8:	08003f70 	.word	0x08003f70
 80026ac:	08003fb8 	.word	0x08003fb8
 80026b0:	20000634 	.word	0x20000634
 80026b4:	08003fc8 	.word	0x08003fc8
 80026b8:	08003ff0 	.word	0x08003ff0
 80026bc:	20000098 	.word	0x20000098
 80026c0:	20000198 	.word	0x20000198
 80026c4:	20000298 	.word	0x20000298

080026c8 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 80026c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026cc:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 80026d0:	af00      	add	r7, sp, #0

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

	init_buffer(msg, sizeof(msg));
 80026d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	4608      	mov	r0, r1
 80026e6:	f000 f8e9 	bl	80028bc <init_buffer>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80026f6:	e9c1 2300 	strd	r2, r3, [r1]
 80026fa:	e051      	b.n	80027a0 <hash_generate_test_vectors+0xd8>

		lwc_printf("msg_len:%6d ", (int)mlen);
 80026fc:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002700:	4619      	mov	r1, r3
 8002702:	4854      	ldr	r0, [pc, #336]	; (8002854 <hash_generate_test_vectors+0x18c>)
 8002704:	f000 f950 	bl	80029a8 <lwc_printf>

		tick_msr_start();
 8002708:	f000 f912 	bl	8002930 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 800270c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002710:	4638      	mov	r0, r7
 8002712:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7ff fce1 	bl	80020e0 <crypto_hash>
 800271e:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
#else
		ret_val = 0;
#endif
		tick_msr_end();
 8002722:	f000 f91f 	bl	8002964 <tick_msr_end>

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8002726:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <hash_generate_test_vectors+0x190>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	494a      	ldr	r1, [pc, #296]	; (8002858 <hash_generate_test_vectors+0x190>)
 800272e:	600a      	str	r2, [r1, #0]
 8002730:	4a4a      	ldr	r2, [pc, #296]	; (800285c <hash_generate_test_vectors+0x194>)
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	494a      	ldr	r1, [pc, #296]	; (8002860 <hash_generate_test_vectors+0x198>)
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(ret_val == 0) {
 800273a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <hash_generate_test_vectors+0xa6>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 8002742:	4b46      	ldr	r3, [pc, #280]	; (800285c <hash_generate_test_vectors+0x194>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <hash_generate_test_vectors+0x194>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <hash_generate_test_vectors+0x8a>
 8002750:	330f      	adds	r3, #15
 8002752:	111b      	asrs	r3, r3, #4
 8002754:	461a      	mov	r2, r3
 8002756:	4b43      	ldr	r3, [pc, #268]	; (8002864 <hash_generate_test_vectors+0x19c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4843      	ldr	r0, [pc, #268]	; (8002868 <hash_generate_test_vectors+0x1a0>)
 800275c:	f000 f924 	bl	80029a8 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 8002760:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	4313      	orrs	r3, r2
 800276a:	d10d      	bne.n	8002788 <hash_generate_test_vectors+0xc0>
 800276c:	e004      	b.n	8002778 <hash_generate_test_vectors+0xb0>
			ret_val = KAT_CRYPTO_FAILURE;
 800276e:	f06f 0303 	mvn.w	r3, #3
 8002772:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
			break;
 8002776:	e01f      	b.n	80027b8 <hash_generate_test_vectors+0xf0>
			mlen = 4;
 8002778:	f04f 0204 	mov.w	r2, #4
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8002784:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002788:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	eb12 0802 	adds.w	r8, r2, r2
 8002794:	eb43 0903 	adc.w	r9, r3, r3
 8002798:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800279c:	e9c3 8900 	strd	r8, r9, [r3]
 80027a0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027ac:	f04f 0100 	mov.w	r1, #0
 80027b0:	4299      	cmp	r1, r3
 80027b2:	bf08      	it	eq
 80027b4:	4290      	cmpeq	r0, r2
 80027b6:	d2a1      	bcs.n	80026fc <hash_generate_test_vectors+0x34>
		}
	}//end of for loop


	ticks_res_pos = 0;
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <hash_generate_test_vectors+0x190>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
	aead_hash_print_res("HASH");
 80027be:	482b      	ldr	r0, [pc, #172]	; (800286c <hash_generate_test_vectors+0x1a4>)
 80027c0:	f000 f85a 	bl	8002878 <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 80027c4:	482a      	ldr	r0, [pc, #168]	; (8002870 <hash_generate_test_vectors+0x1a8>)
 80027c6:	f000 f8ef 	bl	80029a8 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 80027d6:	e9c1 2300 	strd	r2, r3, [r1]
 80027da:	e026      	b.n	800282a <hash_generate_test_vectors+0x162>

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 80027dc:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <hash_generate_test_vectors+0x190>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <hash_generate_test_vectors+0x190>)
 80027e8:	6002      	str	r2, [r0, #0]
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <hash_generate_test_vectors+0x198>)
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4820      	ldr	r0, [pc, #128]	; (8002874 <hash_generate_test_vectors+0x1ac>)
 80027f4:	f000 f8d8 	bl	80029a8 <lwc_printf>

		if(mlen==0){
 80027f8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	4313      	orrs	r3, r2
 8002802:	d107      	bne.n	8002814 <hash_generate_test_vectors+0x14c>
			mlen = 4;
 8002804:	f04f 0204 	mov.w	r2, #4
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8002810:	e9c1 2300 	strd	r2, r3, [r1]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8002814:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	1894      	adds	r4, r2, r2
 800281e:	eb43 0503 	adc.w	r5, r3, r3
 8002822:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002826:	e9c3 4500 	strd	r4, r5, [r3]
 800282a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	4299      	cmp	r1, r3
 800283c:	bf08      	it	eq
 800283e:	4290      	cmpeq	r0, r2
 8002840:	d2cc      	bcs.n	80027dc <hash_generate_test_vectors+0x114>
		}
	}

	return ret_val;
 8002842:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
}
 8002846:	4618      	mov	r0, r3
 8002848:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002852:	bf00      	nop
 8002854:	0800401c 	.word	0x0800401c
 8002858:	20000398 	.word	0x20000398
 800285c:	20000090 	.word	0x20000090
 8002860:	20000298 	.word	0x20000298
 8002864:	20000094 	.word	0x20000094
 8002868:	0800402c 	.word	0x0800402c
 800286c:	08004048 	.word	0x08004048
 8002870:	08004050 	.word	0x08004050
 8002874:	08004060 	.word	0x08004060

08002878 <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <aead_hash_print_res+0x30>)
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <aead_hash_print_res+0x34>)
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	480a      	ldr	r0, [pc, #40]	; (80028b0 <aead_hash_print_res+0x38>)
 8002888:	f000 f88e 	bl	80029a8 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <aead_hash_print_res+0x3c>)
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <aead_hash_print_res+0x3c>)
 8002892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <aead_hash_print_res+0x3c>)
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	4807      	ldr	r0, [pc, #28]	; (80028b8 <aead_hash_print_res+0x40>)
 800289a:	f000 f885 	bl	80029a8 <lwc_printf>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	08004114 	.word	0x08004114
 80028ac:	08004194 	.word	0x08004194
 80028b0:	0800406c 	.word	0x0800406c
 80028b4:	20000634 	.word	0x20000634
 80028b8:	080040a8 	.word	0x080040a8

080028bc <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 80028bc:	b4b0      	push	{r4, r5, r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++) {
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80028d4:	e00d      	b.n	80028f2 <init_buffer+0x36>
		buffer[i] = (unsigned char) i + '0';
 80028d6:	7c3a      	ldrb	r2, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	440b      	add	r3, r1
 80028de:	3230      	adds	r2, #48	; 0x30
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 80028e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028e8:	1c54      	adds	r4, r2, #1
 80028ea:	f143 0500 	adc.w	r5, r3, #0
 80028ee:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80028f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028fa:	4299      	cmp	r1, r3
 80028fc:	bf08      	it	eq
 80028fe:	4290      	cmpeq	r0, r2
 8002900:	d3e9      	bcc.n	80028d6 <init_buffer+0x1a>
	}
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bcb0      	pop	{r4, r5, r7}
 800290c:	4770      	bx	lr
	...

08002910 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002920:	6013      	str	r3, [r2, #0]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	2000039c 	.word	0x2000039c

08002930 <tick_msr_start>:

void tick_msr_start(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <tick_msr_start+0x28>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <tick_msr_start+0x2c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8002942:	f7fd ff55 	bl	80007f0 <HAL_GetTick>
 8002946:	4603      	mov	r3, r0
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <tick_msr_start+0x30>)
 800294a:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <tick_msr_start+0x2c>)
 800294e:	f7fe fe4b 	bl	80015e8 <HAL_TIM_Base_Start_IT>
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	2000039c 	.word	0x2000039c
 800295c:	200005e8 	.word	0x200005e8
 8002960:	20000094 	.word	0x20000094

08002964 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 8002968:	480b      	ldr	r0, [pc, #44]	; (8002998 <tick_msr_end+0x34>)
 800296a:	f7fe fe97 	bl	800169c <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <tick_msr_end+0x38>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <tick_msr_end+0x34>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	4313      	orrs	r3, r2
 800297c:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <tick_msr_end+0x3c>)
 800297e:	6013      	str	r3, [r2, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 8002980:	f7fd ff36 	bl	80007f0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <tick_msr_end+0x40>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <tick_msr_end+0x40>)
 800298e:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <tick_msr_end+0x3c>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200005e8 	.word	0x200005e8
 800299c:	2000039c 	.word	0x2000039c
 80029a0:	20000090 	.word	0x20000090
 80029a4:	20000094 	.word	0x20000094

080029a8 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 80029a8:	b40f      	push	{r0, r1, r2, r3}
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	480a      	ldr	r0, [pc, #40]	; (80029e4 <lwc_printf+0x3c>)
 80029bc:	f000 fbe2 	bl	8003184 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 80029c0:	4808      	ldr	r0, [pc, #32]	; (80029e4 <lwc_printf+0x3c>)
 80029c2:	f7fd fc25 	bl	8000210 <strlen>
 80029c6:	4603      	mov	r3, r0
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	4905      	ldr	r1, [pc, #20]	; (80029e4 <lwc_printf+0x3c>)
 80029ce:	4806      	ldr	r0, [pc, #24]	; (80029e8 <lwc_printf+0x40>)
 80029d0:	f7ff f903 	bl	8001bda <HAL_UART_Transmit>
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029de:	b004      	add	sp, #16
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200003a0 	.word	0x200003a0
 80029e8:	200005a8 	.word	0x200005a8

080029ec <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 80029f0:	2234      	movs	r2, #52	; 0x34
 80029f2:	2100      	movs	r1, #0
 80029f4:	4822      	ldr	r0, [pc, #136]	; (8002a80 <get_memory_usage+0x94>)
 80029f6:	f000 f8b9 	bl	8002b6c <memset>

	mem_stat.flash_start_adr = 0x8000000;
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <get_memory_usage+0x94>)
 80029fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a00:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <get_memory_usage+0x94>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <get_memory_usage+0x94>)
 8002a08:	6053      	str	r3, [r2, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <get_memory_usage+0x98>)
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <get_memory_usage+0x94>)
 8002a0e:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <get_memory_usage+0x9c>)
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <get_memory_usage+0x94>)
 8002a14:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <get_memory_usage+0xa0>)
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <get_memory_usage+0x94>)
 8002a1a:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <get_memory_usage+0xa4>)
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <get_memory_usage+0x94>)
 8002a20:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <get_memory_usage+0xa8>)
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <get_memory_usage+0x94>)
 8002a26:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <get_memory_usage+0xac>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <get_memory_usage+0x94>)
 8002a2c:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <get_memory_usage+0x94>)
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <get_memory_usage+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <get_memory_usage+0x94>)
 8002a3a:	6213      	str	r3, [r2, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <get_memory_usage+0x94>)
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <get_memory_usage+0x94>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <get_memory_usage+0x94>)
 8002a48:	6253      	str	r3, [r2, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <get_memory_usage+0x94>)
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <get_memory_usage+0x94>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <get_memory_usage+0x94>)
 8002a56:	6293      	str	r3, [r2, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <get_memory_usage+0x94>)
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <get_memory_usage+0x94>)
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	4413      	add	r3, r2
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <get_memory_usage+0x94>)
 8002a64:	62d3      	str	r3, [r2, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <get_memory_usage+0x94>)
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <get_memory_usage+0x94>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	441a      	add	r2, r3
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <get_memory_usage+0x94>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	4a02      	ldr	r2, [pc, #8]	; (8002a80 <get_memory_usage+0x94>)
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000634 	.word	0x20000634
 8002a84:	08003e44 	.word	0x08003e44
 8002a88:	20000070 	.word	0x20000070
 8002a8c:	20000678 	.word	0x20000678
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000070 	.word	0x20000070
 8002a98:	080042f0 	.word	0x080042f0

08002a9c <__assert_func>:
 8002a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <__assert_func+0x2c>)
 8002aa4:	4605      	mov	r5, r0
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68d8      	ldr	r0, [r3, #12]
 8002aaa:	b14c      	cbz	r4, 8002ac0 <__assert_func+0x24>
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <__assert_func+0x30>)
 8002aae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002ab2:	9100      	str	r1, [sp, #0]
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <__assert_func+0x34>)
 8002ab8:	f000 f814 	bl	8002ae4 <fiprintf>
 8002abc:	f000 fc2c 	bl	8003318 <abort>
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__assert_func+0x38>)
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	e7f3      	b.n	8002aae <__assert_func+0x12>
 8002ac6:	bf00      	nop
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	08004214 	.word	0x08004214
 8002ad0:	08004221 	.word	0x08004221
 8002ad4:	0800424f 	.word	0x0800424f

08002ad8 <__errno>:
 8002ad8:	4b01      	ldr	r3, [pc, #4]	; (8002ae0 <__errno+0x8>)
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000000c 	.word	0x2000000c

08002ae4 <fiprintf>:
 8002ae4:	b40e      	push	{r1, r2, r3}
 8002ae6:	b503      	push	{r0, r1, lr}
 8002ae8:	4601      	mov	r1, r0
 8002aea:	ab03      	add	r3, sp, #12
 8002aec:	4805      	ldr	r0, [pc, #20]	; (8002b04 <fiprintf+0x20>)
 8002aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8002af2:	6800      	ldr	r0, [r0, #0]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	f000 f869 	bl	8002bcc <_vfiprintf_r>
 8002afa:	b002      	add	sp, #8
 8002afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b00:	b003      	add	sp, #12
 8002b02:	4770      	bx	lr
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <__libc_init_array>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	4d0c      	ldr	r5, [pc, #48]	; (8002b40 <__libc_init_array+0x38>)
 8002b0e:	4c0d      	ldr	r4, [pc, #52]	; (8002b44 <__libc_init_array+0x3c>)
 8002b10:	1b64      	subs	r4, r4, r5
 8002b12:	10a4      	asrs	r4, r4, #2
 8002b14:	42a6      	cmp	r6, r4
 8002b16:	d109      	bne.n	8002b2c <__libc_init_array+0x24>
 8002b18:	f001 f988 	bl	8003e2c <_init>
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	4d0a      	ldr	r5, [pc, #40]	; (8002b48 <__libc_init_array+0x40>)
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <__libc_init_array+0x44>)
 8002b22:	1b64      	subs	r4, r4, r5
 8002b24:	10a4      	asrs	r4, r4, #2
 8002b26:	42a6      	cmp	r6, r4
 8002b28:	d105      	bne.n	8002b36 <__libc_init_array+0x2e>
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b30:	4798      	blx	r3
 8002b32:	3601      	adds	r6, #1
 8002b34:	e7ee      	b.n	8002b14 <__libc_init_array+0xc>
 8002b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3a:	4798      	blx	r3
 8002b3c:	3601      	adds	r6, #1
 8002b3e:	e7f2      	b.n	8002b26 <__libc_init_array+0x1e>
 8002b40:	080042e8 	.word	0x080042e8
 8002b44:	080042e8 	.word	0x080042e8
 8002b48:	080042e8 	.word	0x080042e8
 8002b4c:	080042ec 	.word	0x080042ec

08002b50 <memcpy>:
 8002b50:	440a      	add	r2, r1
 8002b52:	4291      	cmp	r1, r2
 8002b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b58:	d100      	bne.n	8002b5c <memcpy+0xc>
 8002b5a:	4770      	bx	lr
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b62:	4291      	cmp	r1, r2
 8002b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b68:	d1f9      	bne.n	8002b5e <memcpy+0xe>
 8002b6a:	bd10      	pop	{r4, pc}

08002b6c <memset>:
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4402      	add	r2, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <__sfputc_r>:
 8002b7c:	6893      	ldr	r3, [r2, #8]
 8002b7e:	b410      	push	{r4}
 8002b80:	3b01      	subs	r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	6093      	str	r3, [r2, #8]
 8002b86:	da07      	bge.n	8002b98 <__sfputc_r+0x1c>
 8002b88:	6994      	ldr	r4, [r2, #24]
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	db01      	blt.n	8002b92 <__sfputc_r+0x16>
 8002b8e:	290a      	cmp	r1, #10
 8002b90:	d102      	bne.n	8002b98 <__sfputc_r+0x1c>
 8002b92:	bc10      	pop	{r4}
 8002b94:	f000 bb00 	b.w	8003198 <__swbuf_r>
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	1c58      	adds	r0, r3, #1
 8002b9c:	6010      	str	r0, [r2, #0]
 8002b9e:	7019      	strb	r1, [r3, #0]
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	bc10      	pop	{r4}
 8002ba4:	4770      	bx	lr

08002ba6 <__sfputs_r>:
 8002ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba8:	4606      	mov	r6, r0
 8002baa:	460f      	mov	r7, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	18d5      	adds	r5, r2, r3
 8002bb0:	42ac      	cmp	r4, r5
 8002bb2:	d101      	bne.n	8002bb8 <__sfputs_r+0x12>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e007      	b.n	8002bc8 <__sfputs_r+0x22>
 8002bb8:	463a      	mov	r2, r7
 8002bba:	4630      	mov	r0, r6
 8002bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bc0:	f7ff ffdc 	bl	8002b7c <__sfputc_r>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d1f3      	bne.n	8002bb0 <__sfputs_r+0xa>
 8002bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bcc <_vfiprintf_r>:
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	460d      	mov	r5, r1
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	4698      	mov	r8, r3
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	b09d      	sub	sp, #116	; 0x74
 8002bda:	b118      	cbz	r0, 8002be4 <_vfiprintf_r+0x18>
 8002bdc:	6983      	ldr	r3, [r0, #24]
 8002bde:	b90b      	cbnz	r3, 8002be4 <_vfiprintf_r+0x18>
 8002be0:	f000 fcbc 	bl	800355c <__sinit>
 8002be4:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <_vfiprintf_r+0x240>)
 8002be6:	429d      	cmp	r5, r3
 8002be8:	d11b      	bne.n	8002c22 <_vfiprintf_r+0x56>
 8002bea:	6875      	ldr	r5, [r6, #4]
 8002bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bee:	07d9      	lsls	r1, r3, #31
 8002bf0:	d405      	bmi.n	8002bfe <_vfiprintf_r+0x32>
 8002bf2:	89ab      	ldrh	r3, [r5, #12]
 8002bf4:	059a      	lsls	r2, r3, #22
 8002bf6:	d402      	bmi.n	8002bfe <_vfiprintf_r+0x32>
 8002bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bfa:	f000 fd4d 	bl	8003698 <__retarget_lock_acquire_recursive>
 8002bfe:	89ab      	ldrh	r3, [r5, #12]
 8002c00:	071b      	lsls	r3, r3, #28
 8002c02:	d501      	bpl.n	8002c08 <_vfiprintf_r+0x3c>
 8002c04:	692b      	ldr	r3, [r5, #16]
 8002c06:	b9eb      	cbnz	r3, 8002c44 <_vfiprintf_r+0x78>
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 fb16 	bl	800323c <__swsetup_r>
 8002c10:	b1c0      	cbz	r0, 8002c44 <_vfiprintf_r+0x78>
 8002c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c14:	07dc      	lsls	r4, r3, #31
 8002c16:	d50e      	bpl.n	8002c36 <_vfiprintf_r+0x6a>
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	b01d      	add	sp, #116	; 0x74
 8002c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c22:	4b7b      	ldr	r3, [pc, #492]	; (8002e10 <_vfiprintf_r+0x244>)
 8002c24:	429d      	cmp	r5, r3
 8002c26:	d101      	bne.n	8002c2c <_vfiprintf_r+0x60>
 8002c28:	68b5      	ldr	r5, [r6, #8]
 8002c2a:	e7df      	b.n	8002bec <_vfiprintf_r+0x20>
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <_vfiprintf_r+0x248>)
 8002c2e:	429d      	cmp	r5, r3
 8002c30:	bf08      	it	eq
 8002c32:	68f5      	ldreq	r5, [r6, #12]
 8002c34:	e7da      	b.n	8002bec <_vfiprintf_r+0x20>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	0598      	lsls	r0, r3, #22
 8002c3a:	d4ed      	bmi.n	8002c18 <_vfiprintf_r+0x4c>
 8002c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c3e:	f000 fd2c 	bl	800369a <__retarget_lock_release_recursive>
 8002c42:	e7e9      	b.n	8002c18 <_vfiprintf_r+0x4c>
 8002c44:	2300      	movs	r3, #0
 8002c46:	9309      	str	r3, [sp, #36]	; 0x24
 8002c48:	2320      	movs	r3, #32
 8002c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c4e:	2330      	movs	r3, #48	; 0x30
 8002c50:	f04f 0901 	mov.w	r9, #1
 8002c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e18 <_vfiprintf_r+0x24c>
 8002c5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c60:	4623      	mov	r3, r4
 8002c62:	469a      	mov	sl, r3
 8002c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c68:	b10a      	cbz	r2, 8002c6e <_vfiprintf_r+0xa2>
 8002c6a:	2a25      	cmp	r2, #37	; 0x25
 8002c6c:	d1f9      	bne.n	8002c62 <_vfiprintf_r+0x96>
 8002c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002c72:	d00b      	beq.n	8002c8c <_vfiprintf_r+0xc0>
 8002c74:	465b      	mov	r3, fp
 8002c76:	4622      	mov	r2, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f7ff ff93 	bl	8002ba6 <__sfputs_r>
 8002c80:	3001      	adds	r0, #1
 8002c82:	f000 80aa 	beq.w	8002dda <_vfiprintf_r+0x20e>
 8002c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c88:	445a      	add	r2, fp
 8002c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8002c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80a2 	beq.w	8002dda <_vfiprintf_r+0x20e>
 8002c96:	2300      	movs	r3, #0
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ca0:	f10a 0a01 	add.w	sl, sl, #1
 8002ca4:	9304      	str	r3, [sp, #16]
 8002ca6:	9307      	str	r3, [sp, #28]
 8002ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cac:	931a      	str	r3, [sp, #104]	; 0x68
 8002cae:	4654      	mov	r4, sl
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb6:	4858      	ldr	r0, [pc, #352]	; (8002e18 <_vfiprintf_r+0x24c>)
 8002cb8:	f000 fd54 	bl	8003764 <memchr>
 8002cbc:	9a04      	ldr	r2, [sp, #16]
 8002cbe:	b9d8      	cbnz	r0, 8002cf8 <_vfiprintf_r+0x12c>
 8002cc0:	06d1      	lsls	r1, r2, #27
 8002cc2:	bf44      	itt	mi
 8002cc4:	2320      	movmi	r3, #32
 8002cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cca:	0713      	lsls	r3, r2, #28
 8002ccc:	bf44      	itt	mi
 8002cce:	232b      	movmi	r3, #43	; 0x2b
 8002cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cda:	d015      	beq.n	8002d08 <_vfiprintf_r+0x13c>
 8002cdc:	4654      	mov	r4, sl
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f04f 0c0a 	mov.w	ip, #10
 8002ce4:	9a07      	ldr	r2, [sp, #28]
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cec:	3b30      	subs	r3, #48	; 0x30
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d94e      	bls.n	8002d90 <_vfiprintf_r+0x1c4>
 8002cf2:	b1b0      	cbz	r0, 8002d22 <_vfiprintf_r+0x156>
 8002cf4:	9207      	str	r2, [sp, #28]
 8002cf6:	e014      	b.n	8002d22 <_vfiprintf_r+0x156>
 8002cf8:	eba0 0308 	sub.w	r3, r0, r8
 8002cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8002d00:	4313      	orrs	r3, r2
 8002d02:	46a2      	mov	sl, r4
 8002d04:	9304      	str	r3, [sp, #16]
 8002d06:	e7d2      	b.n	8002cae <_vfiprintf_r+0xe2>
 8002d08:	9b03      	ldr	r3, [sp, #12]
 8002d0a:	1d19      	adds	r1, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	9103      	str	r1, [sp, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bfbb      	ittet	lt
 8002d14:	425b      	neglt	r3, r3
 8002d16:	f042 0202 	orrlt.w	r2, r2, #2
 8002d1a:	9307      	strge	r3, [sp, #28]
 8002d1c:	9307      	strlt	r3, [sp, #28]
 8002d1e:	bfb8      	it	lt
 8002d20:	9204      	strlt	r2, [sp, #16]
 8002d22:	7823      	ldrb	r3, [r4, #0]
 8002d24:	2b2e      	cmp	r3, #46	; 0x2e
 8002d26:	d10c      	bne.n	8002d42 <_vfiprintf_r+0x176>
 8002d28:	7863      	ldrb	r3, [r4, #1]
 8002d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2c:	d135      	bne.n	8002d9a <_vfiprintf_r+0x1ce>
 8002d2e:	9b03      	ldr	r3, [sp, #12]
 8002d30:	3402      	adds	r4, #2
 8002d32:	1d1a      	adds	r2, r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	9203      	str	r2, [sp, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bfb8      	it	lt
 8002d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d40:	9305      	str	r3, [sp, #20]
 8002d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e28 <_vfiprintf_r+0x25c>
 8002d46:	2203      	movs	r2, #3
 8002d48:	4650      	mov	r0, sl
 8002d4a:	7821      	ldrb	r1, [r4, #0]
 8002d4c:	f000 fd0a 	bl	8003764 <memchr>
 8002d50:	b140      	cbz	r0, 8002d64 <_vfiprintf_r+0x198>
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	eba0 000a 	sub.w	r0, r0, sl
 8002d58:	fa03 f000 	lsl.w	r0, r3, r0
 8002d5c:	9b04      	ldr	r3, [sp, #16]
 8002d5e:	3401      	adds	r4, #1
 8002d60:	4303      	orrs	r3, r0
 8002d62:	9304      	str	r3, [sp, #16]
 8002d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d68:	2206      	movs	r2, #6
 8002d6a:	482c      	ldr	r0, [pc, #176]	; (8002e1c <_vfiprintf_r+0x250>)
 8002d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d70:	f000 fcf8 	bl	8003764 <memchr>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d03f      	beq.n	8002df8 <_vfiprintf_r+0x22c>
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <_vfiprintf_r+0x254>)
 8002d7a:	bb1b      	cbnz	r3, 8002dc4 <_vfiprintf_r+0x1f8>
 8002d7c:	9b03      	ldr	r3, [sp, #12]
 8002d7e:	3307      	adds	r3, #7
 8002d80:	f023 0307 	bic.w	r3, r3, #7
 8002d84:	3308      	adds	r3, #8
 8002d86:	9303      	str	r3, [sp, #12]
 8002d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8a:	443b      	add	r3, r7
 8002d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8e:	e767      	b.n	8002c60 <_vfiprintf_r+0x94>
 8002d90:	460c      	mov	r4, r1
 8002d92:	2001      	movs	r0, #1
 8002d94:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d98:	e7a5      	b.n	8002ce6 <_vfiprintf_r+0x11a>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f04f 0c0a 	mov.w	ip, #10
 8002da0:	4619      	mov	r1, r3
 8002da2:	3401      	adds	r4, #1
 8002da4:	9305      	str	r3, [sp, #20]
 8002da6:	4620      	mov	r0, r4
 8002da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dac:	3a30      	subs	r2, #48	; 0x30
 8002dae:	2a09      	cmp	r2, #9
 8002db0:	d903      	bls.n	8002dba <_vfiprintf_r+0x1ee>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0c5      	beq.n	8002d42 <_vfiprintf_r+0x176>
 8002db6:	9105      	str	r1, [sp, #20]
 8002db8:	e7c3      	b.n	8002d42 <_vfiprintf_r+0x176>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dc2:	e7f0      	b.n	8002da6 <_vfiprintf_r+0x1da>
 8002dc4:	ab03      	add	r3, sp, #12
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	462a      	mov	r2, r5
 8002dca:	4630      	mov	r0, r6
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <_vfiprintf_r+0x258>)
 8002dce:	a904      	add	r1, sp, #16
 8002dd0:	f3af 8000 	nop.w
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	1c78      	adds	r0, r7, #1
 8002dd8:	d1d6      	bne.n	8002d88 <_vfiprintf_r+0x1bc>
 8002dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ddc:	07d9      	lsls	r1, r3, #31
 8002dde:	d405      	bmi.n	8002dec <_vfiprintf_r+0x220>
 8002de0:	89ab      	ldrh	r3, [r5, #12]
 8002de2:	059a      	lsls	r2, r3, #22
 8002de4:	d402      	bmi.n	8002dec <_vfiprintf_r+0x220>
 8002de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002de8:	f000 fc57 	bl	800369a <__retarget_lock_release_recursive>
 8002dec:	89ab      	ldrh	r3, [r5, #12]
 8002dee:	065b      	lsls	r3, r3, #25
 8002df0:	f53f af12 	bmi.w	8002c18 <_vfiprintf_r+0x4c>
 8002df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002df6:	e711      	b.n	8002c1c <_vfiprintf_r+0x50>
 8002df8:	ab03      	add	r3, sp, #12
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <_vfiprintf_r+0x258>)
 8002e02:	a904      	add	r1, sp, #16
 8002e04:	f000 f882 	bl	8002f0c <_printf_i>
 8002e08:	e7e4      	b.n	8002dd4 <_vfiprintf_r+0x208>
 8002e0a:	bf00      	nop
 8002e0c:	080042a8 	.word	0x080042a8
 8002e10:	080042c8 	.word	0x080042c8
 8002e14:	08004288 	.word	0x08004288
 8002e18:	08004254 	.word	0x08004254
 8002e1c:	0800425e 	.word	0x0800425e
 8002e20:	00000000 	.word	0x00000000
 8002e24:	08002ba7 	.word	0x08002ba7
 8002e28:	0800425a 	.word	0x0800425a

08002e2c <_printf_common>:
 8002e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e30:	4616      	mov	r6, r2
 8002e32:	4699      	mov	r9, r3
 8002e34:	688a      	ldr	r2, [r1, #8]
 8002e36:	690b      	ldr	r3, [r1, #16]
 8002e38:	4607      	mov	r7, r0
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	bfb8      	it	lt
 8002e3e:	4613      	movlt	r3, r2
 8002e40:	6033      	str	r3, [r6, #0]
 8002e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e46:	460c      	mov	r4, r1
 8002e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e4c:	b10a      	cbz	r2, 8002e52 <_printf_common+0x26>
 8002e4e:	3301      	adds	r3, #1
 8002e50:	6033      	str	r3, [r6, #0]
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	0699      	lsls	r1, r3, #26
 8002e56:	bf42      	ittt	mi
 8002e58:	6833      	ldrmi	r3, [r6, #0]
 8002e5a:	3302      	addmi	r3, #2
 8002e5c:	6033      	strmi	r3, [r6, #0]
 8002e5e:	6825      	ldr	r5, [r4, #0]
 8002e60:	f015 0506 	ands.w	r5, r5, #6
 8002e64:	d106      	bne.n	8002e74 <_printf_common+0x48>
 8002e66:	f104 0a19 	add.w	sl, r4, #25
 8002e6a:	68e3      	ldr	r3, [r4, #12]
 8002e6c:	6832      	ldr	r2, [r6, #0]
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	42ab      	cmp	r3, r5
 8002e72:	dc28      	bgt.n	8002ec6 <_printf_common+0x9a>
 8002e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e78:	1e13      	subs	r3, r2, #0
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	bf18      	it	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	0692      	lsls	r2, r2, #26
 8002e82:	d42d      	bmi.n	8002ee0 <_printf_common+0xb4>
 8002e84:	4649      	mov	r1, r9
 8002e86:	4638      	mov	r0, r7
 8002e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e8c:	47c0      	blx	r8
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d020      	beq.n	8002ed4 <_printf_common+0xa8>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	68e5      	ldr	r5, [r4, #12]
 8002e96:	f003 0306 	and.w	r3, r3, #6
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf18      	it	ne
 8002e9e:	2500      	movne	r5, #0
 8002ea0:	6832      	ldr	r2, [r6, #0]
 8002ea2:	f04f 0600 	mov.w	r6, #0
 8002ea6:	68a3      	ldr	r3, [r4, #8]
 8002ea8:	bf08      	it	eq
 8002eaa:	1aad      	subeq	r5, r5, r2
 8002eac:	6922      	ldr	r2, [r4, #16]
 8002eae:	bf08      	it	eq
 8002eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	bfc4      	itt	gt
 8002eb8:	1a9b      	subgt	r3, r3, r2
 8002eba:	18ed      	addgt	r5, r5, r3
 8002ebc:	341a      	adds	r4, #26
 8002ebe:	42b5      	cmp	r5, r6
 8002ec0:	d11a      	bne.n	8002ef8 <_printf_common+0xcc>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e008      	b.n	8002ed8 <_printf_common+0xac>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4652      	mov	r2, sl
 8002eca:	4649      	mov	r1, r9
 8002ecc:	4638      	mov	r0, r7
 8002ece:	47c0      	blx	r8
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d103      	bne.n	8002edc <_printf_common+0xb0>
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002edc:	3501      	adds	r5, #1
 8002ede:	e7c4      	b.n	8002e6a <_printf_common+0x3e>
 8002ee0:	2030      	movs	r0, #48	; 0x30
 8002ee2:	18e1      	adds	r1, r4, r3
 8002ee4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eee:	4422      	add	r2, r4
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ef6:	e7c5      	b.n	8002e84 <_printf_common+0x58>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4622      	mov	r2, r4
 8002efc:	4649      	mov	r1, r9
 8002efe:	4638      	mov	r0, r7
 8002f00:	47c0      	blx	r8
 8002f02:	3001      	adds	r0, #1
 8002f04:	d0e6      	beq.n	8002ed4 <_printf_common+0xa8>
 8002f06:	3601      	adds	r6, #1
 8002f08:	e7d9      	b.n	8002ebe <_printf_common+0x92>
	...

08002f0c <_printf_i>:
 8002f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	460c      	mov	r4, r1
 8002f12:	7e27      	ldrb	r7, [r4, #24]
 8002f14:	4691      	mov	r9, r2
 8002f16:	2f78      	cmp	r7, #120	; 0x78
 8002f18:	4680      	mov	r8, r0
 8002f1a:	469a      	mov	sl, r3
 8002f1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f22:	d807      	bhi.n	8002f34 <_printf_i+0x28>
 8002f24:	2f62      	cmp	r7, #98	; 0x62
 8002f26:	d80a      	bhi.n	8002f3e <_printf_i+0x32>
 8002f28:	2f00      	cmp	r7, #0
 8002f2a:	f000 80d9 	beq.w	80030e0 <_printf_i+0x1d4>
 8002f2e:	2f58      	cmp	r7, #88	; 0x58
 8002f30:	f000 80a4 	beq.w	800307c <_printf_i+0x170>
 8002f34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f3c:	e03a      	b.n	8002fb4 <_printf_i+0xa8>
 8002f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f42:	2b15      	cmp	r3, #21
 8002f44:	d8f6      	bhi.n	8002f34 <_printf_i+0x28>
 8002f46:	a001      	add	r0, pc, #4	; (adr r0, 8002f4c <_printf_i+0x40>)
 8002f48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f4c:	08002fa5 	.word	0x08002fa5
 8002f50:	08002fb9 	.word	0x08002fb9
 8002f54:	08002f35 	.word	0x08002f35
 8002f58:	08002f35 	.word	0x08002f35
 8002f5c:	08002f35 	.word	0x08002f35
 8002f60:	08002f35 	.word	0x08002f35
 8002f64:	08002fb9 	.word	0x08002fb9
 8002f68:	08002f35 	.word	0x08002f35
 8002f6c:	08002f35 	.word	0x08002f35
 8002f70:	08002f35 	.word	0x08002f35
 8002f74:	08002f35 	.word	0x08002f35
 8002f78:	080030c7 	.word	0x080030c7
 8002f7c:	08002fe9 	.word	0x08002fe9
 8002f80:	080030a9 	.word	0x080030a9
 8002f84:	08002f35 	.word	0x08002f35
 8002f88:	08002f35 	.word	0x08002f35
 8002f8c:	080030e9 	.word	0x080030e9
 8002f90:	08002f35 	.word	0x08002f35
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002f35 	.word	0x08002f35
 8002f9c:	08002f35 	.word	0x08002f35
 8002fa0:	080030b1 	.word	0x080030b1
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	600a      	str	r2, [r1, #0]
 8002fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0a4      	b.n	8003102 <_printf_i+0x1f6>
 8002fb8:	6825      	ldr	r5, [r4, #0]
 8002fba:	6808      	ldr	r0, [r1, #0]
 8002fbc:	062e      	lsls	r6, r5, #24
 8002fbe:	f100 0304 	add.w	r3, r0, #4
 8002fc2:	d50a      	bpl.n	8002fda <_printf_i+0xce>
 8002fc4:	6805      	ldr	r5, [r0, #0]
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	da03      	bge.n	8002fd4 <_printf_i+0xc8>
 8002fcc:	232d      	movs	r3, #45	; 0x2d
 8002fce:	426d      	negs	r5, r5
 8002fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd4:	230a      	movs	r3, #10
 8002fd6:	485e      	ldr	r0, [pc, #376]	; (8003150 <_printf_i+0x244>)
 8002fd8:	e019      	b.n	800300e <_printf_i+0x102>
 8002fda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fde:	6805      	ldr	r5, [r0, #0]
 8002fe0:	600b      	str	r3, [r1, #0]
 8002fe2:	bf18      	it	ne
 8002fe4:	b22d      	sxthne	r5, r5
 8002fe6:	e7ef      	b.n	8002fc8 <_printf_i+0xbc>
 8002fe8:	680b      	ldr	r3, [r1, #0]
 8002fea:	6825      	ldr	r5, [r4, #0]
 8002fec:	1d18      	adds	r0, r3, #4
 8002fee:	6008      	str	r0, [r1, #0]
 8002ff0:	0628      	lsls	r0, r5, #24
 8002ff2:	d501      	bpl.n	8002ff8 <_printf_i+0xec>
 8002ff4:	681d      	ldr	r5, [r3, #0]
 8002ff6:	e002      	b.n	8002ffe <_printf_i+0xf2>
 8002ff8:	0669      	lsls	r1, r5, #25
 8002ffa:	d5fb      	bpl.n	8002ff4 <_printf_i+0xe8>
 8002ffc:	881d      	ldrh	r5, [r3, #0]
 8002ffe:	2f6f      	cmp	r7, #111	; 0x6f
 8003000:	bf0c      	ite	eq
 8003002:	2308      	moveq	r3, #8
 8003004:	230a      	movne	r3, #10
 8003006:	4852      	ldr	r0, [pc, #328]	; (8003150 <_printf_i+0x244>)
 8003008:	2100      	movs	r1, #0
 800300a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800300e:	6866      	ldr	r6, [r4, #4]
 8003010:	2e00      	cmp	r6, #0
 8003012:	bfa8      	it	ge
 8003014:	6821      	ldrge	r1, [r4, #0]
 8003016:	60a6      	str	r6, [r4, #8]
 8003018:	bfa4      	itt	ge
 800301a:	f021 0104 	bicge.w	r1, r1, #4
 800301e:	6021      	strge	r1, [r4, #0]
 8003020:	b90d      	cbnz	r5, 8003026 <_printf_i+0x11a>
 8003022:	2e00      	cmp	r6, #0
 8003024:	d04d      	beq.n	80030c2 <_printf_i+0x1b6>
 8003026:	4616      	mov	r6, r2
 8003028:	fbb5 f1f3 	udiv	r1, r5, r3
 800302c:	fb03 5711 	mls	r7, r3, r1, r5
 8003030:	5dc7      	ldrb	r7, [r0, r7]
 8003032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003036:	462f      	mov	r7, r5
 8003038:	42bb      	cmp	r3, r7
 800303a:	460d      	mov	r5, r1
 800303c:	d9f4      	bls.n	8003028 <_printf_i+0x11c>
 800303e:	2b08      	cmp	r3, #8
 8003040:	d10b      	bne.n	800305a <_printf_i+0x14e>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	07df      	lsls	r7, r3, #31
 8003046:	d508      	bpl.n	800305a <_printf_i+0x14e>
 8003048:	6923      	ldr	r3, [r4, #16]
 800304a:	6861      	ldr	r1, [r4, #4]
 800304c:	4299      	cmp	r1, r3
 800304e:	bfde      	ittt	le
 8003050:	2330      	movle	r3, #48	; 0x30
 8003052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800305a:	1b92      	subs	r2, r2, r6
 800305c:	6122      	str	r2, [r4, #16]
 800305e:	464b      	mov	r3, r9
 8003060:	4621      	mov	r1, r4
 8003062:	4640      	mov	r0, r8
 8003064:	f8cd a000 	str.w	sl, [sp]
 8003068:	aa03      	add	r2, sp, #12
 800306a:	f7ff fedf 	bl	8002e2c <_printf_common>
 800306e:	3001      	adds	r0, #1
 8003070:	d14c      	bne.n	800310c <_printf_i+0x200>
 8003072:	f04f 30ff 	mov.w	r0, #4294967295
 8003076:	b004      	add	sp, #16
 8003078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307c:	4834      	ldr	r0, [pc, #208]	; (8003150 <_printf_i+0x244>)
 800307e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003082:	680e      	ldr	r6, [r1, #0]
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	f856 5b04 	ldr.w	r5, [r6], #4
 800308a:	061f      	lsls	r7, r3, #24
 800308c:	600e      	str	r6, [r1, #0]
 800308e:	d514      	bpl.n	80030ba <_printf_i+0x1ae>
 8003090:	07d9      	lsls	r1, r3, #31
 8003092:	bf44      	itt	mi
 8003094:	f043 0320 	orrmi.w	r3, r3, #32
 8003098:	6023      	strmi	r3, [r4, #0]
 800309a:	b91d      	cbnz	r5, 80030a4 <_printf_i+0x198>
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f023 0320 	bic.w	r3, r3, #32
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	2310      	movs	r3, #16
 80030a6:	e7af      	b.n	8003008 <_printf_i+0xfc>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	f043 0320 	orr.w	r3, r3, #32
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	2378      	movs	r3, #120	; 0x78
 80030b2:	4828      	ldr	r0, [pc, #160]	; (8003154 <_printf_i+0x248>)
 80030b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030b8:	e7e3      	b.n	8003082 <_printf_i+0x176>
 80030ba:	065e      	lsls	r6, r3, #25
 80030bc:	bf48      	it	mi
 80030be:	b2ad      	uxthmi	r5, r5
 80030c0:	e7e6      	b.n	8003090 <_printf_i+0x184>
 80030c2:	4616      	mov	r6, r2
 80030c4:	e7bb      	b.n	800303e <_printf_i+0x132>
 80030c6:	680b      	ldr	r3, [r1, #0]
 80030c8:	6826      	ldr	r6, [r4, #0]
 80030ca:	1d1d      	adds	r5, r3, #4
 80030cc:	6960      	ldr	r0, [r4, #20]
 80030ce:	600d      	str	r5, [r1, #0]
 80030d0:	0635      	lsls	r5, r6, #24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	d501      	bpl.n	80030da <_printf_i+0x1ce>
 80030d6:	6018      	str	r0, [r3, #0]
 80030d8:	e002      	b.n	80030e0 <_printf_i+0x1d4>
 80030da:	0671      	lsls	r1, r6, #25
 80030dc:	d5fb      	bpl.n	80030d6 <_printf_i+0x1ca>
 80030de:	8018      	strh	r0, [r3, #0]
 80030e0:	2300      	movs	r3, #0
 80030e2:	4616      	mov	r6, r2
 80030e4:	6123      	str	r3, [r4, #16]
 80030e6:	e7ba      	b.n	800305e <_printf_i+0x152>
 80030e8:	680b      	ldr	r3, [r1, #0]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	600a      	str	r2, [r1, #0]
 80030ee:	681e      	ldr	r6, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4630      	mov	r0, r6
 80030f4:	6862      	ldr	r2, [r4, #4]
 80030f6:	f000 fb35 	bl	8003764 <memchr>
 80030fa:	b108      	cbz	r0, 8003100 <_printf_i+0x1f4>
 80030fc:	1b80      	subs	r0, r0, r6
 80030fe:	6060      	str	r0, [r4, #4]
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	6123      	str	r3, [r4, #16]
 8003104:	2300      	movs	r3, #0
 8003106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800310a:	e7a8      	b.n	800305e <_printf_i+0x152>
 800310c:	4632      	mov	r2, r6
 800310e:	4649      	mov	r1, r9
 8003110:	4640      	mov	r0, r8
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	47d0      	blx	sl
 8003116:	3001      	adds	r0, #1
 8003118:	d0ab      	beq.n	8003072 <_printf_i+0x166>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	079b      	lsls	r3, r3, #30
 800311e:	d413      	bmi.n	8003148 <_printf_i+0x23c>
 8003120:	68e0      	ldr	r0, [r4, #12]
 8003122:	9b03      	ldr	r3, [sp, #12]
 8003124:	4298      	cmp	r0, r3
 8003126:	bfb8      	it	lt
 8003128:	4618      	movlt	r0, r3
 800312a:	e7a4      	b.n	8003076 <_printf_i+0x16a>
 800312c:	2301      	movs	r3, #1
 800312e:	4632      	mov	r2, r6
 8003130:	4649      	mov	r1, r9
 8003132:	4640      	mov	r0, r8
 8003134:	47d0      	blx	sl
 8003136:	3001      	adds	r0, #1
 8003138:	d09b      	beq.n	8003072 <_printf_i+0x166>
 800313a:	3501      	adds	r5, #1
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	9903      	ldr	r1, [sp, #12]
 8003140:	1a5b      	subs	r3, r3, r1
 8003142:	42ab      	cmp	r3, r5
 8003144:	dcf2      	bgt.n	800312c <_printf_i+0x220>
 8003146:	e7eb      	b.n	8003120 <_printf_i+0x214>
 8003148:	2500      	movs	r5, #0
 800314a:	f104 0619 	add.w	r6, r4, #25
 800314e:	e7f5      	b.n	800313c <_printf_i+0x230>
 8003150:	08004265 	.word	0x08004265
 8003154:	08004276 	.word	0x08004276

08003158 <_vsiprintf_r>:
 8003158:	b500      	push	{lr}
 800315a:	b09b      	sub	sp, #108	; 0x6c
 800315c:	9100      	str	r1, [sp, #0]
 800315e:	9104      	str	r1, [sp, #16]
 8003160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003164:	9105      	str	r1, [sp, #20]
 8003166:	9102      	str	r1, [sp, #8]
 8003168:	4905      	ldr	r1, [pc, #20]	; (8003180 <_vsiprintf_r+0x28>)
 800316a:	9103      	str	r1, [sp, #12]
 800316c:	4669      	mov	r1, sp
 800316e:	f000 fc49 	bl	8003a04 <_svfiprintf_r>
 8003172:	2200      	movs	r2, #0
 8003174:	9b00      	ldr	r3, [sp, #0]
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	b01b      	add	sp, #108	; 0x6c
 800317a:	f85d fb04 	ldr.w	pc, [sp], #4
 800317e:	bf00      	nop
 8003180:	ffff0208 	.word	0xffff0208

08003184 <vsiprintf>:
 8003184:	4613      	mov	r3, r2
 8003186:	460a      	mov	r2, r1
 8003188:	4601      	mov	r1, r0
 800318a:	4802      	ldr	r0, [pc, #8]	; (8003194 <vsiprintf+0x10>)
 800318c:	6800      	ldr	r0, [r0, #0]
 800318e:	f7ff bfe3 	b.w	8003158 <_vsiprintf_r>
 8003192:	bf00      	nop
 8003194:	2000000c 	.word	0x2000000c

08003198 <__swbuf_r>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	460e      	mov	r6, r1
 800319c:	4614      	mov	r4, r2
 800319e:	4605      	mov	r5, r0
 80031a0:	b118      	cbz	r0, 80031aa <__swbuf_r+0x12>
 80031a2:	6983      	ldr	r3, [r0, #24]
 80031a4:	b90b      	cbnz	r3, 80031aa <__swbuf_r+0x12>
 80031a6:	f000 f9d9 	bl	800355c <__sinit>
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <__swbuf_r+0x98>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d12b      	bne.n	8003208 <__swbuf_r+0x70>
 80031b0:	686c      	ldr	r4, [r5, #4]
 80031b2:	69a3      	ldr	r3, [r4, #24]
 80031b4:	60a3      	str	r3, [r4, #8]
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	071a      	lsls	r2, r3, #28
 80031ba:	d52f      	bpl.n	800321c <__swbuf_r+0x84>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	b36b      	cbz	r3, 800321c <__swbuf_r+0x84>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	b2f6      	uxtb	r6, r6
 80031c6:	1ac0      	subs	r0, r0, r3
 80031c8:	6963      	ldr	r3, [r4, #20]
 80031ca:	4637      	mov	r7, r6
 80031cc:	4283      	cmp	r3, r0
 80031ce:	dc04      	bgt.n	80031da <__swbuf_r+0x42>
 80031d0:	4621      	mov	r1, r4
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 f92e 	bl	8003434 <_fflush_r>
 80031d8:	bb30      	cbnz	r0, 8003228 <__swbuf_r+0x90>
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	3001      	adds	r0, #1
 80031de:	3b01      	subs	r3, #1
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	6022      	str	r2, [r4, #0]
 80031e8:	701e      	strb	r6, [r3, #0]
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	4283      	cmp	r3, r0
 80031ee:	d004      	beq.n	80031fa <__swbuf_r+0x62>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	07db      	lsls	r3, r3, #31
 80031f4:	d506      	bpl.n	8003204 <__swbuf_r+0x6c>
 80031f6:	2e0a      	cmp	r6, #10
 80031f8:	d104      	bne.n	8003204 <__swbuf_r+0x6c>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f919 	bl	8003434 <_fflush_r>
 8003202:	b988      	cbnz	r0, 8003228 <__swbuf_r+0x90>
 8003204:	4638      	mov	r0, r7
 8003206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <__swbuf_r+0x9c>)
 800320a:	429c      	cmp	r4, r3
 800320c:	d101      	bne.n	8003212 <__swbuf_r+0x7a>
 800320e:	68ac      	ldr	r4, [r5, #8]
 8003210:	e7cf      	b.n	80031b2 <__swbuf_r+0x1a>
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <__swbuf_r+0xa0>)
 8003214:	429c      	cmp	r4, r3
 8003216:	bf08      	it	eq
 8003218:	68ec      	ldreq	r4, [r5, #12]
 800321a:	e7ca      	b.n	80031b2 <__swbuf_r+0x1a>
 800321c:	4621      	mov	r1, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f000 f80c 	bl	800323c <__swsetup_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	d0cb      	beq.n	80031c0 <__swbuf_r+0x28>
 8003228:	f04f 37ff 	mov.w	r7, #4294967295
 800322c:	e7ea      	b.n	8003204 <__swbuf_r+0x6c>
 800322e:	bf00      	nop
 8003230:	080042a8 	.word	0x080042a8
 8003234:	080042c8 	.word	0x080042c8
 8003238:	08004288 	.word	0x08004288

0800323c <__swsetup_r>:
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <__swsetup_r+0xcc>)
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	681d      	ldr	r5, [r3, #0]
 8003242:	4606      	mov	r6, r0
 8003244:	460c      	mov	r4, r1
 8003246:	b125      	cbz	r5, 8003252 <__swsetup_r+0x16>
 8003248:	69ab      	ldr	r3, [r5, #24]
 800324a:	b913      	cbnz	r3, 8003252 <__swsetup_r+0x16>
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f985 	bl	800355c <__sinit>
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <__swsetup_r+0xd0>)
 8003254:	429c      	cmp	r4, r3
 8003256:	d10f      	bne.n	8003278 <__swsetup_r+0x3c>
 8003258:	686c      	ldr	r4, [r5, #4]
 800325a:	89a3      	ldrh	r3, [r4, #12]
 800325c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003260:	0719      	lsls	r1, r3, #28
 8003262:	d42c      	bmi.n	80032be <__swsetup_r+0x82>
 8003264:	06dd      	lsls	r5, r3, #27
 8003266:	d411      	bmi.n	800328c <__swsetup_r+0x50>
 8003268:	2309      	movs	r3, #9
 800326a:	6033      	str	r3, [r6, #0]
 800326c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	e03e      	b.n	80032f6 <__swsetup_r+0xba>
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <__swsetup_r+0xd4>)
 800327a:	429c      	cmp	r4, r3
 800327c:	d101      	bne.n	8003282 <__swsetup_r+0x46>
 800327e:	68ac      	ldr	r4, [r5, #8]
 8003280:	e7eb      	b.n	800325a <__swsetup_r+0x1e>
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <__swsetup_r+0xd8>)
 8003284:	429c      	cmp	r4, r3
 8003286:	bf08      	it	eq
 8003288:	68ec      	ldreq	r4, [r5, #12]
 800328a:	e7e6      	b.n	800325a <__swsetup_r+0x1e>
 800328c:	0758      	lsls	r0, r3, #29
 800328e:	d512      	bpl.n	80032b6 <__swsetup_r+0x7a>
 8003290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003292:	b141      	cbz	r1, 80032a6 <__swsetup_r+0x6a>
 8003294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003298:	4299      	cmp	r1, r3
 800329a:	d002      	beq.n	80032a2 <__swsetup_r+0x66>
 800329c:	4630      	mov	r0, r6
 800329e:	f000 fa89 	bl	80037b4 <_free_r>
 80032a2:	2300      	movs	r3, #0
 80032a4:	6363      	str	r3, [r4, #52]	; 0x34
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	b94b      	cbnz	r3, 80032d6 <__swsetup_r+0x9a>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d003      	beq.n	80032d6 <__swsetup_r+0x9a>
 80032ce:	4621      	mov	r1, r4
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 fa07 	bl	80036e4 <__smakebuf_r>
 80032d6:	89a0      	ldrh	r0, [r4, #12]
 80032d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032dc:	f010 0301 	ands.w	r3, r0, #1
 80032e0:	d00a      	beq.n	80032f8 <__swsetup_r+0xbc>
 80032e2:	2300      	movs	r3, #0
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	6963      	ldr	r3, [r4, #20]
 80032e8:	425b      	negs	r3, r3
 80032ea:	61a3      	str	r3, [r4, #24]
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	b943      	cbnz	r3, 8003302 <__swsetup_r+0xc6>
 80032f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032f4:	d1ba      	bne.n	800326c <__swsetup_r+0x30>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	0781      	lsls	r1, r0, #30
 80032fa:	bf58      	it	pl
 80032fc:	6963      	ldrpl	r3, [r4, #20]
 80032fe:	60a3      	str	r3, [r4, #8]
 8003300:	e7f4      	b.n	80032ec <__swsetup_r+0xb0>
 8003302:	2000      	movs	r0, #0
 8003304:	e7f7      	b.n	80032f6 <__swsetup_r+0xba>
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c
 800330c:	080042a8 	.word	0x080042a8
 8003310:	080042c8 	.word	0x080042c8
 8003314:	08004288 	.word	0x08004288

08003318 <abort>:
 8003318:	2006      	movs	r0, #6
 800331a:	b508      	push	{r3, lr}
 800331c:	f000 fcaa 	bl	8003c74 <raise>
 8003320:	2001      	movs	r0, #1
 8003322:	f7fd f942 	bl	80005aa <_exit>
	...

08003328 <__sflush_r>:
 8003328:	898a      	ldrh	r2, [r1, #12]
 800332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332e:	4605      	mov	r5, r0
 8003330:	0710      	lsls	r0, r2, #28
 8003332:	460c      	mov	r4, r1
 8003334:	d458      	bmi.n	80033e8 <__sflush_r+0xc0>
 8003336:	684b      	ldr	r3, [r1, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dc05      	bgt.n	8003348 <__sflush_r+0x20>
 800333c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	dc02      	bgt.n	8003348 <__sflush_r+0x20>
 8003342:	2000      	movs	r0, #0
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800334a:	2e00      	cmp	r6, #0
 800334c:	d0f9      	beq.n	8003342 <__sflush_r+0x1a>
 800334e:	2300      	movs	r3, #0
 8003350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003354:	682f      	ldr	r7, [r5, #0]
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	d032      	beq.n	80033c0 <__sflush_r+0x98>
 800335a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	075a      	lsls	r2, r3, #29
 8003360:	d505      	bpl.n	800336e <__sflush_r+0x46>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	1ac0      	subs	r0, r0, r3
 8003366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003368:	b10b      	cbz	r3, 800336e <__sflush_r+0x46>
 800336a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800336c:	1ac0      	subs	r0, r0, r3
 800336e:	2300      	movs	r3, #0
 8003370:	4602      	mov	r2, r0
 8003372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003374:	4628      	mov	r0, r5
 8003376:	6a21      	ldr	r1, [r4, #32]
 8003378:	47b0      	blx	r6
 800337a:	1c43      	adds	r3, r0, #1
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	d106      	bne.n	800338e <__sflush_r+0x66>
 8003380:	6829      	ldr	r1, [r5, #0]
 8003382:	291d      	cmp	r1, #29
 8003384:	d82c      	bhi.n	80033e0 <__sflush_r+0xb8>
 8003386:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <__sflush_r+0x108>)
 8003388:	40ca      	lsrs	r2, r1
 800338a:	07d6      	lsls	r6, r2, #31
 800338c:	d528      	bpl.n	80033e0 <__sflush_r+0xb8>
 800338e:	2200      	movs	r2, #0
 8003390:	6062      	str	r2, [r4, #4]
 8003392:	6922      	ldr	r2, [r4, #16]
 8003394:	04d9      	lsls	r1, r3, #19
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	d504      	bpl.n	80033a4 <__sflush_r+0x7c>
 800339a:	1c42      	adds	r2, r0, #1
 800339c:	d101      	bne.n	80033a2 <__sflush_r+0x7a>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	b903      	cbnz	r3, 80033a4 <__sflush_r+0x7c>
 80033a2:	6560      	str	r0, [r4, #84]	; 0x54
 80033a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033a6:	602f      	str	r7, [r5, #0]
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d0ca      	beq.n	8003342 <__sflush_r+0x1a>
 80033ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b0:	4299      	cmp	r1, r3
 80033b2:	d002      	beq.n	80033ba <__sflush_r+0x92>
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f9fd 	bl	80037b4 <_free_r>
 80033ba:	2000      	movs	r0, #0
 80033bc:	6360      	str	r0, [r4, #52]	; 0x34
 80033be:	e7c1      	b.n	8003344 <__sflush_r+0x1c>
 80033c0:	6a21      	ldr	r1, [r4, #32]
 80033c2:	2301      	movs	r3, #1
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b0      	blx	r6
 80033c8:	1c41      	adds	r1, r0, #1
 80033ca:	d1c7      	bne.n	800335c <__sflush_r+0x34>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c4      	beq.n	800335c <__sflush_r+0x34>
 80033d2:	2b1d      	cmp	r3, #29
 80033d4:	d001      	beq.n	80033da <__sflush_r+0xb2>
 80033d6:	2b16      	cmp	r3, #22
 80033d8:	d101      	bne.n	80033de <__sflush_r+0xb6>
 80033da:	602f      	str	r7, [r5, #0]
 80033dc:	e7b1      	b.n	8003342 <__sflush_r+0x1a>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	e7ad      	b.n	8003344 <__sflush_r+0x1c>
 80033e8:	690f      	ldr	r7, [r1, #16]
 80033ea:	2f00      	cmp	r7, #0
 80033ec:	d0a9      	beq.n	8003342 <__sflush_r+0x1a>
 80033ee:	0793      	lsls	r3, r2, #30
 80033f0:	bf18      	it	ne
 80033f2:	2300      	movne	r3, #0
 80033f4:	680e      	ldr	r6, [r1, #0]
 80033f6:	bf08      	it	eq
 80033f8:	694b      	ldreq	r3, [r1, #20]
 80033fa:	eba6 0807 	sub.w	r8, r6, r7
 80033fe:	600f      	str	r7, [r1, #0]
 8003400:	608b      	str	r3, [r1, #8]
 8003402:	f1b8 0f00 	cmp.w	r8, #0
 8003406:	dd9c      	ble.n	8003342 <__sflush_r+0x1a>
 8003408:	4643      	mov	r3, r8
 800340a:	463a      	mov	r2, r7
 800340c:	4628      	mov	r0, r5
 800340e:	6a21      	ldr	r1, [r4, #32]
 8003410:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003412:	47b0      	blx	r6
 8003414:	2800      	cmp	r0, #0
 8003416:	dc06      	bgt.n	8003426 <__sflush_r+0xfe>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
 800341e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	e78e      	b.n	8003344 <__sflush_r+0x1c>
 8003426:	4407      	add	r7, r0
 8003428:	eba8 0800 	sub.w	r8, r8, r0
 800342c:	e7e9      	b.n	8003402 <__sflush_r+0xda>
 800342e:	bf00      	nop
 8003430:	20400001 	.word	0x20400001

08003434 <_fflush_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	4605      	mov	r5, r0
 800343a:	460c      	mov	r4, r1
 800343c:	b913      	cbnz	r3, 8003444 <_fflush_r+0x10>
 800343e:	2500      	movs	r5, #0
 8003440:	4628      	mov	r0, r5
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	b118      	cbz	r0, 800344e <_fflush_r+0x1a>
 8003446:	6983      	ldr	r3, [r0, #24]
 8003448:	b90b      	cbnz	r3, 800344e <_fflush_r+0x1a>
 800344a:	f000 f887 	bl	800355c <__sinit>
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <_fflush_r+0x6c>)
 8003450:	429c      	cmp	r4, r3
 8003452:	d11b      	bne.n	800348c <_fflush_r+0x58>
 8003454:	686c      	ldr	r4, [r5, #4]
 8003456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ef      	beq.n	800343e <_fflush_r+0xa>
 800345e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003460:	07d0      	lsls	r0, r2, #31
 8003462:	d404      	bmi.n	800346e <_fflush_r+0x3a>
 8003464:	0599      	lsls	r1, r3, #22
 8003466:	d402      	bmi.n	800346e <_fflush_r+0x3a>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f000 f915 	bl	8003698 <__retarget_lock_acquire_recursive>
 800346e:	4628      	mov	r0, r5
 8003470:	4621      	mov	r1, r4
 8003472:	f7ff ff59 	bl	8003328 <__sflush_r>
 8003476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003478:	4605      	mov	r5, r0
 800347a:	07da      	lsls	r2, r3, #31
 800347c:	d4e0      	bmi.n	8003440 <_fflush_r+0xc>
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	059b      	lsls	r3, r3, #22
 8003482:	d4dd      	bmi.n	8003440 <_fflush_r+0xc>
 8003484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003486:	f000 f908 	bl	800369a <__retarget_lock_release_recursive>
 800348a:	e7d9      	b.n	8003440 <_fflush_r+0xc>
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <_fflush_r+0x70>)
 800348e:	429c      	cmp	r4, r3
 8003490:	d101      	bne.n	8003496 <_fflush_r+0x62>
 8003492:	68ac      	ldr	r4, [r5, #8]
 8003494:	e7df      	b.n	8003456 <_fflush_r+0x22>
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <_fflush_r+0x74>)
 8003498:	429c      	cmp	r4, r3
 800349a:	bf08      	it	eq
 800349c:	68ec      	ldreq	r4, [r5, #12]
 800349e:	e7da      	b.n	8003456 <_fflush_r+0x22>
 80034a0:	080042a8 	.word	0x080042a8
 80034a4:	080042c8 	.word	0x080042c8
 80034a8:	08004288 	.word	0x08004288

080034ac <std>:
 80034ac:	2300      	movs	r3, #0
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
 80034b2:	e9c0 3300 	strd	r3, r3, [r0]
 80034b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ba:	6083      	str	r3, [r0, #8]
 80034bc:	8181      	strh	r1, [r0, #12]
 80034be:	6643      	str	r3, [r0, #100]	; 0x64
 80034c0:	81c2      	strh	r2, [r0, #14]
 80034c2:	6183      	str	r3, [r0, #24]
 80034c4:	4619      	mov	r1, r3
 80034c6:	2208      	movs	r2, #8
 80034c8:	305c      	adds	r0, #92	; 0x5c
 80034ca:	f7ff fb4f 	bl	8002b6c <memset>
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <std+0x38>)
 80034d0:	6224      	str	r4, [r4, #32]
 80034d2:	6263      	str	r3, [r4, #36]	; 0x24
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <std+0x3c>)
 80034d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <std+0x40>)
 80034da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <std+0x44>)
 80034de:	6323      	str	r3, [r4, #48]	; 0x30
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop
 80034e4:	08003cad 	.word	0x08003cad
 80034e8:	08003ccf 	.word	0x08003ccf
 80034ec:	08003d07 	.word	0x08003d07
 80034f0:	08003d2b 	.word	0x08003d2b

080034f4 <_cleanup_r>:
 80034f4:	4901      	ldr	r1, [pc, #4]	; (80034fc <_cleanup_r+0x8>)
 80034f6:	f000 b8af 	b.w	8003658 <_fwalk_reent>
 80034fa:	bf00      	nop
 80034fc:	08003435 	.word	0x08003435

08003500 <__sfmoreglue>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	2568      	movs	r5, #104	; 0x68
 8003504:	1e4a      	subs	r2, r1, #1
 8003506:	4355      	muls	r5, r2
 8003508:	460e      	mov	r6, r1
 800350a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800350e:	f000 f99d 	bl	800384c <_malloc_r>
 8003512:	4604      	mov	r4, r0
 8003514:	b140      	cbz	r0, 8003528 <__sfmoreglue+0x28>
 8003516:	2100      	movs	r1, #0
 8003518:	e9c0 1600 	strd	r1, r6, [r0]
 800351c:	300c      	adds	r0, #12
 800351e:	60a0      	str	r0, [r4, #8]
 8003520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003524:	f7ff fb22 	bl	8002b6c <memset>
 8003528:	4620      	mov	r0, r4
 800352a:	bd70      	pop	{r4, r5, r6, pc}

0800352c <__sfp_lock_acquire>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__sfp_lock_acquire+0x8>)
 800352e:	f000 b8b3 	b.w	8003698 <__retarget_lock_acquire_recursive>
 8003532:	bf00      	nop
 8003534:	20000670 	.word	0x20000670

08003538 <__sfp_lock_release>:
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <__sfp_lock_release+0x8>)
 800353a:	f000 b8ae 	b.w	800369a <__retarget_lock_release_recursive>
 800353e:	bf00      	nop
 8003540:	20000670 	.word	0x20000670

08003544 <__sinit_lock_acquire>:
 8003544:	4801      	ldr	r0, [pc, #4]	; (800354c <__sinit_lock_acquire+0x8>)
 8003546:	f000 b8a7 	b.w	8003698 <__retarget_lock_acquire_recursive>
 800354a:	bf00      	nop
 800354c:	2000066b 	.word	0x2000066b

08003550 <__sinit_lock_release>:
 8003550:	4801      	ldr	r0, [pc, #4]	; (8003558 <__sinit_lock_release+0x8>)
 8003552:	f000 b8a2 	b.w	800369a <__retarget_lock_release_recursive>
 8003556:	bf00      	nop
 8003558:	2000066b 	.word	0x2000066b

0800355c <__sinit>:
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
 8003560:	f7ff fff0 	bl	8003544 <__sinit_lock_acquire>
 8003564:	69a3      	ldr	r3, [r4, #24]
 8003566:	b11b      	cbz	r3, 8003570 <__sinit+0x14>
 8003568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800356c:	f7ff bff0 	b.w	8003550 <__sinit_lock_release>
 8003570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003574:	6523      	str	r3, [r4, #80]	; 0x50
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <__sinit+0x68>)
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <__sinit+0x6c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	62a2      	str	r2, [r4, #40]	; 0x28
 800357e:	42a3      	cmp	r3, r4
 8003580:	bf08      	it	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	4620      	mov	r0, r4
 8003586:	bf08      	it	eq
 8003588:	61a3      	streq	r3, [r4, #24]
 800358a:	f000 f81f 	bl	80035cc <__sfp>
 800358e:	6060      	str	r0, [r4, #4]
 8003590:	4620      	mov	r0, r4
 8003592:	f000 f81b 	bl	80035cc <__sfp>
 8003596:	60a0      	str	r0, [r4, #8]
 8003598:	4620      	mov	r0, r4
 800359a:	f000 f817 	bl	80035cc <__sfp>
 800359e:	2200      	movs	r2, #0
 80035a0:	2104      	movs	r1, #4
 80035a2:	60e0      	str	r0, [r4, #12]
 80035a4:	6860      	ldr	r0, [r4, #4]
 80035a6:	f7ff ff81 	bl	80034ac <std>
 80035aa:	2201      	movs	r2, #1
 80035ac:	2109      	movs	r1, #9
 80035ae:	68a0      	ldr	r0, [r4, #8]
 80035b0:	f7ff ff7c 	bl	80034ac <std>
 80035b4:	2202      	movs	r2, #2
 80035b6:	2112      	movs	r1, #18
 80035b8:	68e0      	ldr	r0, [r4, #12]
 80035ba:	f7ff ff77 	bl	80034ac <std>
 80035be:	2301      	movs	r3, #1
 80035c0:	61a3      	str	r3, [r4, #24]
 80035c2:	e7d1      	b.n	8003568 <__sinit+0xc>
 80035c4:	08004250 	.word	0x08004250
 80035c8:	080034f5 	.word	0x080034f5

080035cc <__sfp>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	4607      	mov	r7, r0
 80035d0:	f7ff ffac 	bl	800352c <__sfp_lock_acquire>
 80035d4:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <__sfp+0x84>)
 80035d6:	681e      	ldr	r6, [r3, #0]
 80035d8:	69b3      	ldr	r3, [r6, #24]
 80035da:	b913      	cbnz	r3, 80035e2 <__sfp+0x16>
 80035dc:	4630      	mov	r0, r6
 80035de:	f7ff ffbd 	bl	800355c <__sinit>
 80035e2:	3648      	adds	r6, #72	; 0x48
 80035e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	d503      	bpl.n	80035f4 <__sfp+0x28>
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	b30b      	cbz	r3, 8003634 <__sfp+0x68>
 80035f0:	6836      	ldr	r6, [r6, #0]
 80035f2:	e7f7      	b.n	80035e4 <__sfp+0x18>
 80035f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035f8:	b9d5      	cbnz	r5, 8003630 <__sfp+0x64>
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <__sfp+0x88>)
 80035fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003600:	60e3      	str	r3, [r4, #12]
 8003602:	6665      	str	r5, [r4, #100]	; 0x64
 8003604:	f000 f847 	bl	8003696 <__retarget_lock_init_recursive>
 8003608:	f7ff ff96 	bl	8003538 <__sfp_lock_release>
 800360c:	2208      	movs	r2, #8
 800360e:	4629      	mov	r1, r5
 8003610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003618:	6025      	str	r5, [r4, #0]
 800361a:	61a5      	str	r5, [r4, #24]
 800361c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003620:	f7ff faa4 	bl	8002b6c <memset>
 8003624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800362c:	4620      	mov	r0, r4
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	3468      	adds	r4, #104	; 0x68
 8003632:	e7d9      	b.n	80035e8 <__sfp+0x1c>
 8003634:	2104      	movs	r1, #4
 8003636:	4638      	mov	r0, r7
 8003638:	f7ff ff62 	bl	8003500 <__sfmoreglue>
 800363c:	4604      	mov	r4, r0
 800363e:	6030      	str	r0, [r6, #0]
 8003640:	2800      	cmp	r0, #0
 8003642:	d1d5      	bne.n	80035f0 <__sfp+0x24>
 8003644:	f7ff ff78 	bl	8003538 <__sfp_lock_release>
 8003648:	230c      	movs	r3, #12
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	e7ee      	b.n	800362c <__sfp+0x60>
 800364e:	bf00      	nop
 8003650:	08004250 	.word	0x08004250
 8003654:	ffff0001 	.word	0xffff0001

08003658 <_fwalk_reent>:
 8003658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800365c:	4606      	mov	r6, r0
 800365e:	4688      	mov	r8, r1
 8003660:	2700      	movs	r7, #0
 8003662:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800366a:	f1b9 0901 	subs.w	r9, r9, #1
 800366e:	d505      	bpl.n	800367c <_fwalk_reent+0x24>
 8003670:	6824      	ldr	r4, [r4, #0]
 8003672:	2c00      	cmp	r4, #0
 8003674:	d1f7      	bne.n	8003666 <_fwalk_reent+0xe>
 8003676:	4638      	mov	r0, r7
 8003678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800367c:	89ab      	ldrh	r3, [r5, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d907      	bls.n	8003692 <_fwalk_reent+0x3a>
 8003682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003686:	3301      	adds	r3, #1
 8003688:	d003      	beq.n	8003692 <_fwalk_reent+0x3a>
 800368a:	4629      	mov	r1, r5
 800368c:	4630      	mov	r0, r6
 800368e:	47c0      	blx	r8
 8003690:	4307      	orrs	r7, r0
 8003692:	3568      	adds	r5, #104	; 0x68
 8003694:	e7e9      	b.n	800366a <_fwalk_reent+0x12>

08003696 <__retarget_lock_init_recursive>:
 8003696:	4770      	bx	lr

08003698 <__retarget_lock_acquire_recursive>:
 8003698:	4770      	bx	lr

0800369a <__retarget_lock_release_recursive>:
 800369a:	4770      	bx	lr

0800369c <__swhatbuf_r>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	460e      	mov	r6, r1
 80036a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a4:	4614      	mov	r4, r2
 80036a6:	2900      	cmp	r1, #0
 80036a8:	461d      	mov	r5, r3
 80036aa:	b096      	sub	sp, #88	; 0x58
 80036ac:	da07      	bge.n	80036be <__swhatbuf_r+0x22>
 80036ae:	2300      	movs	r3, #0
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	89b3      	ldrh	r3, [r6, #12]
 80036b4:	061a      	lsls	r2, r3, #24
 80036b6:	d410      	bmi.n	80036da <__swhatbuf_r+0x3e>
 80036b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036bc:	e00e      	b.n	80036dc <__swhatbuf_r+0x40>
 80036be:	466a      	mov	r2, sp
 80036c0:	f000 fb5a 	bl	8003d78 <_fstat_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	dbf2      	blt.n	80036ae <__swhatbuf_r+0x12>
 80036c8:	9a01      	ldr	r2, [sp, #4]
 80036ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036d2:	425a      	negs	r2, r3
 80036d4:	415a      	adcs	r2, r3
 80036d6:	602a      	str	r2, [r5, #0]
 80036d8:	e7ee      	b.n	80036b8 <__swhatbuf_r+0x1c>
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	2000      	movs	r0, #0
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	b016      	add	sp, #88	; 0x58
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <__smakebuf_r>:
 80036e4:	898b      	ldrh	r3, [r1, #12]
 80036e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036e8:	079d      	lsls	r5, r3, #30
 80036ea:	4606      	mov	r6, r0
 80036ec:	460c      	mov	r4, r1
 80036ee:	d507      	bpl.n	8003700 <__smakebuf_r+0x1c>
 80036f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	2301      	movs	r3, #1
 80036fa:	6163      	str	r3, [r4, #20]
 80036fc:	b002      	add	sp, #8
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	466a      	mov	r2, sp
 8003702:	ab01      	add	r3, sp, #4
 8003704:	f7ff ffca 	bl	800369c <__swhatbuf_r>
 8003708:	9900      	ldr	r1, [sp, #0]
 800370a:	4605      	mov	r5, r0
 800370c:	4630      	mov	r0, r6
 800370e:	f000 f89d 	bl	800384c <_malloc_r>
 8003712:	b948      	cbnz	r0, 8003728 <__smakebuf_r+0x44>
 8003714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d4ef      	bmi.n	80036fc <__smakebuf_r+0x18>
 800371c:	f023 0303 	bic.w	r3, r3, #3
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	e7e3      	b.n	80036f0 <__smakebuf_r+0xc>
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <__smakebuf_r+0x7c>)
 800372a:	62b3      	str	r3, [r6, #40]	; 0x28
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	6020      	str	r0, [r4, #0]
 8003730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	9b00      	ldr	r3, [sp, #0]
 8003738:	6120      	str	r0, [r4, #16]
 800373a:	6163      	str	r3, [r4, #20]
 800373c:	9b01      	ldr	r3, [sp, #4]
 800373e:	b15b      	cbz	r3, 8003758 <__smakebuf_r+0x74>
 8003740:	4630      	mov	r0, r6
 8003742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003746:	f000 fb29 	bl	8003d9c <_isatty_r>
 800374a:	b128      	cbz	r0, 8003758 <__smakebuf_r+0x74>
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	81a3      	strh	r3, [r4, #12]
 8003758:	89a0      	ldrh	r0, [r4, #12]
 800375a:	4305      	orrs	r5, r0
 800375c:	81a5      	strh	r5, [r4, #12]
 800375e:	e7cd      	b.n	80036fc <__smakebuf_r+0x18>
 8003760:	080034f5 	.word	0x080034f5

08003764 <memchr>:
 8003764:	4603      	mov	r3, r0
 8003766:	b510      	push	{r4, lr}
 8003768:	b2c9      	uxtb	r1, r1
 800376a:	4402      	add	r2, r0
 800376c:	4293      	cmp	r3, r2
 800376e:	4618      	mov	r0, r3
 8003770:	d101      	bne.n	8003776 <memchr+0x12>
 8003772:	2000      	movs	r0, #0
 8003774:	e003      	b.n	800377e <memchr+0x1a>
 8003776:	7804      	ldrb	r4, [r0, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	428c      	cmp	r4, r1
 800377c:	d1f6      	bne.n	800376c <memchr+0x8>
 800377e:	bd10      	pop	{r4, pc}

08003780 <memmove>:
 8003780:	4288      	cmp	r0, r1
 8003782:	b510      	push	{r4, lr}
 8003784:	eb01 0402 	add.w	r4, r1, r2
 8003788:	d902      	bls.n	8003790 <memmove+0x10>
 800378a:	4284      	cmp	r4, r0
 800378c:	4623      	mov	r3, r4
 800378e:	d807      	bhi.n	80037a0 <memmove+0x20>
 8003790:	1e43      	subs	r3, r0, #1
 8003792:	42a1      	cmp	r1, r4
 8003794:	d008      	beq.n	80037a8 <memmove+0x28>
 8003796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800379a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800379e:	e7f8      	b.n	8003792 <memmove+0x12>
 80037a0:	4601      	mov	r1, r0
 80037a2:	4402      	add	r2, r0
 80037a4:	428a      	cmp	r2, r1
 80037a6:	d100      	bne.n	80037aa <memmove+0x2a>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037b2:	e7f7      	b.n	80037a4 <memmove+0x24>

080037b4 <_free_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4605      	mov	r5, r0
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d043      	beq.n	8003844 <_free_r+0x90>
 80037bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c0:	1f0c      	subs	r4, r1, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfb8      	it	lt
 80037c6:	18e4      	addlt	r4, r4, r3
 80037c8:	f000 fb0a 	bl	8003de0 <__malloc_lock>
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <_free_r+0x94>)
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	4610      	mov	r0, r2
 80037d2:	b933      	cbnz	r3, 80037e2 <_free_r+0x2e>
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	6014      	str	r4, [r2, #0]
 80037d8:	4628      	mov	r0, r5
 80037da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037de:	f000 bb05 	b.w	8003dec <__malloc_unlock>
 80037e2:	42a3      	cmp	r3, r4
 80037e4:	d90a      	bls.n	80037fc <_free_r+0x48>
 80037e6:	6821      	ldr	r1, [r4, #0]
 80037e8:	1862      	adds	r2, r4, r1
 80037ea:	4293      	cmp	r3, r2
 80037ec:	bf01      	itttt	eq
 80037ee:	681a      	ldreq	r2, [r3, #0]
 80037f0:	685b      	ldreq	r3, [r3, #4]
 80037f2:	1852      	addeq	r2, r2, r1
 80037f4:	6022      	streq	r2, [r4, #0]
 80037f6:	6063      	str	r3, [r4, #4]
 80037f8:	6004      	str	r4, [r0, #0]
 80037fa:	e7ed      	b.n	80037d8 <_free_r+0x24>
 80037fc:	461a      	mov	r2, r3
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b10b      	cbz	r3, 8003806 <_free_r+0x52>
 8003802:	42a3      	cmp	r3, r4
 8003804:	d9fa      	bls.n	80037fc <_free_r+0x48>
 8003806:	6811      	ldr	r1, [r2, #0]
 8003808:	1850      	adds	r0, r2, r1
 800380a:	42a0      	cmp	r0, r4
 800380c:	d10b      	bne.n	8003826 <_free_r+0x72>
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	4401      	add	r1, r0
 8003812:	1850      	adds	r0, r2, r1
 8003814:	4283      	cmp	r3, r0
 8003816:	6011      	str	r1, [r2, #0]
 8003818:	d1de      	bne.n	80037d8 <_free_r+0x24>
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4401      	add	r1, r0
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	6053      	str	r3, [r2, #4]
 8003824:	e7d8      	b.n	80037d8 <_free_r+0x24>
 8003826:	d902      	bls.n	800382e <_free_r+0x7a>
 8003828:	230c      	movs	r3, #12
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	e7d4      	b.n	80037d8 <_free_r+0x24>
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	1821      	adds	r1, r4, r0
 8003832:	428b      	cmp	r3, r1
 8003834:	bf01      	itttt	eq
 8003836:	6819      	ldreq	r1, [r3, #0]
 8003838:	685b      	ldreq	r3, [r3, #4]
 800383a:	1809      	addeq	r1, r1, r0
 800383c:	6021      	streq	r1, [r4, #0]
 800383e:	6063      	str	r3, [r4, #4]
 8003840:	6054      	str	r4, [r2, #4]
 8003842:	e7c9      	b.n	80037d8 <_free_r+0x24>
 8003844:	bd38      	pop	{r3, r4, r5, pc}
 8003846:	bf00      	nop
 8003848:	200005a0 	.word	0x200005a0

0800384c <_malloc_r>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	1ccd      	adds	r5, r1, #3
 8003850:	f025 0503 	bic.w	r5, r5, #3
 8003854:	3508      	adds	r5, #8
 8003856:	2d0c      	cmp	r5, #12
 8003858:	bf38      	it	cc
 800385a:	250c      	movcc	r5, #12
 800385c:	2d00      	cmp	r5, #0
 800385e:	4606      	mov	r6, r0
 8003860:	db01      	blt.n	8003866 <_malloc_r+0x1a>
 8003862:	42a9      	cmp	r1, r5
 8003864:	d903      	bls.n	800386e <_malloc_r+0x22>
 8003866:	230c      	movs	r3, #12
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	2000      	movs	r0, #0
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800386e:	f000 fab7 	bl	8003de0 <__malloc_lock>
 8003872:	4921      	ldr	r1, [pc, #132]	; (80038f8 <_malloc_r+0xac>)
 8003874:	680a      	ldr	r2, [r1, #0]
 8003876:	4614      	mov	r4, r2
 8003878:	b99c      	cbnz	r4, 80038a2 <_malloc_r+0x56>
 800387a:	4f20      	ldr	r7, [pc, #128]	; (80038fc <_malloc_r+0xb0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	b923      	cbnz	r3, 800388a <_malloc_r+0x3e>
 8003880:	4621      	mov	r1, r4
 8003882:	4630      	mov	r0, r6
 8003884:	f000 f9be 	bl	8003c04 <_sbrk_r>
 8003888:	6038      	str	r0, [r7, #0]
 800388a:	4629      	mov	r1, r5
 800388c:	4630      	mov	r0, r6
 800388e:	f000 f9b9 	bl	8003c04 <_sbrk_r>
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	d123      	bne.n	80038de <_malloc_r+0x92>
 8003896:	230c      	movs	r3, #12
 8003898:	4630      	mov	r0, r6
 800389a:	6033      	str	r3, [r6, #0]
 800389c:	f000 faa6 	bl	8003dec <__malloc_unlock>
 80038a0:	e7e3      	b.n	800386a <_malloc_r+0x1e>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	1b5b      	subs	r3, r3, r5
 80038a6:	d417      	bmi.n	80038d8 <_malloc_r+0x8c>
 80038a8:	2b0b      	cmp	r3, #11
 80038aa:	d903      	bls.n	80038b4 <_malloc_r+0x68>
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	441c      	add	r4, r3
 80038b0:	6025      	str	r5, [r4, #0]
 80038b2:	e004      	b.n	80038be <_malloc_r+0x72>
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	42a2      	cmp	r2, r4
 80038b8:	bf0c      	ite	eq
 80038ba:	600b      	streq	r3, [r1, #0]
 80038bc:	6053      	strne	r3, [r2, #4]
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 fa94 	bl	8003dec <__malloc_unlock>
 80038c4:	f104 000b 	add.w	r0, r4, #11
 80038c8:	1d23      	adds	r3, r4, #4
 80038ca:	f020 0007 	bic.w	r0, r0, #7
 80038ce:	1ac2      	subs	r2, r0, r3
 80038d0:	d0cc      	beq.n	800386c <_malloc_r+0x20>
 80038d2:	1a1b      	subs	r3, r3, r0
 80038d4:	50a3      	str	r3, [r4, r2]
 80038d6:	e7c9      	b.n	800386c <_malloc_r+0x20>
 80038d8:	4622      	mov	r2, r4
 80038da:	6864      	ldr	r4, [r4, #4]
 80038dc:	e7cc      	b.n	8003878 <_malloc_r+0x2c>
 80038de:	1cc4      	adds	r4, r0, #3
 80038e0:	f024 0403 	bic.w	r4, r4, #3
 80038e4:	42a0      	cmp	r0, r4
 80038e6:	d0e3      	beq.n	80038b0 <_malloc_r+0x64>
 80038e8:	1a21      	subs	r1, r4, r0
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 f98a 	bl	8003c04 <_sbrk_r>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d1dd      	bne.n	80038b0 <_malloc_r+0x64>
 80038f4:	e7cf      	b.n	8003896 <_malloc_r+0x4a>
 80038f6:	bf00      	nop
 80038f8:	200005a0 	.word	0x200005a0
 80038fc:	200005a4 	.word	0x200005a4

08003900 <_realloc_r>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	4607      	mov	r7, r0
 8003904:	4614      	mov	r4, r2
 8003906:	460e      	mov	r6, r1
 8003908:	b921      	cbnz	r1, 8003914 <_realloc_r+0x14>
 800390a:	4611      	mov	r1, r2
 800390c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003910:	f7ff bf9c 	b.w	800384c <_malloc_r>
 8003914:	b922      	cbnz	r2, 8003920 <_realloc_r+0x20>
 8003916:	f7ff ff4d 	bl	80037b4 <_free_r>
 800391a:	4625      	mov	r5, r4
 800391c:	4628      	mov	r0, r5
 800391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003920:	f000 fa6a 	bl	8003df8 <_malloc_usable_size_r>
 8003924:	42a0      	cmp	r0, r4
 8003926:	d20f      	bcs.n	8003948 <_realloc_r+0x48>
 8003928:	4621      	mov	r1, r4
 800392a:	4638      	mov	r0, r7
 800392c:	f7ff ff8e 	bl	800384c <_malloc_r>
 8003930:	4605      	mov	r5, r0
 8003932:	2800      	cmp	r0, #0
 8003934:	d0f2      	beq.n	800391c <_realloc_r+0x1c>
 8003936:	4631      	mov	r1, r6
 8003938:	4622      	mov	r2, r4
 800393a:	f7ff f909 	bl	8002b50 <memcpy>
 800393e:	4631      	mov	r1, r6
 8003940:	4638      	mov	r0, r7
 8003942:	f7ff ff37 	bl	80037b4 <_free_r>
 8003946:	e7e9      	b.n	800391c <_realloc_r+0x1c>
 8003948:	4635      	mov	r5, r6
 800394a:	e7e7      	b.n	800391c <_realloc_r+0x1c>

0800394c <__ssputs_r>:
 800394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	688e      	ldr	r6, [r1, #8]
 8003952:	4682      	mov	sl, r0
 8003954:	429e      	cmp	r6, r3
 8003956:	460c      	mov	r4, r1
 8003958:	4690      	mov	r8, r2
 800395a:	461f      	mov	r7, r3
 800395c:	d838      	bhi.n	80039d0 <__ssputs_r+0x84>
 800395e:	898a      	ldrh	r2, [r1, #12]
 8003960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003964:	d032      	beq.n	80039cc <__ssputs_r+0x80>
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	6909      	ldr	r1, [r1, #16]
 800396a:	3301      	adds	r3, #1
 800396c:	eba5 0901 	sub.w	r9, r5, r1
 8003970:	6965      	ldr	r5, [r4, #20]
 8003972:	444b      	add	r3, r9
 8003974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800397c:	106d      	asrs	r5, r5, #1
 800397e:	429d      	cmp	r5, r3
 8003980:	bf38      	it	cc
 8003982:	461d      	movcc	r5, r3
 8003984:	0553      	lsls	r3, r2, #21
 8003986:	d531      	bpl.n	80039ec <__ssputs_r+0xa0>
 8003988:	4629      	mov	r1, r5
 800398a:	f7ff ff5f 	bl	800384c <_malloc_r>
 800398e:	4606      	mov	r6, r0
 8003990:	b950      	cbnz	r0, 80039a8 <__ssputs_r+0x5c>
 8003992:	230c      	movs	r3, #12
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f8ca 3000 	str.w	r3, [sl]
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	464a      	mov	r2, r9
 80039aa:	6921      	ldr	r1, [r4, #16]
 80039ac:	f7ff f8d0 	bl	8002b50 <memcpy>
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	6126      	str	r6, [r4, #16]
 80039be:	444e      	add	r6, r9
 80039c0:	6026      	str	r6, [r4, #0]
 80039c2:	463e      	mov	r6, r7
 80039c4:	6165      	str	r5, [r4, #20]
 80039c6:	eba5 0509 	sub.w	r5, r5, r9
 80039ca:	60a5      	str	r5, [r4, #8]
 80039cc:	42be      	cmp	r6, r7
 80039ce:	d900      	bls.n	80039d2 <__ssputs_r+0x86>
 80039d0:	463e      	mov	r6, r7
 80039d2:	4632      	mov	r2, r6
 80039d4:	4641      	mov	r1, r8
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	f7ff fed2 	bl	8003780 <memmove>
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	6822      	ldr	r2, [r4, #0]
 80039e0:	1b9b      	subs	r3, r3, r6
 80039e2:	4432      	add	r2, r6
 80039e4:	2000      	movs	r0, #0
 80039e6:	60a3      	str	r3, [r4, #8]
 80039e8:	6022      	str	r2, [r4, #0]
 80039ea:	e7db      	b.n	80039a4 <__ssputs_r+0x58>
 80039ec:	462a      	mov	r2, r5
 80039ee:	f7ff ff87 	bl	8003900 <_realloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d1e1      	bne.n	80039bc <__ssputs_r+0x70>
 80039f8:	4650      	mov	r0, sl
 80039fa:	6921      	ldr	r1, [r4, #16]
 80039fc:	f7ff feda 	bl	80037b4 <_free_r>
 8003a00:	e7c7      	b.n	8003992 <__ssputs_r+0x46>
	...

08003a04 <_svfiprintf_r>:
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	4698      	mov	r8, r3
 8003a0a:	898b      	ldrh	r3, [r1, #12]
 8003a0c:	4607      	mov	r7, r0
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	460d      	mov	r5, r1
 8003a12:	4614      	mov	r4, r2
 8003a14:	b09d      	sub	sp, #116	; 0x74
 8003a16:	d50e      	bpl.n	8003a36 <_svfiprintf_r+0x32>
 8003a18:	690b      	ldr	r3, [r1, #16]
 8003a1a:	b963      	cbnz	r3, 8003a36 <_svfiprintf_r+0x32>
 8003a1c:	2140      	movs	r1, #64	; 0x40
 8003a1e:	f7ff ff15 	bl	800384c <_malloc_r>
 8003a22:	6028      	str	r0, [r5, #0]
 8003a24:	6128      	str	r0, [r5, #16]
 8003a26:	b920      	cbnz	r0, 8003a32 <_svfiprintf_r+0x2e>
 8003a28:	230c      	movs	r3, #12
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e0d1      	b.n	8003bd6 <_svfiprintf_r+0x1d2>
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	616b      	str	r3, [r5, #20]
 8003a36:	2300      	movs	r3, #0
 8003a38:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a40:	2330      	movs	r3, #48	; 0x30
 8003a42:	f04f 0901 	mov.w	r9, #1
 8003a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bf0 <_svfiprintf_r+0x1ec>
 8003a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a52:	4623      	mov	r3, r4
 8003a54:	469a      	mov	sl, r3
 8003a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a5a:	b10a      	cbz	r2, 8003a60 <_svfiprintf_r+0x5c>
 8003a5c:	2a25      	cmp	r2, #37	; 0x25
 8003a5e:	d1f9      	bne.n	8003a54 <_svfiprintf_r+0x50>
 8003a60:	ebba 0b04 	subs.w	fp, sl, r4
 8003a64:	d00b      	beq.n	8003a7e <_svfiprintf_r+0x7a>
 8003a66:	465b      	mov	r3, fp
 8003a68:	4622      	mov	r2, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f7ff ff6d 	bl	800394c <__ssputs_r>
 8003a72:	3001      	adds	r0, #1
 8003a74:	f000 80aa 	beq.w	8003bcc <_svfiprintf_r+0x1c8>
 8003a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a7a:	445a      	add	r2, fp
 8003a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80a2 	beq.w	8003bcc <_svfiprintf_r+0x1c8>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a92:	f10a 0a01 	add.w	sl, sl, #1
 8003a96:	9304      	str	r3, [sp, #16]
 8003a98:	9307      	str	r3, [sp, #28]
 8003a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003aa0:	4654      	mov	r4, sl
 8003aa2:	2205      	movs	r2, #5
 8003aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa8:	4851      	ldr	r0, [pc, #324]	; (8003bf0 <_svfiprintf_r+0x1ec>)
 8003aaa:	f7ff fe5b 	bl	8003764 <memchr>
 8003aae:	9a04      	ldr	r2, [sp, #16]
 8003ab0:	b9d8      	cbnz	r0, 8003aea <_svfiprintf_r+0xe6>
 8003ab2:	06d0      	lsls	r0, r2, #27
 8003ab4:	bf44      	itt	mi
 8003ab6:	2320      	movmi	r3, #32
 8003ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003abc:	0711      	lsls	r1, r2, #28
 8003abe:	bf44      	itt	mi
 8003ac0:	232b      	movmi	r3, #43	; 0x2b
 8003ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aca:	2b2a      	cmp	r3, #42	; 0x2a
 8003acc:	d015      	beq.n	8003afa <_svfiprintf_r+0xf6>
 8003ace:	4654      	mov	r4, sl
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f04f 0c0a 	mov.w	ip, #10
 8003ad6:	9a07      	ldr	r2, [sp, #28]
 8003ad8:	4621      	mov	r1, r4
 8003ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ade:	3b30      	subs	r3, #48	; 0x30
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d94e      	bls.n	8003b82 <_svfiprintf_r+0x17e>
 8003ae4:	b1b0      	cbz	r0, 8003b14 <_svfiprintf_r+0x110>
 8003ae6:	9207      	str	r2, [sp, #28]
 8003ae8:	e014      	b.n	8003b14 <_svfiprintf_r+0x110>
 8003aea:	eba0 0308 	sub.w	r3, r0, r8
 8003aee:	fa09 f303 	lsl.w	r3, r9, r3
 8003af2:	4313      	orrs	r3, r2
 8003af4:	46a2      	mov	sl, r4
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	e7d2      	b.n	8003aa0 <_svfiprintf_r+0x9c>
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	1d19      	adds	r1, r3, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	9103      	str	r1, [sp, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfbb      	ittet	lt
 8003b06:	425b      	neglt	r3, r3
 8003b08:	f042 0202 	orrlt.w	r2, r2, #2
 8003b0c:	9307      	strge	r3, [sp, #28]
 8003b0e:	9307      	strlt	r3, [sp, #28]
 8003b10:	bfb8      	it	lt
 8003b12:	9204      	strlt	r2, [sp, #16]
 8003b14:	7823      	ldrb	r3, [r4, #0]
 8003b16:	2b2e      	cmp	r3, #46	; 0x2e
 8003b18:	d10c      	bne.n	8003b34 <_svfiprintf_r+0x130>
 8003b1a:	7863      	ldrb	r3, [r4, #1]
 8003b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1e:	d135      	bne.n	8003b8c <_svfiprintf_r+0x188>
 8003b20:	9b03      	ldr	r3, [sp, #12]
 8003b22:	3402      	adds	r4, #2
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bfb8      	it	lt
 8003b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b32:	9305      	str	r3, [sp, #20]
 8003b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c00 <_svfiprintf_r+0x1fc>
 8003b38:	2203      	movs	r2, #3
 8003b3a:	4650      	mov	r0, sl
 8003b3c:	7821      	ldrb	r1, [r4, #0]
 8003b3e:	f7ff fe11 	bl	8003764 <memchr>
 8003b42:	b140      	cbz	r0, 8003b56 <_svfiprintf_r+0x152>
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	eba0 000a 	sub.w	r0, r0, sl
 8003b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b4e:	9b04      	ldr	r3, [sp, #16]
 8003b50:	3401      	adds	r4, #1
 8003b52:	4303      	orrs	r3, r0
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5a:	2206      	movs	r2, #6
 8003b5c:	4825      	ldr	r0, [pc, #148]	; (8003bf4 <_svfiprintf_r+0x1f0>)
 8003b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b62:	f7ff fdff 	bl	8003764 <memchr>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d038      	beq.n	8003bdc <_svfiprintf_r+0x1d8>
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <_svfiprintf_r+0x1f4>)
 8003b6c:	bb1b      	cbnz	r3, 8003bb6 <_svfiprintf_r+0x1b2>
 8003b6e:	9b03      	ldr	r3, [sp, #12]
 8003b70:	3307      	adds	r3, #7
 8003b72:	f023 0307 	bic.w	r3, r3, #7
 8003b76:	3308      	adds	r3, #8
 8003b78:	9303      	str	r3, [sp, #12]
 8003b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b7c:	4433      	add	r3, r6
 8003b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b80:	e767      	b.n	8003a52 <_svfiprintf_r+0x4e>
 8003b82:	460c      	mov	r4, r1
 8003b84:	2001      	movs	r0, #1
 8003b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b8a:	e7a5      	b.n	8003ad8 <_svfiprintf_r+0xd4>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f04f 0c0a 	mov.w	ip, #10
 8003b92:	4619      	mov	r1, r3
 8003b94:	3401      	adds	r4, #1
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b9e:	3a30      	subs	r2, #48	; 0x30
 8003ba0:	2a09      	cmp	r2, #9
 8003ba2:	d903      	bls.n	8003bac <_svfiprintf_r+0x1a8>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0c5      	beq.n	8003b34 <_svfiprintf_r+0x130>
 8003ba8:	9105      	str	r1, [sp, #20]
 8003baa:	e7c3      	b.n	8003b34 <_svfiprintf_r+0x130>
 8003bac:	4604      	mov	r4, r0
 8003bae:	2301      	movs	r3, #1
 8003bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bb4:	e7f0      	b.n	8003b98 <_svfiprintf_r+0x194>
 8003bb6:	ab03      	add	r3, sp, #12
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	462a      	mov	r2, r5
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <_svfiprintf_r+0x1f8>)
 8003bc0:	a904      	add	r1, sp, #16
 8003bc2:	f3af 8000 	nop.w
 8003bc6:	1c42      	adds	r2, r0, #1
 8003bc8:	4606      	mov	r6, r0
 8003bca:	d1d6      	bne.n	8003b7a <_svfiprintf_r+0x176>
 8003bcc:	89ab      	ldrh	r3, [r5, #12]
 8003bce:	065b      	lsls	r3, r3, #25
 8003bd0:	f53f af2c 	bmi.w	8003a2c <_svfiprintf_r+0x28>
 8003bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bd6:	b01d      	add	sp, #116	; 0x74
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	ab03      	add	r3, sp, #12
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	462a      	mov	r2, r5
 8003be2:	4638      	mov	r0, r7
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <_svfiprintf_r+0x1f8>)
 8003be6:	a904      	add	r1, sp, #16
 8003be8:	f7ff f990 	bl	8002f0c <_printf_i>
 8003bec:	e7eb      	b.n	8003bc6 <_svfiprintf_r+0x1c2>
 8003bee:	bf00      	nop
 8003bf0:	08004254 	.word	0x08004254
 8003bf4:	0800425e 	.word	0x0800425e
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	0800394d 	.word	0x0800394d
 8003c00:	0800425a 	.word	0x0800425a

08003c04 <_sbrk_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	2300      	movs	r3, #0
 8003c08:	4d05      	ldr	r5, [pc, #20]	; (8003c20 <_sbrk_r+0x1c>)
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	f7fc fd3e 	bl	8000690 <_sbrk>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_sbrk_r+0x1a>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_sbrk_r+0x1a>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20000674 	.word	0x20000674

08003c24 <_raise_r>:
 8003c24:	291f      	cmp	r1, #31
 8003c26:	b538      	push	{r3, r4, r5, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	460d      	mov	r5, r1
 8003c2c:	d904      	bls.n	8003c38 <_raise_r+0x14>
 8003c2e:	2316      	movs	r3, #22
 8003c30:	6003      	str	r3, [r0, #0]
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c3a:	b112      	cbz	r2, 8003c42 <_raise_r+0x1e>
 8003c3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c40:	b94b      	cbnz	r3, 8003c56 <_raise_r+0x32>
 8003c42:	4620      	mov	r0, r4
 8003c44:	f000 f830 	bl	8003ca8 <_getpid_r>
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c52:	f000 b817 	b.w	8003c84 <_kill_r>
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d00a      	beq.n	8003c70 <_raise_r+0x4c>
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	d103      	bne.n	8003c66 <_raise_r+0x42>
 8003c5e:	2316      	movs	r3, #22
 8003c60:	6003      	str	r3, [r0, #0]
 8003c62:	2001      	movs	r0, #1
 8003c64:	e7e7      	b.n	8003c36 <_raise_r+0x12>
 8003c66:	2400      	movs	r4, #0
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c6e:	4798      	blx	r3
 8003c70:	2000      	movs	r0, #0
 8003c72:	e7e0      	b.n	8003c36 <_raise_r+0x12>

08003c74 <raise>:
 8003c74:	4b02      	ldr	r3, [pc, #8]	; (8003c80 <raise+0xc>)
 8003c76:	4601      	mov	r1, r0
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f7ff bfd3 	b.w	8003c24 <_raise_r>
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c

08003c84 <_kill_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	2300      	movs	r3, #0
 8003c88:	4d06      	ldr	r5, [pc, #24]	; (8003ca4 <_kill_r+0x20>)
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	602b      	str	r3, [r5, #0]
 8003c92:	f7fc fc7a 	bl	800058a <_kill>
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	d102      	bne.n	8003ca0 <_kill_r+0x1c>
 8003c9a:	682b      	ldr	r3, [r5, #0]
 8003c9c:	b103      	cbz	r3, 8003ca0 <_kill_r+0x1c>
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000674 	.word	0x20000674

08003ca8 <_getpid_r>:
 8003ca8:	f7fc bc68 	b.w	800057c <_getpid>

08003cac <__sread>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f8a8 	bl	8003e08 <_read_r>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	bfab      	itete	ge
 8003cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc0:	181b      	addge	r3, r3, r0
 8003cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cc6:	bfac      	ite	ge
 8003cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cca:	81a3      	strhlt	r3, [r4, #12]
 8003ccc:	bd10      	pop	{r4, pc}

08003cce <__swrite>:
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	05db      	lsls	r3, r3, #23
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4616      	mov	r6, r2
 8003cde:	d505      	bpl.n	8003cec <__swrite+0x1e>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	f000 f868 	bl	8003dbc <_lseek_r>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	4632      	mov	r2, r6
 8003cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f000 b817 	b.w	8003d34 <_write_r>

08003d06 <__sseek>:
 8003d06:	b510      	push	{r4, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0e:	f000 f855 	bl	8003dbc <_lseek_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	bf15      	itete	ne
 8003d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d22:	81a3      	strheq	r3, [r4, #12]
 8003d24:	bf18      	it	ne
 8003d26:	81a3      	strhne	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__sclose>:
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 b813 	b.w	8003d58 <_close_r>
	...

08003d34 <_write_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4d05      	ldr	r5, [pc, #20]	; (8003d54 <_write_r+0x20>)
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7fc fc58 	bl	80005f8 <_write>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_write_r+0x1e>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_write_r+0x1e>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	20000674 	.word	0x20000674

08003d58 <_close_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	4d05      	ldr	r5, [pc, #20]	; (8003d74 <_close_r+0x1c>)
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f7fc fc64 	bl	8000630 <_close>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d102      	bne.n	8003d72 <_close_r+0x1a>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	b103      	cbz	r3, 8003d72 <_close_r+0x1a>
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	20000674 	.word	0x20000674

08003d78 <_fstat_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4d06      	ldr	r5, [pc, #24]	; (8003d98 <_fstat_r+0x20>)
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	f7fc fc5e 	bl	8000646 <_fstat>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d102      	bne.n	8003d94 <_fstat_r+0x1c>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	b103      	cbz	r3, 8003d94 <_fstat_r+0x1c>
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	bd38      	pop	{r3, r4, r5, pc}
 8003d96:	bf00      	nop
 8003d98:	20000674 	.word	0x20000674

08003d9c <_isatty_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4d05      	ldr	r5, [pc, #20]	; (8003db8 <_isatty_r+0x1c>)
 8003da2:	4604      	mov	r4, r0
 8003da4:	4608      	mov	r0, r1
 8003da6:	602b      	str	r3, [r5, #0]
 8003da8:	f7fc fc5c 	bl	8000664 <_isatty>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d102      	bne.n	8003db6 <_isatty_r+0x1a>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	b103      	cbz	r3, 8003db6 <_isatty_r+0x1a>
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	20000674 	.word	0x20000674

08003dbc <_lseek_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4d05      	ldr	r5, [pc, #20]	; (8003ddc <_lseek_r+0x20>)
 8003dc8:	602a      	str	r2, [r5, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7fc fc54 	bl	8000678 <_lseek>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_lseek_r+0x1e>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_lseek_r+0x1e>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000674 	.word	0x20000674

08003de0 <__malloc_lock>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__malloc_lock+0x8>)
 8003de2:	f7ff bc59 	b.w	8003698 <__retarget_lock_acquire_recursive>
 8003de6:	bf00      	nop
 8003de8:	2000066c 	.word	0x2000066c

08003dec <__malloc_unlock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__malloc_unlock+0x8>)
 8003dee:	f7ff bc54 	b.w	800369a <__retarget_lock_release_recursive>
 8003df2:	bf00      	nop
 8003df4:	2000066c 	.word	0x2000066c

08003df8 <_malloc_usable_size_r>:
 8003df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dfc:	1f18      	subs	r0, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bfbc      	itt	lt
 8003e02:	580b      	ldrlt	r3, [r1, r0]
 8003e04:	18c0      	addlt	r0, r0, r3
 8003e06:	4770      	bx	lr

08003e08 <_read_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	2200      	movs	r2, #0
 8003e12:	4d05      	ldr	r5, [pc, #20]	; (8003e28 <_read_r+0x20>)
 8003e14:	602a      	str	r2, [r5, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f7fc fbd1 	bl	80005be <_read>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_read_r+0x1e>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_read_r+0x1e>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000674 	.word	0x20000674

08003e2c <_init>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr

08003e38 <_fini>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr
