
lwc_nist_benchmark_stm32l053c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051f0  080051f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f8  080051f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051fc  080051fc  000151fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000070  08005270  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08005270  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f10f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d1  00000000  00000000  0002f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00031778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001691d  00000000  00000000  00032f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3c2  00000000  00000000  0004987d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086172  00000000  00000000  00057c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dddb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  000dde04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d00 	.word	0x08004d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004d00 	.word	0x08004d00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80004ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80004d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fa7e 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f810 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8e2 	bl	80006c0 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004fc:	f000 f874 	bl	80005e8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f8ae 	bl	8000660 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  genkat_benchmark_hash_aead();
 8000504:	f002 ff94 	bl	8003430 <genkat_benchmark_hash_aead>
	  HAL_Delay(1000000);
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <main+0x28>)
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fae0 	bl	8000ad0 <HAL_Delay>
	  genkat_benchmark_hash_aead();
 8000510:	e7f8      	b.n	8000504 <main+0x18>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	000f4240 	.word	0x000f4240

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b09d      	sub	sp, #116	; 0x74
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	2438      	movs	r4, #56	; 0x38
 8000520:	193b      	adds	r3, r7, r4
 8000522:	0018      	movs	r0, r3
 8000524:	2338      	movs	r3, #56	; 0x38
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f003 fa48 	bl	80039be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052e:	2324      	movs	r3, #36	; 0x24
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	2314      	movs	r3, #20
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f003 fa40 	bl	80039be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053e:	003b      	movs	r3, r7
 8000540:	0018      	movs	r0, r3
 8000542:	2324      	movs	r3, #36	; 0x24
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f003 fa39 	bl	80039be <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SystemClock_Config+0xc8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a24      	ldr	r2, [pc, #144]	; (80005e4 <SystemClock_Config+0xcc>)
 8000552:	401a      	ands	r2, r3
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xc8>)
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	0109      	lsls	r1, r1, #4
 800055a:	430a      	orrs	r2, r1
 800055c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055e:	0021      	movs	r1, r4
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2202      	movs	r2, #2
 8000564:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2201      	movs	r2, #1
 800056a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2210      	movs	r2, #16
 8000570:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	187b      	adds	r3, r7, r1
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fd20 	bl	8000fc0 <HAL_RCC_OscConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000584:	f000 f8a4 	bl	80006d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	2124      	movs	r1, #36	; 0x24
 800058a:	187b      	adds	r3, r7, r1
 800058c:	220f      	movs	r2, #15
 800058e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2201      	movs	r2, #1
 8000594:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2100      	movs	r1, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 f8cb 	bl	8001748 <HAL_RCC_ClockConfig>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005b6:	f000 f88b 	bl	80006d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005c0:	003b      	movs	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fae1 	bl	8001b90 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005d2:	f000 f87d 	bl	80006d0 <Error_Handler>
  }
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b01d      	add	sp, #116	; 0x74
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40007000 	.word	0x40007000
 80005e4:	ffffe7ff 	.word	0xffffe7ff

080005e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ee:	003b      	movs	r3, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	2308      	movs	r3, #8
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 f9e1 	bl	80039be <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_TIM6_Init+0x6c>)
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_TIM6_Init+0x70>)
 8000600:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_TIM6_Init+0x6c>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_TIM6_Init+0x6c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_TIM6_Init+0x6c>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_TIM6_Init+0x74>)
 8000612:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_TIM6_Init+0x6c>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_TIM6_Init+0x6c>)
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fc1b 	bl	8001e58 <HAL_TIM_Base_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000626:	f000 f853 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	003b      	movs	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	003b      	movs	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000636:	003a      	movs	r2, r7
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_TIM6_Init+0x6c>)
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fe19 	bl	8002274 <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000646:	f000 f843 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	2000062c 	.word	0x2000062c
 8000658:	40001000 	.word	0x40001000
 800065c:	0000ffff 	.word	0x0000ffff

08000660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART1_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800066c:	22e1      	movs	r2, #225	; 0xe1
 800066e:	0252      	lsls	r2, r2, #9
 8000670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fe3d 	bl	8002324 <HAL_UART_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f80f 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200005a8 	.word	0x200005a8
 80006bc:	40013800 	.word	0x40013800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fefb 	bl	80004c0 <LL_IOP_GRP1_EnableClock>

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_MspInit+0x24>)
 80006e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x24>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	430a      	orrs	r2, r1
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_MspInit+0x24>)
 80006ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_MspInit+0x24>)
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	0549      	lsls	r1, r1, #21
 80006f6:	430a      	orrs	r2, r1
 80006f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <HAL_TIM_Base_MspInit+0x38>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d10d      	bne.n	8000732 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_TIM_Base_MspInit+0x3c>)
 8000718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_TIM_Base_MspInit+0x3c>)
 800071c:	2110      	movs	r1, #16
 800071e:	430a      	orrs	r2, r1
 8000720:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2011      	movs	r0, #17
 8000728:	f000 faa2 	bl	8000c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800072c:	2011      	movs	r0, #17
 800072e:	f000 fab4 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40001000 	.word	0x40001000
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	240c      	movs	r4, #12
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 f931 	bl	80039be <memset>
  if(huart->Instance==USART1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <HAL_UART_MspInit+0x80>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d12a      	bne.n	80007bc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_UART_MspInit+0x84>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_UART_MspInit+0x84>)
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	01c9      	lsls	r1, r1, #7
 8000770:	430a      	orrs	r2, r1
 8000772:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_UART_MspInit+0x84>)
 8000776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HAL_UART_MspInit+0x84>)
 800077a:	2101      	movs	r1, #1
 800077c:	430a      	orrs	r2, r1
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_UART_MspInit+0x84>)
 8000782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000784:	2201      	movs	r2, #1
 8000786:	4013      	ands	r3, r2
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	22c0      	movs	r2, #192	; 0xc0
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2202      	movs	r2, #2
 800079a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2203      	movs	r2, #3
 80007a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2204      	movs	r2, #4
 80007ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	187a      	adds	r2, r7, r1
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fa8c 	bl	8000cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b009      	add	sp, #36	; 0x24
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40013800 	.word	0x40013800
 80007c8:	40021000 	.word	0x40021000

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f952 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <TIM6_DAC_IRQHandler+0x14>)
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fbda 	bl	8001fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	2000062c 	.word	0x2000062c

08000814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	return 1;
 8000818:	2301      	movs	r3, #1
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_kill>:

int _kill(int pid, int sig)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800082a:	f003 f885 	bl	8003938 <__errno>
 800082e:	0003      	movs	r3, r0
 8000830:	2216      	movs	r2, #22
 8000832:	601a      	str	r2, [r3, #0]
	return -1;
 8000834:	2301      	movs	r3, #1
 8000836:	425b      	negs	r3, r3
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <_exit>:

void _exit (int status)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000848:	2301      	movs	r3, #1
 800084a:	425a      	negs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ffe5 	bl	8000820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000856:	e7fe      	b.n	8000856 <_exit+0x16>

08000858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e00a      	b.n	8000880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800086a:	e000      	b.n	800086e <_read+0x16>
 800086c:	bf00      	nop
 800086e:	0001      	movs	r1, r0
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	b2ca      	uxtb	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf0      	blt.n	800086a <_read+0x12>
	}

return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b006      	add	sp, #24
 8000890:	bd80      	pop	{r7, pc}

08000892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e009      	b.n	80008b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	0018      	movs	r0, r3
 80008ae:	e000      	b.n	80008b2 <_write+0x20>
 80008b0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf1      	blt.n	80008a4 <_write+0x12>
	}
	return len;
 80008c0:	687b      	ldr	r3, [r7, #4]
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b006      	add	sp, #24
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_close>:

int _close(int file)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	return -1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	425b      	negs	r3, r3
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}

080008de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	0192      	lsls	r2, r2, #6
 80008ee:	605a      	str	r2, [r3, #4]
	return 0;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	0018      	movs	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_isatty>:

int _isatty(int file)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	return 1;
 8000902:	2301      	movs	r3, #1
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	18d3      	adds	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f002 fff0 	bl	8003938 <__errno>
 8000958:	0003      	movs	r3, r0
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095e:	2301      	movs	r3, #1
 8000960:	425b      	negs	r3, r3
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	18d2      	adds	r2, r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <_sbrk+0x64>)
 8000974:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b006      	add	sp, #24
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20002000 	.word	0x20002000
 8000984:	00000400 	.word	0x00000400
 8000988:	2000008c 	.word	0x2000008c
 800098c:	200006b8 	.word	0x200006b8

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c6:	f7ff ffe3 	bl	8000990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f002 ffcb 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd8d 	bl	80004ec <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009e0:	08005200 	.word	0x08005200
  ldr r2, =_sbss
 80009e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e8:	200006b4 	.word	0x200006b4

080009ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_COMP_IRQHandler>
	...

080009f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_Init+0x3c>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Init+0x3c>)
 8000a02:	2140      	movs	r1, #64	; 0x40
 8000a04:	430a      	orrs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 f811 	bl	8000a30 <HAL_InitTick>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a1a:	f7ff fe5f 	bl	80006dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a3a:	681c      	ldr	r4, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x60>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0019      	movs	r1, r3
 8000a42:	23fa      	movs	r3, #250	; 0xfa
 8000a44:	0098      	lsls	r0, r3, #2
 8000a46:	f7ff fb71 	bl	800012c <__udivsi3>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff fb6c 	bl	800012c <__udivsi3>
 8000a54:	0003      	movs	r3, r0
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 f92f 	bl	8000cba <HAL_SYSTICK_Config>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e00f      	b.n	8000a84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d80b      	bhi.n	8000a82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 f8fc 	bl	8000c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_InitTick+0x64>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b003      	add	sp, #12
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	18d2      	adds	r2, r2, r3
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	2000066c 	.word	0x2000066c

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	2000066c 	.word	0x2000066c

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff fff0 	bl	8000abc <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001a      	movs	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	189b      	adds	r3, r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_GetTick>
 8000afc:	0002      	movs	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b7f      	cmp	r3, #127	; 0x7f
 8000b2a:	d809      	bhi.n	8000b40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	231f      	movs	r3, #31
 8000b34:	401a      	ands	r2, r3
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_EnableIRQ+0x30>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
  }
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b60:	d828      	bhi.n	8000bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b62:	4a2f      	ldr	r2, [pc, #188]	; (8000c20 <__NVIC_SetPriority+0xd4>)
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	33c0      	adds	r3, #192	; 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	589b      	ldr	r3, [r3, r2]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <__NVIC_SetPriority+0xd4>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	430a      	orrs	r2, r1
 8000bac:	33c0      	adds	r3, #192	; 0xc0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bb2:	e031      	b.n	8000c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0019      	movs	r1, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	3304      	adds	r3, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1dfa      	adds	r2, r7, #7
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	21ff      	movs	r1, #255	; 0xff
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	000a      	movs	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	401a      	ands	r2, r3
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	4003      	ands	r3, r0
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001c      	movs	r4, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	3306      	adds	r3, #6
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	18c3      	adds	r3, r0, r3
 8000c14:	3304      	adds	r3, #4
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	045b      	lsls	r3, r3, #17
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d301      	bcc.n	8000c40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e010      	b.n	8000c62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <SysTick_Config+0x44>)
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	3a01      	subs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ff7c 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x44>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	1c02      	adds	r2, r0, #0
 8000c80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ff33 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ffaf 	bl	8000c28 <SysTick_Config>
 8000cca:	0003      	movs	r3, r0
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cea:	e14f      	b.n	8000f8c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <HAL_GPIO_Init+0x30>
 8000d02:	e140      	b.n	8000f86 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d00b      	beq.n	8000d24 <HAL_GPIO_Init+0x50>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d18:	2b11      	cmp	r3, #17
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0xf2>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d123      	bne.n	8000e0e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	58d3      	ldr	r3, [r2, r3]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	4013      	ands	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2107      	movs	r1, #7
 8000df2:	400b      	ands	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	6939      	ldr	r1, [r7, #16]
 8000e0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <HAL_GPIO_Init+0x17c>
 8000e4e:	e09a      	b.n	8000f86 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e54:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <HAL_GPIO_Init+0x2d0>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5c:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <HAL_GPIO_Init+0x2d4>)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	589b      	ldr	r3, [r3, r2]
 8000e68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x1ea>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a47      	ldr	r2, [pc, #284]	; (8000fac <HAL_GPIO_Init+0x2d8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x1e6>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a46      	ldr	r2, [pc, #280]	; (8000fb0 <HAL_GPIO_Init+0x2dc>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x1e2>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <HAL_GPIO_Init+0x2e0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x1de>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x1da>
 8000eaa:	2305      	movs	r3, #5
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed0:	4935      	ldr	r1, [pc, #212]	; (8000fa8 <HAL_GPIO_Init+0x2d4>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	029b      	lsls	r3, r3, #10
 8000f20:	4013      	ands	r3, r2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	035b      	lsls	r3, r3, #13
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	039b      	lsls	r3, r3, #14
 8000f74:	4013      	ands	r3, r2
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	40da      	lsrs	r2, r3
 8000f94:	1e13      	subs	r3, r2, #0
 8000f96:	d000      	beq.n	8000f9a <HAL_GPIO_Init+0x2c6>
 8000f98:	e6a8      	b.n	8000cec <HAL_GPIO_Init+0x18>
  }
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b006      	add	sp, #24
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	50000400 	.word	0x50000400
 8000fb0:	50000800 	.word	0x50000800
 8000fb4:	50000c00 	.word	0x50000c00
 8000fb8:	50001c00 	.word	0x50001c00
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f000 fbaf 	bl	8001732 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fd4:	4bcf      	ldr	r3, [pc, #828]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4013      	ands	r3, r2
 8000fdc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fde:	4bcd      	ldr	r3, [pc, #820]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	025b      	lsls	r3, r3, #9
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d100      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x36>
 8000ff4:	e07e      	b.n	80010f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d007      	beq.n	800100c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d112      	bne.n	8001028 <HAL_RCC_OscConfig+0x68>
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	025b      	lsls	r3, r3, #9
 8001008:	429a      	cmp	r2, r3
 800100a:	d10d      	bne.n	8001028 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100c:	4bc1      	ldr	r3, [pc, #772]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	029b      	lsls	r3, r3, #10
 8001014:	4013      	ands	r3, r2
 8001016:	d100      	bne.n	800101a <HAL_RCC_OscConfig+0x5a>
 8001018:	e06b      	b.n	80010f2 <HAL_RCC_OscConfig+0x132>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d167      	bne.n	80010f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	f000 fb85 	bl	8001732 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	429a      	cmp	r2, r3
 8001032:	d107      	bne.n	8001044 <HAL_RCC_OscConfig+0x84>
 8001034:	4bb7      	ldr	r3, [pc, #732]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4bb6      	ldr	r3, [pc, #728]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e027      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	02db      	lsls	r3, r3, #11
 800104c:	429a      	cmp	r2, r3
 800104e:	d10e      	bne.n	800106e <HAL_RCC_OscConfig+0xae>
 8001050:	4bb0      	ldr	r3, [pc, #704]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4baf      	ldr	r3, [pc, #700]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	02c9      	lsls	r1, r1, #11
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	4bad      	ldr	r3, [pc, #692]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4bac      	ldr	r3, [pc, #688]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0249      	lsls	r1, r1, #9
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e012      	b.n	8001094 <HAL_RCC_OscConfig+0xd4>
 800106e:	4ba9      	ldr	r3, [pc, #676]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4ba8      	ldr	r3, [pc, #672]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001074:	49a8      	ldr	r1, [pc, #672]	; (8001318 <HAL_RCC_OscConfig+0x358>)
 8001076:	400a      	ands	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4ba6      	ldr	r3, [pc, #664]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	4013      	ands	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4ba2      	ldr	r3, [pc, #648]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4ba1      	ldr	r3, [pc, #644]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800108e:	49a3      	ldr	r1, [pc, #652]	; (800131c <HAL_RCC_OscConfig+0x35c>)
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d015      	beq.n	80010c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fd0e 	bl	8000abc <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010a4:	e009      	b.n	80010ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a6:	f7ff fd09 	bl	8000abc <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d902      	bls.n	80010ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f000 fb3c 	bl	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010ba:	4b96      	ldr	r3, [pc, #600]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d0ef      	beq.n	80010a6 <HAL_RCC_OscConfig+0xe6>
 80010c6:	e015      	b.n	80010f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fcf8 	bl	8000abc <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d2:	f7ff fcf3 	bl	8000abc <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b64      	cmp	r3, #100	; 0x64
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e326      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010e4:	4b8b      	ldr	r3, [pc, #556]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	029b      	lsls	r3, r3, #10
 80010ec:	4013      	ands	r3, r2
 80010ee:	d1f0      	bne.n	80010d2 <HAL_RCC_OscConfig+0x112>
 80010f0:	e000      	b.n	80010f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d100      	bne.n	8001100 <HAL_RCC_OscConfig+0x140>
 80010fe:	e08b      	b.n	8001218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d005      	beq.n	8001118 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d13e      	bne.n	8001190 <HAL_RCC_OscConfig+0x1d0>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d13b      	bne.n	8001190 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001118:	4b7e      	ldr	r3, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2204      	movs	r2, #4
 800111e:	4013      	ands	r3, r2
 8001120:	d004      	beq.n	800112c <HAL_RCC_OscConfig+0x16c>
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e302      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b79      	ldr	r3, [pc, #484]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a7b      	ldr	r2, [pc, #492]	; (8001320 <HAL_RCC_OscConfig+0x360>)
 8001132:	4013      	ands	r3, r2
 8001134:	0019      	movs	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	021a      	lsls	r2, r3, #8
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800113e:	430a      	orrs	r2, r1
 8001140:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001142:	4b74      	ldr	r3, [pc, #464]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2209      	movs	r2, #9
 8001148:	4393      	bics	r3, r2
 800114a:	0019      	movs	r1, r3
 800114c:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001154:	f000 fc40 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001158:	0001      	movs	r1, r0
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	220f      	movs	r2, #15
 8001162:	4013      	ands	r3, r2
 8001164:	4a6f      	ldr	r2, [pc, #444]	; (8001324 <HAL_RCC_OscConfig+0x364>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	000a      	movs	r2, r1
 800116a:	40da      	lsrs	r2, r3
 800116c:	4b6e      	ldr	r3, [pc, #440]	; (8001328 <HAL_RCC_OscConfig+0x368>)
 800116e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001170:	4b6e      	ldr	r3, [pc, #440]	; (800132c <HAL_RCC_OscConfig+0x36c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2513      	movs	r5, #19
 8001176:	197c      	adds	r4, r7, r5
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fc59 	bl	8000a30 <HAL_InitTick>
 800117e:	0003      	movs	r3, r0
 8001180:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001182:	197b      	adds	r3, r7, r5
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d046      	beq.n	8001218 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800118a:	197b      	adds	r3, r7, r5
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	e2d0      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d027      	beq.n	80011e6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2209      	movs	r2, #9
 800119c:	4393      	bics	r3, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc88 	bl	8000abc <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fc83 	bl	8000abc <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e2b6      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011c4:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2204      	movs	r2, #4
 80011ca:	4013      	ands	r3, r2
 80011cc:	d0f1      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a53      	ldr	r2, [pc, #332]	; (8001320 <HAL_RCC_OscConfig+0x360>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	0019      	movs	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	021a      	lsls	r2, r3, #8
 80011de:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80011e0:	430a      	orrs	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	438a      	bics	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc63 	bl	8000abc <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc5e 	bl	8000abc <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e291      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2204      	movs	r2, #4
 8001214:	4013      	ands	r3, r2
 8001216:	d1f1      	bne.n	80011fc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2210      	movs	r2, #16
 800121e:	4013      	ands	r3, r2
 8001220:	d100      	bne.n	8001224 <HAL_RCC_OscConfig+0x264>
 8001222:	e0a1      	b.n	8001368 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d140      	bne.n	80012ac <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x282>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e277      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a3a      	ldr	r2, [pc, #232]	; (8001330 <HAL_RCC_OscConfig+0x370>)
 8001248:	4013      	ands	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001252:	430a      	orrs	r2, r1
 8001254:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	0a19      	lsrs	r1, r3, #8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	061a      	lsls	r2, r3, #24
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001266:	430a      	orrs	r2, r1
 8001268:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	0b5b      	lsrs	r3, r3, #13
 8001270:	3301      	adds	r3, #1
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	0212      	lsls	r2, r2, #8
 8001276:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	210f      	movs	r1, #15
 8001280:	400b      	ands	r3, r1
 8001282:	4928      	ldr	r1, [pc, #160]	; (8001324 <HAL_RCC_OscConfig+0x364>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_RCC_OscConfig+0x368>)
 800128a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <HAL_RCC_OscConfig+0x36c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2513      	movs	r5, #19
 8001292:	197c      	adds	r4, r7, r5
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fbcb 	bl	8000a30 <HAL_InitTick>
 800129a:	0003      	movs	r3, r0
 800129c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800129e:	197b      	adds	r3, r7, r5
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d060      	beq.n	8001368 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80012a6:	197b      	adds	r3, r7, r5
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	e242      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d03f      	beq.n	8001334 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	0049      	lsls	r1, r1, #1
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fbfb 	bl	8000abc <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbf6 	bl	8000abc <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e229      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_RCC_OscConfig+0x370>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	0a19      	lsrs	r1, r3, #8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	061a      	lsls	r2, r3, #24
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	e029      	b.n	8001368 <HAL_RCC_OscConfig+0x3a8>
 8001314:	40021000 	.word	0x40021000
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	fffbffff 	.word	0xfffbffff
 8001320:	ffffe0ff 	.word	0xffffe0ff
 8001324:	08004f84 	.word	0x08004f84
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004
 8001330:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001334:	4bbd      	ldr	r3, [pc, #756]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4bbc      	ldr	r3, [pc, #752]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800133a:	49bd      	ldr	r1, [pc, #756]	; (8001630 <HAL_RCC_OscConfig+0x670>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fbbc 	bl	8000abc <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134a:	f7ff fbb7 	bl	8000abc <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1ea      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800135c:	4bb3      	ldr	r3, [pc, #716]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2208      	movs	r2, #8
 800136e:	4013      	ands	r3, r2
 8001370:	d036      	beq.n	80013e0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d019      	beq.n	80013ae <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4bac      	ldr	r3, [pc, #688]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800137c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800137e:	4bab      	ldr	r3, [pc, #684]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001380:	2101      	movs	r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb99 	bl	8000abc <HAL_GetTick>
 800138a:	0003      	movs	r3, r0
 800138c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fb94 	bl	8000abc <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1c7      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013a2:	4ba2      	ldr	r3, [pc, #648]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80013a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d0f1      	beq.n	8001390 <HAL_RCC_OscConfig+0x3d0>
 80013ac:	e018      	b.n	80013e0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b9f      	ldr	r3, [pc, #636]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80013b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013b2:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	438a      	bics	r2, r1
 80013b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fb7f 	bl	8000abc <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fb7a 	bl	8000abc <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1ad      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013d6:	4b95      	ldr	r3, [pc, #596]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d1f1      	bne.n	80013c4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	4013      	ands	r3, r2
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x42c>
 80013ea:	e0ae      	b.n	800154a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ec:	2027      	movs	r0, #39	; 0x27
 80013ee:	183b      	adds	r3, r7, r0
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f4:	4b8d      	ldr	r3, [pc, #564]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80013f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	055b      	lsls	r3, r3, #21
 80013fc:	4013      	ands	r3, r2
 80013fe:	d109      	bne.n	8001414 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	4b8a      	ldr	r3, [pc, #552]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001404:	4b89      	ldr	r3, [pc, #548]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0549      	lsls	r1, r1, #21
 800140a:	430a      	orrs	r2, r1
 800140c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800140e:	183b      	adds	r3, r7, r0
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x674>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4013      	ands	r3, r2
 800141e:	d11a      	bne.n	8001456 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001420:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCC_OscConfig+0x674>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b83      	ldr	r3, [pc, #524]	; (8001634 <HAL_RCC_OscConfig+0x674>)
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	0049      	lsls	r1, r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb45 	bl	8000abc <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001438:	f7ff fb40 	bl	8000abc <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e173      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b7a      	ldr	r3, [pc, #488]	; (8001634 <HAL_RCC_OscConfig+0x674>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4013      	ands	r3, r2
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	429a      	cmp	r2, r3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_OscConfig+0x4b2>
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001466:	4b71      	ldr	r3, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0049      	lsls	r1, r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	651a      	str	r2, [r3, #80]	; 0x50
 8001470:	e031      	b.n	80014d6 <HAL_RCC_OscConfig+0x516>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x4d4>
 800147a:	4b6c      	ldr	r3, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800147c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147e:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001480:	496b      	ldr	r1, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x670>)
 8001482:	400a      	ands	r2, r1
 8001484:	651a      	str	r2, [r3, #80]	; 0x50
 8001486:	4b69      	ldr	r3, [pc, #420]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148a:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800148c:	496a      	ldr	r1, [pc, #424]	; (8001638 <HAL_RCC_OscConfig+0x678>)
 800148e:	400a      	ands	r2, r1
 8001490:	651a      	str	r2, [r3, #80]	; 0x50
 8001492:	e020      	b.n	80014d6 <HAL_RCC_OscConfig+0x516>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	429a      	cmp	r2, r3
 800149e:	d10e      	bne.n	80014be <HAL_RCC_OscConfig+0x4fe>
 80014a0:	4b62      	ldr	r3, [pc, #392]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a4:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	00c9      	lsls	r1, r1, #3
 80014aa:	430a      	orrs	r2, r1
 80014ac:	651a      	str	r2, [r3, #80]	; 0x50
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b2:	4b5e      	ldr	r3, [pc, #376]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	0049      	lsls	r1, r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	651a      	str	r2, [r3, #80]	; 0x50
 80014bc:	e00b      	b.n	80014d6 <HAL_RCC_OscConfig+0x516>
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014c4:	495a      	ldr	r1, [pc, #360]	; (8001630 <HAL_RCC_OscConfig+0x670>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	651a      	str	r2, [r3, #80]	; 0x50
 80014ca:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014d0:	4959      	ldr	r1, [pc, #356]	; (8001638 <HAL_RCC_OscConfig+0x678>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d015      	beq.n	800150a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff faed 	bl	8000abc <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014e6:	e009      	b.n	80014fc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fae8 	bl	8000abc <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_RCC_OscConfig+0x67c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e11a      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80014fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d0ef      	beq.n	80014e8 <HAL_RCC_OscConfig+0x528>
 8001508:	e014      	b.n	8001534 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fad7 	bl	8000abc <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001512:	e009      	b.n	8001528 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fad2 	bl	8000abc <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_RCC_OscConfig+0x67c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e104      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800152a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d1ef      	bne.n	8001514 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001534:	2327      	movs	r3, #39	; 0x27
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d105      	bne.n	800154a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001544:	493e      	ldr	r1, [pc, #248]	; (8001640 <HAL_RCC_OscConfig+0x680>)
 8001546:	400a      	ands	r2, r1
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2220      	movs	r2, #32
 8001550:	4013      	ands	r3, r2
 8001552:	d049      	beq.n	80015e8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d026      	beq.n	80015aa <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 800156e:	2101      	movs	r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x684>)
 8001576:	6a1a      	ldr	r2, [r3, #32]
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x684>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	0189      	lsls	r1, r1, #6
 800157e:	430a      	orrs	r2, r1
 8001580:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fa9b 	bl	8000abc <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158c:	f7ff fa96 	bl	8000abc <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0c9      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f1      	beq.n	800158c <HAL_RCC_OscConfig+0x5cc>
 80015a8:	e01e      	b.n	80015e8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	438a      	bics	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_RCC_OscConfig+0x684>)
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_RCC_OscConfig+0x684>)
 80015bc:	4922      	ldr	r1, [pc, #136]	; (8001648 <HAL_RCC_OscConfig+0x688>)
 80015be:	400a      	ands	r2, r1
 80015c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa7b 	bl	8000abc <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015cc:	f7ff fa76 	bl	8000abc <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e0a9      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d1f1      	bne.n	80015cc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x632>
 80015f0:	e09e      	b.n	8001730 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	d100      	bne.n	80015fa <HAL_RCC_OscConfig+0x63a>
 80015f8:	e077      	b.n	80016ea <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d158      	bne.n	80016b4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x66c>)
 8001608:	4910      	ldr	r1, [pc, #64]	; (800164c <HAL_RCC_OscConfig+0x68c>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fa55 	bl	8000abc <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001616:	e01b      	b.n	8001650 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa50 	bl	8000abc <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d914      	bls.n	8001650 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e083      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40021000 	.word	0x40021000
 8001630:	fffffeff 	.word	0xfffffeff
 8001634:	40007000 	.word	0x40007000
 8001638:	fffffbff 	.word	0xfffffbff
 800163c:	00001388 	.word	0x00001388
 8001640:	efffffff 	.word	0xefffffff
 8001644:	40010000 	.word	0x40010000
 8001648:	ffffdfff 	.word	0xffffdfff
 800164c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001650:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	049b      	lsls	r3, r3, #18
 8001658:	4013      	ands	r3, r2
 800165a:	d1dd      	bne.n	8001618 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a37      	ldr	r2, [pc, #220]	; (8001740 <HAL_RCC_OscConfig+0x780>)
 8001662:	4013      	ands	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	431a      	orrs	r2, r3
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 8001678:	430a      	orrs	r2, r1
 800167a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	0449      	lsls	r1, r1, #17
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fa17 	bl	8000abc <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fa12 	bl	8000abc <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e045      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	049b      	lsls	r3, r3, #18
 80016ae:	4013      	ands	r3, r2
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x6d4>
 80016b2:	e03d      	b.n	8001730 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <HAL_RCC_OscConfig+0x784>)
 80016bc:	400a      	ands	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff f9fc 	bl	8000abc <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff f9f7 	bl	8000abc <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e02a      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	049b      	lsls	r3, r3, #18
 80016e4:	4013      	ands	r3, r2
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x70a>
 80016e8:	e022      	b.n	8001730 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e01d      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_RCC_OscConfig+0x77c>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	429a      	cmp	r2, r3
 800170a:	d10f      	bne.n	800172c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	23f0      	movs	r3, #240	; 0xf0
 8001710:	039b      	lsls	r3, r3, #14
 8001712:	401a      	ands	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b00a      	add	sp, #40	; 0x28
 8001738:	bdb0      	pop	{r4, r5, r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40021000 	.word	0x40021000
 8001740:	ff02ffff 	.word	0xff02ffff
 8001744:	feffffff 	.word	0xfeffffff

08001748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e128      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b96      	ldr	r3, [pc, #600]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d91e      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b93      	ldr	r3, [pc, #588]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	4b90      	ldr	r3, [pc, #576]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800177c:	f7ff f99e 	bl	8000abc <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001784:	e009      	b.n	800179a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f999 	bl	8000abc <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a8a      	ldr	r2, [pc, #552]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e109      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b87      	ldr	r3, [pc, #540]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b2:	4b83      	ldr	r3, [pc, #524]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	22f0      	movs	r2, #240	; 0xf0
 80017b8:	4393      	bics	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	4b7f      	ldr	r3, [pc, #508]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4013      	ands	r3, r2
 80017ce:	d100      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x8a>
 80017d0:	e089      	b.n	80018e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017da:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d120      	bne.n	8001828 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0e1      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	049b      	lsls	r3, r3, #18
 80017fa:	4013      	ands	r3, r2
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0d5      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d106      	bne.n	8001818 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180a:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2204      	movs	r2, #4
 8001810:	4013      	ands	r3, r2
 8001812:	d109      	bne.n	8001828 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0ca      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001818:	4b69      	ldr	r3, [pc, #420]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0c2      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001828:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2203      	movs	r2, #3
 800182e:	4393      	bics	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f93e 	bl	8000abc <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d111      	bne.n	8001870 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	e009      	b.n	8001862 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184e:	f7ff f935 	bl	8000abc <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0a5      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	220c      	movs	r2, #12
 8001868:	4013      	ands	r3, r2
 800186a:	2b08      	cmp	r3, #8
 800186c:	d1ef      	bne.n	800184e <HAL_RCC_ClockConfig+0x106>
 800186e:	e03a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d111      	bne.n	800189c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	e009      	b.n	800188e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187a:	f7ff f91f 	bl	8000abc <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e08f      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188e:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	220c      	movs	r2, #12
 8001894:	4013      	ands	r3, r2
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d1ef      	bne.n	800187a <HAL_RCC_ClockConfig+0x132>
 800189a:	e024      	b.n	80018e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d11b      	bne.n	80018dc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7ff f909 	bl	8000abc <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a42      	ldr	r2, [pc, #264]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e079      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	220c      	movs	r2, #12
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d1ef      	bne.n	80018a6 <HAL_RCC_ClockConfig+0x15e>
 80018c6:	e00e      	b.n	80018e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff f8f8 	bl	8000abc <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a3a      	ldr	r2, [pc, #232]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e068      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	220c      	movs	r2, #12
 80018e2:	4013      	ands	r3, r2
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d21e      	bcs.n	8001932 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4393      	bics	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001906:	f7ff f8d9 	bl	8000abc <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	e009      	b.n	8001924 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff f8d4 	bl	8000abc <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	4a28      	ldr	r2, [pc, #160]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e044      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4013      	ands	r3, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x27c>)
 8001942:	4013      	ands	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2208      	movs	r2, #8
 8001956:	4013      	ands	r3, r2
 8001958:	d00a      	beq.n	8001970 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_RCC_ClockConfig+0x280>)
 8001960:	4013      	ands	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	00da      	lsls	r2, r3, #3
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001970:	f000 f832 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001974:	0001      	movs	r1, r0
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_RCC_ClockConfig+0x278>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	220f      	movs	r2, #15
 800197e:	4013      	ands	r3, r2
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x284>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	000a      	movs	r2, r1
 8001986:	40da      	lsrs	r2, r3
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_RCC_ClockConfig+0x288>)
 800198a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_RCC_ClockConfig+0x28c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	250b      	movs	r5, #11
 8001992:	197c      	adds	r4, r7, r5
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff f84b 	bl	8000a30 <HAL_InitTick>
 800199a:	0003      	movs	r3, r0
 800199c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800199e:	197b      	adds	r3, r7, r5
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019a6:	197b      	adds	r3, r7, r5
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	e000      	b.n	80019ae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40022000 	.word	0x40022000
 80019bc:	00001388 	.word	0x00001388
 80019c0:	40021000 	.word	0x40021000
 80019c4:	fffff8ff 	.word	0xfffff8ff
 80019c8:	ffffc7ff 	.word	0xffffc7ff
 80019cc:	08004f84 	.word	0x08004f84
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80019de:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x138>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e6:	230c      	movs	r3, #12
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d014      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x40>
 80019ee:	d900      	bls.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1a>
 80019f0:	e07b      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x112>
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x24>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x3a>
 80019fa:	e076      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019fc:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x138>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a06:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a0a:	e07c      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a0c:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a10:	e079      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a12:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x144>)
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a16:	e076      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	0c9a      	lsrs	r2, r3, #18
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	401a      	ands	r2, r3
 8001a20:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	0d9a      	lsrs	r2, r3, #22
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	3301      	adds	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	025b      	lsls	r3, r3, #9
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d01a      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	4a35      	ldr	r2, [pc, #212]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x144>)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	69b8      	ldr	r0, [r7, #24]
 8001a4c:	69f9      	ldr	r1, [r7, #28]
 8001a4e:	f7fe fc19 	bl	8000284 <__aeabi_lmul>
 8001a52:	0002      	movs	r2, r0
 8001a54:	000b      	movs	r3, r1
 8001a56:	0010      	movs	r0, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f7fe fbed 	bl	8000244 <__aeabi_uldivmod>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	000b      	movs	r3, r1
 8001a6e:	0013      	movs	r3, r2
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
 8001a72:	e037      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d01a      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	68b8      	ldr	r0, [r7, #8]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	f7fe fbf9 	bl	8000284 <__aeabi_lmul>
 8001a92:	0002      	movs	r2, r0
 8001a94:	000b      	movs	r3, r1
 8001a96:	0010      	movs	r0, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f7fe fbcd 	bl	8000244 <__aeabi_uldivmod>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	000b      	movs	r3, r1
 8001aae:	0013      	movs	r3, r2
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab2:	e017      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	0019      	movs	r1, r3
 8001abc:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x140>)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f7fe fbe0 	bl	8000284 <__aeabi_lmul>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	000b      	movs	r3, r1
 8001ac8:	0010      	movs	r0, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	001c      	movs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	001d      	movs	r5, r3
 8001ad4:	0022      	movs	r2, r4
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	f7fe fbb4 	bl	8000244 <__aeabi_uldivmod>
 8001adc:	0002      	movs	r2, r0
 8001ade:	000b      	movs	r3, r1
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae8:	e00d      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	0b5b      	lsrs	r3, r3, #13
 8001af0:	2207      	movs	r2, #7
 8001af2:	4013      	ands	r3, r2
 8001af4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	3301      	adds	r3, #1
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	0212      	lsls	r2, r2, #8
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b04:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b00e      	add	sp, #56	; 0x38
 8001b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	003d0900 	.word	0x003d0900
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200
 8001b20:	08004f9c 	.word	0x08004f9c

08001b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff2 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b40:	0001      	movs	r1, r0
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	40d9      	lsrs	r1, r3
 8001b52:	000b      	movs	r3, r1
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	08004f94 	.word	0x08004f94

08001b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b68:	f7ff ffdc 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b6c:	0001      	movs	r1, r0
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	0adb      	lsrs	r3, r3, #11
 8001b74:	2207      	movs	r2, #7
 8001b76:	4013      	ands	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	40d9      	lsrs	r1, r3
 8001b7e:	000b      	movs	r3, r1
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08004f94 	.word	0x08004f94

08001b90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b98:	2317      	movs	r3, #23
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d100      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001bb6:	e0d9      	b.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb8:	4b9c      	ldr	r3, [pc, #624]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	055b      	lsls	r3, r3, #21
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d10a      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b99      	ldr	r3, [pc, #612]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc8:	4b98      	ldr	r3, [pc, #608]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	0549      	lsls	r1, r1, #21
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bd2:	2317      	movs	r3, #23
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b95      	ldr	r3, [pc, #596]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d11a      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b91      	ldr	r3, [pc, #580]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	0049      	lsls	r1, r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf4:	f7fe ff62 	bl	8000abc <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	e008      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7fe ff5d 	bl	8000abc <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b64      	cmp	r3, #100	; 0x64
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e108      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c1c:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	039b      	lsls	r3, r3, #14
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	23c0      	movs	r3, #192	; 0xc0
 8001c2e:	039b      	lsls	r3, r3, #14
 8001c30:	4013      	ands	r3, r2
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d107      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	039b      	lsls	r3, r3, #14
 8001c40:	4013      	ands	r3, r2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d013      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	23c0      	movs	r3, #192	; 0xc0
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	401a      	ands	r2, r3
 8001c52:	23c0      	movs	r3, #192	; 0xc0
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d10a      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c5a:	4b74      	ldr	r3, [pc, #464]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	401a      	ands	r2, r3
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0d8      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c70:	4b6e      	ldr	r3, [pc, #440]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c74:	23c0      	movs	r3, #192	; 0xc0
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d049      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d004      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2220      	movs	r2, #32
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	23c0      	movs	r3, #192	; 0xc0
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d034      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d02e      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cb8:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbc:	4a5d      	ldr	r2, [pc, #372]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cc2:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc6:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0309      	lsls	r1, r1, #12
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd0:	4b56      	ldr	r3, [pc, #344]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd4:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cd6:	4958      	ldr	r1, [pc, #352]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001cd8:	400a      	ands	r2, r1
 8001cda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d014      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fee6 	bl	8000abc <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe fee1 	bl	8000abc <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a4e      	ldr	r2, [pc, #312]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e08b      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0ef      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	23c0      	movs	r3, #192	; 0xc0
 8001d1c:	029b      	lsls	r3, r3, #10
 8001d1e:	401a      	ands	r2, r3
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	029b      	lsls	r3, r3, #10
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a44      	ldr	r2, [pc, #272]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	039b      	lsls	r3, r3, #14
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	401a      	ands	r2, r3
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d56:	2317      	movs	r3, #23
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d66:	4937      	ldr	r1, [pc, #220]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	4393      	bics	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d009      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2204      	movs	r2, #4
 8001dae:	4013      	ands	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	4013      	ands	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	0019      	movs	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b006      	add	sp, #24
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	fffcffff 	.word	0xfffcffff
 8001e38:	fff7ffff 	.word	0xfff7ffff
 8001e3c:	00001388 	.word	0x00001388
 8001e40:	ffcfffff 	.word	0xffcfffff
 8001e44:	efffffff 	.word	0xefffffff
 8001e48:	fffff3ff 	.word	0xfffff3ff
 8001e4c:	ffffcfff 	.word	0xffffcfff
 8001e50:	fbffffff 	.word	0xfbffffff
 8001e54:	fff3ffff 	.word	0xfff3ffff

08001e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e032      	b.n	8001ed0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2239      	movs	r2, #57	; 0x39
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2238      	movs	r2, #56	; 0x38
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fc3f 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2239      	movs	r2, #57	; 0x39
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	0019      	movs	r1, r3
 8001e98:	0010      	movs	r0, r2
 8001e9a:	f000 f997 	bl	80021cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	223e      	movs	r2, #62	; 0x3e
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	223a      	movs	r2, #58	; 0x3a
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223b      	movs	r2, #59	; 0x3b
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	5499      	strb	r1, [r3, r2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	223c      	movs	r2, #60	; 0x3c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	223d      	movs	r2, #61	; 0x3d
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2239      	movs	r2, #57	; 0x39
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2239      	movs	r2, #57	; 0x39
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e036      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2239      	movs	r2, #57	; 0x39
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	05db      	lsls	r3, r3, #23
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x50>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_TIM_Base_Start_IT+0x90>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x50>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_TIM_Base_Start_IT+0x94>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2207      	movs	r2, #7
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d010      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2101      	movs	r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b004      	add	sp, #16
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40011400 	.word	0x40011400

08001f70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	438a      	bics	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_TIM_Base_Stop_IT+0x48>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_Base_Stop_IT+0x34>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2239      	movs	r2, #57	; 0x39
 8001fa8:	2101      	movs	r1, #1
 8001faa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	00001111 	.word	0x00001111

08001fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d124      	bne.n	800201c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d11d      	bne.n	800201c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f8cc 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 8002004:	e007      	b.n	8002016 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f8bf 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f8cb 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2204      	movs	r2, #4
 8002024:	4013      	ands	r3, r2
 8002026:	2b04      	cmp	r3, #4
 8002028:	d125      	bne.n	8002076 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	2b04      	cmp	r3, #4
 8002036:	d11e      	bne.n	8002076 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2205      	movs	r2, #5
 800203e:	4252      	negs	r2, r2
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f89f 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 800205e:	e007      	b.n	8002070 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f892 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	0018      	movs	r0, r3
 800206c:	f000 f89e 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2208      	movs	r2, #8
 800207e:	4013      	ands	r3, r2
 8002080:	2b08      	cmp	r3, #8
 8002082:	d124      	bne.n	80020ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2208      	movs	r2, #8
 800208c:	4013      	ands	r3, r2
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11d      	bne.n	80020ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2209      	movs	r2, #9
 8002098:	4252      	negs	r2, r2
 800209a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2204      	movs	r2, #4
 80020a0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2203      	movs	r2, #3
 80020aa:	4013      	ands	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f873 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 80020b6:	e007      	b.n	80020c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 f866 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f872 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2210      	movs	r2, #16
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d125      	bne.n	8002128 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2210      	movs	r2, #16
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d11e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2211      	movs	r2, #17
 80020f0:	4252      	negs	r2, r2
 80020f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2208      	movs	r2, #8
 80020f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	23c0      	movs	r3, #192	; 0xc0
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d004      	beq.n	8002112 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f846 	bl	800219c <HAL_TIM_IC_CaptureCallback>
 8002110:	e007      	b.n	8002122 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f839 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0018      	movs	r0, r3
 800211e:	f000 f845 	bl	80021ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2201      	movs	r2, #1
 8002130:	4013      	ands	r3, r2
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10f      	bne.n	8002156 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2202      	movs	r2, #2
 800214a:	4252      	negs	r2, r2
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f001 fb05 	bl	8003760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	4013      	ands	r3, r2
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d10f      	bne.n	8002184 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	4013      	ands	r3, r2
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d108      	bne.n	8002184 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2241      	movs	r2, #65	; 0x41
 8002178:	4252      	negs	r2, r2
 800217a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f81c 	bl	80021bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0x2a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <TIM_Base_SetConfig+0x9c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0x2a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <TIM_Base_SetConfig+0xa0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d108      	bne.n	8002208 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2270      	movs	r2, #112	; 0x70
 80021fa:	4393      	bics	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	05db      	lsls	r3, r3, #23
 800220e:	429a      	cmp	r2, r3
 8002210:	d007      	beq.n	8002222 <TIM_Base_SetConfig+0x56>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM_Base_SetConfig+0x9c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d003      	beq.n	8002222 <TIM_Base_SetConfig+0x56>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a13      	ldr	r2, [pc, #76]	; (800226c <TIM_Base_SetConfig+0xa0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d108      	bne.n	8002234 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <TIM_Base_SetConfig+0xa4>)
 8002226:	4013      	ands	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	4393      	bics	r3, r2
 800223a:	001a      	movs	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	615a      	str	r2, [r3, #20]
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40010800 	.word	0x40010800
 800226c:	40011400 	.word	0x40011400
 8002270:	fffffcff 	.word	0xfffffcff

08002274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2238      	movs	r2, #56	; 0x38
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002288:	2302      	movs	r3, #2
 800228a:	e042      	b.n	8002312 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2238      	movs	r2, #56	; 0x38
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2239      	movs	r2, #57	; 0x39
 8002298:	2102      	movs	r1, #2
 800229a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2270      	movs	r2, #112	; 0x70
 80022b0:	4393      	bics	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	05db      	lsls	r3, r3, #23
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d009      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10c      	bne.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	4393      	bics	r3, r2
 80022ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2239      	movs	r2, #57	; 0x39
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2238      	movs	r2, #56	; 0x38
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	40010800 	.word	0x40010800
 8002320:	40011400 	.word	0x40011400

08002324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e044      	b.n	80023c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2274      	movs	r2, #116	; 0x74
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe f9fb 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2224      	movs	r2, #36	; 0x24
 8002352:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2101      	movs	r1, #1
 8002360:	438a      	bics	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f8d8 	bl	800251c <UART_SetConfig>
 800236c:	0003      	movs	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e024      	b.n	80023c0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fb6b 	bl	8002a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	490d      	ldr	r1, [pc, #52]	; (80023c8 <HAL_UART_Init+0xa4>)
 8002392:	400a      	ands	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	212a      	movs	r1, #42	; 0x2a
 80023a2:	438a      	bics	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fc03 	bl	8002bc4 <UART_CheckIdleState>
 80023be:	0003      	movs	r3, r0
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	ffffb7ff 	.word	0xffffb7ff

080023cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d000      	beq.n	80023e6 <HAL_UART_Transmit+0x1a>
 80023e4:	e095      	b.n	8002512 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_UART_Transmit+0x28>
 80023ec:	1dbb      	adds	r3, r7, #6
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e08d      	b.n	8002514 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	429a      	cmp	r2, r3
 8002402:	d109      	bne.n	8002418 <HAL_UART_Transmit+0x4c>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d001      	beq.n	8002418 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e07d      	b.n	8002514 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2274      	movs	r2, #116	; 0x74
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_UART_Transmit+0x5a>
 8002422:	2302      	movs	r3, #2
 8002424:	e076      	b.n	8002514 <HAL_UART_Transmit+0x148>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2274      	movs	r2, #116	; 0x74
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	2100      	movs	r1, #0
 8002434:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	; 0x21
 800243a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800243c:	f7fe fb3e 	bl	8000abc <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1dba      	adds	r2, r7, #6
 8002448:	2150      	movs	r1, #80	; 0x50
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1dba      	adds	r2, r7, #6
 8002452:	2152      	movs	r1, #82	; 0x52
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	429a      	cmp	r2, r3
 8002462:	d108      	bne.n	8002476 <HAL_UART_Transmit+0xaa>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e003      	b.n	800247e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2274      	movs	r2, #116	; 0x74
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002486:	e02c      	b.n	80024e2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	0013      	movs	r3, r2
 8002492:	2200      	movs	r2, #0
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	f000 fbdd 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e038      	b.n	8002514 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	001a      	movs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	05d2      	lsls	r2, r2, #23
 80024b4:	0dd2      	lsrs	r2, r2, #23
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	3302      	adds	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	e007      	b.n	80024d0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2252      	movs	r2, #82	; 0x52
 80024d4:	5a9b      	ldrh	r3, [r3, r2]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b299      	uxth	r1, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2252      	movs	r2, #82	; 0x52
 80024e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2252      	movs	r2, #82	; 0x52
 80024e6:	5a9b      	ldrh	r3, [r3, r2]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1cc      	bne.n	8002488 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	0013      	movs	r3, r2
 80024f8:	2200      	movs	r2, #0
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	f000 fbaa 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 8002500:	1e03      	subs	r3, r0, #0
 8002502:	d001      	beq.n	8002508 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e005      	b.n	8002514 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
  }
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b008      	add	sp, #32
 800251a:	bd80      	pop	{r7, pc}

0800251c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b08e      	sub	sp, #56	; 0x38
 8002520:	af00      	add	r7, sp, #0
 8002522:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002524:	231a      	movs	r3, #26
 8002526:	2218      	movs	r2, #24
 8002528:	4694      	mov	ip, r2
 800252a:	44bc      	add	ip, r7
 800252c:	4463      	add	r3, ip
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	431a      	orrs	r2, r3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	431a      	orrs	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4313      	orrs	r3, r2
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4ac1      	ldr	r2, [pc, #772]	; (8002858 <UART_SetConfig+0x33c>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4abd      	ldr	r2, [pc, #756]	; (800285c <UART_SetConfig+0x340>)
 8002568:	4013      	ands	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4ab7      	ldr	r2, [pc, #732]	; (8002860 <UART_SetConfig+0x344>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800258e:	4313      	orrs	r3, r2
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4ab2      	ldr	r2, [pc, #712]	; (8002864 <UART_SetConfig+0x348>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4aae      	ldr	r2, [pc, #696]	; (8002868 <UART_SetConfig+0x34c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d136      	bne.n	8002620 <UART_SetConfig+0x104>
 80025b2:	4bae      	ldr	r3, [pc, #696]	; (800286c <UART_SetConfig+0x350>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	2203      	movs	r2, #3
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d020      	beq.n	8002600 <UART_SetConfig+0xe4>
 80025be:	d827      	bhi.n	8002610 <UART_SetConfig+0xf4>
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d00d      	beq.n	80025e0 <UART_SetConfig+0xc4>
 80025c4:	d824      	bhi.n	8002610 <UART_SetConfig+0xf4>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <UART_SetConfig+0xb4>
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d010      	beq.n	80025f0 <UART_SetConfig+0xd4>
 80025ce:	e01f      	b.n	8002610 <UART_SetConfig+0xf4>
 80025d0:	231b      	movs	r3, #27
 80025d2:	2218      	movs	r2, #24
 80025d4:	4694      	mov	ip, r2
 80025d6:	44bc      	add	ip, r7
 80025d8:	4463      	add	r3, ip
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e0ab      	b.n	8002738 <UART_SetConfig+0x21c>
 80025e0:	231b      	movs	r3, #27
 80025e2:	2218      	movs	r2, #24
 80025e4:	4694      	mov	ip, r2
 80025e6:	44bc      	add	ip, r7
 80025e8:	4463      	add	r3, ip
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e0a3      	b.n	8002738 <UART_SetConfig+0x21c>
 80025f0:	231b      	movs	r3, #27
 80025f2:	2218      	movs	r2, #24
 80025f4:	4694      	mov	ip, r2
 80025f6:	44bc      	add	ip, r7
 80025f8:	4463      	add	r3, ip
 80025fa:	2204      	movs	r2, #4
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e09b      	b.n	8002738 <UART_SetConfig+0x21c>
 8002600:	231b      	movs	r3, #27
 8002602:	2218      	movs	r2, #24
 8002604:	4694      	mov	ip, r2
 8002606:	44bc      	add	ip, r7
 8002608:	4463      	add	r3, ip
 800260a:	2208      	movs	r2, #8
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e093      	b.n	8002738 <UART_SetConfig+0x21c>
 8002610:	231b      	movs	r3, #27
 8002612:	2218      	movs	r2, #24
 8002614:	4694      	mov	ip, r2
 8002616:	44bc      	add	ip, r7
 8002618:	4463      	add	r3, ip
 800261a:	2210      	movs	r2, #16
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e08b      	b.n	8002738 <UART_SetConfig+0x21c>
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a92      	ldr	r2, [pc, #584]	; (8002870 <UART_SetConfig+0x354>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d136      	bne.n	8002698 <UART_SetConfig+0x17c>
 800262a:	4b90      	ldr	r3, [pc, #576]	; (800286c <UART_SetConfig+0x350>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	220c      	movs	r2, #12
 8002630:	4013      	ands	r3, r2
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d020      	beq.n	8002678 <UART_SetConfig+0x15c>
 8002636:	d827      	bhi.n	8002688 <UART_SetConfig+0x16c>
 8002638:	2b08      	cmp	r3, #8
 800263a:	d00d      	beq.n	8002658 <UART_SetConfig+0x13c>
 800263c:	d824      	bhi.n	8002688 <UART_SetConfig+0x16c>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <UART_SetConfig+0x12c>
 8002642:	2b04      	cmp	r3, #4
 8002644:	d010      	beq.n	8002668 <UART_SetConfig+0x14c>
 8002646:	e01f      	b.n	8002688 <UART_SetConfig+0x16c>
 8002648:	231b      	movs	r3, #27
 800264a:	2218      	movs	r2, #24
 800264c:	4694      	mov	ip, r2
 800264e:	44bc      	add	ip, r7
 8002650:	4463      	add	r3, ip
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e06f      	b.n	8002738 <UART_SetConfig+0x21c>
 8002658:	231b      	movs	r3, #27
 800265a:	2218      	movs	r2, #24
 800265c:	4694      	mov	ip, r2
 800265e:	44bc      	add	ip, r7
 8002660:	4463      	add	r3, ip
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e067      	b.n	8002738 <UART_SetConfig+0x21c>
 8002668:	231b      	movs	r3, #27
 800266a:	2218      	movs	r2, #24
 800266c:	4694      	mov	ip, r2
 800266e:	44bc      	add	ip, r7
 8002670:	4463      	add	r3, ip
 8002672:	2204      	movs	r2, #4
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e05f      	b.n	8002738 <UART_SetConfig+0x21c>
 8002678:	231b      	movs	r3, #27
 800267a:	2218      	movs	r2, #24
 800267c:	4694      	mov	ip, r2
 800267e:	44bc      	add	ip, r7
 8002680:	4463      	add	r3, ip
 8002682:	2208      	movs	r2, #8
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e057      	b.n	8002738 <UART_SetConfig+0x21c>
 8002688:	231b      	movs	r3, #27
 800268a:	2218      	movs	r2, #24
 800268c:	4694      	mov	ip, r2
 800268e:	44bc      	add	ip, r7
 8002690:	4463      	add	r3, ip
 8002692:	2210      	movs	r2, #16
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e04f      	b.n	8002738 <UART_SetConfig+0x21c>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a70      	ldr	r2, [pc, #448]	; (8002860 <UART_SetConfig+0x344>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d143      	bne.n	800272a <UART_SetConfig+0x20e>
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <UART_SetConfig+0x350>)
 80026a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4013      	ands	r3, r2
 80026ac:	22c0      	movs	r2, #192	; 0xc0
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d02a      	beq.n	800270a <UART_SetConfig+0x1ee>
 80026b4:	22c0      	movs	r2, #192	; 0xc0
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d82e      	bhi.n	800271a <UART_SetConfig+0x1fe>
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d012      	beq.n	80026ea <UART_SetConfig+0x1ce>
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d826      	bhi.n	800271a <UART_SetConfig+0x1fe>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <UART_SetConfig+0x1be>
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	00d2      	lsls	r2, r2, #3
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d010      	beq.n	80026fa <UART_SetConfig+0x1de>
 80026d8:	e01f      	b.n	800271a <UART_SetConfig+0x1fe>
 80026da:	231b      	movs	r3, #27
 80026dc:	2218      	movs	r2, #24
 80026de:	4694      	mov	ip, r2
 80026e0:	44bc      	add	ip, r7
 80026e2:	4463      	add	r3, ip
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e026      	b.n	8002738 <UART_SetConfig+0x21c>
 80026ea:	231b      	movs	r3, #27
 80026ec:	2218      	movs	r2, #24
 80026ee:	4694      	mov	ip, r2
 80026f0:	44bc      	add	ip, r7
 80026f2:	4463      	add	r3, ip
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e01e      	b.n	8002738 <UART_SetConfig+0x21c>
 80026fa:	231b      	movs	r3, #27
 80026fc:	2218      	movs	r2, #24
 80026fe:	4694      	mov	ip, r2
 8002700:	44bc      	add	ip, r7
 8002702:	4463      	add	r3, ip
 8002704:	2204      	movs	r2, #4
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e016      	b.n	8002738 <UART_SetConfig+0x21c>
 800270a:	231b      	movs	r3, #27
 800270c:	2218      	movs	r2, #24
 800270e:	4694      	mov	ip, r2
 8002710:	44bc      	add	ip, r7
 8002712:	4463      	add	r3, ip
 8002714:	2208      	movs	r2, #8
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e00e      	b.n	8002738 <UART_SetConfig+0x21c>
 800271a:	231b      	movs	r3, #27
 800271c:	2218      	movs	r2, #24
 800271e:	4694      	mov	ip, r2
 8002720:	44bc      	add	ip, r7
 8002722:	4463      	add	r3, ip
 8002724:	2210      	movs	r2, #16
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e006      	b.n	8002738 <UART_SetConfig+0x21c>
 800272a:	231b      	movs	r3, #27
 800272c:	2218      	movs	r2, #24
 800272e:	4694      	mov	ip, r2
 8002730:	44bc      	add	ip, r7
 8002732:	4463      	add	r3, ip
 8002734:	2210      	movs	r2, #16
 8002736:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a48      	ldr	r2, [pc, #288]	; (8002860 <UART_SetConfig+0x344>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d000      	beq.n	8002744 <UART_SetConfig+0x228>
 8002742:	e09b      	b.n	800287c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002744:	231b      	movs	r3, #27
 8002746:	2218      	movs	r2, #24
 8002748:	4694      	mov	ip, r2
 800274a:	44bc      	add	ip, r7
 800274c:	4463      	add	r3, ip
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d01d      	beq.n	8002790 <UART_SetConfig+0x274>
 8002754:	dc20      	bgt.n	8002798 <UART_SetConfig+0x27c>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d015      	beq.n	8002786 <UART_SetConfig+0x26a>
 800275a:	dc1d      	bgt.n	8002798 <UART_SetConfig+0x27c>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <UART_SetConfig+0x24a>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d005      	beq.n	8002770 <UART_SetConfig+0x254>
 8002764:	e018      	b.n	8002798 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002766:	f7ff f9e7 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 800276a:	0003      	movs	r3, r0
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800276e:	e01d      	b.n	80027ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002770:	4b3e      	ldr	r3, [pc, #248]	; (800286c <UART_SetConfig+0x350>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d002      	beq.n	8002780 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800277a:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <UART_SetConfig+0x358>)
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800277e:	e015      	b.n	80027ac <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <UART_SetConfig+0x35c>)
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002784:	e012      	b.n	80027ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002786:	f7ff f927 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 800278a:	0003      	movs	r3, r0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800278e:	e00d      	b.n	80027ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002796:	e009      	b.n	80027ac <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800279c:	231a      	movs	r3, #26
 800279e:	2218      	movs	r2, #24
 80027a0:	4694      	mov	ip, r2
 80027a2:	44bc      	add	ip, r7
 80027a4:	4463      	add	r3, ip
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
        break;
 80027aa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d100      	bne.n	80027b4 <UART_SetConfig+0x298>
 80027b2:	e139      	b.n	8002a28 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	0013      	movs	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d305      	bcc.n	80027d0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d907      	bls.n	80027e0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80027d0:	231a      	movs	r3, #26
 80027d2:	2218      	movs	r2, #24
 80027d4:	4694      	mov	ip, r2
 80027d6:	44bc      	add	ip, r7
 80027d8:	4463      	add	r3, ip
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e123      	b.n	8002a28 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	6939      	ldr	r1, [r7, #16]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	000b      	movs	r3, r1
 80027ee:	0e1b      	lsrs	r3, r3, #24
 80027f0:	0010      	movs	r0, r2
 80027f2:	0205      	lsls	r5, r0, #8
 80027f4:	431d      	orrs	r5, r3
 80027f6:	000b      	movs	r3, r1
 80027f8:	021c      	lsls	r4, r3, #8
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68b8      	ldr	r0, [r7, #8]
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	1900      	adds	r0, r0, r4
 800280c:	4169      	adcs	r1, r5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f7fd fd12 	bl	8000244 <__aeabi_uldivmod>
 8002820:	0002      	movs	r2, r0
 8002822:	000b      	movs	r3, r1
 8002824:	0013      	movs	r3, r2
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	429a      	cmp	r2, r3
 8002830:	d309      	bcc.n	8002846 <UART_SetConfig+0x32a>
 8002832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	035b      	lsls	r3, r3, #13
 8002838:	429a      	cmp	r2, r3
 800283a:	d204      	bcs.n	8002846 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	e0f0      	b.n	8002a28 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002846:	231a      	movs	r3, #26
 8002848:	2218      	movs	r2, #24
 800284a:	4694      	mov	ip, r2
 800284c:	44bc      	add	ip, r7
 800284e:	4463      	add	r3, ip
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e0e8      	b.n	8002a28 <UART_SetConfig+0x50c>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	efff69f3 	.word	0xefff69f3
 800285c:	ffffcfff 	.word	0xffffcfff
 8002860:	40004800 	.word	0x40004800
 8002864:	fffff4ff 	.word	0xfffff4ff
 8002868:	40013800 	.word	0x40013800
 800286c:	40021000 	.word	0x40021000
 8002870:	40004400 	.word	0x40004400
 8002874:	003d0900 	.word	0x003d0900
 8002878:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	429a      	cmp	r2, r3
 8002886:	d000      	beq.n	800288a <UART_SetConfig+0x36e>
 8002888:	e074      	b.n	8002974 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800288a:	231b      	movs	r3, #27
 800288c:	2218      	movs	r2, #24
 800288e:	4694      	mov	ip, r2
 8002890:	44bc      	add	ip, r7
 8002892:	4463      	add	r3, ip
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d822      	bhi.n	80028e0 <UART_SetConfig+0x3c4>
 800289a:	009a      	lsls	r2, r3, #2
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <UART_SetConfig+0x52c>)
 800289e:	18d3      	adds	r3, r2, r3
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028a4:	f7ff f948 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 80028a8:	0003      	movs	r3, r0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ac:	e022      	b.n	80028f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028ae:	f7ff f959 	bl	8001b64 <HAL_RCC_GetPCLK2Freq>
 80028b2:	0003      	movs	r3, r0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028b6:	e01d      	b.n	80028f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <UART_SetConfig+0x530>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2210      	movs	r2, #16
 80028be:	4013      	ands	r3, r2
 80028c0:	d002      	beq.n	80028c8 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <UART_SetConfig+0x534>)
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028c6:	e015      	b.n	80028f4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 80028c8:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <UART_SetConfig+0x538>)
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028cc:	e012      	b.n	80028f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ce:	f7ff f883 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 80028d2:	0003      	movs	r3, r0
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d6:	e00d      	b.n	80028f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028de:	e009      	b.n	80028f4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028e4:	231a      	movs	r3, #26
 80028e6:	2218      	movs	r2, #24
 80028e8:	4694      	mov	ip, r2
 80028ea:	44bc      	add	ip, r7
 80028ec:	4463      	add	r3, ip
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
        break;
 80028f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d100      	bne.n	80028fc <UART_SetConfig+0x3e0>
 80028fa:	e095      	b.n	8002a28 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	005a      	lsls	r2, r3, #1
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	18d2      	adds	r2, r2, r3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0019      	movs	r1, r3
 800290e:	0010      	movs	r0, r2
 8002910:	f7fd fc0c 	bl	800012c <__udivsi3>
 8002914:	0003      	movs	r3, r0
 8002916:	b29b      	uxth	r3, r3
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	2b0f      	cmp	r3, #15
 800291e:	d921      	bls.n	8002964 <UART_SetConfig+0x448>
 8002920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	429a      	cmp	r2, r3
 8002928:	d21c      	bcs.n	8002964 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	b29a      	uxth	r2, r3
 800292e:	200e      	movs	r0, #14
 8002930:	2418      	movs	r4, #24
 8002932:	193b      	adds	r3, r7, r4
 8002934:	181b      	adds	r3, r3, r0
 8002936:	210f      	movs	r1, #15
 8002938:	438a      	bics	r2, r1
 800293a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	2207      	movs	r2, #7
 8002944:	4013      	ands	r3, r2
 8002946:	b299      	uxth	r1, r3
 8002948:	193b      	adds	r3, r7, r4
 800294a:	181b      	adds	r3, r3, r0
 800294c:	193a      	adds	r2, r7, r4
 800294e:	1812      	adds	r2, r2, r0
 8002950:	8812      	ldrh	r2, [r2, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	193a      	adds	r2, r7, r4
 800295c:	1812      	adds	r2, r2, r0
 800295e:	8812      	ldrh	r2, [r2, #0]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e061      	b.n	8002a28 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002964:	231a      	movs	r3, #26
 8002966:	2218      	movs	r2, #24
 8002968:	4694      	mov	ip, r2
 800296a:	44bc      	add	ip, r7
 800296c:	4463      	add	r3, ip
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e059      	b.n	8002a28 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002974:	231b      	movs	r3, #27
 8002976:	2218      	movs	r2, #24
 8002978:	4694      	mov	ip, r2
 800297a:	44bc      	add	ip, r7
 800297c:	4463      	add	r3, ip
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d822      	bhi.n	80029ca <UART_SetConfig+0x4ae>
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <UART_SetConfig+0x53c>)
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800298e:	f7ff f8d3 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 8002992:	0003      	movs	r3, r0
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002996:	e022      	b.n	80029de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002998:	f7ff f8e4 	bl	8001b64 <HAL_RCC_GetPCLK2Freq>
 800299c:	0003      	movs	r3, r0
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029a0:	e01d      	b.n	80029de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <UART_SetConfig+0x530>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	4013      	ands	r3, r2
 80029aa:	d002      	beq.n	80029b2 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029ac:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <UART_SetConfig+0x534>)
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029b0:	e015      	b.n	80029de <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <UART_SetConfig+0x538>)
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b6:	e012      	b.n	80029de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b8:	f7ff f80e 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 80029bc:	0003      	movs	r3, r0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c0:	e00d      	b.n	80029de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c8:	e009      	b.n	80029de <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029ce:	231a      	movs	r3, #26
 80029d0:	2218      	movs	r2, #24
 80029d2:	4694      	mov	ip, r2
 80029d4:	44bc      	add	ip, r7
 80029d6:	4463      	add	r3, ip
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
        break;
 80029dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	085a      	lsrs	r2, r3, #1
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	18d2      	adds	r2, r2, r3
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0019      	movs	r1, r3
 80029f4:	0010      	movs	r0, r2
 80029f6:	f7fd fb99 	bl	800012c <__udivsi3>
 80029fa:	0003      	movs	r3, r0
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	2b0f      	cmp	r3, #15
 8002a04:	d909      	bls.n	8002a1a <UART_SetConfig+0x4fe>
 8002a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	025b      	lsls	r3, r3, #9
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d204      	bcs.n	8002a1a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e006      	b.n	8002a28 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a1a:	231a      	movs	r3, #26
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	4694      	mov	ip, r2
 8002a20:	44bc      	add	ip, r7
 8002a22:	4463      	add	r3, ip
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2200      	movs	r2, #0
 8002a32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a34:	231a      	movs	r3, #26
 8002a36:	2218      	movs	r2, #24
 8002a38:	4694      	mov	ip, r2
 8002a3a:	44bc      	add	ip, r7
 8002a3c:	4463      	add	r3, ip
 8002a3e:	781b      	ldrb	r3, [r3, #0]
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b00e      	add	sp, #56	; 0x38
 8002a46:	bdb0      	pop	{r4, r5, r7, pc}
 8002a48:	08004fa8 	.word	0x08004fa8
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	003d0900 	.word	0x003d0900
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	08004fcc 	.word	0x08004fcc

08002a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <UART_AdvFeatureConfig+0x144>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d00b      	beq.n	8002aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <UART_AdvFeatureConfig+0x148>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2204      	movs	r2, #4
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d00b      	beq.n	8002aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <UART_AdvFeatureConfig+0x14c>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2208      	movs	r2, #8
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a34      	ldr	r2, [pc, #208]	; (8002bac <UART_AdvFeatureConfig+0x150>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2210      	movs	r2, #16
 8002af2:	4013      	ands	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <UART_AdvFeatureConfig+0x154>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2220      	movs	r2, #32
 8002b14:	4013      	ands	r3, r2
 8002b16:	d00b      	beq.n	8002b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4a25      	ldr	r2, [pc, #148]	; (8002bb4 <UART_AdvFeatureConfig+0x158>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	4013      	ands	r3, r2
 8002b38:	d01d      	beq.n	8002b76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <UART_AdvFeatureConfig+0x15c>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	035b      	lsls	r3, r3, #13
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d10b      	bne.n	8002b76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <UART_AdvFeatureConfig+0x160>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <UART_AdvFeatureConfig+0x164>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	fffdffff 	.word	0xfffdffff
 8002ba4:	fffeffff 	.word	0xfffeffff
 8002ba8:	fffbffff 	.word	0xfffbffff
 8002bac:	ffff7fff 	.word	0xffff7fff
 8002bb0:	ffffefff 	.word	0xffffefff
 8002bb4:	ffffdfff 	.word	0xffffdfff
 8002bb8:	ffefffff 	.word	0xffefffff
 8002bbc:	ff9fffff 	.word	0xff9fffff
 8002bc0:	fff7ffff 	.word	0xfff7ffff

08002bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bd4:	f7fd ff72 	bl	8000abc <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2208      	movs	r2, #8
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d10c      	bne.n	8002c04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	0391      	lsls	r1, r2, #14
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <UART_CheckIdleState+0x8c>)
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f000 f82c 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e021      	b.n	8002c48 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d10c      	bne.n	8002c2c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	03d1      	lsls	r1, r2, #15
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <UART_CheckIdleState+0x8c>)
 8002c1c:	9200      	str	r2, [sp, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f000 f818 	bl	8002c54 <UART_WaitOnFlagUntilTimeout>
 8002c24:	1e03      	subs	r3, r0, #0
 8002c26:	d001      	beq.n	8002c2c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e00d      	b.n	8002c48 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2274      	movs	r2, #116	; 0x74
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	01ffffff 	.word	0x01ffffff

08002c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c64:	e05e      	b.n	8002d24 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	d05b      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6c:	f7fd ff26 	bl	8000abc <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d302      	bcc.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11b      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	492f      	ldr	r1, [pc, #188]	; (8002d4c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2274      	movs	r2, #116	; 0x74
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e044      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d02e      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d124      	bne.n	8002d24 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4917      	ldr	r1, [pc, #92]	; (8002d4c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	438a      	bics	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	2120      	movs	r1, #32
 8002d16:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2274      	movs	r2, #116	; 0x74
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e00f      	b.n	8002d44 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	425a      	negs	r2, r3
 8002d34:	4153      	adcs	r3, r2
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	001a      	movs	r2, r3
 8002d3a:	1dfb      	adds	r3, r7, #7
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d091      	beq.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	fffffe5f 	.word	0xfffffe5f

08002d50 <injectm_ref>:
// The function injectm_ref adds a 16-byte block of the message to the two
// leftmost branches of the state (i.e. to the state-words x0, y0, x1, and y1),
// whereby the block is first ransformed via a linear Feistel function.

void injectm_ref(state_t *state, const uchar_t *msgbytes, int nb)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t *msgwords = (uint32_t *) msgbytes;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpx = 0, tmpy = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
  int i, j;

  // Since the message block is 16 bytes long, we need to consider only two
  // x-words when computing tmpx and two y-words when computing tmpy.

  for(i = 0; i < MSGBLOCK_WLEN; i += 2) {
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	e013      	b.n	8002d96 <injectm_ref+0x46>
    tmpx ^= msgwords[i];
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	18d3      	adds	r3, r2, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	4053      	eors	r3, r2
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    tmpy ^= msgwords[i+1];
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	18d3      	adds	r3, r2, r3
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a3a      	ldr	r2, [r7, #32]
 8002d8c:	4053      	eors	r3, r2
 8002d8e:	623b      	str	r3, [r7, #32]
  for(i = 0; i < MSGBLOCK_WLEN; i += 2) {
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3302      	adds	r3, #2
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	dde8      	ble.n	8002d6e <injectm_ref+0x1e>
  }
  tmpx = ELL(tmpx);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	041a      	lsls	r2, r3, #16
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	4053      	eors	r3, r2
 8002da4:	2210      	movs	r2, #16
 8002da6:	41d3      	rors	r3, r2
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
  tmpy = ELL(tmpy);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	4053      	eors	r3, r2
 8002db2:	2210      	movs	r2, #16
 8002db4:	41d3      	rors	r3, r2
 8002db6:	623b      	str	r3, [r7, #32]
  // The two leftmost x-words of the state are updated by adding the two
  // x-words of the message and tmpy to them, and the same is done with the two
  // leftmost y-words. The remaining nb/2-2 x-words are updated by just adding
  // tmpy to them, and the same is done with the remaining nb/2-2 y-words.

  for (i = j = 0; i < MSGBLOCK_WLEN/2; i++) {
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e02a      	b.n	8002e18 <injectm_ref+0xc8>
    state->x[i] ^= (msgwords[j++] ^ tmpy);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	61ba      	str	r2, [r7, #24]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	18d3      	adds	r3, r2, r3
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	405a      	eors	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	69f9      	ldr	r1, [r7, #28]
 8002dd8:	0089      	lsls	r1, r1, #2
 8002dda:	58cb      	ldr	r3, [r1, r3]
 8002ddc:	405a      	eors	r2, r3
 8002dde:	0011      	movs	r1, r2
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	0092      	lsls	r2, r2, #2
 8002de6:	50d1      	str	r1, [r2, r3]
    state->y[i] ^= (msgwords[j++] ^ tmpx);
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	61ba      	str	r2, [r7, #24]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	18d3      	adds	r3, r2, r3
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	405a      	eors	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	69f9      	ldr	r1, [r7, #28]
 8002dfe:	3108      	adds	r1, #8
 8002e00:	0089      	lsls	r1, r1, #2
 8002e02:	58cb      	ldr	r3, [r1, r3]
 8002e04:	405a      	eors	r2, r3
 8002e06:	0011      	movs	r1, r2
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	50d1      	str	r1, [r2, r3]
  for (i = j = 0; i < MSGBLOCK_WLEN/2; i++) {
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	ddd1      	ble.n	8002dc2 <injectm_ref+0x72>
  }
  for (i = MSGBLOCK_WLEN/2; i < nb/2; i++) {
 8002e1e:	2302      	movs	r3, #2
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	e01a      	b.n	8002e5a <injectm_ref+0x10a>
    state->x[i] ^= tmpy;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	58d2      	ldr	r2, [r2, r3]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	405a      	eors	r2, r3
 8002e30:	0011      	movs	r1, r2
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	50d1      	str	r1, [r2, r3]
    state->y[i] ^= tmpx;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	58d2      	ldr	r2, [r2, r3]
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	405a      	eors	r2, r3
 8002e48:	0011      	movs	r1, r2
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	50d1      	str	r1, [r2, r3]
  for (i = MSGBLOCK_WLEN/2; i < nb/2; i++) {
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da00      	bge.n	8002e62 <injectm_ref+0x112>
 8002e60:	3301      	adds	r3, #1
 8002e62:	105b      	asrs	r3, r3, #1
 8002e64:	001a      	movs	r2, r3
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	dbdb      	blt.n	8002e24 <injectm_ref+0xd4>
  }
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b00a      	add	sp, #40	; 0x28
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <trunc_state>:

// The function trunc_state extracts the four 32-bit words x0, y0, x1, and y1
// from the state and copies these 16 bytes to the array <out>.

void trunc_state(uchar_t *out, const state_t *state)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  uint32_t *out_words = (uint32_t *) out;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60fb      	str	r3, [r7, #12]
  int i, j;

  for (i = j = 0; j < SQZBLOCK_WLEN; i++) {
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e019      	b.n	8002ec2 <trunc_state+0x4c>
    out_words[j++] = state->x[i];
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	613a      	str	r2, [r7, #16]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	18d3      	adds	r3, r2, r3
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	6979      	ldr	r1, [r7, #20]
 8002e9e:	0089      	lsls	r1, r1, #2
 8002ea0:	588a      	ldr	r2, [r1, r2]
 8002ea2:	601a      	str	r2, [r3, #0]
    out_words[j++] = state->y[i];
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	613a      	str	r2, [r7, #16]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	3108      	adds	r1, #8
 8002eb6:	0089      	lsls	r1, r1, #2
 8002eb8:	588a      	ldr	r2, [r1, r2]
 8002eba:	601a      	str	r2, [r3, #0]
  for (i = j = 0; j < SQZBLOCK_WLEN; i++) {
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	dde2      	ble.n	8002e8e <trunc_state+0x18>
  }
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <crypto_hash>:

// To ensure compatibility with the SUPERCOP, the below implementation of
// crypto_hash can handle overlapping input and output buffers.

int crypto_hash(uchar_t *out, const uchar_t *in, ullint_t inlen)
{
 8002ed2:	b590      	push	{r4, r7, lr}
 8002ed4:	b09d      	sub	sp, #116	; 0x74
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	603a      	str	r2, [r7, #0]
 8002ede:	607b      	str	r3, [r7, #4]
  state_t state = { { 0 }, { 0 } };   // State with x, y array initialized to 0
 8002ee0:	2324      	movs	r3, #36	; 0x24
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	001a      	movs	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	f000 fd67 	bl	80039be <memset>
  uchar_t lastblk[MSGBLOCK_BLEN] = { 0 };   // Buffer for last block of message
 8002ef0:	2314      	movs	r3, #20
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	220c      	movs	r2, #12
 8002efc:	2100      	movs	r1, #0
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 fd5d 	bl	80039be <memset>
  // The type size_t is large enough to contain the size in bytes of any object
  size_t in_blen = (size_t) inlen, hashed_bytes = 0, lastblk_blen;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f08:	2300      	movs	r3, #0
 8002f0a:	66fb      	str	r3, [r7, #108]	; 0x6c

  // A message exceeding 16 bytes is absorbed in 16-byte blocks. Note that the
  // loop below is not iterated at all when inlen <= 16 bytes.

  while((in_blen - hashed_bytes) > MSGBLOCK_BLEN) {
 8002f0c:	e011      	b.n	8002f32 <crypto_hash+0x60>
    // Add 16 bytes of the message to the state
    injectm_ref(&state, &(in[hashed_bytes]), NUM_BRANCHES);
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f12:	18d1      	adds	r1, r2, r3
 8002f14:	2424      	movs	r4, #36	; 0x24
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	2208      	movs	r2, #8
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff ff18 	bl	8002d50 <injectm_ref>
    // Execute SPARKLE with a slim number of steps
    sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	2208      	movs	r2, #8
 8002f24:	2108      	movs	r1, #8
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f96a 	bl	8003200 <sparkle_ref>
    hashed_bytes += MSGBLOCK_BLEN;
 8002f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2e:	3310      	adds	r3, #16
 8002f30:	66fb      	str	r3, [r7, #108]	; 0x6c
  while((in_blen - hashed_bytes) > MSGBLOCK_BLEN) {
 8002f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d8e8      	bhi.n	8002f0e <crypto_hash+0x3c>
  }

  // The last block can be between 0 and 16 bytes long (it can only be 0 when
  // inlen is 0). It is padded only when its length is shorter than 16 bytes.

  lastblk_blen = in_blen - hashed_bytes;
 8002f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	667b      	str	r3, [r7, #100]	; 0x64
  memcpy(lastblk, &(in[hashed_bytes]), lastblk_blen);
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f48:	18d1      	adds	r1, r2, r3
 8002f4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f4c:	2414      	movs	r4, #20
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 fd2b 	bl	80039ac <memcpy>
  if (lastblk_blen < MSGBLOCK_BLEN) {
 8002f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d804      	bhi.n	8002f66 <crypto_hash+0x94>
    lastblk[lastblk_blen] = 0x80;
 8002f5c:	193a      	adds	r2, r7, r4
 8002f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	701a      	strb	r2, [r3, #0]
  }
  // Absorb the (padded) last message block
  injectm_ref(&state, lastblk, NUM_BRANCHES);
 8002f66:	2314      	movs	r3, #20
 8002f68:	18f9      	adds	r1, r7, r3
 8002f6a:	2424      	movs	r4, #36	; 0x24
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	2208      	movs	r2, #8
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff feed 	bl	8002d50 <injectm_ref>
  // Const_M is added to y3, which is state.y[3]
  if (lastblk_blen < MSGBLOCK_BLEN) {
 8002f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d808      	bhi.n	8002f8e <crypto_hash+0xbc>
    state.y[(NUM_BRANCHES/2)-1] ^= 0x01000000;
 8002f7c:	0021      	movs	r1, r4
 8002f7e:	187b      	adds	r3, r7, r1
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	0452      	lsls	r2, r2, #17
 8002f86:	405a      	eors	r2, r3
 8002f88:	187b      	adds	r3, r7, r1
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f8c:	e007      	b.n	8002f9e <crypto_hash+0xcc>
  } else {
    state.y[(NUM_BRANCHES/2)-1] ^= 0x02000000;
 8002f8e:	2124      	movs	r1, #36	; 0x24
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0492      	lsls	r2, r2, #18
 8002f98:	405a      	eors	r2, r3
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  // Execute SPARKLE with a big number of steps
  sparkle_ref(&state, NUM_BRANCHES, STEPS_BIG);
 8002f9e:	2424      	movs	r4, #36	; 0x24
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f92a 	bl	8003200 <sparkle_ref>

  // Squeeze to produce the message digest

  trunc_state(out, &state);
 8002fac:	193a      	adds	r2, r7, r4
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0011      	movs	r1, r2
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff ff5f 	bl	8002e76 <trunc_state>
  sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	2208      	movs	r2, #8
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f91e 	bl	8003200 <sparkle_ref>
  trunc_state(&(out[SQZBLOCK_BLEN]), &state);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3310      	adds	r3, #16
 8002fc8:	193a      	adds	r2, r7, r4
 8002fca:	0011      	movs	r1, r2
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff ff52 	bl	8002e76 <trunc_state>
  sparkle_ref(&state, NUM_BRANCHES, STEPS_SLIM);
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	2108      	movs	r1, #8
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f911 	bl	8003200 <sparkle_ref>
  trunc_state(&(out[2*SQZBLOCK_BLEN]), &state);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3320      	adds	r3, #32
 8002fe2:	193a      	adds	r2, r7, r4
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff ff45 	bl	8002e76 <trunc_state>

  return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b01d      	add	sp, #116	; 0x74
 8002ff4:	bd90      	pop	{r4, r7, pc}
	...

08002ff8 <linear_layer>:
  0xBB1185EB, 0x4F7C7B57, 0xCFBFA1C8, 0xC2B3293D  \
};


void linear_layer(state_t *state, int nb)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  int i, b = nb/2;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da00      	bge.n	800300a <linear_layer+0x12>
 8003008:	3301      	adds	r3, #1
 800300a:	105b      	asrs	r3, r3, #1
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t *x = state->x, *y = state->y;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3320      	adds	r3, #32
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;
  
  // Feistel function (adding to y part)
  tmp = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e00a      	b.n	8003038 <linear_layer+0x40>
    tmp ^= x[i];
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4053      	eors	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbf0      	blt.n	8003022 <linear_layer+0x2a>
  tmp = ELL(tmp);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	041a      	lsls	r2, r3, #16
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4053      	eors	r3, r2
 8003048:	2210      	movs	r2, #16
 800304a:	41d3      	rors	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e018      	b.n	8003086 <linear_layer+0x8e>
    y[i+b] ^= (tmp ^ y[i]);
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	18d3      	adds	r3, r2, r3
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	18d3      	adds	r3, r2, r3
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	18d3      	adds	r3, r2, r3
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	405a      	eors	r2, r3
 8003070:	69f8      	ldr	r0, [r7, #28]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	18c3      	adds	r3, r0, r3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	18c3      	adds	r3, r0, r3
 800307c:	404a      	eors	r2, r1
 800307e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < b; i ++)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	429a      	cmp	r2, r3
 800308c:	dbe2      	blt.n	8003054 <linear_layer+0x5c>
  
  // Feistel function (adding to x part)
  tmp = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e00a      	b.n	80030ae <linear_layer+0xb6>
    tmp ^= y[i];
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4053      	eors	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	dbf0      	blt.n	8003098 <linear_layer+0xa0>
  tmp = ELL(tmp);
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4053      	eors	r3, r2
 80030be:	2210      	movs	r2, #16
 80030c0:	41d3      	rors	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
  for(i = 0; i < b; i ++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e018      	b.n	80030fc <linear_layer+0x104>
    x[i+b] ^= (tmp ^ x[i]);
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	18d3      	adds	r3, r2, r3
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	405a      	eors	r2, r3
 80030e6:	69f8      	ldr	r0, [r7, #28]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	18c3      	adds	r3, r0, r3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	6938      	ldr	r0, [r7, #16]
 80030f0:	18c3      	adds	r3, r0, r3
 80030f2:	404a      	eors	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < b; i ++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbe2      	blt.n	80030ca <linear_layer+0xd2>
  // <------- left side --------> <------- right side ------->
  //    0    1    2 ...  B-2  B-1    B  B+1  B+2 ... 2B-2 2B-1
  //  B+1  B+2  B+3 ... 2B-1    B    0    1    2 ...  B-2  B-1
  
  // Branch swap of the x part
  tmp = x[0];
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < b-1; i ++) {
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e01d      	b.n	800314c <linear_layer+0x154>
    x[i] = x[i+b+1];
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	18d3      	adds	r3, r2, r3
 8003116:	3301      	adds	r3, #1
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	18d2      	adds	r2, r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	6939      	ldr	r1, [r7, #16]
 8003124:	18cb      	adds	r3, r1, r3
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	601a      	str	r2, [r3, #0]
    x[i+b+1] = x[i+1];
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3301      	adds	r3, #1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	18d2      	adds	r2, r2, r3
 8003134:	69f9      	ldr	r1, [r7, #28]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	18cb      	adds	r3, r1, r3
 800313a:	3301      	adds	r3, #1
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	6939      	ldr	r1, [r7, #16]
 8003140:	18cb      	adds	r3, r1, r3
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	601a      	str	r2, [r3, #0]
  for (i = 0; i < b-1; i ++) {
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3301      	adds	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3b01      	subs	r3, #1
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	429a      	cmp	r2, r3
 8003154:	dbdc      	blt.n	8003110 <linear_layer+0x118>
  }
  x[b-1] = x[b];
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	18d2      	adds	r2, r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4926      	ldr	r1, [pc, #152]	; (80031fc <linear_layer+0x204>)
 8003162:	468c      	mov	ip, r1
 8003164:	4463      	add	r3, ip
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	6939      	ldr	r1, [r7, #16]
 800316a:	18cb      	adds	r3, r1, r3
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	601a      	str	r2, [r3, #0]
  x[b] = tmp;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	18d3      	adds	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	601a      	str	r2, [r3, #0]
  
  // Branch swap of the y part
  tmp = y[0];
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < b-1; i ++) {
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e01d      	b.n	80031c4 <linear_layer+0x1cc>
    y[i] = y[i+b+1];
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	3301      	adds	r3, #1
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	18d2      	adds	r2, r2, r3
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	18cb      	adds	r3, r1, r3
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	601a      	str	r2, [r3, #0]
    y[i+b+1] = y[i+1];
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3301      	adds	r3, #1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	18d2      	adds	r2, r2, r3
 80031ac:	69f9      	ldr	r1, [r7, #28]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	18cb      	adds	r3, r1, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	18cb      	adds	r3, r1, r3
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < b-1; i ++) {
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3301      	adds	r3, #1
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	dbdc      	blt.n	8003188 <linear_layer+0x190>
  }
  y[b-1] = y[b];
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	18d2      	adds	r2, r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	4908      	ldr	r1, [pc, #32]	; (80031fc <linear_layer+0x204>)
 80031da:	468c      	mov	ip, r1
 80031dc:	4463      	add	r3, ip
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	68f9      	ldr	r1, [r7, #12]
 80031e2:	18cb      	adds	r3, r1, r3
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	601a      	str	r2, [r3, #0]
  y[b] = tmp;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b008      	add	sp, #32
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	3fffffff 	.word	0x3fffffff

08003200 <sparkle_ref>:


void sparkle_ref(state_t *state, int nb, int ns)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  int i, j;  // Step and branch counter
  
  // The number of branches (nb) must be even and not bigger than MAX_BRANCHES.
  assert(((nb & 1) == 0) && (nb >= 4) && (nb <= MAX_BRANCHES));
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d105      	bne.n	8003220 <sparkle_ref+0x20>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b03      	cmp	r3, #3
 8003218:	dd02      	ble.n	8003220 <sparkle_ref+0x20>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b08      	cmp	r3, #8
 800321e:	dd05      	ble.n	800322c <sparkle_ref+0x2c>
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <sparkle_ref+0x21c>)
 8003222:	4a7f      	ldr	r2, [pc, #508]	; (8003420 <sparkle_ref+0x220>)
 8003224:	487f      	ldr	r0, [pc, #508]	; (8003424 <sparkle_ref+0x224>)
 8003226:	216f      	movs	r1, #111	; 0x6f
 8003228:	f000 fb68 	bl	80038fc <__assert_func>
  
  for(i = 0; i < ns; i ++) {
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	e0e9      	b.n	8003406 <sparkle_ref+0x206>
    // Add step counter
    state->y[0] ^= RCON[i%MAX_BRANCHES];
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	497b      	ldr	r1, [pc, #492]	; (8003428 <sparkle_ref+0x228>)
 800323a:	400b      	ands	r3, r1
 800323c:	d504      	bpl.n	8003248 <sparkle_ref+0x48>
 800323e:	3b01      	subs	r3, #1
 8003240:	2108      	movs	r1, #8
 8003242:	4249      	negs	r1, r1
 8003244:	430b      	orrs	r3, r1
 8003246:	3301      	adds	r3, #1
 8003248:	0019      	movs	r1, r3
 800324a:	4b78      	ldr	r3, [pc, #480]	; (800342c <sparkle_ref+0x22c>)
 800324c:	0089      	lsls	r1, r1, #2
 800324e:	58cb      	ldr	r3, [r1, r3]
 8003250:	405a      	eors	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	621a      	str	r2, [r3, #32]
    state->y[1] ^= i;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	405a      	eors	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
    // ARXBox layer
    for(j = 0; j < nb; j ++)
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	e0c0      	b.n	80033ea <sparkle_ref+0x1ea>
      ARXBOX(state->x[j], state->y[j], RCON[j]);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	58d2      	ldr	r2, [r2, r3]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6939      	ldr	r1, [r7, #16]
 8003274:	3108      	adds	r1, #8
 8003276:	0089      	lsls	r1, r1, #2
 8003278:	58cb      	ldr	r3, [r1, r3]
 800327a:	211f      	movs	r1, #31
 800327c:	41cb      	rors	r3, r1
 800327e:	18d1      	adds	r1, r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	0092      	lsls	r2, r2, #2
 8003286:	50d1      	str	r1, [r2, r3]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	3208      	adds	r2, #8
 800328e:	0092      	lsls	r2, r2, #2
 8003290:	58d2      	ldr	r2, [r2, r3]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6939      	ldr	r1, [r7, #16]
 8003296:	0089      	lsls	r1, r1, #2
 8003298:	58cb      	ldr	r3, [r1, r3]
 800329a:	2118      	movs	r1, #24
 800329c:	41cb      	rors	r3, r1
 800329e:	405a      	eors	r2, r3
 80032a0:	0011      	movs	r1, r2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	3208      	adds	r2, #8
 80032a8:	0092      	lsls	r2, r2, #2
 80032aa:	50d1      	str	r1, [r2, r3]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	58d2      	ldr	r2, [r2, r3]
 80032b4:	4b5d      	ldr	r3, [pc, #372]	; (800342c <sparkle_ref+0x22c>)
 80032b6:	6939      	ldr	r1, [r7, #16]
 80032b8:	0089      	lsls	r1, r1, #2
 80032ba:	58cb      	ldr	r3, [r1, r3]
 80032bc:	405a      	eors	r2, r3
 80032be:	0011      	movs	r1, r2
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	50d1      	str	r1, [r2, r3]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	58d2      	ldr	r2, [r2, r3]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6939      	ldr	r1, [r7, #16]
 80032d4:	3108      	adds	r1, #8
 80032d6:	0089      	lsls	r1, r1, #2
 80032d8:	58cb      	ldr	r3, [r1, r3]
 80032da:	2111      	movs	r1, #17
 80032dc:	41cb      	rors	r3, r1
 80032de:	18d1      	adds	r1, r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	0092      	lsls	r2, r2, #2
 80032e6:	50d1      	str	r1, [r2, r3]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	3208      	adds	r2, #8
 80032ee:	0092      	lsls	r2, r2, #2
 80032f0:	58d2      	ldr	r2, [r2, r3]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6939      	ldr	r1, [r7, #16]
 80032f6:	0089      	lsls	r1, r1, #2
 80032f8:	58cb      	ldr	r3, [r1, r3]
 80032fa:	2111      	movs	r1, #17
 80032fc:	41cb      	rors	r3, r1
 80032fe:	405a      	eors	r2, r3
 8003300:	0011      	movs	r1, r2
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	3208      	adds	r2, #8
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	50d1      	str	r1, [r2, r3]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	0092      	lsls	r2, r2, #2
 8003312:	58d2      	ldr	r2, [r2, r3]
 8003314:	4b45      	ldr	r3, [pc, #276]	; (800342c <sparkle_ref+0x22c>)
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	0089      	lsls	r1, r1, #2
 800331a:	58cb      	ldr	r3, [r1, r3]
 800331c:	405a      	eors	r2, r3
 800331e:	0011      	movs	r1, r2
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	50d1      	str	r1, [r2, r3]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	0092      	lsls	r2, r2, #2
 800332e:	58d2      	ldr	r2, [r2, r3]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6939      	ldr	r1, [r7, #16]
 8003334:	3108      	adds	r1, #8
 8003336:	0089      	lsls	r1, r1, #2
 8003338:	58cb      	ldr	r3, [r1, r3]
 800333a:	18d1      	adds	r1, r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	50d1      	str	r1, [r2, r3]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	3208      	adds	r2, #8
 800334a:	0092      	lsls	r2, r2, #2
 800334c:	58d2      	ldr	r2, [r2, r3]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6939      	ldr	r1, [r7, #16]
 8003352:	0089      	lsls	r1, r1, #2
 8003354:	58cb      	ldr	r3, [r1, r3]
 8003356:	211f      	movs	r1, #31
 8003358:	41cb      	rors	r3, r1
 800335a:	405a      	eors	r2, r3
 800335c:	0011      	movs	r1, r2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	3208      	adds	r2, #8
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	50d1      	str	r1, [r2, r3]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	0092      	lsls	r2, r2, #2
 800336e:	58d2      	ldr	r2, [r2, r3]
 8003370:	4b2e      	ldr	r3, [pc, #184]	; (800342c <sparkle_ref+0x22c>)
 8003372:	6939      	ldr	r1, [r7, #16]
 8003374:	0089      	lsls	r1, r1, #2
 8003376:	58cb      	ldr	r3, [r1, r3]
 8003378:	405a      	eors	r2, r3
 800337a:	0011      	movs	r1, r2
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	50d1      	str	r1, [r2, r3]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	58d2      	ldr	r2, [r2, r3]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6939      	ldr	r1, [r7, #16]
 8003390:	3108      	adds	r1, #8
 8003392:	0089      	lsls	r1, r1, #2
 8003394:	58cb      	ldr	r3, [r1, r3]
 8003396:	2118      	movs	r1, #24
 8003398:	41cb      	rors	r3, r1
 800339a:	18d1      	adds	r1, r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	50d1      	str	r1, [r2, r3]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	3208      	adds	r2, #8
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	58d2      	ldr	r2, [r2, r3]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6939      	ldr	r1, [r7, #16]
 80033b2:	0089      	lsls	r1, r1, #2
 80033b4:	58cb      	ldr	r3, [r1, r3]
 80033b6:	2110      	movs	r1, #16
 80033b8:	41cb      	rors	r3, r1
 80033ba:	405a      	eors	r2, r3
 80033bc:	0011      	movs	r1, r2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	3208      	adds	r2, #8
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	50d1      	str	r1, [r2, r3]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	0092      	lsls	r2, r2, #2
 80033ce:	58d2      	ldr	r2, [r2, r3]
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <sparkle_ref+0x22c>)
 80033d2:	6939      	ldr	r1, [r7, #16]
 80033d4:	0089      	lsls	r1, r1, #2
 80033d6:	58cb      	ldr	r3, [r1, r3]
 80033d8:	405a      	eors	r2, r3
 80033da:	0011      	movs	r1, r2
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	0092      	lsls	r2, r2, #2
 80033e2:	50d1      	str	r1, [r2, r3]
    for(j = 0; j < nb; j ++)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	3301      	adds	r3, #1
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	da00      	bge.n	80033f4 <sparkle_ref+0x1f4>
 80033f2:	e739      	b.n	8003268 <sparkle_ref+0x68>
    // Linear layer
    linear_layer(state, nb);
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0011      	movs	r1, r2
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff fdfc 	bl	8002ff8 <linear_layer>
  for(i = 0; i < ns; i ++) {
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	da00      	bge.n	8003410 <sparkle_ref+0x210>
 800340e:	e710      	b.n	8003232 <sparkle_ref+0x32>
  }
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b006      	add	sp, #24
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	08004d18 	.word	0x08004d18
 8003420:	08005010 	.word	0x08005010
 8003424:	08004d50 	.word	0x08004d50
 8003428:	80000007 	.word	0x80000007
 800342c:	08004ff0 	.word	0x08004ff0

08003430 <genkat_benchmark_hash_aead>:
#else
static const char algo_en_dis_str[128] = "Test Disabled";
#endif


int genkat_benchmark_hash_aead(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0

	int ret = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]

	get_memory_usage();
 800343a:	f000 fa05 	bl	8003848 <get_memory_usage>

	/*clear timers ticks before testing*/
	tick_msr_start();
 800343e:	f000 f99f 	bl	8003780 <tick_msr_start>
	tick_msr_end();
 8003442:	f000 f9b9 	bl	80037b8 <tick_msr_end>

	lwc_printf("\n\n\n\nStarting...\n%s\n"__DATE__" "__TIME__"\nOptimization: "OPTIMIZATION_LEVEL"\nAlgorithm: %s\n",algo_en_dis_str, algo_name_str);
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <genkat_benchmark_hash_aead+0x88>)
 8003448:	491c      	ldr	r1, [pc, #112]	; (80034bc <genkat_benchmark_hash_aead+0x8c>)
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <genkat_benchmark_hash_aead+0x90>)
 800344c:	0018      	movs	r0, r3
 800344e:	f000 f9d7 	bl	8003800 <lwc_printf>
	lwc_printf("Memory usage: ");
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <genkat_benchmark_hash_aead+0x94>)
 8003454:	0018      	movs	r0, r3
 8003456:	f000 f9d3 	bl	8003800 <lwc_printf>
	lwc_printf("Total FLASH: %6luB Total RAM: %6luB \n", mem_stat.tot_flash_usg, mem_stat.tot_ram_usg);
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <genkat_benchmark_hash_aead+0x98>)
 800345c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <genkat_benchmark_hash_aead+0x98>)
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <genkat_benchmark_hash_aead+0x9c>)
 8003464:	0018      	movs	r0, r3
 8003466:	f000 f9cb 	bl	8003800 <lwc_printf>
	lwc_printf("Sections: text %6luB data %6luB bss %6luB\n", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <genkat_benchmark_hash_aead+0x98>)
 800346c:	6a19      	ldr	r1, [r3, #32]
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <genkat_benchmark_hash_aead+0x98>)
 8003470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <genkat_benchmark_hash_aead+0x98>)
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	4816      	ldr	r0, [pc, #88]	; (80034d0 <genkat_benchmark_hash_aead+0xa0>)
 8003478:	f000 f9c2 	bl	8003800 <lwc_printf>

	memset(aead_enc_ticks_res, 0, sizeof(aead_enc_ticks_res));
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	005a      	lsls	r2, r3, #1
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <genkat_benchmark_hash_aead+0xa4>)
 8003482:	2100      	movs	r1, #0
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fa9a 	bl	80039be <memset>
	memset(aead_dec_ticks_res, 0, sizeof(aead_dec_ticks_res));
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	005a      	lsls	r2, r3, #1
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <genkat_benchmark_hash_aead+0xa8>)
 8003490:	2100      	movs	r1, #0
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fa93 	bl	80039be <memset>
	memset(hash_ticks_res,     0, sizeof(hash_ticks_res));
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	005a      	lsls	r2, r3, #1
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <genkat_benchmark_hash_aead+0xac>)
 800349e:	2100      	movs	r1, #0
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fa8c 	bl	80039be <memset>
		lwc_printf("TotRes: Error %d", ret);
	}
#endif

#ifdef LWC_ALGO_HASH
	ret = hash_generate_test_vectors();
 80034a6:	f000 f81b 	bl	80034e0 <hash_generate_test_vectors>
 80034aa:	0003      	movs	r3, r0
 80034ac:	607b      	str	r3, [r7, #4]
#endif

	return ret;
 80034ae:	687b      	ldr	r3, [r7, #4]
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	0800501c 	.word	0x0800501c
 80034bc:	0800509c 	.word	0x0800509c
 80034c0:	08004e24 	.word	0x08004e24
 80034c4:	08004e6c 	.word	0x08004e6c
 80034c8:	20000670 	.word	0x20000670
 80034cc:	08004e7c 	.word	0x08004e7c
 80034d0:	08004ea4 	.word	0x08004ea4
 80034d4:	20000098 	.word	0x20000098
 80034d8:	20000198 	.word	0x20000198
 80034dc:	20000298 	.word	0x20000298

080034e0 <hash_generate_test_vectors>:

#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024

int hash_generate_test_vectors(){
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	4c69      	ldr	r4, [pc, #420]	; (8003688 <hash_generate_test_vectors+0x1a8>)
 80034e4:	44a5      	add	sp, r4
 80034e6:	af00      	add	r7, sp, #0

	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 80034e8:	2300      	movs	r3, #0
 80034ea:	4a68      	ldr	r2, [pc, #416]	; (800368c <hash_generate_test_vectors+0x1ac>)
 80034ec:	18ba      	adds	r2, r7, r2
 80034ee:	6013      	str	r3, [r2, #0]

	init_buffer(msg, sizeof(msg));
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	00d2      	lsls	r2, r2, #3
 80034f4:	2300      	movs	r3, #0
 80034f6:	2130      	movs	r1, #48	; 0x30
 80034f8:	1879      	adds	r1, r7, r1
 80034fa:	0008      	movs	r0, r1
 80034fc:	f000 f902 	bl	8003704 <init_buffer>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003500:	2200      	movs	r2, #0
 8003502:	2300      	movs	r3, #0
 8003504:	2187      	movs	r1, #135	; 0x87
 8003506:	00c9      	lsls	r1, r1, #3
 8003508:	1879      	adds	r1, r7, r1
 800350a:	600a      	str	r2, [r1, #0]
 800350c:	604b      	str	r3, [r1, #4]
 800350e:	e056      	b.n	80035be <hash_generate_test_vectors+0xde>

		lwc_printf("msg_len:%6d ", (int)mlen);
 8003510:	2487      	movs	r4, #135	; 0x87
 8003512:	00e4      	lsls	r4, r4, #3
 8003514:	193b      	adds	r3, r7, r4
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <hash_generate_test_vectors+0x1b0>)
 800351a:	0011      	movs	r1, r2
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f96f 	bl	8003800 <lwc_printf>

		tick_msr_start();
 8003522:	f000 f92d 	bl	8003780 <tick_msr_start>
#ifdef ENABLE_ALGO_TEST
		ret_val = crypto_hash(digest, msg, mlen);
 8003526:	193b      	adds	r3, r7, r4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2130      	movs	r1, #48	; 0x30
 800352e:	1879      	adds	r1, r7, r1
 8003530:	0038      	movs	r0, r7
 8003532:	f7ff fcce 	bl	8002ed2 <crypto_hash>
 8003536:	0003      	movs	r3, r0
 8003538:	4c54      	ldr	r4, [pc, #336]	; (800368c <hash_generate_test_vectors+0x1ac>)
 800353a:	193a      	adds	r2, r7, r4
 800353c:	6013      	str	r3, [r2, #0]
#else
		ret_val = 0;
#endif
		tick_msr_end();
 800353e:	f000 f93b 	bl	80037b8 <tick_msr_end>

		hash_ticks_res[ticks_res_pos++] = gb_tick_cnt;
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <hash_generate_test_vectors+0x1b4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <hash_generate_test_vectors+0x1b4>)
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	4a52      	ldr	r2, [pc, #328]	; (8003698 <hash_generate_test_vectors+0x1b8>)
 800354e:	6811      	ldr	r1, [r2, #0]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <hash_generate_test_vectors+0x1bc>)
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	5099      	str	r1, [r3, r2]

		if(ret_val == 0) {
 8003556:	193b      	adds	r3, r7, r4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <hash_generate_test_vectors+0xb0>
			lwc_printf( "hash:%10d us:%9d ms:%7d \n", (int)gb_tick_cnt, (int)gb_tick_cnt/16, (int)gb_ms_ticks);
 800355e:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <hash_generate_test_vectors+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0019      	movs	r1, r3
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <hash_generate_test_vectors+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da00      	bge.n	800356e <hash_generate_test_vectors+0x8e>
 800356c:	330f      	adds	r3, #15
 800356e:	111b      	asrs	r3, r3, #4
 8003570:	001a      	movs	r2, r3
 8003572:	4b4b      	ldr	r3, [pc, #300]	; (80036a0 <hash_generate_test_vectors+0x1c0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	484b      	ldr	r0, [pc, #300]	; (80036a4 <hash_generate_test_vectors+0x1c4>)
 8003578:	f000 f942 	bl	8003800 <lwc_printf>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
			break;
		}

		if(mlen==0){
 800357c:	2387      	movs	r3, #135	; 0x87
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a48      	ldr	r2, [pc, #288]	; (80036a8 <hash_generate_test_vectors+0x1c8>)
 8003586:	18ba      	adds	r2, r7, r2
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	d10d      	bne.n	80035aa <hash_generate_test_vectors+0xca>
 800358e:	e005      	b.n	800359c <hash_generate_test_vectors+0xbc>
			ret_val = KAT_CRYPTO_FAILURE;
 8003590:	2304      	movs	r3, #4
 8003592:	425b      	negs	r3, r3
 8003594:	4a3d      	ldr	r2, [pc, #244]	; (800368c <hash_generate_test_vectors+0x1ac>)
 8003596:	18ba      	adds	r2, r7, r2
 8003598:	6013      	str	r3, [r2, #0]
			break;
 800359a:	e021      	b.n	80035e0 <hash_generate_test_vectors+0x100>
			mlen = 4;
 800359c:	2204      	movs	r2, #4
 800359e:	2300      	movs	r3, #0
 80035a0:	2187      	movs	r1, #135	; 0x87
 80035a2:	00c9      	lsls	r1, r1, #3
 80035a4:	1879      	adds	r1, r7, r1
 80035a6:	600a      	str	r2, [r1, #0]
 80035a8:	604b      	str	r3, [r1, #4]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80035aa:	2187      	movs	r1, #135	; 0x87
 80035ac:	00c9      	lsls	r1, r1, #3
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	1892      	adds	r2, r2, r2
 80035b6:	415b      	adcs	r3, r3
 80035b8:	1879      	adds	r1, r7, r1
 80035ba:	600a      	str	r2, [r1, #0]
 80035bc:	604b      	str	r3, [r1, #4]
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <hash_generate_test_vectors+0x1c8>)
 80035c0:	18bb      	adds	r3, r7, r2
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <hash_generate_test_vectors+0x100>
 80035c8:	18bb      	adds	r3, r7, r2
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d19f      	bne.n	8003510 <hash_generate_test_vectors+0x30>
 80035d0:	2387      	movs	r3, #135	; 0x87
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	429a      	cmp	r2, r3
 80035de:	d997      	bls.n	8003510 <hash_generate_test_vectors+0x30>
		}
	}//end of for loop


	ticks_res_pos = 0;
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <hash_generate_test_vectors+0x1b4>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
	aead_hash_print_res("HASH");
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <hash_generate_test_vectors+0x1cc>)
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 f869 	bl	80036c0 <aead_hash_print_res>
	lwc_printf("HASHTotRes: ");
 80035ee:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <hash_generate_test_vectors+0x1d0>)
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f905 	bl	8003800 <lwc_printf>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 80035f6:	2200      	movs	r2, #0
 80035f8:	2300      	movs	r3, #0
 80035fa:	2186      	movs	r1, #134	; 0x86
 80035fc:	00c9      	lsls	r1, r1, #3
 80035fe:	1879      	adds	r1, r7, r1
 8003600:	600a      	str	r2, [r1, #0]
 8003602:	604b      	str	r3, [r1, #4]
 8003604:	e027      	b.n	8003656 <hash_generate_test_vectors+0x176>

		lwc_printf("h(%d) = %d ", (int)mlen, (int)hash_ticks_res[ticks_res_pos++]);
 8003606:	2486      	movs	r4, #134	; 0x86
 8003608:	00e4      	lsls	r4, r4, #3
 800360a:	193b      	adds	r3, r7, r4
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <hash_generate_test_vectors+0x1b4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <hash_generate_test_vectors+0x1b4>)
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <hash_generate_test_vectors+0x1bc>)
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	589b      	ldr	r3, [r3, r2]
 800361e:	001a      	movs	r2, r3
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <hash_generate_test_vectors+0x1d4>)
 8003622:	0001      	movs	r1, r0
 8003624:	0018      	movs	r0, r3
 8003626:	f000 f8eb 	bl	8003800 <lwc_printf>

		if(mlen==0){
 800362a:	193b      	adds	r3, r7, r4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <hash_generate_test_vectors+0x1d8>)
 8003630:	18ba      	adds	r2, r7, r2
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	d104      	bne.n	8003642 <hash_generate_test_vectors+0x162>
			mlen = 4;
 8003638:	2204      	movs	r2, #4
 800363a:	2300      	movs	r3, #0
 800363c:	1939      	adds	r1, r7, r4
 800363e:	600a      	str	r2, [r1, #0]
 8003640:	604b      	str	r3, [r1, #4]
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen *= 2) {
 8003642:	2186      	movs	r1, #134	; 0x86
 8003644:	00c9      	lsls	r1, r1, #3
 8003646:	187b      	adds	r3, r7, r1
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	1892      	adds	r2, r2, r2
 800364e:	415b      	adcs	r3, r3
 8003650:	1879      	adds	r1, r7, r1
 8003652:	600a      	str	r2, [r1, #0]
 8003654:	604b      	str	r3, [r1, #4]
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <hash_generate_test_vectors+0x1d8>)
 8003658:	18bb      	adds	r3, r7, r2
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <hash_generate_test_vectors+0x198>
 8003660:	18bb      	adds	r3, r7, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ce      	bne.n	8003606 <hash_generate_test_vectors+0x126>
 8003668:	2386      	movs	r3, #134	; 0x86
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	429a      	cmp	r2, r3
 8003676:	d9c6      	bls.n	8003606 <hash_generate_test_vectors+0x126>
		}
	}

	return ret_val;
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <hash_generate_test_vectors+0x1ac>)
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	681b      	ldr	r3, [r3, #0]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <hash_generate_test_vectors+0x1dc>)
 8003684:	449d      	add	sp, r3
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	fffffbb4 	.word	0xfffffbb4
 800368c:	00000444 	.word	0x00000444
 8003690:	08004ed0 	.word	0x08004ed0
 8003694:	20000398 	.word	0x20000398
 8003698:	20000090 	.word	0x20000090
 800369c:	20000298 	.word	0x20000298
 80036a0:	20000094 	.word	0x20000094
 80036a4:	08004ee0 	.word	0x08004ee0
 80036a8:	0000043c 	.word	0x0000043c
 80036ac:	08004efc 	.word	0x08004efc
 80036b0:	08004f04 	.word	0x08004f04
 80036b4:	08004f14 	.word	0x08004f14
 80036b8:	00000434 	.word	0x00000434
 80036bc:	0000044c 	.word	0x0000044c

080036c0 <aead_hash_print_res>:

#endif

void aead_hash_print_res(char *algo_type){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	lwc_printf("%s %s "__DATE__" "__TIME__" Optimization: "OPTIMIZATION_LEVEL" Algorithm: %s ", algo_type, algo_en_dis_str, algo_name_str);
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <aead_hash_print_res+0x30>)
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <aead_hash_print_res+0x34>)
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	480a      	ldr	r0, [pc, #40]	; (80036f8 <aead_hash_print_res+0x38>)
 80036d0:	f000 f896 	bl	8003800 <lwc_printf>
	lwc_printf("Sections: text %6lu data %6lu bss %6lu ", mem_stat.text_size, mem_stat.data_size, mem_stat.bss_size);
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <aead_hash_print_res+0x3c>)
 80036d6:	6a19      	ldr	r1, [r3, #32]
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <aead_hash_print_res+0x3c>)
 80036da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <aead_hash_print_res+0x3c>)
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	4807      	ldr	r0, [pc, #28]	; (8003700 <aead_hash_print_res+0x40>)
 80036e2:	f000 f88d 	bl	8003800 <lwc_printf>
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b002      	add	sp, #8
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	0800501c 	.word	0x0800501c
 80036f4:	0800509c 	.word	0x0800509c
 80036f8:	08004f20 	.word	0x08004f20
 80036fc:	20000670 	.word	0x20000670
 8003700:	08004f5c 	.word	0x08004f5c

08003704 <init_buffer>:

void init_buffer(unsigned char *buffer, unsigned long long numbytes) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	603a      	str	r2, [r7, #0]
 800370e:	607b      	str	r3, [r7, #4]
	for (unsigned long long i = 0; i < numbytes; i++) {
 8003710:	2200      	movs	r2, #0
 8003712:	2300      	movs	r3, #0
 8003714:	613a      	str	r2, [r7, #16]
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e011      	b.n	800373e <init_buffer+0x3a>
		buffer[i] = (unsigned char) i + '0';
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1c13      	adds	r3, r2, #0
 8003720:	b2da      	uxtb	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	18cb      	adds	r3, r1, r3
 8003728:	3230      	adds	r2, #48	; 0x30
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++) {
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2001      	movs	r0, #1
 8003734:	2100      	movs	r1, #0
 8003736:	1812      	adds	r2, r2, r0
 8003738:	414b      	adcs	r3, r1
 800373a:	613a      	str	r2, [r7, #16]
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	429a      	cmp	r2, r3
 8003744:	d8e9      	bhi.n	800371a <init_buffer+0x16>
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	429a      	cmp	r2, r3
 800374c:	d103      	bne.n	8003756 <init_buffer+0x52>
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d8e1      	bhi.n	800371a <init_buffer+0x16>
	}
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b006      	add	sp, #24
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tim_per_elp_cnt = 0;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	tim_per_elp_cnt++;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003770:	601a      	str	r2, [r3, #0]
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	2000039c 	.word	0x2000039c

08003780 <tick_msr_start>:

void tick_msr_start(void) {
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0

	tim_per_elp_cnt = 0;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <tick_msr_start+0x2c>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT = 0;
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <tick_msr_start+0x30>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
	gb_ms_ticks = HAL_GetTick();
 8003792:	f7fd f993 	bl	8000abc <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <tick_msr_start+0x34>)
 800379a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <tick_msr_start+0x30>)
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fe fb9a 	bl	8001ed8 <HAL_TIM_Base_Start_IT>
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	2000039c 	.word	0x2000039c
 80037b0:	2000062c 	.word	0x2000062c
 80037b4:	20000094 	.word	0x20000094

080037b8 <tick_msr_end>:

uint32_t tick_msr_end(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim6);
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <tick_msr_end+0x38>)
 80037be:	0018      	movs	r0, r3
 80037c0:	f7fe fbd6 	bl	8001f70 <HAL_TIM_Base_Stop_IT>
	gb_tick_cnt = tim_per_elp_cnt << 16 | htim6.Instance->CNT;
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <tick_msr_end+0x3c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	041a      	lsls	r2, r3, #16
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <tick_msr_end+0x38>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	431a      	orrs	r2, r3
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <tick_msr_end+0x40>)
 80037d4:	601a      	str	r2, [r3, #0]
	gb_ms_ticks = HAL_GetTick() - gb_ms_ticks; //get elapsed ticks in ms
 80037d6:	f7fd f971 	bl	8000abc <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <tick_msr_end+0x44>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	1ad2      	subs	r2, r2, r3
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <tick_msr_end+0x44>)
 80037e4:	601a      	str	r2, [r3, #0]
	return gb_tick_cnt;
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <tick_msr_end+0x40>)
 80037e8:	681b      	ldr	r3, [r3, #0]
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000062c 	.word	0x2000062c
 80037f4:	2000039c 	.word	0x2000039c
 80037f8:	20000090 	.word	0x20000090
 80037fc:	20000094 	.word	0x20000094

08003800 <lwc_printf>:

void lwc_printf(const char *format, ...) {
 8003800:	b40f      	push	{r0, r1, r2, r3}
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args, format);
 8003808:	2314      	movs	r3, #20
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	607b      	str	r3, [r7, #4]
	vsprintf(dbg_out_buf, format, args);
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6939      	ldr	r1, [r7, #16]
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <lwc_printf+0x40>)
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fbd3 	bl	8003fc0 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t*) dbg_out_buf, strlen(dbg_out_buf), 100);
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <lwc_printf+0x40>)
 800381c:	0018      	movs	r0, r3
 800381e:	f7fc fc73 	bl	8000108 <strlen>
 8003822:	0003      	movs	r3, r0
 8003824:	b29a      	uxth	r2, r3
 8003826:	4906      	ldr	r1, [pc, #24]	; (8003840 <lwc_printf+0x40>)
 8003828:	4806      	ldr	r0, [pc, #24]	; (8003844 <lwc_printf+0x44>)
 800382a:	2364      	movs	r3, #100	; 0x64
 800382c:	f7fe fdce 	bl	80023cc <HAL_UART_Transmit>
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bc80      	pop	{r7}
 8003838:	bc08      	pop	{r3}
 800383a:	b004      	add	sp, #16
 800383c:	4718      	bx	r3
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	200003a0 	.word	0x200003a0
 8003844:	200005a8 	.word	0x200005a8

08003848 <get_memory_usage>:


extern unsigned int _etext, _sidata, _sbss, _ebss, _sdata, _edata;


void get_memory_usage(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0

		To calculate the RAM usage of your program, add the data and bss columns together.

		To calculate the FLASH usage of your program, add text and data.
	 * */
	memset(&mem_stat, 0, sizeof(mem_stat));
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <get_memory_usage+0x98>)
 800384e:	2234      	movs	r2, #52	; 0x34
 8003850:	2100      	movs	r1, #0
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f8b3 	bl	80039be <memset>

	mem_stat.flash_start_adr = 0x8000000;
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <get_memory_usage+0x98>)
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	0512      	lsls	r2, r2, #20
 800385e:	601a      	str	r2, [r3, #0]

	mem_stat.stext = mem_stat.flash_start_adr; //actually text section starts after ISR section but for this example we set just start of flash memory
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <get_memory_usage+0x98>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <get_memory_usage+0x98>)
 8003866:	605a      	str	r2, [r3, #4]
	mem_stat.etext = (uint32_t) &_etext; //end of text section
 8003868:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <get_memory_usage+0x9c>)
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <get_memory_usage+0x98>)
 800386c:	609a      	str	r2, [r3, #8]

	mem_stat.sbss = (uint32_t) &_sbss;
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <get_memory_usage+0xa0>)
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <get_memory_usage+0x98>)
 8003872:	619a      	str	r2, [r3, #24]
	mem_stat.ebss = (uint32_t) &_ebss;
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <get_memory_usage+0xa4>)
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <get_memory_usage+0x98>)
 8003878:	61da      	str	r2, [r3, #28]

	mem_stat.sdata_ram = (uint32_t) &_sdata;
 800387a:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <get_memory_usage+0xa8>)
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <get_memory_usage+0x98>)
 800387e:	60da      	str	r2, [r3, #12]
	mem_stat.edata_ram = (uint32_t) &_edata;
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <get_memory_usage+0xac>)
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <get_memory_usage+0x98>)
 8003884:	615a      	str	r2, [r3, #20]

	mem_stat.sdata_flash = (uint32_t) &_sidata;
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <get_memory_usage+0xb0>)
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <get_memory_usage+0x98>)
 800388a:	611a      	str	r2, [r3, #16]

	mem_stat.text_size = mem_stat.etext - mem_stat.stext;
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <get_memory_usage+0x98>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <get_memory_usage+0x98>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <get_memory_usage+0x98>)
 8003898:	621a      	str	r2, [r3, #32]
	mem_stat.data_size = mem_stat.edata_ram - mem_stat.sdata_ram;
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <get_memory_usage+0x98>)
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <get_memory_usage+0x98>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <get_memory_usage+0x98>)
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
	mem_stat.bss_size = mem_stat.ebss - mem_stat.sbss;
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <get_memory_usage+0x98>)
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <get_memory_usage+0x98>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	1ad2      	subs	r2, r2, r3
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <get_memory_usage+0x98>)
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28

	mem_stat.tot_ram_usg = mem_stat.data_size + mem_stat.bss_size;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <get_memory_usage+0x98>)
 80038b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <get_memory_usage+0x98>)
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	18d2      	adds	r2, r2, r3
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <get_memory_usage+0x98>)
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_stat.tot_flash_usg = mem_stat.sdata_flash + mem_stat.data_size - mem_stat.flash_start_adr;
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <get_memory_usage+0x98>)
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <get_memory_usage+0x98>)
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	18d2      	adds	r2, r2, r3
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <get_memory_usage+0x98>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1ad2      	subs	r2, r2, r3
 80038d4:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <get_memory_usage+0x98>)
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	20000670 	.word	0x20000670
 80038e4:	08004d18 	.word	0x08004d18
 80038e8:	20000070 	.word	0x20000070
 80038ec:	200006b4 	.word	0x200006b4
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000070 	.word	0x20000070
 80038f8:	08005200 	.word	0x08005200

080038fc <__assert_func>:
 80038fc:	b530      	push	{r4, r5, lr}
 80038fe:	0014      	movs	r4, r2
 8003900:	001a      	movs	r2, r3
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <__assert_func+0x2c>)
 8003904:	0005      	movs	r5, r0
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b085      	sub	sp, #20
 800390a:	68d8      	ldr	r0, [r3, #12]
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <__assert_func+0x30>)
 800390e:	2c00      	cmp	r4, #0
 8003910:	d101      	bne.n	8003916 <__assert_func+0x1a>
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <__assert_func+0x34>)
 8003914:	001c      	movs	r4, r3
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	9100      	str	r1, [sp, #0]
 800391a:	002b      	movs	r3, r5
 800391c:	4905      	ldr	r1, [pc, #20]	; (8003934 <__assert_func+0x38>)
 800391e:	9402      	str	r4, [sp, #8]
 8003920:	f000 f810 	bl	8003944 <fiprintf>
 8003924:	f000 fc26 	bl	8004174 <abort>
 8003928:	2000000c 	.word	0x2000000c
 800392c:	0800511c 	.word	0x0800511c
 8003930:	08005157 	.word	0x08005157
 8003934:	08005129 	.word	0x08005129

08003938 <__errno>:
 8003938:	4b01      	ldr	r3, [pc, #4]	; (8003940 <__errno+0x8>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	4770      	bx	lr
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000000c 	.word	0x2000000c

08003944 <fiprintf>:
 8003944:	b40e      	push	{r1, r2, r3}
 8003946:	b503      	push	{r0, r1, lr}
 8003948:	0001      	movs	r1, r0
 800394a:	ab03      	add	r3, sp, #12
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <fiprintf+0x1c>)
 800394e:	cb04      	ldmia	r3!, {r2}
 8003950:	6800      	ldr	r0, [r0, #0]
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	f000 f862 	bl	8003a1c <_vfiprintf_r>
 8003958:	b002      	add	sp, #8
 800395a:	bc08      	pop	{r3}
 800395c:	b003      	add	sp, #12
 800395e:	4718      	bx	r3
 8003960:	2000000c 	.word	0x2000000c

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	2600      	movs	r6, #0
 8003968:	4d0c      	ldr	r5, [pc, #48]	; (800399c <__libc_init_array+0x38>)
 800396a:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396c:	1b64      	subs	r4, r4, r5
 800396e:	10a4      	asrs	r4, r4, #2
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	2600      	movs	r6, #0
 8003976:	f001 f9c3 	bl	8004d00 <_init>
 800397a:	4d0a      	ldr	r5, [pc, #40]	; (80039a4 <__libc_init_array+0x40>)
 800397c:	4c0a      	ldr	r4, [pc, #40]	; (80039a8 <__libc_init_array+0x44>)
 800397e:	1b64      	subs	r4, r4, r5
 8003980:	10a4      	asrs	r4, r4, #2
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	00b3      	lsls	r3, r6, #2
 800398a:	58eb      	ldr	r3, [r5, r3]
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	00b3      	lsls	r3, r6, #2
 8003994:	58eb      	ldr	r3, [r5, r3]
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	080051f8 	.word	0x080051f8
 80039a0:	080051f8 	.word	0x080051f8
 80039a4:	080051f8 	.word	0x080051f8
 80039a8:	080051fc 	.word	0x080051fc

080039ac <memcpy>:
 80039ac:	2300      	movs	r3, #0
 80039ae:	b510      	push	{r4, lr}
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d100      	bne.n	80039b6 <memcpy+0xa>
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	5ccc      	ldrb	r4, [r1, r3]
 80039b8:	54c4      	strb	r4, [r0, r3]
 80039ba:	3301      	adds	r3, #1
 80039bc:	e7f8      	b.n	80039b0 <memcpy+0x4>

080039be <memset>:
 80039be:	0003      	movs	r3, r0
 80039c0:	1882      	adds	r2, r0, r2
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d100      	bne.n	80039c8 <memset+0xa>
 80039c6:	4770      	bx	lr
 80039c8:	7019      	strb	r1, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	e7f9      	b.n	80039c2 <memset+0x4>

080039ce <__sfputc_r>:
 80039ce:	6893      	ldr	r3, [r2, #8]
 80039d0:	b510      	push	{r4, lr}
 80039d2:	3b01      	subs	r3, #1
 80039d4:	6093      	str	r3, [r2, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da04      	bge.n	80039e4 <__sfputc_r+0x16>
 80039da:	6994      	ldr	r4, [r2, #24]
 80039dc:	42a3      	cmp	r3, r4
 80039de:	db07      	blt.n	80039f0 <__sfputc_r+0x22>
 80039e0:	290a      	cmp	r1, #10
 80039e2:	d005      	beq.n	80039f0 <__sfputc_r+0x22>
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	1c58      	adds	r0, r3, #1
 80039e8:	6010      	str	r0, [r2, #0]
 80039ea:	7019      	strb	r1, [r3, #0]
 80039ec:	0008      	movs	r0, r1
 80039ee:	bd10      	pop	{r4, pc}
 80039f0:	f000 faf2 	bl	8003fd8 <__swbuf_r>
 80039f4:	0001      	movs	r1, r0
 80039f6:	e7f9      	b.n	80039ec <__sfputc_r+0x1e>

080039f8 <__sfputs_r>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	0006      	movs	r6, r0
 80039fc:	000f      	movs	r7, r1
 80039fe:	0014      	movs	r4, r2
 8003a00:	18d5      	adds	r5, r2, r3
 8003a02:	42ac      	cmp	r4, r5
 8003a04:	d101      	bne.n	8003a0a <__sfputs_r+0x12>
 8003a06:	2000      	movs	r0, #0
 8003a08:	e007      	b.n	8003a1a <__sfputs_r+0x22>
 8003a0a:	7821      	ldrb	r1, [r4, #0]
 8003a0c:	003a      	movs	r2, r7
 8003a0e:	0030      	movs	r0, r6
 8003a10:	f7ff ffdd 	bl	80039ce <__sfputc_r>
 8003a14:	3401      	adds	r4, #1
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d1f3      	bne.n	8003a02 <__sfputs_r+0xa>
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a1c <_vfiprintf_r>:
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	b0a1      	sub	sp, #132	; 0x84
 8003a20:	0006      	movs	r6, r0
 8003a22:	000c      	movs	r4, r1
 8003a24:	001f      	movs	r7, r3
 8003a26:	9203      	str	r2, [sp, #12]
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d004      	beq.n	8003a36 <_vfiprintf_r+0x1a>
 8003a2c:	6983      	ldr	r3, [r0, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <_vfiprintf_r+0x1a>
 8003a32:	f000 fcd5 	bl	80043e0 <__sinit>
 8003a36:	4b8e      	ldr	r3, [pc, #568]	; (8003c70 <_vfiprintf_r+0x254>)
 8003a38:	429c      	cmp	r4, r3
 8003a3a:	d11c      	bne.n	8003a76 <_vfiprintf_r+0x5a>
 8003a3c:	6874      	ldr	r4, [r6, #4]
 8003a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a40:	07db      	lsls	r3, r3, #31
 8003a42:	d405      	bmi.n	8003a50 <_vfiprintf_r+0x34>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	059b      	lsls	r3, r3, #22
 8003a48:	d402      	bmi.n	8003a50 <_vfiprintf_r+0x34>
 8003a4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a4c:	f000 fd69 	bl	8004522 <__retarget_lock_acquire_recursive>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	071b      	lsls	r3, r3, #28
 8003a54:	d502      	bpl.n	8003a5c <_vfiprintf_r+0x40>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11d      	bne.n	8003a98 <_vfiprintf_r+0x7c>
 8003a5c:	0021      	movs	r1, r4
 8003a5e:	0030      	movs	r0, r6
 8003a60:	f000 fb10 	bl	8004084 <__swsetup_r>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d017      	beq.n	8003a98 <_vfiprintf_r+0x7c>
 8003a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a6a:	07db      	lsls	r3, r3, #31
 8003a6c:	d50d      	bpl.n	8003a8a <_vfiprintf_r+0x6e>
 8003a6e:	2001      	movs	r0, #1
 8003a70:	4240      	negs	r0, r0
 8003a72:	b021      	add	sp, #132	; 0x84
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <_vfiprintf_r+0x258>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d101      	bne.n	8003a80 <_vfiprintf_r+0x64>
 8003a7c:	68b4      	ldr	r4, [r6, #8]
 8003a7e:	e7de      	b.n	8003a3e <_vfiprintf_r+0x22>
 8003a80:	4b7d      	ldr	r3, [pc, #500]	; (8003c78 <_vfiprintf_r+0x25c>)
 8003a82:	429c      	cmp	r4, r3
 8003a84:	d1db      	bne.n	8003a3e <_vfiprintf_r+0x22>
 8003a86:	68f4      	ldr	r4, [r6, #12]
 8003a88:	e7d9      	b.n	8003a3e <_vfiprintf_r+0x22>
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	059b      	lsls	r3, r3, #22
 8003a8e:	d4ee      	bmi.n	8003a6e <_vfiprintf_r+0x52>
 8003a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a92:	f000 fd47 	bl	8004524 <__retarget_lock_release_recursive>
 8003a96:	e7ea      	b.n	8003a6e <_vfiprintf_r+0x52>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	ad08      	add	r5, sp, #32
 8003a9c:	616b      	str	r3, [r5, #20]
 8003a9e:	3320      	adds	r3, #32
 8003aa0:	766b      	strb	r3, [r5, #25]
 8003aa2:	3310      	adds	r3, #16
 8003aa4:	76ab      	strb	r3, [r5, #26]
 8003aa6:	9707      	str	r7, [sp, #28]
 8003aa8:	9f03      	ldr	r7, [sp, #12]
 8003aaa:	783b      	ldrb	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <_vfiprintf_r+0x98>
 8003ab0:	2b25      	cmp	r3, #37	; 0x25
 8003ab2:	d14e      	bne.n	8003b52 <_vfiprintf_r+0x136>
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	1afb      	subs	r3, r7, r3
 8003ab8:	9305      	str	r3, [sp, #20]
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	429f      	cmp	r7, r3
 8003abe:	d00d      	beq.n	8003adc <_vfiprintf_r+0xc0>
 8003ac0:	9b05      	ldr	r3, [sp, #20]
 8003ac2:	0021      	movs	r1, r4
 8003ac4:	0030      	movs	r0, r6
 8003ac6:	9a03      	ldr	r2, [sp, #12]
 8003ac8:	f7ff ff96 	bl	80039f8 <__sfputs_r>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d100      	bne.n	8003ad2 <_vfiprintf_r+0xb6>
 8003ad0:	e0b5      	b.n	8003c3e <_vfiprintf_r+0x222>
 8003ad2:	696a      	ldr	r2, [r5, #20]
 8003ad4:	9b05      	ldr	r3, [sp, #20]
 8003ad6:	4694      	mov	ip, r2
 8003ad8:	4463      	add	r3, ip
 8003ada:	616b      	str	r3, [r5, #20]
 8003adc:	783b      	ldrb	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d100      	bne.n	8003ae4 <_vfiprintf_r+0xc8>
 8003ae2:	e0ac      	b.n	8003c3e <_vfiprintf_r+0x222>
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	1c7b      	adds	r3, r7, #1
 8003ae8:	9303      	str	r3, [sp, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	4252      	negs	r2, r2
 8003aee:	606a      	str	r2, [r5, #4]
 8003af0:	a904      	add	r1, sp, #16
 8003af2:	3254      	adds	r2, #84	; 0x54
 8003af4:	1852      	adds	r2, r2, r1
 8003af6:	602b      	str	r3, [r5, #0]
 8003af8:	60eb      	str	r3, [r5, #12]
 8003afa:	60ab      	str	r3, [r5, #8]
 8003afc:	7013      	strb	r3, [r2, #0]
 8003afe:	65ab      	str	r3, [r5, #88]	; 0x58
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	2205      	movs	r2, #5
 8003b04:	7819      	ldrb	r1, [r3, #0]
 8003b06:	485d      	ldr	r0, [pc, #372]	; (8003c7c <_vfiprintf_r+0x260>)
 8003b08:	f000 fd7a 	bl	8004600 <memchr>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	1c5f      	adds	r7, r3, #1
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d120      	bne.n	8003b56 <_vfiprintf_r+0x13a>
 8003b14:	682a      	ldr	r2, [r5, #0]
 8003b16:	06d3      	lsls	r3, r2, #27
 8003b18:	d504      	bpl.n	8003b24 <_vfiprintf_r+0x108>
 8003b1a:	2353      	movs	r3, #83	; 0x53
 8003b1c:	a904      	add	r1, sp, #16
 8003b1e:	185b      	adds	r3, r3, r1
 8003b20:	2120      	movs	r1, #32
 8003b22:	7019      	strb	r1, [r3, #0]
 8003b24:	0713      	lsls	r3, r2, #28
 8003b26:	d504      	bpl.n	8003b32 <_vfiprintf_r+0x116>
 8003b28:	2353      	movs	r3, #83	; 0x53
 8003b2a:	a904      	add	r1, sp, #16
 8003b2c:	185b      	adds	r3, r3, r1
 8003b2e:	212b      	movs	r1, #43	; 0x2b
 8003b30:	7019      	strb	r1, [r3, #0]
 8003b32:	9b03      	ldr	r3, [sp, #12]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b2a      	cmp	r3, #42	; 0x2a
 8003b38:	d016      	beq.n	8003b68 <_vfiprintf_r+0x14c>
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	68eb      	ldr	r3, [r5, #12]
 8003b3e:	9f03      	ldr	r7, [sp, #12]
 8003b40:	783a      	ldrb	r2, [r7, #0]
 8003b42:	1c78      	adds	r0, r7, #1
 8003b44:	3a30      	subs	r2, #48	; 0x30
 8003b46:	4684      	mov	ip, r0
 8003b48:	2a09      	cmp	r2, #9
 8003b4a:	d94f      	bls.n	8003bec <_vfiprintf_r+0x1d0>
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	d111      	bne.n	8003b74 <_vfiprintf_r+0x158>
 8003b50:	e017      	b.n	8003b82 <_vfiprintf_r+0x166>
 8003b52:	3701      	adds	r7, #1
 8003b54:	e7a9      	b.n	8003aaa <_vfiprintf_r+0x8e>
 8003b56:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <_vfiprintf_r+0x260>)
 8003b58:	682a      	ldr	r2, [r5, #0]
 8003b5a:	1ac0      	subs	r0, r0, r3
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4083      	lsls	r3, r0
 8003b60:	4313      	orrs	r3, r2
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	9703      	str	r7, [sp, #12]
 8003b66:	e7cb      	b.n	8003b00 <_vfiprintf_r+0xe4>
 8003b68:	9b07      	ldr	r3, [sp, #28]
 8003b6a:	1d19      	adds	r1, r3, #4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	9107      	str	r1, [sp, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db01      	blt.n	8003b78 <_vfiprintf_r+0x15c>
 8003b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b76:	e004      	b.n	8003b82 <_vfiprintf_r+0x166>
 8003b78:	425b      	negs	r3, r3
 8003b7a:	60eb      	str	r3, [r5, #12]
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	602b      	str	r3, [r5, #0]
 8003b82:	783b      	ldrb	r3, [r7, #0]
 8003b84:	2b2e      	cmp	r3, #46	; 0x2e
 8003b86:	d10a      	bne.n	8003b9e <_vfiprintf_r+0x182>
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b8c:	d137      	bne.n	8003bfe <_vfiprintf_r+0x1e2>
 8003b8e:	9b07      	ldr	r3, [sp, #28]
 8003b90:	3702      	adds	r7, #2
 8003b92:	1d1a      	adds	r2, r3, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	9207      	str	r2, [sp, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	db2d      	blt.n	8003bf8 <_vfiprintf_r+0x1dc>
 8003b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	7839      	ldrb	r1, [r7, #0]
 8003ba2:	4837      	ldr	r0, [pc, #220]	; (8003c80 <_vfiprintf_r+0x264>)
 8003ba4:	f000 fd2c 	bl	8004600 <memchr>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d007      	beq.n	8003bbc <_vfiprintf_r+0x1a0>
 8003bac:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <_vfiprintf_r+0x264>)
 8003bae:	682a      	ldr	r2, [r5, #0]
 8003bb0:	1ac0      	subs	r0, r0, r3
 8003bb2:	2340      	movs	r3, #64	; 0x40
 8003bb4:	4083      	lsls	r3, r0
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	3701      	adds	r7, #1
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	7839      	ldrb	r1, [r7, #0]
 8003bbe:	1c7b      	adds	r3, r7, #1
 8003bc0:	2206      	movs	r2, #6
 8003bc2:	4830      	ldr	r0, [pc, #192]	; (8003c84 <_vfiprintf_r+0x268>)
 8003bc4:	9303      	str	r3, [sp, #12]
 8003bc6:	7629      	strb	r1, [r5, #24]
 8003bc8:	f000 fd1a 	bl	8004600 <memchr>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d045      	beq.n	8003c5c <_vfiprintf_r+0x240>
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <_vfiprintf_r+0x26c>)
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d127      	bne.n	8003c26 <_vfiprintf_r+0x20a>
 8003bd6:	2207      	movs	r2, #7
 8003bd8:	9b07      	ldr	r3, [sp, #28]
 8003bda:	3307      	adds	r3, #7
 8003bdc:	4393      	bics	r3, r2
 8003bde:	3308      	adds	r3, #8
 8003be0:	9307      	str	r3, [sp, #28]
 8003be2:	696b      	ldr	r3, [r5, #20]
 8003be4:	9a04      	ldr	r2, [sp, #16]
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	616b      	str	r3, [r5, #20]
 8003bea:	e75d      	b.n	8003aa8 <_vfiprintf_r+0x8c>
 8003bec:	210a      	movs	r1, #10
 8003bee:	434b      	muls	r3, r1
 8003bf0:	4667      	mov	r7, ip
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	3909      	subs	r1, #9
 8003bf6:	e7a3      	b.n	8003b40 <_vfiprintf_r+0x124>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	425b      	negs	r3, r3
 8003bfc:	e7ce      	b.n	8003b9c <_vfiprintf_r+0x180>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	001a      	movs	r2, r3
 8003c02:	3701      	adds	r7, #1
 8003c04:	606b      	str	r3, [r5, #4]
 8003c06:	7839      	ldrb	r1, [r7, #0]
 8003c08:	1c78      	adds	r0, r7, #1
 8003c0a:	3930      	subs	r1, #48	; 0x30
 8003c0c:	4684      	mov	ip, r0
 8003c0e:	2909      	cmp	r1, #9
 8003c10:	d903      	bls.n	8003c1a <_vfiprintf_r+0x1fe>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0c3      	beq.n	8003b9e <_vfiprintf_r+0x182>
 8003c16:	9209      	str	r2, [sp, #36]	; 0x24
 8003c18:	e7c1      	b.n	8003b9e <_vfiprintf_r+0x182>
 8003c1a:	230a      	movs	r3, #10
 8003c1c:	435a      	muls	r2, r3
 8003c1e:	4667      	mov	r7, ip
 8003c20:	1852      	adds	r2, r2, r1
 8003c22:	3b09      	subs	r3, #9
 8003c24:	e7ef      	b.n	8003c06 <_vfiprintf_r+0x1ea>
 8003c26:	ab07      	add	r3, sp, #28
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	0022      	movs	r2, r4
 8003c2c:	0029      	movs	r1, r5
 8003c2e:	0030      	movs	r0, r6
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <_vfiprintf_r+0x270>)
 8003c32:	e000      	b.n	8003c36 <_vfiprintf_r+0x21a>
 8003c34:	bf00      	nop
 8003c36:	9004      	str	r0, [sp, #16]
 8003c38:	9b04      	ldr	r3, [sp, #16]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	d1d1      	bne.n	8003be2 <_vfiprintf_r+0x1c6>
 8003c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c40:	07db      	lsls	r3, r3, #31
 8003c42:	d405      	bmi.n	8003c50 <_vfiprintf_r+0x234>
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	059b      	lsls	r3, r3, #22
 8003c48:	d402      	bmi.n	8003c50 <_vfiprintf_r+0x234>
 8003c4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c4c:	f000 fc6a 	bl	8004524 <__retarget_lock_release_recursive>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	065b      	lsls	r3, r3, #25
 8003c54:	d500      	bpl.n	8003c58 <_vfiprintf_r+0x23c>
 8003c56:	e70a      	b.n	8003a6e <_vfiprintf_r+0x52>
 8003c58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003c5a:	e70a      	b.n	8003a72 <_vfiprintf_r+0x56>
 8003c5c:	ab07      	add	r3, sp, #28
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0022      	movs	r2, r4
 8003c62:	0029      	movs	r1, r5
 8003c64:	0030      	movs	r0, r6
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <_vfiprintf_r+0x270>)
 8003c68:	f000 f882 	bl	8003d70 <_printf_i>
 8003c6c:	e7e3      	b.n	8003c36 <_vfiprintf_r+0x21a>
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	080051b0 	.word	0x080051b0
 8003c74:	080051d0 	.word	0x080051d0
 8003c78:	08005190 	.word	0x08005190
 8003c7c:	0800515c 	.word	0x0800515c
 8003c80:	08005162 	.word	0x08005162
 8003c84:	08005166 	.word	0x08005166
 8003c88:	00000000 	.word	0x00000000
 8003c8c:	080039f9 	.word	0x080039f9

08003c90 <_printf_common>:
 8003c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c92:	0015      	movs	r5, r2
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	688a      	ldr	r2, [r1, #8]
 8003c98:	690b      	ldr	r3, [r1, #16]
 8003c9a:	000c      	movs	r4, r1
 8003c9c:	9000      	str	r0, [sp, #0]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	da00      	bge.n	8003ca4 <_printf_common+0x14>
 8003ca2:	0013      	movs	r3, r2
 8003ca4:	0022      	movs	r2, r4
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	3243      	adds	r2, #67	; 0x43
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d001      	beq.n	8003cb4 <_printf_common+0x24>
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	602b      	str	r3, [r5, #0]
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	069b      	lsls	r3, r3, #26
 8003cb8:	d502      	bpl.n	8003cc0 <_printf_common+0x30>
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	6822      	ldr	r2, [r4, #0]
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	0017      	movs	r7, r2
 8003cc6:	401f      	ands	r7, r3
 8003cc8:	421a      	tst	r2, r3
 8003cca:	d027      	beq.n	8003d1c <_printf_common+0x8c>
 8003ccc:	0023      	movs	r3, r4
 8003cce:	3343      	adds	r3, #67	; 0x43
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	4193      	sbcs	r3, r2
 8003cd6:	6822      	ldr	r2, [r4, #0]
 8003cd8:	0692      	lsls	r2, r2, #26
 8003cda:	d430      	bmi.n	8003d3e <_printf_common+0xae>
 8003cdc:	0022      	movs	r2, r4
 8003cde:	9901      	ldr	r1, [sp, #4]
 8003ce0:	9800      	ldr	r0, [sp, #0]
 8003ce2:	9e08      	ldr	r6, [sp, #32]
 8003ce4:	3243      	adds	r2, #67	; 0x43
 8003ce6:	47b0      	blx	r6
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d025      	beq.n	8003d38 <_printf_common+0xa8>
 8003cec:	2306      	movs	r3, #6
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	682a      	ldr	r2, [r5, #0]
 8003cf2:	68e1      	ldr	r1, [r4, #12]
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	4003      	ands	r3, r0
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d103      	bne.n	8003d04 <_printf_common+0x74>
 8003cfc:	1a8d      	subs	r5, r1, r2
 8003cfe:	43eb      	mvns	r3, r5
 8003d00:	17db      	asrs	r3, r3, #31
 8003d02:	401d      	ands	r5, r3
 8003d04:	68a3      	ldr	r3, [r4, #8]
 8003d06:	6922      	ldr	r2, [r4, #16]
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	dd01      	ble.n	8003d10 <_printf_common+0x80>
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	18ed      	adds	r5, r5, r3
 8003d10:	2700      	movs	r7, #0
 8003d12:	42bd      	cmp	r5, r7
 8003d14:	d120      	bne.n	8003d58 <_printf_common+0xc8>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e010      	b.n	8003d3c <_printf_common+0xac>
 8003d1a:	3701      	adds	r7, #1
 8003d1c:	68e3      	ldr	r3, [r4, #12]
 8003d1e:	682a      	ldr	r2, [r5, #0]
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	42bb      	cmp	r3, r7
 8003d24:	ddd2      	ble.n	8003ccc <_printf_common+0x3c>
 8003d26:	0022      	movs	r2, r4
 8003d28:	2301      	movs	r3, #1
 8003d2a:	9901      	ldr	r1, [sp, #4]
 8003d2c:	9800      	ldr	r0, [sp, #0]
 8003d2e:	9e08      	ldr	r6, [sp, #32]
 8003d30:	3219      	adds	r2, #25
 8003d32:	47b0      	blx	r6
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d1f0      	bne.n	8003d1a <_printf_common+0x8a>
 8003d38:	2001      	movs	r0, #1
 8003d3a:	4240      	negs	r0, r0
 8003d3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d3e:	2030      	movs	r0, #48	; 0x30
 8003d40:	18e1      	adds	r1, r4, r3
 8003d42:	3143      	adds	r1, #67	; 0x43
 8003d44:	7008      	strb	r0, [r1, #0]
 8003d46:	0021      	movs	r1, r4
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	3145      	adds	r1, #69	; 0x45
 8003d4c:	7809      	ldrb	r1, [r1, #0]
 8003d4e:	18a2      	adds	r2, r4, r2
 8003d50:	3243      	adds	r2, #67	; 0x43
 8003d52:	3302      	adds	r3, #2
 8003d54:	7011      	strb	r1, [r2, #0]
 8003d56:	e7c1      	b.n	8003cdc <_printf_common+0x4c>
 8003d58:	0022      	movs	r2, r4
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	9901      	ldr	r1, [sp, #4]
 8003d5e:	9800      	ldr	r0, [sp, #0]
 8003d60:	9e08      	ldr	r6, [sp, #32]
 8003d62:	321a      	adds	r2, #26
 8003d64:	47b0      	blx	r6
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	d0e6      	beq.n	8003d38 <_printf_common+0xa8>
 8003d6a:	3701      	adds	r7, #1
 8003d6c:	e7d1      	b.n	8003d12 <_printf_common+0x82>
	...

08003d70 <_printf_i>:
 8003d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d72:	b08b      	sub	sp, #44	; 0x2c
 8003d74:	9206      	str	r2, [sp, #24]
 8003d76:	000a      	movs	r2, r1
 8003d78:	3243      	adds	r2, #67	; 0x43
 8003d7a:	9307      	str	r3, [sp, #28]
 8003d7c:	9005      	str	r0, [sp, #20]
 8003d7e:	9204      	str	r2, [sp, #16]
 8003d80:	7e0a      	ldrb	r2, [r1, #24]
 8003d82:	000c      	movs	r4, r1
 8003d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d86:	2a78      	cmp	r2, #120	; 0x78
 8003d88:	d806      	bhi.n	8003d98 <_printf_i+0x28>
 8003d8a:	2a62      	cmp	r2, #98	; 0x62
 8003d8c:	d808      	bhi.n	8003da0 <_printf_i+0x30>
 8003d8e:	2a00      	cmp	r2, #0
 8003d90:	d100      	bne.n	8003d94 <_printf_i+0x24>
 8003d92:	e0c0      	b.n	8003f16 <_printf_i+0x1a6>
 8003d94:	2a58      	cmp	r2, #88	; 0x58
 8003d96:	d052      	beq.n	8003e3e <_printf_i+0xce>
 8003d98:	0026      	movs	r6, r4
 8003d9a:	3642      	adds	r6, #66	; 0x42
 8003d9c:	7032      	strb	r2, [r6, #0]
 8003d9e:	e022      	b.n	8003de6 <_printf_i+0x76>
 8003da0:	0010      	movs	r0, r2
 8003da2:	3863      	subs	r0, #99	; 0x63
 8003da4:	2815      	cmp	r0, #21
 8003da6:	d8f7      	bhi.n	8003d98 <_printf_i+0x28>
 8003da8:	f7fc f9b6 	bl	8000118 <__gnu_thumb1_case_shi>
 8003dac:	001f0016 	.word	0x001f0016
 8003db0:	fff6fff6 	.word	0xfff6fff6
 8003db4:	fff6fff6 	.word	0xfff6fff6
 8003db8:	fff6001f 	.word	0xfff6001f
 8003dbc:	fff6fff6 	.word	0xfff6fff6
 8003dc0:	00a8fff6 	.word	0x00a8fff6
 8003dc4:	009a0036 	.word	0x009a0036
 8003dc8:	fff6fff6 	.word	0xfff6fff6
 8003dcc:	fff600b9 	.word	0xfff600b9
 8003dd0:	fff60036 	.word	0xfff60036
 8003dd4:	009efff6 	.word	0x009efff6
 8003dd8:	0026      	movs	r6, r4
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	3642      	adds	r6, #66	; 0x42
 8003dde:	1d11      	adds	r1, r2, #4
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	7033      	strb	r3, [r6, #0]
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0a7      	b.n	8003f3a <_printf_i+0x1ca>
 8003dea:	6808      	ldr	r0, [r1, #0]
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	1d0a      	adds	r2, r1, #4
 8003df0:	0605      	lsls	r5, r0, #24
 8003df2:	d50b      	bpl.n	8003e0c <_printf_i+0x9c>
 8003df4:	680d      	ldr	r5, [r1, #0]
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	2d00      	cmp	r5, #0
 8003dfa:	da03      	bge.n	8003e04 <_printf_i+0x94>
 8003dfc:	232d      	movs	r3, #45	; 0x2d
 8003dfe:	9a04      	ldr	r2, [sp, #16]
 8003e00:	426d      	negs	r5, r5
 8003e02:	7013      	strb	r3, [r2, #0]
 8003e04:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <_printf_i+0x21c>)
 8003e06:	270a      	movs	r7, #10
 8003e08:	9303      	str	r3, [sp, #12]
 8003e0a:	e032      	b.n	8003e72 <_printf_i+0x102>
 8003e0c:	680d      	ldr	r5, [r1, #0]
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	0641      	lsls	r1, r0, #25
 8003e12:	d5f1      	bpl.n	8003df8 <_printf_i+0x88>
 8003e14:	b22d      	sxth	r5, r5
 8003e16:	e7ef      	b.n	8003df8 <_printf_i+0x88>
 8003e18:	680d      	ldr	r5, [r1, #0]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	1d08      	adds	r0, r1, #4
 8003e1e:	6018      	str	r0, [r3, #0]
 8003e20:	062e      	lsls	r6, r5, #24
 8003e22:	d501      	bpl.n	8003e28 <_printf_i+0xb8>
 8003e24:	680d      	ldr	r5, [r1, #0]
 8003e26:	e003      	b.n	8003e30 <_printf_i+0xc0>
 8003e28:	066d      	lsls	r5, r5, #25
 8003e2a:	d5fb      	bpl.n	8003e24 <_printf_i+0xb4>
 8003e2c:	680d      	ldr	r5, [r1, #0]
 8003e2e:	b2ad      	uxth	r5, r5
 8003e30:	4b56      	ldr	r3, [pc, #344]	; (8003f8c <_printf_i+0x21c>)
 8003e32:	270a      	movs	r7, #10
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	2a6f      	cmp	r2, #111	; 0x6f
 8003e38:	d117      	bne.n	8003e6a <_printf_i+0xfa>
 8003e3a:	2708      	movs	r7, #8
 8003e3c:	e015      	b.n	8003e6a <_printf_i+0xfa>
 8003e3e:	3145      	adds	r1, #69	; 0x45
 8003e40:	700a      	strb	r2, [r1, #0]
 8003e42:	4a52      	ldr	r2, [pc, #328]	; (8003f8c <_printf_i+0x21c>)
 8003e44:	9203      	str	r2, [sp, #12]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	6821      	ldr	r1, [r4, #0]
 8003e4a:	ca20      	ldmia	r2!, {r5}
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	0608      	lsls	r0, r1, #24
 8003e50:	d550      	bpl.n	8003ef4 <_printf_i+0x184>
 8003e52:	07cb      	lsls	r3, r1, #31
 8003e54:	d502      	bpl.n	8003e5c <_printf_i+0xec>
 8003e56:	2320      	movs	r3, #32
 8003e58:	4319      	orrs	r1, r3
 8003e5a:	6021      	str	r1, [r4, #0]
 8003e5c:	2710      	movs	r7, #16
 8003e5e:	2d00      	cmp	r5, #0
 8003e60:	d103      	bne.n	8003e6a <_printf_i+0xfa>
 8003e62:	2320      	movs	r3, #32
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	439a      	bics	r2, r3
 8003e68:	6022      	str	r2, [r4, #0]
 8003e6a:	0023      	movs	r3, r4
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	3343      	adds	r3, #67	; 0x43
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	6863      	ldr	r3, [r4, #4]
 8003e74:	60a3      	str	r3, [r4, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db03      	blt.n	8003e82 <_printf_i+0x112>
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	6821      	ldr	r1, [r4, #0]
 8003e7e:	4391      	bics	r1, r2
 8003e80:	6021      	str	r1, [r4, #0]
 8003e82:	2d00      	cmp	r5, #0
 8003e84:	d102      	bne.n	8003e8c <_printf_i+0x11c>
 8003e86:	9e04      	ldr	r6, [sp, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00c      	beq.n	8003ea6 <_printf_i+0x136>
 8003e8c:	9e04      	ldr	r6, [sp, #16]
 8003e8e:	0028      	movs	r0, r5
 8003e90:	0039      	movs	r1, r7
 8003e92:	f7fc f9d1 	bl	8000238 <__aeabi_uidivmod>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	3e01      	subs	r6, #1
 8003e9a:	5c5b      	ldrb	r3, [r3, r1]
 8003e9c:	7033      	strb	r3, [r6, #0]
 8003e9e:	002b      	movs	r3, r5
 8003ea0:	0005      	movs	r5, r0
 8003ea2:	429f      	cmp	r7, r3
 8003ea4:	d9f3      	bls.n	8003e8e <_printf_i+0x11e>
 8003ea6:	2f08      	cmp	r7, #8
 8003ea8:	d109      	bne.n	8003ebe <_printf_i+0x14e>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d506      	bpl.n	8003ebe <_printf_i+0x14e>
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	6922      	ldr	r2, [r4, #16]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	dc02      	bgt.n	8003ebe <_printf_i+0x14e>
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	3e01      	subs	r6, #1
 8003ebc:	7033      	strb	r3, [r6, #0]
 8003ebe:	9b04      	ldr	r3, [sp, #16]
 8003ec0:	1b9b      	subs	r3, r3, r6
 8003ec2:	6123      	str	r3, [r4, #16]
 8003ec4:	9b07      	ldr	r3, [sp, #28]
 8003ec6:	0021      	movs	r1, r4
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	9805      	ldr	r0, [sp, #20]
 8003ecc:	9b06      	ldr	r3, [sp, #24]
 8003ece:	aa09      	add	r2, sp, #36	; 0x24
 8003ed0:	f7ff fede 	bl	8003c90 <_printf_common>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d135      	bne.n	8003f44 <_printf_i+0x1d4>
 8003ed8:	2001      	movs	r0, #1
 8003eda:	4240      	negs	r0, r0
 8003edc:	b00b      	add	sp, #44	; 0x2c
 8003ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	6809      	ldr	r1, [r1, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	0022      	movs	r2, r4
 8003eea:	2178      	movs	r1, #120	; 0x78
 8003eec:	3245      	adds	r2, #69	; 0x45
 8003eee:	7011      	strb	r1, [r2, #0]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <_printf_i+0x220>)
 8003ef2:	e7a7      	b.n	8003e44 <_printf_i+0xd4>
 8003ef4:	0648      	lsls	r0, r1, #25
 8003ef6:	d5ac      	bpl.n	8003e52 <_printf_i+0xe2>
 8003ef8:	b2ad      	uxth	r5, r5
 8003efa:	e7aa      	b.n	8003e52 <_printf_i+0xe2>
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	680d      	ldr	r5, [r1, #0]
 8003f00:	1d10      	adds	r0, r2, #4
 8003f02:	6949      	ldr	r1, [r1, #20]
 8003f04:	6018      	str	r0, [r3, #0]
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	062e      	lsls	r6, r5, #24
 8003f0a:	d501      	bpl.n	8003f10 <_printf_i+0x1a0>
 8003f0c:	6019      	str	r1, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <_printf_i+0x1a6>
 8003f10:	066d      	lsls	r5, r5, #25
 8003f12:	d5fb      	bpl.n	8003f0c <_printf_i+0x19c>
 8003f14:	8019      	strh	r1, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9e04      	ldr	r6, [sp, #16]
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	e7d2      	b.n	8003ec4 <_printf_i+0x154>
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	1d11      	adds	r1, r2, #4
 8003f22:	6019      	str	r1, [r3, #0]
 8003f24:	6816      	ldr	r6, [r2, #0]
 8003f26:	2100      	movs	r1, #0
 8003f28:	0030      	movs	r0, r6
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	f000 fb68 	bl	8004600 <memchr>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d001      	beq.n	8003f38 <_printf_i+0x1c8>
 8003f34:	1b80      	subs	r0, r0, r6
 8003f36:	6060      	str	r0, [r4, #4]
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	6123      	str	r3, [r4, #16]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9a04      	ldr	r2, [sp, #16]
 8003f40:	7013      	strb	r3, [r2, #0]
 8003f42:	e7bf      	b.n	8003ec4 <_printf_i+0x154>
 8003f44:	6923      	ldr	r3, [r4, #16]
 8003f46:	0032      	movs	r2, r6
 8003f48:	9906      	ldr	r1, [sp, #24]
 8003f4a:	9805      	ldr	r0, [sp, #20]
 8003f4c:	9d07      	ldr	r5, [sp, #28]
 8003f4e:	47a8      	blx	r5
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d0c1      	beq.n	8003ed8 <_printf_i+0x168>
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	079b      	lsls	r3, r3, #30
 8003f58:	d415      	bmi.n	8003f86 <_printf_i+0x216>
 8003f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5c:	68e0      	ldr	r0, [r4, #12]
 8003f5e:	4298      	cmp	r0, r3
 8003f60:	dabc      	bge.n	8003edc <_printf_i+0x16c>
 8003f62:	0018      	movs	r0, r3
 8003f64:	e7ba      	b.n	8003edc <_printf_i+0x16c>
 8003f66:	0022      	movs	r2, r4
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9906      	ldr	r1, [sp, #24]
 8003f6c:	9805      	ldr	r0, [sp, #20]
 8003f6e:	9e07      	ldr	r6, [sp, #28]
 8003f70:	3219      	adds	r2, #25
 8003f72:	47b0      	blx	r6
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d0af      	beq.n	8003ed8 <_printf_i+0x168>
 8003f78:	3501      	adds	r5, #1
 8003f7a:	68e3      	ldr	r3, [r4, #12]
 8003f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	42ab      	cmp	r3, r5
 8003f82:	dcf0      	bgt.n	8003f66 <_printf_i+0x1f6>
 8003f84:	e7e9      	b.n	8003f5a <_printf_i+0x1ea>
 8003f86:	2500      	movs	r5, #0
 8003f88:	e7f7      	b.n	8003f7a <_printf_i+0x20a>
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	0800516d 	.word	0x0800516d
 8003f90:	0800517e 	.word	0x0800517e

08003f94 <_vsiprintf_r>:
 8003f94:	b500      	push	{lr}
 8003f96:	b09b      	sub	sp, #108	; 0x6c
 8003f98:	9100      	str	r1, [sp, #0]
 8003f9a:	9104      	str	r1, [sp, #16]
 8003f9c:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <_vsiprintf_r+0x24>)
 8003f9e:	9105      	str	r1, [sp, #20]
 8003fa0:	9102      	str	r1, [sp, #8]
 8003fa2:	4906      	ldr	r1, [pc, #24]	; (8003fbc <_vsiprintf_r+0x28>)
 8003fa4:	9103      	str	r1, [sp, #12]
 8003fa6:	4669      	mov	r1, sp
 8003fa8:	f000 fc78 	bl	800489c <_svfiprintf_r>
 8003fac:	2300      	movs	r3, #0
 8003fae:	9a00      	ldr	r2, [sp, #0]
 8003fb0:	7013      	strb	r3, [r2, #0]
 8003fb2:	b01b      	add	sp, #108	; 0x6c
 8003fb4:	bd00      	pop	{pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	7fffffff 	.word	0x7fffffff
 8003fbc:	ffff0208 	.word	0xffff0208

08003fc0 <vsiprintf>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	000a      	movs	r2, r1
 8003fc6:	0001      	movs	r1, r0
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <vsiprintf+0x14>)
 8003fca:	6800      	ldr	r0, [r0, #0]
 8003fcc:	f7ff ffe2 	bl	8003f94 <_vsiprintf_r>
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	2000000c 	.word	0x2000000c

08003fd8 <__swbuf_r>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	0005      	movs	r5, r0
 8003fdc:	000e      	movs	r6, r1
 8003fde:	0014      	movs	r4, r2
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d004      	beq.n	8003fee <__swbuf_r+0x16>
 8003fe4:	6983      	ldr	r3, [r0, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <__swbuf_r+0x16>
 8003fea:	f000 f9f9 	bl	80043e0 <__sinit>
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <__swbuf_r+0xa0>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	d12e      	bne.n	8004052 <__swbuf_r+0x7a>
 8003ff4:	686c      	ldr	r4, [r5, #4]
 8003ff6:	69a3      	ldr	r3, [r4, #24]
 8003ff8:	60a3      	str	r3, [r4, #8]
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	071b      	lsls	r3, r3, #28
 8003ffe:	d532      	bpl.n	8004066 <__swbuf_r+0x8e>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02f      	beq.n	8004066 <__swbuf_r+0x8e>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	b2f7      	uxtb	r7, r6
 800400c:	1a98      	subs	r0, r3, r2
 800400e:	6963      	ldr	r3, [r4, #20]
 8004010:	b2f6      	uxtb	r6, r6
 8004012:	4283      	cmp	r3, r0
 8004014:	dc05      	bgt.n	8004022 <__swbuf_r+0x4a>
 8004016:	0021      	movs	r1, r4
 8004018:	0028      	movs	r0, r5
 800401a:	f000 f93f 	bl	800429c <_fflush_r>
 800401e:	2800      	cmp	r0, #0
 8004020:	d127      	bne.n	8004072 <__swbuf_r+0x9a>
 8004022:	68a3      	ldr	r3, [r4, #8]
 8004024:	3001      	adds	r0, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	60a3      	str	r3, [r4, #8]
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	6022      	str	r2, [r4, #0]
 8004030:	701f      	strb	r7, [r3, #0]
 8004032:	6963      	ldr	r3, [r4, #20]
 8004034:	4283      	cmp	r3, r0
 8004036:	d004      	beq.n	8004042 <__swbuf_r+0x6a>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	07db      	lsls	r3, r3, #31
 800403c:	d507      	bpl.n	800404e <__swbuf_r+0x76>
 800403e:	2e0a      	cmp	r6, #10
 8004040:	d105      	bne.n	800404e <__swbuf_r+0x76>
 8004042:	0021      	movs	r1, r4
 8004044:	0028      	movs	r0, r5
 8004046:	f000 f929 	bl	800429c <_fflush_r>
 800404a:	2800      	cmp	r0, #0
 800404c:	d111      	bne.n	8004072 <__swbuf_r+0x9a>
 800404e:	0030      	movs	r0, r6
 8004050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <__swbuf_r+0xa4>)
 8004054:	429c      	cmp	r4, r3
 8004056:	d101      	bne.n	800405c <__swbuf_r+0x84>
 8004058:	68ac      	ldr	r4, [r5, #8]
 800405a:	e7cc      	b.n	8003ff6 <__swbuf_r+0x1e>
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <__swbuf_r+0xa8>)
 800405e:	429c      	cmp	r4, r3
 8004060:	d1c9      	bne.n	8003ff6 <__swbuf_r+0x1e>
 8004062:	68ec      	ldr	r4, [r5, #12]
 8004064:	e7c7      	b.n	8003ff6 <__swbuf_r+0x1e>
 8004066:	0021      	movs	r1, r4
 8004068:	0028      	movs	r0, r5
 800406a:	f000 f80b 	bl	8004084 <__swsetup_r>
 800406e:	2800      	cmp	r0, #0
 8004070:	d0c9      	beq.n	8004006 <__swbuf_r+0x2e>
 8004072:	2601      	movs	r6, #1
 8004074:	4276      	negs	r6, r6
 8004076:	e7ea      	b.n	800404e <__swbuf_r+0x76>
 8004078:	080051b0 	.word	0x080051b0
 800407c:	080051d0 	.word	0x080051d0
 8004080:	08005190 	.word	0x08005190

08004084 <__swsetup_r>:
 8004084:	4b37      	ldr	r3, [pc, #220]	; (8004164 <__swsetup_r+0xe0>)
 8004086:	b570      	push	{r4, r5, r6, lr}
 8004088:	681d      	ldr	r5, [r3, #0]
 800408a:	0006      	movs	r6, r0
 800408c:	000c      	movs	r4, r1
 800408e:	2d00      	cmp	r5, #0
 8004090:	d005      	beq.n	800409e <__swsetup_r+0x1a>
 8004092:	69ab      	ldr	r3, [r5, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <__swsetup_r+0x1a>
 8004098:	0028      	movs	r0, r5
 800409a:	f000 f9a1 	bl	80043e0 <__sinit>
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <__swsetup_r+0xe4>)
 80040a0:	429c      	cmp	r4, r3
 80040a2:	d10f      	bne.n	80040c4 <__swsetup_r+0x40>
 80040a4:	686c      	ldr	r4, [r5, #4]
 80040a6:	230c      	movs	r3, #12
 80040a8:	5ee2      	ldrsh	r2, [r4, r3]
 80040aa:	b293      	uxth	r3, r2
 80040ac:	0711      	lsls	r1, r2, #28
 80040ae:	d42d      	bmi.n	800410c <__swsetup_r+0x88>
 80040b0:	06d9      	lsls	r1, r3, #27
 80040b2:	d411      	bmi.n	80040d8 <__swsetup_r+0x54>
 80040b4:	2309      	movs	r3, #9
 80040b6:	2001      	movs	r0, #1
 80040b8:	6033      	str	r3, [r6, #0]
 80040ba:	3337      	adds	r3, #55	; 0x37
 80040bc:	4313      	orrs	r3, r2
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	4240      	negs	r0, r0
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <__swsetup_r+0xe8>)
 80040c6:	429c      	cmp	r4, r3
 80040c8:	d101      	bne.n	80040ce <__swsetup_r+0x4a>
 80040ca:	68ac      	ldr	r4, [r5, #8]
 80040cc:	e7eb      	b.n	80040a6 <__swsetup_r+0x22>
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <__swsetup_r+0xec>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d1e8      	bne.n	80040a6 <__swsetup_r+0x22>
 80040d4:	68ec      	ldr	r4, [r5, #12]
 80040d6:	e7e6      	b.n	80040a6 <__swsetup_r+0x22>
 80040d8:	075b      	lsls	r3, r3, #29
 80040da:	d513      	bpl.n	8004104 <__swsetup_r+0x80>
 80040dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040de:	2900      	cmp	r1, #0
 80040e0:	d008      	beq.n	80040f4 <__swsetup_r+0x70>
 80040e2:	0023      	movs	r3, r4
 80040e4:	3344      	adds	r3, #68	; 0x44
 80040e6:	4299      	cmp	r1, r3
 80040e8:	d002      	beq.n	80040f0 <__swsetup_r+0x6c>
 80040ea:	0030      	movs	r0, r6
 80040ec:	f000 faa6 	bl	800463c <_free_r>
 80040f0:	2300      	movs	r3, #0
 80040f2:	6363      	str	r3, [r4, #52]	; 0x34
 80040f4:	2224      	movs	r2, #36	; 0x24
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	4393      	bics	r3, r2
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	2300      	movs	r3, #0
 80040fe:	6063      	str	r3, [r4, #4]
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	2308      	movs	r3, #8
 8004106:	89a2      	ldrh	r2, [r4, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <__swsetup_r+0xa6>
 8004112:	21a0      	movs	r1, #160	; 0xa0
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	0089      	lsls	r1, r1, #2
 800411a:	0092      	lsls	r2, r2, #2
 800411c:	400b      	ands	r3, r1
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <__swsetup_r+0xa6>
 8004122:	0021      	movs	r1, r4
 8004124:	0030      	movs	r0, r6
 8004126:	f000 fa27 	bl	8004578 <__smakebuf_r>
 800412a:	220c      	movs	r2, #12
 800412c:	5ea3      	ldrsh	r3, [r4, r2]
 800412e:	2001      	movs	r0, #1
 8004130:	001a      	movs	r2, r3
 8004132:	b299      	uxth	r1, r3
 8004134:	4002      	ands	r2, r0
 8004136:	4203      	tst	r3, r0
 8004138:	d00f      	beq.n	800415a <__swsetup_r+0xd6>
 800413a:	2200      	movs	r2, #0
 800413c:	60a2      	str	r2, [r4, #8]
 800413e:	6962      	ldr	r2, [r4, #20]
 8004140:	4252      	negs	r2, r2
 8004142:	61a2      	str	r2, [r4, #24]
 8004144:	2000      	movs	r0, #0
 8004146:	6922      	ldr	r2, [r4, #16]
 8004148:	4282      	cmp	r2, r0
 800414a:	d1ba      	bne.n	80040c2 <__swsetup_r+0x3e>
 800414c:	060a      	lsls	r2, r1, #24
 800414e:	d5b8      	bpl.n	80040c2 <__swsetup_r+0x3e>
 8004150:	2240      	movs	r2, #64	; 0x40
 8004152:	4313      	orrs	r3, r2
 8004154:	81a3      	strh	r3, [r4, #12]
 8004156:	3801      	subs	r0, #1
 8004158:	e7b3      	b.n	80040c2 <__swsetup_r+0x3e>
 800415a:	0788      	lsls	r0, r1, #30
 800415c:	d400      	bmi.n	8004160 <__swsetup_r+0xdc>
 800415e:	6962      	ldr	r2, [r4, #20]
 8004160:	60a2      	str	r2, [r4, #8]
 8004162:	e7ef      	b.n	8004144 <__swsetup_r+0xc0>
 8004164:	2000000c 	.word	0x2000000c
 8004168:	080051b0 	.word	0x080051b0
 800416c:	080051d0 	.word	0x080051d0
 8004170:	08005190 	.word	0x08005190

08004174 <abort>:
 8004174:	2006      	movs	r0, #6
 8004176:	b510      	push	{r4, lr}
 8004178:	f000 fccc 	bl	8004b14 <raise>
 800417c:	2001      	movs	r0, #1
 800417e:	f7fc fb5f 	bl	8000840 <_exit>
	...

08004184 <__sflush_r>:
 8004184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004186:	898b      	ldrh	r3, [r1, #12]
 8004188:	0005      	movs	r5, r0
 800418a:	000c      	movs	r4, r1
 800418c:	071a      	lsls	r2, r3, #28
 800418e:	d45f      	bmi.n	8004250 <__sflush_r+0xcc>
 8004190:	684a      	ldr	r2, [r1, #4]
 8004192:	2a00      	cmp	r2, #0
 8004194:	dc04      	bgt.n	80041a0 <__sflush_r+0x1c>
 8004196:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004198:	2a00      	cmp	r2, #0
 800419a:	dc01      	bgt.n	80041a0 <__sflush_r+0x1c>
 800419c:	2000      	movs	r0, #0
 800419e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041a2:	2f00      	cmp	r7, #0
 80041a4:	d0fa      	beq.n	800419c <__sflush_r+0x18>
 80041a6:	2200      	movs	r2, #0
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	682e      	ldr	r6, [r5, #0]
 80041ac:	602a      	str	r2, [r5, #0]
 80041ae:	001a      	movs	r2, r3
 80041b0:	0149      	lsls	r1, r1, #5
 80041b2:	400a      	ands	r2, r1
 80041b4:	420b      	tst	r3, r1
 80041b6:	d034      	beq.n	8004222 <__sflush_r+0x9e>
 80041b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	075b      	lsls	r3, r3, #29
 80041be:	d506      	bpl.n	80041ce <__sflush_r+0x4a>
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	1ac0      	subs	r0, r0, r3
 80041c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <__sflush_r+0x4a>
 80041ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041cc:	1ac0      	subs	r0, r0, r3
 80041ce:	0002      	movs	r2, r0
 80041d0:	6a21      	ldr	r1, [r4, #32]
 80041d2:	2300      	movs	r3, #0
 80041d4:	0028      	movs	r0, r5
 80041d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041d8:	47b8      	blx	r7
 80041da:	89a1      	ldrh	r1, [r4, #12]
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d106      	bne.n	80041ee <__sflush_r+0x6a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	2b1d      	cmp	r3, #29
 80041e4:	d831      	bhi.n	800424a <__sflush_r+0xc6>
 80041e6:	4a2c      	ldr	r2, [pc, #176]	; (8004298 <__sflush_r+0x114>)
 80041e8:	40da      	lsrs	r2, r3
 80041ea:	07d3      	lsls	r3, r2, #31
 80041ec:	d52d      	bpl.n	800424a <__sflush_r+0xc6>
 80041ee:	2300      	movs	r3, #0
 80041f0:	6063      	str	r3, [r4, #4]
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	04cb      	lsls	r3, r1, #19
 80041f8:	d505      	bpl.n	8004206 <__sflush_r+0x82>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d102      	bne.n	8004204 <__sflush_r+0x80>
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d100      	bne.n	8004206 <__sflush_r+0x82>
 8004204:	6560      	str	r0, [r4, #84]	; 0x54
 8004206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004208:	602e      	str	r6, [r5, #0]
 800420a:	2900      	cmp	r1, #0
 800420c:	d0c6      	beq.n	800419c <__sflush_r+0x18>
 800420e:	0023      	movs	r3, r4
 8004210:	3344      	adds	r3, #68	; 0x44
 8004212:	4299      	cmp	r1, r3
 8004214:	d002      	beq.n	800421c <__sflush_r+0x98>
 8004216:	0028      	movs	r0, r5
 8004218:	f000 fa10 	bl	800463c <_free_r>
 800421c:	2000      	movs	r0, #0
 800421e:	6360      	str	r0, [r4, #52]	; 0x34
 8004220:	e7bd      	b.n	800419e <__sflush_r+0x1a>
 8004222:	2301      	movs	r3, #1
 8004224:	0028      	movs	r0, r5
 8004226:	6a21      	ldr	r1, [r4, #32]
 8004228:	47b8      	blx	r7
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d1c5      	bne.n	80041ba <__sflush_r+0x36>
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0c2      	beq.n	80041ba <__sflush_r+0x36>
 8004234:	2b1d      	cmp	r3, #29
 8004236:	d001      	beq.n	800423c <__sflush_r+0xb8>
 8004238:	2b16      	cmp	r3, #22
 800423a:	d101      	bne.n	8004240 <__sflush_r+0xbc>
 800423c:	602e      	str	r6, [r5, #0]
 800423e:	e7ad      	b.n	800419c <__sflush_r+0x18>
 8004240:	2340      	movs	r3, #64	; 0x40
 8004242:	89a2      	ldrh	r2, [r4, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	81a3      	strh	r3, [r4, #12]
 8004248:	e7a9      	b.n	800419e <__sflush_r+0x1a>
 800424a:	2340      	movs	r3, #64	; 0x40
 800424c:	430b      	orrs	r3, r1
 800424e:	e7fa      	b.n	8004246 <__sflush_r+0xc2>
 8004250:	690f      	ldr	r7, [r1, #16]
 8004252:	2f00      	cmp	r7, #0
 8004254:	d0a2      	beq.n	800419c <__sflush_r+0x18>
 8004256:	680a      	ldr	r2, [r1, #0]
 8004258:	600f      	str	r7, [r1, #0]
 800425a:	1bd2      	subs	r2, r2, r7
 800425c:	9201      	str	r2, [sp, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	079b      	lsls	r3, r3, #30
 8004262:	d100      	bne.n	8004266 <__sflush_r+0xe2>
 8004264:	694a      	ldr	r2, [r1, #20]
 8004266:	60a2      	str	r2, [r4, #8]
 8004268:	9b01      	ldr	r3, [sp, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	dc00      	bgt.n	8004270 <__sflush_r+0xec>
 800426e:	e795      	b.n	800419c <__sflush_r+0x18>
 8004270:	003a      	movs	r2, r7
 8004272:	0028      	movs	r0, r5
 8004274:	9b01      	ldr	r3, [sp, #4]
 8004276:	6a21      	ldr	r1, [r4, #32]
 8004278:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800427a:	47b0      	blx	r6
 800427c:	2800      	cmp	r0, #0
 800427e:	dc06      	bgt.n	800428e <__sflush_r+0x10a>
 8004280:	2340      	movs	r3, #64	; 0x40
 8004282:	2001      	movs	r0, #1
 8004284:	89a2      	ldrh	r2, [r4, #12]
 8004286:	4240      	negs	r0, r0
 8004288:	4313      	orrs	r3, r2
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	e787      	b.n	800419e <__sflush_r+0x1a>
 800428e:	9b01      	ldr	r3, [sp, #4]
 8004290:	183f      	adds	r7, r7, r0
 8004292:	1a1b      	subs	r3, r3, r0
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	e7e7      	b.n	8004268 <__sflush_r+0xe4>
 8004298:	20400001 	.word	0x20400001

0800429c <_fflush_r>:
 800429c:	690b      	ldr	r3, [r1, #16]
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	0005      	movs	r5, r0
 80042a2:	000c      	movs	r4, r1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <_fflush_r+0x12>
 80042a8:	2500      	movs	r5, #0
 80042aa:	0028      	movs	r0, r5
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d004      	beq.n	80042bc <_fflush_r+0x20>
 80042b2:	6983      	ldr	r3, [r0, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <_fflush_r+0x20>
 80042b8:	f000 f892 	bl	80043e0 <__sinit>
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <_fflush_r+0x74>)
 80042be:	429c      	cmp	r4, r3
 80042c0:	d11b      	bne.n	80042fa <_fflush_r+0x5e>
 80042c2:	686c      	ldr	r4, [r5, #4]
 80042c4:	220c      	movs	r2, #12
 80042c6:	5ea3      	ldrsh	r3, [r4, r2]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ed      	beq.n	80042a8 <_fflush_r+0xc>
 80042cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042ce:	07d2      	lsls	r2, r2, #31
 80042d0:	d404      	bmi.n	80042dc <_fflush_r+0x40>
 80042d2:	059b      	lsls	r3, r3, #22
 80042d4:	d402      	bmi.n	80042dc <_fflush_r+0x40>
 80042d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042d8:	f000 f923 	bl	8004522 <__retarget_lock_acquire_recursive>
 80042dc:	0028      	movs	r0, r5
 80042de:	0021      	movs	r1, r4
 80042e0:	f7ff ff50 	bl	8004184 <__sflush_r>
 80042e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e6:	0005      	movs	r5, r0
 80042e8:	07db      	lsls	r3, r3, #31
 80042ea:	d4de      	bmi.n	80042aa <_fflush_r+0xe>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	059b      	lsls	r3, r3, #22
 80042f0:	d4db      	bmi.n	80042aa <_fflush_r+0xe>
 80042f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f4:	f000 f916 	bl	8004524 <__retarget_lock_release_recursive>
 80042f8:	e7d7      	b.n	80042aa <_fflush_r+0xe>
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <_fflush_r+0x78>)
 80042fc:	429c      	cmp	r4, r3
 80042fe:	d101      	bne.n	8004304 <_fflush_r+0x68>
 8004300:	68ac      	ldr	r4, [r5, #8]
 8004302:	e7df      	b.n	80042c4 <_fflush_r+0x28>
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <_fflush_r+0x7c>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d1dc      	bne.n	80042c4 <_fflush_r+0x28>
 800430a:	68ec      	ldr	r4, [r5, #12]
 800430c:	e7da      	b.n	80042c4 <_fflush_r+0x28>
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	080051b0 	.word	0x080051b0
 8004314:	080051d0 	.word	0x080051d0
 8004318:	08005190 	.word	0x08005190

0800431c <std>:
 800431c:	2300      	movs	r3, #0
 800431e:	b510      	push	{r4, lr}
 8004320:	0004      	movs	r4, r0
 8004322:	6003      	str	r3, [r0, #0]
 8004324:	6043      	str	r3, [r0, #4]
 8004326:	6083      	str	r3, [r0, #8]
 8004328:	8181      	strh	r1, [r0, #12]
 800432a:	6643      	str	r3, [r0, #100]	; 0x64
 800432c:	0019      	movs	r1, r3
 800432e:	81c2      	strh	r2, [r0, #14]
 8004330:	6103      	str	r3, [r0, #16]
 8004332:	6143      	str	r3, [r0, #20]
 8004334:	6183      	str	r3, [r0, #24]
 8004336:	2208      	movs	r2, #8
 8004338:	305c      	adds	r0, #92	; 0x5c
 800433a:	f7ff fb40 	bl	80039be <memset>
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <std+0x38>)
 8004340:	6263      	str	r3, [r4, #36]	; 0x24
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <std+0x3c>)
 8004344:	6224      	str	r4, [r4, #32]
 8004346:	62a3      	str	r3, [r4, #40]	; 0x28
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <std+0x40>)
 800434a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <std+0x44>)
 800434e:	6323      	str	r3, [r4, #48]	; 0x30
 8004350:	bd10      	pop	{r4, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	08004b55 	.word	0x08004b55
 8004358:	08004b7d 	.word	0x08004b7d
 800435c:	08004bb5 	.word	0x08004bb5
 8004360:	08004be1 	.word	0x08004be1

08004364 <_cleanup_r>:
 8004364:	b510      	push	{r4, lr}
 8004366:	4902      	ldr	r1, [pc, #8]	; (8004370 <_cleanup_r+0xc>)
 8004368:	f000 f8ba 	bl	80044e0 <_fwalk_reent>
 800436c:	bd10      	pop	{r4, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	0800429d 	.word	0x0800429d

08004374 <__sfmoreglue>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	2568      	movs	r5, #104	; 0x68
 8004378:	1e4a      	subs	r2, r1, #1
 800437a:	4355      	muls	r5, r2
 800437c:	000e      	movs	r6, r1
 800437e:	0029      	movs	r1, r5
 8004380:	3174      	adds	r1, #116	; 0x74
 8004382:	f000 f9a5 	bl	80046d0 <_malloc_r>
 8004386:	1e04      	subs	r4, r0, #0
 8004388:	d008      	beq.n	800439c <__sfmoreglue+0x28>
 800438a:	2100      	movs	r1, #0
 800438c:	002a      	movs	r2, r5
 800438e:	6001      	str	r1, [r0, #0]
 8004390:	6046      	str	r6, [r0, #4]
 8004392:	300c      	adds	r0, #12
 8004394:	60a0      	str	r0, [r4, #8]
 8004396:	3268      	adds	r2, #104	; 0x68
 8004398:	f7ff fb11 	bl	80039be <memset>
 800439c:	0020      	movs	r0, r4
 800439e:	bd70      	pop	{r4, r5, r6, pc}

080043a0 <__sfp_lock_acquire>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	4802      	ldr	r0, [pc, #8]	; (80043ac <__sfp_lock_acquire+0xc>)
 80043a4:	f000 f8bd 	bl	8004522 <__retarget_lock_acquire_recursive>
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	200006ac 	.word	0x200006ac

080043b0 <__sfp_lock_release>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4802      	ldr	r0, [pc, #8]	; (80043bc <__sfp_lock_release+0xc>)
 80043b4:	f000 f8b6 	bl	8004524 <__retarget_lock_release_recursive>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	200006ac 	.word	0x200006ac

080043c0 <__sinit_lock_acquire>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4802      	ldr	r0, [pc, #8]	; (80043cc <__sinit_lock_acquire+0xc>)
 80043c4:	f000 f8ad 	bl	8004522 <__retarget_lock_acquire_recursive>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	200006a7 	.word	0x200006a7

080043d0 <__sinit_lock_release>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	4802      	ldr	r0, [pc, #8]	; (80043dc <__sinit_lock_release+0xc>)
 80043d4:	f000 f8a6 	bl	8004524 <__retarget_lock_release_recursive>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	200006a7 	.word	0x200006a7

080043e0 <__sinit>:
 80043e0:	b513      	push	{r0, r1, r4, lr}
 80043e2:	0004      	movs	r4, r0
 80043e4:	f7ff ffec 	bl	80043c0 <__sinit_lock_acquire>
 80043e8:	69a3      	ldr	r3, [r4, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <__sinit+0x14>
 80043ee:	f7ff ffef 	bl	80043d0 <__sinit_lock_release>
 80043f2:	bd13      	pop	{r0, r1, r4, pc}
 80043f4:	64a3      	str	r3, [r4, #72]	; 0x48
 80043f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80043f8:	6523      	str	r3, [r4, #80]	; 0x50
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <__sinit+0x68>)
 80043fc:	4a13      	ldr	r2, [pc, #76]	; (800444c <__sinit+0x6c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	62a2      	str	r2, [r4, #40]	; 0x28
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	42a3      	cmp	r3, r4
 8004406:	d101      	bne.n	800440c <__sinit+0x2c>
 8004408:	2301      	movs	r3, #1
 800440a:	61a3      	str	r3, [r4, #24]
 800440c:	0020      	movs	r0, r4
 800440e:	f000 f81f 	bl	8004450 <__sfp>
 8004412:	6060      	str	r0, [r4, #4]
 8004414:	0020      	movs	r0, r4
 8004416:	f000 f81b 	bl	8004450 <__sfp>
 800441a:	60a0      	str	r0, [r4, #8]
 800441c:	0020      	movs	r0, r4
 800441e:	f000 f817 	bl	8004450 <__sfp>
 8004422:	2200      	movs	r2, #0
 8004424:	2104      	movs	r1, #4
 8004426:	60e0      	str	r0, [r4, #12]
 8004428:	6860      	ldr	r0, [r4, #4]
 800442a:	f7ff ff77 	bl	800431c <std>
 800442e:	2201      	movs	r2, #1
 8004430:	2109      	movs	r1, #9
 8004432:	68a0      	ldr	r0, [r4, #8]
 8004434:	f7ff ff72 	bl	800431c <std>
 8004438:	2202      	movs	r2, #2
 800443a:	2112      	movs	r1, #18
 800443c:	68e0      	ldr	r0, [r4, #12]
 800443e:	f7ff ff6d 	bl	800431c <std>
 8004442:	2301      	movs	r3, #1
 8004444:	61a3      	str	r3, [r4, #24]
 8004446:	e7d2      	b.n	80043ee <__sinit+0xe>
 8004448:	08005158 	.word	0x08005158
 800444c:	08004365 	.word	0x08004365

08004450 <__sfp>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	0007      	movs	r7, r0
 8004454:	f7ff ffa4 	bl	80043a0 <__sfp_lock_acquire>
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <__sfp+0x88>)
 800445a:	681e      	ldr	r6, [r3, #0]
 800445c:	69b3      	ldr	r3, [r6, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <__sfp+0x18>
 8004462:	0030      	movs	r0, r6
 8004464:	f7ff ffbc 	bl	80043e0 <__sinit>
 8004468:	3648      	adds	r6, #72	; 0x48
 800446a:	68b4      	ldr	r4, [r6, #8]
 800446c:	6873      	ldr	r3, [r6, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	d504      	bpl.n	800447c <__sfp+0x2c>
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d022      	beq.n	80044be <__sfp+0x6e>
 8004478:	6836      	ldr	r6, [r6, #0]
 800447a:	e7f6      	b.n	800446a <__sfp+0x1a>
 800447c:	220c      	movs	r2, #12
 800447e:	5ea5      	ldrsh	r5, [r4, r2]
 8004480:	2d00      	cmp	r5, #0
 8004482:	d11a      	bne.n	80044ba <__sfp+0x6a>
 8004484:	0020      	movs	r0, r4
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <__sfp+0x8c>)
 8004488:	3058      	adds	r0, #88	; 0x58
 800448a:	60e3      	str	r3, [r4, #12]
 800448c:	6665      	str	r5, [r4, #100]	; 0x64
 800448e:	f000 f847 	bl	8004520 <__retarget_lock_init_recursive>
 8004492:	f7ff ff8d 	bl	80043b0 <__sfp_lock_release>
 8004496:	0020      	movs	r0, r4
 8004498:	2208      	movs	r2, #8
 800449a:	0029      	movs	r1, r5
 800449c:	6025      	str	r5, [r4, #0]
 800449e:	60a5      	str	r5, [r4, #8]
 80044a0:	6065      	str	r5, [r4, #4]
 80044a2:	6125      	str	r5, [r4, #16]
 80044a4:	6165      	str	r5, [r4, #20]
 80044a6:	61a5      	str	r5, [r4, #24]
 80044a8:	305c      	adds	r0, #92	; 0x5c
 80044aa:	f7ff fa88 	bl	80039be <memset>
 80044ae:	6365      	str	r5, [r4, #52]	; 0x34
 80044b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80044b2:	64a5      	str	r5, [r4, #72]	; 0x48
 80044b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80044b6:	0020      	movs	r0, r4
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ba:	3468      	adds	r4, #104	; 0x68
 80044bc:	e7d7      	b.n	800446e <__sfp+0x1e>
 80044be:	2104      	movs	r1, #4
 80044c0:	0038      	movs	r0, r7
 80044c2:	f7ff ff57 	bl	8004374 <__sfmoreglue>
 80044c6:	1e04      	subs	r4, r0, #0
 80044c8:	6030      	str	r0, [r6, #0]
 80044ca:	d1d5      	bne.n	8004478 <__sfp+0x28>
 80044cc:	f7ff ff70 	bl	80043b0 <__sfp_lock_release>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	e7ef      	b.n	80044b6 <__sfp+0x66>
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	08005158 	.word	0x08005158
 80044dc:	ffff0001 	.word	0xffff0001

080044e0 <_fwalk_reent>:
 80044e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044e2:	0004      	movs	r4, r0
 80044e4:	0006      	movs	r6, r0
 80044e6:	2700      	movs	r7, #0
 80044e8:	9101      	str	r1, [sp, #4]
 80044ea:	3448      	adds	r4, #72	; 0x48
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	68a5      	ldr	r5, [r4, #8]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	9b00      	ldr	r3, [sp, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	d504      	bpl.n	8004504 <_fwalk_reent+0x24>
 80044fa:	6824      	ldr	r4, [r4, #0]
 80044fc:	2c00      	cmp	r4, #0
 80044fe:	d1f5      	bne.n	80044ec <_fwalk_reent+0xc>
 8004500:	0038      	movs	r0, r7
 8004502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004504:	89ab      	ldrh	r3, [r5, #12]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d908      	bls.n	800451c <_fwalk_reent+0x3c>
 800450a:	220e      	movs	r2, #14
 800450c:	5eab      	ldrsh	r3, [r5, r2]
 800450e:	3301      	adds	r3, #1
 8004510:	d004      	beq.n	800451c <_fwalk_reent+0x3c>
 8004512:	0029      	movs	r1, r5
 8004514:	0030      	movs	r0, r6
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	4798      	blx	r3
 800451a:	4307      	orrs	r7, r0
 800451c:	3568      	adds	r5, #104	; 0x68
 800451e:	e7e8      	b.n	80044f2 <_fwalk_reent+0x12>

08004520 <__retarget_lock_init_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_acquire_recursive>:
 8004522:	4770      	bx	lr

08004524 <__retarget_lock_release_recursive>:
 8004524:	4770      	bx	lr
	...

08004528 <__swhatbuf_r>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	000e      	movs	r6, r1
 800452c:	001d      	movs	r5, r3
 800452e:	230e      	movs	r3, #14
 8004530:	5ec9      	ldrsh	r1, [r1, r3]
 8004532:	0014      	movs	r4, r2
 8004534:	b096      	sub	sp, #88	; 0x58
 8004536:	2900      	cmp	r1, #0
 8004538:	da07      	bge.n	800454a <__swhatbuf_r+0x22>
 800453a:	2300      	movs	r3, #0
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	89b3      	ldrh	r3, [r6, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	d411      	bmi.n	8004568 <__swhatbuf_r+0x40>
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	e00f      	b.n	800456a <__swhatbuf_r+0x42>
 800454a:	466a      	mov	r2, sp
 800454c:	f000 fb74 	bl	8004c38 <_fstat_r>
 8004550:	2800      	cmp	r0, #0
 8004552:	dbf2      	blt.n	800453a <__swhatbuf_r+0x12>
 8004554:	23f0      	movs	r3, #240	; 0xf0
 8004556:	9901      	ldr	r1, [sp, #4]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	4019      	ands	r1, r3
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <__swhatbuf_r+0x4c>)
 800455e:	18c9      	adds	r1, r1, r3
 8004560:	424b      	negs	r3, r1
 8004562:	4159      	adcs	r1, r3
 8004564:	6029      	str	r1, [r5, #0]
 8004566:	e7ed      	b.n	8004544 <__swhatbuf_r+0x1c>
 8004568:	2340      	movs	r3, #64	; 0x40
 800456a:	2000      	movs	r0, #0
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	b016      	add	sp, #88	; 0x58
 8004570:	bd70      	pop	{r4, r5, r6, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	ffffe000 	.word	0xffffe000

08004578 <__smakebuf_r>:
 8004578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457a:	2602      	movs	r6, #2
 800457c:	898b      	ldrh	r3, [r1, #12]
 800457e:	0005      	movs	r5, r0
 8004580:	000c      	movs	r4, r1
 8004582:	4233      	tst	r3, r6
 8004584:	d006      	beq.n	8004594 <__smakebuf_r+0x1c>
 8004586:	0023      	movs	r3, r4
 8004588:	3347      	adds	r3, #71	; 0x47
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	2301      	movs	r3, #1
 8004590:	6163      	str	r3, [r4, #20]
 8004592:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004594:	466a      	mov	r2, sp
 8004596:	ab01      	add	r3, sp, #4
 8004598:	f7ff ffc6 	bl	8004528 <__swhatbuf_r>
 800459c:	9900      	ldr	r1, [sp, #0]
 800459e:	0007      	movs	r7, r0
 80045a0:	0028      	movs	r0, r5
 80045a2:	f000 f895 	bl	80046d0 <_malloc_r>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d108      	bne.n	80045bc <__smakebuf_r+0x44>
 80045aa:	220c      	movs	r2, #12
 80045ac:	5ea3      	ldrsh	r3, [r4, r2]
 80045ae:	059a      	lsls	r2, r3, #22
 80045b0:	d4ef      	bmi.n	8004592 <__smakebuf_r+0x1a>
 80045b2:	2203      	movs	r2, #3
 80045b4:	4393      	bics	r3, r2
 80045b6:	431e      	orrs	r6, r3
 80045b8:	81a6      	strh	r6, [r4, #12]
 80045ba:	e7e4      	b.n	8004586 <__smakebuf_r+0xe>
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <__smakebuf_r+0x84>)
 80045be:	62ab      	str	r3, [r5, #40]	; 0x28
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	89a2      	ldrh	r2, [r4, #12]
 80045c4:	6020      	str	r0, [r4, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	9b00      	ldr	r3, [sp, #0]
 80045cc:	6120      	str	r0, [r4, #16]
 80045ce:	6163      	str	r3, [r4, #20]
 80045d0:	9b01      	ldr	r3, [sp, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <__smakebuf_r+0x7a>
 80045d6:	0028      	movs	r0, r5
 80045d8:	230e      	movs	r3, #14
 80045da:	5ee1      	ldrsh	r1, [r4, r3]
 80045dc:	f000 fb3e 	bl	8004c5c <_isatty_r>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d006      	beq.n	80045f2 <__smakebuf_r+0x7a>
 80045e4:	2203      	movs	r2, #3
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	4393      	bics	r3, r2
 80045ea:	001a      	movs	r2, r3
 80045ec:	2301      	movs	r3, #1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	81a3      	strh	r3, [r4, #12]
 80045f2:	89a0      	ldrh	r0, [r4, #12]
 80045f4:	4307      	orrs	r7, r0
 80045f6:	81a7      	strh	r7, [r4, #12]
 80045f8:	e7cb      	b.n	8004592 <__smakebuf_r+0x1a>
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	08004365 	.word	0x08004365

08004600 <memchr>:
 8004600:	b2c9      	uxtb	r1, r1
 8004602:	1882      	adds	r2, r0, r2
 8004604:	4290      	cmp	r0, r2
 8004606:	d101      	bne.n	800460c <memchr+0xc>
 8004608:	2000      	movs	r0, #0
 800460a:	4770      	bx	lr
 800460c:	7803      	ldrb	r3, [r0, #0]
 800460e:	428b      	cmp	r3, r1
 8004610:	d0fb      	beq.n	800460a <memchr+0xa>
 8004612:	3001      	adds	r0, #1
 8004614:	e7f6      	b.n	8004604 <memchr+0x4>

08004616 <memmove>:
 8004616:	b510      	push	{r4, lr}
 8004618:	4288      	cmp	r0, r1
 800461a:	d902      	bls.n	8004622 <memmove+0xc>
 800461c:	188b      	adds	r3, r1, r2
 800461e:	4298      	cmp	r0, r3
 8004620:	d303      	bcc.n	800462a <memmove+0x14>
 8004622:	2300      	movs	r3, #0
 8004624:	e007      	b.n	8004636 <memmove+0x20>
 8004626:	5c8b      	ldrb	r3, [r1, r2]
 8004628:	5483      	strb	r3, [r0, r2]
 800462a:	3a01      	subs	r2, #1
 800462c:	d2fb      	bcs.n	8004626 <memmove+0x10>
 800462e:	bd10      	pop	{r4, pc}
 8004630:	5ccc      	ldrb	r4, [r1, r3]
 8004632:	54c4      	strb	r4, [r0, r3]
 8004634:	3301      	adds	r3, #1
 8004636:	429a      	cmp	r2, r3
 8004638:	d1fa      	bne.n	8004630 <memmove+0x1a>
 800463a:	e7f8      	b.n	800462e <memmove+0x18>

0800463c <_free_r>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	0005      	movs	r5, r0
 8004640:	2900      	cmp	r1, #0
 8004642:	d010      	beq.n	8004666 <_free_r+0x2a>
 8004644:	1f0c      	subs	r4, r1, #4
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da00      	bge.n	800464e <_free_r+0x12>
 800464c:	18e4      	adds	r4, r4, r3
 800464e:	0028      	movs	r0, r5
 8004650:	f000 fb2a 	bl	8004ca8 <__malloc_lock>
 8004654:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <_free_r+0x90>)
 8004656:	6813      	ldr	r3, [r2, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <_free_r+0x2c>
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	6014      	str	r4, [r2, #0]
 8004660:	0028      	movs	r0, r5
 8004662:	f000 fb29 	bl	8004cb8 <__malloc_unlock>
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	42a3      	cmp	r3, r4
 800466a:	d908      	bls.n	800467e <_free_r+0x42>
 800466c:	6821      	ldr	r1, [r4, #0]
 800466e:	1860      	adds	r0, r4, r1
 8004670:	4283      	cmp	r3, r0
 8004672:	d1f3      	bne.n	800465c <_free_r+0x20>
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	1841      	adds	r1, r0, r1
 800467a:	6021      	str	r1, [r4, #0]
 800467c:	e7ee      	b.n	800465c <_free_r+0x20>
 800467e:	001a      	movs	r2, r3
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <_free_r+0x4e>
 8004686:	42a3      	cmp	r3, r4
 8004688:	d9f9      	bls.n	800467e <_free_r+0x42>
 800468a:	6811      	ldr	r1, [r2, #0]
 800468c:	1850      	adds	r0, r2, r1
 800468e:	42a0      	cmp	r0, r4
 8004690:	d10b      	bne.n	80046aa <_free_r+0x6e>
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	1809      	adds	r1, r1, r0
 8004696:	1850      	adds	r0, r2, r1
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	4283      	cmp	r3, r0
 800469c:	d1e0      	bne.n	8004660 <_free_r+0x24>
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	1841      	adds	r1, r0, r1
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	6053      	str	r3, [r2, #4]
 80046a8:	e7da      	b.n	8004660 <_free_r+0x24>
 80046aa:	42a0      	cmp	r0, r4
 80046ac:	d902      	bls.n	80046b4 <_free_r+0x78>
 80046ae:	230c      	movs	r3, #12
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	e7d5      	b.n	8004660 <_free_r+0x24>
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	1860      	adds	r0, r4, r1
 80046b8:	4283      	cmp	r3, r0
 80046ba:	d103      	bne.n	80046c4 <_free_r+0x88>
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1841      	adds	r1, r0, r1
 80046c2:	6021      	str	r1, [r4, #0]
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	6054      	str	r4, [r2, #4]
 80046c8:	e7ca      	b.n	8004660 <_free_r+0x24>
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	200005a0 	.word	0x200005a0

080046d0 <_malloc_r>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	2303      	movs	r3, #3
 80046d4:	1ccd      	adds	r5, r1, #3
 80046d6:	439d      	bics	r5, r3
 80046d8:	3508      	adds	r5, #8
 80046da:	0006      	movs	r6, r0
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	d21f      	bcs.n	8004720 <_malloc_r+0x50>
 80046e0:	250c      	movs	r5, #12
 80046e2:	42a9      	cmp	r1, r5
 80046e4:	d81e      	bhi.n	8004724 <_malloc_r+0x54>
 80046e6:	0030      	movs	r0, r6
 80046e8:	f000 fade 	bl	8004ca8 <__malloc_lock>
 80046ec:	4925      	ldr	r1, [pc, #148]	; (8004784 <_malloc_r+0xb4>)
 80046ee:	680a      	ldr	r2, [r1, #0]
 80046f0:	0014      	movs	r4, r2
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d11a      	bne.n	800472c <_malloc_r+0x5c>
 80046f6:	4f24      	ldr	r7, [pc, #144]	; (8004788 <_malloc_r+0xb8>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <_malloc_r+0x38>
 80046fe:	0021      	movs	r1, r4
 8004700:	0030      	movs	r0, r6
 8004702:	f000 f9cb 	bl	8004a9c <_sbrk_r>
 8004706:	6038      	str	r0, [r7, #0]
 8004708:	0029      	movs	r1, r5
 800470a:	0030      	movs	r0, r6
 800470c:	f000 f9c6 	bl	8004a9c <_sbrk_r>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d12b      	bne.n	800476c <_malloc_r+0x9c>
 8004714:	230c      	movs	r3, #12
 8004716:	0030      	movs	r0, r6
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	f000 facd 	bl	8004cb8 <__malloc_unlock>
 800471e:	e003      	b.n	8004728 <_malloc_r+0x58>
 8004720:	2d00      	cmp	r5, #0
 8004722:	dade      	bge.n	80046e2 <_malloc_r+0x12>
 8004724:	230c      	movs	r3, #12
 8004726:	6033      	str	r3, [r6, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	1b5b      	subs	r3, r3, r5
 8004730:	d419      	bmi.n	8004766 <_malloc_r+0x96>
 8004732:	2b0b      	cmp	r3, #11
 8004734:	d903      	bls.n	800473e <_malloc_r+0x6e>
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	18e4      	adds	r4, r4, r3
 800473a:	6025      	str	r5, [r4, #0]
 800473c:	e003      	b.n	8004746 <_malloc_r+0x76>
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	42a2      	cmp	r2, r4
 8004742:	d10e      	bne.n	8004762 <_malloc_r+0x92>
 8004744:	600b      	str	r3, [r1, #0]
 8004746:	0030      	movs	r0, r6
 8004748:	f000 fab6 	bl	8004cb8 <__malloc_unlock>
 800474c:	0020      	movs	r0, r4
 800474e:	2207      	movs	r2, #7
 8004750:	300b      	adds	r0, #11
 8004752:	1d23      	adds	r3, r4, #4
 8004754:	4390      	bics	r0, r2
 8004756:	1ac2      	subs	r2, r0, r3
 8004758:	4298      	cmp	r0, r3
 800475a:	d0e6      	beq.n	800472a <_malloc_r+0x5a>
 800475c:	1a1b      	subs	r3, r3, r0
 800475e:	50a3      	str	r3, [r4, r2]
 8004760:	e7e3      	b.n	800472a <_malloc_r+0x5a>
 8004762:	6053      	str	r3, [r2, #4]
 8004764:	e7ef      	b.n	8004746 <_malloc_r+0x76>
 8004766:	0022      	movs	r2, r4
 8004768:	6864      	ldr	r4, [r4, #4]
 800476a:	e7c2      	b.n	80046f2 <_malloc_r+0x22>
 800476c:	2303      	movs	r3, #3
 800476e:	1cc4      	adds	r4, r0, #3
 8004770:	439c      	bics	r4, r3
 8004772:	42a0      	cmp	r0, r4
 8004774:	d0e1      	beq.n	800473a <_malloc_r+0x6a>
 8004776:	1a21      	subs	r1, r4, r0
 8004778:	0030      	movs	r0, r6
 800477a:	f000 f98f 	bl	8004a9c <_sbrk_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d1db      	bne.n	800473a <_malloc_r+0x6a>
 8004782:	e7c7      	b.n	8004714 <_malloc_r+0x44>
 8004784:	200005a0 	.word	0x200005a0
 8004788:	200005a4 	.word	0x200005a4

0800478c <_realloc_r>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	0007      	movs	r7, r0
 8004790:	000d      	movs	r5, r1
 8004792:	0016      	movs	r6, r2
 8004794:	2900      	cmp	r1, #0
 8004796:	d105      	bne.n	80047a4 <_realloc_r+0x18>
 8004798:	0011      	movs	r1, r2
 800479a:	f7ff ff99 	bl	80046d0 <_malloc_r>
 800479e:	0004      	movs	r4, r0
 80047a0:	0020      	movs	r0, r4
 80047a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	d103      	bne.n	80047b0 <_realloc_r+0x24>
 80047a8:	f7ff ff48 	bl	800463c <_free_r>
 80047ac:	0034      	movs	r4, r6
 80047ae:	e7f7      	b.n	80047a0 <_realloc_r+0x14>
 80047b0:	f000 fa8a 	bl	8004cc8 <_malloc_usable_size_r>
 80047b4:	002c      	movs	r4, r5
 80047b6:	42b0      	cmp	r0, r6
 80047b8:	d2f2      	bcs.n	80047a0 <_realloc_r+0x14>
 80047ba:	0031      	movs	r1, r6
 80047bc:	0038      	movs	r0, r7
 80047be:	f7ff ff87 	bl	80046d0 <_malloc_r>
 80047c2:	1e04      	subs	r4, r0, #0
 80047c4:	d0ec      	beq.n	80047a0 <_realloc_r+0x14>
 80047c6:	0029      	movs	r1, r5
 80047c8:	0032      	movs	r2, r6
 80047ca:	f7ff f8ef 	bl	80039ac <memcpy>
 80047ce:	0029      	movs	r1, r5
 80047d0:	0038      	movs	r0, r7
 80047d2:	f7ff ff33 	bl	800463c <_free_r>
 80047d6:	e7e3      	b.n	80047a0 <_realloc_r+0x14>

080047d8 <__ssputs_r>:
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	688e      	ldr	r6, [r1, #8]
 80047dc:	b085      	sub	sp, #20
 80047de:	0007      	movs	r7, r0
 80047e0:	000c      	movs	r4, r1
 80047e2:	9203      	str	r2, [sp, #12]
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	429e      	cmp	r6, r3
 80047e8:	d83c      	bhi.n	8004864 <__ssputs_r+0x8c>
 80047ea:	2390      	movs	r3, #144	; 0x90
 80047ec:	898a      	ldrh	r2, [r1, #12]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	421a      	tst	r2, r3
 80047f2:	d034      	beq.n	800485e <__ssputs_r+0x86>
 80047f4:	2503      	movs	r5, #3
 80047f6:	6909      	ldr	r1, [r1, #16]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	1a5b      	subs	r3, r3, r1
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	6963      	ldr	r3, [r4, #20]
 8004800:	9802      	ldr	r0, [sp, #8]
 8004802:	435d      	muls	r5, r3
 8004804:	0feb      	lsrs	r3, r5, #31
 8004806:	195d      	adds	r5, r3, r5
 8004808:	9b01      	ldr	r3, [sp, #4]
 800480a:	106d      	asrs	r5, r5, #1
 800480c:	3301      	adds	r3, #1
 800480e:	181b      	adds	r3, r3, r0
 8004810:	42ab      	cmp	r3, r5
 8004812:	d900      	bls.n	8004816 <__ssputs_r+0x3e>
 8004814:	001d      	movs	r5, r3
 8004816:	0553      	lsls	r3, r2, #21
 8004818:	d532      	bpl.n	8004880 <__ssputs_r+0xa8>
 800481a:	0029      	movs	r1, r5
 800481c:	0038      	movs	r0, r7
 800481e:	f7ff ff57 	bl	80046d0 <_malloc_r>
 8004822:	1e06      	subs	r6, r0, #0
 8004824:	d109      	bne.n	800483a <__ssputs_r+0x62>
 8004826:	230c      	movs	r3, #12
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	2001      	movs	r0, #1
 800482e:	89a2      	ldrh	r2, [r4, #12]
 8004830:	4240      	negs	r0, r0
 8004832:	4313      	orrs	r3, r2
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	b005      	add	sp, #20
 8004838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800483a:	9a02      	ldr	r2, [sp, #8]
 800483c:	6921      	ldr	r1, [r4, #16]
 800483e:	f7ff f8b5 	bl	80039ac <memcpy>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <__ssputs_r+0xc0>)
 8004846:	401a      	ands	r2, r3
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	4313      	orrs	r3, r2
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	9b02      	ldr	r3, [sp, #8]
 8004850:	6126      	str	r6, [r4, #16]
 8004852:	18f6      	adds	r6, r6, r3
 8004854:	6026      	str	r6, [r4, #0]
 8004856:	6165      	str	r5, [r4, #20]
 8004858:	9e01      	ldr	r6, [sp, #4]
 800485a:	1aed      	subs	r5, r5, r3
 800485c:	60a5      	str	r5, [r4, #8]
 800485e:	9b01      	ldr	r3, [sp, #4]
 8004860:	429e      	cmp	r6, r3
 8004862:	d900      	bls.n	8004866 <__ssputs_r+0x8e>
 8004864:	9e01      	ldr	r6, [sp, #4]
 8004866:	0032      	movs	r2, r6
 8004868:	9903      	ldr	r1, [sp, #12]
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	f7ff fed3 	bl	8004616 <memmove>
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	2000      	movs	r0, #0
 8004874:	1b9b      	subs	r3, r3, r6
 8004876:	60a3      	str	r3, [r4, #8]
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	199e      	adds	r6, r3, r6
 800487c:	6026      	str	r6, [r4, #0]
 800487e:	e7da      	b.n	8004836 <__ssputs_r+0x5e>
 8004880:	002a      	movs	r2, r5
 8004882:	0038      	movs	r0, r7
 8004884:	f7ff ff82 	bl	800478c <_realloc_r>
 8004888:	1e06      	subs	r6, r0, #0
 800488a:	d1e0      	bne.n	800484e <__ssputs_r+0x76>
 800488c:	0038      	movs	r0, r7
 800488e:	6921      	ldr	r1, [r4, #16]
 8004890:	f7ff fed4 	bl	800463c <_free_r>
 8004894:	e7c7      	b.n	8004826 <__ssputs_r+0x4e>
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	fffffb7f 	.word	0xfffffb7f

0800489c <_svfiprintf_r>:
 800489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489e:	b0a1      	sub	sp, #132	; 0x84
 80048a0:	9003      	str	r0, [sp, #12]
 80048a2:	001d      	movs	r5, r3
 80048a4:	898b      	ldrh	r3, [r1, #12]
 80048a6:	000f      	movs	r7, r1
 80048a8:	0016      	movs	r6, r2
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	d511      	bpl.n	80048d2 <_svfiprintf_r+0x36>
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10e      	bne.n	80048d2 <_svfiprintf_r+0x36>
 80048b4:	2140      	movs	r1, #64	; 0x40
 80048b6:	f7ff ff0b 	bl	80046d0 <_malloc_r>
 80048ba:	6038      	str	r0, [r7, #0]
 80048bc:	6138      	str	r0, [r7, #16]
 80048be:	2800      	cmp	r0, #0
 80048c0:	d105      	bne.n	80048ce <_svfiprintf_r+0x32>
 80048c2:	230c      	movs	r3, #12
 80048c4:	9a03      	ldr	r2, [sp, #12]
 80048c6:	3801      	subs	r0, #1
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	b021      	add	sp, #132	; 0x84
 80048cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ce:	2340      	movs	r3, #64	; 0x40
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	2300      	movs	r3, #0
 80048d4:	ac08      	add	r4, sp, #32
 80048d6:	6163      	str	r3, [r4, #20]
 80048d8:	3320      	adds	r3, #32
 80048da:	7663      	strb	r3, [r4, #25]
 80048dc:	3310      	adds	r3, #16
 80048de:	76a3      	strb	r3, [r4, #26]
 80048e0:	9507      	str	r5, [sp, #28]
 80048e2:	0035      	movs	r5, r6
 80048e4:	782b      	ldrb	r3, [r5, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <_svfiprintf_r+0x52>
 80048ea:	2b25      	cmp	r3, #37	; 0x25
 80048ec:	d147      	bne.n	800497e <_svfiprintf_r+0xe2>
 80048ee:	1bab      	subs	r3, r5, r6
 80048f0:	9305      	str	r3, [sp, #20]
 80048f2:	42b5      	cmp	r5, r6
 80048f4:	d00c      	beq.n	8004910 <_svfiprintf_r+0x74>
 80048f6:	0032      	movs	r2, r6
 80048f8:	0039      	movs	r1, r7
 80048fa:	9803      	ldr	r0, [sp, #12]
 80048fc:	f7ff ff6c 	bl	80047d8 <__ssputs_r>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d100      	bne.n	8004906 <_svfiprintf_r+0x6a>
 8004904:	e0ae      	b.n	8004a64 <_svfiprintf_r+0x1c8>
 8004906:	6962      	ldr	r2, [r4, #20]
 8004908:	9b05      	ldr	r3, [sp, #20]
 800490a:	4694      	mov	ip, r2
 800490c:	4463      	add	r3, ip
 800490e:	6163      	str	r3, [r4, #20]
 8004910:	782b      	ldrb	r3, [r5, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d100      	bne.n	8004918 <_svfiprintf_r+0x7c>
 8004916:	e0a5      	b.n	8004a64 <_svfiprintf_r+0x1c8>
 8004918:	2201      	movs	r2, #1
 800491a:	2300      	movs	r3, #0
 800491c:	4252      	negs	r2, r2
 800491e:	6062      	str	r2, [r4, #4]
 8004920:	a904      	add	r1, sp, #16
 8004922:	3254      	adds	r2, #84	; 0x54
 8004924:	1852      	adds	r2, r2, r1
 8004926:	1c6e      	adds	r6, r5, #1
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	60e3      	str	r3, [r4, #12]
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	7013      	strb	r3, [r2, #0]
 8004930:	65a3      	str	r3, [r4, #88]	; 0x58
 8004932:	2205      	movs	r2, #5
 8004934:	7831      	ldrb	r1, [r6, #0]
 8004936:	4854      	ldr	r0, [pc, #336]	; (8004a88 <_svfiprintf_r+0x1ec>)
 8004938:	f7ff fe62 	bl	8004600 <memchr>
 800493c:	1c75      	adds	r5, r6, #1
 800493e:	2800      	cmp	r0, #0
 8004940:	d11f      	bne.n	8004982 <_svfiprintf_r+0xe6>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	06d3      	lsls	r3, r2, #27
 8004946:	d504      	bpl.n	8004952 <_svfiprintf_r+0xb6>
 8004948:	2353      	movs	r3, #83	; 0x53
 800494a:	a904      	add	r1, sp, #16
 800494c:	185b      	adds	r3, r3, r1
 800494e:	2120      	movs	r1, #32
 8004950:	7019      	strb	r1, [r3, #0]
 8004952:	0713      	lsls	r3, r2, #28
 8004954:	d504      	bpl.n	8004960 <_svfiprintf_r+0xc4>
 8004956:	2353      	movs	r3, #83	; 0x53
 8004958:	a904      	add	r1, sp, #16
 800495a:	185b      	adds	r3, r3, r1
 800495c:	212b      	movs	r1, #43	; 0x2b
 800495e:	7019      	strb	r1, [r3, #0]
 8004960:	7833      	ldrb	r3, [r6, #0]
 8004962:	2b2a      	cmp	r3, #42	; 0x2a
 8004964:	d016      	beq.n	8004994 <_svfiprintf_r+0xf8>
 8004966:	0035      	movs	r5, r6
 8004968:	2100      	movs	r1, #0
 800496a:	200a      	movs	r0, #10
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	782a      	ldrb	r2, [r5, #0]
 8004970:	1c6e      	adds	r6, r5, #1
 8004972:	3a30      	subs	r2, #48	; 0x30
 8004974:	2a09      	cmp	r2, #9
 8004976:	d94e      	bls.n	8004a16 <_svfiprintf_r+0x17a>
 8004978:	2900      	cmp	r1, #0
 800497a:	d111      	bne.n	80049a0 <_svfiprintf_r+0x104>
 800497c:	e017      	b.n	80049ae <_svfiprintf_r+0x112>
 800497e:	3501      	adds	r5, #1
 8004980:	e7b0      	b.n	80048e4 <_svfiprintf_r+0x48>
 8004982:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <_svfiprintf_r+0x1ec>)
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	1ac0      	subs	r0, r0, r3
 8004988:	2301      	movs	r3, #1
 800498a:	4083      	lsls	r3, r0
 800498c:	4313      	orrs	r3, r2
 800498e:	002e      	movs	r6, r5
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	e7ce      	b.n	8004932 <_svfiprintf_r+0x96>
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	1d19      	adds	r1, r3, #4
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	9107      	str	r1, [sp, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	db01      	blt.n	80049a4 <_svfiprintf_r+0x108>
 80049a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049a2:	e004      	b.n	80049ae <_svfiprintf_r+0x112>
 80049a4:	425b      	negs	r3, r3
 80049a6:	60e3      	str	r3, [r4, #12]
 80049a8:	2302      	movs	r3, #2
 80049aa:	4313      	orrs	r3, r2
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	782b      	ldrb	r3, [r5, #0]
 80049b0:	2b2e      	cmp	r3, #46	; 0x2e
 80049b2:	d10a      	bne.n	80049ca <_svfiprintf_r+0x12e>
 80049b4:	786b      	ldrb	r3, [r5, #1]
 80049b6:	2b2a      	cmp	r3, #42	; 0x2a
 80049b8:	d135      	bne.n	8004a26 <_svfiprintf_r+0x18a>
 80049ba:	9b07      	ldr	r3, [sp, #28]
 80049bc:	3502      	adds	r5, #2
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	9207      	str	r2, [sp, #28]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	db2b      	blt.n	8004a20 <_svfiprintf_r+0x184>
 80049c8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ca:	4e30      	ldr	r6, [pc, #192]	; (8004a8c <_svfiprintf_r+0x1f0>)
 80049cc:	2203      	movs	r2, #3
 80049ce:	0030      	movs	r0, r6
 80049d0:	7829      	ldrb	r1, [r5, #0]
 80049d2:	f7ff fe15 	bl	8004600 <memchr>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d006      	beq.n	80049e8 <_svfiprintf_r+0x14c>
 80049da:	2340      	movs	r3, #64	; 0x40
 80049dc:	1b80      	subs	r0, r0, r6
 80049de:	4083      	lsls	r3, r0
 80049e0:	6822      	ldr	r2, [r4, #0]
 80049e2:	3501      	adds	r5, #1
 80049e4:	4313      	orrs	r3, r2
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	7829      	ldrb	r1, [r5, #0]
 80049ea:	2206      	movs	r2, #6
 80049ec:	4828      	ldr	r0, [pc, #160]	; (8004a90 <_svfiprintf_r+0x1f4>)
 80049ee:	1c6e      	adds	r6, r5, #1
 80049f0:	7621      	strb	r1, [r4, #24]
 80049f2:	f7ff fe05 	bl	8004600 <memchr>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d03c      	beq.n	8004a74 <_svfiprintf_r+0x1d8>
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <_svfiprintf_r+0x1f8>)
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d125      	bne.n	8004a4c <_svfiprintf_r+0x1b0>
 8004a00:	2207      	movs	r2, #7
 8004a02:	9b07      	ldr	r3, [sp, #28]
 8004a04:	3307      	adds	r3, #7
 8004a06:	4393      	bics	r3, r2
 8004a08:	3308      	adds	r3, #8
 8004a0a:	9307      	str	r3, [sp, #28]
 8004a0c:	6963      	ldr	r3, [r4, #20]
 8004a0e:	9a04      	ldr	r2, [sp, #16]
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	6163      	str	r3, [r4, #20]
 8004a14:	e765      	b.n	80048e2 <_svfiprintf_r+0x46>
 8004a16:	4343      	muls	r3, r0
 8004a18:	0035      	movs	r5, r6
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	e7a6      	b.n	800496e <_svfiprintf_r+0xd2>
 8004a20:	2301      	movs	r3, #1
 8004a22:	425b      	negs	r3, r3
 8004a24:	e7d0      	b.n	80049c8 <_svfiprintf_r+0x12c>
 8004a26:	2300      	movs	r3, #0
 8004a28:	200a      	movs	r0, #10
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	3501      	adds	r5, #1
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	7829      	ldrb	r1, [r5, #0]
 8004a32:	1c6e      	adds	r6, r5, #1
 8004a34:	3930      	subs	r1, #48	; 0x30
 8004a36:	2909      	cmp	r1, #9
 8004a38:	d903      	bls.n	8004a42 <_svfiprintf_r+0x1a6>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c5      	beq.n	80049ca <_svfiprintf_r+0x12e>
 8004a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a40:	e7c3      	b.n	80049ca <_svfiprintf_r+0x12e>
 8004a42:	4342      	muls	r2, r0
 8004a44:	0035      	movs	r5, r6
 8004a46:	2301      	movs	r3, #1
 8004a48:	1852      	adds	r2, r2, r1
 8004a4a:	e7f1      	b.n	8004a30 <_svfiprintf_r+0x194>
 8004a4c:	ab07      	add	r3, sp, #28
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	003a      	movs	r2, r7
 8004a52:	0021      	movs	r1, r4
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <_svfiprintf_r+0x1fc>)
 8004a56:	9803      	ldr	r0, [sp, #12]
 8004a58:	e000      	b.n	8004a5c <_svfiprintf_r+0x1c0>
 8004a5a:	bf00      	nop
 8004a5c:	9004      	str	r0, [sp, #16]
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	3301      	adds	r3, #1
 8004a62:	d1d3      	bne.n	8004a0c <_svfiprintf_r+0x170>
 8004a64:	89bb      	ldrh	r3, [r7, #12]
 8004a66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a68:	065b      	lsls	r3, r3, #25
 8004a6a:	d400      	bmi.n	8004a6e <_svfiprintf_r+0x1d2>
 8004a6c:	e72d      	b.n	80048ca <_svfiprintf_r+0x2e>
 8004a6e:	2001      	movs	r0, #1
 8004a70:	4240      	negs	r0, r0
 8004a72:	e72a      	b.n	80048ca <_svfiprintf_r+0x2e>
 8004a74:	ab07      	add	r3, sp, #28
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	003a      	movs	r2, r7
 8004a7a:	0021      	movs	r1, r4
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <_svfiprintf_r+0x1fc>)
 8004a7e:	9803      	ldr	r0, [sp, #12]
 8004a80:	f7ff f976 	bl	8003d70 <_printf_i>
 8004a84:	e7ea      	b.n	8004a5c <_svfiprintf_r+0x1c0>
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	0800515c 	.word	0x0800515c
 8004a8c:	08005162 	.word	0x08005162
 8004a90:	08005166 	.word	0x08005166
 8004a94:	00000000 	.word	0x00000000
 8004a98:	080047d9 	.word	0x080047d9

08004a9c <_sbrk_r>:
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	4d06      	ldr	r5, [pc, #24]	; (8004abc <_sbrk_r+0x20>)
 8004aa2:	0004      	movs	r4, r0
 8004aa4:	0008      	movs	r0, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	f7fb ff3c 	bl	8000924 <_sbrk>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d103      	bne.n	8004ab8 <_sbrk_r+0x1c>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d000      	beq.n	8004ab8 <_sbrk_r+0x1c>
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	200006b0 	.word	0x200006b0

08004ac0 <_raise_r>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	0004      	movs	r4, r0
 8004ac4:	000d      	movs	r5, r1
 8004ac6:	291f      	cmp	r1, #31
 8004ac8:	d904      	bls.n	8004ad4 <_raise_r+0x14>
 8004aca:	2316      	movs	r3, #22
 8004acc:	6003      	str	r3, [r0, #0]
 8004ace:	2001      	movs	r0, #1
 8004ad0:	4240      	negs	r0, r0
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <_raise_r+0x24>
 8004ada:	008a      	lsls	r2, r1, #2
 8004adc:	189b      	adds	r3, r3, r2
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	2a00      	cmp	r2, #0
 8004ae2:	d108      	bne.n	8004af6 <_raise_r+0x36>
 8004ae4:	0020      	movs	r0, r4
 8004ae6:	f000 f831 	bl	8004b4c <_getpid_r>
 8004aea:	002a      	movs	r2, r5
 8004aec:	0001      	movs	r1, r0
 8004aee:	0020      	movs	r0, r4
 8004af0:	f000 f81a 	bl	8004b28 <_kill_r>
 8004af4:	e7ed      	b.n	8004ad2 <_raise_r+0x12>
 8004af6:	2000      	movs	r0, #0
 8004af8:	2a01      	cmp	r2, #1
 8004afa:	d0ea      	beq.n	8004ad2 <_raise_r+0x12>
 8004afc:	1c51      	adds	r1, r2, #1
 8004afe:	d103      	bne.n	8004b08 <_raise_r+0x48>
 8004b00:	2316      	movs	r3, #22
 8004b02:	3001      	adds	r0, #1
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	e7e4      	b.n	8004ad2 <_raise_r+0x12>
 8004b08:	2400      	movs	r4, #0
 8004b0a:	0028      	movs	r0, r5
 8004b0c:	601c      	str	r4, [r3, #0]
 8004b0e:	4790      	blx	r2
 8004b10:	0020      	movs	r0, r4
 8004b12:	e7de      	b.n	8004ad2 <_raise_r+0x12>

08004b14 <raise>:
 8004b14:	b510      	push	{r4, lr}
 8004b16:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <raise+0x10>)
 8004b18:	0001      	movs	r1, r0
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	f7ff ffd0 	bl	8004ac0 <_raise_r>
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	2000000c 	.word	0x2000000c

08004b28 <_kill_r>:
 8004b28:	2300      	movs	r3, #0
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	4d06      	ldr	r5, [pc, #24]	; (8004b48 <_kill_r+0x20>)
 8004b2e:	0004      	movs	r4, r0
 8004b30:	0008      	movs	r0, r1
 8004b32:	0011      	movs	r1, r2
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	f7fb fe73 	bl	8000820 <_kill>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d103      	bne.n	8004b46 <_kill_r+0x1e>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d000      	beq.n	8004b46 <_kill_r+0x1e>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	200006b0 	.word	0x200006b0

08004b4c <_getpid_r>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	f7fb fe61 	bl	8000814 <_getpid>
 8004b52:	bd10      	pop	{r4, pc}

08004b54 <__sread>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	000c      	movs	r4, r1
 8004b58:	250e      	movs	r5, #14
 8004b5a:	5f49      	ldrsh	r1, [r1, r5]
 8004b5c:	f000 f8bc 	bl	8004cd8 <_read_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	db03      	blt.n	8004b6c <__sread+0x18>
 8004b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b66:	181b      	adds	r3, r3, r0
 8004b68:	6563      	str	r3, [r4, #84]	; 0x54
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	4a02      	ldr	r2, [pc, #8]	; (8004b78 <__sread+0x24>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	e7f9      	b.n	8004b6a <__sread+0x16>
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	ffffefff 	.word	0xffffefff

08004b7c <__swrite>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	001f      	movs	r7, r3
 8004b80:	898b      	ldrh	r3, [r1, #12]
 8004b82:	0005      	movs	r5, r0
 8004b84:	000c      	movs	r4, r1
 8004b86:	0016      	movs	r6, r2
 8004b88:	05db      	lsls	r3, r3, #23
 8004b8a:	d505      	bpl.n	8004b98 <__swrite+0x1c>
 8004b8c:	230e      	movs	r3, #14
 8004b8e:	5ec9      	ldrsh	r1, [r1, r3]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2302      	movs	r3, #2
 8004b94:	f000 f874 	bl	8004c80 <_lseek_r>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	4a05      	ldr	r2, [pc, #20]	; (8004bb0 <__swrite+0x34>)
 8004b9c:	0028      	movs	r0, r5
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	0032      	movs	r2, r6
 8004ba4:	230e      	movs	r3, #14
 8004ba6:	5ee1      	ldrsh	r1, [r4, r3]
 8004ba8:	003b      	movs	r3, r7
 8004baa:	f000 f81f 	bl	8004bec <_write_r>
 8004bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb0:	ffffefff 	.word	0xffffefff

08004bb4 <__sseek>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	000c      	movs	r4, r1
 8004bb8:	250e      	movs	r5, #14
 8004bba:	5f49      	ldrsh	r1, [r1, r5]
 8004bbc:	f000 f860 	bl	8004c80 <_lseek_r>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	1c42      	adds	r2, r0, #1
 8004bc4:	d103      	bne.n	8004bce <__sseek+0x1a>
 8004bc6:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <__sseek+0x28>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	0152      	lsls	r2, r2, #5
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8004bd8:	e7f8      	b.n	8004bcc <__sseek+0x18>
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	ffffefff 	.word	0xffffefff

08004be0 <__sclose>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	230e      	movs	r3, #14
 8004be4:	5ec9      	ldrsh	r1, [r1, r3]
 8004be6:	f000 f815 	bl	8004c14 <_close_r>
 8004bea:	bd10      	pop	{r4, pc}

08004bec <_write_r>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	0004      	movs	r4, r0
 8004bf0:	0008      	movs	r0, r1
 8004bf2:	0011      	movs	r1, r2
 8004bf4:	001a      	movs	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4d05      	ldr	r5, [pc, #20]	; (8004c10 <_write_r+0x24>)
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	f7fb fe49 	bl	8000892 <_write>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d103      	bne.n	8004c0c <_write_r+0x20>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d000      	beq.n	8004c0c <_write_r+0x20>
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	bd70      	pop	{r4, r5, r6, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	200006b0 	.word	0x200006b0

08004c14 <_close_r>:
 8004c14:	2300      	movs	r3, #0
 8004c16:	b570      	push	{r4, r5, r6, lr}
 8004c18:	4d06      	ldr	r5, [pc, #24]	; (8004c34 <_close_r+0x20>)
 8004c1a:	0004      	movs	r4, r0
 8004c1c:	0008      	movs	r0, r1
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	f7fb fe53 	bl	80008ca <_close>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d103      	bne.n	8004c30 <_close_r+0x1c>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d000      	beq.n	8004c30 <_close_r+0x1c>
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	200006b0 	.word	0x200006b0

08004c38 <_fstat_r>:
 8004c38:	2300      	movs	r3, #0
 8004c3a:	b570      	push	{r4, r5, r6, lr}
 8004c3c:	4d06      	ldr	r5, [pc, #24]	; (8004c58 <_fstat_r+0x20>)
 8004c3e:	0004      	movs	r4, r0
 8004c40:	0008      	movs	r0, r1
 8004c42:	0011      	movs	r1, r2
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	f7fb fe4a 	bl	80008de <_fstat>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d103      	bne.n	8004c56 <_fstat_r+0x1e>
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d000      	beq.n	8004c56 <_fstat_r+0x1e>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	200006b0 	.word	0x200006b0

08004c5c <_isatty_r>:
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b570      	push	{r4, r5, r6, lr}
 8004c60:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_isatty_r+0x20>)
 8004c62:	0004      	movs	r4, r0
 8004c64:	0008      	movs	r0, r1
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fb fe47 	bl	80008fa <_isatty>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_isatty_r+0x1c>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <_isatty_r+0x1c>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	200006b0 	.word	0x200006b0

08004c80 <_lseek_r>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	0004      	movs	r4, r0
 8004c84:	0008      	movs	r0, r1
 8004c86:	0011      	movs	r1, r2
 8004c88:	001a      	movs	r2, r3
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	4d05      	ldr	r5, [pc, #20]	; (8004ca4 <_lseek_r+0x24>)
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	f7fb fe3c 	bl	800090c <_lseek>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d103      	bne.n	8004ca0 <_lseek_r+0x20>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d000      	beq.n	8004ca0 <_lseek_r+0x20>
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	200006b0 	.word	0x200006b0

08004ca8 <__malloc_lock>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <__malloc_lock+0xc>)
 8004cac:	f7ff fc39 	bl	8004522 <__retarget_lock_acquire_recursive>
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	200006a8 	.word	0x200006a8

08004cb8 <__malloc_unlock>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4802      	ldr	r0, [pc, #8]	; (8004cc4 <__malloc_unlock+0xc>)
 8004cbc:	f7ff fc32 	bl	8004524 <__retarget_lock_release_recursive>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	200006a8 	.word	0x200006a8

08004cc8 <_malloc_usable_size_r>:
 8004cc8:	1f0b      	subs	r3, r1, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	1f18      	subs	r0, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da01      	bge.n	8004cd6 <_malloc_usable_size_r+0xe>
 8004cd2:	580b      	ldr	r3, [r1, r0]
 8004cd4:	18c0      	adds	r0, r0, r3
 8004cd6:	4770      	bx	lr

08004cd8 <_read_r>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	0004      	movs	r4, r0
 8004cdc:	0008      	movs	r0, r1
 8004cde:	0011      	movs	r1, r2
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4d05      	ldr	r5, [pc, #20]	; (8004cfc <_read_r+0x24>)
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f7fb fdb6 	bl	8000858 <_read>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d103      	bne.n	8004cf8 <_read_r+0x20>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d000      	beq.n	8004cf8 <_read_r+0x20>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	200006b0 	.word	0x200006b0

08004d00 <_init>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

08004d0c <_fini>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr
